// Copyright (c) 2024 Tekin Tontu. All rights reserved.
// Use of self source code is governed by the MIT license
// a copy of which can be found in the LICENSE file.

module textures_raw_data;
import raylib5::rl;

fn int main()
{

    int screenWidth = 800;
    int screenHeight = 450;

    rl::initWindow(screenWidth, screenHeight, "raylib [textures] example - texture from raw data");

    // Load RAW image data (512x512, 32bit RGBA, no file header)
    rl::Image fudesumiRaw = rl::loadImageRaw("resources/fudesumi.raw", 384, 512, rl::PixelFormat.UNCOMPRESSED_R8G8B8A8.ordinal, 0);
    rl::Texture2D fudesumi = rl::loadTextureFromImage(fudesumiRaw);  // Upload CPU (RAM) image to GPU (VRAM)
    rl::unloadImage(fudesumiRaw);                                // Unload CPU (RAM) image data

    // Generate a checked texture by code
    int width = 960;
    int height = 480;
    int check_w = 32;
    int check_h = 64;

    // Dynamic memory allocation to store pixels data (Color type)
    Color *pixels = (Color *)malloc((long)width*height*Color.sizeof);

    for (int y = 0; y < height; y++)
    {
        for (int x = 0; x < width; x++)
        {
            if (((x/check_w+y/check_h)/1)%2 == 0) { pixels[y*width + x] = rl::ORANGE; }
            else  { pixels[y*width + x] = rl::GOLD; }
        }
    }

    // Load pixels data into an image structure and create texture
    rl::Image checkedIm = {
        .data = pixels,             // We can assign pixels directly to data
        .width = width,
        .height = height,
        .format = rl::PixelFormat.UNCOMPRESSED_R8G8B8A8,
        .mipmaps = 1
    };

    rl::Texture2D checked = rl::loadTextureFromImage(checkedIm);
    rl::unloadImage(checkedIm);         // Unload CPU (RAM) image data (pixels)

    rl::setTargetFPS(60);

    while (!rl::windowShouldClose())
    {


        rl::beginDrawing();
        rl::clearBackground(rl::RAYWHITE);

        rl::drawTexture(checked, screenWidth/2 - checked.width/2, screenHeight/2 - checked.height/2, rl::fade(rl::WHITE, 0.5f));
        rl::drawTexture(fudesumi, 430, -30, rl::WHITE);

        rl::drawText("CHECKED TEXTURE ", 84, 85, 30, rl::BROWN);
        rl::drawText("GENERATED by CODE", 72, 148, 30, rl::BROWN);
        rl::drawText("and RAW IMAGE LOADING", 46, 210, 30, rl::BROWN);

        rl::drawText("(c) Fudesumi sprite by Eiden Marsal", 310, screenHeight - 20, 10, rl::BROWN);

        rl::endDrawing();

    }

    // De-Initialization
    rl::unloadTexture(fudesumi);    // Texture unloading
    rl::unloadTexture(checked);     // Texture unloading
    rl::closeWindow();

    return 0;

}
