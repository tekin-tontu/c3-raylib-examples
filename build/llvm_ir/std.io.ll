; ModuleID = 'std::io'
source_filename = "std::io"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-apple-macosx15.0"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%File = type { ptr }
%any = type { ptr, i64 }
%LimitReader = type { %any, i64 }
%"any[]" = type { ptr, i64 }
%ByteWriter = type { %"char[]", i64, %any }
%ByteBuffer = type { %any, i64, %"char[]", i64, i64, i8 }
%ReadBuffer = type { %any, %"char[]", i64, i64 }
%WriteBuffer = type { %any, %"char[]", i64 }
%ByteReader = type { %"char[]", i64 }
%MultiReader = type { %"any[]", i64, %any }
%Scanner = type { %any, %"char[]", i64, i64 }
%MultiWriter = type { %"any[]", %any }
%TeeReader = type { %any, %any }
%Formatter = type { ptr, ptr, %.anon }
%.anon = type { i32, i32, i32, i64, i64 }
%BufferData = type { %"char[]", i64 }
%OnStackAllocator = type { %any, %"char[]", i64, ptr }
%"char[][]" = type { ptr, i64 }
%BitReader = type { %any, i32, i32 }
%BitWriter = type { %any, i32, i32 }

@"$ct.std.io.File" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.LimitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.ByteWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.ByteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 6, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.ReadBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.WriteBuffer" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.ByteReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.MultiReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.Scanner" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.MultiWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.TeeReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"std.io.FormattingFault$BAD_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.FormattingFault" to i64), %"char[]" { ptr @.fault, i64 10 }, i64 1 }, align 8
@.fault = internal constant [11 x i8] c"BAD_FORMAT\00", align 1
@"$ct.std.io.FormattingFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.enum.FLOAT = internal constant [6 x i8] c"FLOAT\00", align 1
@.enum.EXPONENTIAL = internal constant [12 x i8] c"EXPONENTIAL\00", align 1
@.enum.ADAPTIVE = internal constant [9 x i8] c"ADAPTIVE\00", align 1
@.enum.HEX = internal constant [4 x i8] c"HEX\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.FloatFormatting" = linkonce global { i8, i64, ptr, i64, i64, i64, [4 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 4, [4 x %"char[]"] [%"char[]" { ptr @.enum.FLOAT, i64 5 }, %"char[]" { ptr @.enum.EXPONENTIAL, i64 11 }, %"char[]" { ptr @.enum.ADAPTIVE, i64 8 }, %"char[]" { ptr @.enum.HEX, i64 3 }] }, align 8
@"std.io.IoError$ALREADY_EXISTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.1, i64 14 }, i64 1 }, align 8
@.fault.1 = internal constant [15 x i8] c"ALREADY_EXISTS\00", align 1
@"std.io.IoError$BUSY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.2, i64 4 }, i64 2 }, align 8
@.fault.2 = internal constant [5 x i8] c"BUSY\00", align 1
@"std.io.IoError$CANNOT_READ_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.3, i64 15 }, i64 3 }, align 8
@.fault.3 = internal constant [16 x i8] c"CANNOT_READ_DIR\00", align 1
@"std.io.IoError$DIR_NOT_EMPTY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.4, i64 13 }, i64 4 }, align 8
@.fault.4 = internal constant [14 x i8] c"DIR_NOT_EMPTY\00", align 1
@"std.io.IoError$EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.5, i64 3 }, i64 5 }, align 8
@.fault.5 = internal constant [4 x i8] c"EOF\00", align 1
@"std.io.IoError$FILE_CANNOT_DELETE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.6, i64 18 }, i64 6 }, align 8
@.fault.6 = internal constant [19 x i8] c"FILE_CANNOT_DELETE\00", align 1
@"std.io.IoError$FILE_IS_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.7, i64 11 }, i64 7 }, align 8
@.fault.7 = internal constant [12 x i8] c"FILE_IS_DIR\00", align 1
@"std.io.IoError$FILE_IS_PIPE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.8, i64 12 }, i64 8 }, align 8
@.fault.8 = internal constant [13 x i8] c"FILE_IS_PIPE\00", align 1
@"std.io.IoError$FILE_NOT_DIR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.9, i64 12 }, i64 9 }, align 8
@.fault.9 = internal constant [13 x i8] c"FILE_NOT_DIR\00", align 1
@"std.io.IoError$FILE_NOT_FOUND" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.10, i64 14 }, i64 10 }, align 8
@.fault.10 = internal constant [15 x i8] c"FILE_NOT_FOUND\00", align 1
@"std.io.IoError$FILE_NOT_VALID" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.11, i64 14 }, i64 11 }, align 8
@.fault.11 = internal constant [15 x i8] c"FILE_NOT_VALID\00", align 1
@"std.io.IoError$GENERAL_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.12, i64 13 }, i64 12 }, align 8
@.fault.12 = internal constant [14 x i8] c"GENERAL_ERROR\00", align 1
@"std.io.IoError$ILLEGAL_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.13, i64 16 }, i64 13 }, align 8
@.fault.13 = internal constant [17 x i8] c"ILLEGAL_ARGUMENT\00", align 1
@"std.io.IoError$INCOMPLETE_WRITE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.14, i64 16 }, i64 14 }, align 8
@.fault.14 = internal constant [17 x i8] c"INCOMPLETE_WRITE\00", align 1
@"std.io.IoError$INTERRUPTED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.15, i64 11 }, i64 15 }, align 8
@.fault.15 = internal constant [12 x i8] c"INTERRUPTED\00", align 1
@"std.io.IoError$INVALID_POSITION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.16, i64 16 }, i64 16 }, align 8
@.fault.16 = internal constant [17 x i8] c"INVALID_POSITION\00", align 1
@"std.io.IoError$INVALID_PUSHBACK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.17, i64 16 }, i64 17 }, align 8
@.fault.17 = internal constant [17 x i8] c"INVALID_PUSHBACK\00", align 1
@"std.io.IoError$NAME_TOO_LONG" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.18, i64 13 }, i64 18 }, align 8
@.fault.18 = internal constant [14 x i8] c"NAME_TOO_LONG\00", align 1
@"std.io.IoError$NOT_SEEKABLE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.19, i64 12 }, i64 19 }, align 8
@.fault.19 = internal constant [13 x i8] c"NOT_SEEKABLE\00", align 1
@"std.io.IoError$NO_PERMISSION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.20, i64 13 }, i64 20 }, align 8
@.fault.20 = internal constant [14 x i8] c"NO_PERMISSION\00", align 1
@"std.io.IoError$OUT_OF_SPACE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.21, i64 12 }, i64 21 }, align 8
@.fault.21 = internal constant [13 x i8] c"OUT_OF_SPACE\00", align 1
@"std.io.IoError$OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.22, i64 8 }, i64 22 }, align 8
@.fault.22 = internal constant [9 x i8] c"OVERFLOW\00", align 1
@"std.io.IoError$READ_ONLY" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.23, i64 9 }, i64 23 }, align 8
@.fault.23 = internal constant [10 x i8] c"READ_ONLY\00", align 1
@"std.io.IoError$SYMLINK_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.24, i64 14 }, i64 24 }, align 8
@.fault.24 = internal constant [15 x i8] c"SYMLINK_FAILED\00", align 1
@"std.io.IoError$TOO_MANY_DESCRIPTORS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.25, i64 20 }, i64 25 }, align 8
@.fault.25 = internal constant [21 x i8] c"TOO_MANY_DESCRIPTORS\00", align 1
@"std.io.IoError$UNEXPECTED_EOF" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.26, i64 14 }, i64 26 }, align 8
@.fault.26 = internal constant [15 x i8] c"UNEXPECTED_EOF\00", align 1
@"std.io.IoError$UNKNOWN_ERROR" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.27, i64 13 }, i64 27 }, align 8
@.fault.27 = internal constant [14 x i8] c"UNKNOWN_ERROR\00", align 1
@"std.io.IoError$UNSUPPORTED_OPERATION" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.28, i64 21 }, i64 28 }, align 8
@.fault.28 = internal constant [22 x i8] c"UNSUPPORTED_OPERATION\00", align 1
@"std.io.IoError$WOULD_BLOCK" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.IoError" to i64), %"char[]" { ptr @.fault.29, i64 11 }, i64 29 }, align 8
@.fault.29 = internal constant [12 x i8] c"WOULD_BLOCK\00", align 1
@"$ct.std.io.IoError" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 29, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.BufferData" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.enum.SET = internal constant [4 x i8] c"SET\00", align 1
@.enum.CURSOR = internal constant [7 x i8] c"CURSOR\00", align 1
@.enum.END = internal constant [4 x i8] c"END\00", align 1
@"$ct.std.io.Seek" = linkonce global { i8, i64, ptr, i64, i64, i64, [3 x %"char[]"] } { i8 8, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.int" to i64), i64 3, [3 x %"char[]"] [%"char[]" { ptr @.enum.SET, i64 3 }, %"char[]" { ptr @.enum.CURSOR, i64 6 }, %"char[]" { ptr @.enum.END, i64 3 }] }, align 8
@"std.io.PrintFault$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.30, i64 15 }, i64 1 }, align 8
@.fault.30 = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.31, i64 24 }, i64 2 }, align 8
@.fault.31 = internal constant [25 x i8] c"INTERNAL_BUFFER_EXCEEDED\00", align 1
@"std.io.PrintFault$INVALID_FORMAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.32, i64 14 }, i64 3 }, align 8
@.fault.32 = internal constant [15 x i8] c"INVALID_FORMAT\00", align 1
@"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.33, i64 20 }, i64 4 }, align 8
@.fault.33 = internal constant [21 x i8] c"NOT_ENOUGH_ARGUMENTS\00", align 1
@"std.io.PrintFault$INVALID_ARGUMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.io.PrintFault" to i64), %"char[]" { ptr @.fault.34, i64 16 }, i64 5 }, align 8
@.fault.34 = internal constant [17 x i8] c"INVALID_ARGUMENT\00", align 1
@"$ct.std.io.PrintFault" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 5, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.$anon" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 5, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.Formatter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.PrintFlags" = linkonce global %.introspect { i8 12, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.BitReader" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"$ct.std.io.BitWriter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@.panic_msg = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file = internal constant [15 x i8] c"limitreader.c3\00", align 1
@.func = internal constant [5 x i8] c"init\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.36 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.37 = internal constant [6 x i8] c"close\00", align 1
@"$sel.close" = linkonce_odr constant [6 x i8] c"close\00", align 1
@.panic_msg.38 = internal constant [43 x i8] c"No method 'close' could be found on target\00", align 1
@.func.39 = internal constant [5 x i8] c"read\00", align 1
@"$sel.read" = linkonce_odr constant [5 x i8] c"read\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.40 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.panic_msg.41 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.panic_msg.42 = internal constant [42 x i8] c"No method 'read' could be found on target\00", align 1
@.func.43 = internal constant [10 x i8] c"read_byte\00", align 1
@"$sel.read_byte" = linkonce_odr constant [10 x i8] c"read_byte\00", align 1
@.panic_msg.44 = internal constant [47 x i8] c"No method 'read_byte' could be found on target\00", align 1
@.func.45 = internal constant [10 x i8] c"available\00", align 1
@.file.46 = internal constant [14 x i8] c"bytewriter.c3\00", align 1
@.func.47 = internal constant [9 x i8] c"new_init\00", align 1
@.panic_msg.48 = internal constant [89 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.49 = internal constant [53 x i8] c"@ensure \22(bool)allocator, self.index == 0\22 violated.\00", align 1
@.func.50 = internal constant [10 x i8] c"temp_init\00", align 1
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, align 8
@.panic_msg.51 = internal constant [36 x i8] c"@ensure \22self.index == 0\22 violated.\00", align 1
@.func.52 = internal constant [17 x i8] c"init_with_buffer\00", align 1
@"$ct.void" = linkonce global %.introspect { i8 0, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.func.53 = internal constant [8 x i8] c"destroy\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", align 1
@.panic_msg.54 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@.file.55 = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func.56 = internal constant [9 x i8] c"str_view\00", align 1
@.func.57 = internal constant [16 x i8] c"ensure_capacity\00", align 1
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", align 1
@.panic_msg.58 = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", align 1
@.panic_msg.59 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.func.60 = internal constant [6 x i8] c"write\00", align 1
@.panic_msg.61 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.62 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.63 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.64 = internal constant [11 x i8] c"write_byte\00", align 1
@.func.65 = internal constant [10 x i8] c"read_from\00", align 1
@"$sel.available" = linkonce_odr constant [10 x i8] c"available\00", align 1
@.panic_msg.66 = internal constant [47 x i8] c"No method 'available' could be found on target\00", align 1
@.file.67 = internal constant [14 x i8] c"bytebuffer.c3\00", align 1
@.panic_msg.68 = internal constant [72 x i8] c"@require \22self.bytes.len == 0\22 violated: 'Buffer already initialized.'.\00", align 1
@.panic_msg.69 = internal constant [33 x i8] c"@require \22buf.len > 0\22 violated.\00", align 1
@.func.70 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.71 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.72 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.func.73 = internal constant [14 x i8] c"pushback_byte\00", align 1
@.panic_msg.74 = internal constant [17 x i8] c"Assert violation\00", align 1
@.func.75 = internal constant [5 x i8] c"seek\00", align 1
@.func.76 = internal constant [5 x i8] c"grow\00", align 1
@.file.77 = internal constant [10 x i8] c"buffer.c3\00", align 1
@.panic_msg.78 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.func.79 = internal constant [7 x i8] c"refill\00", align 1
@.panic_msg.80 = internal constant [64 x i8] c"@require \22bytes.len > 0\22 violated: 'Non-empty buffer required'.\00", align 1
@.func.81 = internal constant [6 x i8] c"flush\00", align 1
@"$sel.flush" = linkonce_odr constant [6 x i8] c"flush\00", align 1
@.panic_msg.82 = internal constant [43 x i8] c"No method 'flush' could be found on target\00", align 1
@"$sel.write" = linkonce_odr constant [6 x i8] c"write\00", align 1
@.panic_msg.83 = internal constant [43 x i8] c"No method 'write' could be found on target\00", align 1
@.func.84 = internal constant [14 x i8] c"write_pending\00", align 1
@.file.85 = internal constant [14 x i8] c"bytereader.c3\00", align 1
@.func.86 = internal constant [4 x i8] c"len\00", align 1
@.func.87 = internal constant [9 x i8] c"write_to\00", align 1
@.file.88 = internal constant [15 x i8] c"multireader.c3\00", align 1
@.panic_msg.89 = internal constant [91 x i8] c"@require \22self.readers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.90 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@.file.91 = internal constant [11 x i8] c"scanner.c3\00", align 1
@.panic_msg.92 = internal constant [66 x i8] c"@require \22buffer.len > 0\22 violated: 'Non-empty buffer required.'.\00", align 1
@.func.93 = internal constant [5 x i8] c"scan\00", align 1
@.panic_msg.94 = internal constant [68 x i8] c"@require \22pattern.len > 0\22 violated: 'Non-empty pattern required.'.\00", align 1
@.panic_msg.95 = internal constant [70 x i8] c"@require \22self.buf.len > pattern.len\22 violated: 'Pattern too large.'.\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.96, i64 7 }, i64 1 }, align 8
@.fault.96 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@.file.97 = internal constant [15 x i8] c"multiwriter.c3\00", align 1
@.panic_msg.98 = internal constant [37 x i8] c"@require \22writers.len > 0\22 violated.\00", align 1
@.panic_msg.99 = internal constant [91 x i8] c"@require \22self.writers.len == 0\22 violated: 'Init may not run on already initialized data'.\00", align 1
@.panic_msg.100 = internal constant [54 x i8] c"Dereference of null pointer, 'self.writers' was null.\00", align 1
@.file.101 = internal constant [13 x i8] c"teereader.c3\00", align 1
@std.io.XDIGITS_H = weak constant [16 x i8] c"0123456789ABCDEF", align 1, !dbg !0
@std.io.XDIGITS_L = weak constant [16 x i8] c"0123456789abcdef", align 1, !dbg !7
@.file.103 = internal constant [21 x i8] c"formatter_private.c3\00", align 1
@.func.104 = internal constant [16 x i8] c"print_hex_chars\00", align 1
@.panic_msg.105 = internal constant [48 x i8] c"Dereference of null pointer, 'is_neg' was null.\00", align 1
@.func.106 = internal constant [13 x i8] c"int_from_any\00", align 1
@.panic_msg.107 = internal constant [56 x i8] c"Dereference of null pointer, 'void**)arg.ptr' was null.\00", align 1
@.file.108 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.panic_msg.109 = internal constant [50 x i8] c"Attempted to access 'inner' on non composite type\00", align 1
@"$ct.bool" = linkonce global %.introspect { i8 1, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.110 = internal constant [45 x i8] c"Dereference of null pointer, 'arg' was null.\00", align 1
@"$ct.ichar" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.short" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.int128" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.float" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.double" = linkonce global %.introspect { i8 4, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.func.111 = internal constant [15 x i8] c"float_from_any\00", align 1
@.panic_msg.112 = internal constant [49 x i8] c"Dereference of null pointer, 'len_ptr' was null.\00", align 1
@.func.113 = internal constant [12 x i8] c"simple_atoi\00", align 1
@.panic_msg.114 = internal constant [45 x i8] c"Dereference of null pointer, '--s' was null.\00", align 1
@.func.115 = internal constant [6 x i8] c"fmt_u\00", align 1
@.panic_msg.116 = internal constant [51 x i8] c"Dereference of null pointer, 'index_ptr' was null.\00", align 1
@.func.117 = internal constant [26 x i8] c"printf_parse_format_field\00", align 1
@.panic_msg.118 = internal constant [56 x i8] c"Dereference of null pointer, 'args_index_ptr' was null.\00", align 1
@.panic_msg.119 = internal constant [70 x i8] c"@require \22$Type.kindof.is_int()\22 violated: 'Type was not an integer'.\00", align 1
@.file.120 = internal constant [9 x i8] c"types.c3\00", align 1
@.panic_msg.121 = internal constant [72 x i8] c"@require \22v.type.kindof.is_int()\22 violated: 'Value was not an integer'.\00", align 1
@.panic_msg.122 = internal constant [53 x i8] c"Dereference of null pointer, 'char*)v.ptr' was null.\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.123, i64 18 }, i64 1 }, align 8
@.fault.123 = internal constant [19 x i8] c"VALUE_OUT_OF_RANGE\00", align 1
@"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.types.ConversionResult" to i64), %"char[]" { ptr @.fault.124, i64 27 }, i64 2 }, align 8
@.fault.124 = internal constant [28 x i8] c"VALUE_OUT_OF_UNSIGNED_RANGE\00", align 1
@"$ct.std.core.types.ConversionResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@.panic_msg.125 = internal constant [54 x i8] c"Dereference of null pointer, 'short*)v.ptr' was null.\00", align 1
@.panic_msg.126 = internal constant [52 x i8] c"Dereference of null pointer, 'int*)v.ptr' was null.\00", align 1
@.panic_msg.127 = internal constant [53 x i8] c"Dereference of null pointer, 'long*)v.ptr' was null.\00", align 1
@.panic_msg.128 = internal constant [55 x i8] c"Dereference of null pointer, 'int128*)v.ptr' was null.\00", align 1
@.panic_msg.129 = internal constant [55 x i8] c"Dereference of null pointer, 'ushort*)v.ptr' was null.\00", align 1
@.panic_msg.130 = internal constant [53 x i8] c"Dereference of null pointer, 'uint*)v.ptr' was null.\00", align 1
@.panic_msg.131 = internal constant [54 x i8] c"Dereference of null pointer, 'ulong*)v.ptr' was null.\00", align 1
@.panic_msg.132 = internal constant [56 x i8] c"Dereference of null pointer, 'uint128*)v.ptr' was null.\00", align 1
@.str = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.133 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.134 = private unnamed_addr constant [26 x i8] c"printf_parse_format_field\00", align 1
@.func.135 = internal constant [7 x i8] c"adjust\00", align 1
@.func.136 = internal constant [11 x i8] c"out_substr\00", align 1
@.func.137 = internal constant [4 x i8] c"pad\00", align 1
@.func.138 = internal constant [10 x i8] c"out_chars\00", align 1
@.func.139 = internal constant [5 x i8] c"etoa\00", align 1
@.func.140 = internal constant [5 x i8] c"ftoa\00", align 1
@.func.141 = internal constant [5 x i8] c"gtoa\00", align 1
@.func.142 = internal constant [5 x i8] c"atoa\00", align 1
@.func.143 = internal constant [12 x i8] c"floatformat\00", align 1
@floatformat.BUF_SIZE = internal unnamed_addr constant i32 126, align 4, !dbg !9
@.panic_msg.144 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.str.145 = private unnamed_addr constant [4 x i8] c"INF\00", align 1
@.str.146 = private unnamed_addr constant [4 x i8] c"inf\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.148 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.149 = internal constant [48 x i8] c"Dereference of null pointer, '--estr' was null.\00", align 1
@.panic_msg.150 = internal constant [45 x i8] c"Dereference of null pointer, 's++' was null.\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"0X\00", align 1
@.str.152 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.153 = internal constant [43 x i8] c"Dereference of null pointer, 'd' was null.\00", align 1
@.panic_msg.154 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.155 = internal constant [45 x i8] c"Dereference of null pointer, '--a' was null.\00", align 1
@.panic_msg.156 = internal constant [43 x i8] c"Dereference of null pointer, 'a' was null.\00", align 1
@.panic_msg.157 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.158 = internal constant [18 x i8] c"Division by zero.\00", align 1
@.panic_msg.159 = internal constant [45 x i8] c"Dereference of null pointer, 'd--' was null.\00", align 1
@.func.160 = internal constant [5 x i8] c"ntoa\00", align 1
@.func.161 = internal constant [12 x i8] c"ntoa_format\00", align 1
@.str.162 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.163 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.164 = private unnamed_addr constant [22 x i8] c"Formatter.ntoa_format\00", align 1
@.func.165 = internal constant [9 x i8] c"ntoa_any\00", align 1
@.func.166 = internal constant [9 x i8] c"out_char\00", align 1
@.str.167 = private unnamed_addr constant [11 x i8] c"<NOT CHAR>\00", align 1
@.str.168 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.169 = private unnamed_addr constant [21 x i8] c"formatter_private.c3\00", align 1
@.str.170 = private unnamed_addr constant [19 x i8] c"Formatter.out_char\00", align 1
@.func.171 = internal constant [12 x i8] c"out_reverse\00", align 1
@"$sel.write_byte" = linkonce_odr constant [11 x i8] c"write_byte\00", align 1
@.panic_msg.172 = internal constant [48 x i8] c"No method 'write_byte' could be found on target\00", align 1
@.file.173 = internal constant [6 x i8] c"io.c3\00", align 1
@.func.174 = internal constant [9 x i8] c"fprintfn\00", align 1
@.panic_msg.175 = internal constant [48 x i8] c"Dereference of null pointer, 'stream' was null.\00", align 1
@.func.176 = internal constant [17 x i8] c"out_putstream_fn\00", align 1
@.func.177 = internal constant [8 x i8] c"bprintf\00", align 1
@.func.178 = internal constant [14 x i8] c"out_buffer_fn\00", align 1
@stdout.file = internal global %File zeroinitializer, align 8, !dbg !12
@__stdoutp = external global ptr, align 8
@stderr.file = internal global %File zeroinitializer, align 8, !dbg !20
@__stderrp = external global ptr, align 8
@stdin.file = internal global %File zeroinitializer, align 8, !dbg !22
@__stdinp = external global ptr, align 8
@std.io.MAX_VARS = internal unnamed_addr constant { [2 x i8], i8, i8, i8, [3 x i8], i8 } { [2 x i8] zeroinitializer, i8 3, i8 0, i8 5, [3 x i8] zeroinitializer, i8 10 }, align 1, !dbg !24
@.file.179 = internal constant [10 x i8] c"stream.c3\00", align 1
@"$sel.seek" = linkonce_odr constant [5 x i8] c"seek\00", align 1
@.panic_msg.180 = internal constant [42 x i8] c"No method 'seek' could be found on target\00", align 1
@.func.181 = internal constant [8 x i8] c"copy_to\00", align 1
@"$sel.write_to" = linkonce_odr constant [9 x i8] c"write_to\00", align 1
@.panic_msg.182 = internal constant [46 x i8] c"No method 'write_to' could be found on target\00", align 1
@"$sel.read_to" = linkonce_odr constant [8 x i8] c"read_to\00", align 1
@.panic_msg.183 = internal constant [45 x i8] c"No method 'read_to' could be found on target\00", align 1
@std.io.PRINTF_NTOA_BUFFER_SIZE = weak local_unnamed_addr constant i32 256, align 4, !dbg !30
@.file.184 = internal constant [13 x i8] c"formatter.c3\00", align 1
@.func.185 = internal constant [10 x i8] c"to_format\00", align 1
@.str.186 = private unnamed_addr constant [17 x i8] c"[Parameter '%s']\00", align 1
@"$ct.String" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.sa$char" to i64), ptr null, i64 16, i64 ptrtoint (ptr @"$ct.sa$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.sa$char" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.func.187 = internal constant [7 x i8] c"printf\00", align 1
@.func.188 = internal constant [4 x i8] c"out\00", align 1
@.panic_msg.189 = internal constant [55 x i8] c"Calling null function pointer, 'self.out_fn' was null.\00", align 1
@.func.190 = internal constant [20 x i8] c"print_with_function\00", align 1
@"$sel.to_format" = linkonce_odr constant [10 x i8] c"to_format\00", align 1
@.str.191 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.192 = internal constant [47 x i8] c"No method 'to_format' could be found on target\00", align 1
@"$sel.to_string" = linkonce_odr constant [10 x i8] c"to_string\00", align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$ct.std.core.mem.allocator.OnStackAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@.panic_msg.194 = internal constant [47 x i8] c"No method 'to_string' could be found on target\00", align 1
@.func.195 = internal constant [8 x i8] c"out_str\00", align 1
@.str.196 = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@.str.197 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@.panic_msg.198 = internal constant [59 x i8] c"Dereference of null pointer, 'anyfault*)arg.ptr' was null.\00", align 1
@.panic_msg.199 = internal constant [50 x i8] c"Dereference of null pointer, 'any*)arg' was null.\00", align 1
@.str.200 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.201 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.202 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.203 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.204 = private unnamed_addr constant [4 x i8] c"ERR\00", align 1
@.panic_msg.205 = internal constant [55 x i8] c"Dereference of null pointer, 'bool*)arg.ptr' was null.\00", align 1
@.str.206 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.panic_msg.208 = internal constant [68 x i8] c"@require \22v.type.kindof == ENUM\22 violated: 'Value was not an enum'.\00", align 1
@.str.209 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.210 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.211 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.panic_msg.212 = internal constant [52 x i8] c"Attempted to access 'names' on non enum/fault type.\00", align 1
@.panic_msg.213 = internal constant [50 x i8] c"Illegal enum value found, numerical value was %d.\00", align 1
@.str.214 = private unnamed_addr constant [9 x i8] c"<struct>\00", align 1
@.str.215 = private unnamed_addr constant [8 x i8] c"<union>\00", align 1
@.str.216 = private unnamed_addr constant [12 x i8] c"<bitstruct>\00", align 1
@.str.217 = private unnamed_addr constant [11 x i8] c"<function>\00", align 1
@.panic_msg.218 = internal constant [53 x i8] c"Dereference of null pointer, 'String*)arg' was null.\00", align 1
@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.219 = internal constant [54 x i8] c"Dereference of null pointer, 'ZString*)arg' was null.\00", align 1
@.panic_msg.220 = internal constant [55 x i8] c"Dereference of null pointer, 'ZString*)arg)' was null.\00", align 1
@.str.221 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@"$ct.std.core.dstring.DString" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.p$std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.std.core.dstring.DStringOpaque" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.core.dstring.DStringOpaque" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 1, i64 ptrtoint (ptr @"$ct.void" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.222 = internal constant [54 x i8] c"Dereference of null pointer, 'DString*)arg' was null.\00", align 1
@.panic_msg.223 = internal constant [55 x i8] c"Dereference of null pointer, 'DString*)arg)' was null.\00", align 1
@.str.224 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.panic_msg.225 = internal constant [49 x i8] c"Dereference of null pointer, 'pointer' was null.\00", align 1
@.str.226 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.panic_msg.227 = internal constant [44 x i8] c"Attempted to access 'len' on non array type\00", align 1
@.str.228 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.229 = private unnamed_addr constant [3 x i8] c"[<\00", align 1
@.str.230 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.231 = private unnamed_addr constant [3 x i8] c">]\00", align 1
@.panic_msg.232 = internal constant [46 x i8] c"Dereference of null pointer, 'temp' was null.\00", align 1
@.str.233 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.234 = private unnamed_addr constant [16 x i8] c"Already handled\00", align 1
@.str.235 = private unnamed_addr constant [13 x i8] c"formatter.c3\00", align 1
@.str.236 = private unnamed_addr constant [18 x i8] c"Formatter.out_str\00", align 1
@.str.237 = private unnamed_addr constant [13 x i8] c"Invalid type\00", align 1
@.func.238 = internal constant [8 x i8] c"vprintf\00", align 1
@.str.239 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.240 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.241 = private unnamed_addr constant [5 x i8] c"%ERR\00", align 1
@.str.242 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.243 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.244 = private unnamed_addr constant [10 x i8] c"<MISSING>\00", align 1
@.str.245 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.246 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.247 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.248 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.panic_msg.249 = internal constant [49 x i8] c"Dereference of null pointer, 'current' was null.\00", align 1
@"$ct.sa$ichar" = linkonce global %.introspect { i8 16, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.ichar" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.250 = internal constant [57 x i8] c"Dereference of null pointer, 'char[]*)current' was null.\00", align 1
@.str.251 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.str.252 = private unnamed_addr constant [13 x i8] c"<BAD FORMAT>\00", align 1
@.str.253 = private unnamed_addr constant [10 x i8] c"<INVALID>\00", align 1
@.func.254 = internal constant [6 x i8] c"print\00", align 1
@std.io.WRITER_BITS = weak local_unnamed_addr constant i32 24, align 4, !dbg !33
@.file.255 = internal constant [8 x i8] c"bits.c3\00", align 1
@.func.256 = internal constant [6 x i8] c"clear\00", align 1
@.func.257 = internal constant [10 x i8] c"read_bits\00", align 1
@.panic_msg.258 = internal constant [32 x i8] c"@require \22nbits <= 8\22 violated.\00", align 1
@.panic_msg.259 = internal constant [57 x i8] c"@require \22self.len + nbits <= uint.sizeof * 8\22 violated.\00", align 1
@.panic_msg.260 = internal constant [118 x i8] c"@require \22is_arrayptr_or_slice_of_char(bytes)\22 violated: 'argument must be a pointer to an array or a slice of char'.\00", align 1
@.file.261 = internal constant [12 x i8] c"bitorder.c3\00", align 1
@.panic_msg.262 = internal constant [47 x i8] c"Dereference of null pointer, 'bytes' was null.\00", align 1
@.panic_msg.263 = internal constant [59 x i8] c"Dereference of null pointer, '$typeof(x)*)s.ptr' was null.\00", align 1
@.func.264 = internal constant [11 x i8] c"write_bits\00", align 1
@.panic_msg.265 = internal constant [33 x i8] c"@require \22nbits <= 32\22 violated.\00", align 1
@"$sel.destroy" = linkonce_odr constant [8 x i8] c"destroy\00", align 1
@"$sel.read_from" = linkonce_odr constant [10 x i8] c"read_from\00", align 1
@"$sel.pushback_byte" = linkonce_odr constant [14 x i8] c"pushback_byte\00", align 1
@"$sel.len" = linkonce_odr constant [4 x i8] c"len\00", align 1
@"$ct.ReflectedParam" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 24, i64 0, i64 2, [0 x i64] zeroinitializer }, align 8
@"$c3_dynamic" = internal global [40 x { ptr, ptr, i64 }] [{ ptr, ptr, i64 } { ptr @std.io.LimitReader.close, ptr @"$sel.close", i64 ptrtoint (ptr @"$ct.std.io.LimitReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.LimitReader.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.LimitReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.LimitReader.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.LimitReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.LimitReader.available, ptr @"$sel.available", i64 ptrtoint (ptr @"$ct.std.io.LimitReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteWriter.destroy, ptr @"$sel.destroy", i64 ptrtoint (ptr @"$ct.std.io.ByteWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteWriter.write, ptr @"$sel.write", i64 ptrtoint (ptr @"$ct.std.io.ByteWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteWriter.write_byte, ptr @"$sel.write_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteWriter.read_from, ptr @"$sel.read_from", i64 ptrtoint (ptr @"$ct.std.io.ByteWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.write, ptr @"$sel.write", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.write_byte, ptr @"$sel.write_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.pushback_byte, ptr @"$sel.pushback_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.seek, ptr @"$sel.seek", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteBuffer.available, ptr @"$sel.available", i64 ptrtoint (ptr @"$ct.std.io.ByteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ReadBuffer.close, ptr @"$sel.close", i64 ptrtoint (ptr @"$ct.std.io.ReadBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ReadBuffer.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.ReadBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ReadBuffer.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.ReadBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.WriteBuffer.close, ptr @"$sel.close", i64 ptrtoint (ptr @"$ct.std.io.WriteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.WriteBuffer.flush, ptr @"$sel.flush", i64 ptrtoint (ptr @"$ct.std.io.WriteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.WriteBuffer.write, ptr @"$sel.write", i64 ptrtoint (ptr @"$ct.std.io.WriteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.WriteBuffer.write_byte, ptr @"$sel.write_byte", i64 ptrtoint (ptr @"$ct.std.io.WriteBuffer" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.len, ptr @"$sel.len", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.pushback_byte, ptr @"$sel.pushback_byte", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.seek, ptr @"$sel.seek", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.write_to, ptr @"$sel.write_to", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.ByteReader.available, ptr @"$sel.available", i64 ptrtoint (ptr @"$ct.std.io.ByteReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.MultiReader.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.MultiReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.MultiReader.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.MultiReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.Scanner.flush, ptr @"$sel.flush", i64 ptrtoint (ptr @"$ct.std.io.Scanner" to i64) }, { ptr, ptr, i64 } { ptr @std.io.Scanner.close, ptr @"$sel.close", i64 ptrtoint (ptr @"$ct.std.io.Scanner" to i64) }, { ptr, ptr, i64 } { ptr @std.io.Scanner.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.Scanner" to i64) }, { ptr, ptr, i64 } { ptr @std.io.Scanner.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.Scanner" to i64) }, { ptr, ptr, i64 } { ptr @std.io.MultiWriter.write, ptr @"$sel.write", i64 ptrtoint (ptr @"$ct.std.io.MultiWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.MultiWriter.write_byte, ptr @"$sel.write_byte", i64 ptrtoint (ptr @"$ct.std.io.MultiWriter" to i64) }, { ptr, ptr, i64 } { ptr @std.io.TeeReader.read, ptr @"$sel.read", i64 ptrtoint (ptr @"$ct.std.io.TeeReader" to i64) }, { ptr, ptr, i64 } { ptr @std.io.TeeReader.read_byte, ptr @"$sel.read_byte", i64 ptrtoint (ptr @"$ct.std.io.TeeReader" to i64) }, { ptr, ptr, i64 } { ptr @std.core.ReflectedParam.to_format, ptr @"$sel.to_format", i64 ptrtoint (ptr @"$ct.ReflectedParam" to i64) }], section "__DATA,__c3_dynamic", align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_retain, ptr null }]

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.LimitReader.init(ptr %0, [2 x i64] %1, i64 %2) #0 !dbg !81 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %limit = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %LimitReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !98
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !98
  br i1 %4, label %panic, label %checkok, !dbg !98

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !99, metadata !DIExpression()), !dbg !100
  store [2 x i64] %1, ptr %wrapped_stream, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !101, metadata !DIExpression()), !dbg !102
  store i64 %2, ptr %limit, align 8
  call void @llvm.dbg.declare(metadata ptr %limit, metadata !103, metadata !DIExpression()), !dbg !104
  %5 = load ptr, ptr %self, align 8, !dbg !105
  %checknull = icmp eq ptr %5, null, !dbg !105
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !105
  br i1 %6, label %panic3, label %checkok7, !dbg !105

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !106
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !106
  %7 = load i64, ptr %limit, align 8, !dbg !107
  store i64 %7, ptr %ptradd, align 8, !dbg !107
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !107
  %8 = load ptr, ptr %self, align 8, !dbg !108
  ret ptr %8, !dbg !108

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %9 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %10 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %11 = load [2 x i64], ptr %taddr2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12([2 x i64] %9, [2 x i64] %10, [2 x i64] %11, i32 13), !dbg !100
  unreachable, !dbg !100

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %13 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr5, align 8
  %14 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %15 = load [2 x i64], ptr %taddr6, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 15), !dbg !105
  unreachable, !dbg !105
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.LimitReader.close(ptr %0) #0 !dbg !109 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !114
  store ptr null, ptr %.cachedtype, align 8, !dbg !114
  %1 = icmp eq ptr %0, null, !dbg !114
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !114
  br i1 %2, label %panic, label %checkok, !dbg !114

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !115, metadata !DIExpression()), !dbg !116
  %3 = load ptr, ptr %self, align 8, !dbg !117
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !117
  %4 = load i64, ptr %ptradd, align 8, !dbg !117
  %5 = inttoptr i64 %4 to ptr, !dbg !117
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !114
  %6 = icmp eq ptr %5, %type, !dbg !114
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !114

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !114
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !114
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !114
  store ptr %8, ptr %.inlinecache, align 8, !dbg !114
  store ptr %5, ptr %.cachedtype, align 8, !dbg !114
  br label %9, !dbg !114

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !114
  br label %9, !dbg !114

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !114
  %i2b = icmp ne ptr %fn_phi, null, !dbg !114
  br i1 %i2b, label %if.then, label %if.exit, !dbg !114

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !118
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !118
  %11 = load i64, ptr %ptradd4, align 8, !dbg !118
  %12 = inttoptr i64 %11 to ptr, !dbg !118
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !114
  %13 = icmp eq ptr %12, %type7, !dbg !114
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !114

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !114
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !114
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !114
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !114
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !114
  br label %16, !dbg !114

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !114
  br label %16, !dbg !114

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !114
  %17 = icmp eq ptr %fn_phi12, null, !dbg !114
  br i1 %17, label %missing_function, label %match, !dbg !114

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.38, i64 42 }, ptr %taddr13, align 8
  %18 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %19 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 21), !dbg !118
  unreachable, !dbg !118

match:                                            ; preds = %16
  %22 = load ptr, ptr %10, align 8, !dbg !118
  %23 = call i64 %fn_phi12(ptr %22), !dbg !118
  %not_err = icmp eq i64 %23, 0, !dbg !118
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !118
  br i1 %24, label %after_check, label %assign_optional, !dbg !118

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %reterr, align 8, !dbg !118
  br label %err_retblock, !dbg !118

after_check:                                      ; preds = %match
  ret i64 0, !dbg !118

err_retblock:                                     ; preds = %assign_optional
  %25 = load i64, ptr %reterr, align 8, !dbg !118
  ret i64 %25, !dbg !118

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !118

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 19), !dbg !116
  unreachable, !dbg !116
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.LimitReader.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !119 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %m = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !128
  %3 = icmp eq ptr %1, null, !dbg !128
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !128
  br i1 %4, label %panic, label %checkok, !dbg !128

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !129, metadata !DIExpression()), !dbg !130
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !131, metadata !DIExpression()), !dbg !132
  %5 = load ptr, ptr %self, align 8, !dbg !133
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !133
  %6 = load i64, ptr %ptradd, align 8, !dbg !133
  %eq = icmp eq i64 0, %6, !dbg !133
  br i1 %eq, label %if.then, label %if.exit, !dbg !133

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !134

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %m, metadata !135, metadata !DIExpression()), !dbg !136
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !137
  %7 = load i64, ptr %ptradd3, align 8
  store i64 %7, ptr %x, align 8
  %8 = load ptr, ptr %self, align 8, !dbg !138
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !138
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %.anon, align 8
  %10 = load i64, ptr %x, align 8
  store i64 %10, ptr %a, align 8
  %11 = load i64, ptr %.anon, align 8
  store i64 %11, ptr %b, align 8
  %12 = load i64, ptr %a, align 8, !dbg !139
  %13 = load i64, ptr %b, align 8, !dbg !145
  %lt = icmp ult i64 %12, %13, !dbg !139
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !139

cond.lhs:                                         ; preds = %if.exit
  %14 = load i64, ptr %x, align 8, !dbg !146
  br label %cond.phi, !dbg !146

cond.rhs:                                         ; preds = %if.exit
  %15 = load i64, ptr %.anon, align 8, !dbg !147
  br label %cond.phi, !dbg !147

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %14, %cond.lhs ], [ %15, %cond.rhs ], !dbg !147
  store i64 %val, ptr %m, align 8, !dbg !147
  call void @llvm.dbg.declare(metadata ptr %n, metadata !148, metadata !DIExpression()), !dbg !149
  %16 = load ptr, ptr %self, align 8, !dbg !150
  %17 = load %"char[]", ptr %bytes, align 8, !dbg !151
  %18 = extractvalue %"char[]" %17, 0, !dbg !151
  %19 = extractvalue %"char[]" %17, 1, !dbg !152
  %gt = icmp ugt i64 0, %19, !dbg !152
  %20 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !152
  br i1 %20, label %panic5, label %checkok13, !dbg !152

checkok13:                                        ; preds = %cond.phi
  %21 = load i64, ptr %m, align 8, !dbg !153
  %add = add i64 0, %21, !dbg !153
  %lt14 = icmp ult i64 %19, %add, !dbg !153
  %sub = sub i64 %add, 1, !dbg !153
  %22 = call i1 @llvm.expect.i1(i1 %lt14, i1 false), !dbg !153
  br i1 %22, label %panic15, label %checkok25, !dbg !153

checkok25:                                        ; preds = %checkok13
  %size = sub i64 %add, 0, !dbg !151
  %23 = insertvalue %"char[]" undef, ptr %18, 0, !dbg !151
  %24 = insertvalue %"char[]" %23, i64 %size, 1, !dbg !151
  %ptradd26 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !151
  %25 = load i64, ptr %ptradd26, align 8, !dbg !151
  %26 = inttoptr i64 %25 to ptr, !dbg !151
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !128
  %27 = icmp eq ptr %26, %type, !dbg !128
  br i1 %27, label %cache_hit, label %cache_miss, !dbg !128

cache_miss:                                       ; preds = %checkok25
  %ptradd27 = getelementptr inbounds i8, ptr %26, i64 16, !dbg !128
  %28 = load ptr, ptr %ptradd27, align 8, !dbg !128
  %29 = call ptr @.dyn_search(ptr %28, ptr @"$sel.read"), !dbg !128
  store ptr %29, ptr %.inlinecache, align 8, !dbg !128
  store ptr %26, ptr %.cachedtype, align 8, !dbg !128
  br label %30, !dbg !128

cache_hit:                                        ; preds = %checkok25
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !128
  br label %30, !dbg !128

30:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %29, %cache_miss ], !dbg !128
  %31 = icmp eq ptr %fn_phi, null, !dbg !128
  br i1 %31, label %missing_function, label %match, !dbg !128

missing_function:                                 ; preds = %30
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr28, align 8
  %32 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr29, align 8
  %33 = load [2 x i64], ptr %taddr29, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr30, align 8
  %34 = load [2 x i64], ptr %taddr30, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35([2 x i64] %32, [2 x i64] %33, [2 x i64] %34, i32 29), !dbg !150
  unreachable, !dbg !150

match:                                            ; preds = %30
  %36 = load ptr, ptr %16, align 8
  store %"char[]" %24, ptr %taddr31, align 8
  %37 = load [2 x i64], ptr %taddr31, align 8
  %38 = call i64 %fn_phi(ptr %retparam, ptr %36, [2 x i64] %37), !dbg !150
  %not_err = icmp eq i64 %38, 0, !dbg !150
  %39 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !150
  br i1 %39, label %after_check, label %assign_optional, !dbg !150

assign_optional:                                  ; preds = %match
  store i64 %38, ptr %error_var, align 8, !dbg !150
  br label %guard_block, !dbg !150

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !150

guard_block:                                      ; preds = %assign_optional
  %40 = load i64, ptr %error_var, align 8, !dbg !150
  ret i64 %40, !dbg !150

noerr_block:                                      ; preds = %after_check
  %41 = load i64, ptr %retparam, align 8, !dbg !150
  store i64 %41, ptr %n, align 8, !dbg !150
  %42 = load ptr, ptr %self, align 8, !dbg !154
  %ptradd32 = getelementptr inbounds i8, ptr %42, i64 16, !dbg !154
  %43 = load i64, ptr %ptradd32, align 8, !dbg !154
  %44 = load i64, ptr %n, align 8, !dbg !155
  %sub33 = sub i64 %43, %44, !dbg !154
  store i64 %sub33, ptr %ptradd32, align 8, !dbg !154
  %45 = load i64, ptr %n, align 8, !dbg !156
  store i64 %45, ptr %0, align 8, !dbg !156
  ret i64 0, !dbg !156

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %46 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %47 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %48 = load [2 x i64], ptr %taddr2, align 8
  %49 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %49([2 x i64] %46, [2 x i64] %47, [2 x i64] %48, i32 25), !dbg !130
  unreachable, !dbg !130

panic5:                                           ; preds = %cond.phi
  store i64 %19, ptr %taddr6, align 8
  %50 = insertvalue %any undef, ptr %taddr6, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %52 = insertvalue %any undef, ptr %taddr7, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr8, align 8
  %54 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %55 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr10, align 8
  %56 = load [2 x i64], ptr %taddr10, align 8
  store %any %51, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %53, ptr %ptradd11, align 8
  %57 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %58 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %54, [2 x i64] %55, [2 x i64] %56, i32 29, [2 x i64] %58), !dbg !151
  unreachable, !dbg !151

panic15:                                          ; preds = %checkok13
  store i64 %sub, ptr %taddr16, align 8
  %59 = insertvalue %any undef, ptr %taddr16, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr17, align 8
  %61 = insertvalue %any undef, ptr %taddr17, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr18, align 8
  %63 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %64 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr20, align 8
  %65 = load [2 x i64], ptr %taddr20, align 8
  store %any %60, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %62, ptr %ptradd22, align 8
  %66 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %67 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %63, [2 x i64] %64, [2 x i64] %65, i32 29, [2 x i64] %67), !dbg !151
  unreachable, !dbg !151
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.LimitReader.read_byte(ptr %0, ptr %1) #0 !dbg !157 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !160
  %2 = icmp eq ptr %1, null, !dbg !160
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !160
  br i1 %3, label %panic, label %checkok, !dbg !160

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !161, metadata !DIExpression()), !dbg !162
  %4 = load ptr, ptr %self, align 8, !dbg !163
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !163
  %5 = load i64, ptr %ptradd, align 8, !dbg !163
  %eq = icmp eq i64 0, %5, !dbg !163
  br i1 %eq, label %if.then, label %if.exit, !dbg !163

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !164

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !165
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !165
  %7 = load i64, ptr %ptradd3, align 8, !dbg !165
  %8 = inttoptr i64 %7 to ptr, !dbg !165
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !160
  %9 = icmp eq ptr %8, %type, !dbg !160
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !160

cache_miss:                                       ; preds = %if.exit
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !160
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !160
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read_byte"), !dbg !160
  store ptr %11, ptr %.inlinecache, align 8, !dbg !160
  store ptr %8, ptr %.cachedtype, align 8, !dbg !160
  br label %12, !dbg !160

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !160
  br label %12, !dbg !160

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !160
  %13 = icmp eq ptr %fn_phi, null, !dbg !160
  br i1 %13, label %missing_function, label %match, !dbg !160

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.44, i64 46 }, ptr %taddr5, align 8
  %14 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr6, align 8
  %15 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr7, align 8
  %16 = load [2 x i64], ptr %taddr7, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 38), !dbg !165
  unreachable, !dbg !165

match:                                            ; preds = %12
  %18 = load ptr, ptr %6, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %18), !dbg !165
  %not_err = icmp eq i64 %19, 0, !dbg !165
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !165
  br i1 %20, label %after_check, label %assign_optional, !dbg !165

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %reterr, align 8, !dbg !165
  br label %err_retblock, !dbg !165

after_check:                                      ; preds = %match
  %21 = load i8, ptr %retparam, align 1, !dbg !165
  %22 = load ptr, ptr %self, align 8, !dbg !166
  %ptradd8 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !166
  %23 = load i64, ptr %ptradd8, align 8, !dbg !166
  %sub = sub i64 %23, 1, !dbg !166
  store i64 %sub, ptr %ptradd8, align 8, !dbg !166
  store i8 %21, ptr %0, align 1, !dbg !166
  ret i64 0, !dbg !166

err_retblock:                                     ; preds = %assign_optional
  %24 = load i64, ptr %reterr, align 8, !dbg !166
  ret i64 %24, !dbg !166

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %25 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %26 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %27 = load [2 x i64], ptr %taddr2, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 34), !dbg !162
  unreachable, !dbg !162
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.LimitReader.available(ptr %0, ptr %1) #0 !dbg !168 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !171
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !171
  br i1 %3, label %panic, label %checkok, !dbg !171

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !172, metadata !DIExpression()), !dbg !173
  %4 = load ptr, ptr %self, align 8, !dbg !174
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !174
  %5 = load i64, ptr %ptradd, align 8, !dbg !174
  store i64 %5, ptr %0, align 8, !dbg !174
  ret i64 0, !dbg !174

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %7 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr2, align 8
  %8 = load [2 x i64], ptr %taddr2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 41), !dbg !173
  unreachable, !dbg !173
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.ByteWriter.new_init(ptr %0, [2 x i64] %1) #0 !dbg !175 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !189
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !189
  br i1 %3, label %panic, label %checkok, !dbg !189

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !190, metadata !DIExpression()), !dbg !191
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !192, metadata !DIExpression()), !dbg !193
  %4 = load ptr, ptr %self, align 8, !dbg !194
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !194
  %5 = load i64, ptr %ptradd, align 8, !dbg !194
  %eq = icmp eq i64 0, %5, !dbg !194
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !194

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.48, i64 88 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 14), !dbg !194
  unreachable, !dbg !194

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !196
  %checknull = icmp eq ptr %10, null, !dbg !196
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !196
  br i1 %11, label %panic6, label %checkok10, !dbg !196

checkok10:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  store %"char[]" zeroinitializer, ptr %.assign_list, align 8, !dbg !197
  %ptradd11 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !197
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd11, ptr align 8 %allocator, i32 16, i1 false), !dbg !198
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !198
  %12 = load ptr, ptr %self, align 8, !dbg !199
  %13 = load ptr, ptr %allocator, align 8, !dbg !200
  %i2b = icmp ne ptr %13, null, !dbg !200
  br i1 %i2b, label %assert_ok16, label %assert_fail12, !dbg !200

assert_fail12:                                    ; preds = %checkok10
  store %"char[]" { ptr @.panic_msg.49, i64 52 }, ptr %taddr13, align 8
  %14 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr14, align 8
  %15 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr15, align 8
  %16 = load [2 x i64], ptr %taddr15, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 15), !dbg !200
  unreachable, !dbg !200

assert_ok16:                                      ; preds = %checkok10
  %18 = load ptr, ptr %self, align 8, !dbg !201
  %ptradd17 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !201
  %19 = load i64, ptr %ptradd17, align 8, !dbg !201
  %eq18 = icmp eq i64 0, %19, !dbg !201
  br i1 %eq18, label %assert_ok23, label %assert_fail19, !dbg !201

assert_fail19:                                    ; preds = %assert_ok16
  store %"char[]" { ptr @.panic_msg.49, i64 52 }, ptr %taddr20, align 8
  %20 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr21, align 8
  %21 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr22, align 8
  %22 = load [2 x i64], ptr %taddr22, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 15), !dbg !201
  unreachable, !dbg !201

assert_ok23:                                      ; preds = %assert_ok16
  ret ptr %12, !dbg !201

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 17), !dbg !191
  unreachable, !dbg !191

panic6:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr7, align 8
  %28 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr8, align 8
  %29 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr9, align 8
  %30 = load [2 x i64], ptr %taddr9, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 19), !dbg !196
  unreachable, !dbg !196
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.ByteWriter.temp_init(ptr %0) #0 !dbg !202 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %any, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !205
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !205
  br i1 %2, label %panic, label %checkok, !dbg !205

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !206, metadata !DIExpression()), !dbg !207
  %3 = load ptr, ptr %self, align 8, !dbg !208
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !208
  %4 = load i64, ptr %ptradd, align 8, !dbg !208
  %eq = icmp eq i64 0, %4, !dbg !208
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !208

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.48, i64 88 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 25), !dbg !208
  unreachable, !dbg !208

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !210
  %i2nb = icmp eq ptr %9, null, !dbg !210
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !210

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !214
  br label %if.exit, !dbg !214

if.exit:                                          ; preds = %if.then, %assert_ok
  %10 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !216
  %11 = insertvalue %any undef, ptr %10, 0, !dbg !213
  %12 = insertvalue %any %11, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !213
  %13 = load ptr, ptr %self, align 8, !dbg !213
  store %any %12, ptr %taddr6, align 8
  %14 = load [2 x i64], ptr %taddr6, align 8
  %15 = call ptr @std.io.ByteWriter.new_init(ptr %13, [2 x i64] %14) #5, !dbg !217
  %16 = load ptr, ptr %self, align 8, !dbg !218
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !218
  %17 = load i64, ptr %ptradd7, align 8, !dbg !218
  %eq8 = icmp eq i64 0, %17, !dbg !218
  br i1 %eq8, label %assert_ok13, label %assert_fail9, !dbg !218

assert_fail9:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.51, i64 35 }, ptr %taddr10, align 8
  %18 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr11, align 8
  %19 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr12, align 8
  %20 = load [2 x i64], ptr %taddr12, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 26), !dbg !218
  unreachable, !dbg !218

assert_ok13:                                      ; preds = %if.exit
  ret ptr %15, !dbg !218

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %22 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %23 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr2, align 8
  %24 = load [2 x i64], ptr %taddr2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 28), !dbg !207
  unreachable, !dbg !207
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.ByteWriter.init_with_buffer(ptr %0, [2 x i64] %1) #0 !dbg !219 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteWriter, align 8
  %2 = icmp eq ptr %0, null, !dbg !222
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !222
  br i1 %3, label %panic, label %checkok, !dbg !222

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !223, metadata !DIExpression()), !dbg !224
  store [2 x i64] %1, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !225, metadata !DIExpression()), !dbg !226
  %4 = load ptr, ptr %self, align 8, !dbg !227
  %checknull = icmp eq ptr %4, null, !dbg !227
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !227
  br i1 %5, label %panic3, label %checkok7, !dbg !227

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %data, i32 16, i1 false), !dbg !228
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !228
  store %any { ptr null, i64 ptrtoint (ptr @"$ct.void" to i64) }, ptr %ptradd, align 8, !dbg !229
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !229
  %6 = load ptr, ptr %self, align 8, !dbg !230
  ret ptr %6, !dbg !230

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %8 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr2, align 8
  %9 = load [2 x i64], ptr %taddr2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 33), !dbg !224
  unreachable, !dbg !224

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %11 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr5, align 8
  %12 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr6, align 8
  %13 = load [2 x i64], ptr %taddr6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 35), !dbg !227
  unreachable, !dbg !227
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteWriter.destroy(ptr %0) #0 !dbg !231 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr5 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !234
  %1 = icmp eq ptr %0, null, !dbg !234
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !234
  br i1 %2, label %panic, label %checkok, !dbg !234

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !235, metadata !DIExpression()), !dbg !236
  %3 = load ptr, ptr %self, align 8, !dbg !237
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !237
  %4 = load ptr, ptr %ptradd, align 8, !dbg !237
  %i2nb = icmp eq ptr %4, null, !dbg !237
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !237

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !238, metadata !DIExpression()), !dbg !239
  %5 = load ptr, ptr %self, align 8, !dbg !240
  %6 = load ptr, ptr %5, align 8, !dbg !240
  store ptr %6, ptr %ptr, align 8, !dbg !240
  %i2b = icmp ne ptr %6, null, !dbg !240
  br i1 %i2b, label %if.then3, label %if.exit14, !dbg !240

if.then3:                                         ; preds = %if.exit
  %7 = load ptr, ptr %self, align 8, !dbg !241
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !241
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd4, i32 16, i1 false)
  %8 = load ptr, ptr %ptr, align 8
  store ptr %8, ptr %ptr5, align 8
  %9 = load ptr, ptr %ptr5, align 8, !dbg !242
  %i2nb6 = icmp eq ptr %9, null, !dbg !242
  br i1 %i2nb6, label %if.then7, label %if.exit8, !dbg !242

if.then7:                                         ; preds = %if.then3
  br label %expr_block.exit, !dbg !245

if.exit8:                                         ; preds = %if.then3
  %ptradd9 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !246
  %10 = load i64, ptr %ptradd9, align 8, !dbg !246
  %11 = inttoptr i64 %10 to ptr, !dbg !246
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !234
  %12 = icmp eq ptr %11, %type, !dbg !234
  br i1 %12, label %cache_hit, label %cache_miss, !dbg !234

cache_miss:                                       ; preds = %if.exit8
  %ptradd10 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !234
  %13 = load ptr, ptr %ptradd10, align 8, !dbg !234
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.release"), !dbg !234
  store ptr %14, ptr %.inlinecache, align 8, !dbg !234
  store ptr %11, ptr %.cachedtype, align 8, !dbg !234
  br label %15, !dbg !234

cache_hit:                                        ; preds = %if.exit8
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !234
  br label %15, !dbg !234

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ], !dbg !234
  %16 = icmp eq ptr %fn_phi, null, !dbg !234
  br i1 %16, label %missing_function, label %match, !dbg !234

missing_function:                                 ; preds = %15
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr11, align 8
  %17 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr12, align 8
  %18 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.53, i64 7 }, ptr %taddr13, align 8
  %19 = load [2 x i64], ptr %taddr13, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 105), !dbg !247
  unreachable, !dbg !247

match:                                            ; preds = %15
  %21 = load ptr, ptr %allocator, align 8, !dbg !247
  %22 = load ptr, ptr %ptr5, align 8, !dbg !247
  call void %fn_phi(ptr %21, ptr %22, i8 0), !dbg !247
  br label %expr_block.exit, !dbg !247

expr_block.exit:                                  ; preds = %match, %if.then7
  br label %if.exit14, !dbg !247

if.exit14:                                        ; preds = %expr_block.exit, %if.exit
  %23 = load ptr, ptr %self, align 8, !dbg !248
  %checknull = icmp eq ptr %23, null, !dbg !248
  %24 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !248
  br i1 %24, label %panic15, label %checkok19, !dbg !248

checkok19:                                        ; preds = %if.exit14
  call void @llvm.memset.p0.i64(ptr align 8 %23, i8 0, i64 40, i1 false), !dbg !248
  ret i64 0, !dbg !248

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %25 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %26 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.53, i64 7 }, ptr %taddr2, align 8
  %27 = load [2 x i64], ptr %taddr2, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 39), !dbg !236
  unreachable, !dbg !236

panic15:                                          ; preds = %if.exit14
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr16, align 8
  %29 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr17, align 8
  %30 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.53, i64 7 }, ptr %taddr18, align 8
  %31 = load [2 x i64], ptr %taddr18, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 43), !dbg !248
  unreachable, !dbg !248
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.io.ByteWriter.str_view(ptr %0) #0 !dbg !249 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr9 = alloca %"any[]", align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %varargslots18 = alloca [2 x %any], align 8
  %taddr21 = alloca %"any[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !253
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !253
  br i1 %2, label %panic, label %checkok, !dbg !253

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !254, metadata !DIExpression()), !dbg !255
  %3 = load ptr, ptr %self, align 8, !dbg !256
  %4 = load %"char[]", ptr %3, align 8, !dbg !256
  %5 = extractvalue %"char[]" %4, 0, !dbg !256
  %6 = extractvalue %"char[]" %4, 1, !dbg !257
  %gt = icmp ugt i64 0, %6, !dbg !257
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !257
  br i1 %7, label %panic3, label %checkok10, !dbg !257

checkok10:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !258
  %ptradd11 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !258
  %9 = load i64, ptr %ptradd11, align 8, !dbg !258
  %add = add i64 0, %9, !dbg !258
  %lt = icmp ult i64 %6, %add, !dbg !258
  %sub = sub i64 %add, 1, !dbg !258
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !258
  br i1 %10, label %panic12, label %checkok22, !dbg !258

checkok22:                                        ; preds = %checkok10
  %size = sub i64 %add, 0, !dbg !259
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !259
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !259
  store %"char[]" %12, ptr %taddr23, align 8
  %13 = load [2 x i64], ptr %taddr23, align 8
  ret [2 x i64] %13

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 46), !dbg !255
  unreachable, !dbg !255

panic3:                                           ; preds = %checkok
  store i64 %6, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %20 = insertvalue %any undef, ptr %taddr5, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr6, align 8
  %22 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr7, align 8
  %23 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr8, align 8
  %24 = load [2 x i64], ptr %taddr8, align 8
  store %any %19, ptr %varargslots, align 8
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd, align 8
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr9, align 8
  %26 = load [2 x i64], ptr %taddr9, align 8
  call void @std.core.builtin.panicf([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 48, [2 x i64] %26), !dbg !259
  unreachable, !dbg !259

panic12:                                          ; preds = %checkok10
  store i64 %sub, ptr %taddr13, align 8
  %27 = insertvalue %any undef, ptr %taddr13, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr14, align 8
  %29 = insertvalue %any undef, ptr %taddr14, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr15, align 8
  %31 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr16, align 8
  %32 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr17, align 8
  %33 = load [2 x i64], ptr %taddr17, align 8
  store %any %28, ptr %varargslots18, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots18, i64 16
  store %any %30, ptr %ptradd19, align 8
  %34 = insertvalue %"any[]" undef, ptr %varargslots18, 0
  %"$$temp20" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp20", ptr %taddr21, align 8
  %35 = load [2 x i64], ptr %taddr21, align 8
  call void @std.core.builtin.panicf([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 48, [2 x i64] %35), !dbg !259
  unreachable, !dbg !259
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteWriter.ensure_capacity(ptr %0, i64 %1) #0 !dbg !260 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %new_capacity = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %new_ptr = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator12 = alloca %any, align 8
  %ptr13 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %.inlinecache26 = alloca ptr, align 8
  %.cachedtype27 = alloca ptr, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %.inlinecache41 = alloca ptr, align 8
  %.cachedtype42 = alloca ptr, align 8
  %taddr50 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %retparam54 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype42, align 8, !dbg !263
  store ptr null, ptr %.cachedtype27, align 8, !dbg !263
  store ptr null, ptr %.cachedtype, align 8, !dbg !263
  %2 = icmp eq ptr %0, null, !dbg !263
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !263
  br i1 %3, label %panic, label %checkok, !dbg !263

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !264, metadata !DIExpression()), !dbg !265
  store i64 %1, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !266, metadata !DIExpression()), !dbg !267
  %4 = load ptr, ptr %self, align 8, !dbg !268
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !268
  %5 = load i64, ptr %ptradd, align 8, !dbg !268
  %6 = load i64, ptr %len, align 8, !dbg !269
  %gt = icmp ugt i64 %5, %6, !dbg !268
  br i1 %gt, label %if.then, label %if.exit, !dbg !268

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !270
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 24, !dbg !270
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !270
  %i2nb = icmp eq ptr %8, null, !dbg !270
  br i1 %i2nb, label %if.then4, label %if.exit5, !dbg !270

if.then4:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$OUT_OF_SPACE" to i64), !dbg !271

if.exit5:                                         ; preds = %if.exit
  %9 = load i64, ptr %len, align 8, !dbg !272
  %gt6 = icmp ugt i64 16, %9, !dbg !272
  br i1 %gt6, label %if.then7, label %if.exit8, !dbg !272

if.then7:                                         ; preds = %if.exit5
  store i64 16, ptr %len, align 8, !dbg !273
  br label %if.exit8, !dbg !273

if.exit8:                                         ; preds = %if.then7, %if.exit5
  call void @llvm.dbg.declare(metadata ptr %new_capacity, metadata !274, metadata !DIExpression()), !dbg !275
  %10 = load i64, ptr %len, align 8
  store i64 %10, ptr %x, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !276, metadata !DIExpression()), !dbg !279
  store i64 1, ptr %y, align 8, !dbg !281
  br label %loop.cond, !dbg !282

loop.cond:                                        ; preds = %loop.body, %if.exit8
  %11 = load i64, ptr %y, align 8, !dbg !283
  %12 = load i64, ptr %x, align 8, !dbg !285
  %lt = icmp ult i64 %11, %12, !dbg !283
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !283

loop.body:                                        ; preds = %loop.cond
  %13 = load i64, ptr %y, align 8, !dbg !286
  %14 = load i64, ptr %y, align 8, !dbg !287
  %add = add i64 %13, %14, !dbg !286
  store i64 %add, ptr %y, align 8, !dbg !286
  br label %loop.cond, !dbg !286

loop.exit:                                        ; preds = %loop.cond
  %15 = load i64, ptr %y, align 8, !dbg !288
  store i64 %15, ptr %new_capacity, align 8, !dbg !288
  call void @llvm.dbg.declare(metadata ptr %new_ptr, metadata !289, metadata !DIExpression()), !dbg !290
  %16 = load ptr, ptr %self, align 8, !dbg !291
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 24, !dbg !291
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd9, i32 16, i1 false)
  %17 = load ptr, ptr %self, align 8, !dbg !292
  %18 = load ptr, ptr %17, align 8, !dbg !292
  store ptr %18, ptr %ptr, align 8
  %19 = load i64, ptr %new_capacity, align 8
  store i64 %19, ptr %new_size, align 8
  %20 = load i64, ptr %new_size, align 8, !dbg !293
  %i2nb10 = icmp eq i64 %20, 0, !dbg !293
  br i1 %i2nb10, label %if.then11, label %if.exit22, !dbg !293

if.then11:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %allocator, i32 16, i1 false)
  %21 = load ptr, ptr %ptr, align 8
  store ptr %21, ptr %ptr13, align 8
  %22 = load ptr, ptr %ptr13, align 8, !dbg !296
  %i2nb14 = icmp eq ptr %22, null, !dbg !296
  br i1 %i2nb14, label %if.then15, label %if.exit16, !dbg !296

if.then15:                                        ; preds = %if.then11
  br label %expr_block.exit, !dbg !300

if.exit16:                                        ; preds = %if.then11
  %ptradd17 = getelementptr inbounds i8, ptr %allocator12, i64 8, !dbg !301
  %23 = load i64, ptr %ptradd17, align 8, !dbg !301
  %24 = inttoptr i64 %23 to ptr, !dbg !301
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !263
  %25 = icmp eq ptr %24, %type, !dbg !263
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !263

cache_miss:                                       ; preds = %if.exit16
  %ptradd18 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !263
  %26 = load ptr, ptr %ptradd18, align 8, !dbg !263
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.release"), !dbg !263
  store ptr %27, ptr %.inlinecache, align 8, !dbg !263
  store ptr %24, ptr %.cachedtype, align 8, !dbg !263
  br label %28, !dbg !263

cache_hit:                                        ; preds = %if.exit16
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !263
  br label %28, !dbg !263

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !263
  %29 = icmp eq ptr %fn_phi, null, !dbg !263
  br i1 %29, label %missing_function, label %match, !dbg !263

missing_function:                                 ; preds = %28
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr19, align 8
  %30 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr20, align 8
  %31 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.57, i64 15 }, ptr %taddr21, align 8
  %32 = load [2 x i64], ptr %taddr21, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 105), !dbg !302
  unreachable, !dbg !302

match:                                            ; preds = %28
  %34 = load ptr, ptr %allocator12, align 8, !dbg !302
  %35 = load ptr, ptr %ptr13, align 8, !dbg !302
  call void %fn_phi(ptr %34, ptr %35, i8 0), !dbg !302
  br label %expr_block.exit, !dbg !302

expr_block.exit:                                  ; preds = %match, %if.then15
  store ptr null, ptr %blockret, align 8, !dbg !303
  br label %expr_block.exit58, !dbg !303

if.exit22:                                        ; preds = %loop.exit
  %36 = load ptr, ptr %ptr, align 8, !dbg !304
  %i2nb23 = icmp eq ptr %36, null, !dbg !304
  br i1 %i2nb23, label %if.then24, label %if.exit39, !dbg !304

if.then24:                                        ; preds = %if.exit22
  %ptradd25 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !305
  %37 = load i64, ptr %ptradd25, align 8, !dbg !305
  %38 = inttoptr i64 %37 to ptr, !dbg !305
  %type28 = load ptr, ptr %.cachedtype27, align 8, !dbg !263
  %39 = icmp eq ptr %38, %type28, !dbg !263
  br i1 %39, label %cache_hit31, label %cache_miss29, !dbg !263

cache_miss29:                                     ; preds = %if.then24
  %ptradd30 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !263
  %40 = load ptr, ptr %ptradd30, align 8, !dbg !263
  %41 = call ptr @.dyn_search(ptr %40, ptr @"$sel.acquire"), !dbg !263
  store ptr %41, ptr %.inlinecache26, align 8, !dbg !263
  store ptr %38, ptr %.cachedtype27, align 8, !dbg !263
  br label %42, !dbg !263

cache_hit31:                                      ; preds = %if.then24
  %cache_hit_fn32 = load ptr, ptr %.inlinecache26, align 8, !dbg !263
  br label %42, !dbg !263

42:                                               ; preds = %cache_hit31, %cache_miss29
  %fn_phi33 = phi ptr [ %cache_hit_fn32, %cache_hit31 ], [ %41, %cache_miss29 ], !dbg !263
  %43 = icmp eq ptr %fn_phi33, null, !dbg !263
  br i1 %43, label %missing_function34, label %match38, !dbg !263

missing_function34:                               ; preds = %42
  store %"char[]" { ptr @.panic_msg.58, i64 44 }, ptr %taddr35, align 8
  %44 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr36, align 8
  %45 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.57, i64 15 }, ptr %taddr37, align 8
  %46 = load [2 x i64], ptr %taddr37, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47([2 x i64] %44, [2 x i64] %45, [2 x i64] %46, i32 95), !dbg !307
  unreachable, !dbg !307

match38:                                          ; preds = %42
  %48 = load ptr, ptr %allocator, align 8
  %49 = load i64, ptr %new_size, align 8
  %50 = call i64 %fn_phi33(ptr %retparam, ptr %48, i64 %49, i32 0, i64 0), !dbg !307
  %not_err = icmp eq i64 %50, 0, !dbg !307
  %51 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !307
  br i1 %51, label %after_check, label %assign_optional, !dbg !307

assign_optional:                                  ; preds = %match38
  store i64 %50, ptr %error_var, align 8, !dbg !307
  br label %guard_block, !dbg !307

after_check:                                      ; preds = %match38
  %52 = load ptr, ptr %retparam, align 8, !dbg !307
  store ptr %52, ptr %blockret, align 8, !dbg !307
  br label %expr_block.exit58, !dbg !307

if.exit39:                                        ; preds = %if.exit22
  %ptradd40 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !308
  %53 = load i64, ptr %ptradd40, align 8, !dbg !308
  %54 = inttoptr i64 %53 to ptr, !dbg !308
  %type43 = load ptr, ptr %.cachedtype42, align 8, !dbg !263
  %55 = icmp eq ptr %54, %type43, !dbg !263
  br i1 %55, label %cache_hit46, label %cache_miss44, !dbg !263

cache_miss44:                                     ; preds = %if.exit39
  %ptradd45 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !263
  %56 = load ptr, ptr %ptradd45, align 8, !dbg !263
  %57 = call ptr @.dyn_search(ptr %56, ptr @"$sel.resize"), !dbg !263
  store ptr %57, ptr %.inlinecache41, align 8, !dbg !263
  store ptr %54, ptr %.cachedtype42, align 8, !dbg !263
  br label %58, !dbg !263

cache_hit46:                                      ; preds = %if.exit39
  %cache_hit_fn47 = load ptr, ptr %.inlinecache41, align 8, !dbg !263
  br label %58, !dbg !263

58:                                               ; preds = %cache_hit46, %cache_miss44
  %fn_phi48 = phi ptr [ %cache_hit_fn47, %cache_hit46 ], [ %57, %cache_miss44 ], !dbg !263
  %59 = icmp eq ptr %fn_phi48, null, !dbg !263
  br i1 %59, label %missing_function49, label %match53, !dbg !263

missing_function49:                               ; preds = %58
  store %"char[]" { ptr @.panic_msg.59, i64 43 }, ptr %taddr50, align 8
  %60 = load [2 x i64], ptr %taddr50, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr51, align 8
  %61 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.func.57, i64 15 }, ptr %taddr52, align 8
  %62 = load [2 x i64], ptr %taddr52, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 96), !dbg !310
  unreachable, !dbg !310

match53:                                          ; preds = %58
  %64 = load ptr, ptr %allocator, align 8
  %65 = load ptr, ptr %ptr, align 8
  %66 = load i64, ptr %new_size, align 8
  %67 = call i64 %fn_phi48(ptr %retparam54, ptr %64, ptr %65, i64 %66, i64 0), !dbg !310
  %not_err55 = icmp eq i64 %67, 0, !dbg !310
  %68 = call i1 @llvm.expect.i1(i1 %not_err55, i1 true), !dbg !310
  br i1 %68, label %after_check57, label %assign_optional56, !dbg !310

assign_optional56:                                ; preds = %match53
  store i64 %67, ptr %error_var, align 8, !dbg !310
  br label %guard_block, !dbg !310

after_check57:                                    ; preds = %match53
  %69 = load ptr, ptr %retparam54, align 8, !dbg !310
  store ptr %69, ptr %blockret, align 8, !dbg !310
  br label %expr_block.exit58, !dbg !310

expr_block.exit58:                                ; preds = %after_check57, %after_check, %expr_block.exit
  br label %noerr_block, !dbg !310

guard_block:                                      ; preds = %assign_optional56, %assign_optional
  %70 = load i64, ptr %error_var, align 8, !dbg !310
  ret i64 %70, !dbg !310

noerr_block:                                      ; preds = %expr_block.exit58
  %71 = load ptr, ptr %blockret, align 8, !dbg !310
  store ptr %71, ptr %new_ptr, align 8, !dbg !310
  %72 = load ptr, ptr %self, align 8, !dbg !311
  %73 = load ptr, ptr %new_ptr, align 8, !dbg !312
  %74 = load i64, ptr %new_capacity, align 8, !dbg !313
  %add59 = add i64 0, %74, !dbg !313
  %size = sub i64 %add59, 0, !dbg !313
  %75 = insertvalue %"char[]" undef, ptr %73, 0, !dbg !313
  %76 = insertvalue %"char[]" %75, i64 %size, 1, !dbg !313
  store %"char[]" %76, ptr %72, align 8, !dbg !313
  ret i64 0, !dbg !313

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %77 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %78 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.57, i64 15 }, ptr %taddr2, align 8
  %79 = load [2 x i64], ptr %taddr2, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 51), !dbg !265
  unreachable, !dbg !265
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteWriter.write(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !314 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !317
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !317
  br i1 %4, label %panic, label %checkok, !dbg !317

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !318, metadata !DIExpression()), !dbg !319
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !320, metadata !DIExpression()), !dbg !321
  %5 = load ptr, ptr %self, align 8, !dbg !322
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !322
  %6 = load i64, ptr %ptradd, align 8, !dbg !322
  %ptradd3 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !323
  %7 = load i64, ptr %ptradd3, align 8, !dbg !323
  %add = add i64 %6, %7, !dbg !322
  %8 = load ptr, ptr %self, align 8, !dbg !322
  %9 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %8, i64 %add) #5, !dbg !324
  %not_err = icmp eq i64 %9, 0, !dbg !324
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !324
  br i1 %10, label %after_check, label %assign_optional, !dbg !324

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %error_var, align 8, !dbg !324
  br label %guard_block, !dbg !324

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !324

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !324
  ret i64 %11, !dbg !324

noerr_block:                                      ; preds = %after_check
  %12 = load ptr, ptr %self, align 8, !dbg !325
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !325
  %13 = load i64, ptr %ptradd4, align 8, !dbg !325
  %14 = load ptr, ptr %12, align 8, !dbg !325
  %15 = load ptr, ptr %self, align 8, !dbg !326
  %ptradd5 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !326
  %16 = load i64, ptr %ptradd5, align 8, !dbg !326
  %ge = icmp uge i64 %16, %13, !dbg !326
  %17 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !326
  br i1 %17, label %panic6, label %checkok14, !dbg !326

checkok14:                                        ; preds = %noerr_block
  %ptradd15 = getelementptr inbounds i8, ptr %14, i64 %16, !dbg !326
  store ptr %ptradd15, ptr %dst, align 8
  %18 = load ptr, ptr %bytes, align 8, !dbg !327
  store ptr %18, ptr %src, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !328
  %19 = load i64, ptr %ptradd16, align 8
  store i64 %19, ptr %len, align 8
  %20 = load i64, ptr %len, align 8, !dbg !329
  %eq = icmp eq i64 0, %20, !dbg !329
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !329

or.rhs:                                           ; preds = %checkok14
  %21 = load ptr, ptr %dst, align 8, !dbg !334
  %22 = load i64, ptr %len, align 8, !dbg !335
  %ptradd_any = getelementptr i8, ptr %21, i64 %22, !dbg !335
  %23 = load ptr, ptr %src, align 8, !dbg !336
  %le = icmp ule ptr %ptradd_any, %23, !dbg !334
  br label %or.phi, !dbg !334

or.phi:                                           ; preds = %or.rhs, %checkok14
  %val = phi i1 [ true, %checkok14 ], [ %le, %or.rhs ], !dbg !334
  br i1 %val, label %or.phi20, label %or.rhs17, !dbg !334

or.rhs17:                                         ; preds = %or.phi
  %24 = load ptr, ptr %src, align 8, !dbg !337
  %25 = load i64, ptr %len, align 8, !dbg !338
  %ptradd_any18 = getelementptr i8, ptr %24, i64 %25, !dbg !338
  %26 = load ptr, ptr %dst, align 8, !dbg !339
  %le19 = icmp ule ptr %ptradd_any18, %26, !dbg !337
  br label %or.phi20, !dbg !337

or.phi20:                                         ; preds = %or.rhs17, %or.phi
  %val21 = phi i1 [ true, %or.phi ], [ %le19, %or.rhs17 ], !dbg !337
  br i1 %val21, label %assert_ok, label %assert_fail, !dbg !337

assert_fail:                                      ; preds = %or.phi20
  store %"char[]" { ptr @.panic_msg.62, i64 95 }, ptr %taddr22, align 8
  %27 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.file.63, i64 6 }, ptr %taddr23, align 8
  %28 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr24, align 8
  %29 = load [2 x i64], ptr %taddr24, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 324), !dbg !329
  unreachable, !dbg !329

assert_ok:                                        ; preds = %or.phi20
  %31 = load ptr, ptr %dst, align 8, !dbg !340
  %32 = load ptr, ptr %src, align 8, !dbg !341
  %33 = load i64, ptr %len, align 8, !dbg !342
  call void @llvm.memcpy.p0.p0.i64(ptr %31, ptr %32, i64 %33, i1 false), !dbg !343
  %34 = load ptr, ptr %self, align 8, !dbg !344
  %ptradd25 = getelementptr inbounds i8, ptr %34, i64 16, !dbg !344
  %35 = load i64, ptr %ptradd25, align 8, !dbg !344
  %ptradd26 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !345
  %36 = load i64, ptr %ptradd26, align 8, !dbg !345
  %add27 = add i64 %35, %36, !dbg !344
  store i64 %add27, ptr %ptradd25, align 8, !dbg !344
  %ptradd28 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !346
  %37 = load i64, ptr %ptradd28, align 8, !dbg !346
  store i64 %37, ptr %0, align 8, !dbg !346
  ret i64 0, !dbg !346

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %38 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %39 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr2, align 8
  %40 = load [2 x i64], ptr %taddr2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 61), !dbg !319
  unreachable, !dbg !319

panic6:                                           ; preds = %noerr_block
  store i64 %13, ptr %taddr7, align 8
  %42 = insertvalue %any undef, ptr %taddr7, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr8, align 8
  %44 = insertvalue %any undef, ptr %taddr8, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr9, align 8
  %46 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr10, align 8
  %47 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr11, align 8
  %48 = load [2 x i64], ptr %taddr11, align 8
  store %any %43, ptr %varargslots, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %45, ptr %ptradd12, align 8
  %49 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %50 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %46, [2 x i64] %47, [2 x i64] %48, i32 64, [2 x i64] %50), !dbg !326
  unreachable, !dbg !326
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteWriter.write_byte(ptr %0, i8 %1) #0 !dbg !347 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !350
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !350
  br i1 %3, label %panic, label %checkok, !dbg !350

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !351, metadata !DIExpression()), !dbg !352
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !353, metadata !DIExpression()), !dbg !354
  %4 = load ptr, ptr %self, align 8, !dbg !355
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !355
  %5 = load i64, ptr %ptradd, align 8, !dbg !355
  %add = add i64 %5, 1, !dbg !355
  %6 = load ptr, ptr %self, align 8, !dbg !355
  %7 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %6, i64 %add) #5, !dbg !356
  %not_err = icmp eq i64 %7, 0, !dbg !356
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !356
  br i1 %8, label %after_check, label %assign_optional, !dbg !356

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !356
  br label %guard_block, !dbg !356

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !356

guard_block:                                      ; preds = %assign_optional
  %9 = load i64, ptr %error_var, align 8, !dbg !356
  ret i64 %9, !dbg !356

noerr_block:                                      ; preds = %after_check
  %10 = load ptr, ptr %self, align 8, !dbg !357
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !357
  %11 = load i64, ptr %ptradd3, align 8, !dbg !357
  %12 = load ptr, ptr %10, align 8, !dbg !357
  %13 = load ptr, ptr %self, align 8, !dbg !358
  %ptradd4 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !358
  %14 = load i64, ptr %ptradd4, align 8, !dbg !358
  %add5 = add i64 %14, 1, !dbg !358
  store i64 %add5, ptr %ptradd4, align 8, !dbg !358
  %ge = icmp uge i64 %14, %11, !dbg !358
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !358
  br i1 %15, label %panic6, label %checkok14, !dbg !358

checkok14:                                        ; preds = %noerr_block
  %ptradd15 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !358
  %16 = load i8, ptr %c, align 1, !dbg !359
  store i8 %16, ptr %ptradd15, align 1, !dbg !359
  ret i64 0, !dbg !359

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %17 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %18 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr2, align 8
  %19 = load [2 x i64], ptr %taddr2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 69), !dbg !352
  unreachable, !dbg !352

panic6:                                           ; preds = %noerr_block
  store i64 %11, ptr %taddr7, align 8
  %21 = insertvalue %any undef, ptr %taddr7, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr8, align 8
  %23 = insertvalue %any undef, ptr %taddr8, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr9, align 8
  %25 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr10, align 8
  %26 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr11, align 8
  %27 = load [2 x i64], ptr %taddr11, align 8
  store %any %22, ptr %varargslots, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd12, align 8
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %29 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 72, [2 x i64] %29), !dbg !358
  unreachable, !dbg !358
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteWriter.read_from(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !360 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reader = alloca %any, align 8
  %start_index = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %available = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache6 = alloca ptr, align 8
  %.cachedtype7 = alloca ptr, align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %error_var18 = alloca i64, align 8
  %read = alloca i64, align 8
  %error_var25 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr34 = alloca %"any[]", align 8
  %.inlinecache38 = alloca ptr, align 8
  %.cachedtype39 = alloca ptr, align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %retparam51 = alloca i64, align 8
  %taddr52 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var63 = alloca i64, align 8
  %len_to_read = alloca i64, align 8
  %error_var76 = alloca i64, align 8
  %read87 = alloca i64, align 8
  %error_var88 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %.inlinecache105 = alloca ptr, align 8
  %.cachedtype106 = alloca ptr, align 8
  %taddr114 = alloca %"char[]", align 8
  %taddr115 = alloca %"char[]", align 8
  %taddr116 = alloca %"char[]", align 8
  %retparam118 = alloca i64, align 8
  %taddr119 = alloca %"char[]", align 8
  %reterr128 = alloca i64, align 8
  store ptr null, ptr %.cachedtype106, align 8, !dbg !363
  store ptr null, ptr %.cachedtype39, align 8, !dbg !363
  store ptr null, ptr %.cachedtype7, align 8, !dbg !363
  store ptr null, ptr %.cachedtype, align 8, !dbg !363
  %3 = icmp eq ptr %1, null, !dbg !363
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !363
  br i1 %4, label %panic, label %checkok, !dbg !363

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !364, metadata !DIExpression()), !dbg !365
  store [2 x i64] %2, ptr %reader, align 8
  call void @llvm.dbg.declare(metadata ptr %reader, metadata !366, metadata !DIExpression()), !dbg !367
  call void @llvm.dbg.declare(metadata ptr %start_index, metadata !368, metadata !DIExpression()), !dbg !369
  %5 = load ptr, ptr %self, align 8, !dbg !370
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !370
  %6 = load i64, ptr %ptradd, align 8, !dbg !370
  store i64 %6, ptr %start_index, align 8, !dbg !370
  %ptradd3 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !371
  %7 = load i64, ptr %ptradd3, align 8, !dbg !371
  %8 = inttoptr i64 %7 to ptr, !dbg !371
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !363
  %9 = icmp eq ptr %8, %type, !dbg !363
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !363

cache_miss:                                       ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !363
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !363
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.available"), !dbg !363
  store ptr %11, ptr %.inlinecache, align 8, !dbg !363
  store ptr %8, ptr %.cachedtype, align 8, !dbg !363
  br label %12, !dbg !363

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !363
  br label %12, !dbg !363

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !363
  %i2b = icmp ne ptr %fn_phi, null, !dbg !363
  br i1 %i2b, label %if.then, label %if.exit, !dbg !363

if.then:                                          ; preds = %12
  br label %loop.cond, !dbg !372

loop.cond:                                        ; preds = %noerr_block57, %if.then
  call void @llvm.dbg.declare(metadata ptr %available, metadata !374, metadata !DIExpression()), !dbg !376
  %ptradd5 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !377
  %13 = load i64, ptr %ptradd5, align 8, !dbg !377
  %14 = inttoptr i64 %13 to ptr, !dbg !377
  %type8 = load ptr, ptr %.cachedtype7, align 8, !dbg !363
  %15 = icmp eq ptr %14, %type8, !dbg !363
  br i1 %15, label %cache_hit11, label %cache_miss9, !dbg !363

cache_miss9:                                      ; preds = %loop.cond
  %ptradd10 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !363
  %16 = load ptr, ptr %ptradd10, align 8, !dbg !363
  %17 = call ptr @.dyn_search(ptr %16, ptr @"$sel.available"), !dbg !363
  store ptr %17, ptr %.inlinecache6, align 8, !dbg !363
  store ptr %14, ptr %.cachedtype7, align 8, !dbg !363
  br label %18, !dbg !363

cache_hit11:                                      ; preds = %loop.cond
  %cache_hit_fn12 = load ptr, ptr %.inlinecache6, align 8, !dbg !363
  br label %18, !dbg !363

18:                                               ; preds = %cache_hit11, %cache_miss9
  %fn_phi13 = phi ptr [ %cache_hit_fn12, %cache_hit11 ], [ %17, %cache_miss9 ], !dbg !363
  %19 = icmp eq ptr %fn_phi13, null, !dbg !363
  br i1 %19, label %missing_function, label %match, !dbg !363

missing_function:                                 ; preds = %18
  store %"char[]" { ptr @.panic_msg.66, i64 46 }, ptr %taddr14, align 8
  %20 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr15, align 8
  %21 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr16, align 8
  %22 = load [2 x i64], ptr %taddr16, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 84), !dbg !377
  unreachable, !dbg !377

match:                                            ; preds = %18
  %24 = load ptr, ptr %reader, align 8
  %25 = call i64 %fn_phi13(ptr %retparam, ptr %24), !dbg !377
  %not_err = icmp eq i64 %25, 0, !dbg !377
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !377
  br i1 %26, label %after_check, label %assign_optional, !dbg !377

assign_optional:                                  ; preds = %match
  store i64 %25, ptr %error_var, align 8, !dbg !377
  br label %guard_block, !dbg !377

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !377

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !377
  ret i64 %27, !dbg !377

noerr_block:                                      ; preds = %after_check
  %28 = load i64, ptr %retparam, align 8, !dbg !377
  store i64 %28, ptr %available, align 8, !dbg !377
  %i2b17 = icmp ne i64 %28, 0, !dbg !377
  br i1 %i2b17, label %loop.body, label %loop.exit, !dbg !377

loop.body:                                        ; preds = %noerr_block
  %29 = load ptr, ptr %self, align 8, !dbg !378
  %ptradd19 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !378
  %30 = load i64, ptr %ptradd19, align 8, !dbg !378
  %31 = load i64, ptr %available, align 8, !dbg !380
  %add = add i64 %30, %31, !dbg !378
  %32 = load ptr, ptr %self, align 8, !dbg !378
  %33 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %32, i64 %add) #5, !dbg !381
  %not_err20 = icmp eq i64 %33, 0, !dbg !381
  %34 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !381
  br i1 %34, label %after_check22, label %assign_optional21, !dbg !381

assign_optional21:                                ; preds = %loop.body
  store i64 %33, ptr %error_var18, align 8, !dbg !381
  br label %guard_block23, !dbg !381

after_check22:                                    ; preds = %loop.body
  br label %noerr_block24, !dbg !381

guard_block23:                                    ; preds = %assign_optional21
  %35 = load i64, ptr %error_var18, align 8, !dbg !381
  ret i64 %35, !dbg !381

noerr_block24:                                    ; preds = %after_check22
  call void @llvm.dbg.declare(metadata ptr %read, metadata !382, metadata !DIExpression()), !dbg !383
  %36 = load ptr, ptr %self, align 8, !dbg !384
  %37 = load %"char[]", ptr %36, align 8, !dbg !384
  %38 = extractvalue %"char[]" %37, 0, !dbg !384
  %39 = load ptr, ptr %self, align 8, !dbg !385
  %ptradd26 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !385
  %40 = load i64, ptr %ptradd26, align 8, !dbg !385
  %41 = extractvalue %"char[]" %37, 1, !dbg !385
  %gt = icmp ugt i64 %40, %41, !dbg !385
  %42 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !385
  br i1 %42, label %panic27, label %checkok35, !dbg !385

checkok35:                                        ; preds = %noerr_block24
  %size = sub i64 %41, %40, !dbg !384
  %ptradd36 = getelementptr inbounds i8, ptr %38, i64 %40, !dbg !384
  %43 = insertvalue %"char[]" undef, ptr %ptradd36, 0, !dbg !384
  %44 = insertvalue %"char[]" %43, i64 %size, 1, !dbg !384
  %ptradd37 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !384
  %45 = load i64, ptr %ptradd37, align 8, !dbg !384
  %46 = inttoptr i64 %45 to ptr, !dbg !384
  %type40 = load ptr, ptr %.cachedtype39, align 8, !dbg !363
  %47 = icmp eq ptr %46, %type40, !dbg !363
  br i1 %47, label %cache_hit43, label %cache_miss41, !dbg !363

cache_miss41:                                     ; preds = %checkok35
  %ptradd42 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !363
  %48 = load ptr, ptr %ptradd42, align 8, !dbg !363
  %49 = call ptr @.dyn_search(ptr %48, ptr @"$sel.read"), !dbg !363
  store ptr %49, ptr %.inlinecache38, align 8, !dbg !363
  store ptr %46, ptr %.cachedtype39, align 8, !dbg !363
  br label %50, !dbg !363

cache_hit43:                                      ; preds = %checkok35
  %cache_hit_fn44 = load ptr, ptr %.inlinecache38, align 8, !dbg !363
  br label %50, !dbg !363

50:                                               ; preds = %cache_hit43, %cache_miss41
  %fn_phi45 = phi ptr [ %cache_hit_fn44, %cache_hit43 ], [ %49, %cache_miss41 ], !dbg !363
  %51 = icmp eq ptr %fn_phi45, null, !dbg !363
  br i1 %51, label %missing_function46, label %match50, !dbg !363

missing_function46:                               ; preds = %50
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr47, align 8
  %52 = load [2 x i64], ptr %taddr47, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr48, align 8
  %53 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr49, align 8
  %54 = load [2 x i64], ptr %taddr49, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 87), !dbg !386
  unreachable, !dbg !386

match50:                                          ; preds = %50
  %56 = load ptr, ptr %reader, align 8
  store %"char[]" %44, ptr %taddr52, align 8
  %57 = load [2 x i64], ptr %taddr52, align 8
  %58 = call i64 %fn_phi45(ptr %retparam51, ptr %56, [2 x i64] %57), !dbg !386
  %not_err53 = icmp eq i64 %58, 0, !dbg !386
  %59 = call i1 @llvm.expect.i1(i1 %not_err53, i1 true), !dbg !386
  br i1 %59, label %after_check55, label %assign_optional54, !dbg !386

assign_optional54:                                ; preds = %match50
  store i64 %58, ptr %error_var25, align 8, !dbg !386
  br label %guard_block56, !dbg !386

after_check55:                                    ; preds = %match50
  br label %noerr_block57, !dbg !386

guard_block56:                                    ; preds = %assign_optional54
  %60 = load i64, ptr %error_var25, align 8, !dbg !386
  ret i64 %60, !dbg !386

noerr_block57:                                    ; preds = %after_check55
  %61 = load i64, ptr %retparam51, align 8, !dbg !386
  store i64 %61, ptr %read, align 8, !dbg !386
  %62 = load ptr, ptr %self, align 8, !dbg !387
  %ptradd58 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !387
  %63 = load i64, ptr %ptradd58, align 8, !dbg !387
  %64 = load i64, ptr %read, align 8, !dbg !388
  %add59 = add i64 %63, %64, !dbg !387
  store i64 %add59, ptr %ptradd58, align 8, !dbg !387
  br label %loop.cond, !dbg !387

loop.exit:                                        ; preds = %noerr_block
  %65 = load ptr, ptr %self, align 8, !dbg !389
  %ptradd60 = getelementptr inbounds i8, ptr %65, i64 16, !dbg !389
  %66 = load i64, ptr %ptradd60, align 8, !dbg !389
  %67 = load i64, ptr %start_index, align 8, !dbg !390
  %sub = sub i64 %66, %67, !dbg !389
  store i64 %sub, ptr %0, align 8, !dbg !389
  ret i64 0, !dbg !389

if.exit:                                          ; preds = %12
  %68 = load ptr, ptr %self, align 8, !dbg !391
  %ptradd61 = getelementptr inbounds i8, ptr %68, i64 8, !dbg !391
  %69 = load i64, ptr %ptradd61, align 8, !dbg !391
  %eq = icmp eq i64 0, %69, !dbg !391
  br i1 %eq, label %if.then62, label %if.exit69, !dbg !391

if.then62:                                        ; preds = %if.exit
  %70 = load ptr, ptr %self, align 8, !dbg !392
  %71 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %70, i64 16) #5, !dbg !394
  %not_err64 = icmp eq i64 %71, 0, !dbg !394
  %72 = call i1 @llvm.expect.i1(i1 %not_err64, i1 true), !dbg !394
  br i1 %72, label %after_check66, label %assign_optional65, !dbg !394

assign_optional65:                                ; preds = %if.then62
  store i64 %71, ptr %error_var63, align 8, !dbg !394
  br label %guard_block67, !dbg !394

after_check66:                                    ; preds = %if.then62
  br label %noerr_block68, !dbg !394

guard_block67:                                    ; preds = %assign_optional65
  %73 = load i64, ptr %error_var63, align 8, !dbg !394
  ret i64 %73, !dbg !394

noerr_block68:                                    ; preds = %after_check66
  br label %if.exit69, !dbg !394

if.exit69:                                        ; preds = %noerr_block68, %if.exit
  br label %loop.body70, !dbg !395

loop.body70:                                      ; preds = %if.exit131, %if.exit69
  call void @llvm.dbg.declare(metadata ptr %len_to_read, metadata !396, metadata !DIExpression()), !dbg !399
  %74 = load ptr, ptr %self, align 8, !dbg !400
  %ptradd71 = getelementptr inbounds i8, ptr %74, i64 8, !dbg !400
  %75 = load i64, ptr %ptradd71, align 8, !dbg !400
  %76 = load ptr, ptr %self, align 8, !dbg !401
  %ptradd72 = getelementptr inbounds i8, ptr %76, i64 16, !dbg !401
  %77 = load i64, ptr %ptradd72, align 8, !dbg !401
  %sub73 = sub i64 %75, %77, !dbg !400
  store i64 %sub73, ptr %len_to_read, align 8, !dbg !400
  %78 = load i64, ptr %len_to_read, align 8, !dbg !402
  %gt74 = icmp ugt i64 16, %78, !dbg !402
  br i1 %gt74, label %if.then75, label %if.exit86, !dbg !402

if.then75:                                        ; preds = %loop.body70
  %79 = load ptr, ptr %self, align 8, !dbg !403
  %ptradd77 = getelementptr inbounds i8, ptr %79, i64 8, !dbg !403
  %80 = load i64, ptr %ptradd77, align 8, !dbg !403
  %mul = mul i64 %80, 2, !dbg !403
  %81 = load ptr, ptr %self, align 8, !dbg !403
  %82 = call i64 @std.io.ByteWriter.ensure_capacity(ptr %81, i64 %mul) #5, !dbg !405
  %not_err78 = icmp eq i64 %82, 0, !dbg !405
  %83 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !405
  br i1 %83, label %after_check80, label %assign_optional79, !dbg !405

assign_optional79:                                ; preds = %if.then75
  store i64 %82, ptr %error_var76, align 8, !dbg !405
  br label %guard_block81, !dbg !405

after_check80:                                    ; preds = %if.then75
  br label %noerr_block82, !dbg !405

guard_block81:                                    ; preds = %assign_optional79
  %84 = load i64, ptr %error_var76, align 8, !dbg !405
  ret i64 %84, !dbg !405

noerr_block82:                                    ; preds = %after_check80
  %85 = load ptr, ptr %self, align 8, !dbg !406
  %ptradd83 = getelementptr inbounds i8, ptr %85, i64 8, !dbg !406
  %86 = load i64, ptr %ptradd83, align 8, !dbg !406
  %87 = load ptr, ptr %self, align 8, !dbg !407
  %ptradd84 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !407
  %88 = load i64, ptr %ptradd84, align 8, !dbg !407
  %sub85 = sub i64 %86, %88, !dbg !406
  store i64 %sub85, ptr %len_to_read, align 8, !dbg !406
  br label %if.exit86, !dbg !406

if.exit86:                                        ; preds = %noerr_block82, %loop.body70
  call void @llvm.dbg.declare(metadata ptr %read87, metadata !408, metadata !DIExpression()), !dbg !409
  %89 = load ptr, ptr %self, align 8, !dbg !410
  %90 = load %"char[]", ptr %89, align 8, !dbg !410
  %91 = extractvalue %"char[]" %90, 0, !dbg !410
  %92 = load ptr, ptr %self, align 8, !dbg !411
  %ptradd89 = getelementptr inbounds i8, ptr %92, i64 16, !dbg !411
  %93 = load i64, ptr %ptradd89, align 8, !dbg !411
  %94 = extractvalue %"char[]" %90, 1, !dbg !411
  %gt90 = icmp ugt i64 %93, %94, !dbg !411
  %95 = call i1 @llvm.expect.i1(i1 %gt90, i1 false), !dbg !411
  br i1 %95, label %panic91, label %checkok101, !dbg !411

checkok101:                                       ; preds = %if.exit86
  %size102 = sub i64 %94, %93, !dbg !410
  %ptradd103 = getelementptr inbounds i8, ptr %91, i64 %93, !dbg !410
  %96 = insertvalue %"char[]" undef, ptr %ptradd103, 0, !dbg !410
  %97 = insertvalue %"char[]" %96, i64 %size102, 1, !dbg !410
  %ptradd104 = getelementptr inbounds i8, ptr %reader, i64 8, !dbg !410
  %98 = load i64, ptr %ptradd104, align 8, !dbg !410
  %99 = inttoptr i64 %98 to ptr, !dbg !410
  %type107 = load ptr, ptr %.cachedtype106, align 8, !dbg !363
  %100 = icmp eq ptr %99, %type107, !dbg !363
  br i1 %100, label %cache_hit110, label %cache_miss108, !dbg !363

cache_miss108:                                    ; preds = %checkok101
  %ptradd109 = getelementptr inbounds i8, ptr %99, i64 16, !dbg !363
  %101 = load ptr, ptr %ptradd109, align 8, !dbg !363
  %102 = call ptr @.dyn_search(ptr %101, ptr @"$sel.read"), !dbg !363
  store ptr %102, ptr %.inlinecache105, align 8, !dbg !363
  store ptr %99, ptr %.cachedtype106, align 8, !dbg !363
  br label %103, !dbg !363

cache_hit110:                                     ; preds = %checkok101
  %cache_hit_fn111 = load ptr, ptr %.inlinecache105, align 8, !dbg !363
  br label %103, !dbg !363

103:                                              ; preds = %cache_hit110, %cache_miss108
  %fn_phi112 = phi ptr [ %cache_hit_fn111, %cache_hit110 ], [ %102, %cache_miss108 ], !dbg !363
  %104 = icmp eq ptr %fn_phi112, null, !dbg !363
  br i1 %104, label %missing_function113, label %match117, !dbg !363

missing_function113:                              ; preds = %103
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr114, align 8
  %105 = load [2 x i64], ptr %taddr114, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr115, align 8
  %106 = load [2 x i64], ptr %taddr115, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr116, align 8
  %107 = load [2 x i64], ptr %taddr116, align 8
  %108 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %108([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 107), !dbg !412
  unreachable, !dbg !412

match117:                                         ; preds = %103
  %109 = load ptr, ptr %reader, align 8
  store %"char[]" %97, ptr %taddr119, align 8
  %110 = load [2 x i64], ptr %taddr119, align 8
  %111 = call i64 %fn_phi112(ptr %retparam118, ptr %109, [2 x i64] %110), !dbg !412
  %not_err120 = icmp eq i64 %111, 0, !dbg !412
  %112 = call i1 @llvm.expect.i1(i1 %not_err120, i1 true), !dbg !412
  br i1 %112, label %after_check122, label %assign_optional121, !dbg !412

assign_optional121:                               ; preds = %match117
  store i64 %111, ptr %error_var88, align 8, !dbg !412
  br label %guard_block123, !dbg !412

after_check122:                                   ; preds = %match117
  br label %noerr_block124, !dbg !412

guard_block123:                                   ; preds = %assign_optional121
  %113 = load i64, ptr %error_var88, align 8, !dbg !412
  ret i64 %113, !dbg !412

noerr_block124:                                   ; preds = %after_check122
  %114 = load i64, ptr %retparam118, align 8, !dbg !412
  store i64 %114, ptr %read87, align 8, !dbg !412
  %115 = load ptr, ptr %self, align 8, !dbg !413
  %ptradd125 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !413
  %116 = load i64, ptr %ptradd125, align 8, !dbg !413
  %117 = load i64, ptr %read87, align 8, !dbg !414
  %add126 = add i64 %116, %117, !dbg !413
  store i64 %add126, ptr %ptradd125, align 8, !dbg !413
  %118 = load i64, ptr %read87, align 8, !dbg !415
  %119 = load i64, ptr %len_to_read, align 8, !dbg !416
  %lt = icmp ult i64 %118, %119, !dbg !415
  br i1 %lt, label %if.then127, label %if.exit131, !dbg !415

if.then127:                                       ; preds = %noerr_block124
  %120 = load ptr, ptr %self, align 8, !dbg !417
  %ptradd129 = getelementptr inbounds i8, ptr %120, i64 16, !dbg !417
  %121 = load i64, ptr %ptradd129, align 8, !dbg !417
  %122 = load i64, ptr %start_index, align 8, !dbg !418
  %sub130 = sub i64 %121, %122, !dbg !417
  store i64 %sub130, ptr %0, align 8, !dbg !417
  ret i64 0, !dbg !417

if.exit131:                                       ; preds = %noerr_block124
  br label %loop.body70, !dbg !417

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %123 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr1, align 8
  %124 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr2, align 8
  %125 = load [2 x i64], ptr %taddr2, align 8
  %126 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %126([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 79), !dbg !365
  unreachable, !dbg !365

panic27:                                          ; preds = %noerr_block24
  store i64 %41, ptr %taddr28, align 8
  %127 = insertvalue %any undef, ptr %taddr28, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr29, align 8
  %129 = insertvalue %any undef, ptr %taddr29, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr30, align 8
  %131 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr31, align 8
  %132 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr32, align 8
  %133 = load [2 x i64], ptr %taddr32, align 8
  store %any %128, ptr %varargslots, align 8
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %130, ptr %ptradd33, align 8
  %134 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %134, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr34, align 8
  %135 = load [2 x i64], ptr %taddr34, align 8
  call void @std.core.builtin.panicf([2 x i64] %131, [2 x i64] %132, [2 x i64] %133, i32 87, [2 x i64] %135), !dbg !384
  unreachable, !dbg !384

panic91:                                          ; preds = %if.exit86
  store i64 %94, ptr %taddr92, align 8
  %136 = insertvalue %any undef, ptr %taddr92, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %93, ptr %taddr93, align 8
  %138 = insertvalue %any undef, ptr %taddr93, 0
  %139 = insertvalue %any %138, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr94, align 8
  %140 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.46, i64 13 }, ptr %taddr95, align 8
  %141 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr96, align 8
  %142 = load [2 x i64], ptr %taddr96, align 8
  store %any %137, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %139, ptr %ptradd98, align 8
  %143 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %144 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %140, [2 x i64] %141, [2 x i64] %142, i32 107, [2 x i64] %144), !dbg !410
  unreachable, !dbg !410
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.new_init(ptr %0, ptr %1, i64 %2, i64 %3, [2 x i64] %4) #0 !dbg !419 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %allocator = alloca %any, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %x = alloca i64, align 8
  %.anon = alloca i32, align 4
  %a = alloca i64, align 8
  %b = alloca i32, align 4
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !433
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !433
  br i1 %6, label %panic, label %checkok, !dbg !433

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !434, metadata !DIExpression()), !dbg !435
  store i64 %2, ptr %max_read, align 8
  call void @llvm.dbg.declare(metadata ptr %max_read, metadata !436, metadata !DIExpression()), !dbg !437
  store i64 %3, ptr %initial_capacity, align 8
  call void @llvm.dbg.declare(metadata ptr %initial_capacity, metadata !438, metadata !DIExpression()), !dbg !439
  store [2 x i64] %4, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !440, metadata !DIExpression()), !dbg !441
  %7 = load ptr, ptr %self, align 8, !dbg !442
  %ptradd = getelementptr inbounds i8, ptr %7, i64 24, !dbg !442
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !442
  %8 = load i64, ptr %ptradd3, align 8, !dbg !442
  %eq = icmp eq i64 0, %8, !dbg !442
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !442

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.68, i64 71 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr5, align 8
  %10 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr6, align 8
  %11 = load [2 x i64], ptr %taddr6, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12([2 x i64] %9, [2 x i64] %10, [2 x i64] %11, i32 17), !dbg !442
  unreachable, !dbg !442

assert_ok:                                        ; preds = %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !444
  %checknull = icmp eq ptr %13, null, !dbg !444
  %14 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !444
  br i1 %14, label %panic7, label %checkok11, !dbg !444

checkok11:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %allocator, i32 16, i1 false), !dbg !445
  %ptradd12 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !445
  %15 = load i64, ptr %max_read, align 8, !dbg !446
  store i64 %15, ptr %ptradd12, align 8, !dbg !446
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %13, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !446
  %16 = load i64, ptr %initial_capacity, align 8
  store i64 %16, ptr %x, align 8
  store i32 16, ptr %.anon, align 4
  %17 = load i64, ptr %x, align 8
  store i64 %17, ptr %a, align 8
  %18 = load i32, ptr %.anon, align 4
  store i32 %18, ptr %b, align 4
  %19 = load i64, ptr %a, align 8, !dbg !447
  %20 = load i32, ptr %b, align 4, !dbg !452
  %sext = sext i32 %20 to i64, !dbg !452
  %lt = icmp slt i64 %sext, %19, !dbg !447
  %check = icmp slt i64 %19, 0, !dbg !447
  %siui-lt = or i1 %check, %lt, !dbg !447
  br i1 %siui-lt, label %cond.lhs, label %cond.rhs, !dbg !447

cond.lhs:                                         ; preds = %checkok11
  %21 = load i64, ptr %x, align 8, !dbg !453
  br label %cond.phi, !dbg !453

cond.rhs:                                         ; preds = %checkok11
  %22 = load i32, ptr %.anon, align 4, !dbg !454
  %sext13 = sext i32 %22 to i64, !dbg !454
  br label %cond.phi, !dbg !454

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %21, %cond.lhs ], [ %sext13, %cond.rhs ], !dbg !454
  store i64 %val, ptr %initial_capacity, align 8, !dbg !454
  %23 = load ptr, ptr %self, align 8, !dbg !455
  %24 = load i64, ptr %initial_capacity, align 8, !dbg !455
  %25 = call i64 @std.io.ByteBuffer.grow(ptr %23, i64 %24), !dbg !456
  %not_err = icmp eq i64 %25, 0, !dbg !456
  %26 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !456
  br i1 %26, label %after_check, label %assign_optional, !dbg !456

assign_optional:                                  ; preds = %cond.phi
  store i64 %25, ptr %error_var, align 8, !dbg !456
  br label %guard_block, !dbg !456

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !456

guard_block:                                      ; preds = %assign_optional
  %27 = load i64, ptr %error_var, align 8, !dbg !456
  ret i64 %27, !dbg !456

noerr_block:                                      ; preds = %after_check
  %28 = load ptr, ptr %self, align 8, !dbg !457
  store ptr %28, ptr %0, align 8, !dbg !457
  ret i64 0, !dbg !457

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %29 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %30 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr2, align 8
  %31 = load [2 x i64], ptr %taddr2, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 19), !dbg !435
  unreachable, !dbg !435

panic7:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr8, align 8
  %33 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr9, align 8
  %34 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr10, align 8
  %35 = load [2 x i64], ptr %taddr10, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 21), !dbg !444
  unreachable, !dbg !444
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.temp_init(ptr %0, ptr %1, i64 %2, i64 %3) #0 !dbg !458 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %max_read = alloca i64, align 8
  %initial_capacity = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr3 = alloca %any, align 8
  %4 = icmp eq ptr %1, null, !dbg !461
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !461
  br i1 %5, label %panic, label %checkok, !dbg !461

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !462, metadata !DIExpression()), !dbg !463
  store i64 %2, ptr %max_read, align 8
  call void @llvm.dbg.declare(metadata ptr %max_read, metadata !464, metadata !DIExpression()), !dbg !465
  store i64 %3, ptr %initial_capacity, align 8
  call void @llvm.dbg.declare(metadata ptr %initial_capacity, metadata !466, metadata !DIExpression()), !dbg !467
  %6 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !468
  %i2nb = icmp eq ptr %6, null, !dbg !468
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !468

if.then:                                          ; preds = %checkok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !471
  br label %if.exit, !dbg !471

if.exit:                                          ; preds = %if.then, %checkok
  %7 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !473
  %8 = insertvalue %any undef, ptr %7, 0, !dbg !470
  %9 = insertvalue %any %8, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !470
  %10 = load ptr, ptr %self, align 8
  %11 = load i64, ptr %max_read, align 8
  %12 = load i64, ptr %initial_capacity, align 8
  store %any %9, ptr %taddr3, align 8
  %13 = load [2 x i64], ptr %taddr3, align 8
  %14 = call i64 @std.io.ByteBuffer.new_init(ptr %retparam, ptr %10, i64 %11, i64 %12, [2 x i64] %13), !dbg !474
  %not_err = icmp eq i64 %14, 0, !dbg !474
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !474
  br i1 %15, label %after_check, label %assign_optional, !dbg !474

assign_optional:                                  ; preds = %if.exit
  store i64 %14, ptr %reterr, align 8, !dbg !474
  br label %err_retblock, !dbg !474

after_check:                                      ; preds = %if.exit
  %16 = load ptr, ptr %retparam, align 8, !dbg !474
  store ptr %16, ptr %0, align 8, !dbg !474
  ret i64 0, !dbg !474

err_retblock:                                     ; preds = %assign_optional
  %17 = load i64, ptr %reterr, align 8, !dbg !474
  ret i64 %17, !dbg !474

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %18 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %19 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr2, align 8
  %20 = load [2 x i64], ptr %taddr2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 27), !dbg !463
  unreachable, !dbg !463
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.init_with_buffer(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !475 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteBuffer, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !478
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !478
  br i1 %4, label %panic, label %checkok, !dbg !478

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !479, metadata !DIExpression()), !dbg !480
  store [2 x i64] %2, ptr %buf, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !481, metadata !DIExpression()), !dbg !482
  %ptradd = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !483
  %5 = load i64, ptr %ptradd, align 8, !dbg !483
  %lt = icmp ult i64 0, %5, !dbg !483
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !483

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.69, i64 32 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 33), !dbg !483
  unreachable, !dbg !483

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !485
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !485
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !485
  %11 = load i64, ptr %ptradd7, align 8, !dbg !485
  %eq = icmp eq i64 0, %11, !dbg !485
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !485

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.68, i64 71 }, ptr %taddr9, align 8
  %12 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr10, align 8
  %13 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr11, align 8
  %14 = load [2 x i64], ptr %taddr11, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 34), !dbg !485
  unreachable, !dbg !485

assert_ok12:                                      ; preds = %assert_ok
  %16 = load ptr, ptr %self, align 8, !dbg !486
  %checknull = icmp eq ptr %16, null, !dbg !486
  %17 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !486
  br i1 %17, label %panic13, label %checkok17, !dbg !486

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 64, i1 false)
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16
  %ptradd19 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !487
  %18 = load i64, ptr %ptradd19, align 8, !dbg !487
  store i64 %18, ptr %ptradd18, align 8, !dbg !487
  %ptradd20 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !487
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd20, ptr align 8 %buf, i32 16, i1 false), !dbg !488
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %16, ptr align 8 %.assign_list, i32 64, i1 false), !dbg !488
  %19 = load ptr, ptr %self, align 8, !dbg !489
  store ptr %19, ptr %0, align 8, !dbg !489
  ret i64 0, !dbg !489

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %20 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %21 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr2, align 8
  %22 = load [2 x i64], ptr %taddr2, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 36), !dbg !480
  unreachable, !dbg !480

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr14, align 8
  %24 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr15, align 8
  %25 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.52, i64 16 }, ptr %taddr16, align 8
  %26 = load [2 x i64], ptr %taddr16, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 38), !dbg !486
  unreachable, !dbg !486
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.ByteBuffer.free(ptr %0) #0 !dbg !490 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !493
  %1 = icmp eq ptr %0, null, !dbg !493
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !493
  br i1 %2, label %panic, label %checkok, !dbg !493

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !494, metadata !DIExpression()), !dbg !495
  %3 = load ptr, ptr %self, align 8, !dbg !496
  %4 = load ptr, ptr %3, align 8, !dbg !496
  %i2b = icmp ne ptr %4, null, !dbg !496
  br i1 %i2b, label %if.then, label %if.exit9, !dbg !496

if.then:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !497
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %5, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !498
  %ptradd = getelementptr inbounds i8, ptr %6, i64 24, !dbg !498
  %7 = load ptr, ptr %ptradd, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !499
  %i2nb = icmp eq ptr %8, null, !dbg !499
  br i1 %i2nb, label %if.then3, label %if.exit, !dbg !499

if.then3:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !502

if.exit:                                          ; preds = %if.then
  %ptradd4 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !503
  %9 = load i64, ptr %ptradd4, align 8, !dbg !503
  %10 = inttoptr i64 %9 to ptr, !dbg !503
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !493
  %11 = icmp eq ptr %10, %type, !dbg !493
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !493

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !493
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !493
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !493
  store ptr %13, ptr %.inlinecache, align 8, !dbg !493
  store ptr %10, ptr %.cachedtype, align 8, !dbg !493
  br label %14, !dbg !493

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !493
  br label %14, !dbg !493

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !493
  %15 = icmp eq ptr %fn_phi, null, !dbg !493
  br i1 %15, label %missing_function, label %match, !dbg !493

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr6, align 8
  %16 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr7, align 8
  %17 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr8, align 8
  %18 = load [2 x i64], ptr %taddr8, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 105), !dbg !504
  unreachable, !dbg !504

match:                                            ; preds = %14
  %20 = load ptr, ptr %allocator, align 8, !dbg !504
  %21 = load ptr, ptr %ptr, align 8, !dbg !504
  call void %fn_phi(ptr %20, ptr %21, i8 0), !dbg !504
  br label %expr_block.exit, !dbg !504

expr_block.exit:                                  ; preds = %match, %if.then3
  br label %if.exit9, !dbg !504

if.exit9:                                         ; preds = %expr_block.exit, %checkok
  %22 = load ptr, ptr %self, align 8, !dbg !505
  %checknull = icmp eq ptr %22, null, !dbg !505
  %23 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !505
  br i1 %23, label %panic10, label %checkok14, !dbg !505

checkok14:                                        ; preds = %if.exit9
  call void @llvm.memset.p0.i64(ptr align 8 %22, i8 0, i64 64, i1 false), !dbg !505
  ret void, !dbg !505

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 42), !dbg !495
  unreachable, !dbg !495

panic10:                                          ; preds = %if.exit9
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr11, align 8
  %28 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr12, align 8
  %29 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr13, align 8
  %30 = load [2 x i64], ptr %taddr13, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 45), !dbg !505
  unreachable, !dbg !505
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.write(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !506 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr14 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %varargslots25 = alloca [2 x %any], align 8
  %taddr28 = alloca %"any[]", align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %varargslots52 = alloca [2 x %any], align 8
  %taddr55 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !509
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !509
  br i1 %4, label %panic, label %checkok, !dbg !509

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !510, metadata !DIExpression()), !dbg !511
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !512, metadata !DIExpression()), !dbg !513
  call void @llvm.dbg.declare(metadata ptr %cap, metadata !514, metadata !DIExpression()), !dbg !515
  %5 = load ptr, ptr %self, align 8, !dbg !516
  %ptradd = getelementptr inbounds i8, ptr %5, i64 24, !dbg !516
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !516
  %6 = load i64, ptr %ptradd3, align 8, !dbg !516
  %7 = load ptr, ptr %self, align 8, !dbg !517
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 48, !dbg !517
  %8 = load i64, ptr %ptradd4, align 8, !dbg !517
  %sub = sub i64 %6, %8, !dbg !516
  store i64 %sub, ptr %cap, align 8, !dbg !516
  %9 = load i64, ptr %cap, align 8, !dbg !518
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !519
  %10 = load i64, ptr %ptradd5, align 8, !dbg !519
  %lt = icmp ult i64 %9, %10, !dbg !518
  br i1 %lt, label %if.then, label %if.exit, !dbg !518

if.then:                                          ; preds = %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !520
  %11 = load ptr, ptr %self, align 8, !dbg !520
  %12 = load i64, ptr %ptradd6, align 8, !dbg !520
  %13 = call i64 @std.io.ByteBuffer.grow(ptr %11, i64 %12), !dbg !521
  %not_err = icmp eq i64 %13, 0, !dbg !521
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !521
  br i1 %14, label %after_check, label %assign_optional, !dbg !521

assign_optional:                                  ; preds = %if.then
  store i64 %13, ptr %error_var, align 8, !dbg !521
  br label %guard_block, !dbg !521

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !521

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !521
  ret i64 %15, !dbg !521

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !521

if.exit:                                          ; preds = %noerr_block, %checkok
  %16 = load %"char[]", ptr %bytes, align 8, !dbg !522
  %17 = extractvalue %"char[]" %16, 0, !dbg !522
  %18 = extractvalue %"char[]" %16, 1, !dbg !523
  %gt = icmp ugt i64 0, %18, !dbg !523
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !523
  br i1 %19, label %panic7, label %checkok15, !dbg !523

checkok15:                                        ; preds = %if.exit
  %size = sub i64 %18, 0, !dbg !522
  %20 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !522
  %21 = insertvalue %"char[]" %20, i64 %size, 1, !dbg !522
  %22 = load ptr, ptr %self, align 8, !dbg !524
  %ptradd16 = getelementptr inbounds i8, ptr %22, i64 24, !dbg !524
  %23 = load %"char[]", ptr %ptradd16, align 8, !dbg !524
  %24 = extractvalue %"char[]" %23, 0, !dbg !524
  %25 = load ptr, ptr %self, align 8, !dbg !525
  %ptradd17 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !525
  %26 = load i64, ptr %ptradd17, align 8, !dbg !525
  %27 = extractvalue %"char[]" %23, 1, !dbg !525
  %gt18 = icmp ugt i64 %26, %27, !dbg !525
  %28 = call i1 @llvm.expect.i1(i1 %gt18, i1 false), !dbg !525
  br i1 %28, label %panic19, label %checkok29, !dbg !525

checkok29:                                        ; preds = %checkok15
  %ptradd30 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !526
  %29 = load i64, ptr %ptradd30, align 8, !dbg !526
  %add = add i64 %26, %29, !dbg !526
  %lt31 = icmp ult i64 %27, %add, !dbg !526
  %sub32 = sub i64 %add, 1, !dbg !526
  %30 = call i1 @llvm.expect.i1(i1 %lt31, i1 false), !dbg !526
  br i1 %30, label %panic33, label %checkok43, !dbg !526

checkok43:                                        ; preds = %checkok29
  %size44 = sub i64 %add, %26, !dbg !524
  %ptradd45 = getelementptr inbounds i8, ptr %24, i64 %26, !dbg !524
  %31 = insertvalue %"char[]" undef, ptr %ptradd45, 0, !dbg !524
  %32 = insertvalue %"char[]" %31, i64 %size44, 1, !dbg !524
  %33 = extractvalue %"char[]" %32, 0, !dbg !524
  %34 = extractvalue %"char[]" %21, 0, !dbg !524
  %35 = extractvalue %"char[]" %21, 1, !dbg !524
  %36 = extractvalue %"char[]" %32, 1, !dbg !524
  %neq = icmp ne i64 %36, %35, !dbg !524
  %37 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !524
  br i1 %37, label %panic46, label %checkok56, !dbg !524

checkok56:                                        ; preds = %checkok43
  %38 = mul i64 %35, 1, !dbg !524
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %33, ptr align 1 %34, i64 %38, i1 false), !dbg !524
  %39 = load ptr, ptr %self, align 8, !dbg !527
  %ptradd57 = getelementptr inbounds i8, ptr %39, i64 48, !dbg !527
  %40 = load i64, ptr %ptradd57, align 8, !dbg !527
  %ptradd58 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !528
  %41 = load i64, ptr %ptradd58, align 8, !dbg !528
  %add59 = add i64 %40, %41, !dbg !527
  store i64 %add59, ptr %ptradd57, align 8, !dbg !527
  %ptradd60 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !529
  %42 = load i64, ptr %ptradd60, align 8, !dbg !529
  store i64 %42, ptr %0, align 8, !dbg !529
  ret i64 0, !dbg !529

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %43 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %44 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr2, align 8
  %45 = load [2 x i64], ptr %taddr2, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 48), !dbg !511
  unreachable, !dbg !511

panic7:                                           ; preds = %if.exit
  store i64 %18, ptr %taddr8, align 8
  %47 = insertvalue %any undef, ptr %taddr8, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %49 = insertvalue %any undef, ptr %taddr9, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr10, align 8
  %51 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr11, align 8
  %52 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr12, align 8
  %53 = load [2 x i64], ptr %taddr12, align 8
  store %any %48, ptr %varargslots, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd13, align 8
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr14, align 8
  %55 = load [2 x i64], ptr %taddr14, align 8
  call void @std.core.builtin.panicf([2 x i64] %51, [2 x i64] %52, [2 x i64] %53, i32 52, [2 x i64] %55), !dbg !522
  unreachable, !dbg !522

panic19:                                          ; preds = %checkok15
  store i64 %27, ptr %taddr20, align 8
  %56 = insertvalue %any undef, ptr %taddr20, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr21, align 8
  %58 = insertvalue %any undef, ptr %taddr21, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr22, align 8
  %60 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr23, align 8
  %61 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr24, align 8
  %62 = load [2 x i64], ptr %taddr24, align 8
  store %any %57, ptr %varargslots25, align 8
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %59, ptr %ptradd26, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp27", ptr %taddr28, align 8
  %64 = load [2 x i64], ptr %taddr28, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 52, [2 x i64] %64), !dbg !524
  unreachable, !dbg !524

panic33:                                          ; preds = %checkok29
  store i64 %sub32, ptr %taddr34, align 8
  %65 = insertvalue %any undef, ptr %taddr34, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr35, align 8
  %67 = insertvalue %any undef, ptr %taddr35, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr36, align 8
  %69 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr37, align 8
  %70 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr38, align 8
  %71 = load [2 x i64], ptr %taddr38, align 8
  store %any %66, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %68, ptr %ptradd40, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %73 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 52, [2 x i64] %73), !dbg !524
  unreachable, !dbg !524

panic46:                                          ; preds = %checkok43
  store i64 %36, ptr %taddr47, align 8
  %74 = insertvalue %any undef, ptr %taddr47, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr48, align 8
  %76 = insertvalue %any undef, ptr %taddr48, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr49, align 8
  %78 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr50, align 8
  %79 = load [2 x i64], ptr %taddr50, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr51, align 8
  %80 = load [2 x i64], ptr %taddr51, align 8
  store %any %75, ptr %varargslots52, align 8
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %77, ptr %ptradd53, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp54", ptr %taddr55, align 8
  %82 = load [2 x i64], ptr %taddr55, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 52, [2 x i64] %82), !dbg !524
  unreachable, !dbg !524
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.write_byte(ptr %0, i8 %1) #0 !dbg !530 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %cap = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !533
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !533
  br i1 %3, label %panic, label %checkok, !dbg !533

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !534, metadata !DIExpression()), !dbg !535
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !536, metadata !DIExpression()), !dbg !537
  call void @llvm.dbg.declare(metadata ptr %cap, metadata !538, metadata !DIExpression()), !dbg !539
  %4 = load ptr, ptr %self, align 8, !dbg !540
  %ptradd = getelementptr inbounds i8, ptr %4, i64 24, !dbg !540
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !540
  %5 = load i64, ptr %ptradd3, align 8, !dbg !540
  %6 = load ptr, ptr %self, align 8, !dbg !541
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 48, !dbg !541
  %7 = load i64, ptr %ptradd4, align 8, !dbg !541
  %sub = sub i64 %5, %7, !dbg !540
  store i64 %sub, ptr %cap, align 8, !dbg !540
  %8 = load i64, ptr %cap, align 8, !dbg !542
  %eq = icmp eq i64 0, %8, !dbg !542
  br i1 %eq, label %if.then, label %if.exit, !dbg !542

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !543
  %10 = call i64 @std.io.ByteBuffer.grow(ptr %9, i64 1), !dbg !544
  %not_err = icmp eq i64 %10, 0, !dbg !544
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !544
  br i1 %11, label %after_check, label %assign_optional, !dbg !544

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !544
  br label %guard_block, !dbg !544

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !544

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !544
  ret i64 %12, !dbg !544

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !544

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !545
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 24, !dbg !545
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !545
  %14 = load i64, ptr %ptradd6, align 8, !dbg !545
  %15 = load ptr, ptr %ptradd5, align 8, !dbg !545
  %16 = load ptr, ptr %self, align 8, !dbg !546
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 48, !dbg !546
  %17 = load i64, ptr %ptradd7, align 8, !dbg !546
  %ge = icmp uge i64 %17, %14, !dbg !546
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !546
  br i1 %18, label %panic8, label %checkok16, !dbg !546

checkok16:                                        ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !546
  %19 = load i8, ptr %c, align 1, !dbg !547
  store i8 %19, ptr %ptradd17, align 1, !dbg !547
  %20 = load ptr, ptr %self, align 8, !dbg !548
  %ptradd18 = getelementptr inbounds i8, ptr %20, i64 48, !dbg !548
  %21 = load i64, ptr %ptradd18, align 8, !dbg !548
  %add = add i64 %21, 1, !dbg !548
  store i64 %add, ptr %ptradd18, align 8, !dbg !548
  ret i64 0, !dbg !548

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %22 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %23 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr2, align 8
  %24 = load [2 x i64], ptr %taddr2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 57), !dbg !535
  unreachable, !dbg !535

panic8:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr9, align 8
  %26 = insertvalue %any undef, ptr %taddr9, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr11, align 8
  %30 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr12, align 8
  %31 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr13, align 8
  %32 = load [2 x i64], ptr %taddr13, align 8
  store %any %27, ptr %varargslots, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd14, align 8
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %34 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 61, [2 x i64] %34), !dbg !546
  unreachable, !dbg !546
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !549 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %readable = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %varargslots25 = alloca [2 x %any], align 8
  %taddr28 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 8
  %taddr41 = alloca %"any[]", align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %varargslots52 = alloca [2 x %any], align 8
  %taddr55 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %self73 = alloca ptr, align 8
  %readable77 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca i64, align 8
  %taddr88 = alloca %"char[]", align 8
  %taddr89 = alloca %"char[]", align 8
  %taddr90 = alloca %"char[]", align 8
  %varargslots91 = alloca [2 x %any], align 8
  %taddr94 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca %"char[]", align 8
  %taddr99 = alloca %"char[]", align 8
  %taddr100 = alloca %"char[]", align 8
  %varargslots101 = alloca [1 x %any], align 8
  %taddr103 = alloca %"any[]", align 8
  %taddr110 = alloca i64, align 8
  %taddr111 = alloca i64, align 8
  %taddr112 = alloca %"char[]", align 8
  %taddr113 = alloca %"char[]", align 8
  %taddr114 = alloca %"char[]", align 8
  %varargslots115 = alloca [2 x %any], align 8
  %taddr118 = alloca %"any[]", align 8
  %taddr125 = alloca i64, align 8
  %taddr126 = alloca i64, align 8
  %taddr127 = alloca %"char[]", align 8
  %taddr128 = alloca %"char[]", align 8
  %taddr129 = alloca %"char[]", align 8
  %varargslots130 = alloca [2 x %any], align 8
  %taddr133 = alloca %"any[]", align 8
  %taddr140 = alloca i64, align 8
  %taddr141 = alloca i64, align 8
  %taddr142 = alloca %"char[]", align 8
  %taddr143 = alloca %"char[]", align 8
  %taddr144 = alloca %"char[]", align 8
  %varargslots145 = alloca [2 x %any], align 8
  %taddr148 = alloca %"any[]", align 8
  %taddr153 = alloca i64, align 8
  %taddr154 = alloca i64, align 8
  %taddr155 = alloca %"char[]", align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %varargslots158 = alloca [2 x %any], align 8
  %taddr161 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !550
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !550
  br i1 %4, label %panic, label %checkok, !dbg !550

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !551, metadata !DIExpression()), !dbg !552
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !553, metadata !DIExpression()), !dbg !554
  call void @llvm.dbg.declare(metadata ptr %readable, metadata !555, metadata !DIExpression()), !dbg !556
  %5 = load ptr, ptr %self, align 8, !dbg !557
  %ptradd = getelementptr inbounds i8, ptr %5, i64 48, !dbg !557
  %6 = load i64, ptr %ptradd, align 8, !dbg !557
  %7 = load ptr, ptr %self, align 8, !dbg !558
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !558
  %8 = load i64, ptr %ptradd3, align 8, !dbg !558
  %sub = sub i64 %6, %8, !dbg !557
  store i64 %sub, ptr %readable, align 8, !dbg !557
  %9 = load i64, ptr %readable, align 8, !dbg !559
  %eq = icmp eq i64 0, %9, !dbg !559
  br i1 %eq, label %if.then, label %if.exit, !dbg !559

if.then:                                          ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !560
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 56, !dbg !560
  store i8 0, ptr %ptradd4, align 8, !dbg !562
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !563

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !564, metadata !DIExpression()), !dbg !565
  %11 = load i64, ptr %readable, align 8
  store i64 %11, ptr %x, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !566
  %12 = load i64, ptr %ptradd5, align 8
  store i64 %12, ptr %.anon, align 8
  %13 = load i64, ptr %x, align 8
  store i64 %13, ptr %a, align 8
  %14 = load i64, ptr %.anon, align 8
  store i64 %14, ptr %b, align 8
  %15 = load i64, ptr %a, align 8, !dbg !567
  %16 = load i64, ptr %b, align 8, !dbg !572
  %lt = icmp ult i64 %15, %16, !dbg !567
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !567

cond.lhs:                                         ; preds = %if.exit
  %17 = load i64, ptr %x, align 8, !dbg !573
  br label %cond.phi, !dbg !573

cond.rhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %.anon, align 8, !dbg !574
  br label %cond.phi, !dbg !574

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %17, %cond.lhs ], [ %18, %cond.rhs ], !dbg !574
  store i64 %val, ptr %n, align 8, !dbg !574
  %19 = load ptr, ptr %self, align 8, !dbg !575
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 24, !dbg !575
  %20 = load %"char[]", ptr %ptradd6, align 8, !dbg !575
  %21 = extractvalue %"char[]" %20, 0, !dbg !575
  %22 = load ptr, ptr %self, align 8, !dbg !576
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 40, !dbg !576
  %23 = load i64, ptr %ptradd7, align 8, !dbg !576
  %24 = extractvalue %"char[]" %20, 1, !dbg !576
  %gt = icmp ugt i64 %23, %24, !dbg !576
  %25 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !576
  br i1 %25, label %panic8, label %checkok16, !dbg !576

checkok16:                                        ; preds = %cond.phi
  %26 = load i64, ptr %n, align 8, !dbg !577
  %add = add i64 %23, %26, !dbg !577
  %lt17 = icmp ult i64 %24, %add, !dbg !577
  %sub18 = sub i64 %add, 1, !dbg !577
  %27 = call i1 @llvm.expect.i1(i1 %lt17, i1 false), !dbg !577
  br i1 %27, label %panic19, label %checkok29, !dbg !577

checkok29:                                        ; preds = %checkok16
  %size = sub i64 %add, %23, !dbg !575
  %ptradd30 = getelementptr inbounds i8, ptr %21, i64 %23, !dbg !575
  %28 = insertvalue %"char[]" undef, ptr %ptradd30, 0, !dbg !575
  %29 = insertvalue %"char[]" %28, i64 %size, 1, !dbg !575
  %30 = load %"char[]", ptr %bytes, align 8, !dbg !578
  %31 = extractvalue %"char[]" %30, 0, !dbg !578
  %32 = extractvalue %"char[]" %30, 1, !dbg !579
  %gt31 = icmp ugt i64 0, %32, !dbg !579
  %33 = call i1 @llvm.expect.i1(i1 %gt31, i1 false), !dbg !579
  br i1 %33, label %panic32, label %checkok42, !dbg !579

checkok42:                                        ; preds = %checkok29
  %34 = load i64, ptr %n, align 8, !dbg !580
  %add43 = add i64 0, %34, !dbg !580
  %lt44 = icmp ult i64 %32, %add43, !dbg !580
  %sub45 = sub i64 %add43, 1, !dbg !580
  %35 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !580
  br i1 %35, label %panic46, label %checkok56, !dbg !580

checkok56:                                        ; preds = %checkok42
  %size57 = sub i64 %add43, 0, !dbg !578
  %36 = insertvalue %"char[]" undef, ptr %31, 0, !dbg !578
  %37 = insertvalue %"char[]" %36, i64 %size57, 1, !dbg !578
  %38 = extractvalue %"char[]" %37, 0, !dbg !578
  %39 = extractvalue %"char[]" %29, 0, !dbg !578
  %40 = extractvalue %"char[]" %29, 1, !dbg !578
  %41 = extractvalue %"char[]" %37, 1, !dbg !578
  %neq = icmp ne i64 %41, %40, !dbg !578
  %42 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !578
  br i1 %42, label %panic58, label %checkok68, !dbg !578

checkok68:                                        ; preds = %checkok56
  %43 = mul i64 %40, 1, !dbg !578
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %38, ptr align 1 %39, i64 %43, i1 false), !dbg !578
  %44 = load ptr, ptr %self, align 8, !dbg !581
  %ptradd69 = getelementptr inbounds i8, ptr %44, i64 40, !dbg !581
  %45 = load i64, ptr %ptradd69, align 8, !dbg !581
  %46 = load i64, ptr %n, align 8, !dbg !582
  %add70 = add i64 %45, %46, !dbg !581
  store i64 %add70, ptr %ptradd69, align 8, !dbg !581
  %47 = load ptr, ptr %self, align 8, !dbg !583
  %ptradd71 = getelementptr inbounds i8, ptr %47, i64 56, !dbg !583
  %48 = load i64, ptr %n, align 8, !dbg !584
  %lt72 = icmp ult i64 0, %48, !dbg !584
  %49 = zext i1 %lt72 to i8, !dbg !584
  store i8 %49, ptr %ptradd71, align 8, !dbg !584
  %50 = load ptr, ptr %self, align 8
  store ptr %50, ptr %self73, align 8
  %51 = load ptr, ptr %self73, align 8, !dbg !585
  %ptradd74 = getelementptr inbounds i8, ptr %51, i64 40, !dbg !585
  %52 = load i64, ptr %ptradd74, align 8, !dbg !585
  %53 = load ptr, ptr %self73, align 8, !dbg !588
  %ptradd75 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !588
  %54 = load i64, ptr %ptradd75, align 8, !dbg !588
  %ge = icmp uge i64 %52, %54, !dbg !585
  br i1 %ge, label %if.then76, label %if.exit166, !dbg !585

if.then76:                                        ; preds = %checkok68
  call void @llvm.dbg.declare(metadata ptr %readable77, metadata !589, metadata !DIExpression()), !dbg !591
  %55 = load ptr, ptr %self73, align 8, !dbg !592
  %ptradd78 = getelementptr inbounds i8, ptr %55, i64 48, !dbg !592
  %56 = load i64, ptr %ptradd78, align 8, !dbg !592
  %57 = load ptr, ptr %self73, align 8, !dbg !593
  %ptradd79 = getelementptr inbounds i8, ptr %57, i64 40, !dbg !593
  %58 = load i64, ptr %ptradd79, align 8, !dbg !593
  %sub80 = sub i64 %56, %58, !dbg !592
  store i64 %sub80, ptr %readable77, align 8, !dbg !592
  %59 = load ptr, ptr %self73, align 8, !dbg !594
  %ptradd81 = getelementptr inbounds i8, ptr %59, i64 24, !dbg !594
  %60 = load %"char[]", ptr %ptradd81, align 8, !dbg !594
  %61 = extractvalue %"char[]" %60, 0, !dbg !594
  %62 = load ptr, ptr %self73, align 8, !dbg !595
  %ptradd82 = getelementptr inbounds i8, ptr %62, i64 40, !dbg !595
  %63 = load i64, ptr %ptradd82, align 8, !dbg !595
  %sub83 = sub i64 %63, 1, !dbg !595
  %64 = extractvalue %"char[]" %60, 1, !dbg !595
  %gt84 = icmp sgt i64 %sub83, %64, !dbg !595
  %65 = call i1 @llvm.expect.i1(i1 %gt84, i1 false), !dbg !595
  br i1 %65, label %panic85, label %checkok95, !dbg !595

checkok95:                                        ; preds = %if.then76
  %underflow = icmp slt i64 %sub83, 0, !dbg !594
  %66 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !594
  br i1 %66, label %panic96, label %checkok104, !dbg !594

checkok104:                                       ; preds = %checkok95
  %67 = load i64, ptr %readable77, align 8, !dbg !596
  %add105 = add i64 1, %67, !dbg !597
  %add106 = add i64 %sub83, %add105, !dbg !597
  %lt107 = icmp slt i64 %64, %add106, !dbg !597
  %sub108 = sub i64 %add106, 1, !dbg !597
  %68 = call i1 @llvm.expect.i1(i1 %lt107, i1 false), !dbg !597
  br i1 %68, label %panic109, label %checkok119, !dbg !597

checkok119:                                       ; preds = %checkok104
  %size120 = sub i64 %add106, %sub83, !dbg !594
  %ptradd121 = getelementptr inbounds i8, ptr %61, i64 %sub83, !dbg !594
  %69 = insertvalue %"char[]" undef, ptr %ptradd121, 0, !dbg !594
  %70 = insertvalue %"char[]" %69, i64 %size120, 1, !dbg !594
  %71 = load ptr, ptr %self73, align 8, !dbg !598
  %ptradd122 = getelementptr inbounds i8, ptr %71, i64 24, !dbg !598
  %72 = load %"char[]", ptr %ptradd122, align 8, !dbg !598
  %73 = extractvalue %"char[]" %72, 0, !dbg !598
  %74 = extractvalue %"char[]" %72, 1, !dbg !599
  %gt123 = icmp sgt i64 0, %74, !dbg !599
  %75 = call i1 @llvm.expect.i1(i1 %gt123, i1 false), !dbg !599
  br i1 %75, label %panic124, label %checkok134, !dbg !599

checkok134:                                       ; preds = %checkok119
  %76 = load i64, ptr %readable77, align 8, !dbg !600
  %add135 = add i64 1, %76, !dbg !601
  %add136 = add i64 0, %add135, !dbg !601
  %lt137 = icmp slt i64 %74, %add136, !dbg !601
  %sub138 = sub i64 %add136, 1, !dbg !601
  %77 = call i1 @llvm.expect.i1(i1 %lt137, i1 false), !dbg !601
  br i1 %77, label %panic139, label %checkok149, !dbg !601

checkok149:                                       ; preds = %checkok134
  %size150 = sub i64 %add136, 0, !dbg !598
  %78 = insertvalue %"char[]" undef, ptr %73, 0, !dbg !598
  %79 = insertvalue %"char[]" %78, i64 %size150, 1, !dbg !598
  %80 = extractvalue %"char[]" %79, 0, !dbg !598
  %81 = extractvalue %"char[]" %70, 0, !dbg !598
  %82 = extractvalue %"char[]" %70, 1, !dbg !598
  %83 = extractvalue %"char[]" %79, 1, !dbg !598
  %neq151 = icmp ne i64 %83, %82, !dbg !598
  %84 = call i1 @llvm.expect.i1(i1 %neq151, i1 false), !dbg !598
  br i1 %84, label %panic152, label %checkok162, !dbg !598

checkok162:                                       ; preds = %checkok149
  %85 = mul i64 %82, 1, !dbg !598
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %80, ptr align 1 %81, i64 %85, i1 false), !dbg !598
  %86 = load ptr, ptr %self73, align 8, !dbg !602
  %ptradd163 = getelementptr inbounds i8, ptr %86, i64 48, !dbg !602
  %87 = load i64, ptr %readable77, align 8, !dbg !603
  %add164 = add i64 1, %87, !dbg !604
  store i64 %add164, ptr %ptradd163, align 8, !dbg !604
  %88 = load ptr, ptr %self73, align 8, !dbg !605
  %ptradd165 = getelementptr inbounds i8, ptr %88, i64 40, !dbg !605
  store i64 1, ptr %ptradd165, align 8, !dbg !606
  br label %if.exit166, !dbg !606

if.exit166:                                       ; preds = %checkok162, %checkok68
  %89 = load i64, ptr %n, align 8, !dbg !607
  store i64 %89, ptr %0, align 8, !dbg !607
  ret i64 0, !dbg !607

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %90 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %91 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %92 = load [2 x i64], ptr %taddr2, align 8
  %93 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %93([2 x i64] %90, [2 x i64] %91, [2 x i64] %92, i32 65), !dbg !552
  unreachable, !dbg !552

panic8:                                           ; preds = %cond.phi
  store i64 %24, ptr %taddr9, align 8
  %94 = insertvalue %any undef, ptr %taddr9, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr10, align 8
  %96 = insertvalue %any undef, ptr %taddr10, 0
  %97 = insertvalue %any %96, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr11, align 8
  %98 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr12, align 8
  %99 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr13, align 8
  %100 = load [2 x i64], ptr %taddr13, align 8
  store %any %95, ptr %varargslots, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %97, ptr %ptradd14, align 8
  %101 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %101, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %102 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %98, [2 x i64] %99, [2 x i64] %100, i32 74, [2 x i64] %102), !dbg !575
  unreachable, !dbg !575

panic19:                                          ; preds = %checkok16
  store i64 %sub18, ptr %taddr20, align 8
  %103 = insertvalue %any undef, ptr %taddr20, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr21, align 8
  %105 = insertvalue %any undef, ptr %taddr21, 0
  %106 = insertvalue %any %105, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr22, align 8
  %107 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr23, align 8
  %108 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr24, align 8
  %109 = load [2 x i64], ptr %taddr24, align 8
  store %any %104, ptr %varargslots25, align 8
  %ptradd26 = getelementptr inbounds i8, ptr %varargslots25, i64 16
  store %any %106, ptr %ptradd26, align 8
  %110 = insertvalue %"any[]" undef, ptr %varargslots25, 0
  %"$$temp27" = insertvalue %"any[]" %110, i64 2, 1
  store %"any[]" %"$$temp27", ptr %taddr28, align 8
  %111 = load [2 x i64], ptr %taddr28, align 8
  call void @std.core.builtin.panicf([2 x i64] %107, [2 x i64] %108, [2 x i64] %109, i32 74, [2 x i64] %111), !dbg !575
  unreachable, !dbg !575

panic32:                                          ; preds = %checkok29
  store i64 %32, ptr %taddr33, align 8
  %112 = insertvalue %any undef, ptr %taddr33, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr34, align 8
  %114 = insertvalue %any undef, ptr %taddr34, 0
  %115 = insertvalue %any %114, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr35, align 8
  %116 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr36, align 8
  %117 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr37, align 8
  %118 = load [2 x i64], ptr %taddr37, align 8
  store %any %113, ptr %varargslots38, align 8
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %115, ptr %ptradd39, align 8
  %119 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %119, i64 2, 1
  store %"any[]" %"$$temp40", ptr %taddr41, align 8
  %120 = load [2 x i64], ptr %taddr41, align 8
  call void @std.core.builtin.panicf([2 x i64] %116, [2 x i64] %117, [2 x i64] %118, i32 74, [2 x i64] %120), !dbg !578
  unreachable, !dbg !578

panic46:                                          ; preds = %checkok42
  store i64 %sub45, ptr %taddr47, align 8
  %121 = insertvalue %any undef, ptr %taddr47, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %32, ptr %taddr48, align 8
  %123 = insertvalue %any undef, ptr %taddr48, 0
  %124 = insertvalue %any %123, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr49, align 8
  %125 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr50, align 8
  %126 = load [2 x i64], ptr %taddr50, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr51, align 8
  %127 = load [2 x i64], ptr %taddr51, align 8
  store %any %122, ptr %varargslots52, align 8
  %ptradd53 = getelementptr inbounds i8, ptr %varargslots52, i64 16
  store %any %124, ptr %ptradd53, align 8
  %128 = insertvalue %"any[]" undef, ptr %varargslots52, 0
  %"$$temp54" = insertvalue %"any[]" %128, i64 2, 1
  store %"any[]" %"$$temp54", ptr %taddr55, align 8
  %129 = load [2 x i64], ptr %taddr55, align 8
  call void @std.core.builtin.panicf([2 x i64] %125, [2 x i64] %126, [2 x i64] %127, i32 74, [2 x i64] %129), !dbg !578
  unreachable, !dbg !578

panic58:                                          ; preds = %checkok56
  store i64 %41, ptr %taddr59, align 8
  %130 = insertvalue %any undef, ptr %taddr59, 0
  %131 = insertvalue %any %130, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr60, align 8
  %132 = insertvalue %any undef, ptr %taddr60, 0
  %133 = insertvalue %any %132, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr61, align 8
  %134 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr62, align 8
  %135 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr63, align 8
  %136 = load [2 x i64], ptr %taddr63, align 8
  store %any %131, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %133, ptr %ptradd65, align 8
  %137 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %137, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %138 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %134, [2 x i64] %135, [2 x i64] %136, i32 74, [2 x i64] %138), !dbg !578
  unreachable, !dbg !578

panic85:                                          ; preds = %if.then76
  store i64 %64, ptr %taddr86, align 8
  %139 = insertvalue %any undef, ptr %taddr86, 0
  %140 = insertvalue %any %139, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub83, ptr %taddr87, align 8
  %141 = insertvalue %any undef, ptr %taddr87, 0
  %142 = insertvalue %any %141, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr88, align 8
  %143 = load [2 x i64], ptr %taddr88, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr89, align 8
  %144 = load [2 x i64], ptr %taddr89, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr90, align 8
  %145 = load [2 x i64], ptr %taddr90, align 8
  store %any %140, ptr %varargslots91, align 8
  %ptradd92 = getelementptr inbounds i8, ptr %varargslots91, i64 16
  store %any %142, ptr %ptradd92, align 8
  %146 = insertvalue %"any[]" undef, ptr %varargslots91, 0
  %"$$temp93" = insertvalue %"any[]" %146, i64 2, 1
  store %"any[]" %"$$temp93", ptr %taddr94, align 8
  %147 = load [2 x i64], ptr %taddr94, align 8
  call void @std.core.builtin.panicf([2 x i64] %143, [2 x i64] %144, [2 x i64] %145, i32 144, [2 x i64] %147), !dbg !594
  unreachable, !dbg !594

panic96:                                          ; preds = %checkok95
  store i64 %sub83, ptr %taddr97, align 8
  %148 = insertvalue %any undef, ptr %taddr97, 0
  %149 = insertvalue %any %148, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.72, i64 22 }, ptr %taddr98, align 8
  %150 = load [2 x i64], ptr %taddr98, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr99, align 8
  %151 = load [2 x i64], ptr %taddr99, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr100, align 8
  %152 = load [2 x i64], ptr %taddr100, align 8
  store %any %149, ptr %varargslots101, align 8
  %153 = insertvalue %"any[]" undef, ptr %varargslots101, 0
  %"$$temp102" = insertvalue %"any[]" %153, i64 1, 1
  store %"any[]" %"$$temp102", ptr %taddr103, align 8
  %154 = load [2 x i64], ptr %taddr103, align 8
  call void @std.core.builtin.panicf([2 x i64] %150, [2 x i64] %151, [2 x i64] %152, i32 144, [2 x i64] %154), !dbg !595
  unreachable, !dbg !595

panic109:                                         ; preds = %checkok104
  store i64 %sub108, ptr %taddr110, align 8
  %155 = insertvalue %any undef, ptr %taddr110, 0
  %156 = insertvalue %any %155, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %64, ptr %taddr111, align 8
  %157 = insertvalue %any undef, ptr %taddr111, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr112, align 8
  %159 = load [2 x i64], ptr %taddr112, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr113, align 8
  %160 = load [2 x i64], ptr %taddr113, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr114, align 8
  %161 = load [2 x i64], ptr %taddr114, align 8
  store %any %156, ptr %varargslots115, align 8
  %ptradd116 = getelementptr inbounds i8, ptr %varargslots115, i64 16
  store %any %158, ptr %ptradd116, align 8
  %162 = insertvalue %"any[]" undef, ptr %varargslots115, 0
  %"$$temp117" = insertvalue %"any[]" %162, i64 2, 1
  store %"any[]" %"$$temp117", ptr %taddr118, align 8
  %163 = load [2 x i64], ptr %taddr118, align 8
  call void @std.core.builtin.panicf([2 x i64] %159, [2 x i64] %160, [2 x i64] %161, i32 144, [2 x i64] %163), !dbg !594
  unreachable, !dbg !594

panic124:                                         ; preds = %checkok119
  store i64 %74, ptr %taddr125, align 8
  %164 = insertvalue %any undef, ptr %taddr125, 0
  %165 = insertvalue %any %164, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr126, align 8
  %166 = insertvalue %any undef, ptr %taddr126, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr127, align 8
  %168 = load [2 x i64], ptr %taddr127, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr128, align 8
  %169 = load [2 x i64], ptr %taddr128, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr129, align 8
  %170 = load [2 x i64], ptr %taddr129, align 8
  store %any %165, ptr %varargslots130, align 8
  %ptradd131 = getelementptr inbounds i8, ptr %varargslots130, i64 16
  store %any %167, ptr %ptradd131, align 8
  %171 = insertvalue %"any[]" undef, ptr %varargslots130, 0
  %"$$temp132" = insertvalue %"any[]" %171, i64 2, 1
  store %"any[]" %"$$temp132", ptr %taddr133, align 8
  %172 = load [2 x i64], ptr %taddr133, align 8
  call void @std.core.builtin.panicf([2 x i64] %168, [2 x i64] %169, [2 x i64] %170, i32 144, [2 x i64] %172), !dbg !598
  unreachable, !dbg !598

panic139:                                         ; preds = %checkok134
  store i64 %sub138, ptr %taddr140, align 8
  %173 = insertvalue %any undef, ptr %taddr140, 0
  %174 = insertvalue %any %173, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %74, ptr %taddr141, align 8
  %175 = insertvalue %any undef, ptr %taddr141, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr142, align 8
  %177 = load [2 x i64], ptr %taddr142, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr143, align 8
  %178 = load [2 x i64], ptr %taddr143, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr144, align 8
  %179 = load [2 x i64], ptr %taddr144, align 8
  store %any %174, ptr %varargslots145, align 8
  %ptradd146 = getelementptr inbounds i8, ptr %varargslots145, i64 16
  store %any %176, ptr %ptradd146, align 8
  %180 = insertvalue %"any[]" undef, ptr %varargslots145, 0
  %"$$temp147" = insertvalue %"any[]" %180, i64 2, 1
  store %"any[]" %"$$temp147", ptr %taddr148, align 8
  %181 = load [2 x i64], ptr %taddr148, align 8
  call void @std.core.builtin.panicf([2 x i64] %177, [2 x i64] %178, [2 x i64] %179, i32 144, [2 x i64] %181), !dbg !598
  unreachable, !dbg !598

panic152:                                         ; preds = %checkok149
  store i64 %83, ptr %taddr153, align 8
  %182 = insertvalue %any undef, ptr %taddr153, 0
  %183 = insertvalue %any %182, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %82, ptr %taddr154, align 8
  %184 = insertvalue %any undef, ptr %taddr154, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr155, align 8
  %186 = load [2 x i64], ptr %taddr155, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr156, align 8
  %187 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr157, align 8
  %188 = load [2 x i64], ptr %taddr157, align 8
  store %any %183, ptr %varargslots158, align 8
  %ptradd159 = getelementptr inbounds i8, ptr %varargslots158, i64 16
  store %any %185, ptr %ptradd159, align 8
  %189 = insertvalue %"any[]" undef, ptr %varargslots158, 0
  %"$$temp160" = insertvalue %"any[]" %189, i64 2, 1
  store %"any[]" %"$$temp160", ptr %taddr161, align 8
  %190 = load [2 x i64], ptr %taddr161, align 8
  call void @std.core.builtin.panicf([2 x i64] %186, [2 x i64] %187, [2 x i64] %188, i32 144, [2 x i64] %190), !dbg !598
  unreachable, !dbg !598
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.read_byte(ptr %0, ptr %1) #0 !dbg !608 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readable = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %self20 = alloca ptr, align 8
  %readable25 = alloca i64, align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 8
  %taddr41 = alloca %"any[]", align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr46 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %varargslots48 = alloca [1 x %any], align 8
  %taddr50 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 8
  %taddr64 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca %"char[]", align 8
  %taddr88 = alloca %"char[]", align 8
  %taddr89 = alloca %"char[]", align 8
  %varargslots90 = alloca [2 x %any], align 8
  %taddr93 = alloca %"any[]", align 8
  %taddr97 = alloca i64, align 8
  %taddr98 = alloca i64, align 8
  %taddr99 = alloca %"char[]", align 8
  %taddr100 = alloca %"char[]", align 8
  %taddr101 = alloca %"char[]", align 8
  %varargslots102 = alloca [2 x %any], align 8
  %taddr105 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !611
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !611
  br i1 %3, label %panic, label %checkok, !dbg !611

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !612, metadata !DIExpression()), !dbg !613
  call void @llvm.dbg.declare(metadata ptr %readable, metadata !614, metadata !DIExpression()), !dbg !615
  %4 = load ptr, ptr %self, align 8, !dbg !616
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !616
  %5 = load i64, ptr %ptradd, align 8, !dbg !616
  %6 = load ptr, ptr %self, align 8, !dbg !617
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !617
  %7 = load i64, ptr %ptradd3, align 8, !dbg !617
  %sub = sub i64 %5, %7, !dbg !616
  store i64 %sub, ptr %readable, align 8, !dbg !616
  %8 = load i64, ptr %readable, align 8, !dbg !618
  %eq = icmp eq i64 0, %8, !dbg !618
  br i1 %eq, label %if.then, label %if.exit, !dbg !618

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !619
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 56, !dbg !619
  store i8 0, ptr %ptradd4, align 8, !dbg !621
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !622

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %c, metadata !623, metadata !DIExpression()), !dbg !624
  %10 = load ptr, ptr %self, align 8, !dbg !625
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 24, !dbg !625
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !625
  %11 = load i64, ptr %ptradd6, align 8, !dbg !625
  %12 = load ptr, ptr %ptradd5, align 8, !dbg !625
  %13 = load ptr, ptr %self, align 8, !dbg !626
  %ptradd7 = getelementptr inbounds i8, ptr %13, i64 40, !dbg !626
  %14 = load i64, ptr %ptradd7, align 8, !dbg !626
  %ge = icmp uge i64 %14, %11, !dbg !626
  %15 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !626
  br i1 %15, label %panic8, label %checkok16, !dbg !626

checkok16:                                        ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %12, i64 %14, !dbg !626
  %16 = load i8, ptr %ptradd17, align 1, !dbg !626
  store i8 %16, ptr %c, align 1, !dbg !626
  %17 = load ptr, ptr %self, align 8, !dbg !627
  %ptradd18 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !627
  %18 = load i64, ptr %ptradd18, align 8, !dbg !627
  %add = add i64 %18, 1, !dbg !627
  store i64 %add, ptr %ptradd18, align 8, !dbg !627
  %19 = load ptr, ptr %self, align 8, !dbg !628
  %ptradd19 = getelementptr inbounds i8, ptr %19, i64 56, !dbg !628
  store i8 1, ptr %ptradd19, align 8, !dbg !629
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self20, align 8
  %21 = load ptr, ptr %self20, align 8, !dbg !630
  %ptradd21 = getelementptr inbounds i8, ptr %21, i64 40, !dbg !630
  %22 = load i64, ptr %ptradd21, align 8, !dbg !630
  %23 = load ptr, ptr %self20, align 8, !dbg !633
  %ptradd22 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !633
  %24 = load i64, ptr %ptradd22, align 8, !dbg !633
  %ge23 = icmp uge i64 %22, %24, !dbg !630
  br i1 %ge23, label %if.then24, label %if.exit110, !dbg !630

if.then24:                                        ; preds = %checkok16
  call void @llvm.dbg.declare(metadata ptr %readable25, metadata !634, metadata !DIExpression()), !dbg !636
  %25 = load ptr, ptr %self20, align 8, !dbg !637
  %ptradd26 = getelementptr inbounds i8, ptr %25, i64 48, !dbg !637
  %26 = load i64, ptr %ptradd26, align 8, !dbg !637
  %27 = load ptr, ptr %self20, align 8, !dbg !638
  %ptradd27 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !638
  %28 = load i64, ptr %ptradd27, align 8, !dbg !638
  %sub28 = sub i64 %26, %28, !dbg !637
  store i64 %sub28, ptr %readable25, align 8, !dbg !637
  %29 = load ptr, ptr %self20, align 8, !dbg !639
  %ptradd29 = getelementptr inbounds i8, ptr %29, i64 24, !dbg !639
  %30 = load %"char[]", ptr %ptradd29, align 8, !dbg !639
  %31 = extractvalue %"char[]" %30, 0, !dbg !639
  %32 = load ptr, ptr %self20, align 8, !dbg !640
  %ptradd30 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !640
  %33 = load i64, ptr %ptradd30, align 8, !dbg !640
  %sub31 = sub i64 %33, 1, !dbg !640
  %34 = extractvalue %"char[]" %30, 1, !dbg !640
  %gt = icmp sgt i64 %sub31, %34, !dbg !640
  %35 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !640
  br i1 %35, label %panic32, label %checkok42, !dbg !640

checkok42:                                        ; preds = %if.then24
  %underflow = icmp slt i64 %sub31, 0, !dbg !639
  %36 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !639
  br i1 %36, label %panic43, label %checkok51, !dbg !639

checkok51:                                        ; preds = %checkok42
  %37 = load i64, ptr %readable25, align 8, !dbg !641
  %add52 = add i64 1, %37, !dbg !642
  %add53 = add i64 %sub31, %add52, !dbg !642
  %lt = icmp slt i64 %34, %add53, !dbg !642
  %sub54 = sub i64 %add53, 1, !dbg !642
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !642
  br i1 %38, label %panic55, label %checkok65, !dbg !642

checkok65:                                        ; preds = %checkok51
  %size = sub i64 %add53, %sub31, !dbg !639
  %ptradd66 = getelementptr inbounds i8, ptr %31, i64 %sub31, !dbg !639
  %39 = insertvalue %"char[]" undef, ptr %ptradd66, 0, !dbg !639
  %40 = insertvalue %"char[]" %39, i64 %size, 1, !dbg !639
  %41 = load ptr, ptr %self20, align 8, !dbg !643
  %ptradd67 = getelementptr inbounds i8, ptr %41, i64 24, !dbg !643
  %42 = load %"char[]", ptr %ptradd67, align 8, !dbg !643
  %43 = extractvalue %"char[]" %42, 0, !dbg !643
  %44 = extractvalue %"char[]" %42, 1, !dbg !644
  %gt68 = icmp sgt i64 0, %44, !dbg !644
  %45 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !644
  br i1 %45, label %panic69, label %checkok79, !dbg !644

checkok79:                                        ; preds = %checkok65
  %46 = load i64, ptr %readable25, align 8, !dbg !645
  %add80 = add i64 1, %46, !dbg !646
  %add81 = add i64 0, %add80, !dbg !646
  %lt82 = icmp slt i64 %44, %add81, !dbg !646
  %sub83 = sub i64 %add81, 1, !dbg !646
  %47 = call i1 @llvm.expect.i1(i1 %lt82, i1 false), !dbg !646
  br i1 %47, label %panic84, label %checkok94, !dbg !646

checkok94:                                        ; preds = %checkok79
  %size95 = sub i64 %add81, 0, !dbg !643
  %48 = insertvalue %"char[]" undef, ptr %43, 0, !dbg !643
  %49 = insertvalue %"char[]" %48, i64 %size95, 1, !dbg !643
  %50 = extractvalue %"char[]" %49, 0, !dbg !643
  %51 = extractvalue %"char[]" %40, 0, !dbg !643
  %52 = extractvalue %"char[]" %40, 1, !dbg !643
  %53 = extractvalue %"char[]" %49, 1, !dbg !643
  %neq = icmp ne i64 %53, %52, !dbg !643
  %54 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !643
  br i1 %54, label %panic96, label %checkok106, !dbg !643

checkok106:                                       ; preds = %checkok94
  %55 = mul i64 %52, 1, !dbg !643
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %50, ptr align 1 %51, i64 %55, i1 false), !dbg !643
  %56 = load ptr, ptr %self20, align 8, !dbg !647
  %ptradd107 = getelementptr inbounds i8, ptr %56, i64 48, !dbg !647
  %57 = load i64, ptr %readable25, align 8, !dbg !648
  %add108 = add i64 1, %57, !dbg !649
  store i64 %add108, ptr %ptradd107, align 8, !dbg !649
  %58 = load ptr, ptr %self20, align 8, !dbg !650
  %ptradd109 = getelementptr inbounds i8, ptr %58, i64 40, !dbg !650
  store i64 1, ptr %ptradd109, align 8, !dbg !651
  br label %if.exit110, !dbg !651

if.exit110:                                       ; preds = %checkok106, %checkok16
  %59 = load i8, ptr %c, align 1, !dbg !652
  store i8 %59, ptr %0, align 1, !dbg !652
  ret i64 0, !dbg !652

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %60 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %61 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %62 = load [2 x i64], ptr %taddr2, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 81), !dbg !613
  unreachable, !dbg !613

panic8:                                           ; preds = %if.exit
  store i64 %11, ptr %taddr9, align 8
  %64 = insertvalue %any undef, ptr %taddr9, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr10, align 8
  %66 = insertvalue %any undef, ptr %taddr10, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr11, align 8
  %68 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr12, align 8
  %69 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr13, align 8
  %70 = load [2 x i64], ptr %taddr13, align 8
  store %any %65, ptr %varargslots, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %67, ptr %ptradd14, align 8
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %72 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %68, [2 x i64] %69, [2 x i64] %70, i32 89, [2 x i64] %72), !dbg !626
  unreachable, !dbg !626

panic32:                                          ; preds = %if.then24
  store i64 %34, ptr %taddr33, align 8
  %73 = insertvalue %any undef, ptr %taddr33, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub31, ptr %taddr34, align 8
  %75 = insertvalue %any undef, ptr %taddr34, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr35, align 8
  %77 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr36, align 8
  %78 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr37, align 8
  %79 = load [2 x i64], ptr %taddr37, align 8
  store %any %74, ptr %varargslots38, align 8
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %76, ptr %ptradd39, align 8
  %80 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp40", ptr %taddr41, align 8
  %81 = load [2 x i64], ptr %taddr41, align 8
  call void @std.core.builtin.panicf([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 144, [2 x i64] %81), !dbg !639
  unreachable, !dbg !639

panic43:                                          ; preds = %checkok42
  store i64 %sub31, ptr %taddr44, align 8
  %82 = insertvalue %any undef, ptr %taddr44, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.72, i64 22 }, ptr %taddr45, align 8
  %84 = load [2 x i64], ptr %taddr45, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr46, align 8
  %85 = load [2 x i64], ptr %taddr46, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr47, align 8
  %86 = load [2 x i64], ptr %taddr47, align 8
  store %any %83, ptr %varargslots48, align 8
  %87 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp49" = insertvalue %"any[]" %87, i64 1, 1
  store %"any[]" %"$$temp49", ptr %taddr50, align 8
  %88 = load [2 x i64], ptr %taddr50, align 8
  call void @std.core.builtin.panicf([2 x i64] %84, [2 x i64] %85, [2 x i64] %86, i32 144, [2 x i64] %88), !dbg !640
  unreachable, !dbg !640

panic55:                                          ; preds = %checkok51
  store i64 %sub54, ptr %taddr56, align 8
  %89 = insertvalue %any undef, ptr %taddr56, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %34, ptr %taddr57, align 8
  %91 = insertvalue %any undef, ptr %taddr57, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr58, align 8
  %93 = load [2 x i64], ptr %taddr58, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr59, align 8
  %94 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr60, align 8
  %95 = load [2 x i64], ptr %taddr60, align 8
  store %any %90, ptr %varargslots61, align 8
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %92, ptr %ptradd62, align 8
  %96 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp63", ptr %taddr64, align 8
  %97 = load [2 x i64], ptr %taddr64, align 8
  call void @std.core.builtin.panicf([2 x i64] %93, [2 x i64] %94, [2 x i64] %95, i32 144, [2 x i64] %97), !dbg !639
  unreachable, !dbg !639

panic69:                                          ; preds = %checkok65
  store i64 %44, ptr %taddr70, align 8
  %98 = insertvalue %any undef, ptr %taddr70, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr71, align 8
  %100 = insertvalue %any undef, ptr %taddr71, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr72, align 8
  %102 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr73, align 8
  %103 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr74, align 8
  %104 = load [2 x i64], ptr %taddr74, align 8
  store %any %99, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %101, ptr %ptradd76, align 8
  %105 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %106 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %102, [2 x i64] %103, [2 x i64] %104, i32 144, [2 x i64] %106), !dbg !643
  unreachable, !dbg !643

panic84:                                          ; preds = %checkok79
  store i64 %sub83, ptr %taddr85, align 8
  %107 = insertvalue %any undef, ptr %taddr85, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %44, ptr %taddr86, align 8
  %109 = insertvalue %any undef, ptr %taddr86, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr87, align 8
  %111 = load [2 x i64], ptr %taddr87, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr88, align 8
  %112 = load [2 x i64], ptr %taddr88, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr89, align 8
  %113 = load [2 x i64], ptr %taddr89, align 8
  store %any %108, ptr %varargslots90, align 8
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %110, ptr %ptradd91, align 8
  %114 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp92", ptr %taddr93, align 8
  %115 = load [2 x i64], ptr %taddr93, align 8
  call void @std.core.builtin.panicf([2 x i64] %111, [2 x i64] %112, [2 x i64] %113, i32 144, [2 x i64] %115), !dbg !643
  unreachable, !dbg !643

panic96:                                          ; preds = %checkok94
  store i64 %53, ptr %taddr97, align 8
  %116 = insertvalue %any undef, ptr %taddr97, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr98, align 8
  %118 = insertvalue %any undef, ptr %taddr98, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr99, align 8
  %120 = load [2 x i64], ptr %taddr99, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr100, align 8
  %121 = load [2 x i64], ptr %taddr100, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr101, align 8
  %122 = load [2 x i64], ptr %taddr101, align 8
  store %any %117, ptr %varargslots102, align 8
  %ptradd103 = getelementptr inbounds i8, ptr %varargslots102, i64 16
  store %any %119, ptr %ptradd103, align 8
  %123 = insertvalue %"any[]" undef, ptr %varargslots102, 0
  %"$$temp104" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp104", ptr %taddr105, align 8
  %124 = load [2 x i64], ptr %taddr105, align 8
  call void @std.core.builtin.panicf([2 x i64] %120, [2 x i64] %121, [2 x i64] %122, i32 144, [2 x i64] %124), !dbg !643
  unreachable, !dbg !643
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.pushback_byte(ptr %0) #0 !dbg !653 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !656
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !656
  br i1 %2, label %panic, label %checkok, !dbg !656

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !657, metadata !DIExpression()), !dbg !658
  %3 = load ptr, ptr %self, align 8, !dbg !659
  %ptradd = getelementptr inbounds i8, ptr %3, i64 56, !dbg !659
  %4 = load i8, ptr %ptradd, align 8, !dbg !659
  %5 = trunc i8 %4 to i1, !dbg !659
  %not = xor i1 %5, true, !dbg !659
  br i1 %not, label %if.then, label %if.exit, !dbg !659

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !660

if.exit:                                          ; preds = %checkok
  %6 = load ptr, ptr %self, align 8, !dbg !661
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !661
  %7 = load i64, ptr %ptradd3, align 8, !dbg !661
  %lt = icmp ult i64 0, %7, !dbg !661
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !661

assert_fail:                                      ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.74, i64 16 }, ptr %taddr4, align 8
  %8 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr5, align 8
  %9 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.73, i64 13 }, ptr %taddr6, align 8
  %10 = load [2 x i64], ptr %taddr6, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 102), !dbg !661
  unreachable, !dbg !661

assert_ok:                                        ; preds = %if.exit
  %12 = load ptr, ptr %self, align 8, !dbg !662
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !662
  %13 = load i64, ptr %ptradd7, align 8, !dbg !662
  %sub = sub i64 %13, 1, !dbg !662
  store i64 %sub, ptr %ptradd7, align 8, !dbg !662
  %14 = load ptr, ptr %self, align 8, !dbg !663
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 56, !dbg !663
  store i8 0, ptr %ptradd8, align 8, !dbg !664
  ret i64 0, !dbg !664

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %16 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.73, i64 13 }, ptr %taddr2, align 8
  %17 = load [2 x i64], ptr %taddr2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 99), !dbg !658
  unreachable, !dbg !658
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 !dbg !665 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %reterr40 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !668
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !668
  br i1 %5, label %panic, label %checkok, !dbg !668

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !669, metadata !DIExpression()), !dbg !670
  store i64 %2, ptr %offset, align 8
  call void @llvm.dbg.declare(metadata ptr %offset, metadata !671, metadata !DIExpression()), !dbg !673
  store i32 %3, ptr %seek, align 4
  call void @llvm.dbg.declare(metadata ptr %seek, metadata !674, metadata !DIExpression()), !dbg !675
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case4
    i32 2, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !676
  %lt = icmp slt i64 %8, 0, !dbg !676
  br i1 %lt, label %or.phi, label %or.rhs, !dbg !676

or.rhs:                                           ; preds = %switch.case
  %9 = load i64, ptr %offset, align 8, !dbg !679
  %10 = load ptr, ptr %self, align 8, !dbg !680
  %ptradd = getelementptr inbounds i8, ptr %10, i64 48, !dbg !680
  %11 = load i64, ptr %ptradd, align 8, !dbg !680
  %gt = icmp sgt i64 %9, %11, !dbg !679
  %check = icmp sge i64 %11, 0, !dbg !679
  %siui-gt = and i1 %check, %gt, !dbg !679
  br label %or.phi, !dbg !679

or.phi:                                           ; preds = %or.rhs, %switch.case
  %val = phi i1 [ true, %switch.case ], [ %siui-gt, %or.rhs ], !dbg !679
  br i1 %val, label %if.then, label %if.exit, !dbg !679

if.then:                                          ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !681

if.exit:                                          ; preds = %or.phi
  %12 = load ptr, ptr %self, align 8, !dbg !682
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 40, !dbg !682
  %13 = load i64, ptr %offset, align 8, !dbg !683
  store i64 %13, ptr %ptradd3, align 8, !dbg !683
  %14 = load i64, ptr %offset, align 8, !dbg !684
  store i64 %14, ptr %0, align 8, !dbg !684
  ret i64 0, !dbg !684

switch.case4:                                     ; preds = %switch.entry
  %15 = load i64, ptr %offset, align 8, !dbg !685
  %lt5 = icmp slt i64 %15, 0, !dbg !685
  br i1 %lt5, label %and.rhs, label %and.phi, !dbg !685

and.rhs:                                          ; preds = %switch.case4
  %16 = load ptr, ptr %self, align 8, !dbg !687
  %ptradd6 = getelementptr inbounds i8, ptr %16, i64 40, !dbg !687
  %17 = load i64, ptr %ptradd6, align 8, !dbg !687
  %18 = load i64, ptr %offset, align 8, !dbg !688
  %neg = sub i64 0, %18, !dbg !688
  %gt7 = icmp sgt i64 %neg, %17, !dbg !687
  %check8 = icmp sge i64 %17, 0, !dbg !687
  %siui-gt9 = and i1 %check8, %gt7, !dbg !687
  br label %and.phi, !dbg !687

and.phi:                                          ; preds = %and.rhs, %switch.case4
  %val10 = phi i1 [ false, %switch.case4 ], [ %siui-gt9, %and.rhs ], !dbg !687
  br i1 %val10, label %or.phi21, label %or.rhs11, !dbg !687

or.rhs11:                                         ; preds = %and.phi
  %19 = load i64, ptr %offset, align 8, !dbg !689
  %gt12 = icmp sgt i64 %19, 0, !dbg !689
  br i1 %gt12, label %and.rhs13, label %and.phi19, !dbg !689

and.rhs13:                                        ; preds = %or.rhs11
  %20 = load ptr, ptr %self, align 8, !dbg !690
  %ptradd14 = getelementptr inbounds i8, ptr %20, i64 40, !dbg !690
  %21 = load i64, ptr %ptradd14, align 8, !dbg !690
  %22 = load i64, ptr %offset, align 8, !dbg !691
  %add = add i64 %21, %22, !dbg !690
  %23 = load ptr, ptr %self, align 8, !dbg !692
  %ptradd15 = getelementptr inbounds i8, ptr %23, i64 48, !dbg !692
  %24 = load i64, ptr %ptradd15, align 8, !dbg !692
  %gt16 = icmp sgt i64 %add, %24, !dbg !690
  %check17 = icmp sge i64 %24, 0, !dbg !690
  %siui-gt18 = and i1 %check17, %gt16, !dbg !690
  br label %and.phi19, !dbg !690

and.phi19:                                        ; preds = %and.rhs13, %or.rhs11
  %val20 = phi i1 [ false, %or.rhs11 ], [ %siui-gt18, %and.rhs13 ], !dbg !690
  br label %or.phi21, !dbg !690

or.phi21:                                         ; preds = %and.phi19, %and.phi
  %val22 = phi i1 [ true, %and.phi ], [ %val20, %and.phi19 ], !dbg !690
  br i1 %val22, label %if.then23, label %if.exit24, !dbg !690

if.then23:                                        ; preds = %or.phi21
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !693

if.exit24:                                        ; preds = %or.phi21
  %25 = load ptr, ptr %self, align 8, !dbg !694
  %ptradd25 = getelementptr inbounds i8, ptr %25, i64 40, !dbg !694
  %26 = load i64, ptr %ptradd25, align 8, !dbg !694
  %27 = load i64, ptr %offset, align 8, !dbg !695
  %add26 = add i64 %26, %27, !dbg !694
  store i64 %add26, ptr %ptradd25, align 8, !dbg !694
  br label %switch.exit, !dbg !694

switch.case27:                                    ; preds = %switch.entry
  %28 = load i64, ptr %offset, align 8, !dbg !696
  %lt28 = icmp slt i64 %28, 0, !dbg !696
  br i1 %lt28, label %or.phi34, label %or.rhs29, !dbg !696

or.rhs29:                                         ; preds = %switch.case27
  %29 = load i64, ptr %offset, align 8, !dbg !698
  %30 = load ptr, ptr %self, align 8, !dbg !699
  %ptradd30 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !699
  %31 = load i64, ptr %ptradd30, align 8, !dbg !699
  %gt31 = icmp sgt i64 %29, %31, !dbg !698
  %check32 = icmp sge i64 %31, 0, !dbg !698
  %siui-gt33 = and i1 %check32, %gt31, !dbg !698
  br label %or.phi34, !dbg !698

or.phi34:                                         ; preds = %or.rhs29, %switch.case27
  %val35 = phi i1 [ true, %switch.case27 ], [ %siui-gt33, %or.rhs29 ], !dbg !698
  br i1 %val35, label %if.then36, label %if.exit37, !dbg !698

if.then36:                                        ; preds = %or.phi34
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !700

if.exit37:                                        ; preds = %or.phi34
  %32 = load ptr, ptr %self, align 8, !dbg !701
  %ptradd38 = getelementptr inbounds i8, ptr %32, i64 40, !dbg !701
  %33 = load ptr, ptr %self, align 8, !dbg !702
  %ptradd39 = getelementptr inbounds i8, ptr %33, i64 48, !dbg !702
  %34 = load i64, ptr %ptradd39, align 8, !dbg !702
  %35 = load i64, ptr %offset, align 8, !dbg !703
  %sub = sub i64 %34, %35, !dbg !702
  store i64 %sub, ptr %ptradd38, align 8, !dbg !702
  br label %switch.exit, !dbg !702

switch.exit:                                      ; preds = %if.exit37, %if.exit24, %switch.entry
  %36 = load ptr, ptr %self, align 8, !dbg !704
  %ptradd41 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !704
  %37 = load i64, ptr %ptradd41, align 8, !dbg !704
  store i64 %37, ptr %0, align 8, !dbg !704
  ret i64 0, !dbg !704

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %38 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %39 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.75, i64 4 }, ptr %taddr2, align 8
  %40 = load [2 x i64], ptr %taddr2, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 107), !dbg !670
  unreachable, !dbg !670
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.available(ptr %0, ptr %1) #0 !dbg !705 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !708
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !708
  br i1 %3, label %panic, label %checkok, !dbg !708

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !709, metadata !DIExpression()), !dbg !710
  %4 = load ptr, ptr %self, align 8, !dbg !711
  %ptradd = getelementptr inbounds i8, ptr %4, i64 48, !dbg !711
  %5 = load i64, ptr %ptradd, align 8, !dbg !711
  %6 = load ptr, ptr %self, align 8, !dbg !712
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !712
  %7 = load i64, ptr %ptradd3, align 8, !dbg !712
  %sub = sub i64 %5, %7, !dbg !711
  store i64 %sub, ptr %0, align 8, !dbg !711
  ret i64 0, !dbg !711

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 126), !dbg !710
  unreachable, !dbg !710
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteBuffer.grow(ptr %0, i64 %1) #0 !dbg !713 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %p = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %alignment = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %ptr4 = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %allocator15 = alloca %any, align 8
  %size = alloca i64, align 8
  %alignment16 = alloca i64, align 8
  %blockret17 = alloca ptr, align 8
  %.inlinecache22 = alloca ptr, align 8
  %.cachedtype23 = alloca ptr, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %.inlinecache38 = alloca ptr, align 8
  %.cachedtype39 = alloca ptr, align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %retparam51 = alloca ptr, align 8
  store ptr null, ptr %.cachedtype39, align 8, !dbg !716
  store ptr null, ptr %.cachedtype23, align 8, !dbg !716
  store ptr null, ptr %.cachedtype, align 8, !dbg !716
  %2 = icmp eq ptr %0, null, !dbg !716
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !716
  br i1 %3, label %panic, label %checkok, !dbg !716

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !717, metadata !DIExpression()), !dbg !718
  store i64 %1, ptr %n, align 8
  call void @llvm.dbg.declare(metadata ptr %n, metadata !719, metadata !DIExpression()), !dbg !720
  %4 = load i64, ptr %n, align 8
  store i64 %4, ptr %x, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !721, metadata !DIExpression()), !dbg !723
  store i64 1, ptr %y, align 8, !dbg !725
  br label %loop.cond, !dbg !726

loop.cond:                                        ; preds = %loop.body, %checkok
  %5 = load i64, ptr %y, align 8, !dbg !727
  %6 = load i64, ptr %x, align 8, !dbg !729
  %lt = icmp ult i64 %5, %6, !dbg !727
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !727

loop.body:                                        ; preds = %loop.cond
  %7 = load i64, ptr %y, align 8, !dbg !730
  %8 = load i64, ptr %y, align 8, !dbg !731
  %add = add i64 %7, %8, !dbg !730
  store i64 %add, ptr %y, align 8, !dbg !730
  br label %loop.cond, !dbg !730

loop.exit:                                        ; preds = %loop.cond
  %9 = load i64, ptr %y, align 8, !dbg !732
  store i64 %9, ptr %n, align 8, !dbg !732
  call void @llvm.dbg.declare(metadata ptr %p, metadata !733, metadata !DIExpression()), !dbg !734
  %10 = load ptr, ptr %self, align 8, !dbg !735
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %10, i32 16, i1 false)
  %11 = load ptr, ptr %self, align 8, !dbg !736
  %ptradd = getelementptr inbounds i8, ptr %11, i64 24, !dbg !736
  %12 = load ptr, ptr %ptradd, align 8
  store ptr %12, ptr %ptr, align 8
  %13 = load i64, ptr %n, align 8
  store i64 %13, ptr %new_size, align 8
  store i64 1, ptr %alignment, align 8
  %14 = load i64, ptr %new_size, align 8, !dbg !737
  %i2nb = icmp eq i64 %14, 0, !dbg !737
  br i1 %i2nb, label %if.then, label %if.exit12, !dbg !737

if.then:                                          ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %15 = load ptr, ptr %ptr, align 8
  store ptr %15, ptr %ptr4, align 8
  %16 = load ptr, ptr %ptr4, align 8, !dbg !740
  %i2nb5 = icmp eq ptr %16, null, !dbg !740
  br i1 %i2nb5, label %if.then6, label %if.exit, !dbg !740

if.then6:                                         ; preds = %if.then
  br label %expr_block.exit, !dbg !744

if.exit:                                          ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %allocator3, i64 8, !dbg !745
  %17 = load i64, ptr %ptradd7, align 8, !dbg !745
  %18 = inttoptr i64 %17 to ptr, !dbg !745
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !716
  %19 = icmp eq ptr %18, %type, !dbg !716
  br i1 %19, label %cache_hit, label %cache_miss, !dbg !716

cache_miss:                                       ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !716
  %20 = load ptr, ptr %ptradd8, align 8, !dbg !716
  %21 = call ptr @.dyn_search(ptr %20, ptr @"$sel.release"), !dbg !716
  store ptr %21, ptr %.inlinecache, align 8, !dbg !716
  store ptr %18, ptr %.cachedtype, align 8, !dbg !716
  br label %22, !dbg !716

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !716
  br label %22, !dbg !716

22:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %21, %cache_miss ], !dbg !716
  %23 = icmp eq ptr %fn_phi, null, !dbg !716
  br i1 %23, label %missing_function, label %match, !dbg !716

missing_function:                                 ; preds = %22
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr9, align 8
  %24 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr10, align 8
  %25 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.76, i64 4 }, ptr %taddr11, align 8
  %26 = load [2 x i64], ptr %taddr11, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 146), !dbg !746
  unreachable, !dbg !746

match:                                            ; preds = %22
  %28 = load ptr, ptr %allocator3, align 8, !dbg !746
  %29 = load ptr, ptr %ptr4, align 8, !dbg !746
  call void %fn_phi(ptr %28, ptr %29, i8 1), !dbg !746
  br label %expr_block.exit, !dbg !746

expr_block.exit:                                  ; preds = %match, %if.then6
  store ptr null, ptr %blockret, align 8, !dbg !747
  br label %expr_block.exit55, !dbg !747

if.exit12:                                        ; preds = %loop.exit
  %30 = load ptr, ptr %ptr, align 8, !dbg !748
  %i2nb13 = icmp eq ptr %30, null, !dbg !748
  br i1 %i2nb13, label %if.then14, label %if.exit36, !dbg !748

if.then14:                                        ; preds = %if.exit12
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator15, ptr align 8 %allocator, i32 16, i1 false)
  %31 = load i64, ptr %new_size, align 8
  store i64 %31, ptr %size, align 8
  %32 = load i64, ptr %alignment, align 8
  store i64 %32, ptr %alignment16, align 8
  %33 = load i64, ptr %size, align 8, !dbg !749
  %i2nb18 = icmp eq i64 %33, 0, !dbg !749
  br i1 %i2nb18, label %if.then19, label %if.exit20, !dbg !749

if.then19:                                        ; preds = %if.then14
  store ptr null, ptr %blockret17, align 8, !dbg !753
  br label %expr_block.exit35, !dbg !753

if.exit20:                                        ; preds = %if.then14
  %ptradd21 = getelementptr inbounds i8, ptr %allocator15, i64 8, !dbg !754
  %34 = load i64, ptr %ptradd21, align 8, !dbg !754
  %35 = inttoptr i64 %34 to ptr, !dbg !754
  %type24 = load ptr, ptr %.cachedtype23, align 8, !dbg !716
  %36 = icmp eq ptr %35, %type24, !dbg !716
  br i1 %36, label %cache_hit27, label %cache_miss25, !dbg !716

cache_miss25:                                     ; preds = %if.exit20
  %ptradd26 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !716
  %37 = load ptr, ptr %ptradd26, align 8, !dbg !716
  %38 = call ptr @.dyn_search(ptr %37, ptr @"$sel.acquire"), !dbg !716
  store ptr %38, ptr %.inlinecache22, align 8, !dbg !716
  store ptr %35, ptr %.cachedtype23, align 8, !dbg !716
  br label %39, !dbg !716

cache_hit27:                                      ; preds = %if.exit20
  %cache_hit_fn28 = load ptr, ptr %.inlinecache22, align 8, !dbg !716
  br label %39, !dbg !716

39:                                               ; preds = %cache_hit27, %cache_miss25
  %fn_phi29 = phi ptr [ %cache_hit_fn28, %cache_hit27 ], [ %38, %cache_miss25 ], !dbg !716
  %40 = icmp eq ptr %fn_phi29, null, !dbg !716
  br i1 %40, label %missing_function30, label %match34, !dbg !716

missing_function30:                               ; preds = %39
  store %"char[]" { ptr @.panic_msg.58, i64 44 }, ptr %taddr31, align 8
  %41 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr32, align 8
  %42 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.76, i64 4 }, ptr %taddr33, align 8
  %43 = load [2 x i64], ptr %taddr33, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 116), !dbg !755
  unreachable, !dbg !755

match34:                                          ; preds = %39
  %45 = load ptr, ptr %allocator15, align 8
  %46 = load i64, ptr %size, align 8
  %47 = load i64, ptr %alignment16, align 8
  %48 = call i64 %fn_phi29(ptr %retparam, ptr %45, i64 %46, i32 0, i64 %47), !dbg !755
  %not_err = icmp eq i64 %48, 0, !dbg !755
  %49 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !755
  br i1 %49, label %after_check, label %assign_optional, !dbg !755

assign_optional:                                  ; preds = %match34
  store i64 %48, ptr %error_var, align 8, !dbg !755
  br label %guard_block, !dbg !755

after_check:                                      ; preds = %match34
  %50 = load ptr, ptr %retparam, align 8, !dbg !755
  store ptr %50, ptr %blockret17, align 8, !dbg !755
  br label %expr_block.exit35, !dbg !755

expr_block.exit35:                                ; preds = %after_check, %if.then19
  %51 = load ptr, ptr %blockret17, align 8, !dbg !755
  store ptr %51, ptr %blockret, align 8, !dbg !755
  br label %expr_block.exit55, !dbg !755

if.exit36:                                        ; preds = %if.exit12
  %ptradd37 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !756
  %52 = load i64, ptr %ptradd37, align 8, !dbg !756
  %53 = inttoptr i64 %52 to ptr, !dbg !756
  %type40 = load ptr, ptr %.cachedtype39, align 8, !dbg !716
  %54 = icmp eq ptr %53, %type40, !dbg !716
  br i1 %54, label %cache_hit43, label %cache_miss41, !dbg !716

cache_miss41:                                     ; preds = %if.exit36
  %ptradd42 = getelementptr inbounds i8, ptr %53, i64 16, !dbg !716
  %55 = load ptr, ptr %ptradd42, align 8, !dbg !716
  %56 = call ptr @.dyn_search(ptr %55, ptr @"$sel.resize"), !dbg !716
  store ptr %56, ptr %.inlinecache38, align 8, !dbg !716
  store ptr %53, ptr %.cachedtype39, align 8, !dbg !716
  br label %57, !dbg !716

cache_hit43:                                      ; preds = %if.exit36
  %cache_hit_fn44 = load ptr, ptr %.inlinecache38, align 8, !dbg !716
  br label %57, !dbg !716

57:                                               ; preds = %cache_hit43, %cache_miss41
  %fn_phi45 = phi ptr [ %cache_hit_fn44, %cache_hit43 ], [ %56, %cache_miss41 ], !dbg !716
  %58 = icmp eq ptr %fn_phi45, null, !dbg !716
  br i1 %58, label %missing_function46, label %match50, !dbg !716

missing_function46:                               ; preds = %57
  store %"char[]" { ptr @.panic_msg.59, i64 43 }, ptr %taddr47, align 8
  %59 = load [2 x i64], ptr %taddr47, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr48, align 8
  %60 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.func.76, i64 4 }, ptr %taddr49, align 8
  %61 = load [2 x i64], ptr %taddr49, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62([2 x i64] %59, [2 x i64] %60, [2 x i64] %61, i32 137), !dbg !757
  unreachable, !dbg !757

match50:                                          ; preds = %57
  %63 = load ptr, ptr %allocator, align 8
  %64 = load ptr, ptr %ptr, align 8
  %65 = load i64, ptr %new_size, align 8
  %66 = load i64, ptr %alignment, align 8
  %67 = call i64 %fn_phi45(ptr %retparam51, ptr %63, ptr %64, i64 %65, i64 %66), !dbg !757
  %not_err52 = icmp eq i64 %67, 0, !dbg !757
  %68 = call i1 @llvm.expect.i1(i1 %not_err52, i1 true), !dbg !757
  br i1 %68, label %after_check54, label %assign_optional53, !dbg !757

assign_optional53:                                ; preds = %match50
  store i64 %67, ptr %error_var, align 8, !dbg !757
  br label %guard_block, !dbg !757

after_check54:                                    ; preds = %match50
  %69 = load ptr, ptr %retparam51, align 8, !dbg !757
  store ptr %69, ptr %blockret, align 8, !dbg !757
  br label %expr_block.exit55, !dbg !757

expr_block.exit55:                                ; preds = %after_check54, %expr_block.exit35, %expr_block.exit
  br label %noerr_block, !dbg !757

guard_block:                                      ; preds = %assign_optional53, %assign_optional
  %70 = load i64, ptr %error_var, align 8, !dbg !757
  ret i64 %70, !dbg !757

noerr_block:                                      ; preds = %expr_block.exit55
  %71 = load ptr, ptr %blockret, align 8, !dbg !757
  store ptr %71, ptr %p, align 8, !dbg !757
  %72 = load ptr, ptr %self, align 8, !dbg !758
  %ptradd56 = getelementptr inbounds i8, ptr %72, i64 24, !dbg !758
  %73 = load ptr, ptr %p, align 8, !dbg !759
  %74 = load i64, ptr %n, align 8, !dbg !760
  %add57 = add i64 0, %74, !dbg !760
  %size58 = sub i64 %add57, 0, !dbg !760
  %75 = insertvalue %"char[]" undef, ptr %73, 0, !dbg !760
  %76 = insertvalue %"char[]" %75, i64 %size58, 1, !dbg !760
  store %"char[]" %76, ptr %ptradd56, align 8, !dbg !760
  ret i64 0, !dbg !760

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %77 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.67, i64 13 }, ptr %taddr1, align 8
  %78 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.76, i64 4 }, ptr %taddr2, align 8
  %79 = load [2 x i64], ptr %taddr2, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 131), !dbg !718
  unreachable, !dbg !718
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.ReadBuffer.init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !761 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %.assign_list = alloca %ReadBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !772
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !772
  br i1 %4, label %panic, label %checkok, !dbg !772

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !773, metadata !DIExpression()), !dbg !774
  store [2 x i64] %1, ptr %wrapped_stream, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !775, metadata !DIExpression()), !dbg !776
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !777, metadata !DIExpression()), !dbg !778
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !779
  %5 = load i64, ptr %ptradd, align 8, !dbg !779
  %lt = icmp ult i64 0, %5, !dbg !779
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !779

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.78, i64 34 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 14), !dbg !779
  unreachable, !dbg !779

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !781
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !781
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !781
  %11 = load i64, ptr %ptradd7, align 8, !dbg !781
  %eq = icmp eq i64 0, %11, !dbg !781
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !781

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.48, i64 88 }, ptr %taddr9, align 8
  %12 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr10, align 8
  %13 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr11, align 8
  %14 = load [2 x i64], ptr %taddr11, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 15), !dbg !781
  unreachable, !dbg !781

assert_ok12:                                      ; preds = %assert_ok
  %16 = load ptr, ptr %self, align 8, !dbg !782
  %checknull = icmp eq ptr %16, null, !dbg !782
  %17 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !782
  br i1 %17, label %panic13, label %checkok17, !dbg !782

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !783
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !783
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd18, ptr align 8 %bytes, i32 16, i1 false), !dbg !784
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %16, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !784
  %18 = load ptr, ptr %self, align 8, !dbg !785
  ret ptr %18, !dbg !785

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %19 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %20 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %21 = load [2 x i64], ptr %taddr2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 17), !dbg !774
  unreachable, !dbg !774

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr14, align 8
  %23 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr15, align 8
  %24 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr16, align 8
  %25 = load [2 x i64], ptr %taddr16, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 19), !dbg !782
  unreachable, !dbg !782
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.io.ReadBuffer.str_view(ptr %0) #0 !dbg !786 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 8
  %taddr25 = alloca %"any[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !789
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !789
  br i1 %2, label %panic, label %checkok, !dbg !789

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !790, metadata !DIExpression()), !dbg !791
  %3 = load ptr, ptr %self, align 8, !dbg !792
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !792
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !792
  %5 = extractvalue %"char[]" %4, 0, !dbg !792
  %6 = load ptr, ptr %self, align 8, !dbg !793
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !793
  %7 = load i64, ptr %ptradd3, align 8, !dbg !793
  %8 = extractvalue %"char[]" %4, 1, !dbg !793
  %gt = icmp ugt i64 %7, %8, !dbg !793
  %9 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !793
  br i1 %9, label %panic4, label %checkok12, !dbg !793

checkok12:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !794
  %ptradd13 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !794
  %11 = load i64, ptr %ptradd13, align 8, !dbg !794
  %12 = load ptr, ptr %self, align 8, !dbg !795
  %ptradd14 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !795
  %13 = load i64, ptr %ptradd14, align 8, !dbg !795
  %sub = sub i64 %11, %13, !dbg !794
  %add = add i64 %7, %sub, !dbg !794
  %lt = icmp ult i64 %8, %add, !dbg !794
  %sub15 = sub i64 %add, 1, !dbg !794
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !794
  br i1 %14, label %panic16, label %checkok26, !dbg !794

checkok26:                                        ; preds = %checkok12
  %size = sub i64 %add, %7, !dbg !796
  %ptradd27 = getelementptr inbounds i8, ptr %5, i64 %7, !dbg !796
  %15 = insertvalue %"char[]" undef, ptr %ptradd27, 0, !dbg !796
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !796
  store %"char[]" %16, ptr %taddr28, align 8
  %17 = load [2 x i64], ptr %taddr28, align 8
  ret [2 x i64] %17

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %18 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %19 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr2, align 8
  %20 = load [2 x i64], ptr %taddr2, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 22), !dbg !791
  unreachable, !dbg !791

panic4:                                           ; preds = %checkok
  store i64 %8, ptr %taddr5, align 8
  %22 = insertvalue %any undef, ptr %taddr5, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr6, align 8
  %24 = insertvalue %any undef, ptr %taddr6, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr7, align 8
  %26 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr8, align 8
  %27 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr9, align 8
  %28 = load [2 x i64], ptr %taddr9, align 8
  store %any %23, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd10, align 8
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %30 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 24, [2 x i64] %30), !dbg !796
  unreachable, !dbg !796

panic16:                                          ; preds = %checkok12
  store i64 %sub15, ptr %taddr17, align 8
  %31 = insertvalue %any undef, ptr %taddr17, 0
  %32 = insertvalue %any %31, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr18, align 8
  %33 = insertvalue %any undef, ptr %taddr18, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr19, align 8
  %35 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr20, align 8
  %36 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr21, align 8
  %37 = load [2 x i64], ptr %taddr21, align 8
  store %any %32, ptr %varargslots22, align 8
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %34, ptr %ptradd23, align 8
  %38 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %38, i64 2, 1
  store %"any[]" %"$$temp24", ptr %taddr25, align 8
  %39 = load [2 x i64], ptr %taddr25, align 8
  call void @std.core.builtin.panicf([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 24, [2 x i64] %39), !dbg !796
  unreachable, !dbg !796
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ReadBuffer.close(ptr %0) #0 !dbg !797 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !800
  store ptr null, ptr %.cachedtype, align 8, !dbg !800
  %1 = icmp eq ptr %0, null, !dbg !800
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !800
  br i1 %2, label %panic, label %checkok, !dbg !800

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !801, metadata !DIExpression()), !dbg !802
  %3 = load ptr, ptr %self, align 8, !dbg !803
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !803
  %4 = load i64, ptr %ptradd, align 8, !dbg !803
  %5 = inttoptr i64 %4 to ptr, !dbg !803
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !800
  %6 = icmp eq ptr %5, %type, !dbg !800
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !800

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !800
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !800
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !800
  store ptr %8, ptr %.inlinecache, align 8, !dbg !800
  store ptr %5, ptr %.cachedtype, align 8, !dbg !800
  br label %9, !dbg !800

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !800
  br label %9, !dbg !800

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !800
  %i2b = icmp ne ptr %fn_phi, null, !dbg !800
  br i1 %i2b, label %if.then, label %if.exit, !dbg !800

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !804
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !804
  %11 = load i64, ptr %ptradd4, align 8, !dbg !804
  %12 = inttoptr i64 %11 to ptr, !dbg !804
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !800
  %13 = icmp eq ptr %12, %type7, !dbg !800
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !800

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !800
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !800
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !800
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !800
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !800
  br label %16, !dbg !800

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !800
  br label %16, !dbg !800

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !800
  %17 = icmp eq ptr %fn_phi12, null, !dbg !800
  br i1 %17, label %missing_function, label %match, !dbg !800

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.38, i64 42 }, ptr %taddr13, align 8
  %18 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr14, align 8
  %19 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 29), !dbg !804
  unreachable, !dbg !804

match:                                            ; preds = %16
  %22 = load ptr, ptr %10, align 8, !dbg !804
  %23 = call i64 %fn_phi12(ptr %22), !dbg !804
  %not_err = icmp eq i64 %23, 0, !dbg !804
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !804
  br i1 %24, label %after_check, label %assign_optional, !dbg !804

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %error_var, align 8, !dbg !804
  br label %guard_block, !dbg !804

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !804

guard_block:                                      ; preds = %assign_optional
  %25 = load i64, ptr %error_var, align 8, !dbg !804
  ret i64 %25, !dbg !804

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !804

if.exit:                                          ; preds = %noerr_block, %9
  ret i64 0, !dbg !804

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 27), !dbg !802
  unreachable, !dbg !802
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ReadBuffer.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !805 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %error_var15 = alloca i64, align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr35 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 8
  %taddr48 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca i64, align 8
  %taddr69 = alloca %"char[]", align 8
  %taddr70 = alloca %"char[]", align 8
  %taddr71 = alloca %"char[]", align 8
  %varargslots72 = alloca [2 x %any], align 8
  %taddr75 = alloca %"any[]", align 8
  %taddr79 = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %varargslots84 = alloca [2 x %any], align 8
  %taddr87 = alloca %"any[]", align 8
  %reterr91 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !808
  %3 = icmp eq ptr %1, null, !dbg !808
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !808
  br i1 %4, label %panic, label %checkok, !dbg !808

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !809, metadata !DIExpression()), !dbg !810
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !811, metadata !DIExpression()), !dbg !812
  %5 = load ptr, ptr %self, align 8, !dbg !813
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !813
  %6 = load i64, ptr %ptradd, align 8, !dbg !813
  %7 = load ptr, ptr %self, align 8, !dbg !814
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !814
  %8 = load i64, ptr %ptradd3, align 8, !dbg !814
  %eq = icmp eq i64 %6, %8, !dbg !813
  br i1 %eq, label %if.then, label %if.exit21, !dbg !813

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !815
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 32, !dbg !815
  %10 = load i64, ptr %ptradd4, align 8, !dbg !815
  %eq5 = icmp eq i64 0, %10, !dbg !815
  br i1 %eq5, label %and.rhs, label %and.phi, !dbg !815

and.rhs:                                          ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !817
  %11 = load i64, ptr %ptradd6, align 8, !dbg !817
  %12 = load ptr, ptr %self, align 8, !dbg !818
  %ptradd7 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !818
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !818
  %13 = load i64, ptr %ptradd8, align 8, !dbg !818
  %ge = icmp uge i64 %11, %13, !dbg !817
  br label %and.phi, !dbg !817

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %ge, %and.rhs ], !dbg !817
  br i1 %val, label %if.then9, label %if.exit, !dbg !817

if.then9:                                         ; preds = %and.phi
  %14 = load ptr, ptr %self, align 8, !dbg !819
  %ptradd10 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !821
  %15 = load i64, ptr %ptradd10, align 8, !dbg !821
  %16 = inttoptr i64 %15 to ptr, !dbg !821
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !808
  %17 = icmp eq ptr %16, %type, !dbg !808
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !808

cache_miss:                                       ; preds = %if.then9
  %ptradd11 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !808
  %18 = load ptr, ptr %ptradd11, align 8, !dbg !808
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.read"), !dbg !808
  store ptr %19, ptr %.inlinecache, align 8, !dbg !808
  store ptr %16, ptr %.cachedtype, align 8, !dbg !808
  br label %20, !dbg !808

cache_hit:                                        ; preds = %if.then9
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !808
  br label %20, !dbg !808

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !808
  %21 = icmp eq ptr %fn_phi, null, !dbg !808
  br i1 %21, label %missing_function, label %match, !dbg !808

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr13, align 8
  %23 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr14, align 8
  %24 = load [2 x i64], ptr %taddr14, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 39), !dbg !819
  unreachable, !dbg !819

match:                                            ; preds = %20
  %26 = load ptr, ptr %14, align 8
  %27 = load [2 x i64], ptr %bytes, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %26, [2 x i64] %27), !dbg !819
  %not_err = icmp eq i64 %28, 0, !dbg !819
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !819
  br i1 %29, label %after_check, label %assign_optional, !dbg !819

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !819
  br label %guard_block, !dbg !819

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !819

guard_block:                                      ; preds = %assign_optional
  %30 = load i64, ptr %error_var, align 8, !dbg !819
  ret i64 %30, !dbg !819

noerr_block:                                      ; preds = %after_check
  %31 = load i64, ptr %retparam, align 8, !dbg !819
  store i64 %31, ptr %0, align 8, !dbg !819
  ret i64 0, !dbg !819

if.exit:                                          ; preds = %and.phi
  %32 = load ptr, ptr %self, align 8, !dbg !822
  %33 = call i64 @std.io.ReadBuffer.refill(ptr %32) #5, !dbg !822
  %not_err16 = icmp eq i64 %33, 0, !dbg !822
  %34 = call i1 @llvm.expect.i1(i1 %not_err16, i1 true), !dbg !822
  br i1 %34, label %after_check18, label %assign_optional17, !dbg !822

assign_optional17:                                ; preds = %if.exit
  store i64 %33, ptr %error_var15, align 8, !dbg !822
  br label %guard_block19, !dbg !822

after_check18:                                    ; preds = %if.exit
  br label %noerr_block20, !dbg !822

guard_block19:                                    ; preds = %assign_optional17
  %35 = load i64, ptr %error_var15, align 8, !dbg !822
  ret i64 %35, !dbg !822

noerr_block20:                                    ; preds = %after_check18
  br label %if.exit21, !dbg !822

if.exit21:                                        ; preds = %noerr_block20, %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !823, metadata !DIExpression()), !dbg !824
  %36 = load ptr, ptr %self, align 8, !dbg !825
  %ptradd22 = getelementptr inbounds i8, ptr %36, i64 40, !dbg !825
  %37 = load i64, ptr %ptradd22, align 8, !dbg !825
  %38 = load ptr, ptr %self, align 8, !dbg !826
  %ptradd23 = getelementptr inbounds i8, ptr %38, i64 32, !dbg !826
  %39 = load i64, ptr %ptradd23, align 8, !dbg !826
  %sub = sub i64 %37, %39, !dbg !825
  store i64 %sub, ptr %x, align 8
  %ptradd24 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !827
  %40 = load i64, ptr %ptradd24, align 8
  store i64 %40, ptr %.anon, align 8
  %41 = load i64, ptr %x, align 8
  store i64 %41, ptr %a, align 8
  %42 = load i64, ptr %.anon, align 8
  store i64 %42, ptr %b, align 8
  %43 = load i64, ptr %a, align 8, !dbg !828
  %44 = load i64, ptr %b, align 8, !dbg !833
  %lt = icmp ult i64 %43, %44, !dbg !828
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !828

cond.lhs:                                         ; preds = %if.exit21
  %45 = load i64, ptr %x, align 8, !dbg !834
  br label %cond.phi, !dbg !834

cond.rhs:                                         ; preds = %if.exit21
  %46 = load i64, ptr %.anon, align 8, !dbg !835
  br label %cond.phi, !dbg !835

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val25 = phi i64 [ %45, %cond.lhs ], [ %46, %cond.rhs ], !dbg !835
  store i64 %val25, ptr %n, align 8, !dbg !835
  %47 = load ptr, ptr %self, align 8, !dbg !836
  %ptradd26 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !836
  %48 = load %"char[]", ptr %ptradd26, align 8, !dbg !836
  %49 = extractvalue %"char[]" %48, 0, !dbg !836
  %50 = load ptr, ptr %self, align 8, !dbg !837
  %ptradd27 = getelementptr inbounds i8, ptr %50, i64 32, !dbg !837
  %51 = load i64, ptr %ptradd27, align 8, !dbg !837
  %52 = extractvalue %"char[]" %48, 1, !dbg !837
  %gt = icmp ugt i64 %51, %52, !dbg !837
  %53 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !837
  br i1 %53, label %panic28, label %checkok36, !dbg !837

checkok36:                                        ; preds = %cond.phi
  %54 = load i64, ptr %n, align 8, !dbg !838
  %add = add i64 %51, %54, !dbg !838
  %lt37 = icmp ult i64 %52, %add, !dbg !838
  %sub38 = sub i64 %add, 1, !dbg !838
  %55 = call i1 @llvm.expect.i1(i1 %lt37, i1 false), !dbg !838
  br i1 %55, label %panic39, label %checkok49, !dbg !838

checkok49:                                        ; preds = %checkok36
  %size = sub i64 %add, %51, !dbg !836
  %ptradd50 = getelementptr inbounds i8, ptr %49, i64 %51, !dbg !836
  %56 = insertvalue %"char[]" undef, ptr %ptradd50, 0, !dbg !836
  %57 = insertvalue %"char[]" %56, i64 %size, 1, !dbg !836
  %58 = load %"char[]", ptr %bytes, align 8, !dbg !839
  %59 = extractvalue %"char[]" %58, 0, !dbg !839
  %60 = extractvalue %"char[]" %58, 1, !dbg !840
  %gt51 = icmp ugt i64 0, %60, !dbg !840
  %61 = call i1 @llvm.expect.i1(i1 %gt51, i1 false), !dbg !840
  br i1 %61, label %panic52, label %checkok62, !dbg !840

checkok62:                                        ; preds = %checkok49
  %62 = load i64, ptr %n, align 8, !dbg !841
  %add63 = add i64 0, %62, !dbg !841
  %lt64 = icmp ult i64 %60, %add63, !dbg !841
  %sub65 = sub i64 %add63, 1, !dbg !841
  %63 = call i1 @llvm.expect.i1(i1 %lt64, i1 false), !dbg !841
  br i1 %63, label %panic66, label %checkok76, !dbg !841

checkok76:                                        ; preds = %checkok62
  %size77 = sub i64 %add63, 0, !dbg !839
  %64 = insertvalue %"char[]" undef, ptr %59, 0, !dbg !839
  %65 = insertvalue %"char[]" %64, i64 %size77, 1, !dbg !839
  %66 = extractvalue %"char[]" %65, 0, !dbg !839
  %67 = extractvalue %"char[]" %57, 0, !dbg !839
  %68 = extractvalue %"char[]" %57, 1, !dbg !839
  %69 = extractvalue %"char[]" %65, 1, !dbg !839
  %neq = icmp ne i64 %69, %68, !dbg !839
  %70 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !839
  br i1 %70, label %panic78, label %checkok88, !dbg !839

checkok88:                                        ; preds = %checkok76
  %71 = mul i64 %68, 1, !dbg !839
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %66, ptr align 1 %67, i64 %71, i1 false), !dbg !839
  %72 = load ptr, ptr %self, align 8, !dbg !842
  %ptradd89 = getelementptr inbounds i8, ptr %72, i64 32, !dbg !842
  %73 = load i64, ptr %ptradd89, align 8, !dbg !842
  %74 = load i64, ptr %n, align 8, !dbg !843
  %add90 = add i64 %73, %74, !dbg !842
  store i64 %add90, ptr %ptradd89, align 8, !dbg !842
  %75 = load i64, ptr %n, align 8, !dbg !844
  store i64 %75, ptr %0, align 8, !dbg !844
  ret i64 0, !dbg !844

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %76 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %77 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %78 = load [2 x i64], ptr %taddr2, align 8
  %79 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %79([2 x i64] %76, [2 x i64] %77, [2 x i64] %78, i32 32), !dbg !810
  unreachable, !dbg !810

panic28:                                          ; preds = %cond.phi
  store i64 %52, ptr %taddr29, align 8
  %80 = insertvalue %any undef, ptr %taddr29, 0
  %81 = insertvalue %any %80, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %51, ptr %taddr30, align 8
  %82 = insertvalue %any undef, ptr %taddr30, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr31, align 8
  %84 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr32, align 8
  %85 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr33, align 8
  %86 = load [2 x i64], ptr %taddr33, align 8
  store %any %81, ptr %varargslots, align 8
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %83, ptr %ptradd34, align 8
  %87 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %87, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr35, align 8
  %88 = load [2 x i64], ptr %taddr35, align 8
  call void @std.core.builtin.panicf([2 x i64] %84, [2 x i64] %85, [2 x i64] %86, i32 44, [2 x i64] %88), !dbg !836
  unreachable, !dbg !836

panic39:                                          ; preds = %checkok36
  store i64 %sub38, ptr %taddr40, align 8
  %89 = insertvalue %any undef, ptr %taddr40, 0
  %90 = insertvalue %any %89, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %52, ptr %taddr41, align 8
  %91 = insertvalue %any undef, ptr %taddr41, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr42, align 8
  %93 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr43, align 8
  %94 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr44, align 8
  %95 = load [2 x i64], ptr %taddr44, align 8
  store %any %90, ptr %varargslots45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %92, ptr %ptradd46, align 8
  %96 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %96, i64 2, 1
  store %"any[]" %"$$temp47", ptr %taddr48, align 8
  %97 = load [2 x i64], ptr %taddr48, align 8
  call void @std.core.builtin.panicf([2 x i64] %93, [2 x i64] %94, [2 x i64] %95, i32 44, [2 x i64] %97), !dbg !836
  unreachable, !dbg !836

panic52:                                          ; preds = %checkok49
  store i64 %60, ptr %taddr53, align 8
  %98 = insertvalue %any undef, ptr %taddr53, 0
  %99 = insertvalue %any %98, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr54, align 8
  %100 = insertvalue %any undef, ptr %taddr54, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr55, align 8
  %102 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr56, align 8
  %103 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr57, align 8
  %104 = load [2 x i64], ptr %taddr57, align 8
  store %any %99, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %101, ptr %ptradd59, align 8
  %105 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %105, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %106 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %102, [2 x i64] %103, [2 x i64] %104, i32 44, [2 x i64] %106), !dbg !839
  unreachable, !dbg !839

panic66:                                          ; preds = %checkok62
  store i64 %sub65, ptr %taddr67, align 8
  %107 = insertvalue %any undef, ptr %taddr67, 0
  %108 = insertvalue %any %107, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %60, ptr %taddr68, align 8
  %109 = insertvalue %any undef, ptr %taddr68, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr69, align 8
  %111 = load [2 x i64], ptr %taddr69, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr70, align 8
  %112 = load [2 x i64], ptr %taddr70, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr71, align 8
  %113 = load [2 x i64], ptr %taddr71, align 8
  store %any %108, ptr %varargslots72, align 8
  %ptradd73 = getelementptr inbounds i8, ptr %varargslots72, i64 16
  store %any %110, ptr %ptradd73, align 8
  %114 = insertvalue %"any[]" undef, ptr %varargslots72, 0
  %"$$temp74" = insertvalue %"any[]" %114, i64 2, 1
  store %"any[]" %"$$temp74", ptr %taddr75, align 8
  %115 = load [2 x i64], ptr %taddr75, align 8
  call void @std.core.builtin.panicf([2 x i64] %111, [2 x i64] %112, [2 x i64] %113, i32 44, [2 x i64] %115), !dbg !839
  unreachable, !dbg !839

panic78:                                          ; preds = %checkok76
  store i64 %69, ptr %taddr79, align 8
  %116 = insertvalue %any undef, ptr %taddr79, 0
  %117 = insertvalue %any %116, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %68, ptr %taddr80, align 8
  %118 = insertvalue %any undef, ptr %taddr80, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr81, align 8
  %120 = load [2 x i64], ptr %taddr81, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr82, align 8
  %121 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr83, align 8
  %122 = load [2 x i64], ptr %taddr83, align 8
  store %any %117, ptr %varargslots84, align 8
  %ptradd85 = getelementptr inbounds i8, ptr %varargslots84, i64 16
  store %any %119, ptr %ptradd85, align 8
  %123 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp86" = insertvalue %"any[]" %123, i64 2, 1
  store %"any[]" %"$$temp86", ptr %taddr87, align 8
  %124 = load [2 x i64], ptr %taddr87, align 8
  call void @std.core.builtin.panicf([2 x i64] %120, [2 x i64] %121, [2 x i64] %122, i32 44, [2 x i64] %124), !dbg !839
  unreachable, !dbg !839
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ReadBuffer.read_byte(ptr %0, ptr %1) #0 !dbg !845 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr19 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !848
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !848
  br i1 %3, label %panic, label %checkok, !dbg !848

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !849, metadata !DIExpression()), !dbg !850
  %4 = load ptr, ptr %self, align 8, !dbg !851
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !851
  %5 = load i64, ptr %ptradd, align 8, !dbg !851
  %6 = load ptr, ptr %self, align 8, !dbg !852
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !852
  %7 = load i64, ptr %ptradd3, align 8, !dbg !852
  %eq = icmp eq i64 %5, %7, !dbg !851
  br i1 %eq, label %if.then, label %if.exit, !dbg !851

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !853
  %9 = call i64 @std.io.ReadBuffer.refill(ptr %8) #5, !dbg !853
  %not_err = icmp eq i64 %9, 0, !dbg !853
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !853
  br i1 %10, label %after_check, label %assign_optional, !dbg !853

assign_optional:                                  ; preds = %if.then
  store i64 %9, ptr %error_var, align 8, !dbg !853
  br label %guard_block, !dbg !853

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !853

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !853
  ret i64 %11, !dbg !853

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !853

if.exit:                                          ; preds = %noerr_block, %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !854
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !854
  %13 = load i64, ptr %ptradd4, align 8, !dbg !854
  %14 = load ptr, ptr %self, align 8, !dbg !855
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 40, !dbg !855
  %15 = load i64, ptr %ptradd5, align 8, !dbg !855
  %eq6 = icmp eq i64 %13, %15, !dbg !854
  br i1 %eq6, label %if.then7, label %if.exit8, !dbg !854

if.then7:                                         ; preds = %if.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !856

if.exit8:                                         ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %c, metadata !857, metadata !DIExpression()), !dbg !858
  %16 = load ptr, ptr %self, align 8, !dbg !859
  %ptradd9 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !859
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 8, !dbg !859
  %17 = load i64, ptr %ptradd10, align 8, !dbg !859
  %18 = load ptr, ptr %ptradd9, align 8, !dbg !859
  %19 = load ptr, ptr %self, align 8, !dbg !860
  %ptradd11 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !860
  %20 = load i64, ptr %ptradd11, align 8, !dbg !860
  %ge = icmp uge i64 %20, %17, !dbg !860
  %21 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !860
  br i1 %21, label %panic12, label %checkok20, !dbg !860

checkok20:                                        ; preds = %if.exit8
  %ptradd21 = getelementptr inbounds i8, ptr %18, i64 %20, !dbg !860
  %22 = load i8, ptr %ptradd21, align 1, !dbg !860
  store i8 %22, ptr %c, align 1, !dbg !860
  %23 = load ptr, ptr %self, align 8, !dbg !861
  %ptradd22 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !861
  %24 = load i64, ptr %ptradd22, align 8, !dbg !861
  %add = add i64 %24, 1, !dbg !861
  store i64 %add, ptr %ptradd22, align 8, !dbg !861
  %25 = load i8, ptr %c, align 1, !dbg !862
  store i8 %25, ptr %0, align 1, !dbg !862
  ret i64 0, !dbg !862

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 49), !dbg !850
  unreachable, !dbg !850

panic12:                                          ; preds = %if.exit8
  store i64 %17, ptr %taddr13, align 8
  %30 = insertvalue %any undef, ptr %taddr13, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr14, align 8
  %32 = insertvalue %any undef, ptr %taddr14, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr15, align 8
  %34 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr16, align 8
  %35 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr17, align 8
  %36 = load [2 x i64], ptr %taddr17, align 8
  store %any %31, ptr %varargslots, align 8
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd18, align 8
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr19, align 8
  %38 = load [2 x i64], ptr %taddr19, align 8
  call void @std.core.builtin.panicf([2 x i64] %34, [2 x i64] %35, [2 x i64] %36, i32 53, [2 x i64] %38), !dbg !860
  unreachable, !dbg !860
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.ReadBuffer.refill(ptr %0) #0 !dbg !863 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !864
  %1 = icmp eq ptr %0, null, !dbg !864
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !864
  br i1 %2, label %panic, label %checkok, !dbg !864

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !865, metadata !DIExpression()), !dbg !866
  %3 = load ptr, ptr %self, align 8, !dbg !867
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !867
  store i64 0, ptr %ptradd, align 8, !dbg !868
  %4 = load ptr, ptr %self, align 8, !dbg !869
  %ptradd3 = getelementptr inbounds i8, ptr %4, i64 40, !dbg !869
  %5 = load ptr, ptr %self, align 8, !dbg !870
  %6 = load ptr, ptr %self, align 8, !dbg !871
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !871
  %ptradd5 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !871
  %7 = load i64, ptr %ptradd5, align 8, !dbg !871
  %8 = inttoptr i64 %7 to ptr, !dbg !871
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !864
  %9 = icmp eq ptr %8, %type, !dbg !864
  br i1 %9, label %cache_hit, label %cache_miss, !dbg !864

cache_miss:                                       ; preds = %checkok
  %ptradd6 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !864
  %10 = load ptr, ptr %ptradd6, align 8, !dbg !864
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.read"), !dbg !864
  store ptr %11, ptr %.inlinecache, align 8, !dbg !864
  store ptr %8, ptr %.cachedtype, align 8, !dbg !864
  br label %12, !dbg !864

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !864
  br label %12, !dbg !864

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ], !dbg !864
  %13 = icmp eq ptr %fn_phi, null, !dbg !864
  br i1 %13, label %missing_function, label %match, !dbg !864

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr7, align 8
  %14 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr8, align 8
  %15 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.79, i64 6 }, ptr %taddr9, align 8
  %16 = load [2 x i64], ptr %taddr9, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 61), !dbg !870
  unreachable, !dbg !870

match:                                            ; preds = %12
  %18 = load ptr, ptr %5, align 8
  %19 = load [2 x i64], ptr %ptradd4, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, [2 x i64] %19), !dbg !870
  %not_err = icmp eq i64 %20, 0, !dbg !870
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !870
  br i1 %21, label %after_check, label %assign_optional, !dbg !870

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !870
  br label %guard_block, !dbg !870

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !870

guard_block:                                      ; preds = %assign_optional
  %22 = load i64, ptr %error_var, align 8, !dbg !870
  ret i64 %22, !dbg !870

noerr_block:                                      ; preds = %after_check
  %23 = load i64, ptr %retparam, align 8, !dbg !870
  store i64 %23, ptr %ptradd3, align 8, !dbg !870
  ret i64 0, !dbg !870

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.79, i64 6 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 58), !dbg !866
  unreachable, !dbg !866
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.WriteBuffer.init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !872 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %wrapped_stream = alloca %any, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %.assign_list = alloca %WriteBuffer, align 8
  %3 = icmp eq ptr %0, null, !dbg !885
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !885
  br i1 %4, label %panic, label %checkok, !dbg !885

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !886, metadata !DIExpression()), !dbg !887
  store [2 x i64] %1, ptr %wrapped_stream, align 8
  call void @llvm.dbg.declare(metadata ptr %wrapped_stream, metadata !888, metadata !DIExpression()), !dbg !889
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !890, metadata !DIExpression()), !dbg !891
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !892
  %5 = load i64, ptr %ptradd, align 8, !dbg !892
  %lt = icmp ult i64 0, %5, !dbg !892
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !892

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.80, i64 63 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 74), !dbg !892
  unreachable, !dbg !892

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !894
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !894
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !894
  %11 = load i64, ptr %ptradd7, align 8, !dbg !894
  %eq = icmp eq i64 0, %11, !dbg !894
  br i1 %eq, label %assert_ok12, label %assert_fail8, !dbg !894

assert_fail8:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.48, i64 88 }, ptr %taddr9, align 8
  %12 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr10, align 8
  %13 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr11, align 8
  %14 = load [2 x i64], ptr %taddr11, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 75), !dbg !894
  unreachable, !dbg !894

assert_ok12:                                      ; preds = %assert_ok
  %16 = load ptr, ptr %self, align 8, !dbg !895
  %checknull = icmp eq ptr %16, null, !dbg !895
  %17 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !895
  br i1 %17, label %panic13, label %checkok17, !dbg !895

checkok17:                                        ; preds = %assert_ok12
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %wrapped_stream, i32 16, i1 false), !dbg !896
  %ptradd18 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !896
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd18, ptr align 8 %bytes, i32 16, i1 false), !dbg !897
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %16, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !897
  %18 = load ptr, ptr %self, align 8, !dbg !898
  ret ptr %18, !dbg !898

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %19 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %20 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %21 = load [2 x i64], ptr %taddr2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 77), !dbg !887
  unreachable, !dbg !887

panic13:                                          ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr14, align 8
  %23 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr15, align 8
  %24 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr16, align 8
  %25 = load [2 x i64], ptr %taddr16, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 79), !dbg !895
  unreachable, !dbg !895
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.io.WriteBuffer.str_view(ptr %0) #0 !dbg !899 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr10 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !902
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !902
  br i1 %2, label %panic, label %checkok, !dbg !902

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !903, metadata !DIExpression()), !dbg !904
  %3 = load ptr, ptr %self, align 8, !dbg !905
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !905
  %4 = load %"char[]", ptr %ptradd, align 8, !dbg !905
  %5 = extractvalue %"char[]" %4, 0, !dbg !905
  %6 = extractvalue %"char[]" %4, 1, !dbg !906
  %gt = icmp ugt i64 0, %6, !dbg !906
  %7 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !906
  br i1 %7, label %panic3, label %checkok11, !dbg !906

checkok11:                                        ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !907
  %ptradd12 = getelementptr inbounds i8, ptr %8, i64 32, !dbg !907
  %9 = load i64, ptr %ptradd12, align 8, !dbg !907
  %add = add i64 0, %9, !dbg !907
  %lt = icmp ult i64 %6, %add, !dbg !907
  %sub = sub i64 %add, 1, !dbg !907
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !907
  br i1 %10, label %panic13, label %checkok23, !dbg !907

checkok23:                                        ; preds = %checkok11
  %size = sub i64 %add, 0, !dbg !908
  %11 = insertvalue %"char[]" undef, ptr %5, 0, !dbg !908
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !908
  store %"char[]" %12, ptr %taddr24, align 8
  %13 = load [2 x i64], ptr %taddr24, align 8
  ret [2 x i64] %13

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 83), !dbg !904
  unreachable, !dbg !904

panic3:                                           ; preds = %checkok
  store i64 %6, ptr %taddr4, align 8
  %18 = insertvalue %any undef, ptr %taddr4, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %20 = insertvalue %any undef, ptr %taddr5, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr6, align 8
  %22 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr7, align 8
  %23 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr8, align 8
  %24 = load [2 x i64], ptr %taddr8, align 8
  store %any %19, ptr %varargslots, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd9, align 8
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr10, align 8
  %26 = load [2 x i64], ptr %taddr10, align 8
  call void @std.core.builtin.panicf([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 85, [2 x i64] %26), !dbg !908
  unreachable, !dbg !908

panic13:                                          ; preds = %checkok11
  store i64 %sub, ptr %taddr14, align 8
  %27 = insertvalue %any undef, ptr %taddr14, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %6, ptr %taddr15, align 8
  %29 = insertvalue %any undef, ptr %taddr15, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr16, align 8
  %31 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr17, align 8
  %32 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.56, i64 8 }, ptr %taddr18, align 8
  %33 = load [2 x i64], ptr %taddr18, align 8
  store %any %28, ptr %varargslots19, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %30, ptr %ptradd20, align 8
  %34 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp21", ptr %taddr22, align 8
  %35 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 85, [2 x i64] %35), !dbg !908
  unreachable, !dbg !908
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.WriteBuffer.close(ptr %0) #0 !dbg !909 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !912
  store ptr null, ptr %.cachedtype, align 8, !dbg !912
  %1 = icmp eq ptr %0, null, !dbg !912
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !912
  br i1 %2, label %panic, label %checkok, !dbg !912

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !913, metadata !DIExpression()), !dbg !914
  %3 = load ptr, ptr %self, align 8, !dbg !915
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !915
  %4 = load i64, ptr %ptradd, align 8, !dbg !915
  %5 = inttoptr i64 %4 to ptr, !dbg !915
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !912
  %6 = icmp eq ptr %5, %type, !dbg !912
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !912

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !912
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !912
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !912
  store ptr %8, ptr %.inlinecache, align 8, !dbg !912
  store ptr %5, ptr %.cachedtype, align 8, !dbg !912
  br label %9, !dbg !912

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !912
  br label %9, !dbg !912

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !912
  %i2b = icmp ne ptr %fn_phi, null, !dbg !912
  br i1 %i2b, label %if.then, label %if.exit, !dbg !912

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !916
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !916
  %11 = load i64, ptr %ptradd4, align 8, !dbg !916
  %12 = inttoptr i64 %11 to ptr, !dbg !916
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !912
  %13 = icmp eq ptr %12, %type7, !dbg !912
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !912

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !912
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !912
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !912
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !912
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !912
  br label %16, !dbg !912

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !912
  br label %16, !dbg !912

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !912
  %17 = icmp eq ptr %fn_phi12, null, !dbg !912
  br i1 %17, label %missing_function, label %match, !dbg !912

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.38, i64 42 }, ptr %taddr13, align 8
  %18 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr14, align 8
  %19 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 90), !dbg !916
  unreachable, !dbg !916

match:                                            ; preds = %16
  %22 = load ptr, ptr %10, align 8, !dbg !916
  %23 = call i64 %fn_phi12(ptr %22), !dbg !916
  %not_err = icmp eq i64 %23, 0, !dbg !916
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !916
  br i1 %24, label %after_check, label %assign_optional, !dbg !916

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %reterr, align 8, !dbg !916
  br label %err_retblock, !dbg !916

after_check:                                      ; preds = %match
  ret i64 0, !dbg !916

err_retblock:                                     ; preds = %assign_optional
  %25 = load i64, ptr %reterr, align 8, !dbg !916
  ret i64 %25, !dbg !916

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !916

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 88), !dbg !914
  unreachable, !dbg !914
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.WriteBuffer.flush(ptr %0) #0 !dbg !917 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %error_var4 = alloca i64, align 8
  %.inlinecache6 = alloca ptr, align 8
  %.cachedtype7 = alloca ptr, align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype7, align 8, !dbg !918
  store ptr null, ptr %.cachedtype, align 8, !dbg !918
  %1 = icmp eq ptr %0, null, !dbg !918
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !918
  br i1 %2, label %panic, label %checkok, !dbg !918

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !919, metadata !DIExpression()), !dbg !920
  %3 = load ptr, ptr %self, align 8, !dbg !921
  %4 = call i64 @std.io.WriteBuffer.write_pending(ptr %3), !dbg !921
  %not_err = icmp eq i64 %4, 0, !dbg !921
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !921
  br i1 %5, label %after_check, label %assign_optional, !dbg !921

assign_optional:                                  ; preds = %checkok
  store i64 %4, ptr %error_var, align 8, !dbg !921
  br label %guard_block, !dbg !921

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !921

guard_block:                                      ; preds = %assign_optional
  %6 = load i64, ptr %error_var, align 8, !dbg !921
  ret i64 %6, !dbg !921

noerr_block:                                      ; preds = %after_check
  %7 = load ptr, ptr %self, align 8, !dbg !922
  %ptradd = getelementptr inbounds i8, ptr %7, i64 8, !dbg !922
  %8 = load i64, ptr %ptradd, align 8, !dbg !922
  %9 = inttoptr i64 %8 to ptr, !dbg !922
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !918
  %10 = icmp eq ptr %9, %type, !dbg !918
  br i1 %10, label %cache_hit, label %cache_miss, !dbg !918

cache_miss:                                       ; preds = %noerr_block
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !918
  %11 = load ptr, ptr %ptradd3, align 8, !dbg !918
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.flush"), !dbg !918
  store ptr %12, ptr %.inlinecache, align 8, !dbg !918
  store ptr %9, ptr %.cachedtype, align 8, !dbg !918
  br label %13, !dbg !918

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !918
  br label %13, !dbg !918

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ], !dbg !918
  %i2b = icmp ne ptr %fn_phi, null, !dbg !918
  br i1 %i2b, label %if.then, label %if.exit, !dbg !918

if.then:                                          ; preds = %13
  %14 = load ptr, ptr %self, align 8, !dbg !923
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 8, !dbg !923
  %15 = load i64, ptr %ptradd5, align 8, !dbg !923
  %16 = inttoptr i64 %15 to ptr, !dbg !923
  %type8 = load ptr, ptr %.cachedtype7, align 8, !dbg !918
  %17 = icmp eq ptr %16, %type8, !dbg !918
  br i1 %17, label %cache_hit11, label %cache_miss9, !dbg !918

cache_miss9:                                      ; preds = %if.then
  %ptradd10 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !918
  %18 = load ptr, ptr %ptradd10, align 8, !dbg !918
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.flush"), !dbg !918
  store ptr %19, ptr %.inlinecache6, align 8, !dbg !918
  store ptr %16, ptr %.cachedtype7, align 8, !dbg !918
  br label %20, !dbg !918

cache_hit11:                                      ; preds = %if.then
  %cache_hit_fn12 = load ptr, ptr %.inlinecache6, align 8, !dbg !918
  br label %20, !dbg !918

20:                                               ; preds = %cache_hit11, %cache_miss9
  %fn_phi13 = phi ptr [ %cache_hit_fn12, %cache_hit11 ], [ %19, %cache_miss9 ], !dbg !918
  %21 = icmp eq ptr %fn_phi13, null, !dbg !918
  br i1 %21, label %missing_function, label %match, !dbg !918

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.82, i64 42 }, ptr %taddr14, align 8
  %22 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr15, align 8
  %23 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr16, align 8
  %24 = load [2 x i64], ptr %taddr16, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 96), !dbg !923
  unreachable, !dbg !923

match:                                            ; preds = %20
  %26 = load ptr, ptr %14, align 8, !dbg !923
  %27 = call i64 %fn_phi13(ptr %26), !dbg !923
  %not_err17 = icmp eq i64 %27, 0, !dbg !923
  %28 = call i1 @llvm.expect.i1(i1 %not_err17, i1 true), !dbg !923
  br i1 %28, label %after_check19, label %assign_optional18, !dbg !923

assign_optional18:                                ; preds = %match
  store i64 %27, ptr %error_var4, align 8, !dbg !923
  br label %guard_block20, !dbg !923

after_check19:                                    ; preds = %match
  br label %noerr_block21, !dbg !923

guard_block20:                                    ; preds = %assign_optional18
  %29 = load i64, ptr %error_var4, align 8, !dbg !923
  ret i64 %29, !dbg !923

noerr_block21:                                    ; preds = %after_check19
  br label %if.exit, !dbg !923

if.exit:                                          ; preds = %noerr_block21, %13
  ret i64 0, !dbg !923

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %30 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %31 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr2, align 8
  %32 = load [2 x i64], ptr %taddr2, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 93), !dbg !920
  unreachable, !dbg !920
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.WriteBuffer.write(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !924 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 8
  %taddr27 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 8
  %taddr41 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr64 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"char[]", align 8
  %taddr80 = alloca %"char[]", align 8
  %varargslots81 = alloca [2 x %any], align 8
  %taddr84 = alloca %"any[]", align 8
  %taddr90 = alloca i64, align 8
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca %"char[]", align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %varargslots95 = alloca [2 x %any], align 8
  %taddr98 = alloca %"any[]", align 8
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca i64, align 8
  %taddr107 = alloca %"char[]", align 8
  %taddr108 = alloca %"char[]", align 8
  %taddr109 = alloca %"char[]", align 8
  %varargslots110 = alloca [2 x %any], align 8
  %taddr113 = alloca %"any[]", align 8
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %varargslots123 = alloca [2 x %any], align 8
  %taddr126 = alloca %"any[]", align 8
  %reterr130 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !927
  %3 = icmp eq ptr %1, null, !dbg !927
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !927
  br i1 %4, label %panic, label %checkok, !dbg !927

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !928, metadata !DIExpression()), !dbg !929
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !930, metadata !DIExpression()), !dbg !931
  call void @llvm.dbg.declare(metadata ptr %n, metadata !932, metadata !DIExpression()), !dbg !933
  %5 = load ptr, ptr %self, align 8, !dbg !934
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !934
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !934
  %6 = load i64, ptr %ptradd3, align 8, !dbg !934
  %7 = load ptr, ptr %self, align 8, !dbg !935
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 32, !dbg !935
  %8 = load i64, ptr %ptradd4, align 8, !dbg !935
  %sub = sub i64 %6, %8, !dbg !934
  store i64 %sub, ptr %n, align 8, !dbg !934
  %ptradd5 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !936
  %9 = load i64, ptr %ptradd5, align 8, !dbg !936
  %10 = load i64, ptr %n, align 8, !dbg !937
  %lt = icmp ult i64 %9, %10, !dbg !936
  br i1 %lt, label %if.then, label %if.exit, !dbg !936

if.then:                                          ; preds = %checkok
  %11 = load %"char[]", ptr %bytes, align 8, !dbg !938
  %12 = extractvalue %"char[]" %11, 0, !dbg !938
  %13 = extractvalue %"char[]" %11, 1, !dbg !940
  %gt = icmp ugt i64 0, %13, !dbg !940
  %14 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !940
  br i1 %14, label %panic6, label %checkok14, !dbg !940

checkok14:                                        ; preds = %if.then
  %size = sub i64 %13, 0, !dbg !938
  %15 = insertvalue %"char[]" undef, ptr %12, 0, !dbg !938
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !938
  %17 = load ptr, ptr %self, align 8, !dbg !941
  %ptradd15 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !941
  %18 = load %"char[]", ptr %ptradd15, align 8, !dbg !941
  %19 = extractvalue %"char[]" %18, 0, !dbg !941
  %20 = load ptr, ptr %self, align 8, !dbg !942
  %ptradd16 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !942
  %21 = load i64, ptr %ptradd16, align 8, !dbg !942
  %22 = extractvalue %"char[]" %18, 1, !dbg !942
  %gt17 = icmp ugt i64 %21, %22, !dbg !942
  %23 = call i1 @llvm.expect.i1(i1 %gt17, i1 false), !dbg !942
  br i1 %23, label %panic18, label %checkok28, !dbg !942

checkok28:                                        ; preds = %checkok14
  %ptradd29 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !943
  %24 = load i64, ptr %ptradd29, align 8, !dbg !943
  %add = add i64 %21, %24, !dbg !943
  %lt30 = icmp ult i64 %22, %add, !dbg !943
  %sub31 = sub i64 %add, 1, !dbg !943
  %25 = call i1 @llvm.expect.i1(i1 %lt30, i1 false), !dbg !943
  br i1 %25, label %panic32, label %checkok42, !dbg !943

checkok42:                                        ; preds = %checkok28
  %size43 = sub i64 %add, %21, !dbg !941
  %ptradd44 = getelementptr inbounds i8, ptr %19, i64 %21, !dbg !941
  %26 = insertvalue %"char[]" undef, ptr %ptradd44, 0, !dbg !941
  %27 = insertvalue %"char[]" %26, i64 %size43, 1, !dbg !941
  %28 = extractvalue %"char[]" %27, 0, !dbg !941
  %29 = extractvalue %"char[]" %16, 0, !dbg !941
  %30 = extractvalue %"char[]" %16, 1, !dbg !941
  %31 = extractvalue %"char[]" %27, 1, !dbg !941
  %neq = icmp ne i64 %31, %30, !dbg !941
  %32 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !941
  br i1 %32, label %panic45, label %checkok55, !dbg !941

checkok55:                                        ; preds = %checkok42
  %33 = mul i64 %30, 1, !dbg !941
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %28, ptr align 1 %29, i64 %33, i1 false), !dbg !941
  %34 = load ptr, ptr %self, align 8, !dbg !944
  %ptradd56 = getelementptr inbounds i8, ptr %34, i64 32, !dbg !944
  %35 = load i64, ptr %ptradd56, align 8, !dbg !944
  %ptradd57 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !945
  %36 = load i64, ptr %ptradd57, align 8, !dbg !945
  %add58 = add i64 %35, %36, !dbg !944
  store i64 %add58, ptr %ptradd56, align 8, !dbg !944
  %ptradd59 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !946
  %37 = load i64, ptr %ptradd59, align 8, !dbg !946
  store i64 %37, ptr %0, align 8, !dbg !946
  ret i64 0, !dbg !946

if.exit:                                          ; preds = %checkok
  %38 = load ptr, ptr %self, align 8, !dbg !947
  %39 = call i64 @std.io.WriteBuffer.write_pending(ptr %38), !dbg !947
  %not_err = icmp eq i64 %39, 0, !dbg !947
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !947
  br i1 %40, label %after_check, label %assign_optional, !dbg !947

assign_optional:                                  ; preds = %if.exit
  store i64 %39, ptr %error_var, align 8, !dbg !947
  br label %guard_block, !dbg !947

after_check:                                      ; preds = %if.exit
  br label %noerr_block, !dbg !947

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !947
  ret i64 %41, !dbg !947

noerr_block:                                      ; preds = %after_check
  %ptradd60 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !948
  %42 = load i64, ptr %ptradd60, align 8, !dbg !948
  %43 = load ptr, ptr %self, align 8, !dbg !949
  %ptradd61 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !949
  %ptradd62 = getelementptr inbounds i8, ptr %ptradd61, i64 8, !dbg !949
  %44 = load i64, ptr %ptradd62, align 8, !dbg !949
  %ge = icmp uge i64 %42, %44, !dbg !948
  br i1 %ge, label %if.then63, label %if.exit73, !dbg !948

if.then63:                                        ; preds = %noerr_block
  %45 = load ptr, ptr %self, align 8, !dbg !950
  %ptradd65 = getelementptr inbounds i8, ptr %45, i64 8, !dbg !952
  %46 = load i64, ptr %ptradd65, align 8, !dbg !952
  %47 = inttoptr i64 %46 to ptr, !dbg !952
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !927
  %48 = icmp eq ptr %47, %type, !dbg !927
  br i1 %48, label %cache_hit, label %cache_miss, !dbg !927

cache_miss:                                       ; preds = %if.then63
  %ptradd66 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !927
  %49 = load ptr, ptr %ptradd66, align 8, !dbg !927
  %50 = call ptr @.dyn_search(ptr %49, ptr @"$sel.write"), !dbg !927
  store ptr %50, ptr %.inlinecache, align 8, !dbg !927
  store ptr %47, ptr %.cachedtype, align 8, !dbg !927
  br label %51, !dbg !927

cache_hit:                                        ; preds = %if.then63
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !927
  br label %51, !dbg !927

51:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %50, %cache_miss ], !dbg !927
  %52 = icmp eq ptr %fn_phi, null, !dbg !927
  br i1 %52, label %missing_function, label %match, !dbg !927

missing_function:                                 ; preds = %51
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr67, align 8
  %53 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr68, align 8
  %54 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr69, align 8
  %55 = load [2 x i64], ptr %taddr69, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 113), !dbg !950
  unreachable, !dbg !950

match:                                            ; preds = %51
  %57 = load ptr, ptr %45, align 8
  %58 = load [2 x i64], ptr %bytes, align 8
  %59 = call i64 %fn_phi(ptr %retparam, ptr %57, [2 x i64] %58), !dbg !950
  %not_err70 = icmp eq i64 %59, 0, !dbg !950
  %60 = call i1 @llvm.expect.i1(i1 %not_err70, i1 true), !dbg !950
  br i1 %60, label %after_check72, label %assign_optional71, !dbg !950

assign_optional71:                                ; preds = %match
  store i64 %59, ptr %reterr64, align 8, !dbg !950
  br label %err_retblock, !dbg !950

after_check72:                                    ; preds = %match
  %61 = load i64, ptr %retparam, align 8, !dbg !950
  store i64 %61, ptr %0, align 8, !dbg !950
  ret i64 0, !dbg !950

err_retblock:                                     ; preds = %assign_optional71
  %62 = load i64, ptr %reterr64, align 8, !dbg !950
  ret i64 %62, !dbg !950

if.exit73:                                        ; preds = %noerr_block
  %63 = load %"char[]", ptr %bytes, align 8, !dbg !953
  %64 = extractvalue %"char[]" %63, 0, !dbg !953
  %65 = extractvalue %"char[]" %63, 1, !dbg !954
  %gt74 = icmp ugt i64 0, %65, !dbg !954
  %66 = call i1 @llvm.expect.i1(i1 %gt74, i1 false), !dbg !954
  br i1 %66, label %panic75, label %checkok85, !dbg !954

checkok85:                                        ; preds = %if.exit73
  %size86 = sub i64 %65, 0, !dbg !953
  %67 = insertvalue %"char[]" undef, ptr %64, 0, !dbg !953
  %68 = insertvalue %"char[]" %67, i64 %size86, 1, !dbg !953
  %69 = load ptr, ptr %self, align 8, !dbg !955
  %ptradd87 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !955
  %70 = load %"char[]", ptr %ptradd87, align 8, !dbg !955
  %71 = extractvalue %"char[]" %70, 0, !dbg !955
  %72 = extractvalue %"char[]" %70, 1, !dbg !956
  %gt88 = icmp ugt i64 0, %72, !dbg !956
  %73 = call i1 @llvm.expect.i1(i1 %gt88, i1 false), !dbg !956
  br i1 %73, label %panic89, label %checkok99, !dbg !956

checkok99:                                        ; preds = %checkok85
  %ptradd100 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !957
  %74 = load i64, ptr %ptradd100, align 8, !dbg !957
  %add101 = add i64 0, %74, !dbg !957
  %lt102 = icmp ult i64 %72, %add101, !dbg !957
  %sub103 = sub i64 %add101, 1, !dbg !957
  %75 = call i1 @llvm.expect.i1(i1 %lt102, i1 false), !dbg !957
  br i1 %75, label %panic104, label %checkok114, !dbg !957

checkok114:                                       ; preds = %checkok99
  %size115 = sub i64 %add101, 0, !dbg !955
  %76 = insertvalue %"char[]" undef, ptr %71, 0, !dbg !955
  %77 = insertvalue %"char[]" %76, i64 %size115, 1, !dbg !955
  %78 = extractvalue %"char[]" %77, 0, !dbg !955
  %79 = extractvalue %"char[]" %68, 0, !dbg !955
  %80 = extractvalue %"char[]" %68, 1, !dbg !955
  %81 = extractvalue %"char[]" %77, 1, !dbg !955
  %neq116 = icmp ne i64 %81, %80, !dbg !955
  %82 = call i1 @llvm.expect.i1(i1 %neq116, i1 false), !dbg !955
  br i1 %82, label %panic117, label %checkok127, !dbg !955

checkok127:                                       ; preds = %checkok114
  %83 = mul i64 %80, 1, !dbg !955
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %78, ptr align 1 %79, i64 %83, i1 false), !dbg !955
  %84 = load ptr, ptr %self, align 8, !dbg !958
  %ptradd128 = getelementptr inbounds i8, ptr %84, i64 32, !dbg !958
  %ptradd129 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !959
  %85 = load i64, ptr %ptradd129, align 8, !dbg !959
  store i64 %85, ptr %ptradd128, align 8, !dbg !959
  %ptradd131 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !960
  %86 = load i64, ptr %ptradd131, align 8, !dbg !960
  store i64 %86, ptr %0, align 8, !dbg !960
  ret i64 0, !dbg !960

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %87 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %88 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr2, align 8
  %89 = load [2 x i64], ptr %taddr2, align 8
  %90 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %90([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 99), !dbg !929
  unreachable, !dbg !929

panic6:                                           ; preds = %if.then
  store i64 %13, ptr %taddr7, align 8
  %91 = insertvalue %any undef, ptr %taddr7, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr8, align 8
  %93 = insertvalue %any undef, ptr %taddr8, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr9, align 8
  %95 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr10, align 8
  %96 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr11, align 8
  %97 = load [2 x i64], ptr %taddr11, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd12, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %99 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 105, [2 x i64] %99), !dbg !938
  unreachable, !dbg !938

panic18:                                          ; preds = %checkok14
  store i64 %22, ptr %taddr19, align 8
  %100 = insertvalue %any undef, ptr %taddr19, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr20, align 8
  %102 = insertvalue %any undef, ptr %taddr20, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr21, align 8
  %104 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr22, align 8
  %105 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr23, align 8
  %106 = load [2 x i64], ptr %taddr23, align 8
  store %any %101, ptr %varargslots24, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %103, ptr %ptradd25, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp26", ptr %taddr27, align 8
  %108 = load [2 x i64], ptr %taddr27, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 105, [2 x i64] %108), !dbg !941
  unreachable, !dbg !941

panic32:                                          ; preds = %checkok28
  store i64 %sub31, ptr %taddr33, align 8
  %109 = insertvalue %any undef, ptr %taddr33, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %22, ptr %taddr34, align 8
  %111 = insertvalue %any undef, ptr %taddr34, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr35, align 8
  %113 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr36, align 8
  %114 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr37, align 8
  %115 = load [2 x i64], ptr %taddr37, align 8
  store %any %110, ptr %varargslots38, align 8
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %112, ptr %ptradd39, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp40", ptr %taddr41, align 8
  %117 = load [2 x i64], ptr %taddr41, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 105, [2 x i64] %117), !dbg !941
  unreachable, !dbg !941

panic45:                                          ; preds = %checkok42
  store i64 %31, ptr %taddr46, align 8
  %118 = insertvalue %any undef, ptr %taddr46, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr47, align 8
  %120 = insertvalue %any undef, ptr %taddr47, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr48, align 8
  %122 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr49, align 8
  %123 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr50, align 8
  %124 = load [2 x i64], ptr %taddr50, align 8
  store %any %119, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %121, ptr %ptradd52, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %126 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 105, [2 x i64] %126), !dbg !941
  unreachable, !dbg !941

panic75:                                          ; preds = %if.exit73
  store i64 %65, ptr %taddr76, align 8
  %127 = insertvalue %any undef, ptr %taddr76, 0
  %128 = insertvalue %any %127, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr77, align 8
  %129 = insertvalue %any undef, ptr %taddr77, 0
  %130 = insertvalue %any %129, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr78, align 8
  %131 = load [2 x i64], ptr %taddr78, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr79, align 8
  %132 = load [2 x i64], ptr %taddr79, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr80, align 8
  %133 = load [2 x i64], ptr %taddr80, align 8
  store %any %128, ptr %varargslots81, align 8
  %ptradd82 = getelementptr inbounds i8, ptr %varargslots81, i64 16
  store %any %130, ptr %ptradd82, align 8
  %134 = insertvalue %"any[]" undef, ptr %varargslots81, 0
  %"$$temp83" = insertvalue %"any[]" %134, i64 2, 1
  store %"any[]" %"$$temp83", ptr %taddr84, align 8
  %135 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %131, [2 x i64] %132, [2 x i64] %133, i32 116, [2 x i64] %135), !dbg !953
  unreachable, !dbg !953

panic89:                                          ; preds = %checkok85
  store i64 %72, ptr %taddr90, align 8
  %136 = insertvalue %any undef, ptr %taddr90, 0
  %137 = insertvalue %any %136, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr91, align 8
  %138 = insertvalue %any undef, ptr %taddr91, 0
  %139 = insertvalue %any %138, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr92, align 8
  %140 = load [2 x i64], ptr %taddr92, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr93, align 8
  %141 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr94, align 8
  %142 = load [2 x i64], ptr %taddr94, align 8
  store %any %137, ptr %varargslots95, align 8
  %ptradd96 = getelementptr inbounds i8, ptr %varargslots95, i64 16
  store %any %139, ptr %ptradd96, align 8
  %143 = insertvalue %"any[]" undef, ptr %varargslots95, 0
  %"$$temp97" = insertvalue %"any[]" %143, i64 2, 1
  store %"any[]" %"$$temp97", ptr %taddr98, align 8
  %144 = load [2 x i64], ptr %taddr98, align 8
  call void @std.core.builtin.panicf([2 x i64] %140, [2 x i64] %141, [2 x i64] %142, i32 116, [2 x i64] %144), !dbg !955
  unreachable, !dbg !955

panic104:                                         ; preds = %checkok99
  store i64 %sub103, ptr %taddr105, align 8
  %145 = insertvalue %any undef, ptr %taddr105, 0
  %146 = insertvalue %any %145, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %72, ptr %taddr106, align 8
  %147 = insertvalue %any undef, ptr %taddr106, 0
  %148 = insertvalue %any %147, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr107, align 8
  %149 = load [2 x i64], ptr %taddr107, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr108, align 8
  %150 = load [2 x i64], ptr %taddr108, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr109, align 8
  %151 = load [2 x i64], ptr %taddr109, align 8
  store %any %146, ptr %varargslots110, align 8
  %ptradd111 = getelementptr inbounds i8, ptr %varargslots110, i64 16
  store %any %148, ptr %ptradd111, align 8
  %152 = insertvalue %"any[]" undef, ptr %varargslots110, 0
  %"$$temp112" = insertvalue %"any[]" %152, i64 2, 1
  store %"any[]" %"$$temp112", ptr %taddr113, align 8
  %153 = load [2 x i64], ptr %taddr113, align 8
  call void @std.core.builtin.panicf([2 x i64] %149, [2 x i64] %150, [2 x i64] %151, i32 116, [2 x i64] %153), !dbg !955
  unreachable, !dbg !955

panic117:                                         ; preds = %checkok114
  store i64 %81, ptr %taddr118, align 8
  %154 = insertvalue %any undef, ptr %taddr118, 0
  %155 = insertvalue %any %154, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %80, ptr %taddr119, align 8
  %156 = insertvalue %any undef, ptr %taddr119, 0
  %157 = insertvalue %any %156, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr120, align 8
  %158 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr121, align 8
  %159 = load [2 x i64], ptr %taddr121, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr122, align 8
  %160 = load [2 x i64], ptr %taddr122, align 8
  store %any %155, ptr %varargslots123, align 8
  %ptradd124 = getelementptr inbounds i8, ptr %varargslots123, i64 16
  store %any %157, ptr %ptradd124, align 8
  %161 = insertvalue %"any[]" undef, ptr %varargslots123, 0
  %"$$temp125" = insertvalue %"any[]" %161, i64 2, 1
  store %"any[]" %"$$temp125", ptr %taddr126, align 8
  %162 = load [2 x i64], ptr %taddr126, align 8
  call void @std.core.builtin.panicf([2 x i64] %158, [2 x i64] %159, [2 x i64] %160, i32 116, [2 x i64] %162), !dbg !955
  unreachable, !dbg !955
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.WriteBuffer.write_byte(ptr %0, i8 %1) #0 !dbg !961 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %n = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !964
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !964
  br i1 %3, label %panic, label %checkok, !dbg !964

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !965, metadata !DIExpression()), !dbg !966
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !967, metadata !DIExpression()), !dbg !968
  call void @llvm.dbg.declare(metadata ptr %n, metadata !969, metadata !DIExpression()), !dbg !970
  %4 = load ptr, ptr %self, align 8, !dbg !971
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !971
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !971
  %5 = load i64, ptr %ptradd3, align 8, !dbg !971
  %6 = load ptr, ptr %self, align 8, !dbg !972
  %ptradd4 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !972
  %7 = load i64, ptr %ptradd4, align 8, !dbg !972
  %sub = sub i64 %5, %7, !dbg !971
  store i64 %sub, ptr %n, align 8, !dbg !971
  %8 = load i64, ptr %n, align 8, !dbg !973
  %eq = icmp eq i64 0, %8, !dbg !973
  br i1 %eq, label %if.then, label %if.exit, !dbg !973

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !974
  %10 = call i64 @std.io.WriteBuffer.write_pending(ptr %9), !dbg !974
  %not_err = icmp eq i64 %10, 0, !dbg !974
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !974
  br i1 %11, label %after_check, label %assign_optional, !dbg !974

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %error_var, align 8, !dbg !974
  br label %guard_block, !dbg !974

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !974

guard_block:                                      ; preds = %assign_optional
  %12 = load i64, ptr %error_var, align 8, !dbg !974
  ret i64 %12, !dbg !974

noerr_block:                                      ; preds = %after_check
  br label %if.exit, !dbg !974

if.exit:                                          ; preds = %noerr_block, %checkok
  %13 = load ptr, ptr %self, align 8, !dbg !976
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !976
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 8, !dbg !976
  %14 = load i64, ptr %ptradd6, align 8, !dbg !976
  %15 = load ptr, ptr %ptradd5, align 8, !dbg !976
  %16 = load ptr, ptr %self, align 8, !dbg !977
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 32, !dbg !977
  %17 = load i64, ptr %ptradd7, align 8, !dbg !977
  %ge = icmp uge i64 %17, %14, !dbg !977
  %18 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !977
  br i1 %18, label %panic8, label %checkok16, !dbg !977

checkok16:                                        ; preds = %if.exit
  %ptradd17 = getelementptr inbounds i8, ptr %15, i64 %17, !dbg !977
  %19 = load i8, ptr %c, align 1, !dbg !978
  store i8 %19, ptr %ptradd17, align 1, !dbg !978
  %20 = load ptr, ptr %self, align 8, !dbg !979
  %ptradd18 = getelementptr inbounds i8, ptr %20, i64 32, !dbg !979
  %21 = load i64, ptr %ptradd18, align 8, !dbg !979
  %add = add i64 %21, 1, !dbg !979
  store i64 %add, ptr %ptradd18, align 8, !dbg !979
  ret i64 0, !dbg !979

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %22 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %23 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr2, align 8
  %24 = load [2 x i64], ptr %taddr2, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 121), !dbg !966
  unreachable, !dbg !966

panic8:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr9, align 8
  %26 = insertvalue %any undef, ptr %taddr9, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %17, ptr %taddr10, align 8
  %28 = insertvalue %any undef, ptr %taddr10, 0
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr11, align 8
  %30 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr12, align 8
  %31 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr13, align 8
  %32 = load [2 x i64], ptr %taddr13, align 8
  store %any %27, ptr %varargslots, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %29, ptr %ptradd14, align 8
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %34 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 128, [2 x i64] %34), !dbg !977
  unreachable, !dbg !977
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.WriteBuffer.write_pending(ptr %0) #0 !dbg !980 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 8
  %taddr23 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !981
  %1 = icmp eq ptr %0, null, !dbg !981
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !981
  br i1 %2, label %panic, label %checkok, !dbg !981

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !982, metadata !DIExpression()), !dbg !983
  %3 = load ptr, ptr %self, align 8, !dbg !984
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !984
  %4 = load i64, ptr %ptradd, align 8, !dbg !984
  %5 = load ptr, ptr %self, align 8, !dbg !985
  %6 = load ptr, ptr %self, align 8, !dbg !986
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !986
  %7 = load %"char[]", ptr %ptradd3, align 8, !dbg !986
  %8 = extractvalue %"char[]" %7, 0, !dbg !986
  %9 = extractvalue %"char[]" %7, 1, !dbg !987
  %gt = icmp ugt i64 0, %9, !dbg !987
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !987
  br i1 %10, label %panic4, label %checkok12, !dbg !987

checkok12:                                        ; preds = %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !988
  %ptradd13 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !988
  %12 = load i64, ptr %ptradd13, align 8, !dbg !988
  %add = add i64 0, %12, !dbg !988
  %lt = icmp ult i64 %9, %add, !dbg !988
  %sub = sub i64 %add, 1, !dbg !988
  %13 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !988
  br i1 %13, label %panic14, label %checkok24, !dbg !988

checkok24:                                        ; preds = %checkok12
  %size = sub i64 %add, 0, !dbg !986
  %14 = insertvalue %"char[]" undef, ptr %8, 0, !dbg !986
  %15 = insertvalue %"char[]" %14, i64 %size, 1, !dbg !986
  %ptradd25 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !986
  %16 = load i64, ptr %ptradd25, align 8, !dbg !986
  %17 = inttoptr i64 %16 to ptr, !dbg !986
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !981
  %18 = icmp eq ptr %17, %type, !dbg !981
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !981

cache_miss:                                       ; preds = %checkok24
  %ptradd26 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !981
  %19 = load ptr, ptr %ptradd26, align 8, !dbg !981
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.write"), !dbg !981
  store ptr %20, ptr %.inlinecache, align 8, !dbg !981
  store ptr %17, ptr %.cachedtype, align 8, !dbg !981
  br label %21, !dbg !981

cache_hit:                                        ; preds = %checkok24
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !981
  br label %21, !dbg !981

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !981
  %22 = icmp eq ptr %fn_phi, null, !dbg !981
  br i1 %22, label %missing_function, label %match, !dbg !981

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr27, align 8
  %23 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr28, align 8
  %24 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.84, i64 13 }, ptr %taddr29, align 8
  %25 = load [2 x i64], ptr %taddr29, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 134), !dbg !985
  unreachable, !dbg !985

match:                                            ; preds = %21
  %27 = load ptr, ptr %5, align 8
  store %"char[]" %15, ptr %taddr30, align 8
  %28 = load [2 x i64], ptr %taddr30, align 8
  %29 = call i64 %fn_phi(ptr %retparam, ptr %27, [2 x i64] %28), !dbg !985
  %not_err = icmp eq i64 %29, 0, !dbg !985
  %30 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !985
  br i1 %30, label %after_check, label %assign_optional, !dbg !985

assign_optional:                                  ; preds = %match
  store i64 %29, ptr %error_var, align 8, !dbg !985
  br label %guard_block, !dbg !985

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !985

guard_block:                                      ; preds = %assign_optional
  %31 = load i64, ptr %error_var, align 8, !dbg !985
  ret i64 %31, !dbg !985

noerr_block:                                      ; preds = %after_check
  %32 = load i64, ptr %retparam, align 8, !dbg !985
  %sub31 = sub i64 %4, %32, !dbg !984
  store i64 %sub31, ptr %ptradd, align 8, !dbg !984
  %33 = load ptr, ptr %self, align 8, !dbg !989
  %ptradd32 = getelementptr inbounds i8, ptr %33, i64 32, !dbg !989
  %34 = load i64, ptr %ptradd32, align 8, !dbg !989
  %neq = icmp ne i64 0, %34, !dbg !989
  br i1 %neq, label %if.then, label %if.exit, !dbg !989

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !990

if.exit:                                          ; preds = %noerr_block
  ret i64 0, !dbg !990

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %35 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr1, align 8
  %36 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.84, i64 13 }, ptr %taddr2, align 8
  %37 = load [2 x i64], ptr %taddr2, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 132), !dbg !983
  unreachable, !dbg !983

panic4:                                           ; preds = %checkok
  store i64 %9, ptr %taddr5, align 8
  %39 = insertvalue %any undef, ptr %taddr5, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %41 = insertvalue %any undef, ptr %taddr6, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr7, align 8
  %43 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr8, align 8
  %44 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.84, i64 13 }, ptr %taddr9, align 8
  %45 = load [2 x i64], ptr %taddr9, align 8
  store %any %40, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %42, ptr %ptradd10, align 8
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %47 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 134, [2 x i64] %47), !dbg !986
  unreachable, !dbg !986

panic14:                                          ; preds = %checkok12
  store i64 %sub, ptr %taddr15, align 8
  %48 = insertvalue %any undef, ptr %taddr15, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr16, align 8
  %50 = insertvalue %any undef, ptr %taddr16, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr17, align 8
  %52 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.77, i64 9 }, ptr %taddr18, align 8
  %53 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.84, i64 13 }, ptr %taddr19, align 8
  %54 = load [2 x i64], ptr %taddr19, align 8
  store %any %49, ptr %varargslots20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %51, ptr %ptradd21, align 8
  %55 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp22", ptr %taddr23, align 8
  %56 = load [2 x i64], ptr %taddr23, align 8
  call void @std.core.builtin.panicf([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 134, [2 x i64] %56), !dbg !986
  unreachable, !dbg !986
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.len(ptr %0) #0 !dbg !991 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1000
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1000
  br i1 %2, label %panic, label %checkok, !dbg !1000

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1001, metadata !DIExpression()), !dbg !1002
  %3 = load ptr, ptr %self, align 8, !dbg !1003
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1003
  %4 = load i64, ptr %ptradd, align 8, !dbg !1003
  ret i64 %4, !dbg !1003

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.86, i64 3 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 9), !dbg !1002
  unreachable, !dbg !1002
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.ByteReader.init(ptr %0, [2 x i64] %1) #0 !dbg !1004 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %ByteReader, align 8
  %2 = icmp eq ptr %0, null, !dbg !1007
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1007
  br i1 %3, label %panic, label %checkok, !dbg !1007

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1008, metadata !DIExpression()), !dbg !1009
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1010, metadata !DIExpression()), !dbg !1011
  %4 = load ptr, ptr %self, align 8, !dbg !1012
  %checknull = icmp eq ptr %4, null, !dbg !1012
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1012
  br i1 %5, label %panic3, label %checkok7, !dbg !1012

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %bytes, i32 16, i1 false), !dbg !1013
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !1013
  %6 = load ptr, ptr %self, align 8, !dbg !1014
  ret ptr %6, !dbg !1014

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %8 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %9 = load [2 x i64], ptr %taddr2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 14), !dbg !1009
  unreachable, !dbg !1009

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %11 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr5, align 8
  %12 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %13 = load [2 x i64], ptr %taddr6, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 16), !dbg !1012
  unreachable, !dbg !1012
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1015 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %reterr = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr19 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len22 = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %reterr34 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1018
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1018
  br i1 %4, label %panic, label %checkok, !dbg !1018

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1019, metadata !DIExpression()), !dbg !1020
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1021, metadata !DIExpression()), !dbg !1022
  %5 = load ptr, ptr %self, align 8, !dbg !1023
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1023
  %6 = load i64, ptr %ptradd, align 8, !dbg !1023
  %7 = load ptr, ptr %self, align 8, !dbg !1024
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1024
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1024
  %ge = icmp uge i64 %6, %8, !dbg !1023
  br i1 %ge, label %if.then, label %if.exit, !dbg !1023

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1025

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1026, metadata !DIExpression()), !dbg !1027
  %9 = load ptr, ptr %self, align 8, !dbg !1028
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1028
  %10 = load i64, ptr %ptradd4, align 8, !dbg !1028
  %11 = load ptr, ptr %self, align 8, !dbg !1029
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1029
  %12 = load i64, ptr %ptradd5, align 8, !dbg !1029
  %sub = sub i64 %10, %12, !dbg !1028
  store i64 %sub, ptr %x, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1030
  %13 = load i64, ptr %ptradd6, align 8
  store i64 %13, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !1031
  %17 = load i64, ptr %b, align 8, !dbg !1036
  %lt = icmp ult i64 %16, %17, !dbg !1031
  br i1 %lt, label %cond.lhs, label %cond.rhs, !dbg !1031

cond.lhs:                                         ; preds = %if.exit
  %18 = load i64, ptr %x, align 8, !dbg !1037
  br label %cond.phi, !dbg !1037

cond.rhs:                                         ; preds = %if.exit
  %19 = load i64, ptr %.anon, align 8, !dbg !1038
  br label %cond.phi, !dbg !1038

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !1038
  store i64 %val, ptr %len, align 8, !dbg !1038
  %20 = load i64, ptr %len, align 8, !dbg !1039
  %eq = icmp eq i64 0, %20, !dbg !1039
  br i1 %eq, label %if.then7, label %if.exit8, !dbg !1039

if.then7:                                         ; preds = %cond.phi
  store i64 0, ptr %0, align 8, !dbg !1040
  ret i64 0, !dbg !1040

if.exit8:                                         ; preds = %cond.phi
  %21 = load ptr, ptr %bytes, align 8, !dbg !1041
  store ptr %21, ptr %dst, align 8
  %22 = load ptr, ptr %self, align 8, !dbg !1042
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1042
  %23 = load i64, ptr %ptradd9, align 8, !dbg !1042
  %24 = load ptr, ptr %22, align 8, !dbg !1042
  %25 = load ptr, ptr %self, align 8, !dbg !1043
  %ptradd10 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !1043
  %26 = load i64, ptr %ptradd10, align 8, !dbg !1043
  %ge11 = icmp uge i64 %26, %23, !dbg !1043
  %27 = call i1 @llvm.expect.i1(i1 %ge11, i1 false), !dbg !1043
  br i1 %27, label %panic12, label %checkok20, !dbg !1043

checkok20:                                        ; preds = %if.exit8
  %ptradd21 = getelementptr inbounds i8, ptr %24, i64 %26, !dbg !1043
  store ptr %ptradd21, ptr %src, align 8
  %28 = load i64, ptr %len, align 8
  store i64 %28, ptr %len22, align 8
  %29 = load i64, ptr %len22, align 8, !dbg !1044
  %eq23 = icmp eq i64 0, %29, !dbg !1044
  br i1 %eq23, label %or.phi, label %or.rhs, !dbg !1044

or.rhs:                                           ; preds = %checkok20
  %30 = load ptr, ptr %dst, align 8, !dbg !1048
  %31 = load i64, ptr %len22, align 8, !dbg !1049
  %ptradd_any = getelementptr i8, ptr %30, i64 %31, !dbg !1049
  %32 = load ptr, ptr %src, align 8, !dbg !1050
  %le = icmp ule ptr %ptradd_any, %32, !dbg !1048
  br label %or.phi, !dbg !1048

or.phi:                                           ; preds = %or.rhs, %checkok20
  %val24 = phi i1 [ true, %checkok20 ], [ %le, %or.rhs ], !dbg !1048
  br i1 %val24, label %or.phi28, label %or.rhs25, !dbg !1048

or.rhs25:                                         ; preds = %or.phi
  %33 = load ptr, ptr %src, align 8, !dbg !1051
  %34 = load i64, ptr %len22, align 8, !dbg !1052
  %ptradd_any26 = getelementptr i8, ptr %33, i64 %34, !dbg !1052
  %35 = load ptr, ptr %dst, align 8, !dbg !1053
  %le27 = icmp ule ptr %ptradd_any26, %35, !dbg !1051
  br label %or.phi28, !dbg !1051

or.phi28:                                         ; preds = %or.rhs25, %or.phi
  %val29 = phi i1 [ true, %or.phi ], [ %le27, %or.rhs25 ], !dbg !1051
  br i1 %val29, label %assert_ok, label %assert_fail, !dbg !1051

assert_fail:                                      ; preds = %or.phi28
  store %"char[]" { ptr @.panic_msg.62, i64 95 }, ptr %taddr30, align 8
  %36 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.63, i64 6 }, ptr %taddr31, align 8
  %37 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr32, align 8
  %38 = load [2 x i64], ptr %taddr32, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39([2 x i64] %36, [2 x i64] %37, [2 x i64] %38, i32 324), !dbg !1044
  unreachable, !dbg !1044

assert_ok:                                        ; preds = %or.phi28
  %40 = load ptr, ptr %dst, align 8, !dbg !1054
  %41 = load ptr, ptr %src, align 8, !dbg !1055
  %42 = load i64, ptr %len22, align 8, !dbg !1056
  call void @llvm.memcpy.p0.p0.i64(ptr %40, ptr %41, i64 %42, i1 false), !dbg !1057
  %43 = load ptr, ptr %self, align 8, !dbg !1058
  %ptradd33 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !1058
  %44 = load i64, ptr %ptradd33, align 8, !dbg !1058
  %45 = load i64, ptr %len, align 8, !dbg !1059
  %add = add i64 %44, %45, !dbg !1058
  store i64 %add, ptr %ptradd33, align 8, !dbg !1058
  %46 = load i64, ptr %len, align 8, !dbg !1060
  store i64 %46, ptr %0, align 8, !dbg !1060
  ret i64 0, !dbg !1060

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %47 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %48 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %49 = load [2 x i64], ptr %taddr2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 20), !dbg !1020
  unreachable, !dbg !1020

panic12:                                          ; preds = %if.exit8
  store i64 %23, ptr %taddr13, align 8
  %51 = insertvalue %any undef, ptr %taddr13, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr14, align 8
  %53 = insertvalue %any undef, ptr %taddr14, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr15, align 8
  %55 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr16, align 8
  %56 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr17, align 8
  %57 = load [2 x i64], ptr %taddr17, align 8
  store %any %52, ptr %varargslots, align 8
  %ptradd18 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd18, align 8
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr19, align 8
  %59 = load [2 x i64], ptr %taddr19, align 8
  call void @std.core.builtin.panicf([2 x i64] %55, [2 x i64] %56, [2 x i64] %57, i32 25, [2 x i64] %59), !dbg !1043
  unreachable, !dbg !1043
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.read_byte(ptr %0, ptr %1) #0 !dbg !1061 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr14 = alloca %"any[]", align 8
  %2 = icmp eq ptr %1, null, !dbg !1064
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1064
  br i1 %3, label %panic, label %checkok, !dbg !1064

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1065, metadata !DIExpression()), !dbg !1066
  %4 = load ptr, ptr %self, align 8, !dbg !1067
  %ptradd = getelementptr inbounds i8, ptr %4, i64 16, !dbg !1067
  %5 = load i64, ptr %ptradd, align 8, !dbg !1067
  %6 = load ptr, ptr %self, align 8, !dbg !1068
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1068
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1068
  %ge = icmp uge i64 %5, %7, !dbg !1067
  br i1 %ge, label %if.then, label %if.exit, !dbg !1067

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1069

if.exit:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1070
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 8, !dbg !1070
  %9 = load i64, ptr %ptradd4, align 8, !dbg !1070
  %10 = load ptr, ptr %8, align 8, !dbg !1070
  %11 = load ptr, ptr %self, align 8, !dbg !1071
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1071
  %12 = load i64, ptr %ptradd5, align 8, !dbg !1071
  %add = add i64 %12, 1, !dbg !1071
  store i64 %add, ptr %ptradd5, align 8, !dbg !1071
  %ge6 = icmp uge i64 %12, %9, !dbg !1071
  %13 = call i1 @llvm.expect.i1(i1 %ge6, i1 false), !dbg !1071
  br i1 %13, label %panic7, label %checkok15, !dbg !1071

checkok15:                                        ; preds = %if.exit
  %ptradd16 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !1071
  %14 = load i8, ptr %ptradd16, align 1, !dbg !1071
  store i8 %14, ptr %0, align 1, !dbg !1071
  ret i64 0, !dbg !1071

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %16 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %17 = load [2 x i64], ptr %taddr2, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 30), !dbg !1066
  unreachable, !dbg !1066

panic7:                                           ; preds = %if.exit
  store i64 %9, ptr %taddr8, align 8
  %19 = insertvalue %any undef, ptr %taddr8, 0
  %20 = insertvalue %any %19, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr9, align 8
  %21 = insertvalue %any undef, ptr %taddr9, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr10, align 8
  %23 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr11, align 8
  %24 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr12, align 8
  %25 = load [2 x i64], ptr %taddr12, align 8
  store %any %20, ptr %varargslots, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %22, ptr %ptradd13, align 8
  %26 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %26, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr14, align 8
  %27 = load [2 x i64], ptr %taddr14, align 8
  call void @std.core.builtin.panicf([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 33, [2 x i64] %27), !dbg !1071
  unreachable, !dbg !1071
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.pushback_byte(ptr %0) #0 !dbg !1072 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1075
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1075
  br i1 %2, label %panic, label %checkok, !dbg !1075

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1076, metadata !DIExpression()), !dbg !1077
  %3 = load ptr, ptr %self, align 8, !dbg !1078
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1078
  %4 = load i64, ptr %ptradd, align 8, !dbg !1078
  %i2nb = icmp eq i64 %4, 0, !dbg !1078
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1078

if.then:                                          ; preds = %checkok
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_PUSHBACK" to i64), !dbg !1079

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1080
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1080
  %6 = load i64, ptr %ptradd3, align 8, !dbg !1080
  %sub = sub i64 %6, 1, !dbg !1080
  store i64 %sub, ptr %ptradd3, align 8, !dbg !1080
  ret i64 0, !dbg !1080

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %8 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.73, i64 13 }, ptr %taddr2, align 8
  %9 = load [2 x i64], ptr %taddr2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 36), !dbg !1077
  unreachable, !dbg !1077
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.seek(ptr %0, ptr %1, i64 %2, i32 %3) #0 !dbg !1081 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %offset = alloca i64, align 8
  %seek = alloca i32, align 4
  %new_index = alloca i64, align 8
  %switch = alloca i32, align 4
  %reterr = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1084
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1084
  br i1 %5, label %panic, label %checkok, !dbg !1084

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1085, metadata !DIExpression()), !dbg !1086
  store i64 %2, ptr %offset, align 8
  call void @llvm.dbg.declare(metadata ptr %offset, metadata !1087, metadata !DIExpression()), !dbg !1088
  store i32 %3, ptr %seek, align 4
  call void @llvm.dbg.declare(metadata ptr %seek, metadata !1089, metadata !DIExpression()), !dbg !1090
  call void @llvm.dbg.declare(metadata ptr %new_index, metadata !1091, metadata !DIExpression()), !dbg !1092
  store i64 0, ptr %new_index, align 8, !dbg !1092
  %6 = load i32, ptr %seek, align 4
  store i32 %6, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %7 = load i32, ptr %switch, align 4
  switch i32 %7, label %switch.exit [
    i32 0, label %switch.case
    i32 1, label %switch.case3
    i32 2, label %switch.case4
  ]

switch.case:                                      ; preds = %switch.entry
  %8 = load i64, ptr %offset, align 8, !dbg !1093
  store i64 %8, ptr %new_index, align 8, !dbg !1093
  br label %switch.exit, !dbg !1093

switch.case3:                                     ; preds = %switch.entry
  %9 = load ptr, ptr %self, align 8, !dbg !1096
  %ptradd = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1096
  %10 = load i64, ptr %ptradd, align 8, !dbg !1096
  %11 = load i64, ptr %offset, align 8, !dbg !1098
  %add = add i64 %10, %11, !dbg !1096
  store i64 %add, ptr %new_index, align 8, !dbg !1096
  br label %switch.exit, !dbg !1096

switch.case4:                                     ; preds = %switch.entry
  %12 = load ptr, ptr %self, align 8, !dbg !1099
  %ptradd5 = getelementptr inbounds i8, ptr %12, i64 8, !dbg !1099
  %13 = load i64, ptr %ptradd5, align 8, !dbg !1099
  %14 = load i64, ptr %offset, align 8, !dbg !1101
  %add6 = add i64 %13, %14, !dbg !1099
  store i64 %add6, ptr %new_index, align 8, !dbg !1099
  br label %switch.exit, !dbg !1099

switch.exit:                                      ; preds = %switch.case4, %switch.case3, %switch.case, %switch.entry
  %15 = load i64, ptr %new_index, align 8, !dbg !1102
  %lt = icmp slt i64 %15, 0, !dbg !1102
  br i1 %lt, label %if.then, label %if.exit, !dbg !1102

if.then:                                          ; preds = %switch.exit
  ret i64 ptrtoint (ptr @"std.io.IoError$INVALID_POSITION" to i64), !dbg !1103

if.exit:                                          ; preds = %switch.exit
  %16 = load ptr, ptr %self, align 8, !dbg !1104
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1104
  %17 = load i64, ptr %new_index, align 8, !dbg !1105
  store i64 %17, ptr %ptradd7, align 8, !dbg !1105
  %18 = load i64, ptr %new_index, align 8, !dbg !1106
  store i64 %18, ptr %0, align 8, !dbg !1106
  ret i64 0, !dbg !1106

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %19 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %20 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.75, i64 4 }, ptr %taddr2, align 8
  %21 = load [2 x i64], ptr %taddr2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 42), !dbg !1086
  unreachable, !dbg !1086
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.write_to(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1107 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %writer = alloca %any, align 8
  %reterr = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %reterr27 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1110
  %3 = icmp eq ptr %1, null, !dbg !1110
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1110
  br i1 %4, label %panic, label %checkok, !dbg !1110

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1111, metadata !DIExpression()), !dbg !1112
  store [2 x i64] %2, ptr %writer, align 8
  call void @llvm.dbg.declare(metadata ptr %writer, metadata !1113, metadata !DIExpression()), !dbg !1114
  %5 = load ptr, ptr %self, align 8, !dbg !1115
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1115
  %6 = load i64, ptr %ptradd, align 8, !dbg !1115
  %7 = load ptr, ptr %self, align 8, !dbg !1116
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !1116
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1116
  %ge = icmp uge i64 %6, %8, !dbg !1115
  br i1 %ge, label %if.then, label %if.exit, !dbg !1115

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !1117
  ret i64 0, !dbg !1117

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %written, metadata !1118, metadata !DIExpression()), !dbg !1119
  %9 = load ptr, ptr %self, align 8, !dbg !1120
  %10 = load %"char[]", ptr %9, align 8, !dbg !1120
  %11 = extractvalue %"char[]" %10, 0, !dbg !1120
  %12 = load ptr, ptr %self, align 8, !dbg !1121
  %ptradd4 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1121
  %13 = load i64, ptr %ptradd4, align 8, !dbg !1121
  %14 = extractvalue %"char[]" %10, 1, !dbg !1121
  %gt = icmp ugt i64 %13, %14, !dbg !1121
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1121
  br i1 %15, label %panic5, label %checkok13, !dbg !1121

checkok13:                                        ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !1120
  %ptradd14 = getelementptr inbounds i8, ptr %11, i64 %13, !dbg !1120
  %16 = insertvalue %"char[]" undef, ptr %ptradd14, 0, !dbg !1120
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1120
  %ptradd15 = getelementptr inbounds i8, ptr %writer, i64 8, !dbg !1120
  %18 = load i64, ptr %ptradd15, align 8, !dbg !1120
  %19 = inttoptr i64 %18 to ptr, !dbg !1120
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1110
  %20 = icmp eq ptr %19, %type, !dbg !1110
  br i1 %20, label %cache_hit, label %cache_miss, !dbg !1110

cache_miss:                                       ; preds = %checkok13
  %ptradd16 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1110
  %21 = load ptr, ptr %ptradd16, align 8, !dbg !1110
  %22 = call ptr @.dyn_search(ptr %21, ptr @"$sel.write"), !dbg !1110
  store ptr %22, ptr %.inlinecache, align 8, !dbg !1110
  store ptr %19, ptr %.cachedtype, align 8, !dbg !1110
  br label %23, !dbg !1110

cache_hit:                                        ; preds = %checkok13
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1110
  br label %23, !dbg !1110

23:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %22, %cache_miss ], !dbg !1110
  %24 = icmp eq ptr %fn_phi, null, !dbg !1110
  br i1 %24, label %missing_function, label %match, !dbg !1110

missing_function:                                 ; preds = %23
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr17, align 8
  %25 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr18, align 8
  %26 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.87, i64 8 }, ptr %taddr19, align 8
  %27 = load [2 x i64], ptr %taddr19, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 59), !dbg !1122
  unreachable, !dbg !1122

match:                                            ; preds = %23
  %29 = load ptr, ptr %writer, align 8
  store %"char[]" %17, ptr %taddr20, align 8
  %30 = load [2 x i64], ptr %taddr20, align 8
  %31 = call i64 %fn_phi(ptr %retparam, ptr %29, [2 x i64] %30), !dbg !1122
  %not_err = icmp eq i64 %31, 0, !dbg !1122
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1122
  br i1 %32, label %after_check, label %assign_optional, !dbg !1122

assign_optional:                                  ; preds = %match
  store i64 %31, ptr %error_var, align 8, !dbg !1122
  br label %guard_block, !dbg !1122

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1122

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1122
  ret i64 %33, !dbg !1122

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %retparam, align 8, !dbg !1122
  store i64 %34, ptr %written, align 8, !dbg !1122
  %35 = load ptr, ptr %self, align 8, !dbg !1123
  %ptradd21 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1123
  %36 = load i64, ptr %ptradd21, align 8, !dbg !1123
  %37 = load i64, ptr %written, align 8, !dbg !1124
  %add = add i64 %36, %37, !dbg !1123
  store i64 %add, ptr %ptradd21, align 8, !dbg !1123
  %38 = load ptr, ptr %self, align 8, !dbg !1125
  %ptradd22 = getelementptr inbounds i8, ptr %38, i64 16, !dbg !1125
  %39 = load i64, ptr %ptradd22, align 8, !dbg !1125
  %40 = load ptr, ptr %self, align 8, !dbg !1126
  %ptradd23 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !1126
  %41 = load i64, ptr %ptradd23, align 8, !dbg !1126
  %le = icmp ule i64 %39, %41, !dbg !1125
  br i1 %le, label %assert_ok, label %assert_fail, !dbg !1125

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.74, i64 16 }, ptr %taddr24, align 8
  %42 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr25, align 8
  %43 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.87, i64 8 }, ptr %taddr26, align 8
  %44 = load [2 x i64], ptr %taddr26, align 8
  %45 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %45([2 x i64] %42, [2 x i64] %43, [2 x i64] %44, i32 61), !dbg !1125
  unreachable, !dbg !1125

assert_ok:                                        ; preds = %noerr_block
  %46 = load i64, ptr %written, align 8, !dbg !1127
  store i64 %46, ptr %0, align 8, !dbg !1127
  ret i64 0, !dbg !1127

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %47 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %48 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.87, i64 8 }, ptr %taddr2, align 8
  %49 = load [2 x i64], ptr %taddr2, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 56), !dbg !1112
  unreachable, !dbg !1112

panic5:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr6, align 8
  %51 = insertvalue %any undef, ptr %taddr6, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr7, align 8
  %53 = insertvalue %any undef, ptr %taddr7, 0
  %54 = insertvalue %any %53, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr8, align 8
  %55 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr9, align 8
  %56 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.87, i64 8 }, ptr %taddr10, align 8
  %57 = load [2 x i64], ptr %taddr10, align 8
  store %any %52, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %54, ptr %ptradd11, align 8
  %58 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %58, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %59 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %55, [2 x i64] %56, [2 x i64] %57, i32 59, [2 x i64] %59), !dbg !1120
  unreachable, !dbg !1120
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.ByteReader.available(ptr %0, ptr %1) #0 !dbg !1128 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1131
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1131
  br i1 %3, label %panic, label %checkok, !dbg !1131

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1132, metadata !DIExpression()), !dbg !1133
  store i32 0, ptr %x, align 4
  %4 = load ptr, ptr %self, align 8, !dbg !1134
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !1134
  %5 = load i64, ptr %ptradd, align 8, !dbg !1134
  %6 = load ptr, ptr %self, align 8, !dbg !1135
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1135
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1135
  %sub = sub i64 %5, %7, !dbg !1134
  store i64 %sub, ptr %.anon, align 8
  %8 = load i32, ptr %x, align 4
  store i32 %8, ptr %a, align 4
  %9 = load i64, ptr %.anon, align 8
  store i64 %9, ptr %b, align 8
  %10 = load i32, ptr %a, align 4, !dbg !1136
  %sext = sext i32 %10 to i64, !dbg !1136
  %11 = load i64, ptr %b, align 8, !dbg !1141
  %gt = icmp sgt i64 %sext, %11, !dbg !1136
  %check = icmp sge i64 %11, 0, !dbg !1136
  %siui-gt = and i1 %check, %gt, !dbg !1136
  br i1 %siui-gt, label %cond.lhs, label %cond.rhs, !dbg !1136

cond.lhs:                                         ; preds = %checkok
  %12 = load i32, ptr %x, align 4, !dbg !1142
  %sext4 = sext i32 %12 to i64, !dbg !1142
  br label %cond.phi, !dbg !1142

cond.rhs:                                         ; preds = %checkok
  %13 = load i64, ptr %.anon, align 8, !dbg !1143
  br label %cond.phi, !dbg !1143

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext4, %cond.lhs ], [ %13, %cond.rhs ], !dbg !1143
  store i64 %val, ptr %0, align 8, !dbg !1143
  ret i64 0, !dbg !1143

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.85, i64 13 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 65), !dbg !1133
  unreachable, !dbg !1133
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.MultiReader.new_init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !1144 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readers = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator6 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator8 = alloca %any, align 8
  %elements9 = alloca i64, align 8
  %allocator10 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr16 = alloca ptr, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr21 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 8
  %taddr31 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 8
  %taddr44 = alloca %"any[]", align 8
  %taddr48 = alloca i64, align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %varargslots53 = alloca [2 x %any], align 8
  %taddr56 = alloca %"any[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %.assign_list = alloca %MultiReader, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1159
  %3 = icmp eq ptr %0, null, !dbg !1159
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1159
  br i1 %4, label %panic, label %checkok, !dbg !1159

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1160, metadata !DIExpression()), !dbg !1161
  store [2 x i64] %1, ptr %readers, align 8
  call void @llvm.dbg.declare(metadata ptr %readers, metadata !1162, metadata !DIExpression()), !dbg !1163
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !1164, metadata !DIExpression()), !dbg !1165
  %5 = load ptr, ptr %self, align 8, !dbg !1166
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1166
  %6 = load i64, ptr %ptradd, align 8, !dbg !1166
  %eq = icmp eq i64 0, %6, !dbg !1166
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1166

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.89, i64 90 }, ptr %taddr3, align 8
  %7 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr4, align 8
  %8 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr5, align 8
  %9 = load [2 x i64], ptr %taddr5, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 18), !dbg !1166
  unreachable, !dbg !1166

assert_ok:                                        ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !1168, metadata !DIExpression()), !dbg !1169
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd7 = getelementptr inbounds i8, ptr %readers, i64 8, !dbg !1170
  %11 = load i64, ptr %ptradd7, align 8
  store i64 %11, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator8, ptr align 8 %allocator6, i32 16, i1 false)
  %12 = load i64, ptr %elements, align 8
  store i64 %12, ptr %elements9, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator8, i32 16, i1 false)
  %13 = load i64, ptr %elements9, align 8, !dbg !1171
  %mul = mul i64 16, %13, !dbg !1176
  store i64 %mul, ptr %size, align 8
  %14 = load i64, ptr %size, align 8, !dbg !1177
  %i2nb = icmp eq i64 %14, 0, !dbg !1177
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1177

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !1180
  br label %expr_block.exit, !dbg !1180

if.exit:                                          ; preds = %assert_ok
  %ptradd11 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !1181
  %15 = load i64, ptr %ptradd11, align 8, !dbg !1181
  %16 = inttoptr i64 %15 to ptr, !dbg !1181
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1159
  %17 = icmp eq ptr %16, %type, !dbg !1159
  br i1 %17, label %cache_hit, label %cache_miss, !dbg !1159

cache_miss:                                       ; preds = %if.exit
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1159
  %18 = load ptr, ptr %ptradd12, align 8, !dbg !1159
  %19 = call ptr @.dyn_search(ptr %18, ptr @"$sel.acquire"), !dbg !1159
  store ptr %19, ptr %.inlinecache, align 8, !dbg !1159
  store ptr %16, ptr %.cachedtype, align 8, !dbg !1159
  br label %20, !dbg !1159

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1159
  br label %20, !dbg !1159

20:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %19, %cache_miss ], !dbg !1159
  %21 = icmp eq ptr %fn_phi, null, !dbg !1159
  br i1 %21, label %missing_function, label %match, !dbg !1159

missing_function:                                 ; preds = %20
  store %"char[]" { ptr @.panic_msg.58, i64 44 }, ptr %taddr13, align 8
  %22 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr14, align 8
  %23 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr15, align 8
  %24 = load [2 x i64], ptr %taddr15, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 80), !dbg !1183
  unreachable, !dbg !1183

match:                                            ; preds = %20
  %26 = load ptr, ptr %allocator10, align 8
  %27 = load i64, ptr %size, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %26, i64 %27, i32 1, i64 0), !dbg !1183
  %not_err = icmp eq i64 %28, 0, !dbg !1183
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1183
  br i1 %29, label %after_check, label %assign_optional, !dbg !1183

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %error_var, align 8, !dbg !1183
  br label %panic_block, !dbg !1183

after_check:                                      ; preds = %match
  %30 = load ptr, ptr %retparam, align 8, !dbg !1183
  store ptr %30, ptr %blockret, align 8, !dbg !1183
  br label %expr_block.exit, !dbg !1183

expr_block.exit:                                  ; preds = %after_check, %if.then
  %31 = load ptr, ptr %blockret, align 8, !dbg !1183
  store ptr %31, ptr %taddr16, align 8
  %32 = load ptr, ptr %taddr16, align 8
  %33 = load i64, ptr %elements9, align 8, !dbg !1184
  %add = add i64 0, %33, !dbg !1184
  %size17 = sub i64 %add, 0, !dbg !1184
  %34 = insertvalue %"any[]" undef, ptr %32, 0, !dbg !1184
  %35 = insertvalue %"any[]" %34, i64 %size17, 1, !dbg !1184
  br label %noerr_block, !dbg !1184

panic_block:                                      ; preds = %assign_optional
  %36 = insertvalue %any undef, ptr %error_var, 0, !dbg !1184
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1184
  store %"char[]" { ptr @.panic_msg.90, i64 36 }, ptr %taddr18, align 8
  %38 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr19, align 8
  %39 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr20, align 8
  %40 = load [2 x i64], ptr %taddr20, align 8
  store %any %37, ptr %varargslots, align 8
  %41 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %41, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr21, align 8
  %42 = load [2 x i64], ptr %taddr21, align 8
  call void @std.core.builtin.panicf([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 244, [2 x i64] %42), !dbg !1173
  unreachable, !dbg !1173

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %35, ptr %copy, align 8, !dbg !1173
  %43 = load %"any[]", ptr %readers, align 8, !dbg !1185
  %44 = extractvalue %"any[]" %43, 0, !dbg !1185
  %45 = extractvalue %"any[]" %43, 1, !dbg !1186
  %gt = icmp ugt i64 0, %45, !dbg !1186
  %46 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1186
  br i1 %46, label %panic22, label %checkok32, !dbg !1186

checkok32:                                        ; preds = %noerr_block
  %size33 = sub i64 %45, 0, !dbg !1185
  %47 = insertvalue %"any[]" undef, ptr %44, 0, !dbg !1185
  %48 = insertvalue %"any[]" %47, i64 %size33, 1, !dbg !1185
  %49 = load %"any[]", ptr %copy, align 8, !dbg !1187
  %50 = extractvalue %"any[]" %49, 0, !dbg !1187
  %51 = extractvalue %"any[]" %49, 1, !dbg !1188
  %gt34 = icmp ugt i64 0, %51, !dbg !1188
  %52 = call i1 @llvm.expect.i1(i1 %gt34, i1 false), !dbg !1188
  br i1 %52, label %panic35, label %checkok45, !dbg !1188

checkok45:                                        ; preds = %checkok32
  %size46 = sub i64 %51, 0, !dbg !1187
  %53 = insertvalue %"any[]" undef, ptr %50, 0, !dbg !1187
  %54 = insertvalue %"any[]" %53, i64 %size46, 1, !dbg !1187
  %55 = extractvalue %"any[]" %54, 0, !dbg !1187
  %56 = extractvalue %"any[]" %48, 0, !dbg !1187
  %57 = extractvalue %"any[]" %48, 1, !dbg !1187
  %58 = extractvalue %"any[]" %54, 1, !dbg !1187
  %neq = icmp ne i64 %58, %57, !dbg !1187
  %59 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1187
  br i1 %59, label %panic47, label %checkok57, !dbg !1187

checkok57:                                        ; preds = %checkok45
  %60 = mul i64 %57, 16, !dbg !1187
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %55, ptr align 8 %56, i64 %60, i1 false), !dbg !1187
  %61 = load ptr, ptr %self, align 8, !dbg !1189
  %checknull = icmp eq ptr %61, null, !dbg !1189
  %62 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1189
  br i1 %62, label %panic58, label %checkok62, !dbg !1189

checkok62:                                        ; preds = %checkok57
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 40, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !1190
  %ptradd63 = getelementptr inbounds i8, ptr %.assign_list, i64 24, !dbg !1190
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd63, ptr align 8 %allocator, i32 16, i1 false), !dbg !1191
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %61, ptr align 8 %.assign_list, i32 40, i1 false), !dbg !1191
  %63 = load ptr, ptr %self, align 8, !dbg !1192
  %64 = load ptr, ptr %self, align 8, !dbg !1193
  %ptradd64 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !1193
  %65 = load i64, ptr %ptradd64, align 8, !dbg !1193
  %eq65 = icmp eq i64 0, %65, !dbg !1193
  br i1 %eq65, label %assert_ok70, label %assert_fail66, !dbg !1193

assert_fail66:                                    ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.51, i64 35 }, ptr %taddr67, align 8
  %66 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr68, align 8
  %67 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr69, align 8
  %68 = load [2 x i64], ptr %taddr69, align 8
  %69 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %69([2 x i64] %66, [2 x i64] %67, [2 x i64] %68, i32 19), !dbg !1193
  unreachable, !dbg !1193

assert_ok70:                                      ; preds = %checkok62
  ret ptr %63, !dbg !1193

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %70 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr1, align 8
  %71 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr2, align 8
  %72 = load [2 x i64], ptr %taddr2, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73([2 x i64] %70, [2 x i64] %71, [2 x i64] %72, i32 21), !dbg !1161
  unreachable, !dbg !1161

panic22:                                          ; preds = %noerr_block
  store i64 %45, ptr %taddr23, align 8
  %74 = insertvalue %any undef, ptr %taddr23, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %76 = insertvalue %any undef, ptr %taddr24, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr25, align 8
  %78 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr26, align 8
  %79 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr27, align 8
  %80 = load [2 x i64], ptr %taddr27, align 8
  store %any %75, ptr %varargslots28, align 8
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %77, ptr %ptradd29, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp30", ptr %taddr31, align 8
  %82 = load [2 x i64], ptr %taddr31, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 24, [2 x i64] %82), !dbg !1185
  unreachable, !dbg !1185

panic35:                                          ; preds = %checkok32
  store i64 %51, ptr %taddr36, align 8
  %83 = insertvalue %any undef, ptr %taddr36, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr37, align 8
  %85 = insertvalue %any undef, ptr %taddr37, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr38, align 8
  %87 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr39, align 8
  %88 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr40, align 8
  %89 = load [2 x i64], ptr %taddr40, align 8
  store %any %84, ptr %varargslots41, align 8
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %86, ptr %ptradd42, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp43", ptr %taddr44, align 8
  %91 = load [2 x i64], ptr %taddr44, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 24, [2 x i64] %91), !dbg !1187
  unreachable, !dbg !1187

panic47:                                          ; preds = %checkok45
  store i64 %58, ptr %taddr48, align 8
  %92 = insertvalue %any undef, ptr %taddr48, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr49, align 8
  %94 = insertvalue %any undef, ptr %taddr49, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr50, align 8
  %96 = load [2 x i64], ptr %taddr50, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr51, align 8
  %97 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr52, align 8
  %98 = load [2 x i64], ptr %taddr52, align 8
  store %any %93, ptr %varargslots53, align 8
  %ptradd54 = getelementptr inbounds i8, ptr %varargslots53, i64 16
  store %any %95, ptr %ptradd54, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots53, 0
  %"$$temp55" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp55", ptr %taddr56, align 8
  %100 = load [2 x i64], ptr %taddr56, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 24, [2 x i64] %100), !dbg !1187
  unreachable, !dbg !1187

panic58:                                          ; preds = %checkok57
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr59, align 8
  %101 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr60, align 8
  %102 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr61, align 8
  %103 = load [2 x i64], ptr %taddr61, align 8
  %104 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %104([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 25), !dbg !1189
  unreachable, !dbg !1189
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.MultiReader.temp_init(ptr %0, [2 x i64] %1) #0 !dbg !1194 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %readers = alloca %"any[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %any, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1197
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1197
  br i1 %3, label %panic, label %checkok, !dbg !1197

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1198, metadata !DIExpression()), !dbg !1199
  store [2 x i64] %1, ptr %readers, align 8
  call void @llvm.dbg.declare(metadata ptr %readers, metadata !1200, metadata !DIExpression()), !dbg !1201
  %4 = load ptr, ptr %self, align 8, !dbg !1202
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !1202
  %5 = load i64, ptr %ptradd, align 8, !dbg !1202
  %eq = icmp eq i64 0, %5, !dbg !1202
  br i1 %eq, label %assert_ok, label %assert_fail, !dbg !1202

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.89, i64 90 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 31), !dbg !1202
  unreachable, !dbg !1202

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1204
  %i2nb = icmp eq ptr %10, null, !dbg !1204
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1204

if.then:                                          ; preds = %assert_ok
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1207
  br label %if.exit, !dbg !1207

if.exit:                                          ; preds = %if.then, %assert_ok
  %11 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1209
  %12 = insertvalue %any undef, ptr %11, 0, !dbg !1206
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1206
  %14 = load ptr, ptr %self, align 8, !dbg !1206
  %15 = load [2 x i64], ptr %readers, align 8, !dbg !1206
  store %any %13, ptr %taddr6, align 8
  %16 = load [2 x i64], ptr %taddr6, align 8
  %17 = call ptr @std.io.MultiReader.new_init(ptr %14, [2 x i64] %15, [2 x i64] %16), !dbg !1210
  %18 = load ptr, ptr %self, align 8, !dbg !1211
  %ptradd7 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !1211
  %19 = load i64, ptr %ptradd7, align 8, !dbg !1211
  %eq8 = icmp eq i64 0, %19, !dbg !1211
  br i1 %eq8, label %assert_ok13, label %assert_fail9, !dbg !1211

assert_fail9:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.51, i64 35 }, ptr %taddr10, align 8
  %20 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr11, align 8
  %21 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 32), !dbg !1211
  unreachable, !dbg !1211

assert_ok13:                                      ; preds = %if.exit
  ret ptr %17, !dbg !1211

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 34), !dbg !1199
  unreachable, !dbg !1199
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.MultiReader.free(ptr %0) #0 !dbg !1212 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1215
  %1 = icmp eq ptr %0, null, !dbg !1215
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1215
  br i1 %2, label %panic, label %checkok, !dbg !1215

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1216, metadata !DIExpression()), !dbg !1217
  %3 = load ptr, ptr %self, align 8, !dbg !1218
  %ptradd = getelementptr inbounds i8, ptr %3, i64 24, !dbg !1218
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1218
  %i2nb = icmp eq ptr %4, null, !dbg !1218
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1218

if.then:                                          ; preds = %checkok
  ret void, !dbg !1219

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1220
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !1220
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !1221
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !1222
  %i2nb4 = icmp eq ptr %8, null, !dbg !1222
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !1222

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !1225

if.exit6:                                         ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1226
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1226
  %10 = inttoptr i64 %9 to ptr, !dbg !1226
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1215
  %11 = icmp eq ptr %10, %type, !dbg !1215
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !1215

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1215
  %12 = load ptr, ptr %ptradd8, align 8, !dbg !1215
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !1215
  store ptr %13, ptr %.inlinecache, align 8, !dbg !1215
  store ptr %10, ptr %.cachedtype, align 8, !dbg !1215
  br label %14, !dbg !1215

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1215
  br label %14, !dbg !1215

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !1215
  %15 = icmp eq ptr %fn_phi, null, !dbg !1215
  br i1 %15, label %missing_function, label %match, !dbg !1215

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr9, align 8
  %16 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr10, align 8
  %17 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr11, align 8
  %18 = load [2 x i64], ptr %taddr11, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 105), !dbg !1227
  unreachable, !dbg !1227

match:                                            ; preds = %14
  %20 = load ptr, ptr %allocator, align 8, !dbg !1227
  %21 = load ptr, ptr %ptr, align 8, !dbg !1227
  call void %fn_phi(ptr %20, ptr %21, i8 0), !dbg !1227
  br label %expr_block.exit, !dbg !1227

expr_block.exit:                                  ; preds = %match, %if.then5
  %22 = load ptr, ptr %self, align 8, !dbg !1228
  %checknull = icmp eq ptr %22, null, !dbg !1228
  %23 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1228
  br i1 %23, label %panic12, label %checkok16, !dbg !1228

checkok16:                                        ; preds = %expr_block.exit
  call void @llvm.memset.p0.i64(ptr align 8 %22, i8 0, i64 40, i1 false), !dbg !1228
  ret void, !dbg !1228

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 39), !dbg !1217
  unreachable, !dbg !1217

panic12:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr13, align 8
  %28 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr14, align 8
  %29 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr15, align 8
  %30 = load [2 x i64], ptr %taddr15, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 43), !dbg !1228
  unreachable, !dbg !1228
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.MultiReader.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1229 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %r = alloca %any, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %reterr = alloca i64, align 8
  %retparam26 = alloca i64, align 8
  %reterr31 = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1232
  %3 = icmp eq ptr %1, null, !dbg !1232
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1232
  br i1 %4, label %panic, label %checkok, !dbg !1232

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1233, metadata !DIExpression()), !dbg !1234
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1235, metadata !DIExpression()), !dbg !1236
  call void @llvm.dbg.declare(metadata ptr %r, metadata !1237, metadata !DIExpression()), !dbg !1238
  %5 = load ptr, ptr %self, align 8, !dbg !1239
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1239
  %6 = load i64, ptr %ptradd, align 8, !dbg !1239
  %7 = load ptr, ptr %5, align 8, !dbg !1239
  %8 = load ptr, ptr %self, align 8, !dbg !1240
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1240
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1240
  %ge = icmp uge i64 %9, %6, !dbg !1240
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1240
  br i1 %10, label %panic4, label %checkok12, !dbg !1240

checkok12:                                        ; preds = %checkok
  %ptroffset = getelementptr inbounds [16 x i8], ptr %7, i64 %9, !dbg !1240
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !1240
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1241, metadata !DIExpression()), !dbg !1242
  %ptradd13 = getelementptr inbounds i8, ptr %r, i64 8, !dbg !1243
  %11 = load i64, ptr %ptradd13, align 8, !dbg !1243
  %12 = inttoptr i64 %11 to ptr, !dbg !1243
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1232
  %13 = icmp eq ptr %12, %type, !dbg !1232
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !1232

cache_miss:                                       ; preds = %checkok12
  %ptradd14 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1232
  %14 = load ptr, ptr %ptradd14, align 8, !dbg !1232
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.read"), !dbg !1232
  store ptr %15, ptr %.inlinecache, align 8, !dbg !1232
  store ptr %12, ptr %.cachedtype, align 8, !dbg !1232
  br label %16, !dbg !1232

cache_hit:                                        ; preds = %checkok12
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1232
  br label %16, !dbg !1232

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !1232
  %17 = icmp eq ptr %fn_phi, null, !dbg !1232
  br i1 %17, label %missing_function, label %match, !dbg !1232

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr15, align 8
  %18 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr16, align 8
  %19 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr17, align 8
  %20 = load [2 x i64], ptr %taddr17, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 49), !dbg !1244
  unreachable, !dbg !1244

match:                                            ; preds = %16
  %22 = load ptr, ptr %r, align 8
  %23 = load [2 x i64], ptr %bytes, align 8
  %24 = call i64 %fn_phi(ptr %retparam, ptr %22, [2 x i64] %23), !dbg !1244
  %not_err = icmp eq i64 %24, 0, !dbg !1244
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1244
  br i1 %25, label %after_check, label %assign_optional, !dbg !1244

assign_optional:                                  ; preds = %match
  store i64 %24, ptr %n.f, align 8, !dbg !1244
  br label %after_assign, !dbg !1244

after_check:                                      ; preds = %match
  %26 = load i64, ptr %retparam, align 8, !dbg !1244
  store i64 %26, ptr %n, align 8, !dbg !1244
  store i64 0, ptr %n.f, align 8, !dbg !1244
  br label %after_assign, !dbg !1244

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @llvm.dbg.declare(metadata ptr %err, metadata !1245, metadata !DIExpression()), !dbg !1246
  br label %testblock, !dbg !1246

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !1247
  %not_err18 = icmp eq i64 %optval, 0, !dbg !1247
  %27 = call i1 @llvm.expect.i1(i1 %not_err18, i1 true), !dbg !1247
  br i1 %27, label %after_check20, label %assign_optional19, !dbg !1247

assign_optional19:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !1247
  br label %end_block, !dbg !1247

after_check20:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !1247
  br label %end_block, !dbg !1247

end_block:                                        ; preds = %after_check20, %assign_optional19
  %28 = load i64, ptr %err, align 8, !dbg !1247
  %neq = icmp ne i64 %28, 0, !dbg !1247
  br i1 %neq, label %if.then, label %if.exit30, !dbg !1247

if.then:                                          ; preds = %end_block
  store i64 %28, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then
  %29 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %29, !dbg !1248
  br i1 %eq, label %switch.case, label %next_if, !dbg !1248

switch.case:                                      ; preds = %switch.entry
  %30 = load ptr, ptr %self, align 8, !dbg !1249
  %ptradd21 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !1249
  %31 = load i64, ptr %ptradd21, align 8, !dbg !1249
  %add = add i64 %31, 1, !dbg !1249
  store i64 %add, ptr %ptradd21, align 8, !dbg !1249
  %32 = load ptr, ptr %self, align 8, !dbg !1251
  %ptradd22 = getelementptr inbounds i8, ptr %32, i64 16, !dbg !1251
  %33 = load i64, ptr %ptradd22, align 8, !dbg !1251
  %34 = load ptr, ptr %self, align 8, !dbg !1252
  %ptradd23 = getelementptr inbounds i8, ptr %34, i64 8, !dbg !1252
  %35 = load i64, ptr %ptradd23, align 8, !dbg !1252
  %ge24 = icmp uge i64 %33, %35, !dbg !1251
  br i1 %ge24, label %if.then25, label %if.exit, !dbg !1251

if.then25:                                        ; preds = %switch.case
  ret i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), !dbg !1253

if.exit:                                          ; preds = %switch.case
  %36 = load ptr, ptr %self, align 8
  %37 = load [2 x i64], ptr %bytes, align 8
  %38 = call i64 @std.io.MultiReader.read(ptr %retparam26, ptr %36, [2 x i64] %37), !dbg !1255
  %not_err27 = icmp eq i64 %38, 0, !dbg !1255
  %39 = call i1 @llvm.expect.i1(i1 %not_err27, i1 true), !dbg !1255
  br i1 %39, label %after_check29, label %assign_optional28, !dbg !1255

assign_optional28:                                ; preds = %if.exit
  store i64 %38, ptr %reterr, align 8, !dbg !1255
  br label %err_retblock, !dbg !1255

after_check29:                                    ; preds = %if.exit
  %40 = load i64, ptr %retparam26, align 8, !dbg !1255
  store i64 %40, ptr %0, align 8, !dbg !1255
  ret i64 0, !dbg !1255

err_retblock:                                     ; preds = %assign_optional28
  %41 = load i64, ptr %reterr, align 8, !dbg !1255
  ret i64 %41, !dbg !1255

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !1255

switch.default:                                   ; preds = %next_if
  %42 = load i64, ptr %err, align 8, !dbg !1256
  ret i64 %42, !dbg !1256

if.exit30:                                        ; preds = %end_block
  %43 = load i64, ptr %n, align 8, !dbg !1258
  store i64 %43, ptr %0, align 8, !dbg !1258
  ret i64 0, !dbg !1258

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %44 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr1, align 8
  %45 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %46 = load [2 x i64], ptr %taddr2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47([2 x i64] %44, [2 x i64] %45, [2 x i64] %46, i32 46), !dbg !1234
  unreachable, !dbg !1234

panic4:                                           ; preds = %checkok
  store i64 %6, ptr %taddr5, align 8
  %48 = insertvalue %any undef, ptr %taddr5, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr6, align 8
  %50 = insertvalue %any undef, ptr %taddr6, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr7, align 8
  %52 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr8, align 8
  %53 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr9, align 8
  %54 = load [2 x i64], ptr %taddr9, align 8
  store %any %49, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %51, ptr %ptradd10, align 8
  %55 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %56 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 48, [2 x i64] %56), !dbg !1240
  unreachable, !dbg !1240
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.MultiReader.read_byte(ptr %0, ptr %1) #0 !dbg !1259 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1262
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1262
  br i1 %3, label %panic, label %checkok, !dbg !1262

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1263, metadata !DIExpression()), !dbg !1264
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1265, metadata !DIExpression()), !dbg !1269
  store i8 0, ptr %data, align 1, !dbg !1269
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1270
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !1270
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %taddr3, align 8
  %7 = load [2 x i64], ptr %taddr3, align 8
  %8 = call i64 @std.io.MultiReader.read(ptr %retparam, ptr %6, [2 x i64] %7), !dbg !1271
  %not_err = icmp eq i64 %8, 0, !dbg !1271
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1271
  br i1 %9, label %after_check, label %assign_optional, !dbg !1271

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !1271
  br label %guard_block, !dbg !1271

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1271

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !1271
  ret i64 %10, !dbg !1271

noerr_block:                                      ; preds = %after_check
  %11 = load i8, ptr %data, align 1, !dbg !1272
  store i8 %11, ptr %0, align 1, !dbg !1272
  ret i64 0, !dbg !1272

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.88, i64 14 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 65), !dbg !1264
  unreachable, !dbg !1264
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.Scanner.init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !1273 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %stream = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %.assign_list = alloca %Scanner, align 8
  %3 = icmp eq ptr %0, null, !dbg !1284
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1284
  br i1 %4, label %panic, label %checkok, !dbg !1284

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1285, metadata !DIExpression()), !dbg !1286
  store [2 x i64] %1, ptr %stream, align 8
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !1287, metadata !DIExpression()), !dbg !1288
  store [2 x i64] %2, ptr %buffer, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !1289, metadata !DIExpression()), !dbg !1290
  %ptradd = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !1291
  %5 = load i64, ptr %ptradd, align 8, !dbg !1291
  %lt = icmp ult i64 0, %5, !dbg !1291
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1291

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.92, i64 65 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 17), !dbg !1291
  unreachable, !dbg !1291

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1293
  %checknull = icmp eq ptr %10, null, !dbg !1293
  %11 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1293
  br i1 %11, label %panic6, label %checkok10, !dbg !1293

checkok10:                                        ; preds = %assert_ok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %stream, i32 16, i1 false), !dbg !1294
  %ptradd11 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1294
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd11, ptr align 8 %buffer, i32 16, i1 false), !dbg !1295
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %10, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !1295
  ret void, !dbg !1295

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 19), !dbg !1286
  unreachable, !dbg !1286

panic6:                                           ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr7, align 8
  %16 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr8, align 8
  %17 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr9, align 8
  %18 = load [2 x i64], ptr %taddr9, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 21), !dbg !1293
  unreachable, !dbg !1293
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.io.Scanner.flush(ptr %0) #0 !dbg !1296 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buf = alloca %"char[]", align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr18 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 8
  %taddr30 = alloca %"any[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1299
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1299
  br i1 %2, label %panic, label %checkok, !dbg !1299

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1300, metadata !DIExpression()), !dbg !1301
  %3 = load ptr, ptr %self, align 8, !dbg !1302
  %ptradd = getelementptr inbounds i8, ptr %3, i64 40, !dbg !1302
  %4 = load i64, ptr %ptradd, align 8, !dbg !1302
  %5 = load ptr, ptr %self, align 8, !dbg !1303
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 32, !dbg !1303
  %6 = load i64, ptr %ptradd3, align 8, !dbg !1303
  %ge = icmp uge i64 %4, %6, !dbg !1302
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !1302

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.74, i64 16 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr6, align 8
  %9 = load [2 x i64], ptr %taddr6, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 30), !dbg !1302
  unreachable, !dbg !1302

assert_ok:                                        ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1304, metadata !DIExpression()), !dbg !1305
  %11 = load ptr, ptr %self, align 8, !dbg !1306
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 40, !dbg !1306
  %12 = load i64, ptr %ptradd7, align 8, !dbg !1306
  %13 = load ptr, ptr %self, align 8, !dbg !1307
  %ptradd8 = getelementptr inbounds i8, ptr %13, i64 32, !dbg !1307
  %14 = load i64, ptr %ptradd8, align 8, !dbg !1307
  %sub = sub i64 %12, %14, !dbg !1306
  store i64 %sub, ptr %n, align 8, !dbg !1306
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !1308, metadata !DIExpression()), !dbg !1309
  %15 = load ptr, ptr %self, align 8, !dbg !1310
  %ptradd9 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1310
  %16 = load %"char[]", ptr %ptradd9, align 8, !dbg !1310
  %17 = extractvalue %"char[]" %16, 0, !dbg !1310
  %18 = load ptr, ptr %self, align 8, !dbg !1311
  %ptradd10 = getelementptr inbounds i8, ptr %18, i64 32, !dbg !1311
  %19 = load i64, ptr %ptradd10, align 8, !dbg !1311
  %20 = extractvalue %"char[]" %16, 1, !dbg !1311
  %gt = icmp ugt i64 %19, %20, !dbg !1311
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1311
  br i1 %21, label %panic11, label %checkok19, !dbg !1311

checkok19:                                        ; preds = %assert_ok
  %22 = load i64, ptr %n, align 8, !dbg !1312
  %add = add i64 %19, %22, !dbg !1312
  %lt = icmp ult i64 %20, %add, !dbg !1312
  %sub20 = sub i64 %add, 1, !dbg !1312
  %23 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1312
  br i1 %23, label %panic21, label %checkok31, !dbg !1312

checkok31:                                        ; preds = %checkok19
  %size = sub i64 %add, %19, !dbg !1310
  %ptradd32 = getelementptr inbounds i8, ptr %17, i64 %19, !dbg !1310
  %24 = insertvalue %"char[]" undef, ptr %ptradd32, 0, !dbg !1310
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !1310
  store %"char[]" %25, ptr %buf, align 8, !dbg !1310
  %26 = load ptr, ptr %self, align 8, !dbg !1313
  %ptradd33 = getelementptr inbounds i8, ptr %26, i64 32, !dbg !1313
  store i64 0, ptr %ptradd33, align 8, !dbg !1314
  %27 = load ptr, ptr %self, align 8, !dbg !1315
  %ptradd34 = getelementptr inbounds i8, ptr %27, i64 40, !dbg !1315
  store i64 0, ptr %ptradd34, align 8, !dbg !1316
  %28 = load [2 x i64], ptr %buf, align 8, !dbg !1317
  ret [2 x i64] %28, !dbg !1317

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %29 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %30 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr2, align 8
  %31 = load [2 x i64], ptr %taddr2, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 28), !dbg !1301
  unreachable, !dbg !1301

panic11:                                          ; preds = %assert_ok
  store i64 %20, ptr %taddr12, align 8
  %33 = insertvalue %any undef, ptr %taddr12, 0
  %34 = insertvalue %any %33, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %19, ptr %taddr13, align 8
  %35 = insertvalue %any undef, ptr %taddr13, 0
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr14, align 8
  %37 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr15, align 8
  %38 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr16, align 8
  %39 = load [2 x i64], ptr %taddr16, align 8
  store %any %34, ptr %varargslots, align 8
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %36, ptr %ptradd17, align 8
  %40 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %40, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr18, align 8
  %41 = load [2 x i64], ptr %taddr18, align 8
  call void @std.core.builtin.panicf([2 x i64] %37, [2 x i64] %38, [2 x i64] %39, i32 32, [2 x i64] %41), !dbg !1310
  unreachable, !dbg !1310

panic21:                                          ; preds = %checkok19
  store i64 %sub20, ptr %taddr22, align 8
  %42 = insertvalue %any undef, ptr %taddr22, 0
  %43 = insertvalue %any %42, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %20, ptr %taddr23, align 8
  %44 = insertvalue %any undef, ptr %taddr23, 0
  %45 = insertvalue %any %44, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr24, align 8
  %46 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr25, align 8
  %47 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr26, align 8
  %48 = load [2 x i64], ptr %taddr26, align 8
  store %any %43, ptr %varargslots27, align 8
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %45, ptr %ptradd28, align 8
  %49 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %49, i64 2, 1
  store %"any[]" %"$$temp29", ptr %taddr30, align 8
  %50 = load [2 x i64], ptr %taddr30, align 8
  call void @std.core.builtin.panicf([2 x i64] %46, [2 x i64] %47, [2 x i64] %48, i32 32, [2 x i64] %50), !dbg !1310
  unreachable, !dbg !1310
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Scanner.close(ptr %0) #0 !dbg !1318 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache5 = alloca ptr, align 8
  %.cachedtype6 = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype6, align 8, !dbg !1321
  store ptr null, ptr %.cachedtype, align 8, !dbg !1321
  %1 = icmp eq ptr %0, null, !dbg !1321
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1321
  br i1 %2, label %panic, label %checkok, !dbg !1321

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1322, metadata !DIExpression()), !dbg !1323
  %3 = load ptr, ptr %self, align 8, !dbg !1324
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !1324
  %4 = load i64, ptr %ptradd, align 8, !dbg !1324
  %5 = inttoptr i64 %4 to ptr, !dbg !1324
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1321
  %6 = icmp eq ptr %5, %type, !dbg !1321
  br i1 %6, label %cache_hit, label %cache_miss, !dbg !1321

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1321
  %7 = load ptr, ptr %ptradd3, align 8, !dbg !1321
  %8 = call ptr @.dyn_search(ptr %7, ptr @"$sel.close"), !dbg !1321
  store ptr %8, ptr %.inlinecache, align 8, !dbg !1321
  store ptr %5, ptr %.cachedtype, align 8, !dbg !1321
  br label %9, !dbg !1321

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1321
  br label %9, !dbg !1321

9:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %8, %cache_miss ], !dbg !1321
  %i2b = icmp ne ptr %fn_phi, null, !dbg !1321
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1321

if.then:                                          ; preds = %9
  %10 = load ptr, ptr %self, align 8, !dbg !1325
  %ptradd4 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1325
  %11 = load i64, ptr %ptradd4, align 8, !dbg !1325
  %12 = inttoptr i64 %11 to ptr, !dbg !1325
  %type7 = load ptr, ptr %.cachedtype6, align 8, !dbg !1321
  %13 = icmp eq ptr %12, %type7, !dbg !1321
  br i1 %13, label %cache_hit10, label %cache_miss8, !dbg !1321

cache_miss8:                                      ; preds = %if.then
  %ptradd9 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !1321
  %14 = load ptr, ptr %ptradd9, align 8, !dbg !1321
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.close"), !dbg !1321
  store ptr %15, ptr %.inlinecache5, align 8, !dbg !1321
  store ptr %12, ptr %.cachedtype6, align 8, !dbg !1321
  br label %16, !dbg !1321

cache_hit10:                                      ; preds = %if.then
  %cache_hit_fn11 = load ptr, ptr %.inlinecache5, align 8, !dbg !1321
  br label %16, !dbg !1321

16:                                               ; preds = %cache_hit10, %cache_miss8
  %fn_phi12 = phi ptr [ %cache_hit_fn11, %cache_hit10 ], [ %15, %cache_miss8 ], !dbg !1321
  %17 = icmp eq ptr %fn_phi12, null, !dbg !1321
  br i1 %17, label %missing_function, label %match, !dbg !1321

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.38, i64 42 }, ptr %taddr13, align 8
  %18 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr14, align 8
  %19 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 40), !dbg !1325
  unreachable, !dbg !1325

match:                                            ; preds = %16
  %22 = load ptr, ptr %10, align 8, !dbg !1325
  %23 = call i64 %fn_phi12(ptr %22), !dbg !1325
  %not_err = icmp eq i64 %23, 0, !dbg !1325
  %24 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1325
  br i1 %24, label %after_check, label %assign_optional, !dbg !1325

assign_optional:                                  ; preds = %match
  store i64 %23, ptr %reterr, align 8, !dbg !1325
  br label %err_retblock, !dbg !1325

after_check:                                      ; preds = %match
  ret i64 0, !dbg !1325

err_retblock:                                     ; preds = %assign_optional
  %25 = load i64, ptr %reterr, align 8, !dbg !1325
  ret i64 %25, !dbg !1325

if.exit:                                          ; preds = %9
  ret i64 0, !dbg !1325

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 5 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 38), !dbg !1323
  unreachable, !dbg !1323
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Scanner.scan(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1326 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %pattern = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %self16 = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %n37 = alloca i64, align 8
  %buf40 = alloca %"char[]", align 8
  %taddr45 = alloca i64, align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr51 = alloca %"any[]", align 8
  %taddr56 = alloca i64, align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %varargslots61 = alloca [2 x %any], align 8
  %taddr64 = alloca %"any[]", align 8
  %i = alloca i64, align 8
  %self67 = alloca ptr, align 8
  %buf68 = alloca %"char[]", align 8
  %pattern69 = alloca %"char[]", align 8
  %retparam70 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 8
  %taddr88 = alloca %"any[]", align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca i64, align 8
  %taddr96 = alloca %"char[]", align 8
  %taddr97 = alloca %"char[]", align 8
  %taddr98 = alloca %"char[]", align 8
  %varargslots99 = alloca [2 x %any], align 8
  %taddr102 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca %"char[]", align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %varargslots122 = alloca [2 x %any], align 8
  %taddr125 = alloca %"any[]", align 8
  %taddr131 = alloca i64, align 8
  %taddr132 = alloca i64, align 8
  %taddr133 = alloca %"char[]", align 8
  %taddr134 = alloca %"char[]", align 8
  %taddr135 = alloca %"char[]", align 8
  %varargslots136 = alloca [2 x %any], align 8
  %taddr139 = alloca %"any[]", align 8
  %taddr145 = alloca i64, align 8
  %taddr146 = alloca i64, align 8
  %taddr147 = alloca %"char[]", align 8
  %taddr148 = alloca %"char[]", align 8
  %taddr149 = alloca %"char[]", align 8
  %varargslots150 = alloca [2 x %any], align 8
  %taddr153 = alloca %"any[]", align 8
  %taddr158 = alloca i64, align 8
  %taddr159 = alloca i64, align 8
  %taddr160 = alloca %"char[]", align 8
  %taddr161 = alloca %"char[]", align 8
  %taddr162 = alloca %"char[]", align 8
  %varargslots163 = alloca [2 x %any], align 8
  %taddr166 = alloca %"any[]", align 8
  %taddr172 = alloca i64, align 8
  %taddr173 = alloca i64, align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr175 = alloca %"char[]", align 8
  %taddr176 = alloca %"char[]", align 8
  %varargslots177 = alloca [2 x %any], align 8
  %taddr180 = alloca %"any[]", align 8
  %p = alloca i64, align 8
  %error_var184 = alloca i64, align 8
  %self185 = alloca ptr, align 8
  %buf186 = alloca %"char[]", align 8
  %n187 = alloca i64, align 8
  %n.f188 = alloca i64, align 8
  %.inlinecache190 = alloca ptr, align 8
  %.cachedtype191 = alloca ptr, align 8
  %taddr199 = alloca %"char[]", align 8
  %taddr200 = alloca %"char[]", align 8
  %taddr201 = alloca %"char[]", align 8
  %retparam203 = alloca i64, align 8
  %err208 = alloca i64, align 8
  %switch217 = alloca i64, align 8
  %taddr230 = alloca i64, align 8
  %taddr231 = alloca i64, align 8
  %taddr232 = alloca %"char[]", align 8
  %taddr233 = alloca %"char[]", align 8
  %taddr234 = alloca %"char[]", align 8
  %varargslots235 = alloca [2 x %any], align 8
  %taddr238 = alloca %"any[]", align 8
  %taddr244 = alloca i64, align 8
  %taddr245 = alloca i64, align 8
  %taddr246 = alloca %"char[]", align 8
  %taddr247 = alloca %"char[]", align 8
  %taddr248 = alloca %"char[]", align 8
  %varargslots249 = alloca [2 x %any], align 8
  %taddr252 = alloca %"any[]", align 8
  %i255 = alloca i64, align 8
  %error_var256 = alloca i64, align 8
  %self257 = alloca ptr, align 8
  %buf258 = alloca %"char[]", align 8
  %pattern259 = alloca %"char[]", align 8
  %retparam260 = alloca i64, align 8
  %reterr270 = alloca i64, align 8
  %taddr274 = alloca i64, align 8
  %taddr275 = alloca i64, align 8
  %taddr276 = alloca %"char[]", align 8
  %taddr277 = alloca %"char[]", align 8
  %taddr278 = alloca %"char[]", align 8
  %varargslots279 = alloca [2 x %any], align 8
  %taddr282 = alloca %"any[]", align 8
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca %"char[]", align 8
  %taddr292 = alloca %"char[]", align 8
  %taddr293 = alloca %"char[]", align 8
  %varargslots294 = alloca [2 x %any], align 8
  %taddr297 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype191, align 8, !dbg !1330
  store ptr null, ptr %.cachedtype, align 8, !dbg !1330
  %3 = icmp eq ptr %1, null, !dbg !1330
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1330
  br i1 %4, label %panic, label %checkok, !dbg !1330

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1331, metadata !DIExpression()), !dbg !1332
  store [2 x i64] %2, ptr %pattern, align 8
  call void @llvm.dbg.declare(metadata ptr %pattern, metadata !1333, metadata !DIExpression()), !dbg !1334
  %ptradd = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1335
  %5 = load i64, ptr %ptradd, align 8, !dbg !1335
  %lt = icmp ult i64 0, %5, !dbg !1335
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1335

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.94, i64 67 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 45), !dbg !1335
  unreachable, !dbg !1335

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1337
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1337
  %ptradd7 = getelementptr inbounds i8, ptr %ptradd6, i64 8, !dbg !1337
  %11 = load i64, ptr %ptradd7, align 8, !dbg !1337
  %ptradd8 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1338
  %12 = load i64, ptr %ptradd8, align 8, !dbg !1338
  %gt = icmp ugt i64 %11, %12, !dbg !1337
  br i1 %gt, label %assert_ok13, label %assert_fail9, !dbg !1337

assert_fail9:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.95, i64 69 }, ptr %taddr10, align 8
  %13 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr11, align 8
  %14 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr12, align 8
  %15 = load [2 x i64], ptr %taddr12, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 46), !dbg !1337
  unreachable, !dbg !1337

assert_ok13:                                      ; preds = %assert_ok
  %17 = load ptr, ptr %self, align 8, !dbg !1339
  %ptradd14 = getelementptr inbounds i8, ptr %17, i64 40, !dbg !1339
  %18 = load i64, ptr %ptradd14, align 8, !dbg !1339
  %eq = icmp eq i64 0, %18, !dbg !1339
  br i1 %eq, label %if.then, label %if.exit29, !dbg !1339

if.then:                                          ; preds = %assert_ok13
  %19 = load ptr, ptr %self, align 8, !dbg !1340
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 40, !dbg !1340
  %20 = load ptr, ptr %self, align 8
  store ptr %20, ptr %self16, align 8
  %21 = load ptr, ptr %self, align 8, !dbg !1342
  %ptradd17 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1342
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf, ptr align 8 %ptradd17, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1343, metadata !DIExpression()), !dbg !1345
  %22 = load ptr, ptr %self16, align 8, !dbg !1347
  %ptradd18 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1348
  %23 = load i64, ptr %ptradd18, align 8, !dbg !1348
  %24 = inttoptr i64 %23 to ptr, !dbg !1348
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1330
  %25 = icmp eq ptr %24, %type, !dbg !1330
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !1330

cache_miss:                                       ; preds = %if.then
  %ptradd19 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1330
  %26 = load ptr, ptr %ptradd19, align 8, !dbg !1330
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.read"), !dbg !1330
  store ptr %27, ptr %.inlinecache, align 8, !dbg !1330
  store ptr %24, ptr %.cachedtype, align 8, !dbg !1330
  br label %28, !dbg !1330

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1330
  br label %28, !dbg !1330

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !1330
  %29 = icmp eq ptr %fn_phi, null, !dbg !1330
  br i1 %29, label %missing_function, label %match, !dbg !1330

missing_function:                                 ; preds = %28
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr20, align 8
  %30 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr21, align 8
  %31 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr22, align 8
  %32 = load [2 x i64], ptr %taddr22, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 92), !dbg !1347
  unreachable, !dbg !1347

match:                                            ; preds = %28
  %34 = load ptr, ptr %22, align 8
  %35 = load [2 x i64], ptr %buf, align 8
  %36 = call i64 %fn_phi(ptr %retparam, ptr %34, [2 x i64] %35), !dbg !1347
  %not_err = icmp eq i64 %36, 0, !dbg !1347
  %37 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1347
  br i1 %37, label %after_check, label %assign_optional, !dbg !1347

assign_optional:                                  ; preds = %match
  store i64 %36, ptr %n.f, align 8, !dbg !1347
  br label %after_assign, !dbg !1347

after_check:                                      ; preds = %match
  %38 = load i64, ptr %retparam, align 8, !dbg !1347
  store i64 %38, ptr %n, align 8, !dbg !1347
  store i64 0, ptr %n.f, align 8, !dbg !1347
  br label %after_assign, !dbg !1347

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @llvm.dbg.declare(metadata ptr %err, metadata !1349, metadata !DIExpression()), !dbg !1350
  br label %testblock, !dbg !1350

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %n.f, align 8, !dbg !1351
  %not_err23 = icmp eq i64 %optval, 0, !dbg !1351
  %39 = call i1 @llvm.expect.i1(i1 %not_err23, i1 true), !dbg !1351
  br i1 %39, label %after_check25, label %assign_optional24, !dbg !1351

assign_optional24:                                ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !1351
  br label %end_block, !dbg !1351

after_check25:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !1351
  br label %end_block, !dbg !1351

end_block:                                        ; preds = %after_check25, %assign_optional24
  %40 = load i64, ptr %err, align 8, !dbg !1351
  %neq = icmp ne i64 %40, 0, !dbg !1351
  br i1 %neq, label %if.then26, label %if.exit, !dbg !1351

if.then26:                                        ; preds = %end_block
  store i64 %40, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then26
  %41 = load i64, ptr %switch, align 8
  %eq27 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %41, !dbg !1352
  br i1 %eq27, label %switch.case, label %next_if, !dbg !1352

switch.case:                                      ; preds = %switch.entry
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var, align 8, !dbg !1353
  br label %guard_block, !dbg !1353

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !1353

switch.default:                                   ; preds = %next_if
  %42 = load i64, ptr %err, align 8, !dbg !1355
  store i64 %42, ptr %error_var, align 8, !dbg !1355
  br label %guard_block, !dbg !1355

if.exit:                                          ; preds = %end_block
  br label %noerr_block, !dbg !1357

guard_block:                                      ; preds = %switch.default, %switch.case
  %43 = load i64, ptr %error_var, align 8, !dbg !1357
  ret i64 %43, !dbg !1357

noerr_block:                                      ; preds = %if.exit
  %44 = load i64, ptr %n, align 8, !dbg !1357
  store i64 %44, ptr %ptradd15, align 8, !dbg !1357
  %45 = load ptr, ptr %self, align 8, !dbg !1358
  %ptradd28 = getelementptr inbounds i8, ptr %45, i64 32, !dbg !1358
  store i64 0, ptr %ptradd28, align 8, !dbg !1359
  br label %if.exit29, !dbg !1359

if.exit29:                                        ; preds = %noerr_block, %assert_ok13
  %46 = load ptr, ptr %self, align 8, !dbg !1360
  %ptradd30 = getelementptr inbounds i8, ptr %46, i64 40, !dbg !1360
  %47 = load i64, ptr %ptradd30, align 8, !dbg !1360
  %48 = load ptr, ptr %self, align 8, !dbg !1361
  %ptradd31 = getelementptr inbounds i8, ptr %48, i64 32, !dbg !1361
  %49 = load i64, ptr %ptradd31, align 8, !dbg !1361
  %ge = icmp uge i64 %47, %49, !dbg !1360
  br i1 %ge, label %assert_ok36, label %assert_fail32, !dbg !1360

assert_fail32:                                    ; preds = %if.exit29
  store %"char[]" { ptr @.panic_msg.74, i64 16 }, ptr %taddr33, align 8
  %50 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr34, align 8
  %51 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr35, align 8
  %52 = load [2 x i64], ptr %taddr35, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53([2 x i64] %50, [2 x i64] %51, [2 x i64] %52, i32 56), !dbg !1360
  unreachable, !dbg !1360

assert_ok36:                                      ; preds = %if.exit29
  call void @llvm.dbg.declare(metadata ptr %n37, metadata !1362, metadata !DIExpression()), !dbg !1363
  %54 = load ptr, ptr %self, align 8, !dbg !1364
  %ptradd38 = getelementptr inbounds i8, ptr %54, i64 40, !dbg !1364
  %55 = load i64, ptr %ptradd38, align 8, !dbg !1364
  %56 = load ptr, ptr %self, align 8, !dbg !1365
  %ptradd39 = getelementptr inbounds i8, ptr %56, i64 32, !dbg !1365
  %57 = load i64, ptr %ptradd39, align 8, !dbg !1365
  %sub = sub i64 %55, %57, !dbg !1364
  store i64 %sub, ptr %n37, align 8, !dbg !1364
  call void @llvm.dbg.declare(metadata ptr %buf40, metadata !1366, metadata !DIExpression()), !dbg !1367
  %58 = load ptr, ptr %self, align 8, !dbg !1368
  %ptradd41 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !1368
  %59 = load %"char[]", ptr %ptradd41, align 8, !dbg !1368
  %60 = extractvalue %"char[]" %59, 0, !dbg !1368
  %61 = load ptr, ptr %self, align 8, !dbg !1369
  %ptradd42 = getelementptr inbounds i8, ptr %61, i64 32, !dbg !1369
  %62 = load i64, ptr %ptradd42, align 8, !dbg !1369
  %63 = extractvalue %"char[]" %59, 1, !dbg !1369
  %gt43 = icmp ugt i64 %62, %63, !dbg !1369
  %64 = call i1 @llvm.expect.i1(i1 %gt43, i1 false), !dbg !1369
  br i1 %64, label %panic44, label %checkok52, !dbg !1369

checkok52:                                        ; preds = %assert_ok36
  %65 = load i64, ptr %n37, align 8, !dbg !1370
  %add = add i64 %62, %65, !dbg !1370
  %lt53 = icmp ult i64 %63, %add, !dbg !1370
  %sub54 = sub i64 %add, 1, !dbg !1370
  %66 = call i1 @llvm.expect.i1(i1 %lt53, i1 false), !dbg !1370
  br i1 %66, label %panic55, label %checkok65, !dbg !1370

checkok65:                                        ; preds = %checkok52
  %size = sub i64 %add, %62, !dbg !1368
  %ptradd66 = getelementptr inbounds i8, ptr %60, i64 %62, !dbg !1368
  %67 = insertvalue %"char[]" undef, ptr %ptradd66, 0, !dbg !1368
  %68 = insertvalue %"char[]" %67, i64 %size, 1, !dbg !1368
  store %"char[]" %68, ptr %buf40, align 8, !dbg !1368
  call void @llvm.dbg.declare(metadata ptr %i, metadata !1371, metadata !DIExpression()), !dbg !1372
  store i64 0, ptr %i, align 8, !dbg !1372
  %69 = load ptr, ptr %self, align 8
  store ptr %69, ptr %self67, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf68, ptr align 8 %buf40, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern69, ptr align 8 %pattern, i32 16, i1 false)
  %70 = load [2 x i64], ptr %buf68, align 8
  %71 = load [2 x i64], ptr %pattern69, align 8
  %72 = call i64 @std.core.String.index_of(ptr %retparam70, [2 x i64] %70, [2 x i64] %71), !dbg !1373
  %not_err71 = icmp eq i64 %72, 0, !dbg !1373
  %73 = call i1 @llvm.expect.i1(i1 %not_err71, i1 true), !dbg !1373
  br i1 %73, label %after_check72, label %catch_landing, !dbg !1373

after_check72:                                    ; preds = %checkok65
  %74 = load i64, ptr %retparam70, align 8, !dbg !1373
  store i64 %74, ptr %i, align 8, !dbg !1373
  br label %phi_try_catch, !dbg !1373

catch_landing:                                    ; preds = %checkok65
  br label %phi_try_catch, !dbg !1373

phi_try_catch:                                    ; preds = %catch_landing, %after_check72
  %val = phi i1 [ true, %after_check72 ], [ false, %catch_landing ], !dbg !1373
  br i1 %val, label %if.then73, label %if.exit105, !dbg !1373

if.then73:                                        ; preds = %phi_try_catch
  %75 = load ptr, ptr %self, align 8, !dbg !1376
  %ptradd74 = getelementptr inbounds i8, ptr %75, i64 32, !dbg !1376
  %76 = load i64, ptr %ptradd74, align 8, !dbg !1376
  %77 = load i64, ptr %i, align 8, !dbg !1378
  %ptradd75 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1379
  %78 = load i64, ptr %ptradd75, align 8, !dbg !1379
  %add76 = add i64 %77, %78, !dbg !1378
  %add77 = add i64 %76, %add76, !dbg !1376
  store i64 %add77, ptr %ptradd74, align 8, !dbg !1376
  %79 = load %"char[]", ptr %buf40, align 8, !dbg !1380
  %80 = extractvalue %"char[]" %79, 0, !dbg !1380
  %81 = extractvalue %"char[]" %79, 1, !dbg !1381
  %gt78 = icmp ugt i64 0, %81, !dbg !1381
  %82 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !1381
  br i1 %82, label %panic79, label %checkok89, !dbg !1381

checkok89:                                        ; preds = %if.then73
  %83 = load i64, ptr %i, align 8, !dbg !1382
  %add90 = add i64 0, %83, !dbg !1382
  %lt91 = icmp ult i64 %81, %add90, !dbg !1382
  %sub92 = sub i64 %add90, 1, !dbg !1382
  %84 = call i1 @llvm.expect.i1(i1 %lt91, i1 false), !dbg !1382
  br i1 %84, label %panic93, label %checkok103, !dbg !1382

checkok103:                                       ; preds = %checkok89
  %size104 = sub i64 %add90, 0, !dbg !1380
  %85 = insertvalue %"char[]" undef, ptr %80, 0, !dbg !1380
  %86 = insertvalue %"char[]" %85, i64 %size104, 1, !dbg !1380
  store %"char[]" %86, ptr %0, align 8, !dbg !1380
  ret i64 0, !dbg !1380

if.exit105:                                       ; preds = %phi_try_catch
  %87 = load ptr, ptr %self, align 8, !dbg !1383
  %ptradd106 = getelementptr inbounds i8, ptr %87, i64 32, !dbg !1383
  %88 = load i64, ptr %ptradd106, align 8, !dbg !1383
  %eq107 = icmp eq i64 0, %88, !dbg !1383
  br i1 %eq107, label %or.phi, label %or.rhs, !dbg !1383

or.rhs:                                           ; preds = %if.exit105
  %89 = load ptr, ptr %self, align 8, !dbg !1384
  %ptradd108 = getelementptr inbounds i8, ptr %89, i64 40, !dbg !1384
  %90 = load i64, ptr %ptradd108, align 8, !dbg !1384
  %91 = load ptr, ptr %self, align 8, !dbg !1385
  %ptradd109 = getelementptr inbounds i8, ptr %91, i64 16, !dbg !1385
  %ptradd110 = getelementptr inbounds i8, ptr %ptradd109, i64 8, !dbg !1385
  %92 = load i64, ptr %ptradd110, align 8, !dbg !1385
  %lt111 = icmp ult i64 %90, %92, !dbg !1384
  br label %or.phi, !dbg !1384

or.phi:                                           ; preds = %or.rhs, %if.exit105
  %val112 = phi i1 [ true, %if.exit105 ], [ %lt111, %or.rhs ], !dbg !1384
  br i1 %val112, label %if.then113, label %if.exit114, !dbg !1384

if.then113:                                       ; preds = %or.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !1386

if.exit114:                                       ; preds = %or.phi
  %93 = load %"char[]", ptr %buf40, align 8, !dbg !1388
  %94 = extractvalue %"char[]" %93, 0, !dbg !1388
  %95 = extractvalue %"char[]" %93, 1, !dbg !1389
  %gt115 = icmp ugt i64 0, %95, !dbg !1389
  %96 = call i1 @llvm.expect.i1(i1 %gt115, i1 false), !dbg !1389
  br i1 %96, label %panic116, label %checkok126, !dbg !1389

checkok126:                                       ; preds = %if.exit114
  %size127 = sub i64 %95, 0, !dbg !1388
  %97 = insertvalue %"char[]" undef, ptr %94, 0, !dbg !1388
  %98 = insertvalue %"char[]" %97, i64 %size127, 1, !dbg !1388
  %99 = load ptr, ptr %self, align 8, !dbg !1390
  %ptradd128 = getelementptr inbounds i8, ptr %99, i64 16, !dbg !1390
  %100 = load %"char[]", ptr %ptradd128, align 8, !dbg !1390
  %101 = extractvalue %"char[]" %100, 0, !dbg !1390
  %102 = extractvalue %"char[]" %100, 1, !dbg !1391
  %gt129 = icmp ugt i64 0, %102, !dbg !1391
  %103 = call i1 @llvm.expect.i1(i1 %gt129, i1 false), !dbg !1391
  br i1 %103, label %panic130, label %checkok140, !dbg !1391

checkok140:                                       ; preds = %checkok126
  %104 = load i64, ptr %n37, align 8, !dbg !1392
  %add141 = add i64 0, %104, !dbg !1392
  %lt142 = icmp ult i64 %102, %add141, !dbg !1392
  %sub143 = sub i64 %add141, 1, !dbg !1392
  %105 = call i1 @llvm.expect.i1(i1 %lt142, i1 false), !dbg !1392
  br i1 %105, label %panic144, label %checkok154, !dbg !1392

checkok154:                                       ; preds = %checkok140
  %size155 = sub i64 %add141, 0, !dbg !1390
  %106 = insertvalue %"char[]" undef, ptr %101, 0, !dbg !1390
  %107 = insertvalue %"char[]" %106, i64 %size155, 1, !dbg !1390
  %108 = extractvalue %"char[]" %107, 0, !dbg !1390
  %109 = extractvalue %"char[]" %98, 0, !dbg !1390
  %110 = extractvalue %"char[]" %98, 1, !dbg !1390
  %111 = extractvalue %"char[]" %107, 1, !dbg !1390
  %neq156 = icmp ne i64 %111, %110, !dbg !1390
  %112 = call i1 @llvm.expect.i1(i1 %neq156, i1 false), !dbg !1390
  br i1 %112, label %panic157, label %checkok167, !dbg !1390

checkok167:                                       ; preds = %checkok154
  %113 = mul i64 %110, 1, !dbg !1390
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %108, ptr align 1 %109, i64 %113, i1 false), !dbg !1390
  %114 = load ptr, ptr %self, align 8, !dbg !1393
  %ptradd168 = getelementptr inbounds i8, ptr %114, i64 32, !dbg !1393
  store i64 0, ptr %ptradd168, align 8, !dbg !1394
  %115 = load ptr, ptr %self, align 8, !dbg !1395
  %ptradd169 = getelementptr inbounds i8, ptr %115, i64 16, !dbg !1395
  %116 = load %"char[]", ptr %ptradd169, align 8, !dbg !1395
  %117 = extractvalue %"char[]" %116, 0, !dbg !1395
  %118 = load i64, ptr %n37, align 8, !dbg !1396
  %119 = extractvalue %"char[]" %116, 1, !dbg !1396
  %gt170 = icmp ugt i64 %118, %119, !dbg !1396
  %120 = call i1 @llvm.expect.i1(i1 %gt170, i1 false), !dbg !1396
  br i1 %120, label %panic171, label %checkok181, !dbg !1396

checkok181:                                       ; preds = %checkok167
  %size182 = sub i64 %119, %118, !dbg !1395
  %ptradd183 = getelementptr inbounds i8, ptr %117, i64 %118, !dbg !1395
  %121 = insertvalue %"char[]" undef, ptr %ptradd183, 0, !dbg !1395
  %122 = insertvalue %"char[]" %121, i64 %size182, 1, !dbg !1395
  store %"char[]" %122, ptr %buf40, align 8, !dbg !1395
  call void @llvm.dbg.declare(metadata ptr %p, metadata !1397, metadata !DIExpression()), !dbg !1398
  %123 = load ptr, ptr %self, align 8
  store ptr %123, ptr %self185, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf186, ptr align 8 %buf40, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %n187, metadata !1399, metadata !DIExpression()), !dbg !1401
  %124 = load ptr, ptr %self185, align 8, !dbg !1403
  %ptradd189 = getelementptr inbounds i8, ptr %124, i64 8, !dbg !1404
  %125 = load i64, ptr %ptradd189, align 8, !dbg !1404
  %126 = inttoptr i64 %125 to ptr, !dbg !1404
  %type192 = load ptr, ptr %.cachedtype191, align 8, !dbg !1330
  %127 = icmp eq ptr %126, %type192, !dbg !1330
  br i1 %127, label %cache_hit195, label %cache_miss193, !dbg !1330

cache_miss193:                                    ; preds = %checkok181
  %ptradd194 = getelementptr inbounds i8, ptr %126, i64 16, !dbg !1330
  %128 = load ptr, ptr %ptradd194, align 8, !dbg !1330
  %129 = call ptr @.dyn_search(ptr %128, ptr @"$sel.read"), !dbg !1330
  store ptr %129, ptr %.inlinecache190, align 8, !dbg !1330
  store ptr %126, ptr %.cachedtype191, align 8, !dbg !1330
  br label %130, !dbg !1330

cache_hit195:                                     ; preds = %checkok181
  %cache_hit_fn196 = load ptr, ptr %.inlinecache190, align 8, !dbg !1330
  br label %130, !dbg !1330

130:                                              ; preds = %cache_hit195, %cache_miss193
  %fn_phi197 = phi ptr [ %cache_hit_fn196, %cache_hit195 ], [ %129, %cache_miss193 ], !dbg !1330
  %131 = icmp eq ptr %fn_phi197, null, !dbg !1330
  br i1 %131, label %missing_function198, label %match202, !dbg !1330

missing_function198:                              ; preds = %130
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr199, align 8
  %132 = load [2 x i64], ptr %taddr199, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr200, align 8
  %133 = load [2 x i64], ptr %taddr200, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr201, align 8
  %134 = load [2 x i64], ptr %taddr201, align 8
  %135 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %135([2 x i64] %132, [2 x i64] %133, [2 x i64] %134, i32 92), !dbg !1403
  unreachable, !dbg !1403

match202:                                         ; preds = %130
  %136 = load ptr, ptr %124, align 8
  %137 = load [2 x i64], ptr %buf186, align 8
  %138 = call i64 %fn_phi197(ptr %retparam203, ptr %136, [2 x i64] %137), !dbg !1403
  %not_err204 = icmp eq i64 %138, 0, !dbg !1403
  %139 = call i1 @llvm.expect.i1(i1 %not_err204, i1 true), !dbg !1403
  br i1 %139, label %after_check206, label %assign_optional205, !dbg !1403

assign_optional205:                               ; preds = %match202
  store i64 %138, ptr %n.f188, align 8, !dbg !1403
  br label %after_assign207, !dbg !1403

after_check206:                                   ; preds = %match202
  %140 = load i64, ptr %retparam203, align 8, !dbg !1403
  store i64 %140, ptr %n187, align 8, !dbg !1403
  store i64 0, ptr %n.f188, align 8, !dbg !1403
  br label %after_assign207, !dbg !1403

after_assign207:                                  ; preds = %after_check206, %assign_optional205
  call void @llvm.dbg.declare(metadata ptr %err208, metadata !1405, metadata !DIExpression()), !dbg !1406
  br label %testblock209, !dbg !1406

testblock209:                                     ; preds = %after_assign207
  %optval210 = load i64, ptr %n.f188, align 8, !dbg !1407
  %not_err211 = icmp eq i64 %optval210, 0, !dbg !1407
  %141 = call i1 @llvm.expect.i1(i1 %not_err211, i1 true), !dbg !1407
  br i1 %141, label %after_check213, label %assign_optional212, !dbg !1407

assign_optional212:                               ; preds = %testblock209
  store i64 %optval210, ptr %err208, align 8, !dbg !1407
  br label %end_block214, !dbg !1407

after_check213:                                   ; preds = %testblock209
  store i64 0, ptr %err208, align 8, !dbg !1407
  br label %end_block214, !dbg !1407

end_block214:                                     ; preds = %after_check213, %assign_optional212
  %142 = load i64, ptr %err208, align 8, !dbg !1407
  %neq215 = icmp ne i64 %142, 0, !dbg !1407
  br i1 %neq215, label %if.then216, label %if.exit223, !dbg !1407

if.then216:                                       ; preds = %end_block214
  store i64 %142, ptr %switch217, align 8
  br label %switch.entry218

switch.entry218:                                  ; preds = %if.then216
  %143 = load i64, ptr %switch217, align 8
  %eq219 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %143, !dbg !1408
  br i1 %eq219, label %switch.case220, label %next_if221, !dbg !1408

switch.case220:                                   ; preds = %switch.entry218
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %error_var184, align 8, !dbg !1409
  br label %guard_block224, !dbg !1409

next_if221:                                       ; preds = %switch.entry218
  br label %switch.default222, !dbg !1409

switch.default222:                                ; preds = %next_if221
  %144 = load i64, ptr %err208, align 8, !dbg !1411
  store i64 %144, ptr %error_var184, align 8, !dbg !1411
  br label %guard_block224, !dbg !1411

if.exit223:                                       ; preds = %end_block214
  br label %noerr_block225, !dbg !1413

guard_block224:                                   ; preds = %switch.default222, %switch.case220
  %145 = load i64, ptr %error_var184, align 8, !dbg !1413
  ret i64 %145, !dbg !1413

noerr_block225:                                   ; preds = %if.exit223
  %146 = load i64, ptr %n187, align 8, !dbg !1413
  store i64 %146, ptr %p, align 8, !dbg !1413
  %147 = load ptr, ptr %self, align 8, !dbg !1414
  %ptradd226 = getelementptr inbounds i8, ptr %147, i64 40, !dbg !1414
  %148 = load i64, ptr %n37, align 8, !dbg !1415
  %149 = load i64, ptr %p, align 8, !dbg !1416
  %add227 = add i64 %148, %149, !dbg !1415
  store i64 %add227, ptr %ptradd226, align 8, !dbg !1415
  %150 = load %"char[]", ptr %buf40, align 8, !dbg !1417
  %151 = extractvalue %"char[]" %150, 0, !dbg !1417
  %152 = extractvalue %"char[]" %150, 1, !dbg !1418
  %gt228 = icmp ugt i64 0, %152, !dbg !1418
  %153 = call i1 @llvm.expect.i1(i1 %gt228, i1 false), !dbg !1418
  br i1 %153, label %panic229, label %checkok239, !dbg !1418

checkok239:                                       ; preds = %noerr_block225
  %154 = load i64, ptr %p, align 8, !dbg !1419
  %add240 = add i64 0, %154, !dbg !1419
  %lt241 = icmp ult i64 %152, %add240, !dbg !1419
  %sub242 = sub i64 %add240, 1, !dbg !1419
  %155 = call i1 @llvm.expect.i1(i1 %lt241, i1 false), !dbg !1419
  br i1 %155, label %panic243, label %checkok253, !dbg !1419

checkok253:                                       ; preds = %checkok239
  %size254 = sub i64 %add240, 0, !dbg !1417
  %156 = insertvalue %"char[]" undef, ptr %151, 0, !dbg !1417
  %157 = insertvalue %"char[]" %156, i64 %size254, 1, !dbg !1417
  store %"char[]" %157, ptr %buf40, align 8, !dbg !1417
  call void @llvm.dbg.declare(metadata ptr %i255, metadata !1420, metadata !DIExpression()), !dbg !1421
  %158 = load ptr, ptr %self, align 8
  store ptr %158, ptr %self257, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buf258, ptr align 8 %buf40, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %pattern259, ptr align 8 %pattern, i32 16, i1 false)
  %159 = load [2 x i64], ptr %buf258, align 8
  %160 = load [2 x i64], ptr %pattern259, align 8
  %161 = call i64 @std.core.String.index_of(ptr %retparam260, [2 x i64] %159, [2 x i64] %160), !dbg !1422
  %not_err261 = icmp eq i64 %161, 0, !dbg !1422
  %162 = call i1 @llvm.expect.i1(i1 %not_err261, i1 true), !dbg !1422
  br i1 %162, label %after_check263, label %assign_optional262, !dbg !1422

assign_optional262:                               ; preds = %checkok253
  store i64 %161, ptr %error_var256, align 8, !dbg !1422
  br label %guard_block264, !dbg !1422

after_check263:                                   ; preds = %checkok253
  br label %noerr_block265, !dbg !1422

guard_block264:                                   ; preds = %assign_optional262
  %163 = load i64, ptr %error_var256, align 8, !dbg !1422
  ret i64 %163, !dbg !1422

noerr_block265:                                   ; preds = %after_check263
  %164 = load i64, ptr %retparam260, align 8, !dbg !1422
  store i64 %164, ptr %i255, align 8, !dbg !1422
  %165 = load ptr, ptr %self, align 8, !dbg !1425
  %ptradd266 = getelementptr inbounds i8, ptr %165, i64 32, !dbg !1425
  %166 = load i64, ptr %n37, align 8, !dbg !1426
  %167 = load i64, ptr %i255, align 8, !dbg !1427
  %add267 = add i64 %166, %167, !dbg !1426
  %ptradd268 = getelementptr inbounds i8, ptr %pattern, i64 8, !dbg !1428
  %168 = load i64, ptr %ptradd268, align 8, !dbg !1428
  %add269 = add i64 %add267, %168, !dbg !1426
  store i64 %add269, ptr %ptradd266, align 8, !dbg !1426
  %169 = load ptr, ptr %self, align 8, !dbg !1429
  %ptradd271 = getelementptr inbounds i8, ptr %169, i64 16, !dbg !1429
  %170 = load %"char[]", ptr %ptradd271, align 8, !dbg !1429
  %171 = extractvalue %"char[]" %170, 0, !dbg !1429
  %172 = extractvalue %"char[]" %170, 1, !dbg !1430
  %gt272 = icmp ugt i64 0, %172, !dbg !1430
  %173 = call i1 @llvm.expect.i1(i1 %gt272, i1 false), !dbg !1430
  br i1 %173, label %panic273, label %checkok283, !dbg !1430

checkok283:                                       ; preds = %noerr_block265
  %174 = load i64, ptr %n37, align 8, !dbg !1431
  %175 = load i64, ptr %i255, align 8, !dbg !1432
  %add284 = add i64 %174, %175, !dbg !1431
  %add285 = add i64 0, %add284, !dbg !1431
  %lt286 = icmp ult i64 %172, %add285, !dbg !1431
  %sub287 = sub i64 %add285, 1, !dbg !1431
  %176 = call i1 @llvm.expect.i1(i1 %lt286, i1 false), !dbg !1431
  br i1 %176, label %panic288, label %checkok298, !dbg !1431

checkok298:                                       ; preds = %checkok283
  %size299 = sub i64 %add285, 0, !dbg !1429
  %177 = insertvalue %"char[]" undef, ptr %171, 0, !dbg !1429
  %178 = insertvalue %"char[]" %177, i64 %size299, 1, !dbg !1429
  store %"char[]" %178, ptr %0, align 8, !dbg !1429
  ret i64 0, !dbg !1429

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %179 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %180 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr2, align 8
  %181 = load [2 x i64], ptr %taddr2, align 8
  %182 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %182([2 x i64] %179, [2 x i64] %180, [2 x i64] %181, i32 48), !dbg !1332
  unreachable, !dbg !1332

panic44:                                          ; preds = %assert_ok36
  store i64 %63, ptr %taddr45, align 8
  %183 = insertvalue %any undef, ptr %taddr45, 0
  %184 = insertvalue %any %183, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %62, ptr %taddr46, align 8
  %185 = insertvalue %any undef, ptr %taddr46, 0
  %186 = insertvalue %any %185, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr47, align 8
  %187 = load [2 x i64], ptr %taddr47, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr48, align 8
  %188 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr49, align 8
  %189 = load [2 x i64], ptr %taddr49, align 8
  store %any %184, ptr %varargslots, align 8
  %ptradd50 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %186, ptr %ptradd50, align 8
  %190 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %190, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr51, align 8
  %191 = load [2 x i64], ptr %taddr51, align 8
  call void @std.core.builtin.panicf([2 x i64] %187, [2 x i64] %188, [2 x i64] %189, i32 58, [2 x i64] %191), !dbg !1368
  unreachable, !dbg !1368

panic55:                                          ; preds = %checkok52
  store i64 %sub54, ptr %taddr56, align 8
  %192 = insertvalue %any undef, ptr %taddr56, 0
  %193 = insertvalue %any %192, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %63, ptr %taddr57, align 8
  %194 = insertvalue %any undef, ptr %taddr57, 0
  %195 = insertvalue %any %194, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr58, align 8
  %196 = load [2 x i64], ptr %taddr58, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr59, align 8
  %197 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr60, align 8
  %198 = load [2 x i64], ptr %taddr60, align 8
  store %any %193, ptr %varargslots61, align 8
  %ptradd62 = getelementptr inbounds i8, ptr %varargslots61, i64 16
  store %any %195, ptr %ptradd62, align 8
  %199 = insertvalue %"any[]" undef, ptr %varargslots61, 0
  %"$$temp63" = insertvalue %"any[]" %199, i64 2, 1
  store %"any[]" %"$$temp63", ptr %taddr64, align 8
  %200 = load [2 x i64], ptr %taddr64, align 8
  call void @std.core.builtin.panicf([2 x i64] %196, [2 x i64] %197, [2 x i64] %198, i32 58, [2 x i64] %200), !dbg !1368
  unreachable, !dbg !1368

panic79:                                          ; preds = %if.then73
  store i64 %81, ptr %taddr80, align 8
  %201 = insertvalue %any undef, ptr %taddr80, 0
  %202 = insertvalue %any %201, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr81, align 8
  %203 = insertvalue %any undef, ptr %taddr81, 0
  %204 = insertvalue %any %203, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr82, align 8
  %205 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr83, align 8
  %206 = load [2 x i64], ptr %taddr83, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr84, align 8
  %207 = load [2 x i64], ptr %taddr84, align 8
  store %any %202, ptr %varargslots85, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %204, ptr %ptradd86, align 8
  %208 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %208, i64 2, 1
  store %"any[]" %"$$temp87", ptr %taddr88, align 8
  %209 = load [2 x i64], ptr %taddr88, align 8
  call void @std.core.builtin.panicf([2 x i64] %205, [2 x i64] %206, [2 x i64] %207, i32 62, [2 x i64] %209), !dbg !1380
  unreachable, !dbg !1380

panic93:                                          ; preds = %checkok89
  store i64 %sub92, ptr %taddr94, align 8
  %210 = insertvalue %any undef, ptr %taddr94, 0
  %211 = insertvalue %any %210, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %81, ptr %taddr95, align 8
  %212 = insertvalue %any undef, ptr %taddr95, 0
  %213 = insertvalue %any %212, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr96, align 8
  %214 = load [2 x i64], ptr %taddr96, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr97, align 8
  %215 = load [2 x i64], ptr %taddr97, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr98, align 8
  %216 = load [2 x i64], ptr %taddr98, align 8
  store %any %211, ptr %varargslots99, align 8
  %ptradd100 = getelementptr inbounds i8, ptr %varargslots99, i64 16
  store %any %213, ptr %ptradd100, align 8
  %217 = insertvalue %"any[]" undef, ptr %varargslots99, 0
  %"$$temp101" = insertvalue %"any[]" %217, i64 2, 1
  store %"any[]" %"$$temp101", ptr %taddr102, align 8
  %218 = load [2 x i64], ptr %taddr102, align 8
  call void @std.core.builtin.panicf([2 x i64] %214, [2 x i64] %215, [2 x i64] %216, i32 62, [2 x i64] %218), !dbg !1380
  unreachable, !dbg !1380

panic116:                                         ; preds = %if.exit114
  store i64 %95, ptr %taddr117, align 8
  %219 = insertvalue %any undef, ptr %taddr117, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr118, align 8
  %221 = insertvalue %any undef, ptr %taddr118, 0
  %222 = insertvalue %any %221, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr119, align 8
  %223 = load [2 x i64], ptr %taddr119, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr120, align 8
  %224 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr121, align 8
  %225 = load [2 x i64], ptr %taddr121, align 8
  store %any %220, ptr %varargslots122, align 8
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %222, ptr %ptradd123, align 8
  %226 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %226, i64 2, 1
  store %"any[]" %"$$temp124", ptr %taddr125, align 8
  %227 = load [2 x i64], ptr %taddr125, align 8
  call void @std.core.builtin.panicf([2 x i64] %223, [2 x i64] %224, [2 x i64] %225, i32 71, [2 x i64] %227), !dbg !1388
  unreachable, !dbg !1388

panic130:                                         ; preds = %checkok126
  store i64 %102, ptr %taddr131, align 8
  %228 = insertvalue %any undef, ptr %taddr131, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr132, align 8
  %230 = insertvalue %any undef, ptr %taddr132, 0
  %231 = insertvalue %any %230, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr133, align 8
  %232 = load [2 x i64], ptr %taddr133, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr134, align 8
  %233 = load [2 x i64], ptr %taddr134, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr135, align 8
  %234 = load [2 x i64], ptr %taddr135, align 8
  store %any %229, ptr %varargslots136, align 8
  %ptradd137 = getelementptr inbounds i8, ptr %varargslots136, i64 16
  store %any %231, ptr %ptradd137, align 8
  %235 = insertvalue %"any[]" undef, ptr %varargslots136, 0
  %"$$temp138" = insertvalue %"any[]" %235, i64 2, 1
  store %"any[]" %"$$temp138", ptr %taddr139, align 8
  %236 = load [2 x i64], ptr %taddr139, align 8
  call void @std.core.builtin.panicf([2 x i64] %232, [2 x i64] %233, [2 x i64] %234, i32 71, [2 x i64] %236), !dbg !1390
  unreachable, !dbg !1390

panic144:                                         ; preds = %checkok140
  store i64 %sub143, ptr %taddr145, align 8
  %237 = insertvalue %any undef, ptr %taddr145, 0
  %238 = insertvalue %any %237, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %102, ptr %taddr146, align 8
  %239 = insertvalue %any undef, ptr %taddr146, 0
  %240 = insertvalue %any %239, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr147, align 8
  %241 = load [2 x i64], ptr %taddr147, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr148, align 8
  %242 = load [2 x i64], ptr %taddr148, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr149, align 8
  %243 = load [2 x i64], ptr %taddr149, align 8
  store %any %238, ptr %varargslots150, align 8
  %ptradd151 = getelementptr inbounds i8, ptr %varargslots150, i64 16
  store %any %240, ptr %ptradd151, align 8
  %244 = insertvalue %"any[]" undef, ptr %varargslots150, 0
  %"$$temp152" = insertvalue %"any[]" %244, i64 2, 1
  store %"any[]" %"$$temp152", ptr %taddr153, align 8
  %245 = load [2 x i64], ptr %taddr153, align 8
  call void @std.core.builtin.panicf([2 x i64] %241, [2 x i64] %242, [2 x i64] %243, i32 71, [2 x i64] %245), !dbg !1390
  unreachable, !dbg !1390

panic157:                                         ; preds = %checkok154
  store i64 %111, ptr %taddr158, align 8
  %246 = insertvalue %any undef, ptr %taddr158, 0
  %247 = insertvalue %any %246, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %110, ptr %taddr159, align 8
  %248 = insertvalue %any undef, ptr %taddr159, 0
  %249 = insertvalue %any %248, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr160, align 8
  %250 = load [2 x i64], ptr %taddr160, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr161, align 8
  %251 = load [2 x i64], ptr %taddr161, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr162, align 8
  %252 = load [2 x i64], ptr %taddr162, align 8
  store %any %247, ptr %varargslots163, align 8
  %ptradd164 = getelementptr inbounds i8, ptr %varargslots163, i64 16
  store %any %249, ptr %ptradd164, align 8
  %253 = insertvalue %"any[]" undef, ptr %varargslots163, 0
  %"$$temp165" = insertvalue %"any[]" %253, i64 2, 1
  store %"any[]" %"$$temp165", ptr %taddr166, align 8
  %254 = load [2 x i64], ptr %taddr166, align 8
  call void @std.core.builtin.panicf([2 x i64] %250, [2 x i64] %251, [2 x i64] %252, i32 71, [2 x i64] %254), !dbg !1390
  unreachable, !dbg !1390

panic171:                                         ; preds = %checkok167
  store i64 %119, ptr %taddr172, align 8
  %255 = insertvalue %any undef, ptr %taddr172, 0
  %256 = insertvalue %any %255, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %118, ptr %taddr173, align 8
  %257 = insertvalue %any undef, ptr %taddr173, 0
  %258 = insertvalue %any %257, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr174, align 8
  %259 = load [2 x i64], ptr %taddr174, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr175, align 8
  %260 = load [2 x i64], ptr %taddr175, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr176, align 8
  %261 = load [2 x i64], ptr %taddr176, align 8
  store %any %256, ptr %varargslots177, align 8
  %ptradd178 = getelementptr inbounds i8, ptr %varargslots177, i64 16
  store %any %258, ptr %ptradd178, align 8
  %262 = insertvalue %"any[]" undef, ptr %varargslots177, 0
  %"$$temp179" = insertvalue %"any[]" %262, i64 2, 1
  store %"any[]" %"$$temp179", ptr %taddr180, align 8
  %263 = load [2 x i64], ptr %taddr180, align 8
  call void @std.core.builtin.panicf([2 x i64] %259, [2 x i64] %260, [2 x i64] %261, i32 74, [2 x i64] %263), !dbg !1395
  unreachable, !dbg !1395

panic229:                                         ; preds = %noerr_block225
  store i64 %152, ptr %taddr230, align 8
  %264 = insertvalue %any undef, ptr %taddr230, 0
  %265 = insertvalue %any %264, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr231, align 8
  %266 = insertvalue %any undef, ptr %taddr231, 0
  %267 = insertvalue %any %266, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr232, align 8
  %268 = load [2 x i64], ptr %taddr232, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr233, align 8
  %269 = load [2 x i64], ptr %taddr233, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr234, align 8
  %270 = load [2 x i64], ptr %taddr234, align 8
  store %any %265, ptr %varargslots235, align 8
  %ptradd236 = getelementptr inbounds i8, ptr %varargslots235, i64 16
  store %any %267, ptr %ptradd236, align 8
  %271 = insertvalue %"any[]" undef, ptr %varargslots235, 0
  %"$$temp237" = insertvalue %"any[]" %271, i64 2, 1
  store %"any[]" %"$$temp237", ptr %taddr238, align 8
  %272 = load [2 x i64], ptr %taddr238, align 8
  call void @std.core.builtin.panicf([2 x i64] %268, [2 x i64] %269, [2 x i64] %270, i32 78, [2 x i64] %272), !dbg !1417
  unreachable, !dbg !1417

panic243:                                         ; preds = %checkok239
  store i64 %sub242, ptr %taddr244, align 8
  %273 = insertvalue %any undef, ptr %taddr244, 0
  %274 = insertvalue %any %273, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %152, ptr %taddr245, align 8
  %275 = insertvalue %any undef, ptr %taddr245, 0
  %276 = insertvalue %any %275, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr246, align 8
  %277 = load [2 x i64], ptr %taddr246, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr247, align 8
  %278 = load [2 x i64], ptr %taddr247, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr248, align 8
  %279 = load [2 x i64], ptr %taddr248, align 8
  store %any %274, ptr %varargslots249, align 8
  %ptradd250 = getelementptr inbounds i8, ptr %varargslots249, i64 16
  store %any %276, ptr %ptradd250, align 8
  %280 = insertvalue %"any[]" undef, ptr %varargslots249, 0
  %"$$temp251" = insertvalue %"any[]" %280, i64 2, 1
  store %"any[]" %"$$temp251", ptr %taddr252, align 8
  %281 = load [2 x i64], ptr %taddr252, align 8
  call void @std.core.builtin.panicf([2 x i64] %277, [2 x i64] %278, [2 x i64] %279, i32 78, [2 x i64] %281), !dbg !1417
  unreachable, !dbg !1417

panic273:                                         ; preds = %noerr_block265
  store i64 %172, ptr %taddr274, align 8
  %282 = insertvalue %any undef, ptr %taddr274, 0
  %283 = insertvalue %any %282, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr275, align 8
  %284 = insertvalue %any undef, ptr %taddr275, 0
  %285 = insertvalue %any %284, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr276, align 8
  %286 = load [2 x i64], ptr %taddr276, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr277, align 8
  %287 = load [2 x i64], ptr %taddr277, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr278, align 8
  %288 = load [2 x i64], ptr %taddr278, align 8
  store %any %283, ptr %varargslots279, align 8
  %ptradd280 = getelementptr inbounds i8, ptr %varargslots279, i64 16
  store %any %285, ptr %ptradd280, align 8
  %289 = insertvalue %"any[]" undef, ptr %varargslots279, 0
  %"$$temp281" = insertvalue %"any[]" %289, i64 2, 1
  store %"any[]" %"$$temp281", ptr %taddr282, align 8
  %290 = load [2 x i64], ptr %taddr282, align 8
  call void @std.core.builtin.panicf([2 x i64] %286, [2 x i64] %287, [2 x i64] %288, i32 82, [2 x i64] %290), !dbg !1429
  unreachable, !dbg !1429

panic288:                                         ; preds = %checkok283
  store i64 %sub287, ptr %taddr289, align 8
  %291 = insertvalue %any undef, ptr %taddr289, 0
  %292 = insertvalue %any %291, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %172, ptr %taddr290, align 8
  %293 = insertvalue %any undef, ptr %taddr290, 0
  %294 = insertvalue %any %293, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr291, align 8
  %295 = load [2 x i64], ptr %taddr291, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr292, align 8
  %296 = load [2 x i64], ptr %taddr292, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr293, align 8
  %297 = load [2 x i64], ptr %taddr293, align 8
  store %any %292, ptr %varargslots294, align 8
  %ptradd295 = getelementptr inbounds i8, ptr %varargslots294, i64 16
  store %any %294, ptr %ptradd295, align 8
  %298 = insertvalue %"any[]" undef, ptr %varargslots294, 0
  %"$$temp296" = insertvalue %"any[]" %298, i64 2, 1
  store %"any[]" %"$$temp296", ptr %taddr297, align 8
  %299 = load [2 x i64], ptr %taddr297, align 8
  call void @std.core.builtin.panicf([2 x i64] %295, [2 x i64] %296, [2 x i64] %297, i32 82, [2 x i64] %299), !dbg !1429
  unreachable, !dbg !1429
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Scanner.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1433 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %x = alloca i64, align 8
  %.anon = alloca i64, align 8
  %a = alloca i64, align 8
  %b = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 8
  %taddr30 = alloca %"any[]", align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 8
  %taddr57 = alloca %"any[]", align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca %"char[]", align 8
  %taddr64 = alloca %"char[]", align 8
  %taddr65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 8
  %taddr69 = alloca %"any[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 8
  %taddr83 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr89 = alloca %"char[]", align 8
  %taddr90 = alloca %"char[]", align 8
  %taddr91 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1436
  %3 = icmp eq ptr %1, null, !dbg !1436
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1436
  br i1 %4, label %panic, label %checkok, !dbg !1436

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1437, metadata !DIExpression()), !dbg !1438
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1439, metadata !DIExpression()), !dbg !1440
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1441, metadata !DIExpression()), !dbg !1442
  store i64 0, ptr %n, align 8, !dbg !1442
  %5 = load ptr, ptr %self, align 8, !dbg !1443
  %ptradd = getelementptr inbounds i8, ptr %5, i64 32, !dbg !1443
  %6 = load i64, ptr %ptradd, align 8, !dbg !1443
  %7 = load ptr, ptr %self, align 8, !dbg !1444
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 40, !dbg !1444
  %8 = load i64, ptr %ptradd3, align 8, !dbg !1444
  %lt = icmp ult i64 %6, %8, !dbg !1443
  br i1 %lt, label %if.then, label %if.exit, !dbg !1443

if.then:                                          ; preds = %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1445
  %9 = load i64, ptr %ptradd4, align 8
  store i64 %9, ptr %x, align 8
  %10 = load ptr, ptr %self, align 8, !dbg !1447
  %ptradd5 = getelementptr inbounds i8, ptr %10, i64 40, !dbg !1447
  %11 = load i64, ptr %ptradd5, align 8, !dbg !1447
  %12 = load ptr, ptr %self, align 8, !dbg !1448
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 32, !dbg !1448
  %13 = load i64, ptr %ptradd6, align 8, !dbg !1448
  %sub = sub i64 %11, %13, !dbg !1447
  store i64 %sub, ptr %.anon, align 8
  %14 = load i64, ptr %x, align 8
  store i64 %14, ptr %a, align 8
  %15 = load i64, ptr %.anon, align 8
  store i64 %15, ptr %b, align 8
  %16 = load i64, ptr %a, align 8, !dbg !1449
  %17 = load i64, ptr %b, align 8, !dbg !1454
  %lt7 = icmp ult i64 %16, %17, !dbg !1449
  br i1 %lt7, label %cond.lhs, label %cond.rhs, !dbg !1449

cond.lhs:                                         ; preds = %if.then
  %18 = load i64, ptr %x, align 8, !dbg !1455
  br label %cond.phi, !dbg !1455

cond.rhs:                                         ; preds = %if.then
  %19 = load i64, ptr %.anon, align 8, !dbg !1456
  br label %cond.phi, !dbg !1456

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %18, %cond.lhs ], [ %19, %cond.rhs ], !dbg !1456
  store i64 %val, ptr %n, align 8, !dbg !1456
  %20 = load ptr, ptr %self, align 8, !dbg !1457
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !1457
  %21 = load %"char[]", ptr %ptradd8, align 8, !dbg !1457
  %22 = extractvalue %"char[]" %21, 0, !dbg !1457
  %23 = load ptr, ptr %self, align 8, !dbg !1458
  %ptradd9 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1458
  %24 = load i64, ptr %ptradd9, align 8, !dbg !1458
  %25 = extractvalue %"char[]" %21, 1, !dbg !1458
  %gt = icmp ugt i64 %24, %25, !dbg !1458
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1458
  br i1 %26, label %panic10, label %checkok18, !dbg !1458

checkok18:                                        ; preds = %cond.phi
  %27 = load i64, ptr %n, align 8, !dbg !1459
  %add = add i64 %24, %27, !dbg !1459
  %lt19 = icmp ult i64 %25, %add, !dbg !1459
  %sub20 = sub i64 %add, 1, !dbg !1459
  %28 = call i1 @llvm.expect.i1(i1 %lt19, i1 false), !dbg !1459
  br i1 %28, label %panic21, label %checkok31, !dbg !1459

checkok31:                                        ; preds = %checkok18
  %size = sub i64 %add, %24, !dbg !1457
  %ptradd32 = getelementptr inbounds i8, ptr %22, i64 %24, !dbg !1457
  %29 = insertvalue %"char[]" undef, ptr %ptradd32, 0, !dbg !1457
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !1457
  %31 = load %"char[]", ptr %bytes, align 8, !dbg !1460
  %32 = extractvalue %"char[]" %31, 0, !dbg !1460
  %33 = extractvalue %"char[]" %31, 1, !dbg !1461
  %gt33 = icmp ugt i64 0, %33, !dbg !1461
  %34 = call i1 @llvm.expect.i1(i1 %gt33, i1 false), !dbg !1461
  br i1 %34, label %panic34, label %checkok44, !dbg !1461

checkok44:                                        ; preds = %checkok31
  %35 = load i64, ptr %n, align 8, !dbg !1462
  %add45 = add i64 0, %35, !dbg !1462
  %lt46 = icmp ult i64 %33, %add45, !dbg !1462
  %sub47 = sub i64 %add45, 1, !dbg !1462
  %36 = call i1 @llvm.expect.i1(i1 %lt46, i1 false), !dbg !1462
  br i1 %36, label %panic48, label %checkok58, !dbg !1462

checkok58:                                        ; preds = %checkok44
  %size59 = sub i64 %add45, 0, !dbg !1460
  %37 = insertvalue %"char[]" undef, ptr %32, 0, !dbg !1460
  %38 = insertvalue %"char[]" %37, i64 %size59, 1, !dbg !1460
  %39 = extractvalue %"char[]" %38, 0, !dbg !1460
  %40 = extractvalue %"char[]" %30, 0, !dbg !1460
  %41 = extractvalue %"char[]" %30, 1, !dbg !1460
  %42 = extractvalue %"char[]" %38, 1, !dbg !1460
  %neq = icmp ne i64 %42, %41, !dbg !1460
  %43 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1460
  br i1 %43, label %panic60, label %checkok70, !dbg !1460

checkok70:                                        ; preds = %checkok58
  %44 = mul i64 %41, 1, !dbg !1460
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %39, ptr align 1 %40, i64 %44, i1 false), !dbg !1460
  %45 = load ptr, ptr %self, align 8, !dbg !1463
  %ptradd71 = getelementptr inbounds i8, ptr %45, i64 32, !dbg !1463
  %46 = load i64, ptr %ptradd71, align 8, !dbg !1463
  %47 = load i64, ptr %n, align 8, !dbg !1464
  %add72 = add i64 %46, %47, !dbg !1463
  store i64 %add72, ptr %ptradd71, align 8, !dbg !1463
  %48 = load %"char[]", ptr %bytes, align 8, !dbg !1465
  %49 = extractvalue %"char[]" %48, 0, !dbg !1465
  %50 = load i64, ptr %n, align 8, !dbg !1466
  %51 = extractvalue %"char[]" %48, 1, !dbg !1466
  %gt73 = icmp ugt i64 %50, %51, !dbg !1466
  %52 = call i1 @llvm.expect.i1(i1 %gt73, i1 false), !dbg !1466
  br i1 %52, label %panic74, label %checkok84, !dbg !1466

checkok84:                                        ; preds = %checkok70
  %size85 = sub i64 %51, %50, !dbg !1465
  %ptradd86 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !1465
  %53 = insertvalue %"char[]" undef, ptr %ptradd86, 0, !dbg !1465
  %54 = insertvalue %"char[]" %53, i64 %size85, 1, !dbg !1465
  store %"char[]" %54, ptr %bytes, align 8, !dbg !1465
  br label %if.exit, !dbg !1465

if.exit:                                          ; preds = %checkok84, %checkok
  %55 = load i64, ptr %n, align 8, !dbg !1467
  %56 = load ptr, ptr %self, align 8, !dbg !1468
  %ptradd87 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !1469
  %57 = load i64, ptr %ptradd87, align 8, !dbg !1469
  %58 = inttoptr i64 %57 to ptr, !dbg !1469
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1436
  %59 = icmp eq ptr %58, %type, !dbg !1436
  br i1 %59, label %cache_hit, label %cache_miss, !dbg !1436

cache_miss:                                       ; preds = %if.exit
  %ptradd88 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !1436
  %60 = load ptr, ptr %ptradd88, align 8, !dbg !1436
  %61 = call ptr @.dyn_search(ptr %60, ptr @"$sel.read"), !dbg !1436
  store ptr %61, ptr %.inlinecache, align 8, !dbg !1436
  store ptr %58, ptr %.cachedtype, align 8, !dbg !1436
  br label %62, !dbg !1436

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1436
  br label %62, !dbg !1436

62:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %61, %cache_miss ], !dbg !1436
  %63 = icmp eq ptr %fn_phi, null, !dbg !1436
  br i1 %63, label %missing_function, label %match, !dbg !1436

missing_function:                                 ; preds = %62
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr89, align 8
  %64 = load [2 x i64], ptr %taddr89, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr90, align 8
  %65 = load [2 x i64], ptr %taddr90, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr91, align 8
  %66 = load [2 x i64], ptr %taddr91, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67([2 x i64] %64, [2 x i64] %65, [2 x i64] %66, i32 113), !dbg !1468
  unreachable, !dbg !1468

match:                                            ; preds = %62
  %68 = load ptr, ptr %56, align 8
  %69 = load [2 x i64], ptr %bytes, align 8
  %70 = call i64 %fn_phi(ptr %retparam, ptr %68, [2 x i64] %69), !dbg !1468
  %not_err = icmp eq i64 %70, 0, !dbg !1468
  %71 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1468
  br i1 %71, label %after_check, label %assign_optional, !dbg !1468

assign_optional:                                  ; preds = %match
  store i64 %70, ptr %error_var, align 8, !dbg !1468
  br label %guard_block, !dbg !1468

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1468

guard_block:                                      ; preds = %assign_optional
  %72 = load i64, ptr %error_var, align 8, !dbg !1468
  ret i64 %72, !dbg !1468

noerr_block:                                      ; preds = %after_check
  %73 = load i64, ptr %retparam, align 8, !dbg !1468
  %add92 = add i64 %55, %73, !dbg !1467
  store i64 %add92, ptr %n, align 8, !dbg !1467
  %74 = load i64, ptr %n, align 8, !dbg !1470
  store i64 %74, ptr %0, align 8, !dbg !1470
  ret i64 0, !dbg !1470

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %75 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %76 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %77 = load [2 x i64], ptr %taddr2, align 8
  %78 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %78([2 x i64] %75, [2 x i64] %76, [2 x i64] %77, i32 103), !dbg !1438
  unreachable, !dbg !1438

panic10:                                          ; preds = %cond.phi
  store i64 %25, ptr %taddr11, align 8
  %79 = insertvalue %any undef, ptr %taddr11, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %24, ptr %taddr12, align 8
  %81 = insertvalue %any undef, ptr %taddr12, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr13, align 8
  %83 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr14, align 8
  %84 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr15, align 8
  %85 = load [2 x i64], ptr %taddr15, align 8
  store %any %80, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %82, ptr %ptradd16, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %87 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 109, [2 x i64] %87), !dbg !1457
  unreachable, !dbg !1457

panic21:                                          ; preds = %checkok18
  store i64 %sub20, ptr %taddr22, align 8
  %88 = insertvalue %any undef, ptr %taddr22, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr23, align 8
  %90 = insertvalue %any undef, ptr %taddr23, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr24, align 8
  %92 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr25, align 8
  %93 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr26, align 8
  %94 = load [2 x i64], ptr %taddr26, align 8
  store %any %89, ptr %varargslots27, align 8
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %91, ptr %ptradd28, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp29", ptr %taddr30, align 8
  %96 = load [2 x i64], ptr %taddr30, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 109, [2 x i64] %96), !dbg !1457
  unreachable, !dbg !1457

panic34:                                          ; preds = %checkok31
  store i64 %33, ptr %taddr35, align 8
  %97 = insertvalue %any undef, ptr %taddr35, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr36, align 8
  %99 = insertvalue %any undef, ptr %taddr36, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr37, align 8
  %101 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr38, align 8
  %102 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr39, align 8
  %103 = load [2 x i64], ptr %taddr39, align 8
  store %any %98, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %100, ptr %ptradd41, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %105 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 109, [2 x i64] %105), !dbg !1460
  unreachable, !dbg !1460

panic48:                                          ; preds = %checkok44
  store i64 %sub47, ptr %taddr49, align 8
  %106 = insertvalue %any undef, ptr %taddr49, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr50, align 8
  %108 = insertvalue %any undef, ptr %taddr50, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr51, align 8
  %110 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr52, align 8
  %111 = load [2 x i64], ptr %taddr52, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr53, align 8
  %112 = load [2 x i64], ptr %taddr53, align 8
  store %any %107, ptr %varargslots54, align 8
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %109, ptr %ptradd55, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp56", ptr %taddr57, align 8
  %114 = load [2 x i64], ptr %taddr57, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 109, [2 x i64] %114), !dbg !1460
  unreachable, !dbg !1460

panic60:                                          ; preds = %checkok58
  store i64 %42, ptr %taddr61, align 8
  %115 = insertvalue %any undef, ptr %taddr61, 0
  %116 = insertvalue %any %115, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr62, align 8
  %117 = insertvalue %any undef, ptr %taddr62, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr63, align 8
  %119 = load [2 x i64], ptr %taddr63, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr64, align 8
  %120 = load [2 x i64], ptr %taddr64, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr65, align 8
  %121 = load [2 x i64], ptr %taddr65, align 8
  store %any %116, ptr %varargslots66, align 8
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %118, ptr %ptradd67, align 8
  %122 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %122, i64 2, 1
  store %"any[]" %"$$temp68", ptr %taddr69, align 8
  %123 = load [2 x i64], ptr %taddr69, align 8
  call void @std.core.builtin.panicf([2 x i64] %119, [2 x i64] %120, [2 x i64] %121, i32 109, [2 x i64] %123), !dbg !1460
  unreachable, !dbg !1460

panic74:                                          ; preds = %checkok70
  store i64 %51, ptr %taddr75, align 8
  %124 = insertvalue %any undef, ptr %taddr75, 0
  %125 = insertvalue %any %124, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr76, align 8
  %126 = insertvalue %any undef, ptr %taddr76, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr77, align 8
  %128 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr78, align 8
  %129 = load [2 x i64], ptr %taddr78, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr79, align 8
  %130 = load [2 x i64], ptr %taddr79, align 8
  store %any %125, ptr %varargslots80, align 8
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %127, ptr %ptradd81, align 8
  %131 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %131, i64 2, 1
  store %"any[]" %"$$temp82", ptr %taddr83, align 8
  %132 = load [2 x i64], ptr %taddr83, align 8
  call void @std.core.builtin.panicf([2 x i64] %128, [2 x i64] %129, [2 x i64] %130, i32 111, [2 x i64] %132), !dbg !1465
  unreachable, !dbg !1465
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Scanner.read_byte(ptr %0, ptr %1) #0 !dbg !1471 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr14 = alloca %"any[]", align 8
  %reterr17 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  store ptr null, ptr %.cachedtype, align 8, !dbg !1474
  %2 = icmp eq ptr %1, null, !dbg !1474
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1474
  br i1 %3, label %panic, label %checkok, !dbg !1474

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1475, metadata !DIExpression()), !dbg !1476
  %4 = load ptr, ptr %self, align 8, !dbg !1477
  %ptradd = getelementptr inbounds i8, ptr %4, i64 32, !dbg !1477
  %5 = load i64, ptr %ptradd, align 8, !dbg !1477
  %6 = load ptr, ptr %self, align 8, !dbg !1478
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 40, !dbg !1478
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1478
  %lt = icmp ult i64 %5, %7, !dbg !1477
  br i1 %lt, label %if.then, label %if.exit, !dbg !1477

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !1479
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !1479
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 8, !dbg !1479
  %9 = load i64, ptr %ptradd5, align 8, !dbg !1479
  %10 = load ptr, ptr %ptradd4, align 8, !dbg !1479
  %11 = load ptr, ptr %self, align 8, !dbg !1481
  %ptradd6 = getelementptr inbounds i8, ptr %11, i64 32, !dbg !1481
  %12 = load i64, ptr %ptradd6, align 8, !dbg !1481
  %add = add i64 %12, 1, !dbg !1481
  store i64 %add, ptr %ptradd6, align 8, !dbg !1481
  %ge = icmp uge i64 %12, %9, !dbg !1481
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1481
  br i1 %13, label %panic7, label %checkok15, !dbg !1481

checkok15:                                        ; preds = %if.then
  %ptradd16 = getelementptr inbounds i8, ptr %10, i64 %12, !dbg !1481
  %14 = load i8, ptr %ptradd16, align 1, !dbg !1481
  store i8 %14, ptr %0, align 1, !dbg !1481
  ret i64 0, !dbg !1481

if.exit:                                          ; preds = %checkok
  %15 = load ptr, ptr %self, align 8, !dbg !1482
  %ptradd18 = getelementptr inbounds i8, ptr %15, i64 8, !dbg !1482
  %16 = load i64, ptr %ptradd18, align 8, !dbg !1482
  %17 = inttoptr i64 %16 to ptr, !dbg !1482
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1474
  %18 = icmp eq ptr %17, %type, !dbg !1474
  br i1 %18, label %cache_hit, label %cache_miss, !dbg !1474

cache_miss:                                       ; preds = %if.exit
  %ptradd19 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1474
  %19 = load ptr, ptr %ptradd19, align 8, !dbg !1474
  %20 = call ptr @.dyn_search(ptr %19, ptr @"$sel.read_byte"), !dbg !1474
  store ptr %20, ptr %.inlinecache, align 8, !dbg !1474
  store ptr %17, ptr %.cachedtype, align 8, !dbg !1474
  br label %21, !dbg !1474

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1474
  br label %21, !dbg !1474

21:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %20, %cache_miss ], !dbg !1474
  %22 = icmp eq ptr %fn_phi, null, !dbg !1474
  br i1 %22, label %missing_function, label %match, !dbg !1474

missing_function:                                 ; preds = %21
  store %"char[]" { ptr @.panic_msg.44, i64 46 }, ptr %taddr20, align 8
  %23 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr21, align 8
  %24 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr22, align 8
  %25 = load [2 x i64], ptr %taddr22, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 123), !dbg !1482
  unreachable, !dbg !1482

match:                                            ; preds = %21
  %27 = load ptr, ptr %15, align 8
  %28 = call i64 %fn_phi(ptr %retparam, ptr %27), !dbg !1482
  %not_err = icmp eq i64 %28, 0, !dbg !1482
  %29 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1482
  br i1 %29, label %after_check, label %assign_optional, !dbg !1482

assign_optional:                                  ; preds = %match
  store i64 %28, ptr %reterr17, align 8, !dbg !1482
  br label %err_retblock, !dbg !1482

after_check:                                      ; preds = %match
  %30 = load i8, ptr %retparam, align 1, !dbg !1482
  store i8 %30, ptr %0, align 1, !dbg !1482
  ret i64 0, !dbg !1482

err_retblock:                                     ; preds = %assign_optional
  %31 = load i64, ptr %reterr17, align 8, !dbg !1482
  ret i64 %31, !dbg !1482

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %32 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr1, align 8
  %33 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %34 = load [2 x i64], ptr %taddr2, align 8
  %35 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %35([2 x i64] %32, [2 x i64] %33, [2 x i64] %34, i32 117), !dbg !1476
  unreachable, !dbg !1476

panic7:                                           ; preds = %if.then
  store i64 %9, ptr %taddr8, align 8
  %36 = insertvalue %any undef, ptr %taddr8, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr9, align 8
  %38 = insertvalue %any undef, ptr %taddr9, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr10, align 8
  %40 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.91, i64 10 }, ptr %taddr11, align 8
  %41 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr12, align 8
  %42 = load [2 x i64], ptr %taddr12, align 8
  store %any %37, ptr %varargslots, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %39, ptr %ptradd13, align 8
  %43 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %43, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr14, align 8
  %44 = load [2 x i64], ptr %taddr14, align 8
  call void @std.core.builtin.panicf([2 x i64] %40, [2 x i64] %41, [2 x i64] %42, i32 121, [2 x i64] %44), !dbg !1481
  unreachable, !dbg !1481
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.MultiWriter.new_init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !1483 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %writers = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %copy = alloca %"any[]", align 8
  %allocator12 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator14 = alloca %any, align 8
  %elements15 = alloca i64, align 8
  %allocator16 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr22 = alloca ptr, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr27 = alloca %"any[]", align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr46 = alloca %"char[]", align 8
  %varargslots47 = alloca [2 x %any], align 8
  %taddr50 = alloca %"any[]", align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca i64, align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %varargslots59 = alloca [2 x %any], align 8
  %taddr62 = alloca %"any[]", align 8
  %taddr65 = alloca %"char[]", align 8
  %taddr66 = alloca %"char[]", align 8
  %taddr67 = alloca %"char[]", align 8
  %.assign_list = alloca %MultiWriter, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1497
  %3 = icmp eq ptr %0, null, !dbg !1497
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1497
  br i1 %4, label %panic, label %checkok, !dbg !1497

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1498, metadata !DIExpression()), !dbg !1499
  store [2 x i64] %1, ptr %writers, align 8
  call void @llvm.dbg.declare(metadata ptr %writers, metadata !1500, metadata !DIExpression()), !dbg !1501
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !1502, metadata !DIExpression()), !dbg !1503
  %ptradd = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1504
  %5 = load i64, ptr %ptradd, align 8, !dbg !1504
  %lt = icmp ult i64 0, %5, !dbg !1504
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1504

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 15), !dbg !1504
  unreachable, !dbg !1504

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !1506
  %ptradd6 = getelementptr inbounds i8, ptr %10, i64 8, !dbg !1506
  %11 = load i64, ptr %ptradd6, align 8, !dbg !1506
  %eq = icmp eq i64 0, %11, !dbg !1506
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !1506

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.99, i64 90 }, ptr %taddr8, align 8
  %12 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr9, align 8
  %13 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr10, align 8
  %14 = load [2 x i64], ptr %taddr10, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 16), !dbg !1506
  unreachable, !dbg !1506

assert_ok11:                                      ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !1507, metadata !DIExpression()), !dbg !1508
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator12, ptr align 8 %allocator, i32 16, i1 false)
  %ptradd13 = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1509
  %16 = load i64, ptr %ptradd13, align 8
  store i64 %16, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator14, ptr align 8 %allocator12, i32 16, i1 false)
  %17 = load i64, ptr %elements, align 8
  store i64 %17, ptr %elements15, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator16, ptr align 8 %allocator14, i32 16, i1 false)
  %18 = load i64, ptr %elements15, align 8, !dbg !1510
  %mul = mul i64 16, %18, !dbg !1515
  store i64 %mul, ptr %size, align 8
  %19 = load i64, ptr %size, align 8, !dbg !1516
  %i2nb = icmp eq i64 %19, 0, !dbg !1516
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1516

if.then:                                          ; preds = %assert_ok11
  store ptr null, ptr %blockret, align 8, !dbg !1519
  br label %expr_block.exit, !dbg !1519

if.exit:                                          ; preds = %assert_ok11
  %ptradd17 = getelementptr inbounds i8, ptr %allocator16, i64 8, !dbg !1520
  %20 = load i64, ptr %ptradd17, align 8, !dbg !1520
  %21 = inttoptr i64 %20 to ptr, !dbg !1520
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1497
  %22 = icmp eq ptr %21, %type, !dbg !1497
  br i1 %22, label %cache_hit, label %cache_miss, !dbg !1497

cache_miss:                                       ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1497
  %23 = load ptr, ptr %ptradd18, align 8, !dbg !1497
  %24 = call ptr @.dyn_search(ptr %23, ptr @"$sel.acquire"), !dbg !1497
  store ptr %24, ptr %.inlinecache, align 8, !dbg !1497
  store ptr %21, ptr %.cachedtype, align 8, !dbg !1497
  br label %25, !dbg !1497

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1497
  br label %25, !dbg !1497

25:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %24, %cache_miss ], !dbg !1497
  %26 = icmp eq ptr %fn_phi, null, !dbg !1497
  br i1 %26, label %missing_function, label %match, !dbg !1497

missing_function:                                 ; preds = %25
  store %"char[]" { ptr @.panic_msg.58, i64 44 }, ptr %taddr19, align 8
  %27 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr20, align 8
  %28 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr21, align 8
  %29 = load [2 x i64], ptr %taddr21, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 80), !dbg !1522
  unreachable, !dbg !1522

match:                                            ; preds = %25
  %31 = load ptr, ptr %allocator16, align 8
  %32 = load i64, ptr %size, align 8
  %33 = call i64 %fn_phi(ptr %retparam, ptr %31, i64 %32, i32 1, i64 0), !dbg !1522
  %not_err = icmp eq i64 %33, 0, !dbg !1522
  %34 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1522
  br i1 %34, label %after_check, label %assign_optional, !dbg !1522

assign_optional:                                  ; preds = %match
  store i64 %33, ptr %error_var, align 8, !dbg !1522
  br label %panic_block, !dbg !1522

after_check:                                      ; preds = %match
  %35 = load ptr, ptr %retparam, align 8, !dbg !1522
  store ptr %35, ptr %blockret, align 8, !dbg !1522
  br label %expr_block.exit, !dbg !1522

expr_block.exit:                                  ; preds = %after_check, %if.then
  %36 = load ptr, ptr %blockret, align 8, !dbg !1522
  store ptr %36, ptr %taddr22, align 8
  %37 = load ptr, ptr %taddr22, align 8
  %38 = load i64, ptr %elements15, align 8, !dbg !1523
  %add = add i64 0, %38, !dbg !1523
  %size23 = sub i64 %add, 0, !dbg !1523
  %39 = insertvalue %"any[]" undef, ptr %37, 0, !dbg !1523
  %40 = insertvalue %"any[]" %39, i64 %size23, 1, !dbg !1523
  br label %noerr_block, !dbg !1523

panic_block:                                      ; preds = %assign_optional
  %41 = insertvalue %any undef, ptr %error_var, 0, !dbg !1523
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !1523
  store %"char[]" { ptr @.panic_msg.90, i64 36 }, ptr %taddr24, align 8
  %43 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr25, align 8
  %44 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr26, align 8
  %45 = load [2 x i64], ptr %taddr26, align 8
  store %any %42, ptr %varargslots, align 8
  %46 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %46, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr27, align 8
  %47 = load [2 x i64], ptr %taddr27, align 8
  call void @std.core.builtin.panicf([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 244, [2 x i64] %47), !dbg !1512
  unreachable, !dbg !1512

noerr_block:                                      ; preds = %expr_block.exit
  store %"any[]" %40, ptr %copy, align 8, !dbg !1512
  %48 = load %"any[]", ptr %writers, align 8, !dbg !1524
  %49 = extractvalue %"any[]" %48, 0, !dbg !1524
  %50 = extractvalue %"any[]" %48, 1, !dbg !1525
  %gt = icmp ugt i64 0, %50, !dbg !1525
  %51 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1525
  br i1 %51, label %panic28, label %checkok38, !dbg !1525

checkok38:                                        ; preds = %noerr_block
  %size39 = sub i64 %50, 0, !dbg !1524
  %52 = insertvalue %"any[]" undef, ptr %49, 0, !dbg !1524
  %53 = insertvalue %"any[]" %52, i64 %size39, 1, !dbg !1524
  %54 = load %"any[]", ptr %copy, align 8, !dbg !1526
  %55 = extractvalue %"any[]" %54, 0, !dbg !1526
  %56 = extractvalue %"any[]" %54, 1, !dbg !1527
  %gt40 = icmp ugt i64 0, %56, !dbg !1527
  %57 = call i1 @llvm.expect.i1(i1 %gt40, i1 false), !dbg !1527
  br i1 %57, label %panic41, label %checkok51, !dbg !1527

checkok51:                                        ; preds = %checkok38
  %size52 = sub i64 %56, 0, !dbg !1526
  %58 = insertvalue %"any[]" undef, ptr %55, 0, !dbg !1526
  %59 = insertvalue %"any[]" %58, i64 %size52, 1, !dbg !1526
  %60 = extractvalue %"any[]" %59, 0, !dbg !1526
  %61 = extractvalue %"any[]" %53, 0, !dbg !1526
  %62 = extractvalue %"any[]" %53, 1, !dbg !1526
  %63 = extractvalue %"any[]" %59, 1, !dbg !1526
  %neq = icmp ne i64 %63, %62, !dbg !1526
  %64 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1526
  br i1 %64, label %panic53, label %checkok63, !dbg !1526

checkok63:                                        ; preds = %checkok51
  %65 = mul i64 %62, 16, !dbg !1526
  call void @llvm.memmove.p0.p0.i64(ptr align 8 %60, ptr align 8 %61, i64 %65, i1 false), !dbg !1526
  %66 = load ptr, ptr %self, align 8, !dbg !1528
  %checknull = icmp eq ptr %66, null, !dbg !1528
  %67 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1528
  br i1 %67, label %panic64, label %checkok68, !dbg !1528

checkok68:                                        ; preds = %checkok63
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 32, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %copy, i32 16, i1 false), !dbg !1529
  %ptradd69 = getelementptr inbounds i8, ptr %.assign_list, i64 16, !dbg !1529
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd69, ptr align 8 %allocator, i32 16, i1 false), !dbg !1530
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %66, ptr align 8 %.assign_list, i32 32, i1 false), !dbg !1530
  %68 = load ptr, ptr %self, align 8, !dbg !1531
  ret ptr %68, !dbg !1531

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %69 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr1, align 8
  %70 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr2, align 8
  %71 = load [2 x i64], ptr %taddr2, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 18), !dbg !1499
  unreachable, !dbg !1499

panic28:                                          ; preds = %noerr_block
  store i64 %50, ptr %taddr29, align 8
  %73 = insertvalue %any undef, ptr %taddr29, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %75 = insertvalue %any undef, ptr %taddr30, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr31, align 8
  %77 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr32, align 8
  %78 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr33, align 8
  %79 = load [2 x i64], ptr %taddr33, align 8
  store %any %74, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %76, ptr %ptradd35, align 8
  %80 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %81 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 21, [2 x i64] %81), !dbg !1524
  unreachable, !dbg !1524

panic41:                                          ; preds = %checkok38
  store i64 %56, ptr %taddr42, align 8
  %82 = insertvalue %any undef, ptr %taddr42, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr43, align 8
  %84 = insertvalue %any undef, ptr %taddr43, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr44, align 8
  %86 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr45, align 8
  %87 = load [2 x i64], ptr %taddr45, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr46, align 8
  %88 = load [2 x i64], ptr %taddr46, align 8
  store %any %83, ptr %varargslots47, align 8
  %ptradd48 = getelementptr inbounds i8, ptr %varargslots47, i64 16
  store %any %85, ptr %ptradd48, align 8
  %89 = insertvalue %"any[]" undef, ptr %varargslots47, 0
  %"$$temp49" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp49", ptr %taddr50, align 8
  %90 = load [2 x i64], ptr %taddr50, align 8
  call void @std.core.builtin.panicf([2 x i64] %86, [2 x i64] %87, [2 x i64] %88, i32 21, [2 x i64] %90), !dbg !1526
  unreachable, !dbg !1526

panic53:                                          ; preds = %checkok51
  store i64 %63, ptr %taddr54, align 8
  %91 = insertvalue %any undef, ptr %taddr54, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %62, ptr %taddr55, align 8
  %93 = insertvalue %any undef, ptr %taddr55, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.71, i64 38 }, ptr %taddr56, align 8
  %95 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr57, align 8
  %96 = load [2 x i64], ptr %taddr57, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr58, align 8
  %97 = load [2 x i64], ptr %taddr58, align 8
  store %any %92, ptr %varargslots59, align 8
  %ptradd60 = getelementptr inbounds i8, ptr %varargslots59, i64 16
  store %any %94, ptr %ptradd60, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots59, 0
  %"$$temp61" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp61", ptr %taddr62, align 8
  %99 = load [2 x i64], ptr %taddr62, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 21, [2 x i64] %99), !dbg !1526
  unreachable, !dbg !1526

panic64:                                          ; preds = %checkok63
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr65, align 8
  %100 = load [2 x i64], ptr %taddr65, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr66, align 8
  %101 = load [2 x i64], ptr %taddr66, align 8
  store %"char[]" { ptr @.func.47, i64 8 }, ptr %taddr67, align 8
  %102 = load [2 x i64], ptr %taddr67, align 8
  %103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %103([2 x i64] %100, [2 x i64] %101, [2 x i64] %102, i32 22), !dbg !1528
  unreachable, !dbg !1528
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.MultiWriter.temp_init(ptr %0, [2 x i64] %1) #0 !dbg !1532 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %writers = alloca %"any[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr12 = alloca %any, align 8
  %2 = icmp eq ptr %0, null, !dbg !1535
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1535
  br i1 %3, label %panic, label %checkok, !dbg !1535

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1536, metadata !DIExpression()), !dbg !1537
  store [2 x i64] %1, ptr %writers, align 8
  call void @llvm.dbg.declare(metadata ptr %writers, metadata !1538, metadata !DIExpression()), !dbg !1539
  %ptradd = getelementptr inbounds i8, ptr %writers, i64 8, !dbg !1540
  %4 = load i64, ptr %ptradd, align 8, !dbg !1540
  %lt = icmp ult i64 0, %4, !dbg !1540
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1540

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.98, i64 36 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 28), !dbg !1540
  unreachable, !dbg !1540

assert_ok:                                        ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1542
  %ptradd6 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !1542
  %10 = load i64, ptr %ptradd6, align 8, !dbg !1542
  %eq = icmp eq i64 0, %10, !dbg !1542
  br i1 %eq, label %assert_ok11, label %assert_fail7, !dbg !1542

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.99, i64 90 }, ptr %taddr8, align 8
  %11 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr9, align 8
  %12 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr10, align 8
  %13 = load [2 x i64], ptr %taddr10, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 29), !dbg !1542
  unreachable, !dbg !1542

assert_ok11:                                      ; preds = %assert_ok
  %15 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1543
  %i2nb = icmp eq ptr %15, null, !dbg !1543
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1543

if.then:                                          ; preds = %assert_ok11
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1546
  br label %if.exit, !dbg !1546

if.exit:                                          ; preds = %if.then, %assert_ok11
  %16 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1548
  %17 = insertvalue %any undef, ptr %16, 0, !dbg !1545
  %18 = insertvalue %any %17, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1545
  %19 = load ptr, ptr %self, align 8, !dbg !1545
  %20 = load [2 x i64], ptr %writers, align 8, !dbg !1545
  store %any %18, ptr %taddr12, align 8
  %21 = load [2 x i64], ptr %taddr12, align 8
  %22 = call ptr @std.io.MultiWriter.new_init(ptr %19, [2 x i64] %20, [2 x i64] %21), !dbg !1549
  ret ptr %22, !dbg !1549

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %23 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr1, align 8
  %24 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr2, align 8
  %25 = load [2 x i64], ptr %taddr2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 31), !dbg !1537
  unreachable, !dbg !1537
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.MultiWriter.free(ptr %0) #0 !dbg !1550 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1553
  %1 = icmp eq ptr %0, null, !dbg !1553
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1553
  br i1 %2, label %panic, label %checkok, !dbg !1553

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1554, metadata !DIExpression()), !dbg !1555
  %3 = load ptr, ptr %self, align 8, !dbg !1556
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !1556
  %4 = load ptr, ptr %ptradd, align 8, !dbg !1556
  %i2nb = icmp eq ptr %4, null, !dbg !1556
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1556

if.then:                                          ; preds = %checkok
  ret void, !dbg !1557

if.exit:                                          ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !1558
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1558
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator, ptr align 8 %ptradd3, i32 16, i1 false)
  %6 = load ptr, ptr %self, align 8, !dbg !1559
  %7 = load ptr, ptr %6, align 8
  store ptr %7, ptr %ptr, align 8
  %8 = load ptr, ptr %ptr, align 8, !dbg !1560
  %i2nb4 = icmp eq ptr %8, null, !dbg !1560
  br i1 %i2nb4, label %if.then5, label %if.exit6, !dbg !1560

if.then5:                                         ; preds = %if.exit
  br label %expr_block.exit, !dbg !1563

if.exit6:                                         ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %allocator, i64 8, !dbg !1564
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1564
  %10 = inttoptr i64 %9 to ptr, !dbg !1564
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1553
  %11 = icmp eq ptr %10, %type, !dbg !1553
  br i1 %11, label %cache_hit, label %cache_miss, !dbg !1553

cache_miss:                                       ; preds = %if.exit6
  %ptradd8 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1553
  %12 = load ptr, ptr %ptradd8, align 8, !dbg !1553
  %13 = call ptr @.dyn_search(ptr %12, ptr @"$sel.release"), !dbg !1553
  store ptr %13, ptr %.inlinecache, align 8, !dbg !1553
  store ptr %10, ptr %.cachedtype, align 8, !dbg !1553
  br label %14, !dbg !1553

cache_hit:                                        ; preds = %if.exit6
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1553
  br label %14, !dbg !1553

14:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %13, %cache_miss ], !dbg !1553
  %15 = icmp eq ptr %fn_phi, null, !dbg !1553
  br i1 %15, label %missing_function, label %match, !dbg !1553

missing_function:                                 ; preds = %14
  store %"char[]" { ptr @.panic_msg.54, i64 44 }, ptr %taddr9, align 8
  %16 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.55, i64 16 }, ptr %taddr10, align 8
  %17 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr11, align 8
  %18 = load [2 x i64], ptr %taddr11, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 105), !dbg !1565
  unreachable, !dbg !1565

match:                                            ; preds = %14
  %20 = load ptr, ptr %allocator, align 8, !dbg !1565
  %21 = load ptr, ptr %ptr, align 8, !dbg !1565
  call void %fn_phi(ptr %20, ptr %21, i8 0), !dbg !1565
  br label %expr_block.exit, !dbg !1565

expr_block.exit:                                  ; preds = %match, %if.then5
  %22 = load ptr, ptr %self, align 8, !dbg !1566
  %checknull = icmp eq ptr %22, null, !dbg !1566
  %23 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1566
  br i1 %23, label %panic12, label %checkok16, !dbg !1566

checkok16:                                        ; preds = %expr_block.exit
  call void @llvm.memset.p0.i64(ptr align 8 %22, i8 0, i64 32, i1 false), !dbg !1566
  ret void, !dbg !1566

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 36), !dbg !1555
  unreachable, !dbg !1555

panic12:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr13, align 8
  %28 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr14, align 8
  %29 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.70, i64 4 }, ptr %taddr15, align 8
  %30 = load [2 x i64], ptr %taddr15, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 40), !dbg !1566
  unreachable, !dbg !1566
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.MultiWriter.write(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1567 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %w = alloca %any, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !1570
  %3 = icmp eq ptr %1, null, !dbg !1570
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1570
  br i1 %4, label %panic, label %checkok, !dbg !1570

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1571, metadata !DIExpression()), !dbg !1572
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1573, metadata !DIExpression()), !dbg !1574
  call void @llvm.dbg.declare(metadata ptr %n, metadata !1575, metadata !DIExpression()), !dbg !1576
  store i64 0, ptr %n, align 8, !dbg !1576
  %5 = load ptr, ptr %self, align 8, !dbg !1577
  %checknull = icmp eq ptr %5, null, !dbg !1577
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1577
  br i1 %6, label %panic3, label %checkok7, !dbg !1577

checkok7:                                         ; preds = %checkok
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1577
  %7 = load i64, ptr %ptradd, align 8, !dbg !1577
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1579, metadata !DIExpression()), !dbg !1577
  store i64 0, ptr %.anon, align 8, !dbg !1577
  br label %loop.cond, !dbg !1577

loop.cond:                                        ; preds = %if.exit, %checkok7
  %8 = load i64, ptr %.anon, align 8, !dbg !1577
  %lt = icmp ult i64 %8, %7, !dbg !1577
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1577

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %w, metadata !1580, metadata !DIExpression()), !dbg !1582
  %checknull8 = icmp eq ptr %5, null, !dbg !1583
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1583
  br i1 %9, label %panic9, label %checkok13, !dbg !1583

checkok13:                                        ; preds = %loop.body
  %ptradd14 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1583
  %10 = load i64, ptr %ptradd14, align 8, !dbg !1583
  %11 = load ptr, ptr %5, align 8, !dbg !1583
  %12 = load i64, ptr %.anon, align 8, !dbg !1583
  %ge = icmp uge i64 %12, %10, !dbg !1583
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1583
  br i1 %13, label %panic15, label %checkok23, !dbg !1583

checkok23:                                        ; preds = %checkok13
  %ptroffset = getelementptr inbounds [16 x i8], ptr %11, i64 %12, !dbg !1583
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !1583
  %ptradd24 = getelementptr inbounds i8, ptr %w, i64 8, !dbg !1584
  %14 = load i64, ptr %ptradd24, align 8, !dbg !1584
  %15 = inttoptr i64 %14 to ptr, !dbg !1584
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1570
  %16 = icmp eq ptr %15, %type, !dbg !1570
  br i1 %16, label %cache_hit, label %cache_miss, !dbg !1570

cache_miss:                                       ; preds = %checkok23
  %ptradd25 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !1570
  %17 = load ptr, ptr %ptradd25, align 8, !dbg !1570
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.write"), !dbg !1570
  store ptr %18, ptr %.inlinecache, align 8, !dbg !1570
  store ptr %15, ptr %.cachedtype, align 8, !dbg !1570
  br label %19, !dbg !1570

cache_hit:                                        ; preds = %checkok23
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1570
  br label %19, !dbg !1570

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ], !dbg !1570
  %20 = icmp eq ptr %fn_phi, null, !dbg !1570
  br i1 %20, label %missing_function, label %match, !dbg !1570

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr26, align 8
  %21 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr27, align 8
  %22 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr28, align 8
  %23 = load [2 x i64], ptr %taddr28, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 48), !dbg !1586
  unreachable, !dbg !1586

match:                                            ; preds = %19
  %25 = load ptr, ptr %w, align 8
  %26 = load [2 x i64], ptr %bytes, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %25, [2 x i64] %26), !dbg !1586
  %not_err = icmp eq i64 %27, 0, !dbg !1586
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1586
  br i1 %28, label %after_check, label %assign_optional, !dbg !1586

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !1586
  br label %guard_block, !dbg !1586

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1586

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !1586
  ret i64 %29, !dbg !1586

noerr_block:                                      ; preds = %after_check
  %30 = load i64, ptr %retparam, align 8, !dbg !1586
  store i64 %30, ptr %n, align 8, !dbg !1586
  %31 = load i64, ptr %n, align 8, !dbg !1587
  %ptradd29 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1588
  %32 = load i64, ptr %ptradd29, align 8, !dbg !1588
  %neq = icmp ne i64 %31, %32, !dbg !1587
  br i1 %neq, label %if.then, label %if.exit, !dbg !1587

if.then:                                          ; preds = %noerr_block
  ret i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), !dbg !1589

if.exit:                                          ; preds = %noerr_block
  %33 = load i64, ptr %.anon, align 8, !dbg !1577
  %addnuw = add nuw i64 %33, 1, !dbg !1577
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1577
  br label %loop.cond, !dbg !1577

loop.exit:                                        ; preds = %loop.cond
  %ptradd30 = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1590
  %34 = load i64, ptr %ptradd30, align 8, !dbg !1590
  store i64 %34, ptr %0, align 8, !dbg !1590
  ret i64 0, !dbg !1590

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %35 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr1, align 8
  %36 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr2, align 8
  %37 = load [2 x i64], ptr %taddr2, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 43), !dbg !1572
  unreachable, !dbg !1572

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.100, i64 53 }, ptr %taddr4, align 8
  %39 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr5, align 8
  %40 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr6, align 8
  %41 = load [2 x i64], ptr %taddr6, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 46), !dbg !1577
  unreachable, !dbg !1577

panic9:                                           ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.100, i64 53 }, ptr %taddr10, align 8
  %43 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr11, align 8
  %44 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr12, align 8
  %45 = load [2 x i64], ptr %taddr12, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 46), !dbg !1583
  unreachable, !dbg !1583

panic15:                                          ; preds = %checkok13
  store i64 %10, ptr %taddr16, align 8
  %47 = insertvalue %any undef, ptr %taddr16, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr17, align 8
  %49 = insertvalue %any undef, ptr %taddr17, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr18, align 8
  %51 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr19, align 8
  %52 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.60, i64 5 }, ptr %taddr20, align 8
  %53 = load [2 x i64], ptr %taddr20, align 8
  store %any %48, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd21, align 8
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %55 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %51, [2 x i64] %52, [2 x i64] %53, i32 46, [2 x i64] %55), !dbg !1583
  unreachable, !dbg !1583
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.MultiWriter.write_byte(ptr %0, i8 %1) #0 !dbg !1591 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1594
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1594
  br i1 %3, label %panic, label %checkok, !dbg !1594

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1595, metadata !DIExpression()), !dbg !1596
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1597, metadata !DIExpression()), !dbg !1598
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1599, metadata !DIExpression()), !dbg !1600
  store i8 0, ptr %data, align 1, !dbg !1600
  %4 = load i8, ptr %c, align 1, !dbg !1601
  store i8 %4, ptr %data, align 1, !dbg !1601
  %5 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1602
  %6 = insertvalue %"char[]" %5, i64 1, 1, !dbg !1602
  %7 = load ptr, ptr %self, align 8
  store %"char[]" %6, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  %9 = call i64 @std.io.MultiWriter.write(ptr %retparam, ptr %7, [2 x i64] %8), !dbg !1603
  %not_err = icmp eq i64 %9, 0, !dbg !1603
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1603
  br i1 %10, label %after_check, label %assign_optional, !dbg !1603

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %error_var, align 8, !dbg !1603
  br label %guard_block, !dbg !1603

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1603

guard_block:                                      ; preds = %assign_optional
  %11 = load i64, ptr %error_var, align 8, !dbg !1603
  ret i64 %11, !dbg !1603

noerr_block:                                      ; preds = %after_check
  ret i64 0, !dbg !1603

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 14 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.64, i64 10 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 54), !dbg !1596
  unreachable, !dbg !1596
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.TeeReader.init(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !1604 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %r = alloca %any, align 8
  %w = alloca %any, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %r8 = alloca %any, align 8
  %w9 = alloca %any, align 8
  %literal = alloca %TeeReader, align 8
  %3 = icmp eq ptr %0, null, !dbg !1613
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1613
  br i1 %4, label %panic, label %checkok, !dbg !1613

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1614, metadata !DIExpression()), !dbg !1615
  store [2 x i64] %1, ptr %r, align 8
  call void @llvm.dbg.declare(metadata ptr %r, metadata !1616, metadata !DIExpression()), !dbg !1617
  store [2 x i64] %2, ptr %w, align 8
  call void @llvm.dbg.declare(metadata ptr %w, metadata !1618, metadata !DIExpression()), !dbg !1619
  %5 = load ptr, ptr %self, align 8, !dbg !1620
  %checknull = icmp eq ptr %5, null, !dbg !1620
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1620
  br i1 %6, label %panic3, label %checkok7, !dbg !1620

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %r8, ptr align 8 %r, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %w9, ptr align 8 %w, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %r8, i32 16, i1 false), !dbg !1621
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1621
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %w9, i32 16, i1 false), !dbg !1624
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %literal, i32 32, i1 false), !dbg !1624
  %7 = load ptr, ptr %self, align 8, !dbg !1625
  ret ptr %7, !dbg !1625

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 22), !dbg !1615
  unreachable, !dbg !1615

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %12 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr5, align 8
  %13 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %14 = load [2 x i64], ptr %taddr6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 24), !dbg !1620
  unreachable, !dbg !1620
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.TeeReader.read(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1626 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %nr = alloca i64, align 8
  %nw = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %error_var7 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr16 = alloca %"any[]", align 8
  %taddr19 = alloca i64, align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %varargslots24 = alloca [2 x %any], align 8
  %taddr27 = alloca %"any[]", align 8
  %.inlinecache30 = alloca ptr, align 8
  %.cachedtype31 = alloca ptr, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %retparam43 = alloca i64, align 8
  %taddr44 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype31, align 8, !dbg !1629
  store ptr null, ptr %.cachedtype, align 8, !dbg !1629
  %3 = icmp eq ptr %1, null, !dbg !1629
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1629
  br i1 %4, label %panic, label %checkok, !dbg !1629

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1630, metadata !DIExpression()), !dbg !1631
  store [2 x i64] %2, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1632, metadata !DIExpression()), !dbg !1633
  call void @llvm.dbg.declare(metadata ptr %nr, metadata !1634, metadata !DIExpression()), !dbg !1635
  store i64 0, ptr %nr, align 8, !dbg !1635
  call void @llvm.dbg.declare(metadata ptr %nw, metadata !1636, metadata !DIExpression()), !dbg !1637
  store i64 0, ptr %nw, align 8, !dbg !1637
  %5 = load ptr, ptr %self, align 8, !dbg !1638
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !1639
  %6 = load i64, ptr %ptradd, align 8, !dbg !1639
  %7 = inttoptr i64 %6 to ptr, !dbg !1639
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !1629
  %8 = icmp eq ptr %7, %type, !dbg !1629
  br i1 %8, label %cache_hit, label %cache_miss, !dbg !1629

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1629
  %9 = load ptr, ptr %ptradd3, align 8, !dbg !1629
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.read"), !dbg !1629
  store ptr %10, ptr %.inlinecache, align 8, !dbg !1629
  store ptr %7, ptr %.cachedtype, align 8, !dbg !1629
  br label %11, !dbg !1629

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !1629
  br label %11, !dbg !1629

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ], !dbg !1629
  %12 = icmp eq ptr %fn_phi, null, !dbg !1629
  br i1 %12, label %missing_function, label %match, !dbg !1629

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr4, align 8
  %13 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr5, align 8
  %14 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr6, align 8
  %15 = load [2 x i64], ptr %taddr6, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 31), !dbg !1638
  unreachable, !dbg !1638

match:                                            ; preds = %11
  %17 = load ptr, ptr %5, align 8
  %18 = load [2 x i64], ptr %bytes, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, [2 x i64] %18), !dbg !1638
  %not_err = icmp eq i64 %19, 0, !dbg !1638
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1638
  br i1 %20, label %after_check, label %assign_optional, !dbg !1638

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !1638
  br label %guard_block, !dbg !1638

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !1638

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !1638
  ret i64 %21, !dbg !1638

noerr_block:                                      ; preds = %after_check
  %22 = load i64, ptr %retparam, align 8, !dbg !1638
  store i64 %22, ptr %nr, align 8, !dbg !1638
  %23 = load ptr, ptr %self, align 8, !dbg !1640
  %ptradd8 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1640
  %24 = load %"char[]", ptr %bytes, align 8, !dbg !1641
  %25 = extractvalue %"char[]" %24, 0, !dbg !1641
  %26 = extractvalue %"char[]" %24, 1, !dbg !1642
  %gt = icmp ugt i64 0, %26, !dbg !1642
  %27 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1642
  br i1 %27, label %panic9, label %checkok17, !dbg !1642

checkok17:                                        ; preds = %noerr_block
  %28 = load i64, ptr %nr, align 8, !dbg !1643
  %add = add i64 0, %28, !dbg !1643
  %lt = icmp ult i64 %26, %add, !dbg !1643
  %sub = sub i64 %add, 1, !dbg !1643
  %29 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !1643
  br i1 %29, label %panic18, label %checkok28, !dbg !1643

checkok28:                                        ; preds = %checkok17
  %size = sub i64 %add, 0, !dbg !1641
  %30 = insertvalue %"char[]" undef, ptr %25, 0, !dbg !1641
  %31 = insertvalue %"char[]" %30, i64 %size, 1, !dbg !1641
  %ptradd29 = getelementptr inbounds i8, ptr %ptradd8, i64 8, !dbg !1641
  %32 = load i64, ptr %ptradd29, align 8, !dbg !1641
  %33 = inttoptr i64 %32 to ptr, !dbg !1641
  %type32 = load ptr, ptr %.cachedtype31, align 8, !dbg !1629
  %34 = icmp eq ptr %33, %type32, !dbg !1629
  br i1 %34, label %cache_hit35, label %cache_miss33, !dbg !1629

cache_miss33:                                     ; preds = %checkok28
  %ptradd34 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !1629
  %35 = load ptr, ptr %ptradd34, align 8, !dbg !1629
  %36 = call ptr @.dyn_search(ptr %35, ptr @"$sel.write"), !dbg !1629
  store ptr %36, ptr %.inlinecache30, align 8, !dbg !1629
  store ptr %33, ptr %.cachedtype31, align 8, !dbg !1629
  br label %37, !dbg !1629

cache_hit35:                                      ; preds = %checkok28
  %cache_hit_fn36 = load ptr, ptr %.inlinecache30, align 8, !dbg !1629
  br label %37, !dbg !1629

37:                                               ; preds = %cache_hit35, %cache_miss33
  %fn_phi37 = phi ptr [ %cache_hit_fn36, %cache_hit35 ], [ %36, %cache_miss33 ], !dbg !1629
  %38 = icmp eq ptr %fn_phi37, null, !dbg !1629
  br i1 %38, label %missing_function38, label %match42, !dbg !1629

missing_function38:                               ; preds = %37
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr39, align 8
  %39 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr40, align 8
  %40 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr41, align 8
  %41 = load [2 x i64], ptr %taddr41, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 32), !dbg !1640
  unreachable, !dbg !1640

match42:                                          ; preds = %37
  %43 = load ptr, ptr %ptradd8, align 8
  store %"char[]" %31, ptr %taddr44, align 8
  %44 = load [2 x i64], ptr %taddr44, align 8
  %45 = call i64 %fn_phi37(ptr %retparam43, ptr %43, [2 x i64] %44), !dbg !1640
  %not_err45 = icmp eq i64 %45, 0, !dbg !1640
  %46 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true), !dbg !1640
  br i1 %46, label %after_check47, label %assign_optional46, !dbg !1640

assign_optional46:                                ; preds = %match42
  store i64 %45, ptr %error_var7, align 8, !dbg !1640
  br label %guard_block48, !dbg !1640

after_check47:                                    ; preds = %match42
  br label %noerr_block49, !dbg !1640

guard_block48:                                    ; preds = %assign_optional46
  %47 = load i64, ptr %error_var7, align 8, !dbg !1640
  ret i64 %47, !dbg !1640

noerr_block49:                                    ; preds = %after_check47
  %48 = load i64, ptr %retparam43, align 8, !dbg !1640
  store i64 %48, ptr %nw, align 8, !dbg !1640
  %49 = load i64, ptr %nr, align 8, !dbg !1644
  %50 = load i64, ptr %nw, align 8, !dbg !1645
  %neq = icmp ne i64 %49, %50, !dbg !1644
  br i1 %neq, label %if.then, label %if.exit, !dbg !1644

if.then:                                          ; preds = %noerr_block49
  ret i64 ptrtoint (ptr @"std.io.IoError$GENERAL_ERROR" to i64), !dbg !1646

if.exit:                                          ; preds = %noerr_block49
  %51 = load i64, ptr %nr, align 8, !dbg !1647
  store i64 %51, ptr %0, align 8, !dbg !1647
  ret i64 0, !dbg !1647

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 28), !dbg !1631
  unreachable, !dbg !1631

panic9:                                           ; preds = %noerr_block
  store i64 %26, ptr %taddr10, align 8
  %56 = insertvalue %any undef, ptr %taddr10, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr11, align 8
  %58 = insertvalue %any undef, ptr %taddr11, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr12, align 8
  %60 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr13, align 8
  %61 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr14, align 8
  %62 = load [2 x i64], ptr %taddr14, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd15, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr16, align 8
  %64 = load [2 x i64], ptr %taddr16, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 32, [2 x i64] %64), !dbg !1641
  unreachable, !dbg !1641

panic18:                                          ; preds = %checkok17
  store i64 %sub, ptr %taddr19, align 8
  %65 = insertvalue %any undef, ptr %taddr19, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr20, align 8
  %67 = insertvalue %any undef, ptr %taddr20, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr21, align 8
  %69 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr22, align 8
  %70 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.func.39, i64 4 }, ptr %taddr23, align 8
  %71 = load [2 x i64], ptr %taddr23, align 8
  store %any %66, ptr %varargslots24, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots24, i64 16
  store %any %68, ptr %ptradd25, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots24, 0
  %"$$temp26" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp26", ptr %taddr27, align 8
  %73 = load [2 x i64], ptr %taddr27, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 32, [2 x i64] %73), !dbg !1641
  unreachable, !dbg !1641
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.TeeReader.read_byte(ptr %0, ptr %1) #0 !dbg !1648 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %data = alloca [1 x i8], align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !1651
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1651
  br i1 %3, label %panic, label %checkok, !dbg !1651

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1652, metadata !DIExpression()), !dbg !1653
  call void @llvm.dbg.declare(metadata ptr %data, metadata !1654, metadata !DIExpression()), !dbg !1655
  store i8 0, ptr %data, align 1, !dbg !1655
  %4 = insertvalue %"char[]" undef, ptr %data, 0, !dbg !1656
  %5 = insertvalue %"char[]" %4, i64 1, 1, !dbg !1656
  %6 = load ptr, ptr %self, align 8
  store %"char[]" %5, ptr %taddr3, align 8
  %7 = load [2 x i64], ptr %taddr3, align 8
  %8 = call i64 @std.io.TeeReader.read(ptr %retparam, ptr %6, [2 x i64] %7), !dbg !1657
  %not_err = icmp eq i64 %8, 0, !dbg !1657
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1657
  br i1 %9, label %after_check, label %assign_optional, !dbg !1657

assign_optional:                                  ; preds = %checkok
  store i64 %8, ptr %error_var, align 8, !dbg !1657
  br label %guard_block, !dbg !1657

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !1657

guard_block:                                      ; preds = %assign_optional
  %10 = load i64, ptr %error_var, align 8, !dbg !1657
  ret i64 %10, !dbg !1657

noerr_block:                                      ; preds = %after_check
  %11 = load i8, ptr %data, align 1, !dbg !1658
  store i8 %11, ptr %0, align 1, !dbg !1658
  ret i64 0, !dbg !1658

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.101, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 9 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 37), !dbg !1653
  unreachable, !dbg !1653
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.adjust(ptr %0, ptr %1, i64 %2) #0 !dbg !1659 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %reterr = alloca i64, align 8
  %reterr3 = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1680
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1680
  br i1 %4, label %panic, label %checkok, !dbg !1680

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1681, metadata !DIExpression()), !dbg !1682
  store i64 %2, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1683, metadata !DIExpression()), !dbg !1684
  %5 = load ptr, ptr %self, align 8, !dbg !1685
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !1685
  %6 = load i32, ptr %ptradd, align 8, !dbg !1685
  %lshrl = lshr i32 %6, 1, !dbg !1685
  %7 = and i32 1, %lshrl, !dbg !1685
  %trunc = trunc i32 %7 to i8, !dbg !1685
  %8 = trunc i8 %trunc to i1, !dbg !1685
  %not = xor i1 %8, true, !dbg !1685
  br i1 %not, label %if.then, label %if.exit, !dbg !1685

if.then:                                          ; preds = %checkok
  store i64 0, ptr %0, align 8, !dbg !1686
  ret i64 0, !dbg !1686

if.exit:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !1687
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1687
  %ptradd5 = getelementptr inbounds i8, ptr %ptradd4, i64 4, !dbg !1687
  %10 = load i32, ptr %ptradd5, align 4, !dbg !1687
  %zext = zext i32 %10 to i64, !dbg !1687
  %11 = load i64, ptr %len, align 8, !dbg !1688
  %12 = load ptr, ptr %self, align 8
  %13 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %12, i8 32, i64 %zext, i64 %11) #5, !dbg !1689
  %not_err = icmp eq i64 %13, 0, !dbg !1689
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1689
  br i1 %14, label %after_check, label %assign_optional, !dbg !1689

assign_optional:                                  ; preds = %if.exit
  store i64 %13, ptr %reterr3, align 8, !dbg !1689
  br label %err_retblock, !dbg !1689

after_check:                                      ; preds = %if.exit
  %15 = load i64, ptr %retparam, align 8, !dbg !1689
  store i64 %15, ptr %0, align 8, !dbg !1689
  ret i64 0, !dbg !1689

err_retblock:                                     ; preds = %assign_optional
  %16 = load i64, ptr %reterr3, align 8, !dbg !1689
  ret i64 %16, !dbg !1689

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %17 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %18 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.135, i64 6 }, ptr %taddr2, align 8
  %19 = load [2 x i64], ptr %taddr2, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 35), !dbg !1682
  unreachable, !dbg !1682
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.out_substr(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1690 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %prec = alloca i32, align 4
  %index = alloca i64, align 8
  %chars = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1693
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1693
  br i1 %4, label %panic, label %checkok, !dbg !1693

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1694, metadata !DIExpression()), !dbg !1695
  store [2 x i64] %2, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !1696, metadata !DIExpression()), !dbg !1697
  call void @llvm.dbg.declare(metadata ptr %l, metadata !1698, metadata !DIExpression()), !dbg !1699
  %5 = load [2 x i64], ptr %str, align 8, !dbg !1700
  %6 = call i64 @std.core.string.conv.utf8_codepoints([2 x i64] %5), !dbg !1701
  store i64 %6, ptr %l, align 8, !dbg !1701
  call void @llvm.dbg.declare(metadata ptr %prec, metadata !1702, metadata !DIExpression()), !dbg !1703
  %7 = load ptr, ptr %self, align 8, !dbg !1704
  %ptradd = getelementptr inbounds i8, ptr %7, i64 16, !dbg !1704
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 8, !dbg !1704
  %8 = load i32, ptr %ptradd3, align 8, !dbg !1704
  store i32 %8, ptr %prec, align 4, !dbg !1704
  %9 = load ptr, ptr %self, align 8, !dbg !1705
  %ptradd4 = getelementptr inbounds i8, ptr %9, i64 16, !dbg !1705
  %10 = load i32, ptr %ptradd4, align 8, !dbg !1705
  %lshrl = lshr i32 %10, 6, !dbg !1705
  %11 = and i32 1, %lshrl, !dbg !1705
  %trunc = trunc i32 %11 to i8, !dbg !1705
  %12 = trunc i8 %trunc to i1, !dbg !1705
  br i1 %12, label %and.rhs, label %and.phi, !dbg !1705

and.rhs:                                          ; preds = %checkok
  %13 = load i64, ptr %l, align 8, !dbg !1706
  %14 = load i32, ptr %prec, align 4, !dbg !1707
  %zext = zext i32 %14 to i64, !dbg !1707
  %lt = icmp ult i64 %13, %zext, !dbg !1706
  br label %and.phi, !dbg !1706

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %lt, %and.rhs ], !dbg !1706
  br i1 %val, label %if.then, label %if.exit, !dbg !1706

if.then:                                          ; preds = %and.phi
  %15 = load i32, ptr %prec, align 4, !dbg !1708
  %zext5 = zext i32 %15 to i64, !dbg !1708
  store i64 %zext5, ptr %l, align 8, !dbg !1708
  br label %if.exit, !dbg !1708

if.exit:                                          ; preds = %if.then, %and.phi
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1709, metadata !DIExpression()), !dbg !1710
  store i64 0, ptr %index, align 8, !dbg !1711
  call void @llvm.dbg.declare(metadata ptr %chars, metadata !1712, metadata !DIExpression()), !dbg !1713
  %ptradd6 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !1714
  %16 = load i64, ptr %ptradd6, align 8, !dbg !1714
  store i64 %16, ptr %chars, align 8, !dbg !1714
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1715, metadata !DIExpression()), !dbg !1716
  %17 = load ptr, ptr %str, align 8, !dbg !1717
  store ptr %17, ptr %ptr, align 8, !dbg !1717
  br label %loop.cond, !dbg !1718

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %18 = load i64, ptr %index, align 8, !dbg !1719
  %19 = load i64, ptr %chars, align 8, !dbg !1721
  %lt7 = icmp ult i64 %18, %19, !dbg !1719
  br i1 %lt7, label %loop.body, label %loop.exit, !dbg !1719

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1722, metadata !DIExpression()), !dbg !1724
  %20 = load ptr, ptr %ptr, align 8, !dbg !1725
  %21 = load i64, ptr %index, align 8, !dbg !1726
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 %21, !dbg !1726
  %22 = load i8, ptr %ptradd8, align 1, !dbg !1726
  store i8 %22, ptr %c, align 1, !dbg !1726
  %23 = load i8, ptr %c, align 1, !dbg !1727
  %zext9 = zext i8 %23 to i32, !dbg !1727
  %and = and i32 %zext9, 192, !dbg !1727
  %neq = icmp ne i32 %and, 128, !dbg !1727
  br i1 %neq, label %and.rhs10, label %and.phi14, !dbg !1727

and.rhs10:                                        ; preds = %loop.body
  %24 = load ptr, ptr %self, align 8, !dbg !1728
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1728
  %25 = load i32, ptr %ptradd11, align 8, !dbg !1728
  %lshrl12 = lshr i32 %25, 6, !dbg !1728
  %26 = and i32 1, %lshrl12, !dbg !1728
  %trunc13 = trunc i32 %26 to i8, !dbg !1728
  %27 = trunc i8 %trunc13 to i1, !dbg !1728
  br label %and.phi14, !dbg !1728

and.phi14:                                        ; preds = %and.rhs10, %loop.body
  %val15 = phi i1 [ false, %loop.body ], [ %27, %and.rhs10 ], !dbg !1728
  br i1 %val15, label %and.rhs16, label %and.phi17, !dbg !1728

and.rhs16:                                        ; preds = %and.phi14
  %28 = load i32, ptr %prec, align 4, !dbg !1729
  %sub = sub i32 %28, 1, !dbg !1729
  store i32 %sub, ptr %prec, align 4, !dbg !1729
  %i2nb = icmp eq i32 %28, 0, !dbg !1729
  br label %and.phi17, !dbg !1729

and.phi17:                                        ; preds = %and.rhs16, %and.phi14
  %val18 = phi i1 [ false, %and.phi14 ], [ %i2nb, %and.rhs16 ], !dbg !1729
  br i1 %val18, label %if.then19, label %if.exit20, !dbg !1729

if.then19:                                        ; preds = %and.phi17
  br label %loop.exit, !dbg !1730

if.exit20:                                        ; preds = %and.phi17
  %29 = load ptr, ptr %self, align 8
  %30 = load i8, ptr %c, align 1
  %31 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %29, i8 %30), !dbg !1731
  %not_err = icmp eq i64 %31, 0, !dbg !1731
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1731
  br i1 %32, label %after_check, label %assign_optional, !dbg !1731

assign_optional:                                  ; preds = %if.exit20
  store i64 %31, ptr %error_var, align 8, !dbg !1731
  br label %guard_block, !dbg !1731

after_check:                                      ; preds = %if.exit20
  br label %noerr_block, !dbg !1731

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1731
  ret i64 %33, !dbg !1731

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %index, align 8, !dbg !1732
  %add = add i64 %34, 1, !dbg !1732
  store i64 %add, ptr %index, align 8, !dbg !1732
  br label %loop.cond, !dbg !1732

loop.exit:                                        ; preds = %if.then19, %loop.cond
  %35 = load i64, ptr %index, align 8, !dbg !1733
  store i64 %35, ptr %0, align 8, !dbg !1733
  ret i64 0, !dbg !1733

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %36 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %37 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.136, i64 10 }, ptr %taddr2, align 8
  %38 = load [2 x i64], ptr %taddr2, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39([2 x i64] %36, [2 x i64] %37, [2 x i64] %38, i32 161), !dbg !1695
  unreachable, !dbg !1695
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.pad(ptr %0, ptr %1, i8 %2, i64 %3, i64 %4) #0 !dbg !1734 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %width = alloca i64, align 8
  %len = alloca i64, align 8
  %delta = alloca i64, align 8
  %i = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %x = alloca i32, align 4
  %.anon = alloca i64, align 8
  %a = alloca i32, align 4
  %b = alloca i64, align 8
  %5 = icmp eq ptr %1, null, !dbg !1737
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !1737
  br i1 %6, label %panic, label %checkok, !dbg !1737

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1738, metadata !DIExpression()), !dbg !1739
  store i8 %2, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1740, metadata !DIExpression()), !dbg !1741
  store i64 %3, ptr %width, align 8
  call void @llvm.dbg.declare(metadata ptr %width, metadata !1742, metadata !DIExpression()), !dbg !1743
  store i64 %4, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1744, metadata !DIExpression()), !dbg !1745
  call void @llvm.dbg.declare(metadata ptr %delta, metadata !1746, metadata !DIExpression()), !dbg !1747
  %7 = load i64, ptr %width, align 8, !dbg !1748
  %8 = load i64, ptr %len, align 8, !dbg !1749
  %sub = sub i64 %7, %8, !dbg !1748
  store i64 %sub, ptr %delta, align 8, !dbg !1748
  call void @llvm.dbg.declare(metadata ptr %i, metadata !1750, metadata !DIExpression()), !dbg !1752
  store i64 0, ptr %i, align 8, !dbg !1753
  br label %loop.cond, !dbg !1753

loop.cond:                                        ; preds = %noerr_block, %checkok
  %9 = load i64, ptr %i, align 8, !dbg !1754
  %10 = load i64, ptr %delta, align 8, !dbg !1755
  %lt = icmp slt i64 %9, %10, !dbg !1754
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1754

loop.body:                                        ; preds = %loop.cond
  %11 = load ptr, ptr %self, align 8
  %12 = load i8, ptr %c, align 1
  %13 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %11, i8 %12), !dbg !1756
  %not_err = icmp eq i64 %13, 0, !dbg !1756
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1756
  br i1 %14, label %after_check, label %assign_optional, !dbg !1756

assign_optional:                                  ; preds = %loop.body
  store i64 %13, ptr %error_var, align 8, !dbg !1756
  br label %guard_block, !dbg !1756

after_check:                                      ; preds = %loop.body
  br label %noerr_block, !dbg !1756

guard_block:                                      ; preds = %assign_optional
  %15 = load i64, ptr %error_var, align 8, !dbg !1756
  ret i64 %15, !dbg !1756

noerr_block:                                      ; preds = %after_check
  %16 = load i64, ptr %i, align 8, !dbg !1757
  %add = add i64 %16, 1, !dbg !1757
  store i64 %add, ptr %i, align 8, !dbg !1757
  br label %loop.cond, !dbg !1757

loop.exit:                                        ; preds = %loop.cond
  store i32 0, ptr %x, align 4
  %17 = load i64, ptr %delta, align 8
  store i64 %17, ptr %.anon, align 8
  %18 = load i32, ptr %x, align 4
  store i32 %18, ptr %a, align 4
  %19 = load i64, ptr %.anon, align 8
  store i64 %19, ptr %b, align 8
  %20 = load i32, ptr %a, align 4, !dbg !1758
  %sext = sext i32 %20 to i64, !dbg !1758
  %21 = load i64, ptr %b, align 8, !dbg !1763
  %gt = icmp sgt i64 %sext, %21, !dbg !1758
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !1758

cond.lhs:                                         ; preds = %loop.exit
  %22 = load i32, ptr %x, align 4, !dbg !1764
  %sext3 = sext i32 %22 to i64, !dbg !1764
  br label %cond.phi, !dbg !1764

cond.rhs:                                         ; preds = %loop.exit
  %23 = load i64, ptr %.anon, align 8, !dbg !1765
  br label %cond.phi, !dbg !1765

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i64 [ %sext3, %cond.lhs ], [ %23, %cond.rhs ], !dbg !1765
  store i64 %val, ptr %0, align 8, !dbg !1765
  ret i64 0, !dbg !1765

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.137, i64 3 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 180), !dbg !1739
  unreachable, !dbg !1739
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.out_chars(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !1766 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1769
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1769
  br i1 %4, label %panic, label %checkok, !dbg !1769

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1770, metadata !DIExpression()), !dbg !1771
  store [2 x i64] %2, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1772, metadata !DIExpression()), !dbg !1773
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1774
  %5 = load i64, ptr %ptradd, align 8, !dbg !1774
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1776, metadata !DIExpression()), !dbg !1774
  store i64 0, ptr %.anon, align 8, !dbg !1774
  br label %loop.cond, !dbg !1774

loop.cond:                                        ; preds = %noerr_block, %checkok
  %6 = load i64, ptr %.anon, align 8, !dbg !1774
  %lt = icmp ult i64 %6, %5, !dbg !1774
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1774

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1777, metadata !DIExpression()), !dbg !1779
  %ptradd3 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1780
  %7 = load i64, ptr %ptradd3, align 8, !dbg !1780
  %8 = load ptr, ptr %s, align 8, !dbg !1780
  %9 = load i64, ptr %.anon, align 8, !dbg !1780
  %ge = icmp uge i64 %9, %7, !dbg !1780
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1780
  br i1 %10, label %panic4, label %checkok12, !dbg !1780

checkok12:                                        ; preds = %loop.body
  %ptradd13 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1780
  %11 = load i8, ptr %ptradd13, align 1, !dbg !1780
  store i8 %11, ptr %c, align 1, !dbg !1780
  %12 = load ptr, ptr %self, align 8
  %13 = load i8, ptr %c, align 1
  %14 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %12, i8 %13), !dbg !1781
  %not_err = icmp eq i64 %14, 0, !dbg !1781
  %15 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1781
  br i1 %15, label %after_check, label %assign_optional, !dbg !1781

assign_optional:                                  ; preds = %checkok12
  store i64 %14, ptr %error_var, align 8, !dbg !1781
  br label %guard_block, !dbg !1781

after_check:                                      ; preds = %checkok12
  br label %noerr_block, !dbg !1781

guard_block:                                      ; preds = %assign_optional
  %16 = load i64, ptr %error_var, align 8, !dbg !1781
  ret i64 %16, !dbg !1781

noerr_block:                                      ; preds = %after_check
  %17 = load i64, ptr %.anon, align 8, !dbg !1774
  %addnuw = add nuw i64 %17, 1, !dbg !1774
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1774
  br label %loop.cond, !dbg !1774

loop.exit:                                        ; preds = %loop.cond
  %ptradd14 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1782
  %18 = load i64, ptr %ptradd14, align 8, !dbg !1782
  store i64 %18, ptr %0, align 8, !dbg !1782
  ret i64 0, !dbg !1782

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %19 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %20 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.138, i64 9 }, ptr %taddr2, align 8
  %21 = load [2 x i64], ptr %taddr2, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 194), !dbg !1771
  unreachable, !dbg !1771

panic4:                                           ; preds = %loop.body
  store i64 %7, ptr %taddr5, align 8
  %23 = insertvalue %any undef, ptr %taddr5, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr6, align 8
  %25 = insertvalue %any undef, ptr %taddr6, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr7, align 8
  %27 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr8, align 8
  %28 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.138, i64 9 }, ptr %taddr9, align 8
  %29 = load [2 x i64], ptr %taddr9, align 8
  store %any %24, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd10, align 8
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %31 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 196, [2 x i64] %31), !dbg !1780
  unreachable, !dbg !1780
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.etoa(ptr %0, ptr %1, double %2) #0 !dbg !1783 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1787
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1787
  br i1 %4, label %panic, label %checkok, !dbg !1787

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1788, metadata !DIExpression()), !dbg !1789
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1790, metadata !DIExpression()), !dbg !1791
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 1, double %6), !dbg !1787
  %not_err = icmp eq i64 %7, 0, !dbg !1787
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1787
  br i1 %8, label %after_check, label %assign_optional, !dbg !1787

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1787
  br label %err_retblock, !dbg !1787

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1787
  store i64 %9, ptr %0, align 8, !dbg !1787
  ret i64 0, !dbg !1787

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1787
  ret i64 %10, !dbg !1787

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.139, i64 4 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 208), !dbg !1789
  unreachable, !dbg !1789
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.ftoa(ptr %0, ptr %1, double %2) #0 !dbg !1792 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1793
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1793
  br i1 %4, label %panic, label %checkok, !dbg !1793

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1794, metadata !DIExpression()), !dbg !1795
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1796, metadata !DIExpression()), !dbg !1797
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 0, double %6), !dbg !1793
  %not_err = icmp eq i64 %7, 0, !dbg !1793
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1793
  br i1 %8, label %after_check, label %assign_optional, !dbg !1793

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1793
  br label %err_retblock, !dbg !1793

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1793
  store i64 %9, ptr %0, align 8, !dbg !1793
  ret i64 0, !dbg !1793

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1793
  ret i64 %10, !dbg !1793

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.140, i64 4 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 209), !dbg !1795
  unreachable, !dbg !1795
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.gtoa(ptr %0, ptr %1, double %2) #0 !dbg !1798 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1799
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1799
  br i1 %4, label %panic, label %checkok, !dbg !1799

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1800, metadata !DIExpression()), !dbg !1801
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1802, metadata !DIExpression()), !dbg !1803
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 2, double %6), !dbg !1799
  %not_err = icmp eq i64 %7, 0, !dbg !1799
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1799
  br i1 %8, label %after_check, label %assign_optional, !dbg !1799

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1799
  br label %err_retblock, !dbg !1799

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1799
  store i64 %9, ptr %0, align 8, !dbg !1799
  ret i64 0, !dbg !1799

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1799
  ret i64 %10, !dbg !1799

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.141, i64 4 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 210), !dbg !1801
  unreachable, !dbg !1801
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.atoa(ptr %0, ptr %1, double %2) #0 !dbg !1804 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %y = alloca double, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !1805
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !1805
  br i1 %4, label %panic, label %checkok, !dbg !1805

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1806, metadata !DIExpression()), !dbg !1807
  store double %2, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1808, metadata !DIExpression()), !dbg !1809
  %5 = load ptr, ptr %self, align 8
  %6 = load double, ptr %y, align 8
  %7 = call i64 @std.io.Formatter.floatformat(ptr %retparam, ptr %5, i32 3, double %6), !dbg !1805
  %not_err = icmp eq i64 %7, 0, !dbg !1805
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1805
  br i1 %8, label %after_check, label %assign_optional, !dbg !1805

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %reterr, align 8, !dbg !1805
  br label %err_retblock, !dbg !1805

after_check:                                      ; preds = %checkok
  %9 = load i64, ptr %retparam, align 8, !dbg !1805
  store i64 %9, ptr %0, align 8, !dbg !1805
  ret i64 0, !dbg !1805

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1805
  ret i64 %10, !dbg !1805

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.142, i64 4 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 211), !dbg !1807
  unreachable, !dbg !1807
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.floatformat(ptr %0, ptr %1, i32 %2, double %3) #0 !dbg !1810 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %formatting = alloca i32, align 4
  %y = alloca double, align 8
  %big = alloca [126 x i32], align 4
  %is_neg = alloca i8, align 1
  %x = alloca double, align 8
  %expr = alloca double, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %pl = alloca i64, align 8
  %x9 = alloca double, align 8
  %expr10 = alloca double, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %s = alloca %"char[]", align 8
  %x31 = alloca double, align 8
  %expr32 = alloca double, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %error_var48 = alloca i64, align 8
  %retparam50 = alloca i64, align 8
  %error_var58 = alloca i64, align 8
  %retparam59 = alloca i64, align 8
  %error_var70 = alloca i64, align 8
  %retparam75 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %e2 = alloca i32, align 4
  %x84 = alloca double, align 8
  %e = alloca ptr, align 8
  %ebuf0 = alloca [12 x i8], align 1
  %ebuf = alloca ptr, align 8
  %buf_array = alloca [22 x i8], align 1
  %buf = alloca ptr, align 8
  %p = alloca i64, align 8
  %round = alloca double, align 8
  %re = alloca i32, align 4
  %estr = alloca ptr, align 8
  %taddr135 = alloca %"char[]", align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr137 = alloca %"char[]", align 8
  %taddr143 = alloca %"char[]", align 8
  %taddr144 = alloca %"char[]", align 8
  %taddr145 = alloca %"char[]", align 8
  %taddr152 = alloca %"char[]", align 8
  %taddr153 = alloca %"char[]", align 8
  %taddr154 = alloca %"char[]", align 8
  %s160 = alloca ptr, align 8
  %xdigits = alloca ptr, align 8
  %x168 = alloca i32, align 4
  %taddr172 = alloca %"char[]", align 8
  %taddr173 = alloca %"char[]", align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr199 = alloca %"char[]", align 8
  %taddr200 = alloca %"char[]", align 8
  %taddr201 = alloca %"char[]", align 8
  %outlen = alloca i64, align 8
  %explen = alloca i64, align 8
  %len210 = alloca i64, align 8
  %l = alloca i64, align 8
  %error_var235 = alloca i64, align 8
  %retparam240 = alloca i64, align 8
  %error_var255 = alloca i64, align 8
  %retparam257 = alloca i64, align 8
  %error_var265 = alloca i64, align 8
  %retparam270 = alloca i64, align 8
  %taddr271 = alloca %"char[]", align 8
  %error_var281 = alloca i64, align 8
  %retparam286 = alloca i64, align 8
  %error_var294 = alloca i64, align 8
  %retparam296 = alloca i64, align 8
  %taddr297 = alloca %"char[]", align 8
  %error_var304 = alloca i64, align 8
  %retparam307 = alloca i64, align 8
  %error_var314 = alloca i64, align 8
  %retparam317 = alloca i64, align 8
  %taddr318 = alloca %"char[]", align 8
  %error_var329 = alloca i64, align 8
  %retparam334 = alloca i64, align 8
  %reterr342 = alloca i64, align 8
  %a = alloca ptr, align 8
  %z = alloca ptr, align 8
  %r = alloca ptr, align 8
  %v = alloca i32, align 4
  %carry = alloca i32, align 4
  %sh = alloca i32, align 4
  %x367 = alloca i32, align 4
  %y368 = alloca i32, align 4
  %d = alloca ptr, align 8
  %x372 = alloca i64, align 8
  %taddr375 = alloca %"char[]", align 8
  %taddr376 = alloca %"char[]", align 8
  %taddr377 = alloca %"char[]", align 8
  %taddr382 = alloca i64, align 8
  %taddr383 = alloca %"char[]", align 8
  %taddr384 = alloca %"char[]", align 8
  %taddr385 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr386 = alloca %"any[]", align 8
  %taddr392 = alloca %"char[]", align 8
  %taddr393 = alloca %"char[]", align 8
  %taddr394 = alloca %"char[]", align 8
  %taddr405 = alloca %"char[]", align 8
  %taddr406 = alloca %"char[]", align 8
  %taddr407 = alloca %"char[]", align 8
  %carry424 = alloca i32, align 4
  %b = alloca ptr, align 8
  %sh425 = alloca i32, align 4
  %x426 = alloca i32, align 4
  %y428 = alloca i32, align 4
  %need = alloca i32, align 4
  %d434 = alloca ptr, align 8
  %rm = alloca i32, align 4
  %taddr440 = alloca %"char[]", align 8
  %taddr441 = alloca %"char[]", align 8
  %taddr442 = alloca %"char[]", align 8
  %taddr445 = alloca i32, align 4
  %taddr446 = alloca %"char[]", align 8
  %taddr447 = alloca %"char[]", align 8
  %taddr448 = alloca %"char[]", align 8
  %varargslots449 = alloca [1 x %any], align 8
  %taddr451 = alloca %"any[]", align 8
  %taddr455 = alloca i32, align 4
  %taddr456 = alloca %"char[]", align 8
  %taddr457 = alloca %"char[]", align 8
  %taddr458 = alloca %"char[]", align 8
  %varargslots459 = alloca [1 x %any], align 8
  %taddr461 = alloca %"any[]", align 8
  %taddr468 = alloca %"char[]", align 8
  %taddr469 = alloca %"char[]", align 8
  %taddr470 = alloca %"char[]", align 8
  %taddr474 = alloca %"char[]", align 8
  %taddr475 = alloca %"char[]", align 8
  %taddr476 = alloca %"char[]", align 8
  %taddr480 = alloca i32, align 4
  %taddr481 = alloca %"char[]", align 8
  %taddr482 = alloca %"char[]", align 8
  %taddr483 = alloca %"char[]", align 8
  %varargslots484 = alloca [1 x %any], align 8
  %taddr486 = alloca %"any[]", align 8
  %taddr492 = alloca i32, align 4
  %taddr493 = alloca %"char[]", align 8
  %taddr494 = alloca %"char[]", align 8
  %taddr495 = alloca %"char[]", align 8
  %varargslots496 = alloca [1 x %any], align 8
  %taddr498 = alloca %"any[]", align 8
  %taddr502 = alloca i32, align 4
  %taddr503 = alloca %"char[]", align 8
  %taddr504 = alloca %"char[]", align 8
  %taddr505 = alloca %"char[]", align 8
  %varargslots506 = alloca [1 x %any], align 8
  %taddr508 = alloca %"any[]", align 8
  %e532 = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr540 = alloca %"char[]", align 8
  %taddr541 = alloca %"char[]", align 8
  %taddr542 = alloca %"char[]", align 8
  %j = alloca i32, align 4
  %x569 = alloca i32, align 4
  %d570 = alloca ptr, align 8
  %i579 = alloca i32, align 4
  %taddr589 = alloca %"char[]", align 8
  %taddr590 = alloca %"char[]", align 8
  %taddr591 = alloca %"char[]", align 8
  %taddr594 = alloca %"char[]", align 8
  %taddr595 = alloca %"char[]", align 8
  %taddr596 = alloca %"char[]", align 8
  %round606 = alloca double, align 8
  %small = alloca double, align 8
  %taddr609 = alloca %"char[]", align 8
  %taddr610 = alloca %"char[]", align 8
  %taddr611 = alloca %"char[]", align 8
  %taddr615 = alloca %"char[]", align 8
  %taddr616 = alloca %"char[]", align 8
  %taddr617 = alloca %"char[]", align 8
  %switch = alloca i8, align 1
  %taddr664 = alloca %"char[]", align 8
  %taddr665 = alloca %"char[]", align 8
  %taddr666 = alloca %"char[]", align 8
  %taddr674 = alloca %"char[]", align 8
  %taddr675 = alloca %"char[]", align 8
  %taddr676 = alloca %"char[]", align 8
  %taddr680 = alloca %"char[]", align 8
  %taddr681 = alloca %"char[]", align 8
  %taddr682 = alloca %"char[]", align 8
  %taddr688 = alloca %"char[]", align 8
  %taddr689 = alloca %"char[]", align 8
  %taddr690 = alloca %"char[]", align 8
  %taddr697 = alloca %"char[]", align 8
  %taddr698 = alloca %"char[]", align 8
  %taddr699 = alloca %"char[]", align 8
  %taddr706 = alloca %"char[]", align 8
  %taddr707 = alloca %"char[]", align 8
  %taddr708 = alloca %"char[]", align 8
  %taddr713 = alloca %"char[]", align 8
  %taddr714 = alloca %"char[]", align 8
  %taddr715 = alloca %"char[]", align 8
  %taddr724 = alloca %"char[]", align 8
  %taddr725 = alloca %"char[]", align 8
  %taddr726 = alloca %"char[]", align 8
  %i784 = alloca i32, align 4
  %taddr789 = alloca %"char[]", align 8
  %taddr790 = alloca %"char[]", align 8
  %taddr791 = alloca %"char[]", align 8
  %x803 = alloca i64, align 8
  %x804 = alloca i64, align 8
  %y809 = alloca i64, align 8
  %y810 = alloca i64, align 8
  %x812 = alloca i64, align 8
  %x813 = alloca i64, align 8
  %y820 = alloca i64, align 8
  %y821 = alloca i64, align 8
  %l837 = alloca i32, align 4
  %estr849 = alloca ptr, align 8
  %taddr876 = alloca %"char[]", align 8
  %taddr877 = alloca %"char[]", align 8
  %taddr878 = alloca %"char[]", align 8
  %taddr885 = alloca %"char[]", align 8
  %taddr886 = alloca %"char[]", align 8
  %taddr887 = alloca %"char[]", align 8
  %len906 = alloca i64, align 8
  %error_var918 = alloca i64, align 8
  %retparam924 = alloca i64, align 8
  %error_var939 = alloca i64, align 8
  %retparam941 = alloca i64, align 8
  %error_var952 = alloca i64, align 8
  %retparam958 = alloca i64, align 8
  %d971 = alloca ptr, align 8
  %s975 = alloca ptr, align 8
  %taddr978 = alloca %"char[]", align 8
  %taddr979 = alloca %"char[]", align 8
  %taddr980 = alloca %"char[]", align 8
  %switch984 = alloca i8, align 1
  %taddr1002 = alloca %"char[]", align 8
  %taddr1003 = alloca %"char[]", align 8
  %taddr1004 = alloca %"char[]", align 8
  %error_var1008 = alloca i64, align 8
  %retparam1012 = alloca i64, align 8
  %taddr1013 = alloca %"char[]", align 8
  %error_var1030 = alloca i64, align 8
  %retparam1031 = alloca i64, align 8
  %s1046 = alloca ptr, align 8
  %taddr1049 = alloca %"char[]", align 8
  %taddr1050 = alloca %"char[]", align 8
  %taddr1051 = alloca %"char[]", align 8
  %taddr1061 = alloca %"char[]", align 8
  %taddr1062 = alloca %"char[]", align 8
  %taddr1063 = alloca %"char[]", align 8
  %error_var1066 = alloca i64, align 8
  %x1067 = alloca i64, align 8
  %y1068 = alloca i64, align 8
  %retparam1071 = alloca i64, align 8
  %taddr1072 = alloca %"char[]", align 8
  %error_var1082 = alloca i64, align 8
  %retparam1084 = alloca i64, align 8
  %d1096 = alloca ptr, align 8
  %s1104 = alloca ptr, align 8
  %taddr1107 = alloca %"char[]", align 8
  %taddr1108 = alloca %"char[]", align 8
  %taddr1109 = alloca %"char[]", align 8
  %error_var1126 = alloca i64, align 8
  %retparam1128 = alloca i64, align 8
  %error_var1143 = alloca i64, align 8
  %retparam1144 = alloca i64, align 8
  %error_var1153 = alloca i64, align 8
  %x1155 = alloca i64, align 8
  %y1156 = alloca i64, align 8
  %retparam1159 = alloca i64, align 8
  %taddr1160 = alloca %"char[]", align 8
  %error_var1171 = alloca i64, align 8
  %retparam1173 = alloca i64, align 8
  %error_var1180 = alloca i64, align 8
  %retparam1183 = alloca i64, align 8
  %taddr1184 = alloca %"char[]", align 8
  %error_var1196 = alloca i64, align 8
  %retparam1202 = alloca i64, align 8
  %reterr1210 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !1813
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !1813
  br i1 %5, label %panic, label %checkok, !dbg !1813

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1814, metadata !DIExpression()), !dbg !1815
  store i32 %2, ptr %formatting, align 4
  call void @llvm.dbg.declare(metadata ptr %formatting, metadata !1816, metadata !DIExpression()), !dbg !1817
  store double %3, ptr %y, align 8
  call void @llvm.dbg.declare(metadata ptr %y, metadata !1818, metadata !DIExpression()), !dbg !1819
  call void @llvm.dbg.declare(metadata ptr %big, metadata !1820, metadata !DIExpression()), !dbg !1824
  call void @llvm.memset.p0.i64(ptr align 4 %big, i8 0, i64 504, i1 false), !dbg !1824
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !1825, metadata !DIExpression()), !dbg !1826
  store i8 0, ptr %is_neg, align 1, !dbg !1827
  %6 = load double, ptr %y, align 8
  store double %6, ptr %x, align 8
  %7 = load double, ptr %x, align 8
  store double %7, ptr %expr, align 8
  %checknull = icmp eq ptr %expr, null, !dbg !1828
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1828
  br i1 %8, label %panic3, label %checkok7, !dbg !1828

checkok7:                                         ; preds = %checkok
  %9 = load i64, ptr %expr, align 8, !dbg !1834
  %lshr = lshr i64 %9, 63, !dbg !1835
  %10 = freeze i64 %lshr, !dbg !1835
  %trunc = trunc i64 %10 to i32, !dbg !1835
  %i2b = icmp ne i32 %trunc, 0, !dbg !1835
  br i1 %i2b, label %if.then, label %if.exit, !dbg !1835

if.then:                                          ; preds = %checkok7
  store i8 1, ptr %is_neg, align 1, !dbg !1836
  %11 = load double, ptr %y, align 8, !dbg !1838
  %fneg = fneg double %11, !dbg !1838
  store double %fneg, ptr %y, align 8, !dbg !1838
  br label %if.exit, !dbg !1838

if.exit:                                          ; preds = %if.then, %checkok7
  call void @llvm.dbg.declare(metadata ptr %pl, metadata !1839, metadata !DIExpression()), !dbg !1840
  %12 = load i8, ptr %is_neg, align 1, !dbg !1841
  %13 = trunc i8 %12 to i1, !dbg !1841
  br i1 %13, label %or.phi, label %or.rhs, !dbg !1841

or.rhs:                                           ; preds = %if.exit
  %14 = load ptr, ptr %self, align 8, !dbg !1842
  %ptradd = getelementptr inbounds i8, ptr %14, i64 16, !dbg !1842
  %15 = load i32, ptr %ptradd, align 8, !dbg !1842
  %lshrl = lshr i32 %15, 2, !dbg !1842
  %16 = and i32 1, %lshrl, !dbg !1842
  %trunc8 = trunc i32 %16 to i8, !dbg !1842
  %17 = trunc i8 %trunc8 to i1, !dbg !1842
  br label %or.phi, !dbg !1842

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %17, %or.rhs ], !dbg !1842
  %ternary = select i1 %val, i64 1, i64 0, !dbg !1843
  store i64 %ternary, ptr %pl, align 8, !dbg !1843
  %18 = load double, ptr %y, align 8
  store double %18, ptr %x9, align 8
  %19 = load double, ptr %x9, align 8
  store double %19, ptr %expr10, align 8
  %checknull11 = icmp eq ptr %expr10, null, !dbg !1844
  %20 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !1844
  br i1 %20, label %panic12, label %checkok16, !dbg !1844

checkok16:                                        ; preds = %or.phi
  %21 = load i64, ptr %expr10, align 8, !dbg !1849
  %and = and i64 %21, 9223372036854775807, !dbg !1846
  %lt = icmp ult i64 %and, 9218868437227405312, !dbg !1846
  %not = xor i1 %lt, true, !dbg !1846
  br i1 %not, label %if.then17, label %if.exit83, !dbg !1846

if.then17:                                        ; preds = %checkok16
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1850, metadata !DIExpression()), !dbg !1852
  store i64 0, ptr %len, align 8, !dbg !1852
  %22 = load ptr, ptr %self, align 8, !dbg !1853
  %ptradd18 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1853
  %23 = load i32, ptr %ptradd18, align 8, !dbg !1853
  %lshrl19 = lshr i32 %23, 1, !dbg !1853
  %24 = and i32 1, %lshrl19, !dbg !1853
  %trunc20 = trunc i32 %24 to i8, !dbg !1853
  %25 = trunc i8 %trunc20 to i1, !dbg !1853
  %not21 = xor i1 %25, true, !dbg !1853
  br i1 %not21, label %if.then22, label %if.exit26, !dbg !1853

if.then22:                                        ; preds = %if.then17
  %26 = load i64, ptr %len, align 8, !dbg !1854
  %27 = load ptr, ptr %self, align 8, !dbg !1855
  %ptradd23 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !1855
  %ptradd24 = getelementptr inbounds i8, ptr %ptradd23, i64 4, !dbg !1855
  %28 = load i32, ptr %ptradd24, align 4, !dbg !1855
  %zext = zext i32 %28 to i64, !dbg !1855
  %29 = load i64, ptr %pl, align 8, !dbg !1856
  %add = add i64 3, %29, !dbg !1857
  %30 = load ptr, ptr %self, align 8
  %31 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %30, i8 32, i64 %zext, i64 %add) #5, !dbg !1858
  %not_err = icmp eq i64 %31, 0, !dbg !1858
  %32 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1858
  br i1 %32, label %after_check, label %assign_optional, !dbg !1858

assign_optional:                                  ; preds = %if.then22
  store i64 %31, ptr %error_var, align 8, !dbg !1858
  br label %guard_block, !dbg !1858

after_check:                                      ; preds = %if.then22
  br label %noerr_block, !dbg !1858

guard_block:                                      ; preds = %assign_optional
  %33 = load i64, ptr %error_var, align 8, !dbg !1858
  ret i64 %33, !dbg !1858

noerr_block:                                      ; preds = %after_check
  %34 = load i64, ptr %retparam, align 8, !dbg !1858
  %add25 = add i64 %26, %34, !dbg !1854
  store i64 %add25, ptr %len, align 8, !dbg !1854
  br label %if.exit26, !dbg !1854

if.exit26:                                        ; preds = %noerr_block, %if.then17
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1859, metadata !DIExpression()), !dbg !1860
  %35 = load ptr, ptr %self, align 8, !dbg !1861
  %ptradd27 = getelementptr inbounds i8, ptr %35, i64 16, !dbg !1861
  %36 = load i32, ptr %ptradd27, align 8, !dbg !1861
  %lshrl28 = lshr i32 %36, 5, !dbg !1861
  %37 = and i32 1, %lshrl28, !dbg !1861
  %trunc29 = trunc i32 %37 to i8, !dbg !1861
  %38 = trunc i8 %trunc29 to i1, !dbg !1861
  %ternary30 = select i1 %38, %"char[]" { ptr @.str.145, i64 3 }, %"char[]" { ptr @.str.146, i64 3 }, !dbg !1862
  store %"char[]" %ternary30, ptr %s, align 8, !dbg !1862
  %39 = load double, ptr %y, align 8
  store double %39, ptr %x31, align 8
  %40 = load double, ptr %x31, align 8
  store double %40, ptr %expr32, align 8
  %checknull33 = icmp eq ptr %expr32, null, !dbg !1863
  %41 = call i1 @llvm.expect.i1(i1 %checknull33, i1 false), !dbg !1863
  br i1 %41, label %panic34, label %checkok38, !dbg !1863

checkok38:                                        ; preds = %if.exit26
  %42 = load i64, ptr %expr32, align 8, !dbg !1868
  %and39 = and i64 %42, 9223372036854775807, !dbg !1865
  %gt = icmp ugt i64 %and39, 9218868437227405312, !dbg !1865
  br i1 %gt, label %if.then40, label %if.exit45, !dbg !1865

if.then40:                                        ; preds = %checkok38
  %43 = load ptr, ptr %self, align 8, !dbg !1869
  %ptradd41 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !1869
  %44 = load i32, ptr %ptradd41, align 8, !dbg !1869
  %lshrl42 = lshr i32 %44, 5, !dbg !1869
  %45 = and i32 1, %lshrl42, !dbg !1869
  %trunc43 = trunc i32 %45 to i8, !dbg !1869
  %46 = trunc i8 %trunc43 to i1, !dbg !1869
  %ternary44 = select i1 %46, %"char[]" { ptr @.str.147, i64 3 }, %"char[]" { ptr @.str.148, i64 3 }, !dbg !1870
  store %"char[]" %ternary44, ptr %s, align 8, !dbg !1870
  br label %if.exit45, !dbg !1870

if.exit45:                                        ; preds = %if.then40, %checkok38
  %47 = load i64, ptr %pl, align 8, !dbg !1871
  %i2b46 = icmp ne i64 %47, 0, !dbg !1871
  br i1 %i2b46, label %if.then47, label %if.exit57, !dbg !1871

if.then47:                                        ; preds = %if.exit45
  %48 = load i64, ptr %len, align 8, !dbg !1872
  %49 = load i8, ptr %is_neg, align 1, !dbg !1873
  %50 = trunc i8 %49 to i1, !dbg !1873
  %ternary49 = select i1 %50, i8 45, i8 43, !dbg !1874
  %51 = load ptr, ptr %self, align 8
  %52 = call i64 @std.io.Formatter.out(ptr %retparam50, ptr %51, i8 %ternary49), !dbg !1875
  %not_err51 = icmp eq i64 %52, 0, !dbg !1875
  %53 = call i1 @llvm.expect.i1(i1 %not_err51, i1 true), !dbg !1875
  br i1 %53, label %after_check53, label %assign_optional52, !dbg !1875

assign_optional52:                                ; preds = %if.then47
  store i64 %52, ptr %error_var48, align 8, !dbg !1875
  br label %guard_block54, !dbg !1875

after_check53:                                    ; preds = %if.then47
  br label %noerr_block55, !dbg !1875

guard_block54:                                    ; preds = %assign_optional52
  %54 = load i64, ptr %error_var48, align 8, !dbg !1875
  ret i64 %54, !dbg !1875

noerr_block55:                                    ; preds = %after_check53
  %55 = load i64, ptr %retparam50, align 8, !dbg !1875
  %add56 = add i64 %48, %55, !dbg !1872
  store i64 %add56, ptr %len, align 8, !dbg !1872
  br label %if.exit57, !dbg !1872

if.exit57:                                        ; preds = %noerr_block55, %if.exit45
  %56 = load i64, ptr %len, align 8, !dbg !1876
  %57 = load ptr, ptr %self, align 8
  %58 = load [2 x i64], ptr %s, align 8
  %59 = call i64 @std.io.Formatter.out_chars(ptr %retparam59, ptr %57, [2 x i64] %58), !dbg !1877
  %not_err60 = icmp eq i64 %59, 0, !dbg !1877
  %60 = call i1 @llvm.expect.i1(i1 %not_err60, i1 true), !dbg !1877
  br i1 %60, label %after_check62, label %assign_optional61, !dbg !1877

assign_optional61:                                ; preds = %if.exit57
  store i64 %59, ptr %error_var58, align 8, !dbg !1877
  br label %guard_block63, !dbg !1877

after_check62:                                    ; preds = %if.exit57
  br label %noerr_block64, !dbg !1877

guard_block63:                                    ; preds = %assign_optional61
  %61 = load i64, ptr %error_var58, align 8, !dbg !1877
  ret i64 %61, !dbg !1877

noerr_block64:                                    ; preds = %after_check62
  %62 = load i64, ptr %retparam59, align 8, !dbg !1877
  %add65 = add i64 %56, %62, !dbg !1876
  store i64 %add65, ptr %len, align 8, !dbg !1876
  %63 = load ptr, ptr %self, align 8, !dbg !1878
  %ptradd66 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !1878
  %64 = load i32, ptr %ptradd66, align 8, !dbg !1878
  %lshrl67 = lshr i32 %64, 1, !dbg !1878
  %65 = and i32 1, %lshrl67, !dbg !1878
  %trunc68 = trunc i32 %65 to i8, !dbg !1878
  %66 = trunc i8 %trunc68 to i1, !dbg !1878
  br i1 %66, label %if.then69, label %if.exit82, !dbg !1878

if.then69:                                        ; preds = %noerr_block64
  %67 = load i64, ptr %len, align 8, !dbg !1879
  %68 = load ptr, ptr %self, align 8, !dbg !1880
  %ptradd71 = getelementptr inbounds i8, ptr %68, i64 16, !dbg !1880
  %ptradd72 = getelementptr inbounds i8, ptr %ptradd71, i64 4, !dbg !1880
  %69 = load i32, ptr %ptradd72, align 4, !dbg !1880
  %zext73 = zext i32 %69 to i64, !dbg !1880
  %70 = load i64, ptr %pl, align 8, !dbg !1881
  %add74 = add i64 3, %70, !dbg !1882
  %71 = load ptr, ptr %self, align 8
  %72 = call i64 @std.io.Formatter.pad(ptr %retparam75, ptr %71, i8 32, i64 %zext73, i64 %add74) #5, !dbg !1883
  %not_err76 = icmp eq i64 %72, 0, !dbg !1883
  %73 = call i1 @llvm.expect.i1(i1 %not_err76, i1 true), !dbg !1883
  br i1 %73, label %after_check78, label %assign_optional77, !dbg !1883

assign_optional77:                                ; preds = %if.then69
  store i64 %72, ptr %error_var70, align 8, !dbg !1883
  br label %guard_block79, !dbg !1883

after_check78:                                    ; preds = %if.then69
  br label %noerr_block80, !dbg !1883

guard_block79:                                    ; preds = %assign_optional77
  %74 = load i64, ptr %error_var70, align 8, !dbg !1883
  ret i64 %74, !dbg !1883

noerr_block80:                                    ; preds = %after_check78
  %75 = load i64, ptr %retparam75, align 8, !dbg !1883
  %add81 = add i64 %67, %75, !dbg !1879
  store i64 %add81, ptr %len, align 8, !dbg !1879
  br label %if.exit82, !dbg !1879

if.exit82:                                        ; preds = %noerr_block80, %noerr_block64
  %76 = load i64, ptr %len, align 8, !dbg !1884
  store i64 %76, ptr %0, align 8, !dbg !1884
  ret i64 0, !dbg !1884

if.exit83:                                        ; preds = %checkok16
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !1885, metadata !DIExpression()), !dbg !1886
  store i32 0, ptr %e2, align 4, !dbg !1886
  %77 = load double, ptr %y, align 8
  store double %77, ptr %x84, align 8
  store ptr %e2, ptr %e, align 8
  %78 = load double, ptr %x84, align 8, !dbg !1887
  %79 = load ptr, ptr %e, align 8, !dbg !1887
  %80 = call double @std.math._frexp(double %78, ptr %79), !dbg !1890
  %fmul = fmul double %80, 2.000000e+00, !dbg !1889
  store double %fmul, ptr %y, align 8, !dbg !1889
  %81 = load double, ptr %y, align 8, !dbg !1891
  %neq = fcmp one double %81, 0.000000e+00, !dbg !1891
  br i1 %neq, label %if.then85, label %if.exit86, !dbg !1891

if.then85:                                        ; preds = %if.exit83
  %82 = load i32, ptr %e2, align 4, !dbg !1892
  %sub = sub i32 %82, 1, !dbg !1892
  store i32 %sub, ptr %e2, align 4, !dbg !1892
  br label %if.exit86, !dbg !1892

if.exit86:                                        ; preds = %if.then85, %if.exit83
  call void @llvm.dbg.declare(metadata ptr %ebuf0, metadata !1893, metadata !DIExpression()), !dbg !1897
  store i8 0, ptr %ebuf0, align 1, !dbg !1897
  %ptradd87 = getelementptr inbounds i8, ptr %ebuf0, i64 1, !dbg !1897
  store i8 0, ptr %ptradd87, align 1, !dbg !1897
  %ptradd88 = getelementptr inbounds i8, ptr %ebuf0, i64 2, !dbg !1897
  store i8 0, ptr %ptradd88, align 1, !dbg !1897
  %ptradd89 = getelementptr inbounds i8, ptr %ebuf0, i64 3, !dbg !1897
  store i8 0, ptr %ptradd89, align 1, !dbg !1897
  %ptradd90 = getelementptr inbounds i8, ptr %ebuf0, i64 4, !dbg !1897
  store i8 0, ptr %ptradd90, align 1, !dbg !1897
  %ptradd91 = getelementptr inbounds i8, ptr %ebuf0, i64 5, !dbg !1897
  store i8 0, ptr %ptradd91, align 1, !dbg !1897
  %ptradd92 = getelementptr inbounds i8, ptr %ebuf0, i64 6, !dbg !1897
  store i8 0, ptr %ptradd92, align 1, !dbg !1897
  %ptradd93 = getelementptr inbounds i8, ptr %ebuf0, i64 7, !dbg !1897
  store i8 0, ptr %ptradd93, align 1, !dbg !1897
  %ptradd94 = getelementptr inbounds i8, ptr %ebuf0, i64 8, !dbg !1897
  store i8 0, ptr %ptradd94, align 1, !dbg !1897
  %ptradd95 = getelementptr inbounds i8, ptr %ebuf0, i64 9, !dbg !1897
  store i8 0, ptr %ptradd95, align 1, !dbg !1897
  %ptradd96 = getelementptr inbounds i8, ptr %ebuf0, i64 10, !dbg !1897
  store i8 0, ptr %ptradd96, align 1, !dbg !1897
  %ptradd97 = getelementptr inbounds i8, ptr %ebuf0, i64 11, !dbg !1897
  store i8 0, ptr %ptradd97, align 1, !dbg !1897
  call void @llvm.dbg.declare(metadata ptr %ebuf, metadata !1898, metadata !DIExpression()), !dbg !1899
  %ptradd_any = getelementptr i8, ptr %ebuf0, i64 12, !dbg !1900
  store ptr %ptradd_any, ptr %ebuf, align 8, !dbg !1900
  call void @llvm.dbg.declare(metadata ptr %buf_array, metadata !1901, metadata !DIExpression()), !dbg !1905
  call void @llvm.memset.p0.i64(ptr align 1 %buf_array, i8 0, i64 22, i1 false), !dbg !1905
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !1906, metadata !DIExpression()), !dbg !1907
  store ptr %buf_array, ptr %buf, align 8, !dbg !1908
  call void @llvm.dbg.declare(metadata ptr %p, metadata !1909, metadata !DIExpression()), !dbg !1910
  %83 = load ptr, ptr %self, align 8, !dbg !1911
  %ptradd98 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !1911
  %84 = load i32, ptr %ptradd98, align 8, !dbg !1911
  %lshrl99 = lshr i32 %84, 6, !dbg !1911
  %85 = and i32 1, %lshrl99, !dbg !1911
  %trunc100 = trunc i32 %85 to i8, !dbg !1911
  %86 = trunc i8 %trunc100 to i1, !dbg !1911
  br i1 %86, label %cond.lhs, label %cond.rhs, !dbg !1911

cond.lhs:                                         ; preds = %if.exit86
  %87 = load ptr, ptr %self, align 8, !dbg !1912
  %ptradd101 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !1912
  %ptradd102 = getelementptr inbounds i8, ptr %ptradd101, i64 8, !dbg !1912
  %88 = load i32, ptr %ptradd102, align 8, !dbg !1912
  br label %cond.phi, !dbg !1912

cond.rhs:                                         ; preds = %if.exit86
  br label %cond.phi, !dbg !1913

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val103 = phi i32 [ %88, %cond.lhs ], [ -1, %cond.rhs ], !dbg !1913
  %sext = sext i32 %val103 to i64, !dbg !1913
  store i64 %sext, ptr %p, align 8, !dbg !1913
  %89 = load i32, ptr %formatting, align 4, !dbg !1914
  %eq = icmp eq i32 %89, 3, !dbg !1914
  br i1 %eq, label %if.then104, label %if.exit343, !dbg !1914

if.then104:                                       ; preds = %cond.phi
  call void @llvm.dbg.declare(metadata ptr %round, metadata !1915, metadata !DIExpression()), !dbg !1917
  store double 8.000000e+00, ptr %round, align 8, !dbg !1918
  %90 = load i64, ptr %pl, align 8, !dbg !1919
  %add105 = add i64 %90, 2, !dbg !1919
  store i64 %add105, ptr %pl, align 8, !dbg !1919
  %91 = load i64, ptr %p, align 8, !dbg !1920
  %gt106 = icmp sgt i64 %91, 0, !dbg !1920
  br i1 %gt106, label %and.rhs, label %and.phi, !dbg !1920

and.rhs:                                          ; preds = %if.then104
  %92 = load i64, ptr %p, align 8, !dbg !1921
  %lt107 = icmp slt i64 %92, 12, !dbg !1921
  br label %and.phi, !dbg !1921

and.phi:                                          ; preds = %and.rhs, %if.then104
  %val108 = phi i1 [ false, %if.then104 ], [ %lt107, %and.rhs ], !dbg !1921
  br i1 %val108, label %if.then109, label %if.exit122, !dbg !1921

if.then109:                                       ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %re, metadata !1922, metadata !DIExpression()), !dbg !1924
  %93 = load i64, ptr %p, align 8, !dbg !1925
  %trunc110 = trunc i64 %93 to i32, !dbg !1925
  %sub111 = sub i32 12, %trunc110, !dbg !1926
  store i32 %sub111, ptr %re, align 4, !dbg !1926
  %94 = load double, ptr %round, align 8, !dbg !1927
  %fmul112 = fmul double %94, 2.000000e+00, !dbg !1927
  store double %fmul112, ptr %round, align 8, !dbg !1927
  br label %loop.cond, !dbg !1928

loop.cond:                                        ; preds = %loop.body, %if.then109
  %95 = load i32, ptr %re, align 4, !dbg !1929
  %sub113 = sub i32 %95, 1, !dbg !1929
  store i32 %sub113, ptr %re, align 4, !dbg !1929
  %i2b114 = icmp ne i32 %95, 0, !dbg !1929
  br i1 %i2b114, label %loop.body, label %loop.exit, !dbg !1929

loop.body:                                        ; preds = %loop.cond
  %96 = load double, ptr %round, align 8, !dbg !1931
  %fmul115 = fmul double %96, 1.600000e+01, !dbg !1931
  store double %fmul115, ptr %round, align 8, !dbg !1931
  br label %loop.cond, !dbg !1931

loop.exit:                                        ; preds = %loop.cond
  %97 = load i8, ptr %is_neg, align 1, !dbg !1932
  %98 = trunc i8 %97 to i1, !dbg !1932
  br i1 %98, label %if.then116, label %if.else, !dbg !1932

if.then116:                                       ; preds = %loop.exit
  %99 = load double, ptr %y, align 8, !dbg !1933
  %fneg117 = fneg double %99, !dbg !1933
  store double %fneg117, ptr %y, align 8, !dbg !1933
  %100 = load double, ptr %y, align 8, !dbg !1935
  %101 = load double, ptr %round, align 8, !dbg !1936
  %fsub = fsub double %100, %101, !dbg !1935
  store double %fsub, ptr %y, align 8, !dbg !1935
  %102 = load double, ptr %y, align 8, !dbg !1937
  %103 = load double, ptr %round, align 8, !dbg !1938
  %fadd = fadd double %102, %103, !dbg !1937
  store double %fadd, ptr %y, align 8, !dbg !1937
  %104 = load double, ptr %y, align 8, !dbg !1939
  %fneg118 = fneg double %104, !dbg !1939
  store double %fneg118, ptr %y, align 8, !dbg !1939
  br label %if.exit121, !dbg !1939

if.else:                                          ; preds = %loop.exit
  %105 = load double, ptr %y, align 8, !dbg !1940
  %106 = load double, ptr %round, align 8, !dbg !1942
  %fadd119 = fadd double %105, %106, !dbg !1940
  store double %fadd119, ptr %y, align 8, !dbg !1940
  %107 = load double, ptr %y, align 8, !dbg !1943
  %108 = load double, ptr %round, align 8, !dbg !1944
  %fsub120 = fsub double %107, %108, !dbg !1943
  store double %fsub120, ptr %y, align 8, !dbg !1943
  br label %if.exit121, !dbg !1943

if.exit121:                                       ; preds = %if.else, %if.then116
  br label %if.exit122, !dbg !1943

if.exit122:                                       ; preds = %if.exit121, %and.phi
  call void @llvm.dbg.declare(metadata ptr %estr, metadata !1945, metadata !DIExpression()), !dbg !1946
  %109 = load i32, ptr %e2, align 4, !dbg !1947
  %lt123 = icmp slt i32 %109, 0, !dbg !1947
  br i1 %lt123, label %cond.lhs124, label %cond.rhs126, !dbg !1947

cond.lhs124:                                      ; preds = %if.exit122
  %110 = load i32, ptr %e2, align 4, !dbg !1948
  %neg = sub i32 0, %110, !dbg !1948
  %sext125 = sext i32 %neg to i128, !dbg !1948
  br label %cond.phi128, !dbg !1948

cond.rhs126:                                      ; preds = %if.exit122
  %111 = load i32, ptr %e2, align 4, !dbg !1949
  %sext127 = sext i32 %111 to i128, !dbg !1949
  br label %cond.phi128, !dbg !1949

cond.phi128:                                      ; preds = %cond.rhs126, %cond.lhs124
  %val129 = phi i128 [ %sext125, %cond.lhs124 ], [ %sext127, %cond.rhs126 ], !dbg !1949
  %112 = load ptr, ptr %ebuf, align 8, !dbg !1950
  %113 = call ptr @std.io.fmt_u(i128 %val129, ptr %112), !dbg !1951
  store ptr %113, ptr %estr, align 8, !dbg !1951
  %114 = load ptr, ptr %estr, align 8, !dbg !1952
  %115 = load ptr, ptr %ebuf, align 8, !dbg !1953
  %eq130 = icmp eq ptr %114, %115, !dbg !1952
  br i1 %eq130, label %if.then131, label %if.exit139, !dbg !1952

if.then131:                                       ; preds = %cond.phi128
  %116 = load ptr, ptr %estr, align 8, !dbg !1954
  %ptradd_any132 = getelementptr i8, ptr %116, i8 -1, !dbg !1954
  store ptr %ptradd_any132, ptr %estr, align 8, !dbg !1954
  %checknull133 = icmp eq ptr %ptradd_any132, null, !dbg !1954
  %117 = call i1 @llvm.expect.i1(i1 %checknull133, i1 false), !dbg !1954
  br i1 %117, label %panic134, label %checkok138, !dbg !1954

checkok138:                                       ; preds = %if.then131
  store i8 48, ptr %ptradd_any132, align 1, !dbg !1955
  br label %if.exit139, !dbg !1955

if.exit139:                                       ; preds = %checkok138, %cond.phi128
  %118 = load ptr, ptr %estr, align 8, !dbg !1956
  %ptradd_any140 = getelementptr i8, ptr %118, i8 -1, !dbg !1956
  store ptr %ptradd_any140, ptr %estr, align 8, !dbg !1956
  %checknull141 = icmp eq ptr %ptradd_any140, null, !dbg !1956
  %119 = call i1 @llvm.expect.i1(i1 %checknull141, i1 false), !dbg !1956
  br i1 %119, label %panic142, label %checkok146, !dbg !1956

checkok146:                                       ; preds = %if.exit139
  %120 = load i32, ptr %e2, align 4, !dbg !1957
  %lt147 = icmp slt i32 %120, 0, !dbg !1957
  %ternary148 = select i1 %lt147, i8 45, i8 43, !dbg !1958
  store i8 %ternary148, ptr %ptradd_any140, align 1, !dbg !1958
  %121 = load ptr, ptr %estr, align 8, !dbg !1959
  %ptradd_any149 = getelementptr i8, ptr %121, i8 -1, !dbg !1959
  store ptr %ptradd_any149, ptr %estr, align 8, !dbg !1959
  %checknull150 = icmp eq ptr %ptradd_any149, null, !dbg !1959
  %122 = call i1 @llvm.expect.i1(i1 %checknull150, i1 false), !dbg !1959
  br i1 %122, label %panic151, label %checkok155, !dbg !1959

checkok155:                                       ; preds = %checkok146
  %123 = load ptr, ptr %self, align 8, !dbg !1960
  %ptradd156 = getelementptr inbounds i8, ptr %123, i64 16, !dbg !1960
  %124 = load i32, ptr %ptradd156, align 8, !dbg !1960
  %lshrl157 = lshr i32 %124, 5, !dbg !1960
  %125 = and i32 1, %lshrl157, !dbg !1960
  %trunc158 = trunc i32 %125 to i8, !dbg !1960
  %126 = trunc i8 %trunc158 to i1, !dbg !1960
  %ternary159 = select i1 %126, i8 80, i8 112, !dbg !1961
  store i8 %ternary159, ptr %ptradd_any149, align 1, !dbg !1961
  call void @llvm.dbg.declare(metadata ptr %s160, metadata !1962, metadata !DIExpression()), !dbg !1963
  %127 = load ptr, ptr %buf, align 8, !dbg !1964
  store ptr %127, ptr %s160, align 8, !dbg !1964
  call void @llvm.dbg.declare(metadata ptr %xdigits, metadata !1965, metadata !DIExpression()), !dbg !1966
  %128 = load ptr, ptr %self, align 8, !dbg !1967
  %ptradd161 = getelementptr inbounds i8, ptr %128, i64 16, !dbg !1967
  %129 = load i32, ptr %ptradd161, align 8, !dbg !1967
  %lshrl162 = lshr i32 %129, 5, !dbg !1967
  %130 = and i32 1, %lshrl162, !dbg !1967
  %trunc163 = trunc i32 %130 to i8, !dbg !1967
  %131 = trunc i8 %trunc163 to i1, !dbg !1967
  %ternary164 = select i1 %131, ptr @std.io.XDIGITS_H, ptr @std.io.XDIGITS_L, !dbg !1968
  store ptr %ternary164, ptr %xdigits, align 8, !dbg !1968
  br label %loop.body167, !dbg !1969

loop.cond165:                                     ; preds = %if.exit203
  %132 = load double, ptr %y, align 8, !dbg !1970
  %neq166 = fcmp one double %132, 0.000000e+00, !dbg !1970
  br i1 %neq166, label %loop.body167, label %loop.exit204, !dbg !1970

loop.body167:                                     ; preds = %loop.cond165, %checkok155
  call void @llvm.dbg.declare(metadata ptr %x168, metadata !1972, metadata !DIExpression()), !dbg !1974
  %133 = load double, ptr %y, align 8, !dbg !1975
  %fpsi = fptosi double %133 to i32, !dbg !1975
  store i32 %fpsi, ptr %x168, align 4, !dbg !1975
  %134 = load ptr, ptr %s160, align 8, !dbg !1976
  %ptradd_any169 = getelementptr i8, ptr %134, i8 1, !dbg !1976
  store ptr %ptradd_any169, ptr %s160, align 8, !dbg !1976
  %checknull170 = icmp eq ptr %134, null, !dbg !1976
  %135 = call i1 @llvm.expect.i1(i1 %checknull170, i1 false), !dbg !1976
  br i1 %135, label %panic171, label %checkok175, !dbg !1976

checkok175:                                       ; preds = %loop.body167
  %136 = load ptr, ptr %xdigits, align 8, !dbg !1977
  %137 = load i32, ptr %x168, align 4, !dbg !1978
  %sext176 = sext i32 %137 to i64, !dbg !1978
  %ptradd177 = getelementptr inbounds i8, ptr %136, i64 %sext176, !dbg !1978
  %138 = load i8, ptr %ptradd177, align 1, !dbg !1978
  store i8 %138, ptr %134, align 1, !dbg !1978
  %139 = load double, ptr %y, align 8, !dbg !1979
  %140 = load i32, ptr %x168, align 4, !dbg !1980
  %sifp = sitofp i32 %140 to double, !dbg !1980
  %fsub178 = fsub double %139, %sifp, !dbg !1979
  %fmul179 = fmul double 1.600000e+01, %fsub178, !dbg !1981
  store double %fmul179, ptr %y, align 8, !dbg !1981
  %141 = load ptr, ptr %s160, align 8, !dbg !1982
  %142 = load ptr, ptr %buf, align 8, !dbg !1983
  %143 = ptrtoint ptr %141 to i64, !dbg !1982
  %144 = ptrtoint ptr %142 to i64, !dbg !1982
  %145 = sub i64 %143, %144, !dbg !1982
  %146 = sdiv exact i64 %145, 1, !dbg !1982
  %eq180 = icmp eq i64 %146, 1, !dbg !1982
  br i1 %eq180, label %and.rhs181, label %and.phi193, !dbg !1982

and.rhs181:                                       ; preds = %checkok175
  %147 = load double, ptr %y, align 8, !dbg !1984
  %neq182 = fcmp one double %147, 0.000000e+00, !dbg !1984
  br i1 %neq182, label %or.phi185, label %or.rhs183, !dbg !1984

or.rhs183:                                        ; preds = %and.rhs181
  %148 = load i64, ptr %p, align 8, !dbg !1985
  %gt184 = icmp sgt i64 %148, 0, !dbg !1985
  br label %or.phi185, !dbg !1985

or.phi185:                                        ; preds = %or.rhs183, %and.rhs181
  %val186 = phi i1 [ true, %and.rhs181 ], [ %gt184, %or.rhs183 ], !dbg !1985
  br i1 %val186, label %or.phi191, label %or.rhs187, !dbg !1985

or.rhs187:                                        ; preds = %or.phi185
  %149 = load ptr, ptr %self, align 8, !dbg !1986
  %ptradd188 = getelementptr inbounds i8, ptr %149, i64 16, !dbg !1986
  %150 = load i32, ptr %ptradd188, align 8, !dbg !1986
  %lshrl189 = lshr i32 %150, 4, !dbg !1986
  %151 = and i32 1, %lshrl189, !dbg !1986
  %trunc190 = trunc i32 %151 to i8, !dbg !1986
  %152 = trunc i8 %trunc190 to i1, !dbg !1986
  br label %or.phi191, !dbg !1986

or.phi191:                                        ; preds = %or.rhs187, %or.phi185
  %val192 = phi i1 [ true, %or.phi185 ], [ %152, %or.rhs187 ], !dbg !1986
  br label %and.phi193, !dbg !1986

and.phi193:                                       ; preds = %or.phi191, %checkok175
  %val194 = phi i1 [ false, %checkok175 ], [ %val192, %or.phi191 ], !dbg !1986
  br i1 %val194, label %if.then195, label %if.exit203, !dbg !1986

if.then195:                                       ; preds = %and.phi193
  %153 = load ptr, ptr %s160, align 8, !dbg !1987
  %ptradd_any196 = getelementptr i8, ptr %153, i8 1, !dbg !1987
  store ptr %ptradd_any196, ptr %s160, align 8, !dbg !1987
  %checknull197 = icmp eq ptr %153, null, !dbg !1987
  %154 = call i1 @llvm.expect.i1(i1 %checknull197, i1 false), !dbg !1987
  br i1 %154, label %panic198, label %checkok202, !dbg !1987

checkok202:                                       ; preds = %if.then195
  store i8 46, ptr %153, align 1, !dbg !1988
  br label %if.exit203, !dbg !1988

if.exit203:                                       ; preds = %checkok202, %and.phi193
  br label %loop.cond165, !dbg !1988

loop.exit204:                                     ; preds = %loop.cond165
  call void @llvm.dbg.declare(metadata ptr %outlen, metadata !1989, metadata !DIExpression()), !dbg !1990
  %155 = load ptr, ptr %s160, align 8, !dbg !1991
  %156 = load ptr, ptr %buf, align 8, !dbg !1992
  %157 = ptrtoint ptr %155 to i64, !dbg !1991
  %158 = ptrtoint ptr %156 to i64, !dbg !1991
  %159 = sub i64 %157, %158, !dbg !1991
  %160 = sdiv exact i64 %159, 1, !dbg !1991
  store i64 %160, ptr %outlen, align 8, !dbg !1991
  call void @llvm.dbg.declare(metadata ptr %explen, metadata !1993, metadata !DIExpression()), !dbg !1994
  %161 = load ptr, ptr %ebuf, align 8, !dbg !1995
  %162 = load ptr, ptr %estr, align 8, !dbg !1996
  %163 = ptrtoint ptr %161 to i64, !dbg !1995
  %164 = ptrtoint ptr %162 to i64, !dbg !1995
  %165 = sub i64 %163, %164, !dbg !1995
  %166 = sdiv exact i64 %165, 1, !dbg !1995
  store i64 %166, ptr %explen, align 8, !dbg !1995
  %167 = load i64, ptr %p, align 8, !dbg !1997
  %168 = load i64, ptr %explen, align 8, !dbg !1998
  %sub205 = sub i64 2147483645, %168, !dbg !1999
  %169 = load i64, ptr %pl, align 8, !dbg !2000
  %sub206 = sub i64 %sub205, %169, !dbg !1999
  %gt207 = icmp sgt i64 %167, %sub206, !dbg !1997
  br i1 %gt207, label %if.then208, label %if.exit209, !dbg !1997

if.then208:                                       ; preds = %loop.exit204
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2001

if.exit209:                                       ; preds = %loop.exit204
  call void @llvm.dbg.declare(metadata ptr %len210, metadata !2002, metadata !DIExpression()), !dbg !2003
  store i64 0, ptr %len210, align 8, !dbg !2003
  call void @llvm.dbg.declare(metadata ptr %l, metadata !2004, metadata !DIExpression()), !dbg !2005
  %170 = load i64, ptr %p, align 8, !dbg !2006
  %i2b211 = icmp ne i64 %170, 0, !dbg !2006
  br i1 %i2b211, label %and.rhs212, label %and.phi215, !dbg !2006

and.rhs212:                                       ; preds = %if.exit209
  %171 = load i64, ptr %outlen, align 8, !dbg !2007
  %sub213 = sub i64 %171, 2, !dbg !2007
  %172 = load i64, ptr %p, align 8, !dbg !2008
  %lt214 = icmp slt i64 %sub213, %172, !dbg !2007
  br label %and.phi215, !dbg !2007

and.phi215:                                       ; preds = %and.rhs212, %if.exit209
  %val216 = phi i1 [ false, %if.exit209 ], [ %lt214, %and.rhs212 ], !dbg !2007
  br i1 %val216, label %cond.lhs217, label %cond.rhs220, !dbg !2007

cond.lhs217:                                      ; preds = %and.phi215
  %173 = load i64, ptr %p, align 8, !dbg !2009
  %add218 = add i64 %173, 2, !dbg !2009
  %174 = load i64, ptr %explen, align 8, !dbg !2010
  %add219 = add i64 %add218, %174, !dbg !2009
  br label %cond.phi222, !dbg !2009

cond.rhs220:                                      ; preds = %and.phi215
  %175 = load i64, ptr %outlen, align 8, !dbg !2011
  %176 = load i64, ptr %explen, align 8, !dbg !2012
  %add221 = add i64 %175, %176, !dbg !2011
  br label %cond.phi222, !dbg !2011

cond.phi222:                                      ; preds = %cond.rhs220, %cond.lhs217
  %val223 = phi i64 [ %add219, %cond.lhs217 ], [ %add221, %cond.rhs220 ], !dbg !2011
  store i64 %val223, ptr %l, align 8, !dbg !2011
  %177 = load ptr, ptr %self, align 8, !dbg !2013
  %ptradd224 = getelementptr inbounds i8, ptr %177, i64 16, !dbg !2013
  %178 = load i32, ptr %ptradd224, align 8, !dbg !2013
  %lshrl225 = lshr i32 %178, 1, !dbg !2013
  %179 = and i32 1, %lshrl225, !dbg !2013
  %trunc226 = trunc i32 %179 to i8, !dbg !2013
  %180 = trunc i8 %trunc226 to i1, !dbg !2013
  %not227 = xor i1 %180, true, !dbg !2013
  br i1 %not227, label %and.rhs228, label %and.phi232, !dbg !2013

and.rhs228:                                       ; preds = %cond.phi222
  %181 = load ptr, ptr %self, align 8, !dbg !2014
  %ptradd229 = getelementptr inbounds i8, ptr %181, i64 16, !dbg !2014
  %182 = load i32, ptr %ptradd229, align 8, !dbg !2014
  %183 = and i32 1, %182, !dbg !2014
  %trunc230 = trunc i32 %183 to i8, !dbg !2014
  %184 = trunc i8 %trunc230 to i1, !dbg !2014
  %not231 = xor i1 %184, true, !dbg !2014
  br label %and.phi232, !dbg !2014

and.phi232:                                       ; preds = %and.rhs228, %cond.phi222
  %val233 = phi i1 [ false, %cond.phi222 ], [ %not231, %and.rhs228 ], !dbg !2014
  br i1 %val233, label %if.then234, label %if.exit247, !dbg !2014

if.then234:                                       ; preds = %and.phi232
  %185 = load i64, ptr %len210, align 8, !dbg !2015
  %186 = load ptr, ptr %self, align 8, !dbg !2016
  %ptradd236 = getelementptr inbounds i8, ptr %186, i64 16, !dbg !2016
  %ptradd237 = getelementptr inbounds i8, ptr %ptradd236, i64 4, !dbg !2016
  %187 = load i32, ptr %ptradd237, align 4, !dbg !2016
  %zext238 = zext i32 %187 to i64, !dbg !2016
  %188 = load i64, ptr %pl, align 8, !dbg !2017
  %189 = load i64, ptr %l, align 8, !dbg !2018
  %add239 = add i64 %188, %189, !dbg !2017
  %190 = load ptr, ptr %self, align 8
  %191 = call i64 @std.io.Formatter.pad(ptr %retparam240, ptr %190, i8 32, i64 %zext238, i64 %add239) #5, !dbg !2019
  %not_err241 = icmp eq i64 %191, 0, !dbg !2019
  %192 = call i1 @llvm.expect.i1(i1 %not_err241, i1 true), !dbg !2019
  br i1 %192, label %after_check243, label %assign_optional242, !dbg !2019

assign_optional242:                               ; preds = %if.then234
  store i64 %191, ptr %error_var235, align 8, !dbg !2019
  br label %guard_block244, !dbg !2019

after_check243:                                   ; preds = %if.then234
  br label %noerr_block245, !dbg !2019

guard_block244:                                   ; preds = %assign_optional242
  %193 = load i64, ptr %error_var235, align 8, !dbg !2019
  ret i64 %193, !dbg !2019

noerr_block245:                                   ; preds = %after_check243
  %194 = load i64, ptr %retparam240, align 8, !dbg !2019
  %add246 = add i64 %185, %194, !dbg !2015
  store i64 %add246, ptr %len210, align 8, !dbg !2015
  br label %if.exit247, !dbg !2015

if.exit247:                                       ; preds = %noerr_block245, %and.phi232
  %195 = load i8, ptr %is_neg, align 1, !dbg !2020
  %196 = trunc i8 %195 to i1, !dbg !2020
  br i1 %196, label %or.phi252, label %or.rhs248, !dbg !2020

or.rhs248:                                        ; preds = %if.exit247
  %197 = load ptr, ptr %self, align 8, !dbg !2021
  %ptradd249 = getelementptr inbounds i8, ptr %197, i64 16, !dbg !2021
  %198 = load i32, ptr %ptradd249, align 8, !dbg !2021
  %lshrl250 = lshr i32 %198, 2, !dbg !2021
  %199 = and i32 1, %lshrl250, !dbg !2021
  %trunc251 = trunc i32 %199 to i8, !dbg !2021
  %200 = trunc i8 %trunc251 to i1, !dbg !2021
  br label %or.phi252, !dbg !2021

or.phi252:                                        ; preds = %or.rhs248, %if.exit247
  %val253 = phi i1 [ true, %if.exit247 ], [ %200, %or.rhs248 ], !dbg !2021
  br i1 %val253, label %if.then254, label %if.exit264, !dbg !2021

if.then254:                                       ; preds = %or.phi252
  %201 = load i64, ptr %len210, align 8, !dbg !2022
  %202 = load i8, ptr %is_neg, align 1, !dbg !2023
  %203 = trunc i8 %202 to i1, !dbg !2023
  %ternary256 = select i1 %203, i8 45, i8 43, !dbg !2024
  %204 = load ptr, ptr %self, align 8
  %205 = call i64 @std.io.Formatter.out(ptr %retparam257, ptr %204, i8 %ternary256), !dbg !2025
  %not_err258 = icmp eq i64 %205, 0, !dbg !2025
  %206 = call i1 @llvm.expect.i1(i1 %not_err258, i1 true), !dbg !2025
  br i1 %206, label %after_check260, label %assign_optional259, !dbg !2025

assign_optional259:                               ; preds = %if.then254
  store i64 %205, ptr %error_var255, align 8, !dbg !2025
  br label %guard_block261, !dbg !2025

after_check260:                                   ; preds = %if.then254
  br label %noerr_block262, !dbg !2025

guard_block261:                                   ; preds = %assign_optional259
  %207 = load i64, ptr %error_var255, align 8, !dbg !2025
  ret i64 %207, !dbg !2025

noerr_block262:                                   ; preds = %after_check260
  %208 = load i64, ptr %retparam257, align 8, !dbg !2025
  %add263 = add i64 %201, %208, !dbg !2022
  store i64 %add263, ptr %len210, align 8, !dbg !2022
  br label %if.exit264, !dbg !2022

if.exit264:                                       ; preds = %noerr_block262, %or.phi252
  %209 = load i64, ptr %len210, align 8, !dbg !2026
  %210 = load ptr, ptr %self, align 8, !dbg !2027
  %ptradd266 = getelementptr inbounds i8, ptr %210, i64 16, !dbg !2027
  %211 = load i32, ptr %ptradd266, align 8, !dbg !2027
  %lshrl267 = lshr i32 %211, 5, !dbg !2027
  %212 = and i32 1, %lshrl267, !dbg !2027
  %trunc268 = trunc i32 %212 to i8, !dbg !2027
  %213 = trunc i8 %trunc268 to i1, !dbg !2027
  %ternary269 = select i1 %213, %"char[]" { ptr @.str.151, i64 2 }, %"char[]" { ptr @.str.152, i64 2 }, !dbg !2028
  %214 = load ptr, ptr %self, align 8
  store %"char[]" %ternary269, ptr %taddr271, align 8
  %215 = load [2 x i64], ptr %taddr271, align 8
  %216 = call i64 @std.io.Formatter.out_chars(ptr %retparam270, ptr %214, [2 x i64] %215), !dbg !2029
  %not_err272 = icmp eq i64 %216, 0, !dbg !2029
  %217 = call i1 @llvm.expect.i1(i1 %not_err272, i1 true), !dbg !2029
  br i1 %217, label %after_check274, label %assign_optional273, !dbg !2029

assign_optional273:                               ; preds = %if.exit264
  store i64 %216, ptr %error_var265, align 8, !dbg !2029
  br label %guard_block275, !dbg !2029

after_check274:                                   ; preds = %if.exit264
  br label %noerr_block276, !dbg !2029

guard_block275:                                   ; preds = %assign_optional273
  %218 = load i64, ptr %error_var265, align 8, !dbg !2029
  ret i64 %218, !dbg !2029

noerr_block276:                                   ; preds = %after_check274
  %219 = load i64, ptr %retparam270, align 8, !dbg !2029
  %add277 = add i64 %209, %219, !dbg !2026
  store i64 %add277, ptr %len210, align 8, !dbg !2026
  %220 = load ptr, ptr %self, align 8, !dbg !2030
  %ptradd278 = getelementptr inbounds i8, ptr %220, i64 16, !dbg !2030
  %221 = load i32, ptr %ptradd278, align 8, !dbg !2030
  %222 = and i32 1, %221, !dbg !2030
  %trunc279 = trunc i32 %222 to i8, !dbg !2030
  %223 = trunc i8 %trunc279 to i1, !dbg !2030
  br i1 %223, label %if.then280, label %if.exit293, !dbg !2030

if.then280:                                       ; preds = %noerr_block276
  %224 = load i64, ptr %len210, align 8, !dbg !2031
  %225 = load ptr, ptr %self, align 8, !dbg !2032
  %ptradd282 = getelementptr inbounds i8, ptr %225, i64 16, !dbg !2032
  %ptradd283 = getelementptr inbounds i8, ptr %ptradd282, i64 4, !dbg !2032
  %226 = load i32, ptr %ptradd283, align 4, !dbg !2032
  %zext284 = zext i32 %226 to i64, !dbg !2032
  %227 = load i64, ptr %pl, align 8, !dbg !2033
  %228 = load i64, ptr %l, align 8, !dbg !2034
  %add285 = add i64 %227, %228, !dbg !2033
  %229 = load ptr, ptr %self, align 8
  %230 = call i64 @std.io.Formatter.pad(ptr %retparam286, ptr %229, i8 48, i64 %zext284, i64 %add285) #5, !dbg !2035
  %not_err287 = icmp eq i64 %230, 0, !dbg !2035
  %231 = call i1 @llvm.expect.i1(i1 %not_err287, i1 true), !dbg !2035
  br i1 %231, label %after_check289, label %assign_optional288, !dbg !2035

assign_optional288:                               ; preds = %if.then280
  store i64 %230, ptr %error_var281, align 8, !dbg !2035
  br label %guard_block290, !dbg !2035

after_check289:                                   ; preds = %if.then280
  br label %noerr_block291, !dbg !2035

guard_block290:                                   ; preds = %assign_optional288
  %232 = load i64, ptr %error_var281, align 8, !dbg !2035
  ret i64 %232, !dbg !2035

noerr_block291:                                   ; preds = %after_check289
  %233 = load i64, ptr %retparam286, align 8, !dbg !2035
  %add292 = add i64 %224, %233, !dbg !2031
  store i64 %add292, ptr %len210, align 8, !dbg !2031
  br label %if.exit293, !dbg !2031

if.exit293:                                       ; preds = %noerr_block291, %noerr_block276
  %234 = load i64, ptr %len210, align 8, !dbg !2036
  %235 = load ptr, ptr %buf, align 8, !dbg !2037
  %236 = load i64, ptr %outlen, align 8, !dbg !2038
  %add295 = add i64 0, %236, !dbg !2038
  %size = sub i64 %add295, 0, !dbg !2038
  %237 = insertvalue %"char[]" undef, ptr %235, 0, !dbg !2038
  %238 = insertvalue %"char[]" %237, i64 %size, 1, !dbg !2038
  %239 = load ptr, ptr %self, align 8
  store %"char[]" %238, ptr %taddr297, align 8
  %240 = load [2 x i64], ptr %taddr297, align 8
  %241 = call i64 @std.io.Formatter.out_chars(ptr %retparam296, ptr %239, [2 x i64] %240), !dbg !2039
  %not_err298 = icmp eq i64 %241, 0, !dbg !2039
  %242 = call i1 @llvm.expect.i1(i1 %not_err298, i1 true), !dbg !2039
  br i1 %242, label %after_check300, label %assign_optional299, !dbg !2039

assign_optional299:                               ; preds = %if.exit293
  store i64 %241, ptr %error_var294, align 8, !dbg !2039
  br label %guard_block301, !dbg !2039

after_check300:                                   ; preds = %if.exit293
  br label %noerr_block302, !dbg !2039

guard_block301:                                   ; preds = %assign_optional299
  %243 = load i64, ptr %error_var294, align 8, !dbg !2039
  ret i64 %243, !dbg !2039

noerr_block302:                                   ; preds = %after_check300
  %244 = load i64, ptr %retparam296, align 8, !dbg !2039
  %add303 = add i64 %234, %244, !dbg !2036
  store i64 %add303, ptr %len210, align 8, !dbg !2036
  %245 = load i64, ptr %len210, align 8, !dbg !2040
  %246 = load i64, ptr %l, align 8, !dbg !2041
  %247 = load i64, ptr %outlen, align 8, !dbg !2042
  %sub305 = sub i64 %246, %247, !dbg !2041
  %248 = load i64, ptr %explen, align 8, !dbg !2043
  %sub306 = sub i64 %sub305, %248, !dbg !2041
  %249 = load ptr, ptr %self, align 8
  %250 = call i64 @std.io.Formatter.pad(ptr %retparam307, ptr %249, i8 48, i64 %sub306, i64 0) #5, !dbg !2044
  %not_err308 = icmp eq i64 %250, 0, !dbg !2044
  %251 = call i1 @llvm.expect.i1(i1 %not_err308, i1 true), !dbg !2044
  br i1 %251, label %after_check310, label %assign_optional309, !dbg !2044

assign_optional309:                               ; preds = %noerr_block302
  store i64 %250, ptr %error_var304, align 8, !dbg !2044
  br label %guard_block311, !dbg !2044

after_check310:                                   ; preds = %noerr_block302
  br label %noerr_block312, !dbg !2044

guard_block311:                                   ; preds = %assign_optional309
  %252 = load i64, ptr %error_var304, align 8, !dbg !2044
  ret i64 %252, !dbg !2044

noerr_block312:                                   ; preds = %after_check310
  %253 = load i64, ptr %retparam307, align 8, !dbg !2044
  %add313 = add i64 %245, %253, !dbg !2040
  store i64 %add313, ptr %len210, align 8, !dbg !2040
  %254 = load i64, ptr %len210, align 8, !dbg !2045
  %255 = load ptr, ptr %estr, align 8, !dbg !2046
  %256 = load i64, ptr %explen, align 8, !dbg !2047
  %add315 = add i64 0, %256, !dbg !2047
  %size316 = sub i64 %add315, 0, !dbg !2047
  %257 = insertvalue %"char[]" undef, ptr %255, 0, !dbg !2047
  %258 = insertvalue %"char[]" %257, i64 %size316, 1, !dbg !2047
  %259 = load ptr, ptr %self, align 8
  store %"char[]" %258, ptr %taddr318, align 8
  %260 = load [2 x i64], ptr %taddr318, align 8
  %261 = call i64 @std.io.Formatter.out_chars(ptr %retparam317, ptr %259, [2 x i64] %260), !dbg !2048
  %not_err319 = icmp eq i64 %261, 0, !dbg !2048
  %262 = call i1 @llvm.expect.i1(i1 %not_err319, i1 true), !dbg !2048
  br i1 %262, label %after_check321, label %assign_optional320, !dbg !2048

assign_optional320:                               ; preds = %noerr_block312
  store i64 %261, ptr %error_var314, align 8, !dbg !2048
  br label %guard_block322, !dbg !2048

after_check321:                                   ; preds = %noerr_block312
  br label %noerr_block323, !dbg !2048

guard_block322:                                   ; preds = %assign_optional320
  %263 = load i64, ptr %error_var314, align 8, !dbg !2048
  ret i64 %263, !dbg !2048

noerr_block323:                                   ; preds = %after_check321
  %264 = load i64, ptr %retparam317, align 8, !dbg !2048
  %add324 = add i64 %254, %264, !dbg !2045
  store i64 %add324, ptr %len210, align 8, !dbg !2045
  %265 = load ptr, ptr %self, align 8, !dbg !2049
  %ptradd325 = getelementptr inbounds i8, ptr %265, i64 16, !dbg !2049
  %266 = load i32, ptr %ptradd325, align 8, !dbg !2049
  %lshrl326 = lshr i32 %266, 1, !dbg !2049
  %267 = and i32 1, %lshrl326, !dbg !2049
  %trunc327 = trunc i32 %267 to i8, !dbg !2049
  %268 = trunc i8 %trunc327 to i1, !dbg !2049
  br i1 %268, label %if.then328, label %if.exit341, !dbg !2049

if.then328:                                       ; preds = %noerr_block323
  %269 = load i64, ptr %len210, align 8, !dbg !2050
  %270 = load ptr, ptr %self, align 8, !dbg !2051
  %ptradd330 = getelementptr inbounds i8, ptr %270, i64 16, !dbg !2051
  %ptradd331 = getelementptr inbounds i8, ptr %ptradd330, i64 4, !dbg !2051
  %271 = load i32, ptr %ptradd331, align 4, !dbg !2051
  %zext332 = zext i32 %271 to i64, !dbg !2051
  %272 = load i64, ptr %pl, align 8, !dbg !2052
  %273 = load i64, ptr %l, align 8, !dbg !2053
  %add333 = add i64 %272, %273, !dbg !2052
  %274 = load ptr, ptr %self, align 8
  %275 = call i64 @std.io.Formatter.pad(ptr %retparam334, ptr %274, i8 32, i64 %zext332, i64 %add333) #5, !dbg !2054
  %not_err335 = icmp eq i64 %275, 0, !dbg !2054
  %276 = call i1 @llvm.expect.i1(i1 %not_err335, i1 true), !dbg !2054
  br i1 %276, label %after_check337, label %assign_optional336, !dbg !2054

assign_optional336:                               ; preds = %if.then328
  store i64 %275, ptr %error_var329, align 8, !dbg !2054
  br label %guard_block338, !dbg !2054

after_check337:                                   ; preds = %if.then328
  br label %noerr_block339, !dbg !2054

guard_block338:                                   ; preds = %assign_optional336
  %277 = load i64, ptr %error_var329, align 8, !dbg !2054
  ret i64 %277, !dbg !2054

noerr_block339:                                   ; preds = %after_check337
  %278 = load i64, ptr %retparam334, align 8, !dbg !2054
  %add340 = add i64 %269, %278, !dbg !2050
  store i64 %add340, ptr %len210, align 8, !dbg !2050
  br label %if.exit341, !dbg !2050

if.exit341:                                       ; preds = %noerr_block339, %noerr_block323
  %279 = load i64, ptr %len210, align 8, !dbg !2055
  store i64 %279, ptr %0, align 8, !dbg !2055
  ret i64 0, !dbg !2055

if.exit343:                                       ; preds = %cond.phi
  %280 = load i64, ptr %p, align 8, !dbg !2056
  %lt344 = icmp slt i64 %280, 0, !dbg !2056
  br i1 %lt344, label %if.then345, label %if.exit346, !dbg !2056

if.then345:                                       ; preds = %if.exit343
  store i64 6, ptr %p, align 8, !dbg !2057
  br label %if.exit346, !dbg !2057

if.exit346:                                       ; preds = %if.then345, %if.exit343
  %281 = load double, ptr %y, align 8, !dbg !2058
  %neq347 = fcmp one double %281, 0.000000e+00, !dbg !2058
  br i1 %neq347, label %if.then348, label %if.exit351, !dbg !2058

if.then348:                                       ; preds = %if.exit346
  %282 = load double, ptr %y, align 8, !dbg !2059
  %fmul349 = fmul double %282, 0x41B0000000000000, !dbg !2059
  store double %fmul349, ptr %y, align 8, !dbg !2059
  %283 = load i32, ptr %e2, align 4, !dbg !2061
  %sub350 = sub i32 %283, 28, !dbg !2061
  store i32 %sub350, ptr %e2, align 4, !dbg !2061
  br label %if.exit351, !dbg !2061

if.exit351:                                       ; preds = %if.then348, %if.exit346
  call void @llvm.dbg.declare(metadata ptr %a, metadata !2062, metadata !DIExpression()), !dbg !2064
  store ptr null, ptr %a, align 8, !dbg !2064
  call void @llvm.dbg.declare(metadata ptr %z, metadata !2065, metadata !DIExpression()), !dbg !2066
  store ptr null, ptr %z, align 8, !dbg !2066
  call void @llvm.dbg.declare(metadata ptr %r, metadata !2067, metadata !DIExpression()), !dbg !2068
  store ptr null, ptr %r, align 8, !dbg !2068
  %284 = load i32, ptr %e2, align 4, !dbg !2069
  %lt352 = icmp slt i32 %284, 0, !dbg !2069
  br i1 %lt352, label %if.then353, label %if.else354, !dbg !2069

if.then353:                                       ; preds = %if.exit351
  store ptr %big, ptr %z, align 8, !dbg !2070
  store ptr %big, ptr %r, align 8, !dbg !2070
  store ptr %big, ptr %a, align 8, !dbg !2070
  br label %if.exit356, !dbg !2070

if.else354:                                       ; preds = %if.exit351
  %ptradd_any355 = getelementptr i8, ptr %big, i64 288, !dbg !2072
  store ptr %ptradd_any355, ptr %z, align 8, !dbg !2072
  store ptr %ptradd_any355, ptr %r, align 8, !dbg !2072
  store ptr %ptradd_any355, ptr %a, align 8, !dbg !2072
  br label %if.exit356, !dbg !2072

if.exit356:                                       ; preds = %if.else354, %if.then353
  br label %loop.body359, !dbg !2074

loop.cond357:                                     ; preds = %loop.body359
  %285 = load double, ptr %y, align 8, !dbg !2075
  %neq358 = fcmp one double %285, 0.000000e+00, !dbg !2075
  br i1 %neq358, label %loop.body359, label %loop.exit363, !dbg !2075

loop.body359:                                     ; preds = %loop.cond357, %if.exit356
  call void @llvm.dbg.declare(metadata ptr %v, metadata !2077, metadata !DIExpression()), !dbg !2079
  %286 = load ptr, ptr %z, align 8, !dbg !2080
  %ptradd_any360 = getelementptr i8, ptr %286, i8 4, !dbg !2080
  store ptr %ptradd_any360, ptr %z, align 8, !dbg !2080
  %287 = load double, ptr %y, align 8, !dbg !2081
  %fpui = fptoui double %287 to i32, !dbg !2081
  store i32 %fpui, ptr %286, align 4, !dbg !2081
  store i32 %fpui, ptr %v, align 4, !dbg !2081
  %288 = load double, ptr %y, align 8, !dbg !2082
  %289 = load i32, ptr %v, align 4, !dbg !2083
  %uifp = uitofp i32 %289 to double, !dbg !2083
  %fsub361 = fsub double %288, %uifp, !dbg !2082
  %fmul362 = fmul double 1.000000e+09, %fsub361, !dbg !2084
  store double %fmul362, ptr %y, align 8, !dbg !2084
  br label %loop.cond357, !dbg !2084

loop.exit363:                                     ; preds = %loop.cond357
  br label %loop.cond364, !dbg !2085

loop.cond364:                                     ; preds = %loop.exit418, %loop.exit363
  %290 = load i32, ptr %e2, align 4, !dbg !2086
  %gt365 = icmp sgt i32 %290, 0, !dbg !2086
  br i1 %gt365, label %loop.body366, label %loop.exit420, !dbg !2086

loop.body366:                                     ; preds = %loop.cond364
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !2088, metadata !DIExpression()), !dbg !2090
  store i32 0, ptr %carry, align 4, !dbg !2091
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !2092, metadata !DIExpression()), !dbg !2093
  store i32 29, ptr %x367, align 4
  %291 = load i32, ptr %e2, align 4
  store i32 %291, ptr %y368, align 4
  %292 = load i32, ptr %x367, align 4, !dbg !2094
  %293 = load i32, ptr %y368, align 4, !dbg !2097
  %294 = call i32 @llvm.smin.i32(i32 %292, i32 %293), !dbg !2097
  store i32 %294, ptr %sh, align 4, !dbg !2097
  call void @llvm.dbg.declare(metadata ptr %d, metadata !2098, metadata !DIExpression()), !dbg !2100
  %295 = load ptr, ptr %z, align 8, !dbg !2101
  %ptradd_any369 = getelementptr i8, ptr %295, i64 -4, !dbg !2102
  store ptr %ptradd_any369, ptr %d, align 8, !dbg !2102
  br label %loop.cond370, !dbg !2102

loop.cond370:                                     ; preds = %checkok395, %loop.body366
  %296 = load ptr, ptr %d, align 8, !dbg !2103
  %297 = load ptr, ptr %a, align 8, !dbg !2104
  %ge = icmp uge ptr %296, %297, !dbg !2103
  br i1 %ge, label %loop.body371, label %loop.exit399, !dbg !2103

loop.body371:                                     ; preds = %loop.cond370
  call void @llvm.dbg.declare(metadata ptr %x372, metadata !2105, metadata !DIExpression()), !dbg !2107
  %298 = load ptr, ptr %d, align 8, !dbg !2108
  %checknull373 = icmp eq ptr %298, null, !dbg !2108
  %299 = call i1 @llvm.expect.i1(i1 %checknull373, i1 false), !dbg !2108
  br i1 %299, label %panic374, label %checkok378, !dbg !2108

checkok378:                                       ; preds = %loop.body371
  %300 = load i32, ptr %298, align 4, !dbg !2108
  %zext379 = zext i32 %300 to i64, !dbg !2108
  %301 = load i32, ptr %sh, align 4, !dbg !2109
  %zext380 = zext i32 %301 to i64, !dbg !2110
  %shift_exceeds = icmp uge i64 %zext380, 64, !dbg !2110
  %302 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2110
  br i1 %302, label %panic381, label %checkok387, !dbg !2110

checkok387:                                       ; preds = %checkok378
  %shl = shl i64 %zext379, %zext380, !dbg !2110
  %303 = freeze i64 %shl, !dbg !2110
  %304 = load i32, ptr %carry, align 4, !dbg !2111
  %zext388 = zext i32 %304 to i64, !dbg !2111
  %add389 = add i64 %303, %zext388, !dbg !2110
  store i64 %add389, ptr %x372, align 8, !dbg !2110
  %305 = load ptr, ptr %d, align 8, !dbg !2112
  %checknull390 = icmp eq ptr %305, null, !dbg !2112
  %306 = call i1 @llvm.expect.i1(i1 %checknull390, i1 false), !dbg !2112
  br i1 %306, label %panic391, label %checkok395, !dbg !2112

checkok395:                                       ; preds = %checkok387
  %307 = load i64, ptr %x372, align 8, !dbg !2113
  %smod = srem i64 %307, 1000000000, !dbg !2114
  %trunc396 = trunc i64 %smod to i32, !dbg !2114
  store i32 %trunc396, ptr %305, align 4, !dbg !2114
  %308 = load i64, ptr %x372, align 8, !dbg !2115
  %sdiv = sdiv i64 %308, 1000000000, !dbg !2116
  %trunc397 = trunc i64 %sdiv to i32, !dbg !2116
  store i32 %trunc397, ptr %carry, align 4, !dbg !2116
  %309 = load ptr, ptr %d, align 8, !dbg !2117
  %ptradd_any398 = getelementptr i8, ptr %309, i8 -4, !dbg !2117
  store ptr %ptradd_any398, ptr %d, align 8, !dbg !2117
  br label %loop.cond370, !dbg !2117

loop.exit399:                                     ; preds = %loop.cond370
  %310 = load i32, ptr %carry, align 4, !dbg !2118
  %i2b400 = icmp ne i32 %310, 0, !dbg !2118
  br i1 %i2b400, label %if.then401, label %if.exit409, !dbg !2118

if.then401:                                       ; preds = %loop.exit399
  %311 = load ptr, ptr %a, align 8, !dbg !2119
  %ptradd_any402 = getelementptr i8, ptr %311, i8 -4, !dbg !2119
  store ptr %ptradd_any402, ptr %a, align 8, !dbg !2119
  %checknull403 = icmp eq ptr %ptradd_any402, null, !dbg !2119
  %312 = call i1 @llvm.expect.i1(i1 %checknull403, i1 false), !dbg !2119
  br i1 %312, label %panic404, label %checkok408, !dbg !2119

checkok408:                                       ; preds = %if.then401
  %313 = load i32, ptr %carry, align 4, !dbg !2120
  store i32 %313, ptr %ptradd_any402, align 4, !dbg !2120
  br label %if.exit409, !dbg !2120

if.exit409:                                       ; preds = %checkok408, %loop.exit399
  br label %loop.cond410, !dbg !2121

loop.cond410:                                     ; preds = %loop.body416, %if.exit409
  %314 = load ptr, ptr %z, align 8, !dbg !2122
  %315 = load ptr, ptr %a, align 8, !dbg !2124
  %gt411 = icmp ugt ptr %314, %315, !dbg !2122
  br i1 %gt411, label %and.rhs412, label %and.phi414, !dbg !2122

and.rhs412:                                       ; preds = %loop.cond410
  %316 = load ptr, ptr %z, align 8, !dbg !2125
  %ptradd413 = getelementptr inbounds i8, ptr %316, i64 -4, !dbg !2126
  %317 = load i32, ptr %ptradd413, align 4, !dbg !2126
  %i2nb = icmp eq i32 %317, 0, !dbg !2126
  br label %and.phi414, !dbg !2126

and.phi414:                                       ; preds = %and.rhs412, %loop.cond410
  %val415 = phi i1 [ false, %loop.cond410 ], [ %i2nb, %and.rhs412 ], !dbg !2126
  br i1 %val415, label %loop.body416, label %loop.exit418, !dbg !2126

loop.body416:                                     ; preds = %and.phi414
  %318 = load ptr, ptr %z, align 8, !dbg !2127
  %ptradd_any417 = getelementptr i8, ptr %318, i8 -4, !dbg !2127
  store ptr %ptradd_any417, ptr %z, align 8, !dbg !2127
  br label %loop.cond410, !dbg !2127

loop.exit418:                                     ; preds = %and.phi414
  %319 = load i32, ptr %e2, align 4, !dbg !2128
  %320 = load i32, ptr %sh, align 4, !dbg !2129
  %sub419 = sub i32 %319, %320, !dbg !2128
  store i32 %sub419, ptr %e2, align 4, !dbg !2128
  br label %loop.cond364, !dbg !2128

loop.exit420:                                     ; preds = %loop.cond364
  br label %loop.cond421, !dbg !2130

loop.cond421:                                     ; preds = %if.exit529, %loop.exit420
  %321 = load i32, ptr %e2, align 4, !dbg !2131
  %lt422 = icmp slt i32 %321, 0, !dbg !2131
  br i1 %lt422, label %loop.body423, label %loop.exit531, !dbg !2131

loop.body423:                                     ; preds = %loop.cond421
  call void @llvm.dbg.declare(metadata ptr %carry424, metadata !2133, metadata !DIExpression()), !dbg !2135
  store i32 0, ptr %carry424, align 4, !dbg !2136
  call void @llvm.dbg.declare(metadata ptr %b, metadata !2137, metadata !DIExpression()), !dbg !2138
  store ptr null, ptr %b, align 8, !dbg !2138
  call void @llvm.dbg.declare(metadata ptr %sh425, metadata !2139, metadata !DIExpression()), !dbg !2140
  store i32 9, ptr %x426, align 4
  %322 = load i32, ptr %e2, align 4, !dbg !2141
  %neg427 = sub i32 0, %322, !dbg !2141
  store i32 %neg427, ptr %y428, align 4
  %323 = load i32, ptr %x426, align 4, !dbg !2142
  %324 = load i32, ptr %y428, align 4, !dbg !2145
  %325 = call i32 @llvm.smin.i32(i32 %323, i32 %324), !dbg !2145
  store i32 %325, ptr %sh425, align 4, !dbg !2145
  call void @llvm.dbg.declare(metadata ptr %need, metadata !2146, metadata !DIExpression()), !dbg !2147
  %326 = load i64, ptr %p, align 8, !dbg !2148
  %add429 = add i64 %326, 17, !dbg !2148
  %add430 = add i64 %add429, 8, !dbg !2148
  %sdiv431 = sdiv i64 %add430, 9, !dbg !2148
  %add432 = add i64 1, %sdiv431, !dbg !2149
  %trunc433 = trunc i64 %add432 to i32, !dbg !2149
  store i32 %trunc433, ptr %need, align 4, !dbg !2149
  call void @llvm.dbg.declare(metadata ptr %d434, metadata !2150, metadata !DIExpression()), !dbg !2152
  %327 = load ptr, ptr %a, align 8, !dbg !2153
  store ptr %327, ptr %d434, align 8, !dbg !2153
  br label %loop.cond435, !dbg !2153

loop.cond435:                                     ; preds = %checkok509, %loop.body423
  %328 = load ptr, ptr %d434, align 8, !dbg !2154
  %329 = load ptr, ptr %z, align 8, !dbg !2155
  %lt436 = icmp ult ptr %328, %329, !dbg !2154
  br i1 %lt436, label %loop.body437, label %loop.exit511, !dbg !2154

loop.body437:                                     ; preds = %loop.cond435
  call void @llvm.dbg.declare(metadata ptr %rm, metadata !2156, metadata !DIExpression()), !dbg !2158
  %330 = load ptr, ptr %d434, align 8, !dbg !2159
  %checknull438 = icmp eq ptr %330, null, !dbg !2159
  %331 = call i1 @llvm.expect.i1(i1 %checknull438, i1 false), !dbg !2159
  br i1 %331, label %panic439, label %checkok443, !dbg !2159

checkok443:                                       ; preds = %loop.body437
  %332 = load i32, ptr %330, align 4, !dbg !2159
  %333 = load i32, ptr %sh425, align 4, !dbg !2160
  %shift_underflow = icmp slt i32 %333, 0, !dbg !2161
  %334 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !2161
  br i1 %334, label %panic444, label %checkok452, !dbg !2161

checkok452:                                       ; preds = %checkok443
  %shift_exceeds453 = icmp sge i32 %333, 32, !dbg !2161
  %335 = call i1 @llvm.expect.i1(i1 %shift_exceeds453, i1 false), !dbg !2161
  br i1 %335, label %panic454, label %checkok462, !dbg !2161

checkok462:                                       ; preds = %checkok452
  %shl463 = shl i32 1, %333, !dbg !2161
  %336 = freeze i32 %shl463, !dbg !2161
  %sub464 = sub i32 %336, 1, !dbg !2161
  %and465 = and i32 %332, %sub464, !dbg !2162
  store i32 %and465, ptr %rm, align 4, !dbg !2162
  %337 = load ptr, ptr %d434, align 8, !dbg !2163
  %checknull466 = icmp eq ptr %337, null, !dbg !2163
  %338 = call i1 @llvm.expect.i1(i1 %checknull466, i1 false), !dbg !2163
  br i1 %338, label %panic467, label %checkok471, !dbg !2163

checkok471:                                       ; preds = %checkok462
  %339 = load ptr, ptr %d434, align 8, !dbg !2164
  %checknull472 = icmp eq ptr %339, null, !dbg !2164
  %340 = call i1 @llvm.expect.i1(i1 %checknull472, i1 false), !dbg !2164
  br i1 %340, label %panic473, label %checkok477, !dbg !2164

checkok477:                                       ; preds = %checkok471
  %341 = load i32, ptr %339, align 4, !dbg !2164
  %342 = load i32, ptr %sh425, align 4, !dbg !2165
  %shift_exceeds478 = icmp uge i32 %342, 32, !dbg !2166
  %343 = call i1 @llvm.expect.i1(i1 %shift_exceeds478, i1 false), !dbg !2166
  br i1 %343, label %panic479, label %checkok487, !dbg !2166

checkok487:                                       ; preds = %checkok477
  %lshr488 = lshr i32 %341, %342, !dbg !2166
  %344 = freeze i32 %lshr488, !dbg !2166
  %345 = load i32, ptr %carry424, align 4, !dbg !2167
  %add489 = add i32 %344, %345, !dbg !2166
  store i32 %add489, ptr %337, align 4, !dbg !2166
  %346 = load i32, ptr %sh425, align 4, !dbg !2168
  %shift_underflow490 = icmp slt i32 %346, 0, !dbg !2169
  %347 = call i1 @llvm.expect.i1(i1 %shift_underflow490, i1 false), !dbg !2169
  br i1 %347, label %panic491, label %checkok499, !dbg !2169

checkok499:                                       ; preds = %checkok487
  %shift_exceeds500 = icmp sge i32 %346, 32, !dbg !2169
  %348 = call i1 @llvm.expect.i1(i1 %shift_exceeds500, i1 false), !dbg !2169
  br i1 %348, label %panic501, label %checkok509, !dbg !2169

checkok509:                                       ; preds = %checkok499
  %ashr = ashr i32 1000000000, %346, !dbg !2169
  %349 = freeze i32 %ashr, !dbg !2169
  %350 = load i32, ptr %rm, align 4, !dbg !2170
  %mul = mul i32 %349, %350, !dbg !2169
  store i32 %mul, ptr %carry424, align 4, !dbg !2169
  %351 = load ptr, ptr %d434, align 8, !dbg !2171
  %ptradd_any510 = getelementptr i8, ptr %351, i8 4, !dbg !2171
  store ptr %ptradd_any510, ptr %d434, align 8, !dbg !2171
  br label %loop.cond435, !dbg !2171

loop.exit511:                                     ; preds = %loop.cond435
  %352 = load ptr, ptr %a, align 8, !dbg !2172
  %353 = load i32, ptr %352, align 4, !dbg !2173
  %i2nb512 = icmp eq i32 %353, 0, !dbg !2173
  br i1 %i2nb512, label %if.then513, label %if.exit515, !dbg !2173

if.then513:                                       ; preds = %loop.exit511
  %354 = load ptr, ptr %a, align 8, !dbg !2174
  %ptradd_any514 = getelementptr i8, ptr %354, i8 4, !dbg !2174
  store ptr %ptradd_any514, ptr %a, align 8, !dbg !2174
  br label %if.exit515, !dbg !2174

if.exit515:                                       ; preds = %if.then513, %loop.exit511
  %355 = load i32, ptr %carry424, align 4, !dbg !2175
  %i2b516 = icmp ne i32 %355, 0, !dbg !2175
  br i1 %i2b516, label %if.then517, label %if.exit519, !dbg !2175

if.then517:                                       ; preds = %if.exit515
  %356 = load ptr, ptr %z, align 8, !dbg !2176
  %ptradd_any518 = getelementptr i8, ptr %356, i8 4, !dbg !2176
  store ptr %ptradd_any518, ptr %z, align 8, !dbg !2176
  %357 = load i32, ptr %carry424, align 4, !dbg !2177
  store i32 %357, ptr %356, align 4, !dbg !2177
  br label %if.exit519, !dbg !2177

if.exit519:                                       ; preds = %if.then517, %if.exit515
  %358 = load i32, ptr %formatting, align 4, !dbg !2178
  %eq520 = icmp eq i32 %358, 0, !dbg !2178
  br i1 %eq520, label %cond.lhs521, label %cond.rhs522, !dbg !2178

cond.lhs521:                                      ; preds = %if.exit519
  %359 = load ptr, ptr %r, align 8, !dbg !2179
  br label %cond.phi523, !dbg !2179

cond.rhs522:                                      ; preds = %if.exit519
  %360 = load ptr, ptr %a, align 8, !dbg !2180
  br label %cond.phi523, !dbg !2180

cond.phi523:                                      ; preds = %cond.rhs522, %cond.lhs521
  %val524 = phi ptr [ %359, %cond.lhs521 ], [ %360, %cond.rhs522 ], !dbg !2180
  store ptr %val524, ptr %b, align 8, !dbg !2180
  %361 = load ptr, ptr %z, align 8, !dbg !2181
  %362 = load ptr, ptr %b, align 8, !dbg !2182
  %363 = ptrtoint ptr %361 to i64, !dbg !2181
  %364 = ptrtoint ptr %362 to i64, !dbg !2181
  %365 = sub i64 %363, %364, !dbg !2181
  %366 = sdiv exact i64 %365, 4, !dbg !2181
  %367 = load i32, ptr %need, align 4, !dbg !2183
  %sext525 = sext i32 %367 to i64, !dbg !2183
  %gt526 = icmp sgt i64 %366, %sext525, !dbg !2181
  br i1 %gt526, label %if.then527, label %if.exit529, !dbg !2181

if.then527:                                       ; preds = %cond.phi523
  %368 = load ptr, ptr %b, align 8, !dbg !2184
  %369 = load i32, ptr %need, align 4, !dbg !2185
  %sext528 = sext i32 %369 to i64, !dbg !2185
  %ptroffset_any = getelementptr [4 x i8], ptr %368, i64 %sext528, !dbg !2185
  store ptr %ptroffset_any, ptr %z, align 8, !dbg !2185
  br label %if.exit529, !dbg !2185

if.exit529:                                       ; preds = %if.then527, %cond.phi523
  %370 = load i32, ptr %e2, align 4, !dbg !2186
  %371 = load i32, ptr %sh425, align 4, !dbg !2187
  %add530 = add i32 %370, %371, !dbg !2186
  store i32 %add530, ptr %e2, align 4, !dbg !2186
  br label %loop.cond421, !dbg !2186

loop.exit531:                                     ; preds = %loop.cond421
  call void @llvm.dbg.declare(metadata ptr %e532, metadata !2188, metadata !DIExpression()), !dbg !2189
  store i32 0, ptr %e532, align 4, !dbg !2189
  %372 = load ptr, ptr %a, align 8, !dbg !2190
  %373 = load ptr, ptr %z, align 8, !dbg !2191
  %lt533 = icmp ult ptr %372, %373, !dbg !2190
  br i1 %lt533, label %if.then534, label %if.exit548, !dbg !2190

if.then534:                                       ; preds = %loop.exit531
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2192, metadata !DIExpression()), !dbg !2195
  store i32 10, ptr %i, align 4, !dbg !2196
  %374 = load ptr, ptr %r, align 8, !dbg !2197
  %375 = load ptr, ptr %a, align 8, !dbg !2198
  %376 = ptrtoint ptr %374 to i64, !dbg !2197
  %377 = ptrtoint ptr %375 to i64, !dbg !2197
  %378 = sub i64 %376, %377, !dbg !2197
  %379 = sdiv exact i64 %378, 4, !dbg !2197
  %mul535 = mul i64 9, %379, !dbg !2199
  %trunc536 = trunc i64 %mul535 to i32, !dbg !2199
  store i32 %trunc536, ptr %e532, align 4, !dbg !2199
  br label %loop.cond537, !dbg !2199

loop.cond537:                                     ; preds = %loop.body544, %if.then534
  %380 = load ptr, ptr %a, align 8, !dbg !2200
  %checknull538 = icmp eq ptr %380, null, !dbg !2200
  %381 = call i1 @llvm.expect.i1(i1 %checknull538, i1 false), !dbg !2200
  br i1 %381, label %panic539, label %checkok543, !dbg !2200

checkok543:                                       ; preds = %loop.cond537
  %382 = load i32, ptr %380, align 4, !dbg !2200
  %383 = load i32, ptr %i, align 4, !dbg !2201
  %le = icmp sle i32 %383, %382, !dbg !2202
  %check = icmp slt i32 %382, 0, !dbg !2202
  %siui-le = or i1 %check, %le, !dbg !2202
  br i1 %siui-le, label %loop.body544, label %loop.exit547, !dbg !2202

loop.body544:                                     ; preds = %checkok543
  %384 = load i32, ptr %i, align 4, !dbg !2203
  %mul545 = mul i32 %384, 10, !dbg !2203
  store i32 %mul545, ptr %i, align 4, !dbg !2203
  %385 = load i32, ptr %e532, align 4, !dbg !2204
  %add546 = add i32 %385, 1, !dbg !2204
  store i32 %add546, ptr %e532, align 4, !dbg !2204
  br label %loop.cond537, !dbg !2204

loop.exit547:                                     ; preds = %checkok543
  br label %if.exit548, !dbg !2204

if.exit548:                                       ; preds = %loop.exit547, %loop.exit531
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2205, metadata !DIExpression()), !dbg !2206
  %386 = load i64, ptr %p, align 8, !dbg !2207
  %387 = load i32, ptr %formatting, align 4, !dbg !2208
  %eq549 = icmp eq i32 %387, 0, !dbg !2208
  br i1 %eq549, label %cond.lhs550, label %cond.rhs551, !dbg !2208

cond.lhs550:                                      ; preds = %if.exit548
  br label %cond.phi559, !dbg !2209

cond.rhs551:                                      ; preds = %if.exit548
  %388 = load i32, ptr %e532, align 4, !dbg !2210
  %389 = load i32, ptr %formatting, align 4, !dbg !2211
  %eq552 = icmp eq i32 %389, 2, !dbg !2211
  br i1 %eq552, label %and.rhs553, label %and.phi555, !dbg !2211

and.rhs553:                                       ; preds = %cond.rhs551
  %390 = load i64, ptr %p, align 8, !dbg !2212
  %i2b554 = icmp ne i64 %390, 0, !dbg !2212
  br label %and.phi555, !dbg !2212

and.phi555:                                       ; preds = %and.rhs553, %cond.rhs551
  %val556 = phi i1 [ false, %cond.rhs551 ], [ %i2b554, %and.rhs553 ], !dbg !2212
  %zext557 = zext i1 %val556 to i32, !dbg !2212
  %sub558 = sub i32 %388, %zext557, !dbg !2210
  br label %cond.phi559, !dbg !2210

cond.phi559:                                      ; preds = %and.phi555, %cond.lhs550
  %val560 = phi i32 [ 0, %cond.lhs550 ], [ %sub558, %and.phi555 ], !dbg !2210
  %sext561 = sext i32 %val560 to i64, !dbg !2210
  %sub562 = sub i64 %386, %sext561, !dbg !2213
  %trunc563 = trunc i64 %sub562 to i32, !dbg !2213
  store i32 %trunc563, ptr %j, align 4, !dbg !2213
  %391 = load i32, ptr %j, align 4, !dbg !2214
  %sext564 = sext i32 %391 to i64, !dbg !2214
  %392 = load ptr, ptr %z, align 8, !dbg !2215
  %393 = load ptr, ptr %r, align 8, !dbg !2216
  %394 = ptrtoint ptr %392 to i64, !dbg !2215
  %395 = ptrtoint ptr %393 to i64, !dbg !2215
  %396 = sub i64 %394, %395, !dbg !2215
  %397 = sdiv exact i64 %396, 4, !dbg !2215
  %sub565 = sub i64 %397, 1, !dbg !2215
  %mul566 = mul i64 9, %sub565, !dbg !2217
  %lt567 = icmp slt i64 %sext564, %mul566, !dbg !2214
  br i1 %lt567, label %if.then568, label %if.exit742, !dbg !2214

if.then568:                                       ; preds = %cond.phi559
  call void @llvm.dbg.declare(metadata ptr %x569, metadata !2218, metadata !DIExpression()), !dbg !2220
  store i32 0, ptr %x569, align 4, !dbg !2220
  call void @llvm.dbg.declare(metadata ptr %d570, metadata !2221, metadata !DIExpression()), !dbg !2222
  %398 = load ptr, ptr %r, align 8, !dbg !2223
  %399 = load i32, ptr %j, align 4, !dbg !2224
  %add571 = add i32 %399, 9216, !dbg !2224
  %sdiv572 = sdiv i32 %add571, 9, !dbg !2224
  %sub573 = sub i32 %sdiv572, 1024, !dbg !2224
  %sext574 = sext i32 %sub573 to i64, !dbg !2224
  %add575 = add i64 1, %sext574, !dbg !2223
  %ptroffset_any576 = getelementptr [4 x i8], ptr %398, i64 %add575, !dbg !2223
  store ptr %ptroffset_any576, ptr %d570, align 8, !dbg !2223
  %400 = load i32, ptr %j, align 4, !dbg !2225
  %add577 = add i32 %400, 9216, !dbg !2225
  store i32 %add577, ptr %j, align 4, !dbg !2225
  %401 = load i32, ptr %j, align 4, !dbg !2226
  %smod578 = srem i32 %401, 9, !dbg !2226
  store i32 %smod578, ptr %j, align 4, !dbg !2226
  call void @llvm.dbg.declare(metadata ptr %i579, metadata !2227, metadata !DIExpression()), !dbg !2228
  store i32 0, ptr %i579, align 4, !dbg !2228
  store i32 10, ptr %i579, align 4, !dbg !2229
  %402 = load i32, ptr %j, align 4, !dbg !2231
  %add580 = add i32 %402, 1, !dbg !2231
  store i32 %add580, ptr %j, align 4, !dbg !2231
  br label %loop.cond581, !dbg !2231

loop.cond581:                                     ; preds = %loop.body583, %if.then568
  %403 = load i32, ptr %j, align 4, !dbg !2232
  %lt582 = icmp slt i32 %403, 9, !dbg !2232
  br i1 %lt582, label %loop.body583, label %loop.exit586, !dbg !2232

loop.body583:                                     ; preds = %loop.cond581
  %404 = load i32, ptr %i579, align 4, !dbg !2233
  %mul584 = mul i32 %404, 10, !dbg !2233
  store i32 %mul584, ptr %i579, align 4, !dbg !2233
  %405 = load i32, ptr %j, align 4, !dbg !2234
  %add585 = add i32 %405, 1, !dbg !2234
  store i32 %add585, ptr %j, align 4, !dbg !2234
  br label %loop.cond581, !dbg !2234

loop.exit586:                                     ; preds = %loop.cond581
  %406 = load ptr, ptr %d570, align 8, !dbg !2235
  %checknull587 = icmp eq ptr %406, null, !dbg !2235
  %407 = call i1 @llvm.expect.i1(i1 %checknull587, i1 false), !dbg !2235
  br i1 %407, label %panic588, label %checkok592, !dbg !2235

checkok592:                                       ; preds = %loop.exit586
  %408 = load i32, ptr %406, align 4, !dbg !2235
  %409 = load i32, ptr %i579, align 4, !dbg !2236
  %zero = icmp eq i32 %409, 0, !dbg !2237
  %410 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2237
  br i1 %410, label %panic593, label %checkok597, !dbg !2237

checkok597:                                       ; preds = %checkok592
  %smod598 = srem i32 %408, %409, !dbg !2237
  store i32 %smod598, ptr %x569, align 4, !dbg !2237
  %411 = load i32, ptr %x569, align 4, !dbg !2238
  %i2b599 = icmp ne i32 %411, 0, !dbg !2238
  br i1 %i2b599, label %or.phi603, label %or.rhs600, !dbg !2238

or.rhs600:                                        ; preds = %checkok597
  %412 = load ptr, ptr %d570, align 8, !dbg !2239
  %ptradd_any601 = getelementptr i8, ptr %412, i64 4, !dbg !2240
  %413 = load ptr, ptr %z, align 8, !dbg !2241
  %neq602 = icmp ne ptr %ptradd_any601, %413, !dbg !2239
  br label %or.phi603, !dbg !2239

or.phi603:                                        ; preds = %or.rhs600, %checkok597
  %val604 = phi i1 [ true, %checkok597 ], [ %neq602, %or.rhs600 ], !dbg !2239
  br i1 %val604, label %if.then605, label %if.exit736, !dbg !2239

if.then605:                                       ; preds = %or.phi603
  call void @llvm.dbg.declare(metadata ptr %round606, metadata !2242, metadata !DIExpression()), !dbg !2244
  store double 0x4340000000000000, ptr %round606, align 8, !dbg !2245
  call void @llvm.dbg.declare(metadata ptr %small, metadata !2246, metadata !DIExpression()), !dbg !2247
  store double 0.000000e+00, ptr %small, align 8, !dbg !2247
  %414 = load ptr, ptr %d570, align 8, !dbg !2248
  %checknull607 = icmp eq ptr %414, null, !dbg !2248
  %415 = call i1 @llvm.expect.i1(i1 %checknull607, i1 false), !dbg !2248
  br i1 %415, label %panic608, label %checkok612, !dbg !2248

checkok612:                                       ; preds = %if.then605
  %416 = load i32, ptr %414, align 4, !dbg !2248
  %417 = load i32, ptr %i579, align 4, !dbg !2249
  %zero613 = icmp eq i32 %417, 0, !dbg !2250
  %418 = call i1 @llvm.expect.i1(i1 %zero613, i1 false), !dbg !2250
  br i1 %418, label %panic614, label %checkok618, !dbg !2250

checkok618:                                       ; preds = %checkok612
  %sdiv619 = sdiv i32 %416, %417, !dbg !2250
  %and620 = and i32 %sdiv619, 1, !dbg !2250
  %i2b621 = icmp ne i32 %and620, 0, !dbg !2250
  br i1 %i2b621, label %or.phi634, label %or.rhs622, !dbg !2250

or.rhs622:                                        ; preds = %checkok618
  %419 = load i32, ptr %i579, align 4, !dbg !2251
  %eq623 = icmp eq i32 %419, 1000000000, !dbg !2251
  br i1 %eq623, label %and.rhs624, label %and.phi626, !dbg !2251

and.rhs624:                                       ; preds = %or.rhs622
  %420 = load ptr, ptr %d570, align 8, !dbg !2252
  %421 = load ptr, ptr %a, align 8, !dbg !2253
  %gt625 = icmp ugt ptr %420, %421, !dbg !2252
  br label %and.phi626, !dbg !2252

and.phi626:                                       ; preds = %and.rhs624, %or.rhs622
  %val627 = phi i1 [ false, %or.rhs622 ], [ %gt625, %and.rhs624 ], !dbg !2252
  br i1 %val627, label %and.rhs628, label %and.phi632, !dbg !2252

and.rhs628:                                       ; preds = %and.phi626
  %422 = load ptr, ptr %d570, align 8, !dbg !2254
  %ptradd629 = getelementptr inbounds i8, ptr %422, i64 -4, !dbg !2255
  %423 = load i32, ptr %ptradd629, align 4, !dbg !2255
  %and630 = and i32 %423, 1, !dbg !2254
  %i2b631 = icmp ne i32 %and630, 0, !dbg !2254
  br label %and.phi632, !dbg !2254

and.phi632:                                       ; preds = %and.rhs628, %and.phi626
  %val633 = phi i1 [ false, %and.phi626 ], [ %i2b631, %and.rhs628 ], !dbg !2254
  br label %or.phi634, !dbg !2254

or.phi634:                                        ; preds = %and.phi632, %checkok618
  %val635 = phi i1 [ true, %checkok618 ], [ %val633, %and.phi632 ], !dbg !2254
  br i1 %val635, label %if.then636, label %if.exit638, !dbg !2254

if.then636:                                       ; preds = %or.phi634
  %424 = load double, ptr %round606, align 8, !dbg !2256
  %fadd637 = fadd double %424, 2.000000e+00, !dbg !2256
  store double %fadd637, ptr %round606, align 8, !dbg !2256
  br label %if.exit638, !dbg !2256

if.exit638:                                       ; preds = %if.then636, %or.phi634
  store i8 1, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit638
  %425 = load i8, ptr %switch, align 1
  %426 = trunc i8 %425 to i1
  %427 = load i32, ptr %x569, align 4, !dbg !2258
  %428 = load i32, ptr %i579, align 4, !dbg !2260
  %sdiv639 = sdiv i32 %428, 2, !dbg !2260
  %gt640 = icmp sgt i32 %sdiv639, %427, !dbg !2258
  %check641 = icmp sge i32 %427, 0, !dbg !2258
  %siui-gt = and i1 %check641, %gt640, !dbg !2258
  %eq642 = icmp eq i1 %siui-gt, %426, !dbg !2258
  br i1 %eq642, label %switch.case, label %next_if, !dbg !2258

switch.case:                                      ; preds = %switch.entry
  store double 5.000000e-01, ptr %small, align 8, !dbg !2261
  br label %switch.exit, !dbg !2261

next_if:                                          ; preds = %switch.entry
  %429 = load i32, ptr %x569, align 4, !dbg !2263
  %430 = load i32, ptr %i579, align 4, !dbg !2264
  %sdiv643 = sdiv i32 %430, 2, !dbg !2264
  %eq644 = icmp eq i32 %sdiv643, %429, !dbg !2263
  %check645 = icmp sge i32 %sdiv643, 0, !dbg !2263
  %siui-eq = and i1 %check645, %eq644, !dbg !2263
  br i1 %siui-eq, label %and.rhs646, label %and.phi649, !dbg !2263

and.rhs646:                                       ; preds = %next_if
  %431 = load ptr, ptr %d570, align 8, !dbg !2265
  %ptradd_any647 = getelementptr i8, ptr %431, i64 4, !dbg !2266
  %432 = load ptr, ptr %z, align 8, !dbg !2267
  %eq648 = icmp eq ptr %ptradd_any647, %432, !dbg !2265
  br label %and.phi649, !dbg !2265

and.phi649:                                       ; preds = %and.rhs646, %next_if
  %val650 = phi i1 [ false, %next_if ], [ %eq648, %and.rhs646 ], !dbg !2265
  %eq651 = icmp eq i1 %val650, %426, !dbg !2265
  br i1 %eq651, label %switch.case652, label %next_if653, !dbg !2265

switch.case652:                                   ; preds = %and.phi649
  store double 1.000000e+00, ptr %small, align 8, !dbg !2268
  br label %switch.exit, !dbg !2268

next_if653:                                       ; preds = %and.phi649
  br label %switch.default, !dbg !2268

switch.default:                                   ; preds = %next_if653
  store double 1.500000e+00, ptr %small, align 8, !dbg !2270
  br label %switch.exit, !dbg !2270

switch.exit:                                      ; preds = %switch.default, %switch.case652, %switch.case
  %433 = load i64, ptr %pl, align 8, !dbg !2272
  %i2b654 = icmp ne i64 %433, 0, !dbg !2272
  br i1 %i2b654, label %and.rhs655, label %and.phi656, !dbg !2272

and.rhs655:                                       ; preds = %switch.exit
  %434 = load i8, ptr %is_neg, align 1, !dbg !2273
  %435 = trunc i8 %434 to i1, !dbg !2273
  br label %and.phi656, !dbg !2273

and.phi656:                                       ; preds = %and.rhs655, %switch.exit
  %val657 = phi i1 [ false, %switch.exit ], [ %435, %and.rhs655 ], !dbg !2273
  br i1 %val657, label %if.then658, label %if.exit661, !dbg !2273

if.then658:                                       ; preds = %and.phi656
  %436 = load double, ptr %round606, align 8, !dbg !2274
  %fmul659 = fmul double %436, -1.000000e+00, !dbg !2274
  store double %fmul659, ptr %round606, align 8, !dbg !2274
  %437 = load double, ptr %small, align 8, !dbg !2276
  %fmul660 = fmul double %437, -1.000000e+00, !dbg !2276
  store double %fmul660, ptr %small, align 8, !dbg !2276
  br label %if.exit661, !dbg !2276

if.exit661:                                       ; preds = %if.then658, %and.phi656
  %438 = load ptr, ptr %d570, align 8, !dbg !2277
  %checknull662 = icmp eq ptr %438, null, !dbg !2277
  %439 = call i1 @llvm.expect.i1(i1 %checknull662, i1 false), !dbg !2277
  br i1 %439, label %panic663, label %checkok667, !dbg !2277

checkok667:                                       ; preds = %if.exit661
  %440 = load i32, ptr %438, align 4, !dbg !2277
  %441 = load i32, ptr %x569, align 4, !dbg !2278
  %sub668 = sub i32 %440, %441, !dbg !2279
  store i32 %sub668, ptr %438, align 4, !dbg !2279
  %442 = load double, ptr %round606, align 8, !dbg !2280
  %443 = load double, ptr %small, align 8, !dbg !2281
  %fadd669 = fadd double %442, %443, !dbg !2280
  %444 = load double, ptr %round606, align 8, !dbg !2282
  %neq670 = fcmp one double %fadd669, %444, !dbg !2280
  br i1 %neq670, label %if.then671, label %if.exit735, !dbg !2280

if.then671:                                       ; preds = %checkok667
  %445 = load ptr, ptr %d570, align 8, !dbg !2283
  %checknull672 = icmp eq ptr %445, null, !dbg !2283
  %446 = call i1 @llvm.expect.i1(i1 %checknull672, i1 false), !dbg !2283
  br i1 %446, label %panic673, label %checkok677, !dbg !2283

checkok677:                                       ; preds = %if.then671
  %447 = load ptr, ptr %d570, align 8, !dbg !2285
  %checknull678 = icmp eq ptr %447, null, !dbg !2285
  %448 = call i1 @llvm.expect.i1(i1 %checknull678, i1 false), !dbg !2285
  br i1 %448, label %panic679, label %checkok683, !dbg !2285

checkok683:                                       ; preds = %checkok677
  %449 = load i32, ptr %447, align 4, !dbg !2285
  %450 = load i32, ptr %i579, align 4, !dbg !2286
  %add684 = add i32 %449, %450, !dbg !2287
  store i32 %add684, ptr %445, align 4, !dbg !2287
  br label %loop.cond685, !dbg !2288

loop.cond685:                                     ; preds = %checkok716, %checkok683
  %451 = load ptr, ptr %d570, align 8, !dbg !2289
  %checknull686 = icmp eq ptr %451, null, !dbg !2289
  %452 = call i1 @llvm.expect.i1(i1 %checknull686, i1 false), !dbg !2289
  br i1 %452, label %panic687, label %checkok691, !dbg !2289

checkok691:                                       ; preds = %loop.cond685
  %453 = load i32, ptr %451, align 4, !dbg !2289
  %lt692 = icmp ult i32 999999999, %453, !dbg !2291
  br i1 %lt692, label %loop.body693, label %loop.exit718, !dbg !2291

loop.body693:                                     ; preds = %checkok691
  %454 = load ptr, ptr %d570, align 8, !dbg !2292
  %ptradd_any694 = getelementptr i8, ptr %454, i8 -4, !dbg !2292
  store ptr %ptradd_any694, ptr %d570, align 8, !dbg !2292
  %checknull695 = icmp eq ptr %454, null, !dbg !2292
  %455 = call i1 @llvm.expect.i1(i1 %checknull695, i1 false), !dbg !2292
  br i1 %455, label %panic696, label %checkok700, !dbg !2292

checkok700:                                       ; preds = %loop.body693
  store i32 0, ptr %454, align 4, !dbg !2294
  %456 = load ptr, ptr %d570, align 8, !dbg !2295
  %457 = load ptr, ptr %a, align 8, !dbg !2296
  %lt701 = icmp ult ptr %456, %457, !dbg !2295
  br i1 %lt701, label %if.then702, label %if.exit710, !dbg !2295

if.then702:                                       ; preds = %checkok700
  %458 = load ptr, ptr %a, align 8, !dbg !2297
  %ptradd_any703 = getelementptr i8, ptr %458, i8 -4, !dbg !2297
  store ptr %ptradd_any703, ptr %a, align 8, !dbg !2297
  %checknull704 = icmp eq ptr %ptradd_any703, null, !dbg !2297
  %459 = call i1 @llvm.expect.i1(i1 %checknull704, i1 false), !dbg !2297
  br i1 %459, label %panic705, label %checkok709, !dbg !2297

checkok709:                                       ; preds = %if.then702
  store i32 0, ptr %ptradd_any703, align 4, !dbg !2298
  br label %if.exit710, !dbg !2298

if.exit710:                                       ; preds = %checkok709, %checkok700
  %460 = load ptr, ptr %d570, align 8, !dbg !2299
  %checknull711 = icmp eq ptr %460, null, !dbg !2299
  %461 = call i1 @llvm.expect.i1(i1 %checknull711, i1 false), !dbg !2299
  br i1 %461, label %panic712, label %checkok716, !dbg !2299

checkok716:                                       ; preds = %if.exit710
  %462 = load i32, ptr %460, align 4, !dbg !2300
  %add717 = add i32 %462, 1, !dbg !2300
  store i32 %add717, ptr %460, align 4, !dbg !2300
  br label %loop.cond685, !dbg !2300

loop.exit718:                                     ; preds = %checkok691
  store i32 10, ptr %i579, align 4, !dbg !2301
  %463 = load ptr, ptr %r, align 8, !dbg !2303
  %464 = load ptr, ptr %a, align 8, !dbg !2304
  %465 = ptrtoint ptr %463 to i64, !dbg !2303
  %466 = ptrtoint ptr %464 to i64, !dbg !2303
  %467 = sub i64 %465, %466, !dbg !2303
  %468 = sdiv exact i64 %467, 4, !dbg !2303
  %mul719 = mul i64 9, %468, !dbg !2305
  %trunc720 = trunc i64 %mul719 to i32, !dbg !2305
  store i32 %trunc720, ptr %e532, align 4, !dbg !2305
  br label %loop.cond721, !dbg !2305

loop.cond721:                                     ; preds = %loop.body731, %loop.exit718
  %469 = load ptr, ptr %a, align 8, !dbg !2306
  %checknull722 = icmp eq ptr %469, null, !dbg !2306
  %470 = call i1 @llvm.expect.i1(i1 %checknull722, i1 false), !dbg !2306
  br i1 %470, label %panic723, label %checkok727, !dbg !2306

checkok727:                                       ; preds = %loop.cond721
  %471 = load i32, ptr %469, align 4, !dbg !2306
  %472 = load i32, ptr %i579, align 4, !dbg !2307
  %le728 = icmp sle i32 %472, %471, !dbg !2308
  %check729 = icmp slt i32 %471, 0, !dbg !2308
  %siui-le730 = or i1 %check729, %le728, !dbg !2308
  br i1 %siui-le730, label %loop.body731, label %loop.exit734, !dbg !2308

loop.body731:                                     ; preds = %checkok727
  %473 = load i32, ptr %i579, align 4, !dbg !2309
  %mul732 = mul i32 %473, 10, !dbg !2309
  store i32 %mul732, ptr %i579, align 4, !dbg !2309
  %474 = load i32, ptr %e532, align 4, !dbg !2310
  %add733 = add i32 %474, 1, !dbg !2310
  store i32 %add733, ptr %e532, align 4, !dbg !2310
  br label %loop.cond721, !dbg !2310

loop.exit734:                                     ; preds = %checkok727
  br label %if.exit735, !dbg !2310

if.exit735:                                       ; preds = %loop.exit734, %checkok667
  br label %if.exit736, !dbg !2310

if.exit736:                                       ; preds = %if.exit735, %or.phi603
  %475 = load ptr, ptr %z, align 8, !dbg !2311
  %476 = load ptr, ptr %d570, align 8, !dbg !2312
  %ptradd_any737 = getelementptr i8, ptr %476, i64 4, !dbg !2313
  %gt738 = icmp ugt ptr %475, %ptradd_any737, !dbg !2311
  br i1 %gt738, label %if.then739, label %if.exit741, !dbg !2311

if.then739:                                       ; preds = %if.exit736
  %477 = load ptr, ptr %d570, align 8, !dbg !2314
  %ptradd_any740 = getelementptr i8, ptr %477, i64 4, !dbg !2315
  store ptr %ptradd_any740, ptr %z, align 8, !dbg !2315
  br label %if.exit741, !dbg !2315

if.exit741:                                       ; preds = %if.then739, %if.exit736
  br label %if.exit742, !dbg !2315

if.exit742:                                       ; preds = %if.exit741, %cond.phi559
  br label %loop.cond743, !dbg !2316

loop.cond743:                                     ; preds = %loop.body750, %if.exit742
  %478 = load ptr, ptr %z, align 8, !dbg !2317
  %479 = load ptr, ptr %a, align 8, !dbg !2319
  %gt744 = icmp ugt ptr %478, %479, !dbg !2317
  br i1 %gt744, label %and.rhs745, label %and.phi748, !dbg !2317

and.rhs745:                                       ; preds = %loop.cond743
  %480 = load ptr, ptr %z, align 8, !dbg !2320
  %ptradd746 = getelementptr inbounds i8, ptr %480, i64 -4, !dbg !2321
  %481 = load i32, ptr %ptradd746, align 4, !dbg !2321
  %i2nb747 = icmp eq i32 %481, 0, !dbg !2321
  br label %and.phi748, !dbg !2321

and.phi748:                                       ; preds = %and.rhs745, %loop.cond743
  %val749 = phi i1 [ false, %loop.cond743 ], [ %i2nb747, %and.rhs745 ], !dbg !2321
  br i1 %val749, label %loop.body750, label %loop.exit752, !dbg !2321

loop.body750:                                     ; preds = %and.phi748
  %482 = load ptr, ptr %z, align 8, !dbg !2322
  %ptradd_any751 = getelementptr i8, ptr %482, i8 -4, !dbg !2322
  store ptr %ptradd_any751, ptr %z, align 8, !dbg !2322
  br label %loop.cond743, !dbg !2322

loop.exit752:                                     ; preds = %and.phi748
  %483 = load i32, ptr %formatting, align 4, !dbg !2323
  %eq753 = icmp eq i32 %483, 2, !dbg !2323
  br i1 %eq753, label %if.then754, label %if.exit824, !dbg !2323

if.then754:                                       ; preds = %loop.exit752
  %484 = load i64, ptr %p, align 8, !dbg !2324
  %i2nb755 = icmp eq i64 %484, 0, !dbg !2324
  br i1 %i2nb755, label %if.then756, label %if.exit758, !dbg !2324

if.then756:                                       ; preds = %if.then754
  %485 = load i64, ptr %p, align 8, !dbg !2326
  %add757 = add i64 %485, 1, !dbg !2326
  store i64 %add757, ptr %p, align 8, !dbg !2326
  br label %if.exit758, !dbg !2326

if.exit758:                                       ; preds = %if.then756, %if.then754
  %486 = load i64, ptr %p, align 8, !dbg !2327
  %487 = load i32, ptr %e532, align 4, !dbg !2328
  %sext759 = sext i32 %487 to i64, !dbg !2328
  %gt760 = icmp sgt i64 %486, %sext759, !dbg !2327
  br i1 %gt760, label %and.rhs761, label %and.phi763, !dbg !2327

and.rhs761:                                       ; preds = %if.exit758
  %488 = load i32, ptr %e532, align 4, !dbg !2329
  %ge762 = icmp sge i32 %488, -4, !dbg !2329
  br label %and.phi763, !dbg !2329

and.phi763:                                       ; preds = %and.rhs761, %if.exit758
  %val764 = phi i1 [ false, %if.exit758 ], [ %ge762, %and.rhs761 ], !dbg !2329
  br i1 %val764, label %if.then765, label %if.else769, !dbg !2329

if.then765:                                       ; preds = %and.phi763
  store i32 0, ptr %formatting, align 4, !dbg !2330
  %489 = load i64, ptr %p, align 8, !dbg !2332
  %490 = load i32, ptr %e532, align 4, !dbg !2333
  %sext766 = sext i32 %490 to i64, !dbg !2333
  %add767 = add i64 %sext766, 1, !dbg !2333
  %sub768 = sub i64 %489, %add767, !dbg !2332
  store i64 %sub768, ptr %p, align 8, !dbg !2332
  br label %if.exit771, !dbg !2332

if.else769:                                       ; preds = %and.phi763
  store i32 1, ptr %formatting, align 4, !dbg !2334
  %491 = load i64, ptr %p, align 8, !dbg !2336
  %sub770 = sub i64 %491, 1, !dbg !2336
  store i64 %sub770, ptr %p, align 8, !dbg !2336
  br label %if.exit771, !dbg !2336

if.exit771:                                       ; preds = %if.else769, %if.then765
  %492 = load ptr, ptr %self, align 8, !dbg !2337
  %ptradd772 = getelementptr inbounds i8, ptr %492, i64 16, !dbg !2337
  %493 = load i32, ptr %ptradd772, align 8, !dbg !2337
  %lshrl773 = lshr i32 %493, 4, !dbg !2337
  %494 = and i32 1, %lshrl773, !dbg !2337
  %trunc774 = trunc i32 %494 to i8, !dbg !2337
  %495 = trunc i8 %trunc774 to i1, !dbg !2337
  %not775 = xor i1 %495, true, !dbg !2337
  br i1 %not775, label %if.then776, label %if.exit823, !dbg !2337

if.then776:                                       ; preds = %if.exit771
  %496 = load ptr, ptr %z, align 8, !dbg !2338
  %497 = load ptr, ptr %a, align 8, !dbg !2340
  %gt777 = icmp ugt ptr %496, %497, !dbg !2338
  br i1 %gt777, label %and.rhs778, label %and.phi781, !dbg !2338

and.rhs778:                                       ; preds = %if.then776
  %498 = load ptr, ptr %z, align 8, !dbg !2341
  %ptradd779 = getelementptr inbounds i8, ptr %498, i64 -4, !dbg !2342
  %499 = load i32, ptr %ptradd779, align 4, !dbg !2342
  %i2b780 = icmp ne i32 %499, 0, !dbg !2342
  br label %and.phi781, !dbg !2342

and.phi781:                                       ; preds = %and.rhs778, %if.then776
  %val782 = phi i1 [ false, %if.then776 ], [ %i2b780, %and.rhs778 ], !dbg !2342
  br i1 %val782, label %if.then783, label %if.else799, !dbg !2342

if.then783:                                       ; preds = %and.phi781
  call void @llvm.dbg.declare(metadata ptr %i784, metadata !2343, metadata !DIExpression()), !dbg !2346
  store i32 10, ptr %i784, align 4, !dbg !2347
  store i32 0, ptr %j, align 4, !dbg !2348
  br label %loop.cond785, !dbg !2348

loop.cond785:                                     ; preds = %loop.body795, %if.then783
  %500 = load ptr, ptr %z, align 8, !dbg !2349
  %ptradd786 = getelementptr inbounds i8, ptr %500, i64 -4, !dbg !2350
  %501 = load i32, ptr %ptradd786, align 4, !dbg !2350
  %502 = load i32, ptr %i784, align 4, !dbg !2351
  %zero787 = icmp eq i32 %502, 0, !dbg !2349
  %503 = call i1 @llvm.expect.i1(i1 %zero787, i1 false), !dbg !2349
  br i1 %503, label %panic788, label %checkok792, !dbg !2349

checkok792:                                       ; preds = %loop.cond785
  %smod793 = srem i32 %501, %502, !dbg !2349
  %eq794 = icmp eq i32 %smod793, 0, !dbg !2349
  br i1 %eq794, label %loop.body795, label %loop.exit798, !dbg !2349

loop.body795:                                     ; preds = %checkok792
  %504 = load i32, ptr %i784, align 4, !dbg !2352
  %mul796 = mul i32 %504, 10, !dbg !2352
  store i32 %mul796, ptr %i784, align 4, !dbg !2352
  %505 = load i32, ptr %j, align 4, !dbg !2353
  %add797 = add i32 %505, 1, !dbg !2353
  store i32 %add797, ptr %j, align 4, !dbg !2353
  br label %loop.cond785, !dbg !2353

loop.exit798:                                     ; preds = %checkok792
  br label %if.exit800, !dbg !2353

if.else799:                                       ; preds = %and.phi781
  store i32 9, ptr %j, align 4, !dbg !2354
  br label %if.exit800, !dbg !2354

if.exit800:                                       ; preds = %if.else799, %loop.exit798
  %506 = load i32, ptr %formatting, align 4, !dbg !2356
  %eq801 = icmp eq i32 %506, 0, !dbg !2356
  br i1 %eq801, label %if.then802, label %if.else811, !dbg !2356

if.then802:                                       ; preds = %if.exit800
  %507 = load i64, ptr %p, align 8
  store i64 %507, ptr %x803, align 8
  store i64 0, ptr %x804, align 8
  %508 = load ptr, ptr %z, align 8, !dbg !2357
  %509 = load ptr, ptr %r, align 8, !dbg !2359
  %510 = ptrtoint ptr %508 to i64, !dbg !2357
  %511 = ptrtoint ptr %509 to i64, !dbg !2357
  %512 = sub i64 %510, %511, !dbg !2357
  %513 = sdiv exact i64 %512, 4, !dbg !2357
  %sub805 = sub i64 %513, 1, !dbg !2357
  %mul806 = mul i64 9, %sub805, !dbg !2360
  %514 = load i32, ptr %j, align 4, !dbg !2361
  %sext807 = sext i32 %514 to i64, !dbg !2361
  %sub808 = sub i64 %mul806, %sext807, !dbg !2360
  store i64 %sub808, ptr %y809, align 8
  %515 = load i64, ptr %x804, align 8, !dbg !2362
  %516 = load i64, ptr %y809, align 8, !dbg !2365
  %517 = call i64 @llvm.smax.i64(i64 %515, i64 %516), !dbg !2365
  store i64 %517, ptr %y810, align 8
  %518 = load i64, ptr %x803, align 8, !dbg !2366
  %519 = load i64, ptr %y810, align 8, !dbg !2369
  %520 = call i64 @llvm.smin.i64(i64 %518, i64 %519), !dbg !2369
  store i64 %520, ptr %p, align 8, !dbg !2369
  br label %if.exit822, !dbg !2369

if.else811:                                       ; preds = %if.exit800
  %521 = load i64, ptr %p, align 8
  store i64 %521, ptr %x812, align 8
  store i64 0, ptr %x813, align 8
  %522 = load ptr, ptr %z, align 8, !dbg !2370
  %523 = load ptr, ptr %r, align 8, !dbg !2372
  %524 = ptrtoint ptr %522 to i64, !dbg !2370
  %525 = ptrtoint ptr %523 to i64, !dbg !2370
  %526 = sub i64 %524, %525, !dbg !2370
  %527 = sdiv exact i64 %526, 4, !dbg !2370
  %sub814 = sub i64 %527, 1, !dbg !2370
  %mul815 = mul i64 9, %sub814, !dbg !2373
  %528 = load i32, ptr %e532, align 4, !dbg !2374
  %sext816 = sext i32 %528 to i64, !dbg !2374
  %add817 = add i64 %mul815, %sext816, !dbg !2373
  %529 = load i32, ptr %j, align 4, !dbg !2375
  %sext818 = sext i32 %529 to i64, !dbg !2375
  %sub819 = sub i64 %add817, %sext818, !dbg !2373
  store i64 %sub819, ptr %y820, align 8
  %530 = load i64, ptr %x813, align 8, !dbg !2376
  %531 = load i64, ptr %y820, align 8, !dbg !2379
  %532 = call i64 @llvm.smax.i64(i64 %530, i64 %531), !dbg !2379
  store i64 %532, ptr %y821, align 8
  %533 = load i64, ptr %x812, align 8, !dbg !2380
  %534 = load i64, ptr %y821, align 8, !dbg !2383
  %535 = call i64 @llvm.smin.i64(i64 %533, i64 %534), !dbg !2383
  store i64 %535, ptr %p, align 8, !dbg !2383
  br label %if.exit822, !dbg !2383

if.exit822:                                       ; preds = %if.else811, %if.then802
  br label %if.exit823, !dbg !2383

if.exit823:                                       ; preds = %if.exit822, %if.exit771
  br label %if.exit824, !dbg !2383

if.exit824:                                       ; preds = %if.exit823, %loop.exit752
  %536 = load i64, ptr %p, align 8, !dbg !2384
  %537 = load i64, ptr %p, align 8, !dbg !2385
  %i2b825 = icmp ne i64 %537, 0, !dbg !2385
  br i1 %i2b825, label %or.phi830, label %or.rhs826, !dbg !2385

or.rhs826:                                        ; preds = %if.exit824
  %538 = load ptr, ptr %self, align 8, !dbg !2386
  %ptradd827 = getelementptr inbounds i8, ptr %538, i64 16, !dbg !2386
  %539 = load i32, ptr %ptradd827, align 8, !dbg !2386
  %lshrl828 = lshr i32 %539, 4, !dbg !2386
  %540 = and i32 1, %lshrl828, !dbg !2386
  %trunc829 = trunc i32 %540 to i8, !dbg !2386
  %541 = trunc i8 %trunc829 to i1, !dbg !2386
  br label %or.phi830, !dbg !2386

or.phi830:                                        ; preds = %or.rhs826, %if.exit824
  %val831 = phi i1 [ true, %if.exit824 ], [ %541, %or.rhs826 ], !dbg !2386
  %zext832 = zext i1 %val831 to i64, !dbg !2386
  %sub833 = sub i64 2147483646, %zext832, !dbg !2387
  %gt834 = icmp sgt i64 %536, %sub833, !dbg !2384
  br i1 %gt834, label %if.then835, label %if.exit836, !dbg !2384

if.then835:                                       ; preds = %or.phi830
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2388

if.exit836:                                       ; preds = %or.phi830
  call void @llvm.dbg.declare(metadata ptr %l837, metadata !2389, metadata !DIExpression()), !dbg !2390
  %542 = load i64, ptr %p, align 8, !dbg !2391
  %add838 = add i64 1, %542, !dbg !2392
  %543 = load i64, ptr %p, align 8, !dbg !2393
  %i2b839 = icmp ne i64 %543, 0, !dbg !2393
  br i1 %i2b839, label %or.phi844, label %or.rhs840, !dbg !2393

or.rhs840:                                        ; preds = %if.exit836
  %544 = load ptr, ptr %self, align 8, !dbg !2394
  %ptradd841 = getelementptr inbounds i8, ptr %544, i64 16, !dbg !2394
  %545 = load i32, ptr %ptradd841, align 8, !dbg !2394
  %lshrl842 = lshr i32 %545, 4, !dbg !2394
  %546 = and i32 1, %lshrl842, !dbg !2394
  %trunc843 = trunc i32 %546 to i8, !dbg !2394
  %547 = trunc i8 %trunc843 to i1, !dbg !2394
  br label %or.phi844, !dbg !2394

or.phi844:                                        ; preds = %or.rhs840, %if.exit836
  %val845 = phi i1 [ true, %if.exit836 ], [ %547, %or.rhs840 ], !dbg !2394
  %zext846 = zext i1 %val845 to i64, !dbg !2394
  %add847 = add i64 %add838, %zext846, !dbg !2395
  %trunc848 = trunc i64 %add847 to i32, !dbg !2395
  store i32 %trunc848, ptr %l837, align 4, !dbg !2395
  call void @llvm.dbg.declare(metadata ptr %estr849, metadata !2396, metadata !DIExpression()), !dbg !2397
  %548 = load i32, ptr %formatting, align 4, !dbg !2398
  %eq850 = icmp eq i32 %548, 0, !dbg !2398
  br i1 %eq850, label %if.then851, label %if.else860, !dbg !2398

if.then851:                                       ; preds = %or.phi844
  %549 = load i32, ptr %e532, align 4, !dbg !2399
  %550 = load i32, ptr %l837, align 4, !dbg !2401
  %sub852 = sub i32 2147483647, %550, !dbg !2402
  %gt853 = icmp sgt i32 %549, %sub852, !dbg !2399
  br i1 %gt853, label %if.then854, label %if.exit855, !dbg !2399

if.then854:                                       ; preds = %if.then851
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2403

if.exit855:                                       ; preds = %if.then851
  %551 = load i32, ptr %e532, align 4, !dbg !2404
  %gt856 = icmp sgt i32 %551, 0, !dbg !2404
  br i1 %gt856, label %if.then857, label %if.exit859, !dbg !2404

if.then857:                                       ; preds = %if.exit855
  %552 = load i32, ptr %l837, align 4, !dbg !2405
  %553 = load i32, ptr %e532, align 4, !dbg !2406
  %add858 = add i32 %552, %553, !dbg !2405
  store i32 %add858, ptr %l837, align 4, !dbg !2405
  br label %if.exit859, !dbg !2405

if.exit859:                                       ; preds = %if.then857, %if.exit855
  br label %if.exit900, !dbg !2405

if.else860:                                       ; preds = %or.phi844
  %554 = load i32, ptr %e532, align 4, !dbg !2407
  %lt861 = icmp slt i32 %554, 0, !dbg !2407
  br i1 %lt861, label %cond.lhs862, label %cond.rhs864, !dbg !2407

cond.lhs862:                                      ; preds = %if.else860
  %555 = load i32, ptr %e532, align 4, !dbg !2409
  %neg863 = sub i32 0, %555, !dbg !2409
  br label %cond.phi865, !dbg !2409

cond.rhs864:                                      ; preds = %if.else860
  %556 = load i32, ptr %e532, align 4, !dbg !2410
  br label %cond.phi865, !dbg !2410

cond.phi865:                                      ; preds = %cond.rhs864, %cond.lhs862
  %val866 = phi i32 [ %neg863, %cond.lhs862 ], [ %556, %cond.rhs864 ], !dbg !2410
  %sext867 = sext i32 %val866 to i128, !dbg !2410
  %557 = load ptr, ptr %ebuf, align 8, !dbg !2411
  %558 = call ptr @std.io.fmt_u(i128 %sext867, ptr %557), !dbg !2412
  store ptr %558, ptr %estr849, align 8, !dbg !2412
  br label %loop.cond868, !dbg !2413

loop.cond868:                                     ; preds = %loop.body870, %cond.phi865
  %559 = load ptr, ptr %ebuf, align 8, !dbg !2414
  %560 = load ptr, ptr %estr849, align 8, !dbg !2416
  %561 = ptrtoint ptr %559 to i64, !dbg !2414
  %562 = ptrtoint ptr %560 to i64, !dbg !2414
  %563 = sub i64 %561, %562, !dbg !2414
  %564 = sdiv exact i64 %563, 1, !dbg !2414
  %lt869 = icmp slt i64 %564, 2, !dbg !2414
  br i1 %lt869, label %loop.body870, label %loop.exit872, !dbg !2414

loop.body870:                                     ; preds = %loop.cond868
  %565 = load ptr, ptr %estr849, align 8, !dbg !2417
  %ptradd_any871 = getelementptr i8, ptr %565, i8 -1, !dbg !2417
  store ptr %ptradd_any871, ptr %estr849, align 8, !dbg !2417
  store i8 48, ptr %ptradd_any871, align 1, !dbg !2418
  br label %loop.cond868, !dbg !2418

loop.exit872:                                     ; preds = %loop.cond868
  %566 = load ptr, ptr %estr849, align 8, !dbg !2419
  %ptradd_any873 = getelementptr i8, ptr %566, i8 -1, !dbg !2419
  store ptr %ptradd_any873, ptr %estr849, align 8, !dbg !2419
  %checknull874 = icmp eq ptr %ptradd_any873, null, !dbg !2419
  %567 = call i1 @llvm.expect.i1(i1 %checknull874, i1 false), !dbg !2419
  br i1 %567, label %panic875, label %checkok879, !dbg !2419

checkok879:                                       ; preds = %loop.exit872
  %568 = load i32, ptr %e532, align 4, !dbg !2420
  %lt880 = icmp slt i32 %568, 0, !dbg !2420
  %ternary881 = select i1 %lt880, i8 45, i8 43, !dbg !2421
  store i8 %ternary881, ptr %ptradd_any873, align 1, !dbg !2421
  %569 = load ptr, ptr %estr849, align 8, !dbg !2422
  %ptradd_any882 = getelementptr i8, ptr %569, i8 -1, !dbg !2422
  store ptr %ptradd_any882, ptr %estr849, align 8, !dbg !2422
  %checknull883 = icmp eq ptr %ptradd_any882, null, !dbg !2422
  %570 = call i1 @llvm.expect.i1(i1 %checknull883, i1 false), !dbg !2422
  br i1 %570, label %panic884, label %checkok888, !dbg !2422

checkok888:                                       ; preds = %checkok879
  %571 = load ptr, ptr %self, align 8, !dbg !2423
  %ptradd889 = getelementptr inbounds i8, ptr %571, i64 16, !dbg !2423
  %572 = load i32, ptr %ptradd889, align 8, !dbg !2423
  %lshrl890 = lshr i32 %572, 5, !dbg !2423
  %573 = and i32 1, %lshrl890, !dbg !2423
  %trunc891 = trunc i32 %573 to i8, !dbg !2423
  %574 = trunc i8 %trunc891 to i1, !dbg !2423
  %ternary892 = select i1 %574, i8 69, i8 101, !dbg !2424
  store i8 %ternary892, ptr %ptradd_any882, align 1, !dbg !2424
  %575 = load ptr, ptr %ebuf, align 8, !dbg !2425
  %576 = load ptr, ptr %estr849, align 8, !dbg !2426
  %577 = ptrtoint ptr %575 to i64, !dbg !2425
  %578 = ptrtoint ptr %576 to i64, !dbg !2425
  %579 = sub i64 %577, %578, !dbg !2425
  %580 = sdiv exact i64 %579, 1, !dbg !2425
  %581 = load i32, ptr %l837, align 4, !dbg !2427
  %sext893 = sext i32 %581 to i64, !dbg !2427
  %sub894 = sub i64 2147483647, %sext893, !dbg !2428
  %gt895 = icmp sgt i64 %580, %sub894, !dbg !2425
  br i1 %gt895, label %if.then896, label %if.exit897, !dbg !2425

if.then896:                                       ; preds = %checkok888
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2429

if.exit897:                                       ; preds = %checkok888
  %582 = load i32, ptr %l837, align 4, !dbg !2430
  %583 = load ptr, ptr %ebuf, align 8, !dbg !2431
  %584 = load ptr, ptr %estr849, align 8, !dbg !2432
  %585 = ptrtoint ptr %583 to i64, !dbg !2433
  %586 = ptrtoint ptr %584 to i64, !dbg !2433
  %587 = sub i64 %585, %586, !dbg !2433
  %588 = sdiv exact i64 %587, 1, !dbg !2433
  %trunc898 = trunc i64 %588 to i32, !dbg !2433
  %add899 = add i32 %582, %trunc898, !dbg !2430
  store i32 %add899, ptr %l837, align 4, !dbg !2430
  br label %if.exit900, !dbg !2430

if.exit900:                                       ; preds = %if.exit897, %if.exit859
  %589 = load i32, ptr %l837, align 4, !dbg !2434
  %sext901 = sext i32 %589 to i64, !dbg !2434
  %590 = load i64, ptr %pl, align 8, !dbg !2435
  %sub902 = sub i64 2147483647, %590, !dbg !2436
  %gt903 = icmp sgt i64 %sext901, %sub902, !dbg !2434
  br i1 %gt903, label %if.then904, label %if.exit905, !dbg !2434

if.then904:                                       ; preds = %if.exit900
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2437

if.exit905:                                       ; preds = %if.exit900
  call void @llvm.dbg.declare(metadata ptr %len906, metadata !2438, metadata !DIExpression()), !dbg !2439
  store i64 0, ptr %len906, align 8, !dbg !2439
  %591 = load ptr, ptr %self, align 8, !dbg !2440
  %ptradd907 = getelementptr inbounds i8, ptr %591, i64 16, !dbg !2440
  %592 = load i32, ptr %ptradd907, align 8, !dbg !2440
  %lshrl908 = lshr i32 %592, 1, !dbg !2440
  %593 = and i32 1, %lshrl908, !dbg !2440
  %trunc909 = trunc i32 %593 to i8, !dbg !2440
  %594 = trunc i8 %trunc909 to i1, !dbg !2440
  %not910 = xor i1 %594, true, !dbg !2440
  br i1 %not910, label %and.rhs911, label %and.phi915, !dbg !2440

and.rhs911:                                       ; preds = %if.exit905
  %595 = load ptr, ptr %self, align 8, !dbg !2441
  %ptradd912 = getelementptr inbounds i8, ptr %595, i64 16, !dbg !2441
  %596 = load i32, ptr %ptradd912, align 8, !dbg !2441
  %597 = and i32 1, %596, !dbg !2441
  %trunc913 = trunc i32 %597 to i8, !dbg !2441
  %598 = trunc i8 %trunc913 to i1, !dbg !2441
  %not914 = xor i1 %598, true, !dbg !2441
  br label %and.phi915, !dbg !2441

and.phi915:                                       ; preds = %and.rhs911, %if.exit905
  %val916 = phi i1 [ false, %if.exit905 ], [ %not914, %and.rhs911 ], !dbg !2441
  br i1 %val916, label %if.then917, label %if.exit931, !dbg !2441

if.then917:                                       ; preds = %and.phi915
  %599 = load i64, ptr %len906, align 8, !dbg !2442
  %600 = load ptr, ptr %self, align 8, !dbg !2443
  %ptradd919 = getelementptr inbounds i8, ptr %600, i64 16, !dbg !2443
  %ptradd920 = getelementptr inbounds i8, ptr %ptradd919, i64 4, !dbg !2443
  %601 = load i32, ptr %ptradd920, align 4, !dbg !2443
  %zext921 = zext i32 %601 to i64, !dbg !2443
  %602 = load i64, ptr %pl, align 8, !dbg !2444
  %603 = load i32, ptr %l837, align 4, !dbg !2445
  %sext922 = sext i32 %603 to i64, !dbg !2445
  %add923 = add i64 %602, %sext922, !dbg !2444
  %604 = load ptr, ptr %self, align 8
  %605 = call i64 @std.io.Formatter.pad(ptr %retparam924, ptr %604, i8 32, i64 %zext921, i64 %add923) #5, !dbg !2446
  %not_err925 = icmp eq i64 %605, 0, !dbg !2446
  %606 = call i1 @llvm.expect.i1(i1 %not_err925, i1 true), !dbg !2446
  br i1 %606, label %after_check927, label %assign_optional926, !dbg !2446

assign_optional926:                               ; preds = %if.then917
  store i64 %605, ptr %error_var918, align 8, !dbg !2446
  br label %guard_block928, !dbg !2446

after_check927:                                   ; preds = %if.then917
  br label %noerr_block929, !dbg !2446

guard_block928:                                   ; preds = %assign_optional926
  %607 = load i64, ptr %error_var918, align 8, !dbg !2446
  ret i64 %607, !dbg !2446

noerr_block929:                                   ; preds = %after_check927
  %608 = load i64, ptr %retparam924, align 8, !dbg !2446
  %add930 = add i64 %599, %608, !dbg !2442
  store i64 %add930, ptr %len906, align 8, !dbg !2442
  br label %if.exit931, !dbg !2442

if.exit931:                                       ; preds = %noerr_block929, %and.phi915
  %609 = load i8, ptr %is_neg, align 1, !dbg !2447
  %610 = trunc i8 %609 to i1, !dbg !2447
  br i1 %610, label %or.phi936, label %or.rhs932, !dbg !2447

or.rhs932:                                        ; preds = %if.exit931
  %611 = load ptr, ptr %self, align 8, !dbg !2448
  %ptradd933 = getelementptr inbounds i8, ptr %611, i64 16, !dbg !2448
  %612 = load i32, ptr %ptradd933, align 8, !dbg !2448
  %lshrl934 = lshr i32 %612, 2, !dbg !2448
  %613 = and i32 1, %lshrl934, !dbg !2448
  %trunc935 = trunc i32 %613 to i8, !dbg !2448
  %614 = trunc i8 %trunc935 to i1, !dbg !2448
  br label %or.phi936, !dbg !2448

or.phi936:                                        ; preds = %or.rhs932, %if.exit931
  %val937 = phi i1 [ true, %if.exit931 ], [ %614, %or.rhs932 ], !dbg !2448
  br i1 %val937, label %if.then938, label %if.exit948, !dbg !2448

if.then938:                                       ; preds = %or.phi936
  %615 = load i64, ptr %len906, align 8, !dbg !2449
  %616 = load i8, ptr %is_neg, align 1, !dbg !2450
  %617 = trunc i8 %616 to i1, !dbg !2450
  %ternary940 = select i1 %617, i8 45, i8 43, !dbg !2451
  %618 = load ptr, ptr %self, align 8
  %619 = call i64 @std.io.Formatter.out(ptr %retparam941, ptr %618, i8 %ternary940), !dbg !2452
  %not_err942 = icmp eq i64 %619, 0, !dbg !2452
  %620 = call i1 @llvm.expect.i1(i1 %not_err942, i1 true), !dbg !2452
  br i1 %620, label %after_check944, label %assign_optional943, !dbg !2452

assign_optional943:                               ; preds = %if.then938
  store i64 %619, ptr %error_var939, align 8, !dbg !2452
  br label %guard_block945, !dbg !2452

after_check944:                                   ; preds = %if.then938
  br label %noerr_block946, !dbg !2452

guard_block945:                                   ; preds = %assign_optional943
  %621 = load i64, ptr %error_var939, align 8, !dbg !2452
  ret i64 %621, !dbg !2452

noerr_block946:                                   ; preds = %after_check944
  %622 = load i64, ptr %retparam941, align 8, !dbg !2452
  %add947 = add i64 %615, %622, !dbg !2449
  store i64 %add947, ptr %len906, align 8, !dbg !2449
  br label %if.exit948, !dbg !2449

if.exit948:                                       ; preds = %noerr_block946, %or.phi936
  %623 = load ptr, ptr %self, align 8, !dbg !2453
  %ptradd949 = getelementptr inbounds i8, ptr %623, i64 16, !dbg !2453
  %624 = load i32, ptr %ptradd949, align 8, !dbg !2453
  %625 = and i32 1, %624, !dbg !2453
  %trunc950 = trunc i32 %625 to i8, !dbg !2453
  %626 = trunc i8 %trunc950 to i1, !dbg !2453
  br i1 %626, label %if.then951, label %if.exit965, !dbg !2453

if.then951:                                       ; preds = %if.exit948
  %627 = load i64, ptr %len906, align 8, !dbg !2454
  %628 = load ptr, ptr %self, align 8, !dbg !2455
  %ptradd953 = getelementptr inbounds i8, ptr %628, i64 16, !dbg !2455
  %ptradd954 = getelementptr inbounds i8, ptr %ptradd953, i64 4, !dbg !2455
  %629 = load i32, ptr %ptradd954, align 4, !dbg !2455
  %zext955 = zext i32 %629 to i64, !dbg !2455
  %630 = load i64, ptr %pl, align 8, !dbg !2456
  %631 = load i32, ptr %l837, align 4, !dbg !2457
  %sext956 = sext i32 %631 to i64, !dbg !2457
  %add957 = add i64 %630, %sext956, !dbg !2456
  %632 = load ptr, ptr %self, align 8
  %633 = call i64 @std.io.Formatter.pad(ptr %retparam958, ptr %632, i8 48, i64 %zext955, i64 %add957) #5, !dbg !2458
  %not_err959 = icmp eq i64 %633, 0, !dbg !2458
  %634 = call i1 @llvm.expect.i1(i1 %not_err959, i1 true), !dbg !2458
  br i1 %634, label %after_check961, label %assign_optional960, !dbg !2458

assign_optional960:                               ; preds = %if.then951
  store i64 %633, ptr %error_var952, align 8, !dbg !2458
  br label %guard_block962, !dbg !2458

after_check961:                                   ; preds = %if.then951
  br label %noerr_block963, !dbg !2458

guard_block962:                                   ; preds = %assign_optional960
  %635 = load i64, ptr %error_var952, align 8, !dbg !2458
  ret i64 %635, !dbg !2458

noerr_block963:                                   ; preds = %after_check961
  %636 = load i64, ptr %retparam958, align 8, !dbg !2458
  %add964 = add i64 %627, %636, !dbg !2454
  store i64 %add964, ptr %len906, align 8, !dbg !2454
  br label %if.exit965, !dbg !2454

if.exit965:                                       ; preds = %noerr_block963, %if.exit948
  %637 = load i32, ptr %formatting, align 4, !dbg !2459
  %eq966 = icmp eq i32 %637, 0, !dbg !2459
  br i1 %eq966, label %if.then967, label %if.else1091, !dbg !2459

if.then967:                                       ; preds = %if.exit965
  %638 = load ptr, ptr %a, align 8, !dbg !2460
  %639 = load ptr, ptr %r, align 8, !dbg !2462
  %gt968 = icmp ugt ptr %638, %639, !dbg !2460
  br i1 %gt968, label %if.then969, label %if.exit970, !dbg !2460

if.then969:                                       ; preds = %if.then967
  %640 = load ptr, ptr %r, align 8, !dbg !2463
  store ptr %640, ptr %a, align 8, !dbg !2463
  br label %if.exit970, !dbg !2463

if.exit970:                                       ; preds = %if.then969, %if.then967
  call void @llvm.dbg.declare(metadata ptr %d971, metadata !2464, metadata !DIExpression()), !dbg !2465
  %641 = load ptr, ptr %a, align 8, !dbg !2466
  store ptr %641, ptr %d971, align 8, !dbg !2466
  br label %loop.cond972, !dbg !2467

loop.cond972:                                     ; preds = %noerr_block1018, %if.exit970
  %642 = load ptr, ptr %d971, align 8, !dbg !2468
  %643 = load ptr, ptr %r, align 8, !dbg !2470
  %le973 = icmp ule ptr %642, %643, !dbg !2468
  br i1 %le973, label %loop.body974, label %loop.exit1021, !dbg !2468

loop.body974:                                     ; preds = %loop.cond972
  call void @llvm.dbg.declare(metadata ptr %s975, metadata !2471, metadata !DIExpression()), !dbg !2473
  %644 = load ptr, ptr %d971, align 8, !dbg !2474
  %checknull976 = icmp eq ptr %644, null, !dbg !2474
  %645 = call i1 @llvm.expect.i1(i1 %checknull976, i1 false), !dbg !2474
  br i1 %645, label %panic977, label %checkok981, !dbg !2474

checkok981:                                       ; preds = %loop.body974
  %646 = load i32, ptr %644, align 4, !dbg !2474
  %zext982 = zext i32 %646 to i128, !dbg !2474
  %647 = load ptr, ptr %buf, align 8, !dbg !2475
  %ptradd_any983 = getelementptr i8, ptr %647, i64 9, !dbg !2476
  %648 = call ptr @std.io.fmt_u(i128 %zext982, ptr %ptradd_any983), !dbg !2477
  store ptr %648, ptr %s975, align 8, !dbg !2477
  store i8 1, ptr %switch984, align 1
  br label %switch.entry985

switch.entry985:                                  ; preds = %checkok981
  %649 = load i8, ptr %switch984, align 1
  %650 = trunc i8 %649 to i1
  %651 = load ptr, ptr %d971, align 8, !dbg !2478
  %652 = load ptr, ptr %a, align 8, !dbg !2480
  %neq986 = icmp ne ptr %651, %652, !dbg !2478
  %eq987 = icmp eq i1 %neq986, %650, !dbg !2478
  br i1 %eq987, label %switch.case988, label %next_if994, !dbg !2478

switch.case988:                                   ; preds = %switch.entry985
  br label %loop.cond989, !dbg !2481

loop.cond989:                                     ; preds = %loop.body991, %switch.case988
  %653 = load ptr, ptr %s975, align 8, !dbg !2483
  %654 = load ptr, ptr %buf, align 8, !dbg !2485
  %gt990 = icmp ugt ptr %653, %654, !dbg !2483
  br i1 %gt990, label %loop.body991, label %loop.exit993, !dbg !2483

loop.body991:                                     ; preds = %loop.cond989
  %655 = load ptr, ptr %s975, align 8, !dbg !2486
  %ptradd_any992 = getelementptr i8, ptr %655, i8 -1, !dbg !2486
  store ptr %ptradd_any992, ptr %s975, align 8, !dbg !2486
  store i8 48, ptr %ptradd_any992, align 1, !dbg !2487
  br label %loop.cond989, !dbg !2487

loop.exit993:                                     ; preds = %loop.cond989
  br label %switch.exit1007, !dbg !2487

next_if994:                                       ; preds = %switch.entry985
  %656 = load ptr, ptr %s975, align 8, !dbg !2488
  %657 = load ptr, ptr %buf, align 8, !dbg !2489
  %ptradd_any995 = getelementptr i8, ptr %657, i64 9, !dbg !2490
  %eq996 = icmp eq ptr %656, %ptradd_any995, !dbg !2488
  %eq997 = icmp eq i1 %eq996, %650, !dbg !2488
  br i1 %eq997, label %switch.case998, label %next_if1006, !dbg !2488

switch.case998:                                   ; preds = %next_if994
  %658 = load ptr, ptr %s975, align 8, !dbg !2491
  %ptradd_any999 = getelementptr i8, ptr %658, i8 -1, !dbg !2491
  store ptr %ptradd_any999, ptr %s975, align 8, !dbg !2491
  %checknull1000 = icmp eq ptr %ptradd_any999, null, !dbg !2491
  %659 = call i1 @llvm.expect.i1(i1 %checknull1000, i1 false), !dbg !2491
  br i1 %659, label %panic1001, label %checkok1005, !dbg !2491

checkok1005:                                      ; preds = %switch.case998
  store i8 48, ptr %ptradd_any999, align 1, !dbg !2493
  br label %switch.exit1007, !dbg !2493

next_if1006:                                      ; preds = %next_if994
  br label %switch.exit1007, !dbg !2493

switch.exit1007:                                  ; preds = %next_if1006, %checkok1005, %loop.exit993
  %660 = load i64, ptr %len906, align 8, !dbg !2494
  %661 = load ptr, ptr %s975, align 8, !dbg !2495
  %662 = load ptr, ptr %buf, align 8, !dbg !2496
  %ptradd_any1009 = getelementptr i8, ptr %662, i64 9, !dbg !2497
  %663 = load ptr, ptr %s975, align 8, !dbg !2498
  %664 = ptrtoint ptr %ptradd_any1009 to i64, !dbg !2496
  %665 = ptrtoint ptr %663 to i64, !dbg !2496
  %666 = sub i64 %664, %665, !dbg !2496
  %667 = sdiv exact i64 %666, 1, !dbg !2496
  %add1010 = add i64 0, %667, !dbg !2496
  %size1011 = sub i64 %add1010, 0, !dbg !2496
  %668 = insertvalue %"char[]" undef, ptr %661, 0, !dbg !2496
  %669 = insertvalue %"char[]" %668, i64 %size1011, 1, !dbg !2496
  %670 = load ptr, ptr %self, align 8
  store %"char[]" %669, ptr %taddr1013, align 8
  %671 = load [2 x i64], ptr %taddr1013, align 8
  %672 = call i64 @std.io.Formatter.out_chars(ptr %retparam1012, ptr %670, [2 x i64] %671), !dbg !2499
  %not_err1014 = icmp eq i64 %672, 0, !dbg !2499
  %673 = call i1 @llvm.expect.i1(i1 %not_err1014, i1 true), !dbg !2499
  br i1 %673, label %after_check1016, label %assign_optional1015, !dbg !2499

assign_optional1015:                              ; preds = %switch.exit1007
  store i64 %672, ptr %error_var1008, align 8, !dbg !2499
  br label %guard_block1017, !dbg !2499

after_check1016:                                  ; preds = %switch.exit1007
  br label %noerr_block1018, !dbg !2499

guard_block1017:                                  ; preds = %assign_optional1015
  %674 = load i64, ptr %error_var1008, align 8, !dbg !2499
  ret i64 %674, !dbg !2499

noerr_block1018:                                  ; preds = %after_check1016
  %675 = load i64, ptr %retparam1012, align 8, !dbg !2499
  %add1019 = add i64 %660, %675, !dbg !2494
  store i64 %add1019, ptr %len906, align 8, !dbg !2494
  %676 = load ptr, ptr %d971, align 8, !dbg !2500
  %ptradd_any1020 = getelementptr i8, ptr %676, i8 4, !dbg !2500
  store ptr %ptradd_any1020, ptr %d971, align 8, !dbg !2500
  br label %loop.cond972, !dbg !2500

loop.exit1021:                                    ; preds = %loop.cond972
  %677 = load i64, ptr %p, align 8, !dbg !2501
  %i2b1022 = icmp ne i64 %677, 0, !dbg !2501
  br i1 %i2b1022, label %or.phi1027, label %or.rhs1023, !dbg !2501

or.rhs1023:                                       ; preds = %loop.exit1021
  %678 = load ptr, ptr %self, align 8, !dbg !2502
  %ptradd1024 = getelementptr inbounds i8, ptr %678, i64 16, !dbg !2502
  %679 = load i32, ptr %ptradd1024, align 8, !dbg !2502
  %lshrl1025 = lshr i32 %679, 4, !dbg !2502
  %680 = and i32 1, %lshrl1025, !dbg !2502
  %trunc1026 = trunc i32 %680 to i8, !dbg !2502
  %681 = trunc i8 %trunc1026 to i1, !dbg !2502
  br label %or.phi1027, !dbg !2502

or.phi1027:                                       ; preds = %or.rhs1023, %loop.exit1021
  %val1028 = phi i1 [ true, %loop.exit1021 ], [ %681, %or.rhs1023 ], !dbg !2502
  br i1 %val1028, label %if.then1029, label %if.exit1038, !dbg !2502

if.then1029:                                      ; preds = %or.phi1027
  %682 = load i64, ptr %len906, align 8, !dbg !2503
  %683 = load ptr, ptr %self, align 8
  %684 = call i64 @std.io.Formatter.out(ptr %retparam1031, ptr %683, i8 46), !dbg !2504
  %not_err1032 = icmp eq i64 %684, 0, !dbg !2504
  %685 = call i1 @llvm.expect.i1(i1 %not_err1032, i1 true), !dbg !2504
  br i1 %685, label %after_check1034, label %assign_optional1033, !dbg !2504

assign_optional1033:                              ; preds = %if.then1029
  store i64 %684, ptr %error_var1030, align 8, !dbg !2504
  br label %guard_block1035, !dbg !2504

after_check1034:                                  ; preds = %if.then1029
  br label %noerr_block1036, !dbg !2504

guard_block1035:                                  ; preds = %assign_optional1033
  %686 = load i64, ptr %error_var1030, align 8, !dbg !2504
  ret i64 %686, !dbg !2504

noerr_block1036:                                  ; preds = %after_check1034
  %687 = load i64, ptr %retparam1031, align 8, !dbg !2504
  %add1037 = add i64 %682, %687, !dbg !2503
  store i64 %add1037, ptr %len906, align 8, !dbg !2503
  br label %if.exit1038, !dbg !2503

if.exit1038:                                      ; preds = %noerr_block1036, %or.phi1027
  br label %loop.cond1039, !dbg !2505

loop.cond1039:                                    ; preds = %noerr_block1077, %if.exit1038
  %688 = load ptr, ptr %d971, align 8, !dbg !2506
  %689 = load ptr, ptr %z, align 8, !dbg !2508
  %lt1040 = icmp ult ptr %688, %689, !dbg !2506
  br i1 %lt1040, label %and.rhs1041, label %and.phi1043, !dbg !2506

and.rhs1041:                                      ; preds = %loop.cond1039
  %690 = load i64, ptr %p, align 8, !dbg !2509
  %gt1042 = icmp sgt i64 %690, 0, !dbg !2509
  br label %and.phi1043, !dbg !2509

and.phi1043:                                      ; preds = %and.rhs1041, %loop.cond1039
  %val1044 = phi i1 [ false, %loop.cond1039 ], [ %gt1042, %and.rhs1041 ], !dbg !2509
  br i1 %val1044, label %loop.body1045, label %loop.exit1081, !dbg !2509

loop.body1045:                                    ; preds = %and.phi1043
  call void @llvm.dbg.declare(metadata ptr %s1046, metadata !2510, metadata !DIExpression()), !dbg !2512
  %691 = load ptr, ptr %d971, align 8, !dbg !2513
  %checknull1047 = icmp eq ptr %691, null, !dbg !2513
  %692 = call i1 @llvm.expect.i1(i1 %checknull1047, i1 false), !dbg !2513
  br i1 %692, label %panic1048, label %checkok1052, !dbg !2513

checkok1052:                                      ; preds = %loop.body1045
  %693 = load i32, ptr %691, align 4, !dbg !2513
  %zext1053 = zext i32 %693 to i128, !dbg !2513
  %694 = load ptr, ptr %buf, align 8, !dbg !2514
  %ptradd_any1054 = getelementptr i8, ptr %694, i64 9, !dbg !2515
  %695 = call ptr @std.io.fmt_u(i128 %zext1053, ptr %ptradd_any1054), !dbg !2516
  store ptr %695, ptr %s1046, align 8, !dbg !2516
  br label %loop.cond1055, !dbg !2517

loop.cond1055:                                    ; preds = %checkok1064, %checkok1052
  %696 = load ptr, ptr %s1046, align 8, !dbg !2518
  %697 = load ptr, ptr %buf, align 8, !dbg !2520
  %gt1056 = icmp ugt ptr %696, %697, !dbg !2518
  br i1 %gt1056, label %loop.body1057, label %loop.exit1065, !dbg !2518

loop.body1057:                                    ; preds = %loop.cond1055
  %698 = load ptr, ptr %s1046, align 8, !dbg !2521
  %ptradd_any1058 = getelementptr i8, ptr %698, i8 -1, !dbg !2521
  store ptr %ptradd_any1058, ptr %s1046, align 8, !dbg !2521
  %checknull1059 = icmp eq ptr %ptradd_any1058, null, !dbg !2521
  %699 = call i1 @llvm.expect.i1(i1 %checknull1059, i1 false), !dbg !2521
  br i1 %699, label %panic1060, label %checkok1064, !dbg !2521

checkok1064:                                      ; preds = %loop.body1057
  store i8 48, ptr %ptradd_any1058, align 1, !dbg !2522
  br label %loop.cond1055, !dbg !2522

loop.exit1065:                                    ; preds = %loop.cond1055
  %700 = load i64, ptr %len906, align 8, !dbg !2523
  %701 = load ptr, ptr %s1046, align 8, !dbg !2524
  store i64 9, ptr %x1067, align 8
  %702 = load i64, ptr %p, align 8
  store i64 %702, ptr %y1068, align 8
  %703 = load i64, ptr %x1067, align 8, !dbg !2525
  %704 = load i64, ptr %y1068, align 8, !dbg !2528
  %705 = call i64 @llvm.smin.i64(i64 %703, i64 %704), !dbg !2528
  %add1069 = add i64 0, %705, !dbg !2528
  %size1070 = sub i64 %add1069, 0, !dbg !2528
  %706 = insertvalue %"char[]" undef, ptr %701, 0, !dbg !2528
  %707 = insertvalue %"char[]" %706, i64 %size1070, 1, !dbg !2528
  %708 = load ptr, ptr %self, align 8
  store %"char[]" %707, ptr %taddr1072, align 8
  %709 = load [2 x i64], ptr %taddr1072, align 8
  %710 = call i64 @std.io.Formatter.out_chars(ptr %retparam1071, ptr %708, [2 x i64] %709), !dbg !2529
  %not_err1073 = icmp eq i64 %710, 0, !dbg !2529
  %711 = call i1 @llvm.expect.i1(i1 %not_err1073, i1 true), !dbg !2529
  br i1 %711, label %after_check1075, label %assign_optional1074, !dbg !2529

assign_optional1074:                              ; preds = %loop.exit1065
  store i64 %710, ptr %error_var1066, align 8, !dbg !2529
  br label %guard_block1076, !dbg !2529

after_check1075:                                  ; preds = %loop.exit1065
  br label %noerr_block1077, !dbg !2529

guard_block1076:                                  ; preds = %assign_optional1074
  %712 = load i64, ptr %error_var1066, align 8, !dbg !2529
  ret i64 %712, !dbg !2529

noerr_block1077:                                  ; preds = %after_check1075
  %713 = load i64, ptr %retparam1071, align 8, !dbg !2529
  %add1078 = add i64 %700, %713, !dbg !2523
  store i64 %add1078, ptr %len906, align 8, !dbg !2523
  %714 = load ptr, ptr %d971, align 8, !dbg !2530
  %ptradd_any1079 = getelementptr i8, ptr %714, i8 4, !dbg !2530
  store ptr %ptradd_any1079, ptr %d971, align 8, !dbg !2530
  %715 = load i64, ptr %p, align 8, !dbg !2531
  %sub1080 = sub i64 %715, 9, !dbg !2531
  store i64 %sub1080, ptr %p, align 8, !dbg !2531
  br label %loop.cond1039, !dbg !2531

loop.exit1081:                                    ; preds = %and.phi1043
  %716 = load i64, ptr %len906, align 8, !dbg !2532
  %717 = load i64, ptr %p, align 8, !dbg !2533
  %add1083 = add i64 %717, 9, !dbg !2533
  %718 = load ptr, ptr %self, align 8
  %719 = call i64 @std.io.Formatter.pad(ptr %retparam1084, ptr %718, i8 48, i64 %add1083, i64 9) #5, !dbg !2534
  %not_err1085 = icmp eq i64 %719, 0, !dbg !2534
  %720 = call i1 @llvm.expect.i1(i1 %not_err1085, i1 true), !dbg !2534
  br i1 %720, label %after_check1087, label %assign_optional1086, !dbg !2534

assign_optional1086:                              ; preds = %loop.exit1081
  store i64 %719, ptr %error_var1082, align 8, !dbg !2534
  br label %guard_block1088, !dbg !2534

after_check1087:                                  ; preds = %loop.exit1081
  br label %noerr_block1089, !dbg !2534

guard_block1088:                                  ; preds = %assign_optional1086
  %721 = load i64, ptr %error_var1082, align 8, !dbg !2534
  ret i64 %721, !dbg !2534

noerr_block1089:                                  ; preds = %after_check1087
  %722 = load i64, ptr %retparam1084, align 8, !dbg !2534
  %add1090 = add i64 %716, %722, !dbg !2532
  store i64 %add1090, ptr %len906, align 8, !dbg !2532
  br label %if.exit1191, !dbg !2532

if.else1091:                                      ; preds = %if.exit965
  %723 = load ptr, ptr %z, align 8, !dbg !2535
  %724 = load ptr, ptr %a, align 8, !dbg !2537
  %le1092 = icmp ule ptr %723, %724, !dbg !2535
  br i1 %le1092, label %if.then1093, label %if.exit1095, !dbg !2535

if.then1093:                                      ; preds = %if.else1091
  %725 = load ptr, ptr %a, align 8, !dbg !2538
  %ptradd_any1094 = getelementptr i8, ptr %725, i64 4, !dbg !2539
  store ptr %ptradd_any1094, ptr %z, align 8, !dbg !2539
  br label %if.exit1095, !dbg !2539

if.exit1095:                                      ; preds = %if.then1093, %if.else1091
  call void @llvm.dbg.declare(metadata ptr %d1096, metadata !2540, metadata !DIExpression()), !dbg !2542
  %726 = load ptr, ptr %a, align 8, !dbg !2543
  store ptr %726, ptr %d1096, align 8, !dbg !2543
  br label %loop.cond1097, !dbg !2543

loop.cond1097:                                    ; preds = %noerr_block1165, %if.exit1095
  %727 = load ptr, ptr %d1096, align 8, !dbg !2544
  %728 = load ptr, ptr %z, align 8, !dbg !2545
  %lt1098 = icmp ult ptr %727, %728, !dbg !2544
  br i1 %lt1098, label %and.rhs1099, label %and.phi1101, !dbg !2544

and.rhs1099:                                      ; preds = %loop.cond1097
  %729 = load i64, ptr %p, align 8, !dbg !2546
  %ge1100 = icmp sge i64 %729, 0, !dbg !2546
  br label %and.phi1101, !dbg !2546

and.phi1101:                                      ; preds = %and.rhs1099, %loop.cond1097
  %val1102 = phi i1 [ false, %loop.cond1097 ], [ %ge1100, %and.rhs1099 ], !dbg !2546
  br i1 %val1102, label %loop.body1103, label %loop.exit1170, !dbg !2546

loop.body1103:                                    ; preds = %and.phi1101
  call void @llvm.dbg.declare(metadata ptr %s1104, metadata !2547, metadata !DIExpression()), !dbg !2549
  %730 = load ptr, ptr %d1096, align 8, !dbg !2550
  %checknull1105 = icmp eq ptr %730, null, !dbg !2550
  %731 = call i1 @llvm.expect.i1(i1 %checknull1105, i1 false), !dbg !2550
  br i1 %731, label %panic1106, label %checkok1110, !dbg !2550

checkok1110:                                      ; preds = %loop.body1103
  %732 = load i32, ptr %730, align 4, !dbg !2550
  %zext1111 = zext i32 %732 to i128, !dbg !2550
  %733 = load ptr, ptr %buf, align 8, !dbg !2551
  %ptradd_any1112 = getelementptr i8, ptr %733, i64 9, !dbg !2552
  %734 = call ptr @std.io.fmt_u(i128 %zext1111, ptr %ptradd_any1112), !dbg !2553
  store ptr %734, ptr %s1104, align 8, !dbg !2553
  %735 = load ptr, ptr %s1104, align 8, !dbg !2554
  %736 = load ptr, ptr %buf, align 8, !dbg !2555
  %ptradd_any1113 = getelementptr i8, ptr %736, i64 9, !dbg !2556
  %eq1114 = icmp eq ptr %735, %ptradd_any1113, !dbg !2554
  br i1 %eq1114, label %if.then1115, label %if.exit1117, !dbg !2554

if.then1115:                                      ; preds = %checkok1110
  %737 = load ptr, ptr %s1104, align 8, !dbg !2557
  %ptradd_any1116 = getelementptr i8, ptr %737, i8 -1, !dbg !2557
  store ptr %ptradd_any1116, ptr %s1104, align 8, !dbg !2557
  store i8 48, ptr %ptradd_any1116, align 1, !dbg !2558
  br label %if.exit1117, !dbg !2558

if.exit1117:                                      ; preds = %if.then1115, %checkok1110
  %738 = load ptr, ptr %d1096, align 8, !dbg !2559
  %739 = load ptr, ptr %a, align 8, !dbg !2560
  %neq1118 = icmp ne ptr %738, %739, !dbg !2559
  br i1 %neq1118, label %if.then1119, label %if.else1125, !dbg !2559

if.then1119:                                      ; preds = %if.exit1117
  br label %loop.cond1120, !dbg !2561

loop.cond1120:                                    ; preds = %loop.body1122, %if.then1119
  %740 = load ptr, ptr %s1104, align 8, !dbg !2563
  %741 = load ptr, ptr %buf, align 8, !dbg !2565
  %gt1121 = icmp ugt ptr %740, %741, !dbg !2563
  br i1 %gt1121, label %loop.body1122, label %loop.exit1124, !dbg !2563

loop.body1122:                                    ; preds = %loop.cond1120
  %742 = load ptr, ptr %s1104, align 8, !dbg !2566
  %ptradd_any1123 = getelementptr i8, ptr %742, i8 -1, !dbg !2566
  store ptr %ptradd_any1123, ptr %s1104, align 8, !dbg !2566
  store i8 48, ptr %ptradd_any1123, align 1, !dbg !2567
  br label %loop.cond1120, !dbg !2567

loop.exit1124:                                    ; preds = %loop.cond1120
  br label %if.exit1152, !dbg !2567

if.else1125:                                      ; preds = %if.exit1117
  %743 = load i64, ptr %len906, align 8, !dbg !2568
  %744 = load ptr, ptr %s1104, align 8, !dbg !2570
  %ptradd_any1127 = getelementptr i8, ptr %744, i8 1, !dbg !2570
  store ptr %ptradd_any1127, ptr %s1104, align 8, !dbg !2570
  %745 = load ptr, ptr %self, align 8
  %746 = load i8, ptr %744, align 1
  %747 = call i64 @std.io.Formatter.out(ptr %retparam1128, ptr %745, i8 %746), !dbg !2571
  %not_err1129 = icmp eq i64 %747, 0, !dbg !2571
  %748 = call i1 @llvm.expect.i1(i1 %not_err1129, i1 true), !dbg !2571
  br i1 %748, label %after_check1131, label %assign_optional1130, !dbg !2571

assign_optional1130:                              ; preds = %if.else1125
  store i64 %747, ptr %error_var1126, align 8, !dbg !2571
  br label %guard_block1132, !dbg !2571

after_check1131:                                  ; preds = %if.else1125
  br label %noerr_block1133, !dbg !2571

guard_block1132:                                  ; preds = %assign_optional1130
  %749 = load i64, ptr %error_var1126, align 8, !dbg !2571
  ret i64 %749, !dbg !2571

noerr_block1133:                                  ; preds = %after_check1131
  %750 = load i64, ptr %retparam1128, align 8, !dbg !2571
  %add1134 = add i64 %743, %750, !dbg !2568
  store i64 %add1134, ptr %len906, align 8, !dbg !2568
  %751 = load i64, ptr %p, align 8, !dbg !2572
  %gt1135 = icmp sgt i64 %751, 0, !dbg !2572
  br i1 %gt1135, label %or.phi1140, label %or.rhs1136, !dbg !2572

or.rhs1136:                                       ; preds = %noerr_block1133
  %752 = load ptr, ptr %self, align 8, !dbg !2573
  %ptradd1137 = getelementptr inbounds i8, ptr %752, i64 16, !dbg !2573
  %753 = load i32, ptr %ptradd1137, align 8, !dbg !2573
  %lshrl1138 = lshr i32 %753, 4, !dbg !2573
  %754 = and i32 1, %lshrl1138, !dbg !2573
  %trunc1139 = trunc i32 %754 to i8, !dbg !2573
  %755 = trunc i8 %trunc1139 to i1, !dbg !2573
  br label %or.phi1140, !dbg !2573

or.phi1140:                                       ; preds = %or.rhs1136, %noerr_block1133
  %val1141 = phi i1 [ true, %noerr_block1133 ], [ %755, %or.rhs1136 ], !dbg !2573
  br i1 %val1141, label %if.then1142, label %if.exit1151, !dbg !2573

if.then1142:                                      ; preds = %or.phi1140
  %756 = load i64, ptr %len906, align 8, !dbg !2574
  %757 = load ptr, ptr %self, align 8
  %758 = call i64 @std.io.Formatter.out(ptr %retparam1144, ptr %757, i8 46), !dbg !2575
  %not_err1145 = icmp eq i64 %758, 0, !dbg !2575
  %759 = call i1 @llvm.expect.i1(i1 %not_err1145, i1 true), !dbg !2575
  br i1 %759, label %after_check1147, label %assign_optional1146, !dbg !2575

assign_optional1146:                              ; preds = %if.then1142
  store i64 %758, ptr %error_var1143, align 8, !dbg !2575
  br label %guard_block1148, !dbg !2575

after_check1147:                                  ; preds = %if.then1142
  br label %noerr_block1149, !dbg !2575

guard_block1148:                                  ; preds = %assign_optional1146
  %760 = load i64, ptr %error_var1143, align 8, !dbg !2575
  ret i64 %760, !dbg !2575

noerr_block1149:                                  ; preds = %after_check1147
  %761 = load i64, ptr %retparam1144, align 8, !dbg !2575
  %add1150 = add i64 %756, %761, !dbg !2574
  store i64 %add1150, ptr %len906, align 8, !dbg !2574
  br label %if.exit1151, !dbg !2574

if.exit1151:                                      ; preds = %noerr_block1149, %or.phi1140
  br label %if.exit1152, !dbg !2574

if.exit1152:                                      ; preds = %if.exit1151, %loop.exit1124
  %762 = load i64, ptr %len906, align 8, !dbg !2576
  %763 = load ptr, ptr %s1104, align 8, !dbg !2577
  %764 = load ptr, ptr %buf, align 8, !dbg !2578
  %ptradd_any1154 = getelementptr i8, ptr %764, i64 9, !dbg !2579
  %765 = load ptr, ptr %s1104, align 8, !dbg !2580
  %766 = ptrtoint ptr %ptradd_any1154 to i64, !dbg !2578
  %767 = ptrtoint ptr %765 to i64, !dbg !2578
  %768 = sub i64 %766, %767, !dbg !2578
  %769 = sdiv exact i64 %768, 1, !dbg !2578
  store i64 %769, ptr %x1155, align 8
  %770 = load i64, ptr %p, align 8
  store i64 %770, ptr %y1156, align 8
  %771 = load i64, ptr %x1155, align 8, !dbg !2581
  %772 = load i64, ptr %y1156, align 8, !dbg !2584
  %773 = call i64 @llvm.smin.i64(i64 %771, i64 %772), !dbg !2584
  %add1157 = add i64 0, %773, !dbg !2584
  %size1158 = sub i64 %add1157, 0, !dbg !2584
  %774 = insertvalue %"char[]" undef, ptr %763, 0, !dbg !2584
  %775 = insertvalue %"char[]" %774, i64 %size1158, 1, !dbg !2584
  %776 = load ptr, ptr %self, align 8
  store %"char[]" %775, ptr %taddr1160, align 8
  %777 = load [2 x i64], ptr %taddr1160, align 8
  %778 = call i64 @std.io.Formatter.out_chars(ptr %retparam1159, ptr %776, [2 x i64] %777), !dbg !2585
  %not_err1161 = icmp eq i64 %778, 0, !dbg !2585
  %779 = call i1 @llvm.expect.i1(i1 %not_err1161, i1 true), !dbg !2585
  br i1 %779, label %after_check1163, label %assign_optional1162, !dbg !2585

assign_optional1162:                              ; preds = %if.exit1152
  store i64 %778, ptr %error_var1153, align 8, !dbg !2585
  br label %guard_block1164, !dbg !2585

after_check1163:                                  ; preds = %if.exit1152
  br label %noerr_block1165, !dbg !2585

guard_block1164:                                  ; preds = %assign_optional1162
  %780 = load i64, ptr %error_var1153, align 8, !dbg !2585
  ret i64 %780, !dbg !2585

noerr_block1165:                                  ; preds = %after_check1163
  %781 = load i64, ptr %retparam1159, align 8, !dbg !2585
  %add1166 = add i64 %762, %781, !dbg !2576
  store i64 %add1166, ptr %len906, align 8, !dbg !2576
  %782 = load i64, ptr %p, align 8, !dbg !2586
  %783 = load ptr, ptr %buf, align 8, !dbg !2587
  %ptradd_any1167 = getelementptr i8, ptr %783, i64 9, !dbg !2588
  %784 = load ptr, ptr %s1104, align 8, !dbg !2589
  %785 = ptrtoint ptr %ptradd_any1167 to i64, !dbg !2587
  %786 = ptrtoint ptr %784 to i64, !dbg !2587
  %787 = sub i64 %785, %786, !dbg !2587
  %788 = sdiv exact i64 %787, 1, !dbg !2587
  %sub1168 = sub i64 %782, %788, !dbg !2586
  store i64 %sub1168, ptr %p, align 8, !dbg !2586
  %789 = load ptr, ptr %d1096, align 8, !dbg !2590
  %ptradd_any1169 = getelementptr i8, ptr %789, i8 4, !dbg !2590
  store ptr %ptradd_any1169, ptr %d1096, align 8, !dbg !2590
  br label %loop.cond1097, !dbg !2590

loop.exit1170:                                    ; preds = %and.phi1101
  %790 = load i64, ptr %len906, align 8, !dbg !2591
  %791 = load i64, ptr %p, align 8, !dbg !2592
  %add1172 = add i64 %791, 18, !dbg !2592
  %792 = load ptr, ptr %self, align 8
  %793 = call i64 @std.io.Formatter.pad(ptr %retparam1173, ptr %792, i8 48, i64 %add1172, i64 18) #5, !dbg !2593
  %not_err1174 = icmp eq i64 %793, 0, !dbg !2593
  %794 = call i1 @llvm.expect.i1(i1 %not_err1174, i1 true), !dbg !2593
  br i1 %794, label %after_check1176, label %assign_optional1175, !dbg !2593

assign_optional1175:                              ; preds = %loop.exit1170
  store i64 %793, ptr %error_var1171, align 8, !dbg !2593
  br label %guard_block1177, !dbg !2593

after_check1176:                                  ; preds = %loop.exit1170
  br label %noerr_block1178, !dbg !2593

guard_block1177:                                  ; preds = %assign_optional1175
  %795 = load i64, ptr %error_var1171, align 8, !dbg !2593
  ret i64 %795, !dbg !2593

noerr_block1178:                                  ; preds = %after_check1176
  %796 = load i64, ptr %retparam1173, align 8, !dbg !2593
  %add1179 = add i64 %790, %796, !dbg !2591
  store i64 %add1179, ptr %len906, align 8, !dbg !2591
  %797 = load i64, ptr %len906, align 8, !dbg !2594
  %798 = load ptr, ptr %estr849, align 8, !dbg !2595
  %799 = load ptr, ptr %ebuf, align 8, !dbg !2596
  %800 = load ptr, ptr %estr849, align 8, !dbg !2597
  %801 = ptrtoint ptr %799 to i64, !dbg !2596
  %802 = ptrtoint ptr %800 to i64, !dbg !2596
  %803 = sub i64 %801, %802, !dbg !2596
  %804 = sdiv exact i64 %803, 1, !dbg !2596
  %add1181 = add i64 0, %804, !dbg !2596
  %size1182 = sub i64 %add1181, 0, !dbg !2596
  %805 = insertvalue %"char[]" undef, ptr %798, 0, !dbg !2596
  %806 = insertvalue %"char[]" %805, i64 %size1182, 1, !dbg !2596
  %807 = load ptr, ptr %self, align 8
  store %"char[]" %806, ptr %taddr1184, align 8
  %808 = load [2 x i64], ptr %taddr1184, align 8
  %809 = call i64 @std.io.Formatter.out_chars(ptr %retparam1183, ptr %807, [2 x i64] %808), !dbg !2598
  %not_err1185 = icmp eq i64 %809, 0, !dbg !2598
  %810 = call i1 @llvm.expect.i1(i1 %not_err1185, i1 true), !dbg !2598
  br i1 %810, label %after_check1187, label %assign_optional1186, !dbg !2598

assign_optional1186:                              ; preds = %noerr_block1178
  store i64 %809, ptr %error_var1180, align 8, !dbg !2598
  br label %guard_block1188, !dbg !2598

after_check1187:                                  ; preds = %noerr_block1178
  br label %noerr_block1189, !dbg !2598

guard_block1188:                                  ; preds = %assign_optional1186
  %811 = load i64, ptr %error_var1180, align 8, !dbg !2598
  ret i64 %811, !dbg !2598

noerr_block1189:                                  ; preds = %after_check1187
  %812 = load i64, ptr %retparam1183, align 8, !dbg !2598
  %add1190 = add i64 %797, %812, !dbg !2594
  store i64 %add1190, ptr %len906, align 8, !dbg !2594
  br label %if.exit1191, !dbg !2594

if.exit1191:                                      ; preds = %noerr_block1189, %noerr_block1089
  %813 = load ptr, ptr %self, align 8, !dbg !2599
  %ptradd1192 = getelementptr inbounds i8, ptr %813, i64 16, !dbg !2599
  %814 = load i32, ptr %ptradd1192, align 8, !dbg !2599
  %lshrl1193 = lshr i32 %814, 1, !dbg !2599
  %815 = and i32 1, %lshrl1193, !dbg !2599
  %trunc1194 = trunc i32 %815 to i8, !dbg !2599
  %816 = trunc i8 %trunc1194 to i1, !dbg !2599
  br i1 %816, label %if.then1195, label %if.exit1209, !dbg !2599

if.then1195:                                      ; preds = %if.exit1191
  %817 = load i64, ptr %len906, align 8, !dbg !2600
  %818 = load ptr, ptr %self, align 8, !dbg !2601
  %ptradd1197 = getelementptr inbounds i8, ptr %818, i64 16, !dbg !2601
  %ptradd1198 = getelementptr inbounds i8, ptr %ptradd1197, i64 4, !dbg !2601
  %819 = load i32, ptr %ptradd1198, align 4, !dbg !2601
  %zext1199 = zext i32 %819 to i64, !dbg !2601
  %820 = load i64, ptr %pl, align 8, !dbg !2602
  %821 = load i32, ptr %l837, align 4, !dbg !2603
  %sext1200 = sext i32 %821 to i64, !dbg !2603
  %add1201 = add i64 %820, %sext1200, !dbg !2602
  %822 = load ptr, ptr %self, align 8
  %823 = call i64 @std.io.Formatter.pad(ptr %retparam1202, ptr %822, i8 32, i64 %zext1199, i64 %add1201) #5, !dbg !2604
  %not_err1203 = icmp eq i64 %823, 0, !dbg !2604
  %824 = call i1 @llvm.expect.i1(i1 %not_err1203, i1 true), !dbg !2604
  br i1 %824, label %after_check1205, label %assign_optional1204, !dbg !2604

assign_optional1204:                              ; preds = %if.then1195
  store i64 %823, ptr %error_var1196, align 8, !dbg !2604
  br label %guard_block1206, !dbg !2604

after_check1205:                                  ; preds = %if.then1195
  br label %noerr_block1207, !dbg !2604

guard_block1206:                                  ; preds = %assign_optional1204
  %825 = load i64, ptr %error_var1196, align 8, !dbg !2604
  ret i64 %825, !dbg !2604

noerr_block1207:                                  ; preds = %after_check1205
  %826 = load i64, ptr %retparam1202, align 8, !dbg !2604
  %add1208 = add i64 %817, %826, !dbg !2600
  store i64 %add1208, ptr %len906, align 8, !dbg !2600
  br label %if.exit1209, !dbg !2600

if.exit1209:                                      ; preds = %noerr_block1207, %if.exit1191
  %827 = load i64, ptr %len906, align 8, !dbg !2605
  store i64 %827, ptr %0, align 8, !dbg !2605
  ret i64 0, !dbg !2605

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %828 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %829 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr2, align 8
  %830 = load [2 x i64], ptr %taddr2, align 8
  %831 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %831([2 x i64] %828, [2 x i64] %829, [2 x i64] %830, i32 213), !dbg !1815
  unreachable, !dbg !1815

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.144, i64 53 }, ptr %taddr4, align 8
  %832 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr5, align 8
  %833 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr6, align 8
  %834 = load [2 x i64], ptr %taddr6, align 8
  %835 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %835([2 x i64] %832, [2 x i64] %833, [2 x i64] %834, i32 213), !dbg !1834
  unreachable, !dbg !1834

panic12:                                          ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.144, i64 53 }, ptr %taddr13, align 8
  %836 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr14, align 8
  %837 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr15, align 8
  %838 = load [2 x i64], ptr %taddr15, align 8
  %839 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %839([2 x i64] %836, [2 x i64] %837, [2 x i64] %838, i32 213), !dbg !1849
  unreachable, !dbg !1849

panic34:                                          ; preds = %if.exit26
  store %"char[]" { ptr @.panic_msg.144, i64 53 }, ptr %taddr35, align 8
  %840 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr36, align 8
  %841 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr37, align 8
  %842 = load [2 x i64], ptr %taddr37, align 8
  %843 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %843([2 x i64] %840, [2 x i64] %841, [2 x i64] %842, i32 213), !dbg !1868
  unreachable, !dbg !1868

panic134:                                         ; preds = %if.then131
  store %"char[]" { ptr @.panic_msg.149, i64 47 }, ptr %taddr135, align 8
  %844 = load [2 x i64], ptr %taddr135, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr136, align 8
  %845 = load [2 x i64], ptr %taddr136, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr137, align 8
  %846 = load [2 x i64], ptr %taddr137, align 8
  %847 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %847([2 x i64] %844, [2 x i64] %845, [2 x i64] %846, i32 274), !dbg !2606
  unreachable, !dbg !2606

panic142:                                         ; preds = %if.exit139
  store %"char[]" { ptr @.panic_msg.149, i64 47 }, ptr %taddr143, align 8
  %848 = load [2 x i64], ptr %taddr143, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr144, align 8
  %849 = load [2 x i64], ptr %taddr144, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr145, align 8
  %850 = load [2 x i64], ptr %taddr145, align 8
  %851 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %851([2 x i64] %848, [2 x i64] %849, [2 x i64] %850, i32 275), !dbg !2607
  unreachable, !dbg !2607

panic151:                                         ; preds = %checkok146
  store %"char[]" { ptr @.panic_msg.149, i64 47 }, ptr %taddr152, align 8
  %852 = load [2 x i64], ptr %taddr152, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr153, align 8
  %853 = load [2 x i64], ptr %taddr153, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr154, align 8
  %854 = load [2 x i64], ptr %taddr154, align 8
  %855 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %855([2 x i64] %852, [2 x i64] %853, [2 x i64] %854, i32 276), !dbg !2608
  unreachable, !dbg !2608

panic171:                                         ; preds = %loop.body167
  store %"char[]" { ptr @.panic_msg.150, i64 44 }, ptr %taddr172, align 8
  %856 = load [2 x i64], ptr %taddr172, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr173, align 8
  %857 = load [2 x i64], ptr %taddr173, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr174, align 8
  %858 = load [2 x i64], ptr %taddr174, align 8
  %859 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %859([2 x i64] %856, [2 x i64] %857, [2 x i64] %858, i32 282), !dbg !1976
  unreachable, !dbg !1976

panic198:                                         ; preds = %if.then195
  store %"char[]" { ptr @.panic_msg.150, i64 44 }, ptr %taddr199, align 8
  %860 = load [2 x i64], ptr %taddr199, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr200, align 8
  %861 = load [2 x i64], ptr %taddr200, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr201, align 8
  %862 = load [2 x i64], ptr %taddr201, align 8
  %863 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %863([2 x i64] %860, [2 x i64] %861, [2 x i64] %862, i32 284), !dbg !1987
  unreachable, !dbg !1987

panic374:                                         ; preds = %loop.body371
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr375, align 8
  %864 = load [2 x i64], ptr %taddr375, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr376, align 8
  %865 = load [2 x i64], ptr %taddr376, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr377, align 8
  %866 = load [2 x i64], ptr %taddr377, align 8
  %867 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %867([2 x i64] %864, [2 x i64] %865, [2 x i64] %866, i32 332), !dbg !2108
  unreachable, !dbg !2108

panic381:                                         ; preds = %checkok378
  store i64 %zext380, ptr %taddr382, align 8
  %868 = insertvalue %any undef, ptr %taddr382, 0
  %869 = insertvalue %any %868, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr383, align 8
  %870 = load [2 x i64], ptr %taddr383, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr384, align 8
  %871 = load [2 x i64], ptr %taddr384, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr385, align 8
  %872 = load [2 x i64], ptr %taddr385, align 8
  store %any %869, ptr %varargslots, align 8
  %873 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %873, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr386, align 8
  %874 = load [2 x i64], ptr %taddr386, align 8
  call void @std.core.builtin.panicf([2 x i64] %870, [2 x i64] %871, [2 x i64] %872, i32 332, [2 x i64] %874), !dbg !2110
  unreachable, !dbg !2110

panic391:                                         ; preds = %checkok387
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr392, align 8
  %875 = load [2 x i64], ptr %taddr392, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr393, align 8
  %876 = load [2 x i64], ptr %taddr393, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr394, align 8
  %877 = load [2 x i64], ptr %taddr394, align 8
  %878 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %878([2 x i64] %875, [2 x i64] %876, [2 x i64] %877, i32 333), !dbg !2112
  unreachable, !dbg !2112

panic404:                                         ; preds = %if.then401
  store %"char[]" { ptr @.panic_msg.155, i64 44 }, ptr %taddr405, align 8
  %879 = load [2 x i64], ptr %taddr405, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr406, align 8
  %880 = load [2 x i64], ptr %taddr406, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr407, align 8
  %881 = load [2 x i64], ptr %taddr407, align 8
  %882 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %882([2 x i64] %879, [2 x i64] %880, [2 x i64] %881, i32 336), !dbg !2609
  unreachable, !dbg !2609

panic439:                                         ; preds = %loop.body437
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr440, align 8
  %883 = load [2 x i64], ptr %taddr440, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr441, align 8
  %884 = load [2 x i64], ptr %taddr441, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr442, align 8
  %885 = load [2 x i64], ptr %taddr442, align 8
  %886 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %886([2 x i64] %883, [2 x i64] %884, [2 x i64] %885, i32 350), !dbg !2159
  unreachable, !dbg !2159

panic444:                                         ; preds = %checkok443
  store i32 %333, ptr %taddr445, align 4
  %887 = insertvalue %any undef, ptr %taddr445, 0
  %888 = insertvalue %any %887, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr446, align 8
  %889 = load [2 x i64], ptr %taddr446, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr447, align 8
  %890 = load [2 x i64], ptr %taddr447, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr448, align 8
  %891 = load [2 x i64], ptr %taddr448, align 8
  store %any %888, ptr %varargslots449, align 8
  %892 = insertvalue %"any[]" undef, ptr %varargslots449, 0
  %"$$temp450" = insertvalue %"any[]" %892, i64 1, 1
  store %"any[]" %"$$temp450", ptr %taddr451, align 8
  %893 = load [2 x i64], ptr %taddr451, align 8
  call void @std.core.builtin.panicf([2 x i64] %889, [2 x i64] %890, [2 x i64] %891, i32 350, [2 x i64] %893), !dbg !2161
  unreachable, !dbg !2161

panic454:                                         ; preds = %checkok452
  store i32 %333, ptr %taddr455, align 4
  %894 = insertvalue %any undef, ptr %taddr455, 0
  %895 = insertvalue %any %894, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr456, align 8
  %896 = load [2 x i64], ptr %taddr456, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr457, align 8
  %897 = load [2 x i64], ptr %taddr457, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr458, align 8
  %898 = load [2 x i64], ptr %taddr458, align 8
  store %any %895, ptr %varargslots459, align 8
  %899 = insertvalue %"any[]" undef, ptr %varargslots459, 0
  %"$$temp460" = insertvalue %"any[]" %899, i64 1, 1
  store %"any[]" %"$$temp460", ptr %taddr461, align 8
  %900 = load [2 x i64], ptr %taddr461, align 8
  call void @std.core.builtin.panicf([2 x i64] %896, [2 x i64] %897, [2 x i64] %898, i32 350, [2 x i64] %900), !dbg !2161
  unreachable, !dbg !2161

panic467:                                         ; preds = %checkok462
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr468, align 8
  %901 = load [2 x i64], ptr %taddr468, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr469, align 8
  %902 = load [2 x i64], ptr %taddr469, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr470, align 8
  %903 = load [2 x i64], ptr %taddr470, align 8
  %904 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %904([2 x i64] %901, [2 x i64] %902, [2 x i64] %903, i32 351), !dbg !2163
  unreachable, !dbg !2163

panic473:                                         ; preds = %checkok471
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr474, align 8
  %905 = load [2 x i64], ptr %taddr474, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr475, align 8
  %906 = load [2 x i64], ptr %taddr475, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr476, align 8
  %907 = load [2 x i64], ptr %taddr476, align 8
  %908 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %908([2 x i64] %905, [2 x i64] %906, [2 x i64] %907, i32 351), !dbg !2164
  unreachable, !dbg !2164

panic479:                                         ; preds = %checkok477
  store i32 %342, ptr %taddr480, align 4
  %909 = insertvalue %any undef, ptr %taddr480, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr481, align 8
  %911 = load [2 x i64], ptr %taddr481, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr482, align 8
  %912 = load [2 x i64], ptr %taddr482, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr483, align 8
  %913 = load [2 x i64], ptr %taddr483, align 8
  store %any %910, ptr %varargslots484, align 8
  %914 = insertvalue %"any[]" undef, ptr %varargslots484, 0
  %"$$temp485" = insertvalue %"any[]" %914, i64 1, 1
  store %"any[]" %"$$temp485", ptr %taddr486, align 8
  %915 = load [2 x i64], ptr %taddr486, align 8
  call void @std.core.builtin.panicf([2 x i64] %911, [2 x i64] %912, [2 x i64] %913, i32 351, [2 x i64] %915), !dbg !2166
  unreachable, !dbg !2166

panic491:                                         ; preds = %checkok487
  store i32 %346, ptr %taddr492, align 4
  %916 = insertvalue %any undef, ptr %taddr492, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr493, align 8
  %918 = load [2 x i64], ptr %taddr493, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr494, align 8
  %919 = load [2 x i64], ptr %taddr494, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr495, align 8
  %920 = load [2 x i64], ptr %taddr495, align 8
  store %any %917, ptr %varargslots496, align 8
  %921 = insertvalue %"any[]" undef, ptr %varargslots496, 0
  %"$$temp497" = insertvalue %"any[]" %921, i64 1, 1
  store %"any[]" %"$$temp497", ptr %taddr498, align 8
  %922 = load [2 x i64], ptr %taddr498, align 8
  call void @std.core.builtin.panicf([2 x i64] %918, [2 x i64] %919, [2 x i64] %920, i32 352, [2 x i64] %922), !dbg !2169
  unreachable, !dbg !2169

panic501:                                         ; preds = %checkok499
  store i32 %346, ptr %taddr502, align 4
  %923 = insertvalue %any undef, ptr %taddr502, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr503, align 8
  %925 = load [2 x i64], ptr %taddr503, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr504, align 8
  %926 = load [2 x i64], ptr %taddr504, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr505, align 8
  %927 = load [2 x i64], ptr %taddr505, align 8
  store %any %924, ptr %varargslots506, align 8
  %928 = insertvalue %"any[]" undef, ptr %varargslots506, 0
  %"$$temp507" = insertvalue %"any[]" %928, i64 1, 1
  store %"any[]" %"$$temp507", ptr %taddr508, align 8
  %929 = load [2 x i64], ptr %taddr508, align 8
  call void @std.core.builtin.panicf([2 x i64] %925, [2 x i64] %926, [2 x i64] %927, i32 352, [2 x i64] %929), !dbg !2169
  unreachable, !dbg !2169

panic539:                                         ; preds = %loop.cond537
  store %"char[]" { ptr @.panic_msg.156, i64 42 }, ptr %taddr540, align 8
  %930 = load [2 x i64], ptr %taddr540, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr541, align 8
  %931 = load [2 x i64], ptr %taddr541, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr542, align 8
  %932 = load [2 x i64], ptr %taddr542, align 8
  %933 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %933([2 x i64] %930, [2 x i64] %931, [2 x i64] %932, i32 365), !dbg !2200
  unreachable, !dbg !2200

panic588:                                         ; preds = %loop.exit586
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr589, align 8
  %934 = load [2 x i64], ptr %taddr589, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr590, align 8
  %935 = load [2 x i64], ptr %taddr590, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr591, align 8
  %936 = load [2 x i64], ptr %taddr591, align 8
  %937 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %937([2 x i64] %934, [2 x i64] %935, [2 x i64] %936, i32 379), !dbg !2235
  unreachable, !dbg !2235

panic593:                                         ; preds = %checkok592
  store %"char[]" { ptr @.panic_msg.157, i64 10 }, ptr %taddr594, align 8
  %938 = load [2 x i64], ptr %taddr594, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr595, align 8
  %939 = load [2 x i64], ptr %taddr595, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr596, align 8
  %940 = load [2 x i64], ptr %taddr596, align 8
  %941 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %941([2 x i64] %938, [2 x i64] %939, [2 x i64] %940, i32 379), !dbg !2237
  unreachable, !dbg !2237

panic608:                                         ; preds = %if.then605
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr609, align 8
  %942 = load [2 x i64], ptr %taddr609, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr610, align 8
  %943 = load [2 x i64], ptr %taddr610, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr611, align 8
  %944 = load [2 x i64], ptr %taddr611, align 8
  %945 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %945([2 x i64] %942, [2 x i64] %943, [2 x i64] %944, i32 385), !dbg !2248
  unreachable, !dbg !2248

panic614:                                         ; preds = %checkok612
  store %"char[]" { ptr @.panic_msg.158, i64 17 }, ptr %taddr615, align 8
  %946 = load [2 x i64], ptr %taddr615, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr616, align 8
  %947 = load [2 x i64], ptr %taddr616, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr617, align 8
  %948 = load [2 x i64], ptr %taddr617, align 8
  %949 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %949([2 x i64] %946, [2 x i64] %947, [2 x i64] %948, i32 385), !dbg !2250
  unreachable, !dbg !2250

panic663:                                         ; preds = %if.exit661
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr664, align 8
  %950 = load [2 x i64], ptr %taddr664, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr665, align 8
  %951 = load [2 x i64], ptr %taddr665, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr666, align 8
  %952 = load [2 x i64], ptr %taddr666, align 8
  %953 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %953([2 x i64] %950, [2 x i64] %951, [2 x i64] %952, i32 403), !dbg !2277
  unreachable, !dbg !2277

panic673:                                         ; preds = %if.then671
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr674, align 8
  %954 = load [2 x i64], ptr %taddr674, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr675, align 8
  %955 = load [2 x i64], ptr %taddr675, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr676, align 8
  %956 = load [2 x i64], ptr %taddr676, align 8
  %957 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %957([2 x i64] %954, [2 x i64] %955, [2 x i64] %956, i32 407), !dbg !2283
  unreachable, !dbg !2283

panic679:                                         ; preds = %checkok677
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr680, align 8
  %958 = load [2 x i64], ptr %taddr680, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr681, align 8
  %959 = load [2 x i64], ptr %taddr681, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr682, align 8
  %960 = load [2 x i64], ptr %taddr682, align 8
  %961 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %961([2 x i64] %958, [2 x i64] %959, [2 x i64] %960, i32 407), !dbg !2285
  unreachable, !dbg !2285

panic687:                                         ; preds = %loop.cond685
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr688, align 8
  %962 = load [2 x i64], ptr %taddr688, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr689, align 8
  %963 = load [2 x i64], ptr %taddr689, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr690, align 8
  %964 = load [2 x i64], ptr %taddr690, align 8
  %965 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %965([2 x i64] %962, [2 x i64] %963, [2 x i64] %964, i32 408), !dbg !2289
  unreachable, !dbg !2289

panic696:                                         ; preds = %loop.body693
  store %"char[]" { ptr @.panic_msg.159, i64 44 }, ptr %taddr697, align 8
  %966 = load [2 x i64], ptr %taddr697, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr698, align 8
  %967 = load [2 x i64], ptr %taddr698, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr699, align 8
  %968 = load [2 x i64], ptr %taddr699, align 8
  %969 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %969([2 x i64] %966, [2 x i64] %967, [2 x i64] %968, i32 410), !dbg !2292
  unreachable, !dbg !2292

panic705:                                         ; preds = %if.then702
  store %"char[]" { ptr @.panic_msg.155, i64 44 }, ptr %taddr706, align 8
  %970 = load [2 x i64], ptr %taddr706, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr707, align 8
  %971 = load [2 x i64], ptr %taddr707, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr708, align 8
  %972 = load [2 x i64], ptr %taddr708, align 8
  %973 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %973([2 x i64] %970, [2 x i64] %971, [2 x i64] %972, i32 411), !dbg !2610
  unreachable, !dbg !2610

panic712:                                         ; preds = %if.exit710
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr713, align 8
  %974 = load [2 x i64], ptr %taddr713, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr714, align 8
  %975 = load [2 x i64], ptr %taddr714, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr715, align 8
  %976 = load [2 x i64], ptr %taddr715, align 8
  %977 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %977([2 x i64] %974, [2 x i64] %975, [2 x i64] %976, i32 412), !dbg !2299
  unreachable, !dbg !2299

panic723:                                         ; preds = %loop.cond721
  store %"char[]" { ptr @.panic_msg.156, i64 42 }, ptr %taddr724, align 8
  %978 = load [2 x i64], ptr %taddr724, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr725, align 8
  %979 = load [2 x i64], ptr %taddr725, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr726, align 8
  %980 = load [2 x i64], ptr %taddr726, align 8
  %981 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %981([2 x i64] %978, [2 x i64] %979, [2 x i64] %980, i32 414), !dbg !2306
  unreachable, !dbg !2306

panic788:                                         ; preds = %loop.cond785
  store %"char[]" { ptr @.panic_msg.157, i64 10 }, ptr %taddr789, align 8
  %982 = load [2 x i64], ptr %taddr789, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr790, align 8
  %983 = load [2 x i64], ptr %taddr790, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr791, align 8
  %984 = load [2 x i64], ptr %taddr791, align 8
  %985 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %985([2 x i64] %982, [2 x i64] %983, [2 x i64] %984, i32 439), !dbg !2349
  unreachable, !dbg !2349

panic875:                                         ; preds = %loop.exit872
  store %"char[]" { ptr @.panic_msg.149, i64 47 }, ptr %taddr876, align 8
  %986 = load [2 x i64], ptr %taddr876, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr877, align 8
  %987 = load [2 x i64], ptr %taddr877, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr878, align 8
  %988 = load [2 x i64], ptr %taddr878, align 8
  %989 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %989([2 x i64] %986, [2 x i64] %987, [2 x i64] %988, i32 468), !dbg !2611
  unreachable, !dbg !2611

panic884:                                         ; preds = %checkok879
  store %"char[]" { ptr @.panic_msg.149, i64 47 }, ptr %taddr885, align 8
  %990 = load [2 x i64], ptr %taddr885, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr886, align 8
  %991 = load [2 x i64], ptr %taddr886, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr887, align 8
  %992 = load [2 x i64], ptr %taddr887, align 8
  %993 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %993([2 x i64] %990, [2 x i64] %991, [2 x i64] %992, i32 469), !dbg !2612
  unreachable, !dbg !2612

panic977:                                         ; preds = %loop.body974
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr978, align 8
  %994 = load [2 x i64], ptr %taddr978, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr979, align 8
  %995 = load [2 x i64], ptr %taddr979, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr980, align 8
  %996 = load [2 x i64], ptr %taddr980, align 8
  %997 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %997([2 x i64] %994, [2 x i64] %995, [2 x i64] %996, i32 484), !dbg !2474
  unreachable, !dbg !2474

panic1001:                                        ; preds = %switch.case998
  store %"char[]" { ptr @.panic_msg.114, i64 44 }, ptr %taddr1002, align 8
  %998 = load [2 x i64], ptr %taddr1002, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1003, align 8
  %999 = load [2 x i64], ptr %taddr1003, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr1004, align 8
  %1000 = load [2 x i64], ptr %taddr1004, align 8
  %1001 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1001([2 x i64] %998, [2 x i64] %999, [2 x i64] %1000, i32 490), !dbg !2613
  unreachable, !dbg !2613

panic1048:                                        ; preds = %loop.body1045
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr1049, align 8
  %1002 = load [2 x i64], ptr %taddr1049, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1050, align 8
  %1003 = load [2 x i64], ptr %taddr1050, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr1051, align 8
  %1004 = load [2 x i64], ptr %taddr1051, align 8
  %1005 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1005([2 x i64] %1002, [2 x i64] %1003, [2 x i64] %1004, i32 497), !dbg !2513
  unreachable, !dbg !2513

panic1060:                                        ; preds = %loop.body1057
  store %"char[]" { ptr @.panic_msg.114, i64 44 }, ptr %taddr1061, align 8
  %1006 = load [2 x i64], ptr %taddr1061, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1062, align 8
  %1007 = load [2 x i64], ptr %taddr1062, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr1063, align 8
  %1008 = load [2 x i64], ptr %taddr1063, align 8
  %1009 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1009([2 x i64] %1006, [2 x i64] %1007, [2 x i64] %1008, i32 498), !dbg !2614
  unreachable, !dbg !2614

panic1106:                                        ; preds = %loop.body1103
  store %"char[]" { ptr @.panic_msg.153, i64 42 }, ptr %taddr1107, align 8
  %1010 = load [2 x i64], ptr %taddr1107, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1108, align 8
  %1011 = load [2 x i64], ptr %taddr1108, align 8
  store %"char[]" { ptr @.func.143, i64 11 }, ptr %taddr1109, align 8
  %1012 = load [2 x i64], ptr %taddr1109, align 8
  %1013 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1013([2 x i64] %1010, [2 x i64] %1011, [2 x i64] %1012, i32 508), !dbg !2550
  unreachable, !dbg !2550
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.ntoa(ptr %0, ptr %1, i128 %2, i8 %3, i32 %4) #0 !dbg !2615 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %value = alloca i128, align 16
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %buf = alloca [256 x i8], align 1
  %len = alloca i64, align 8
  %past_10 = alloca i8, align 1
  %digit = alloca i8, align 1
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr20 = alloca i64, align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr26 = alloca %"any[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %5 = icmp eq ptr %1, null, !dbg !2619
  %6 = call i1 @llvm.expect.i1(i1 %5, i1 false), !dbg !2619
  br i1 %6, label %panic, label %checkok, !dbg !2619

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2620, metadata !DIExpression()), !dbg !2621
  store i128 %2, ptr %value, align 16
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2622, metadata !DIExpression()), !dbg !2623
  store i8 %3, ptr %negative, align 1
  call void @llvm.dbg.declare(metadata ptr %negative, metadata !2624, metadata !DIExpression()), !dbg !2625
  store i32 %4, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2626, metadata !DIExpression()), !dbg !2627
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !2628, metadata !DIExpression()), !dbg !2632
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2633, metadata !DIExpression()), !dbg !2634
  store i64 0, ptr %len, align 8, !dbg !2634
  %7 = load i128, ptr %value, align 16, !dbg !2635
  %i2nb = icmp eq i128 %7, 0, !dbg !2635
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2635

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8, !dbg !2636
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2636
  %9 = load i32, ptr %ptradd, align 8, !dbg !2637
  %10 = and i32 %9, -17, !dbg !2637
  store i32 %10, ptr %ptradd, align 8, !dbg !2637
  br label %if.exit, !dbg !2637

if.exit:                                          ; preds = %if.then, %checkok
  %11 = load ptr, ptr %self, align 8, !dbg !2638
  %ptradd3 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !2638
  %12 = load i32, ptr %ptradd3, align 8, !dbg !2638
  %lshrl = lshr i32 %12, 6, !dbg !2638
  %13 = and i32 1, %lshrl, !dbg !2638
  %trunc = trunc i32 %13 to i8, !dbg !2638
  %14 = trunc i8 %trunc to i1, !dbg !2638
  %not = xor i1 %14, true, !dbg !2638
  br i1 %not, label %or.phi, label %or.rhs, !dbg !2638

or.rhs:                                           ; preds = %if.exit
  %15 = load i128, ptr %value, align 16, !dbg !2639
  %i2b = icmp ne i128 %15, 0, !dbg !2639
  br label %or.phi, !dbg !2639

or.phi:                                           ; preds = %or.rhs, %if.exit
  %val = phi i1 [ true, %if.exit ], [ %i2b, %or.rhs ], !dbg !2639
  br i1 %val, label %if.then4, label %if.exit42, !dbg !2639

if.then4:                                         ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %past_10, metadata !2640, metadata !DIExpression()), !dbg !2642
  %16 = load ptr, ptr %self, align 8, !dbg !2643
  %ptradd5 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !2643
  %17 = load i32, ptr %ptradd5, align 8, !dbg !2643
  %lshrl6 = lshr i32 %17, 5, !dbg !2643
  %18 = and i32 1, %lshrl6, !dbg !2643
  %trunc7 = trunc i32 %18 to i8, !dbg !2643
  %19 = trunc i8 %trunc7 to i1, !dbg !2643
  %ternary = select i1 %19, i8 65, i8 97, !dbg !2644
  %zext = zext i8 %ternary to i32, !dbg !2644
  %sub = sub i32 %zext, 10, !dbg !2643
  %trunc8 = trunc i32 %sub to i8, !dbg !2643
  store i8 %trunc8, ptr %past_10, align 1, !dbg !2643
  br label %loop.body, !dbg !2645

loop.cond:                                        ; preds = %checkok41
  %20 = load i128, ptr %value, align 16, !dbg !2646
  %i2b9 = icmp ne i128 %20, 0, !dbg !2646
  br i1 %i2b9, label %loop.body, label %loop.exit, !dbg !2646

loop.body:                                        ; preds = %loop.cond, %if.then4
  %21 = load i64, ptr %len, align 8, !dbg !2648
  %le = icmp ule i64 256, %21, !dbg !2648
  br i1 %le, label %if.then10, label %if.exit11, !dbg !2648

if.then10:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2650

if.exit11:                                        ; preds = %loop.body
  call void @llvm.dbg.declare(metadata ptr %digit, metadata !2651, metadata !DIExpression()), !dbg !2652
  %22 = load i128, ptr %value, align 16, !dbg !2653
  %23 = load i32, ptr %base, align 4, !dbg !2654
  %zext12 = zext i32 %23 to i128, !dbg !2654
  %zero = icmp eq i128 %zext12, 0, !dbg !2655
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2655
  br i1 %24, label %panic13, label %checkok17, !dbg !2655

checkok17:                                        ; preds = %if.exit11
  %umod = urem i128 %22, %zext12, !dbg !2655
  %trunc18 = trunc i128 %umod to i8, !dbg !2655
  store i8 %trunc18, ptr %digit, align 1, !dbg !2655
  %25 = load i64, ptr %len, align 8, !dbg !2656
  %add = add i64 %25, 1, !dbg !2656
  store i64 %add, ptr %len, align 8, !dbg !2656
  %ge = icmp uge i64 %25, 256, !dbg !2656
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2656
  br i1 %26, label %panic19, label %checkok27, !dbg !2656

checkok27:                                        ; preds = %checkok17
  %ptradd28 = getelementptr inbounds i8, ptr %buf, i64 %25, !dbg !2656
  %27 = load i8, ptr %digit, align 1, !dbg !2657
  %zext29 = zext i8 %27 to i32, !dbg !2657
  %28 = load i8, ptr %digit, align 1, !dbg !2658
  %zext30 = zext i8 %28 to i32, !dbg !2658
  %gt = icmp ugt i32 10, %zext30, !dbg !2658
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !2658

cond.lhs:                                         ; preds = %checkok27
  br label %cond.phi, !dbg !2659

cond.rhs:                                         ; preds = %checkok27
  %29 = load i8, ptr %past_10, align 1, !dbg !2660
  br label %cond.phi, !dbg !2660

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val31 = phi i8 [ 48, %cond.lhs ], [ %29, %cond.rhs ], !dbg !2660
  %zext32 = zext i8 %val31 to i32, !dbg !2660
  %add33 = add i32 %zext29, %zext32, !dbg !2657
  %trunc34 = trunc i32 %add33 to i8, !dbg !2657
  store i8 %trunc34, ptr %ptradd28, align 1, !dbg !2657
  %30 = load i128, ptr %value, align 16, !dbg !2661
  %31 = load i32, ptr %base, align 4, !dbg !2662
  %zext35 = zext i32 %31 to i128, !dbg !2662
  %zero36 = icmp eq i128 %zext35, 0, !dbg !2661
  %32 = call i1 @llvm.expect.i1(i1 %zero36, i1 false), !dbg !2661
  br i1 %32, label %panic37, label %checkok41, !dbg !2661

checkok41:                                        ; preds = %cond.phi
  %udiv = udiv i128 %30, %zext35, !dbg !2661
  store i128 %udiv, ptr %value, align 16, !dbg !2661
  br label %loop.cond, !dbg !2661

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit42, !dbg !2661

if.exit42:                                        ; preds = %loop.exit, %or.phi
  %33 = insertvalue %"char[]" undef, ptr %buf, 0, !dbg !2663
  %34 = insertvalue %"char[]" %33, i64 256, 1, !dbg !2663
  %35 = load ptr, ptr %self, align 8
  store %"char[]" %34, ptr %taddr43, align 8
  %36 = load [2 x i64], ptr %taddr43, align 8
  %37 = load i64, ptr %len, align 8
  %38 = load i8, ptr %negative, align 1
  %39 = load i32, ptr %base, align 4
  %40 = call i64 @std.io.Formatter.ntoa_format(ptr %retparam, ptr %35, [2 x i64] %36, i64 %37, i8 %38, i32 %39), !dbg !2664
  %not_err = icmp eq i64 %40, 0, !dbg !2664
  %41 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2664
  br i1 %41, label %after_check, label %assign_optional, !dbg !2664

assign_optional:                                  ; preds = %if.exit42
  store i64 %40, ptr %reterr, align 8, !dbg !2664
  br label %err_retblock, !dbg !2664

after_check:                                      ; preds = %if.exit42
  %42 = load i64, ptr %retparam, align 8, !dbg !2664
  store i64 %42, ptr %0, align 8, !dbg !2664
  ret i64 0, !dbg !2664

err_retblock:                                     ; preds = %assign_optional
  %43 = load i64, ptr %reterr, align 8, !dbg !2664
  ret i64 %43, !dbg !2664

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %44 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %45 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.160, i64 4 }, ptr %taddr2, align 8
  %46 = load [2 x i64], ptr %taddr2, align 8
  %47 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %47([2 x i64] %44, [2 x i64] %45, [2 x i64] %46, i32 531), !dbg !2621
  unreachable, !dbg !2621

panic13:                                          ; preds = %if.exit11
  store %"char[]" { ptr @.panic_msg.157, i64 10 }, ptr %taddr14, align 8
  %48 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr15, align 8
  %49 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.160, i64 4 }, ptr %taddr16, align 8
  %50 = load [2 x i64], ptr %taddr16, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 546), !dbg !2655
  unreachable, !dbg !2655

panic19:                                          ; preds = %checkok17
  store i64 256, ptr %taddr20, align 8
  %52 = insertvalue %any undef, ptr %taddr20, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr21, align 8
  %54 = insertvalue %any undef, ptr %taddr21, 0
  %55 = insertvalue %any %54, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr22, align 8
  %56 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr23, align 8
  %57 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.func.160, i64 4 }, ptr %taddr24, align 8
  %58 = load [2 x i64], ptr %taddr24, align 8
  store %any %53, ptr %varargslots, align 8
  %ptradd25 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %55, ptr %ptradd25, align 8
  %59 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %59, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr26, align 8
  %60 = load [2 x i64], ptr %taddr26, align 8
  call void @std.core.builtin.panicf([2 x i64] %56, [2 x i64] %57, [2 x i64] %58, i32 547, [2 x i64] %60), !dbg !2656
  unreachable, !dbg !2656

panic37:                                          ; preds = %cond.phi
  store %"char[]" { ptr @.panic_msg.158, i64 17 }, ptr %taddr38, align 8
  %61 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr39, align 8
  %62 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.func.160, i64 4 }, ptr %taddr40, align 8
  %63 = load [2 x i64], ptr %taddr40, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64([2 x i64] %61, [2 x i64] %62, [2 x i64] %63, i32 548), !dbg !2661
  unreachable, !dbg !2661
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.ntoa_format(ptr %0, ptr %1, [2 x i64] %2, i64 %3, i8 %4, i32 %5) #0 !dbg !2665 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %negative = alloca i8, align 1
  %base = alloca i32, align 4
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch = alloca i32, align 4
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %varargslots123 = alloca [2 x %any], align 8
  %taddr126 = alloca %"any[]", align 8
  %taddr137 = alloca i64, align 8
  %taddr138 = alloca i64, align 8
  %taddr139 = alloca %"char[]", align 8
  %taddr140 = alloca %"char[]", align 8
  %taddr141 = alloca %"char[]", align 8
  %varargslots142 = alloca [2 x %any], align 8
  %taddr145 = alloca %"any[]", align 8
  %taddr157 = alloca i64, align 8
  %taddr158 = alloca i64, align 8
  %taddr159 = alloca %"char[]", align 8
  %taddr160 = alloca %"char[]", align 8
  %taddr161 = alloca %"char[]", align 8
  %varargslots162 = alloca [2 x %any], align 8
  %taddr165 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr172 = alloca %"char[]", align 8
  %taddr173 = alloca %"char[]", align 8
  %taddr174 = alloca %"any[]", align 8
  %taddr179 = alloca i64, align 8
  %taddr180 = alloca i64, align 8
  %taddr181 = alloca %"char[]", align 8
  %taddr182 = alloca %"char[]", align 8
  %taddr183 = alloca %"char[]", align 8
  %varargslots184 = alloca [2 x %any], align 8
  %taddr187 = alloca %"any[]", align 8
  %switch192 = alloca i8, align 1
  %taddr204 = alloca i64, align 8
  %taddr205 = alloca i64, align 8
  %taddr206 = alloca %"char[]", align 8
  %taddr207 = alloca %"char[]", align 8
  %taddr208 = alloca %"char[]", align 8
  %varargslots209 = alloca [2 x %any], align 8
  %taddr212 = alloca %"any[]", align 8
  %taddr228 = alloca i64, align 8
  %taddr229 = alloca i64, align 8
  %taddr230 = alloca %"char[]", align 8
  %taddr231 = alloca %"char[]", align 8
  %taddr232 = alloca %"char[]", align 8
  %varargslots233 = alloca [2 x %any], align 8
  %taddr236 = alloca %"any[]", align 8
  %taddr253 = alloca i64, align 8
  %taddr254 = alloca i64, align 8
  %taddr255 = alloca %"char[]", align 8
  %taddr256 = alloca %"char[]", align 8
  %taddr257 = alloca %"char[]", align 8
  %varargslots258 = alloca [2 x %any], align 8
  %taddr261 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %taddr269 = alloca i64, align 8
  %taddr270 = alloca i64, align 8
  %taddr271 = alloca %"char[]", align 8
  %taddr272 = alloca %"char[]", align 8
  %taddr273 = alloca %"char[]", align 8
  %varargslots274 = alloca [2 x %any], align 8
  %taddr277 = alloca %"any[]", align 8
  %taddr283 = alloca i64, align 8
  %taddr284 = alloca i64, align 8
  %taddr285 = alloca %"char[]", align 8
  %taddr286 = alloca %"char[]", align 8
  %taddr287 = alloca %"char[]", align 8
  %varargslots288 = alloca [2 x %any], align 8
  %taddr291 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %taddr293 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %6 = icmp eq ptr %1, null, !dbg !2668
  %7 = call i1 @llvm.expect.i1(i1 %6, i1 false), !dbg !2668
  br i1 %7, label %panic, label %checkok, !dbg !2668

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2669, metadata !DIExpression()), !dbg !2670
  store [2 x i64] %2, ptr %buf, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !2671, metadata !DIExpression()), !dbg !2672
  store i64 %3, ptr %len, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2673, metadata !DIExpression()), !dbg !2674
  store i8 %4, ptr %negative, align 1
  call void @llvm.dbg.declare(metadata ptr %negative, metadata !2675, metadata !DIExpression()), !dbg !2676
  store i32 %5, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2677, metadata !DIExpression()), !dbg !2678
  %8 = load ptr, ptr %self, align 8, !dbg !2679
  %ptradd = getelementptr inbounds i8, ptr %8, i64 16, !dbg !2679
  %9 = load i32, ptr %ptradd, align 8, !dbg !2679
  %lshrl = lshr i32 %9, 1, !dbg !2679
  %10 = and i32 1, %lshrl, !dbg !2679
  %trunc = trunc i32 %10 to i8, !dbg !2679
  %11 = trunc i8 %trunc to i1, !dbg !2679
  %not = xor i1 %11, true, !dbg !2679
  br i1 %not, label %if.then, label %if.exit71, !dbg !2679

if.then:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !2680
  %ptradd3 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !2680
  %ptradd4 = getelementptr inbounds i8, ptr %ptradd3, i64 4, !dbg !2680
  %13 = load i32, ptr %ptradd4, align 4, !dbg !2680
  %i2b = icmp ne i32 %13, 0, !dbg !2680
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !2680

and.rhs:                                          ; preds = %if.then
  %14 = load ptr, ptr %self, align 8, !dbg !2682
  %ptradd5 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !2682
  %15 = load i32, ptr %ptradd5, align 8, !dbg !2682
  %16 = and i32 1, %15, !dbg !2682
  %trunc6 = trunc i32 %16 to i8, !dbg !2682
  %17 = trunc i8 %trunc6 to i1, !dbg !2682
  br label %and.phi, !dbg !2682

and.phi:                                          ; preds = %and.rhs, %if.then
  %val = phi i1 [ false, %if.then ], [ %17, %and.rhs ], !dbg !2682
  br i1 %val, label %and.rhs7, label %and.phi18, !dbg !2682

and.rhs7:                                         ; preds = %and.phi
  %18 = load i8, ptr %negative, align 1, !dbg !2683
  %19 = trunc i8 %18 to i1, !dbg !2683
  br i1 %19, label %or.phi, label %or.rhs, !dbg !2683

or.rhs:                                           ; preds = %and.rhs7
  %20 = load ptr, ptr %self, align 8, !dbg !2684
  %ptradd8 = getelementptr inbounds i8, ptr %20, i64 16, !dbg !2684
  %21 = load i32, ptr %ptradd8, align 8, !dbg !2684
  %lshrl9 = lshr i32 %21, 2, !dbg !2684
  %22 = and i32 1, %lshrl9, !dbg !2684
  %trunc10 = trunc i32 %22 to i8, !dbg !2684
  %23 = trunc i8 %trunc10 to i1, !dbg !2684
  br label %or.phi, !dbg !2684

or.phi:                                           ; preds = %or.rhs, %and.rhs7
  %val11 = phi i1 [ true, %and.rhs7 ], [ %23, %or.rhs ], !dbg !2684
  br i1 %val11, label %or.phi16, label %or.rhs12, !dbg !2684

or.rhs12:                                         ; preds = %or.phi
  %24 = load ptr, ptr %self, align 8, !dbg !2685
  %ptradd13 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !2685
  %25 = load i32, ptr %ptradd13, align 8, !dbg !2685
  %lshrl14 = lshr i32 %25, 3, !dbg !2685
  %26 = and i32 1, %lshrl14, !dbg !2685
  %trunc15 = trunc i32 %26 to i8, !dbg !2685
  %27 = trunc i8 %trunc15 to i1, !dbg !2685
  br label %or.phi16, !dbg !2685

or.phi16:                                         ; preds = %or.rhs12, %or.phi
  %val17 = phi i1 [ true, %or.phi ], [ %27, %or.rhs12 ], !dbg !2685
  br label %and.phi18, !dbg !2685

and.phi18:                                        ; preds = %or.phi16, %and.phi
  %val19 = phi i1 [ false, %and.phi ], [ %val17, %or.phi16 ], !dbg !2685
  br i1 %val19, label %if.then20, label %if.exit, !dbg !2685

if.then20:                                        ; preds = %and.phi18
  %28 = load ptr, ptr %self, align 8, !dbg !2686
  %ptradd21 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !2686
  %ptradd22 = getelementptr inbounds i8, ptr %ptradd21, i64 4, !dbg !2686
  %29 = load i32, ptr %ptradd22, align 4, !dbg !2686
  %sub = sub i32 %29, 1, !dbg !2686
  store i32 %sub, ptr %ptradd22, align 4, !dbg !2686
  br label %if.exit, !dbg !2686

if.exit:                                          ; preds = %if.then20, %and.phi18
  br label %loop.cond, !dbg !2687

loop.cond:                                        ; preds = %checkok38, %if.exit
  %30 = load i64, ptr %len, align 8, !dbg !2688
  %31 = load ptr, ptr %self, align 8, !dbg !2690
  %ptradd23 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !2690
  %ptradd24 = getelementptr inbounds i8, ptr %ptradd23, i64 8, !dbg !2690
  %32 = load i32, ptr %ptradd24, align 8, !dbg !2690
  %zext = zext i32 %32 to i64, !dbg !2690
  %lt = icmp ult i64 %30, %zext, !dbg !2688
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2688

loop.body:                                        ; preds = %loop.cond
  %33 = load i64, ptr %len, align 8, !dbg !2691
  %ptradd25 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2693
  %34 = load i64, ptr %ptradd25, align 8, !dbg !2693
  %ge = icmp uge i64 %33, %34, !dbg !2691
  br i1 %ge, label %if.then26, label %if.exit27, !dbg !2691

if.then26:                                        ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2694

if.exit27:                                        ; preds = %loop.body
  %ptradd28 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2695
  %35 = load i64, ptr %ptradd28, align 8, !dbg !2695
  %36 = load ptr, ptr %buf, align 8, !dbg !2695
  %37 = load i64, ptr %len, align 8, !dbg !2696
  %add = add i64 %37, 1, !dbg !2696
  store i64 %add, ptr %len, align 8, !dbg !2696
  %ge29 = icmp uge i64 %37, %35, !dbg !2696
  %38 = call i1 @llvm.expect.i1(i1 %ge29, i1 false), !dbg !2696
  br i1 %38, label %panic30, label %checkok38, !dbg !2696

checkok38:                                        ; preds = %if.exit27
  %ptradd39 = getelementptr inbounds i8, ptr %36, i64 %37, !dbg !2696
  store i8 48, ptr %ptradd39, align 1, !dbg !2697
  br label %loop.cond, !dbg !2697

loop.exit:                                        ; preds = %loop.cond
  br label %loop.cond40, !dbg !2698

loop.cond40:                                      ; preds = %checkok68, %loop.exit
  %39 = load ptr, ptr %self, align 8, !dbg !2699
  %ptradd41 = getelementptr inbounds i8, ptr %39, i64 16, !dbg !2699
  %40 = load i32, ptr %ptradd41, align 8, !dbg !2699
  %41 = and i32 1, %40, !dbg !2699
  %trunc42 = trunc i32 %41 to i8, !dbg !2699
  %42 = trunc i8 %trunc42 to i1, !dbg !2699
  br i1 %42, label %and.rhs43, label %and.phi48, !dbg !2699

and.rhs43:                                        ; preds = %loop.cond40
  %43 = load i64, ptr %len, align 8, !dbg !2701
  %44 = load ptr, ptr %self, align 8, !dbg !2702
  %ptradd44 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !2702
  %ptradd45 = getelementptr inbounds i8, ptr %ptradd44, i64 4, !dbg !2702
  %45 = load i32, ptr %ptradd45, align 4, !dbg !2702
  %zext46 = zext i32 %45 to i64, !dbg !2702
  %lt47 = icmp ult i64 %43, %zext46, !dbg !2701
  br label %and.phi48, !dbg !2701

and.phi48:                                        ; preds = %and.rhs43, %loop.cond40
  %val49 = phi i1 [ false, %loop.cond40 ], [ %lt47, %and.rhs43 ], !dbg !2701
  br i1 %val49, label %loop.body50, label %loop.exit70, !dbg !2701

loop.body50:                                      ; preds = %and.phi48
  %46 = load i64, ptr %len, align 8, !dbg !2703
  %ptradd51 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2705
  %47 = load i64, ptr %ptradd51, align 8, !dbg !2705
  %ge52 = icmp uge i64 %46, %47, !dbg !2703
  br i1 %ge52, label %if.then53, label %if.exit54, !dbg !2703

if.then53:                                        ; preds = %loop.body50
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2706

if.exit54:                                        ; preds = %loop.body50
  %ptradd55 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2707
  %48 = load i64, ptr %ptradd55, align 8, !dbg !2707
  %49 = load ptr, ptr %buf, align 8, !dbg !2707
  %50 = load i64, ptr %len, align 8, !dbg !2708
  %add56 = add i64 %50, 1, !dbg !2708
  store i64 %add56, ptr %len, align 8, !dbg !2708
  %ge57 = icmp uge i64 %50, %48, !dbg !2708
  %51 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !2708
  br i1 %51, label %panic58, label %checkok68, !dbg !2708

checkok68:                                        ; preds = %if.exit54
  %ptradd69 = getelementptr inbounds i8, ptr %49, i64 %50, !dbg !2708
  store i8 48, ptr %ptradd69, align 1, !dbg !2709
  br label %loop.cond40, !dbg !2709

loop.exit70:                                      ; preds = %and.phi48
  br label %if.exit71, !dbg !2709

if.exit71:                                        ; preds = %loop.exit70, %checkok
  %52 = load ptr, ptr %self, align 8, !dbg !2710
  %ptradd72 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !2710
  %53 = load i32, ptr %ptradd72, align 8, !dbg !2710
  %lshrl73 = lshr i32 %53, 4, !dbg !2710
  %54 = and i32 1, %lshrl73, !dbg !2710
  %trunc74 = trunc i32 %54 to i8, !dbg !2710
  %55 = trunc i8 %trunc74 to i1, !dbg !2710
  br i1 %55, label %and.rhs75, label %and.phi76, !dbg !2710

and.rhs75:                                        ; preds = %if.exit71
  %56 = load i32, ptr %base, align 4, !dbg !2711
  %neq = icmp ne i32 10, %56, !dbg !2711
  br label %and.phi76, !dbg !2711

and.phi76:                                        ; preds = %and.rhs75, %if.exit71
  %val77 = phi i1 [ false, %if.exit71 ], [ %neq, %and.rhs75 ], !dbg !2711
  br i1 %val77, label %if.then78, label %if.exit191, !dbg !2711

if.then78:                                        ; preds = %and.phi76
  %57 = load ptr, ptr %self, align 8, !dbg !2712
  %ptradd79 = getelementptr inbounds i8, ptr %57, i64 16, !dbg !2712
  %58 = load i32, ptr %ptradd79, align 8, !dbg !2712
  %lshrl80 = lshr i32 %58, 6, !dbg !2712
  %59 = and i32 1, %lshrl80, !dbg !2712
  %trunc81 = trunc i32 %59 to i8, !dbg !2712
  %60 = trunc i8 %trunc81 to i1, !dbg !2712
  %not82 = xor i1 %60, true, !dbg !2712
  br i1 %not82, label %and.rhs83, label %and.phi85, !dbg !2712

and.rhs83:                                        ; preds = %if.then78
  %61 = load i64, ptr %len, align 8, !dbg !2714
  %i2b84 = icmp ne i64 %61, 0, !dbg !2714
  br label %and.phi85, !dbg !2714

and.phi85:                                        ; preds = %and.rhs83, %if.then78
  %val86 = phi i1 [ false, %if.then78 ], [ %i2b84, %and.rhs83 ], !dbg !2714
  br i1 %val86, label %and.rhs87, label %and.phi91, !dbg !2714

and.rhs87:                                        ; preds = %and.phi85
  %62 = load i64, ptr %len, align 8, !dbg !2715
  %63 = load ptr, ptr %self, align 8, !dbg !2716
  %ptradd88 = getelementptr inbounds i8, ptr %63, i64 16, !dbg !2716
  %ptradd89 = getelementptr inbounds i8, ptr %ptradd88, i64 8, !dbg !2716
  %64 = load i32, ptr %ptradd89, align 8, !dbg !2716
  %zext90 = zext i32 %64 to i64, !dbg !2716
  %eq = icmp eq i64 %62, %zext90, !dbg !2715
  br label %and.phi91, !dbg !2715

and.phi91:                                        ; preds = %and.rhs87, %and.phi85
  %val92 = phi i1 [ false, %and.phi85 ], [ %eq, %and.rhs87 ], !dbg !2715
  br i1 %val92, label %and.rhs93, label %and.phi98, !dbg !2715

and.rhs93:                                        ; preds = %and.phi91
  %65 = load i64, ptr %len, align 8, !dbg !2717
  %66 = load ptr, ptr %self, align 8, !dbg !2718
  %ptradd94 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !2718
  %ptradd95 = getelementptr inbounds i8, ptr %ptradd94, i64 4, !dbg !2718
  %67 = load i32, ptr %ptradd95, align 4, !dbg !2718
  %zext96 = zext i32 %67 to i64, !dbg !2718
  %eq97 = icmp eq i64 %65, %zext96, !dbg !2717
  br label %and.phi98, !dbg !2717

and.phi98:                                        ; preds = %and.rhs93, %and.phi91
  %val99 = phi i1 [ false, %and.phi91 ], [ %eq97, %and.rhs93 ], !dbg !2717
  br i1 %val99, label %if.then100, label %if.exit106, !dbg !2717

if.then100:                                       ; preds = %and.phi98
  %68 = load i64, ptr %len, align 8, !dbg !2719
  %sub101 = sub i64 %68, 1, !dbg !2719
  store i64 %sub101, ptr %len, align 8, !dbg !2719
  %69 = load i64, ptr %len, align 8, !dbg !2721
  %i2b102 = icmp ne i64 %69, 0, !dbg !2721
  br i1 %i2b102, label %if.then103, label %if.exit105, !dbg !2721

if.then103:                                       ; preds = %if.then100
  %70 = load i64, ptr %len, align 8, !dbg !2722
  %sub104 = sub i64 %70, 1, !dbg !2722
  store i64 %sub104, ptr %len, align 8, !dbg !2722
  br label %if.exit105, !dbg !2722

if.exit105:                                       ; preds = %if.then103, %if.then100
  br label %if.exit106, !dbg !2722

if.exit106:                                       ; preds = %if.exit105, %and.phi98
  %71 = load i32, ptr %base, align 4, !dbg !2723
  %neq107 = icmp ne i32 10, %71, !dbg !2723
  br i1 %neq107, label %if.then108, label %if.exit190, !dbg !2723

if.then108:                                       ; preds = %if.exit106
  %72 = load i64, ptr %len, align 8, !dbg !2724
  %add109 = add i64 %72, 1, !dbg !2724
  %ptradd110 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2726
  %73 = load i64, ptr %ptradd110, align 8, !dbg !2726
  %ge111 = icmp sge i64 %add109, %73, !dbg !2724
  %check = icmp sge i64 %73, 0, !dbg !2724
  %siui-ge = and i1 %check, %ge111, !dbg !2724
  br i1 %siui-ge, label %if.then112, label %if.exit113, !dbg !2724

if.then112:                                       ; preds = %if.then108
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2727

if.exit113:                                       ; preds = %if.then108
  %74 = load i32, ptr %base, align 4
  store i32 %74, ptr %switch, align 4
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit113
  %75 = load i32, ptr %switch, align 4
  switch i32 %75, label %switch.default [
    i32 16, label %switch.case
    i32 8, label %switch.case132
    i32 2, label %switch.case152
  ]

switch.case:                                      ; preds = %switch.entry
  %ptradd114 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2728
  %76 = load i64, ptr %ptradd114, align 8, !dbg !2728
  %77 = load ptr, ptr %buf, align 8, !dbg !2728
  %78 = load i64, ptr %len, align 8, !dbg !2731
  %add115 = add i64 %78, 1, !dbg !2731
  store i64 %add115, ptr %len, align 8, !dbg !2731
  %ge116 = icmp uge i64 %78, %76, !dbg !2731
  %79 = call i1 @llvm.expect.i1(i1 %ge116, i1 false), !dbg !2731
  br i1 %79, label %panic117, label %checkok127, !dbg !2731

checkok127:                                       ; preds = %switch.case
  %ptradd128 = getelementptr inbounds i8, ptr %77, i64 %78, !dbg !2731
  %80 = load ptr, ptr %self, align 8, !dbg !2732
  %ptradd129 = getelementptr inbounds i8, ptr %80, i64 16, !dbg !2732
  %81 = load i32, ptr %ptradd129, align 8, !dbg !2732
  %lshrl130 = lshr i32 %81, 5, !dbg !2732
  %82 = and i32 1, %lshrl130, !dbg !2732
  %trunc131 = trunc i32 %82 to i8, !dbg !2732
  %83 = trunc i8 %trunc131 to i1, !dbg !2732
  %ternary = select i1 %83, i8 88, i8 120, !dbg !2733
  store i8 %ternary, ptr %ptradd128, align 1, !dbg !2733
  br label %switch.exit, !dbg !2733

switch.case132:                                   ; preds = %switch.entry
  %ptradd133 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2734
  %84 = load i64, ptr %ptradd133, align 8, !dbg !2734
  %85 = load ptr, ptr %buf, align 8, !dbg !2734
  %86 = load i64, ptr %len, align 8, !dbg !2736
  %add134 = add i64 %86, 1, !dbg !2736
  store i64 %add134, ptr %len, align 8, !dbg !2736
  %ge135 = icmp uge i64 %86, %84, !dbg !2736
  %87 = call i1 @llvm.expect.i1(i1 %ge135, i1 false), !dbg !2736
  br i1 %87, label %panic136, label %checkok146, !dbg !2736

checkok146:                                       ; preds = %switch.case132
  %ptradd147 = getelementptr inbounds i8, ptr %85, i64 %86, !dbg !2736
  %88 = load ptr, ptr %self, align 8, !dbg !2737
  %ptradd148 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !2737
  %89 = load i32, ptr %ptradd148, align 8, !dbg !2737
  %lshrl149 = lshr i32 %89, 5, !dbg !2737
  %90 = and i32 1, %lshrl149, !dbg !2737
  %trunc150 = trunc i32 %90 to i8, !dbg !2737
  %91 = trunc i8 %trunc150 to i1, !dbg !2737
  %ternary151 = select i1 %91, i8 79, i8 111, !dbg !2738
  store i8 %ternary151, ptr %ptradd147, align 1, !dbg !2738
  br label %switch.exit, !dbg !2738

switch.case152:                                   ; preds = %switch.entry
  %ptradd153 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2739
  %92 = load i64, ptr %ptradd153, align 8, !dbg !2739
  %93 = load ptr, ptr %buf, align 8, !dbg !2739
  %94 = load i64, ptr %len, align 8, !dbg !2741
  %add154 = add i64 %94, 1, !dbg !2741
  store i64 %add154, ptr %len, align 8, !dbg !2741
  %ge155 = icmp uge i64 %94, %92, !dbg !2741
  %95 = call i1 @llvm.expect.i1(i1 %ge155, i1 false), !dbg !2741
  br i1 %95, label %panic156, label %checkok166, !dbg !2741

checkok166:                                       ; preds = %switch.case152
  %ptradd167 = getelementptr inbounds i8, ptr %93, i64 %94, !dbg !2741
  %96 = load ptr, ptr %self, align 8, !dbg !2742
  %ptradd168 = getelementptr inbounds i8, ptr %96, i64 16, !dbg !2742
  %97 = load i32, ptr %ptradd168, align 8, !dbg !2742
  %lshrl169 = lshr i32 %97, 5, !dbg !2742
  %98 = and i32 1, %lshrl169, !dbg !2742
  %trunc170 = trunc i32 %98 to i8, !dbg !2742
  %99 = trunc i8 %trunc170 to i1, !dbg !2742
  %ternary171 = select i1 %99, i8 66, i8 98, !dbg !2743
  store i8 %ternary171, ptr %ptradd167, align 1, !dbg !2743
  br label %switch.exit, !dbg !2743

switch.default:                                   ; preds = %switch.entry
  store %"char[]" { ptr @.str.162, i64 30 }, ptr %string, align 8
  %100 = load [2 x i64], ptr %string, align 8, !dbg !2744
  store %"char[]" { ptr @.str.163, i64 20 }, ptr %taddr172, align 8
  %101 = load [2 x i64], ptr %taddr172, align 8
  store %"char[]" { ptr @.str.164, i64 21 }, ptr %taddr173, align 8
  %102 = load [2 x i64], ptr %taddr173, align 8
  store %"any[]" zeroinitializer, ptr %taddr174, align 8
  %103 = load [2 x i64], ptr %taddr174, align 8
  call void @std.core.builtin.panicf([2 x i64] %100, [2 x i64] %101, [2 x i64] %102, i32 593, [2 x i64] %103), !dbg !2748
  unreachable, !dbg !2749

switch.exit:                                      ; preds = %checkok166, %checkok146, %checkok127
  %ptradd175 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2750
  %104 = load i64, ptr %ptradd175, align 8, !dbg !2750
  %105 = load ptr, ptr %buf, align 8, !dbg !2750
  %106 = load i64, ptr %len, align 8, !dbg !2751
  %add176 = add i64 %106, 1, !dbg !2751
  store i64 %add176, ptr %len, align 8, !dbg !2751
  %ge177 = icmp uge i64 %106, %104, !dbg !2751
  %107 = call i1 @llvm.expect.i1(i1 %ge177, i1 false), !dbg !2751
  br i1 %107, label %panic178, label %checkok188, !dbg !2751

checkok188:                                       ; preds = %switch.exit
  %ptradd189 = getelementptr inbounds i8, ptr %105, i64 %106, !dbg !2751
  store i8 48, ptr %ptradd189, align 1, !dbg !2752
  br label %if.exit190, !dbg !2752

if.exit190:                                       ; preds = %checkok188, %if.exit106
  br label %if.exit191, !dbg !2752

if.exit191:                                       ; preds = %if.exit190, %and.phi76
  store i8 1, ptr %switch192, align 1
  br label %switch.entry193

switch.entry193:                                  ; preds = %if.exit191
  %108 = load i8, ptr %switch192, align 1
  %109 = trunc i8 %108 to i1
  %110 = load i8, ptr %negative, align 1, !dbg !2753
  %111 = trunc i8 %110 to i1, !dbg !2753
  %eq194 = icmp eq i1 %111, %109, !dbg !2753
  br i1 %eq194, label %switch.case195, label %next_if, !dbg !2753

switch.case195:                                   ; preds = %switch.entry193
  %112 = load i64, ptr %len, align 8, !dbg !2755
  %ptradd196 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2757
  %113 = load i64, ptr %ptradd196, align 8, !dbg !2757
  %ge197 = icmp uge i64 %112, %113, !dbg !2755
  br i1 %ge197, label %if.then198, label %if.exit199, !dbg !2755

if.then198:                                       ; preds = %switch.case195
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2758

if.exit199:                                       ; preds = %switch.case195
  %ptradd200 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2759
  %114 = load i64, ptr %ptradd200, align 8, !dbg !2759
  %115 = load ptr, ptr %buf, align 8, !dbg !2759
  %116 = load i64, ptr %len, align 8, !dbg !2760
  %add201 = add i64 %116, 1, !dbg !2760
  store i64 %add201, ptr %len, align 8, !dbg !2760
  %ge202 = icmp uge i64 %116, %114, !dbg !2760
  %117 = call i1 @llvm.expect.i1(i1 %ge202, i1 false), !dbg !2760
  br i1 %117, label %panic203, label %checkok213, !dbg !2760

checkok213:                                       ; preds = %if.exit199
  %ptradd214 = getelementptr inbounds i8, ptr %115, i64 %116, !dbg !2760
  store i8 45, ptr %ptradd214, align 1, !dbg !2761
  br label %switch.exit265, !dbg !2761

next_if:                                          ; preds = %switch.entry193
  %118 = load ptr, ptr %self, align 8, !dbg !2762
  %ptradd215 = getelementptr inbounds i8, ptr %118, i64 16, !dbg !2762
  %119 = load i32, ptr %ptradd215, align 8, !dbg !2762
  %lshrl216 = lshr i32 %119, 2, !dbg !2762
  %120 = and i32 1, %lshrl216, !dbg !2762
  %trunc217 = trunc i32 %120 to i8, !dbg !2762
  %121 = trunc i8 %trunc217 to i1, !dbg !2762
  %eq218 = icmp eq i1 %121, %109, !dbg !2762
  br i1 %eq218, label %switch.case219, label %next_if239, !dbg !2762

switch.case219:                                   ; preds = %next_if
  %122 = load i64, ptr %len, align 8, !dbg !2763
  %ptradd220 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2765
  %123 = load i64, ptr %ptradd220, align 8, !dbg !2765
  %ge221 = icmp uge i64 %122, %123, !dbg !2763
  br i1 %ge221, label %if.then222, label %if.exit223, !dbg !2763

if.then222:                                       ; preds = %switch.case219
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2766

if.exit223:                                       ; preds = %switch.case219
  %ptradd224 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2767
  %124 = load i64, ptr %ptradd224, align 8, !dbg !2767
  %125 = load ptr, ptr %buf, align 8, !dbg !2767
  %126 = load i64, ptr %len, align 8, !dbg !2768
  %add225 = add i64 %126, 1, !dbg !2768
  store i64 %add225, ptr %len, align 8, !dbg !2768
  %ge226 = icmp uge i64 %126, %124, !dbg !2768
  %127 = call i1 @llvm.expect.i1(i1 %ge226, i1 false), !dbg !2768
  br i1 %127, label %panic227, label %checkok237, !dbg !2768

checkok237:                                       ; preds = %if.exit223
  %ptradd238 = getelementptr inbounds i8, ptr %125, i64 %126, !dbg !2768
  store i8 43, ptr %ptradd238, align 1, !dbg !2769
  br label %switch.exit265, !dbg !2769

next_if239:                                       ; preds = %next_if
  %128 = load ptr, ptr %self, align 8, !dbg !2770
  %ptradd240 = getelementptr inbounds i8, ptr %128, i64 16, !dbg !2770
  %129 = load i32, ptr %ptradd240, align 8, !dbg !2770
  %lshrl241 = lshr i32 %129, 3, !dbg !2770
  %130 = and i32 1, %lshrl241, !dbg !2770
  %trunc242 = trunc i32 %130 to i8, !dbg !2770
  %131 = trunc i8 %trunc242 to i1, !dbg !2770
  %eq243 = icmp eq i1 %131, %109, !dbg !2770
  br i1 %eq243, label %switch.case244, label %next_if264, !dbg !2770

switch.case244:                                   ; preds = %next_if239
  %132 = load i64, ptr %len, align 8, !dbg !2771
  %ptradd245 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2773
  %133 = load i64, ptr %ptradd245, align 8, !dbg !2773
  %ge246 = icmp uge i64 %132, %133, !dbg !2771
  br i1 %ge246, label %if.then247, label %if.exit248, !dbg !2771

if.then247:                                       ; preds = %switch.case244
  ret i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), !dbg !2774

if.exit248:                                       ; preds = %switch.case244
  %ptradd249 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !2775
  %134 = load i64, ptr %ptradd249, align 8, !dbg !2775
  %135 = load ptr, ptr %buf, align 8, !dbg !2775
  %136 = load i64, ptr %len, align 8, !dbg !2776
  %add250 = add i64 %136, 1, !dbg !2776
  store i64 %add250, ptr %len, align 8, !dbg !2776
  %ge251 = icmp uge i64 %136, %134, !dbg !2776
  %137 = call i1 @llvm.expect.i1(i1 %ge251, i1 false), !dbg !2776
  br i1 %137, label %panic252, label %checkok262, !dbg !2776

checkok262:                                       ; preds = %if.exit248
  %ptradd263 = getelementptr inbounds i8, ptr %135, i64 %136, !dbg !2776
  store i8 32, ptr %ptradd263, align 1, !dbg !2777
  br label %switch.exit265, !dbg !2777

next_if264:                                       ; preds = %next_if239
  br label %switch.exit265, !dbg !2777

switch.exit265:                                   ; preds = %next_if264, %checkok262, %checkok237, %checkok213
  %138 = load i64, ptr %len, align 8, !dbg !2778
  %i2b266 = icmp ne i64 %138, 0, !dbg !2778
  br i1 %i2b266, label %if.then267, label %if.exit294, !dbg !2778

if.then267:                                       ; preds = %switch.exit265
  %139 = load %"char[]", ptr %buf, align 8, !dbg !2779
  %140 = extractvalue %"char[]" %139, 0, !dbg !2779
  %141 = extractvalue %"char[]" %139, 1, !dbg !2780
  %gt = icmp ugt i64 0, %141, !dbg !2780
  %142 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2780
  br i1 %142, label %panic268, label %checkok278, !dbg !2780

checkok278:                                       ; preds = %if.then267
  %143 = load i64, ptr %len, align 8, !dbg !2781
  %add279 = add i64 0, %143, !dbg !2781
  %lt280 = icmp ult i64 %141, %add279, !dbg !2781
  %sub281 = sub i64 %add279, 1, !dbg !2781
  %144 = call i1 @llvm.expect.i1(i1 %lt280, i1 false), !dbg !2781
  br i1 %144, label %panic282, label %checkok292, !dbg !2781

checkok292:                                       ; preds = %checkok278
  %size = sub i64 %add279, 0, !dbg !2779
  %145 = insertvalue %"char[]" undef, ptr %140, 0, !dbg !2779
  %146 = insertvalue %"char[]" %145, i64 %size, 1, !dbg !2779
  %147 = load ptr, ptr %self, align 8
  store %"char[]" %146, ptr %taddr293, align 8
  %148 = load [2 x i64], ptr %taddr293, align 8
  %149 = call i64 @std.io.Formatter.out_reverse(ptr %retparam, ptr %147, [2 x i64] %148), !dbg !2782
  %not_err = icmp eq i64 %149, 0, !dbg !2782
  %150 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2782
  br i1 %150, label %after_check, label %assign_optional, !dbg !2782

assign_optional:                                  ; preds = %checkok292
  store i64 %149, ptr %error_var, align 8, !dbg !2782
  br label %guard_block, !dbg !2782

after_check:                                      ; preds = %checkok292
  br label %noerr_block, !dbg !2782

guard_block:                                      ; preds = %assign_optional
  %151 = load i64, ptr %error_var, align 8, !dbg !2782
  ret i64 %151, !dbg !2782

noerr_block:                                      ; preds = %after_check
  br label %if.exit294, !dbg !2782

if.exit294:                                       ; preds = %noerr_block, %switch.exit265
  %152 = load i64, ptr %len, align 8, !dbg !2783
  store i64 %152, ptr %0, align 8, !dbg !2783
  ret i64 0, !dbg !2783

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %153 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %154 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr2, align 8
  %155 = load [2 x i64], ptr %taddr2, align 8
  %156 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %156([2 x i64] %153, [2 x i64] %154, [2 x i64] %155, i32 555), !dbg !2670
  unreachable, !dbg !2670

panic30:                                          ; preds = %if.exit27
  store i64 %35, ptr %taddr31, align 8
  %157 = insertvalue %any undef, ptr %taddr31, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr32, align 8
  %159 = insertvalue %any undef, ptr %taddr32, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr33, align 8
  %161 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr34, align 8
  %162 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr35, align 8
  %163 = load [2 x i64], ptr %taddr35, align 8
  store %any %158, ptr %varargslots, align 8
  %ptradd36 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %160, ptr %ptradd36, align 8
  %164 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr37, align 8
  %165 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %161, [2 x i64] %162, [2 x i64] %163, i32 564, [2 x i64] %165), !dbg !2696
  unreachable, !dbg !2696

panic58:                                          ; preds = %if.exit54
  store i64 %48, ptr %taddr59, align 8
  %166 = insertvalue %any undef, ptr %taddr59, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %50, ptr %taddr60, align 8
  %168 = insertvalue %any undef, ptr %taddr60, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr61, align 8
  %170 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr62, align 8
  %171 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr63, align 8
  %172 = load [2 x i64], ptr %taddr63, align 8
  store %any %167, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %169, ptr %ptradd65, align 8
  %173 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %174 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %170, [2 x i64] %171, [2 x i64] %172, i32 569, [2 x i64] %174), !dbg !2708
  unreachable, !dbg !2708

panic117:                                         ; preds = %switch.case
  store i64 %76, ptr %taddr118, align 8
  %175 = insertvalue %any undef, ptr %taddr118, 0
  %176 = insertvalue %any %175, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %78, ptr %taddr119, align 8
  %177 = insertvalue %any undef, ptr %taddr119, 0
  %178 = insertvalue %any %177, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr120, align 8
  %179 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr121, align 8
  %180 = load [2 x i64], ptr %taddr121, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr122, align 8
  %181 = load [2 x i64], ptr %taddr122, align 8
  store %any %176, ptr %varargslots123, align 8
  %ptradd124 = getelementptr inbounds i8, ptr %varargslots123, i64 16
  store %any %178, ptr %ptradd124, align 8
  %182 = insertvalue %"any[]" undef, ptr %varargslots123, 0
  %"$$temp125" = insertvalue %"any[]" %182, i64 2, 1
  store %"any[]" %"$$temp125", ptr %taddr126, align 8
  %183 = load [2 x i64], ptr %taddr126, align 8
  call void @std.core.builtin.panicf([2 x i64] %179, [2 x i64] %180, [2 x i64] %181, i32 587, [2 x i64] %183), !dbg !2731
  unreachable, !dbg !2731

panic136:                                         ; preds = %switch.case132
  store i64 %84, ptr %taddr137, align 8
  %184 = insertvalue %any undef, ptr %taddr137, 0
  %185 = insertvalue %any %184, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %86, ptr %taddr138, align 8
  %186 = insertvalue %any undef, ptr %taddr138, 0
  %187 = insertvalue %any %186, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr139, align 8
  %188 = load [2 x i64], ptr %taddr139, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr140, align 8
  %189 = load [2 x i64], ptr %taddr140, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr141, align 8
  %190 = load [2 x i64], ptr %taddr141, align 8
  store %any %185, ptr %varargslots142, align 8
  %ptradd143 = getelementptr inbounds i8, ptr %varargslots142, i64 16
  store %any %187, ptr %ptradd143, align 8
  %191 = insertvalue %"any[]" undef, ptr %varargslots142, 0
  %"$$temp144" = insertvalue %"any[]" %191, i64 2, 1
  store %"any[]" %"$$temp144", ptr %taddr145, align 8
  %192 = load [2 x i64], ptr %taddr145, align 8
  call void @std.core.builtin.panicf([2 x i64] %188, [2 x i64] %189, [2 x i64] %190, i32 589, [2 x i64] %192), !dbg !2736
  unreachable, !dbg !2736

panic156:                                         ; preds = %switch.case152
  store i64 %92, ptr %taddr157, align 8
  %193 = insertvalue %any undef, ptr %taddr157, 0
  %194 = insertvalue %any %193, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %94, ptr %taddr158, align 8
  %195 = insertvalue %any undef, ptr %taddr158, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr159, align 8
  %197 = load [2 x i64], ptr %taddr159, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr160, align 8
  %198 = load [2 x i64], ptr %taddr160, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr161, align 8
  %199 = load [2 x i64], ptr %taddr161, align 8
  store %any %194, ptr %varargslots162, align 8
  %ptradd163 = getelementptr inbounds i8, ptr %varargslots162, i64 16
  store %any %196, ptr %ptradd163, align 8
  %200 = insertvalue %"any[]" undef, ptr %varargslots162, 0
  %"$$temp164" = insertvalue %"any[]" %200, i64 2, 1
  store %"any[]" %"$$temp164", ptr %taddr165, align 8
  %201 = load [2 x i64], ptr %taddr165, align 8
  call void @std.core.builtin.panicf([2 x i64] %197, [2 x i64] %198, [2 x i64] %199, i32 591, [2 x i64] %201), !dbg !2741
  unreachable, !dbg !2741

panic178:                                         ; preds = %switch.exit
  store i64 %104, ptr %taddr179, align 8
  %202 = insertvalue %any undef, ptr %taddr179, 0
  %203 = insertvalue %any %202, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %106, ptr %taddr180, align 8
  %204 = insertvalue %any undef, ptr %taddr180, 0
  %205 = insertvalue %any %204, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr181, align 8
  %206 = load [2 x i64], ptr %taddr181, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr182, align 8
  %207 = load [2 x i64], ptr %taddr182, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr183, align 8
  %208 = load [2 x i64], ptr %taddr183, align 8
  store %any %203, ptr %varargslots184, align 8
  %ptradd185 = getelementptr inbounds i8, ptr %varargslots184, i64 16
  store %any %205, ptr %ptradd185, align 8
  %209 = insertvalue %"any[]" undef, ptr %varargslots184, 0
  %"$$temp186" = insertvalue %"any[]" %209, i64 2, 1
  store %"any[]" %"$$temp186", ptr %taddr187, align 8
  %210 = load [2 x i64], ptr %taddr187, align 8
  call void @std.core.builtin.panicf([2 x i64] %206, [2 x i64] %207, [2 x i64] %208, i32 595, [2 x i64] %210), !dbg !2751
  unreachable, !dbg !2751

panic203:                                         ; preds = %if.exit199
  store i64 %114, ptr %taddr204, align 8
  %211 = insertvalue %any undef, ptr %taddr204, 0
  %212 = insertvalue %any %211, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %116, ptr %taddr205, align 8
  %213 = insertvalue %any undef, ptr %taddr205, 0
  %214 = insertvalue %any %213, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr206, align 8
  %215 = load [2 x i64], ptr %taddr206, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr207, align 8
  %216 = load [2 x i64], ptr %taddr207, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr208, align 8
  %217 = load [2 x i64], ptr %taddr208, align 8
  store %any %212, ptr %varargslots209, align 8
  %ptradd210 = getelementptr inbounds i8, ptr %varargslots209, i64 16
  store %any %214, ptr %ptradd210, align 8
  %218 = insertvalue %"any[]" undef, ptr %varargslots209, 0
  %"$$temp211" = insertvalue %"any[]" %218, i64 2, 1
  store %"any[]" %"$$temp211", ptr %taddr212, align 8
  %219 = load [2 x i64], ptr %taddr212, align 8
  call void @std.core.builtin.panicf([2 x i64] %215, [2 x i64] %216, [2 x i64] %217, i32 603, [2 x i64] %219), !dbg !2760
  unreachable, !dbg !2760

panic227:                                         ; preds = %if.exit223
  store i64 %124, ptr %taddr228, align 8
  %220 = insertvalue %any undef, ptr %taddr228, 0
  %221 = insertvalue %any %220, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %126, ptr %taddr229, align 8
  %222 = insertvalue %any undef, ptr %taddr229, 0
  %223 = insertvalue %any %222, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr230, align 8
  %224 = load [2 x i64], ptr %taddr230, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr231, align 8
  %225 = load [2 x i64], ptr %taddr231, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr232, align 8
  %226 = load [2 x i64], ptr %taddr232, align 8
  store %any %221, ptr %varargslots233, align 8
  %ptradd234 = getelementptr inbounds i8, ptr %varargslots233, i64 16
  store %any %223, ptr %ptradd234, align 8
  %227 = insertvalue %"any[]" undef, ptr %varargslots233, 0
  %"$$temp235" = insertvalue %"any[]" %227, i64 2, 1
  store %"any[]" %"$$temp235", ptr %taddr236, align 8
  %228 = load [2 x i64], ptr %taddr236, align 8
  call void @std.core.builtin.panicf([2 x i64] %224, [2 x i64] %225, [2 x i64] %226, i32 606, [2 x i64] %228), !dbg !2768
  unreachable, !dbg !2768

panic252:                                         ; preds = %if.exit248
  store i64 %134, ptr %taddr253, align 8
  %229 = insertvalue %any undef, ptr %taddr253, 0
  %230 = insertvalue %any %229, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %136, ptr %taddr254, align 8
  %231 = insertvalue %any undef, ptr %taddr254, 0
  %232 = insertvalue %any %231, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr255, align 8
  %233 = load [2 x i64], ptr %taddr255, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr256, align 8
  %234 = load [2 x i64], ptr %taddr256, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr257, align 8
  %235 = load [2 x i64], ptr %taddr257, align 8
  store %any %230, ptr %varargslots258, align 8
  %ptradd259 = getelementptr inbounds i8, ptr %varargslots258, i64 16
  store %any %232, ptr %ptradd259, align 8
  %236 = insertvalue %"any[]" undef, ptr %varargslots258, 0
  %"$$temp260" = insertvalue %"any[]" %236, i64 2, 1
  store %"any[]" %"$$temp260", ptr %taddr261, align 8
  %237 = load [2 x i64], ptr %taddr261, align 8
  call void @std.core.builtin.panicf([2 x i64] %233, [2 x i64] %234, [2 x i64] %235, i32 609, [2 x i64] %237), !dbg !2776
  unreachable, !dbg !2776

panic268:                                         ; preds = %if.then267
  store i64 %141, ptr %taddr269, align 8
  %238 = insertvalue %any undef, ptr %taddr269, 0
  %239 = insertvalue %any %238, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr270, align 8
  %240 = insertvalue %any undef, ptr %taddr270, 0
  %241 = insertvalue %any %240, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr271, align 8
  %242 = load [2 x i64], ptr %taddr271, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr272, align 8
  %243 = load [2 x i64], ptr %taddr272, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr273, align 8
  %244 = load [2 x i64], ptr %taddr273, align 8
  store %any %239, ptr %varargslots274, align 8
  %ptradd275 = getelementptr inbounds i8, ptr %varargslots274, i64 16
  store %any %241, ptr %ptradd275, align 8
  %245 = insertvalue %"any[]" undef, ptr %varargslots274, 0
  %"$$temp276" = insertvalue %"any[]" %245, i64 2, 1
  store %"any[]" %"$$temp276", ptr %taddr277, align 8
  %246 = load [2 x i64], ptr %taddr277, align 8
  call void @std.core.builtin.panicf([2 x i64] %242, [2 x i64] %243, [2 x i64] %244, i32 611, [2 x i64] %246), !dbg !2779
  unreachable, !dbg !2779

panic282:                                         ; preds = %checkok278
  store i64 %sub281, ptr %taddr283, align 8
  %247 = insertvalue %any undef, ptr %taddr283, 0
  %248 = insertvalue %any %247, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %141, ptr %taddr284, align 8
  %249 = insertvalue %any undef, ptr %taddr284, 0
  %250 = insertvalue %any %249, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr285, align 8
  %251 = load [2 x i64], ptr %taddr285, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr286, align 8
  %252 = load [2 x i64], ptr %taddr286, align 8
  store %"char[]" { ptr @.func.161, i64 11 }, ptr %taddr287, align 8
  %253 = load [2 x i64], ptr %taddr287, align 8
  store %any %248, ptr %varargslots288, align 8
  %ptradd289 = getelementptr inbounds i8, ptr %varargslots288, i64 16
  store %any %250, ptr %ptradd289, align 8
  %254 = insertvalue %"any[]" undef, ptr %varargslots288, 0
  %"$$temp290" = insertvalue %"any[]" %254, i64 2, 1
  store %"any[]" %"$$temp290", ptr %taddr291, align 8
  %255 = load [2 x i64], ptr %taddr291, align 8
  call void @std.core.builtin.panicf([2 x i64] %251, [2 x i64] %252, [2 x i64] %253, i32 611, [2 x i64] %255), !dbg !2779
  unreachable, !dbg !2779
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.ntoa_any(ptr %0, ptr %1, [2 x i64] %2, i32 %3) #0 !dbg !2784 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %base = alloca i32, align 4
  %is_neg = alloca i8, align 1
  %reterr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i128, align 16
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr6 = alloca %"any[]", align 8
  %retparam7 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !2791
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !2791
  br i1 %5, label %panic, label %checkok, !dbg !2791

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2792, metadata !DIExpression()), !dbg !2793
  store [2 x i64] %2, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !2794, metadata !DIExpression()), !dbg !2795
  store i32 %3, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2796, metadata !DIExpression()), !dbg !2797
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !2798, metadata !DIExpression()), !dbg !2799
  store i8 0, ptr %is_neg, align 1, !dbg !2799
  %6 = load [2 x i64], ptr %arg, align 8
  %7 = call i64 @std.io.int_from_any(ptr %retparam, [2 x i64] %6, ptr %is_neg), !dbg !2800
  %not_err = icmp eq i64 %7, 0, !dbg !2800
  %8 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2800
  br i1 %8, label %after_check, label %assign_optional, !dbg !2800

assign_optional:                                  ; preds = %checkok
  store i64 %7, ptr %error_var, align 8, !dbg !2800
  br label %panic_block, !dbg !2800

after_check:                                      ; preds = %checkok
  br label %noerr_block, !dbg !2800

panic_block:                                      ; preds = %assign_optional
  %9 = insertvalue %any undef, ptr %error_var, 0, !dbg !2800
  %10 = insertvalue %any %9, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !2800
  store %"char[]" { ptr @.panic_msg.90, i64 36 }, ptr %taddr3, align 8
  %11 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr4, align 8
  %12 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.165, i64 8 }, ptr %taddr5, align 8
  %13 = load [2 x i64], ptr %taddr5, align 8
  store %any %10, ptr %varargslots, align 8
  %14 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %14, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr6, align 8
  %15 = load [2 x i64], ptr %taddr6, align 8
  call void @std.core.builtin.panicf([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 619, [2 x i64] %15), !dbg !2800
  unreachable, !dbg !2800

noerr_block:                                      ; preds = %after_check
  %16 = load ptr, ptr %self, align 8
  %17 = load i128, ptr %retparam, align 16
  %18 = load i8, ptr %is_neg, align 1
  %19 = load i32, ptr %base, align 4
  %20 = call i64 @std.io.Formatter.ntoa(ptr %retparam7, ptr %16, i128 %17, i8 %18, i32 %19) #5, !dbg !2801
  %not_err8 = icmp eq i64 %20, 0, !dbg !2801
  %21 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !2801
  br i1 %21, label %after_check10, label %assign_optional9, !dbg !2801

assign_optional9:                                 ; preds = %noerr_block
  store i64 %20, ptr %reterr, align 8, !dbg !2801
  br label %err_retblock, !dbg !2801

after_check10:                                    ; preds = %noerr_block
  %22 = load i64, ptr %retparam7, align 8, !dbg !2801
  store i64 %22, ptr %0, align 8, !dbg !2801
  ret i64 0, !dbg !2801

err_retblock:                                     ; preds = %assign_optional9
  %23 = load i64, ptr %reterr, align 8, !dbg !2801
  ret i64 %23, !dbg !2801

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %25 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.165, i64 8 }, ptr %taddr2, align 8
  %26 = load [2 x i64], ptr %taddr2, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 616), !dbg !2793
  unreachable, !dbg !2793
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.out_char(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !2802 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %l = alloca i32, align 4
  %error_var = alloca i64, align 8
  %retparam4 = alloca i64, align 8
  %c = alloca i32, align 4
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c25 = alloca i8, align 1
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %i = alloca i32, align 4
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %l101 = alloca i64, align 8
  %taddr104 = alloca %"char[]", align 8
  %taddr105 = alloca %"char[]", align 8
  %taddr106 = alloca %"char[]", align 8
  %i135 = alloca i128, align 16
  %taddr138 = alloca %"char[]", align 8
  %taddr139 = alloca %"char[]", align 8
  %taddr140 = alloca %"char[]", align 8
  %c170 = alloca i8, align 1
  %taddr173 = alloca %"char[]", align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr175 = alloca %"char[]", align 8
  %s190 = alloca i16, align 2
  %taddr193 = alloca %"char[]", align 8
  %taddr194 = alloca %"char[]", align 8
  %taddr195 = alloca %"char[]", align 8
  %i215 = alloca i32, align 4
  %taddr218 = alloca %"char[]", align 8
  %taddr219 = alloca %"char[]", align 8
  %taddr220 = alloca %"char[]", align 8
  %l237 = alloca i64, align 8
  %taddr240 = alloca %"char[]", align 8
  %taddr241 = alloca %"char[]", align 8
  %taddr242 = alloca %"char[]", align 8
  %i262 = alloca i128, align 16
  %taddr265 = alloca %"char[]", align 8
  %taddr266 = alloca %"char[]", align 8
  %taddr267 = alloca %"char[]", align 8
  %string = alloca %"char[]", align 8
  %taddr280 = alloca %"char[]", align 8
  %taddr281 = alloca %"char[]", align 8
  %taddr282 = alloca %"any[]", align 8
  %switch284 = alloca i8, align 1
  %error_var289 = alloca i64, align 8
  %retparam291 = alloca i64, align 8
  %error_var301 = alloca i64, align 8
  %retparam303 = alloca i64, align 8
  %error_var309 = alloca i64, align 8
  %retparam312 = alloca i64, align 8
  %error_var322 = alloca i64, align 8
  %retparam326 = alloca i64, align 8
  %error_var332 = alloca i64, align 8
  %retparam337 = alloca i64, align 8
  %error_var343 = alloca i64, align 8
  %retparam347 = alloca i64, align 8
  %error_var355 = alloca i64, align 8
  %retparam359 = alloca i64, align 8
  %error_var365 = alloca i64, align 8
  %retparam370 = alloca i64, align 8
  %error_var376 = alloca i64, align 8
  %retparam381 = alloca i64, align 8
  %error_var387 = alloca i64, align 8
  %retparam391 = alloca i64, align 8
  %error_var397 = alloca i64, align 8
  %retparam399 = alloca i64, align 8
  %reterr406 = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !2805
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !2805
  br i1 %4, label %panic, label %checkok, !dbg !2805

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2806, metadata !DIExpression()), !dbg !2807
  store [2 x i64] %2, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !2808, metadata !DIExpression()), !dbg !2809
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !2810
  %5 = load i64, ptr %ptradd, align 8, !dbg !2810
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !2810
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !2810
  %6 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #5, !dbg !2810
  %7 = trunc i8 %6 to i1, !dbg !2810
  %not = xor i1 %7, true, !dbg !2810
  br i1 %not, label %if.then, label %if.exit, !dbg !2810

if.then:                                          ; preds = %checkok
  %8 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.167, i64 10 }, ptr %taddr3, align 8
  %9 = load [2 x i64], ptr %taddr3, align 8
  %10 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %8, [2 x i64] %9), !dbg !2811
  %not_err = icmp eq i64 %10, 0, !dbg !2811
  %11 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2811
  br i1 %11, label %after_check, label %assign_optional, !dbg !2811

assign_optional:                                  ; preds = %if.then
  store i64 %10, ptr %reterr, align 8, !dbg !2811
  br label %err_retblock, !dbg !2811

after_check:                                      ; preds = %if.then
  %12 = load i64, ptr %retparam, align 8, !dbg !2811
  store i64 %12, ptr %0, align 8, !dbg !2811
  ret i64 0, !dbg !2811

err_retblock:                                     ; preds = %assign_optional
  %13 = load i64, ptr %reterr, align 8, !dbg !2811
  ret i64 %13, !dbg !2811

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2813, metadata !DIExpression()), !dbg !2814
  store i64 1, ptr %len, align 8, !dbg !2815
  call void @llvm.dbg.declare(metadata ptr %l, metadata !2816, metadata !DIExpression()), !dbg !2817
  store i32 1, ptr %l, align 4, !dbg !2818
  %14 = load i64, ptr %len, align 8, !dbg !2819
  %15 = load i32, ptr %l, align 4, !dbg !2820
  %zext = zext i32 %15 to i64, !dbg !2820
  %16 = load ptr, ptr %self, align 8
  %17 = call i64 @std.io.Formatter.adjust(ptr %retparam4, ptr %16, i64 %zext), !dbg !2821
  %not_err5 = icmp eq i64 %17, 0, !dbg !2821
  %18 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !2821
  br i1 %18, label %after_check7, label %assign_optional6, !dbg !2821

assign_optional6:                                 ; preds = %if.exit
  store i64 %17, ptr %error_var, align 8, !dbg !2821
  br label %guard_block, !dbg !2821

after_check7:                                     ; preds = %if.exit
  br label %noerr_block, !dbg !2821

guard_block:                                      ; preds = %assign_optional6
  %19 = load i64, ptr %error_var, align 8, !dbg !2821
  ret i64 %19, !dbg !2821

noerr_block:                                      ; preds = %after_check7
  %20 = load i64, ptr %retparam4, align 8, !dbg !2821
  %add = add i64 %14, %20, !dbg !2819
  store i64 %add, ptr %len, align 8, !dbg !2819
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2822, metadata !DIExpression()), !dbg !2824
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %21 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !2825
  %22 = trunc i8 %21 to i1, !dbg !2825
  br i1 %22, label %assert_ok, label %assert_fail, !dbg !2825

assert_fail:                                      ; preds = %noerr_block
  store %"char[]" { ptr @.panic_msg.119, i64 69 }, ptr %taddr8, align 8
  %23 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr9, align 8
  %24 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr10, align 8
  %25 = load [2 x i64], ptr %taddr10, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 22), !dbg !2825
  unreachable, !dbg !2825

assert_ok:                                        ; preds = %noerr_block
  %ptradd11 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2830
  %27 = load i64, ptr %ptradd11, align 8, !dbg !2830
  %"introspect*12" = inttoptr i64 %27 to ptr, !dbg !2830
  %typeid.kind13 = load i8, ptr %"introspect*12", align 8, !dbg !2830
  %28 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind13) #5, !dbg !2830
  %29 = trunc i8 %28 to i1, !dbg !2830
  br i1 %29, label %assert_ok18, label %assert_fail14, !dbg !2830

assert_fail14:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.121, i64 71 }, ptr %taddr15, align 8
  %30 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr16, align 8
  %31 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr17, align 8
  %32 = load [2 x i64], ptr %taddr17, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 23), !dbg !2830
  unreachable, !dbg !2830

assert_ok18:                                      ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !2831, metadata !DIExpression()), !dbg !2832
  %ptradd19 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !2833
  %34 = load i64, ptr %ptradd19, align 8, !dbg !2833
  store i64 %34, ptr %any_type, align 8, !dbg !2833
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !2834, metadata !DIExpression()), !dbg !2835
  %35 = load i64, ptr %any_type, align 8, !dbg !2836
  %"introspect*20" = inttoptr i64 %35 to ptr, !dbg !2836
  %typeid.kind21 = load i8, ptr %"introspect*20", align 8, !dbg !2836
  store i8 %typeid.kind21, ptr %kind, align 1, !dbg !2836
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !2837, metadata !DIExpression()), !dbg !2838
  %36 = load i64, ptr %any_type, align 8, !dbg !2839
  %"introspect*22" = inttoptr i64 %36 to ptr, !dbg !2839
  %typeid.kind23 = load i8, ptr %"introspect*22", align 8, !dbg !2839
  %neq = icmp ne i8 3, %typeid.kind23, !dbg !2840
  %37 = zext i1 %neq to i8, !dbg !2840
  store i8 %37, ptr %is_mixed_signed, align 1, !dbg !2840
  call void @llvm.dbg.declare(metadata ptr %max, metadata !2841, metadata !DIExpression()), !dbg !2842
  store i32 -1, ptr %max, align 4, !dbg !2843
  call void @llvm.dbg.declare(metadata ptr %min, metadata !2844, metadata !DIExpression()), !dbg !2845
  store i32 0, ptr %min, align 4, !dbg !2846
  %38 = load i64, ptr %any_type, align 8
  store i64 %38, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok18
  %39 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !2847

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %40 = phi i64 [ %39, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !2847
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %40, !dbg !2847
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !2847

parent_type_block:                                ; preds = %check_subtype
  %41 = inttoptr i64 %40 to ptr, !dbg !2847
  %ptradd24 = getelementptr inbounds i8, ptr %41, i64 8, !dbg !2847
  %typeid.parent = load i64, ptr %ptradd24, align 8, !dbg !2847
  %42 = icmp eq i64 %typeid.parent, 0, !dbg !2847
  br i1 %42, label %result_block, label %check_subtype, !dbg !2847

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %43 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !2847
  br i1 %43, label %switch.case, label %next_if, !dbg !2847

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c25, metadata !2849, metadata !DIExpression()), !dbg !2852
  %44 = load ptr, ptr %v, align 8, !dbg !2853
  %checknull = icmp eq ptr %44, null, !dbg !2853
  %45 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2853
  br i1 %45, label %panic26, label %checkok30, !dbg !2853

checkok30:                                        ; preds = %switch.case
  %46 = load i8, ptr %44, align 1, !dbg !2854
  store i8 %46, ptr %c25, align 1, !dbg !2854
  %47 = load i8, ptr %is_mixed_signed, align 1, !dbg !2855
  %48 = trunc i8 %47 to i1, !dbg !2855
  br i1 %48, label %and.rhs, label %and.phi, !dbg !2855

and.rhs:                                          ; preds = %checkok30
  %49 = load i8, ptr %c25, align 1, !dbg !2856
  %sext = sext i8 %49 to i32, !dbg !2856
  %lt = icmp slt i32 %sext, 0, !dbg !2856
  br label %and.phi, !dbg !2856

and.phi:                                          ; preds = %and.rhs, %checkok30
  %val = phi i1 [ false, %checkok30 ], [ %lt, %and.rhs ], !dbg !2856
  br i1 %val, label %if.then31, label %if.exit32, !dbg !2856

if.then31:                                        ; preds = %and.phi
  br label %else_block, !dbg !2857

if.exit32:                                        ; preds = %and.phi
  %50 = load i8, ptr %c25, align 1, !dbg !2858
  %sext33 = sext i8 %50 to i32, !dbg !2858
  store i32 %sext33, ptr %blockret, align 4, !dbg !2858
  br label %expr_block.exit, !dbg !2858

next_if:                                          ; preds = %result_block
  br label %check_subtype34, !dbg !2859

check_subtype34:                                  ; preds = %parent_type_block36, %next_if
  %51 = phi i64 [ %39, %next_if ], [ %typeid.parent38, %parent_type_block36 ], !dbg !2859
  %eq35 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %51, !dbg !2859
  br i1 %eq35, label %result_block39, label %parent_type_block36, !dbg !2859

parent_type_block36:                              ; preds = %check_subtype34
  %52 = inttoptr i64 %51 to ptr, !dbg !2859
  %ptradd37 = getelementptr inbounds i8, ptr %52, i64 8, !dbg !2859
  %typeid.parent38 = load i64, ptr %ptradd37, align 8, !dbg !2859
  %53 = icmp eq i64 %typeid.parent38, 0, !dbg !2859
  br i1 %53, label %result_block39, label %check_subtype34, !dbg !2859

result_block39:                                   ; preds = %parent_type_block36, %check_subtype34
  %54 = phi i1 [ false, %parent_type_block36 ], [ true, %check_subtype34 ], !dbg !2859
  br i1 %54, label %switch.case40, label %next_if62, !dbg !2859

switch.case40:                                    ; preds = %result_block39
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2860, metadata !DIExpression()), !dbg !2863
  %55 = load ptr, ptr %v, align 8, !dbg !2864
  %checknull41 = icmp eq ptr %55, null, !dbg !2864
  %56 = call i1 @llvm.expect.i1(i1 %checknull41, i1 false), !dbg !2864
  br i1 %56, label %panic42, label %checkok46, !dbg !2864

checkok46:                                        ; preds = %switch.case40
  %57 = load i16, ptr %55, align 2, !dbg !2865
  store i16 %57, ptr %s, align 2, !dbg !2865
  %58 = load i8, ptr %is_mixed_signed, align 1, !dbg !2866
  %59 = trunc i8 %58 to i1, !dbg !2866
  br i1 %59, label %and.rhs47, label %and.phi50, !dbg !2866

and.rhs47:                                        ; preds = %checkok46
  %60 = load i16, ptr %s, align 2, !dbg !2867
  %sext48 = sext i16 %60 to i32, !dbg !2867
  %lt49 = icmp slt i32 %sext48, 0, !dbg !2867
  br label %and.phi50, !dbg !2867

and.phi50:                                        ; preds = %and.rhs47, %checkok46
  %val51 = phi i1 [ false, %checkok46 ], [ %lt49, %and.rhs47 ], !dbg !2867
  br i1 %val51, label %if.then52, label %if.exit53, !dbg !2867

if.then52:                                        ; preds = %and.phi50
  br label %else_block, !dbg !2868

if.exit53:                                        ; preds = %and.phi50
  %61 = load i16, ptr %s, align 2, !dbg !2869
  %sext54 = sext i16 %61 to i32, !dbg !2869
  %62 = load i32, ptr %max, align 4, !dbg !2870
  %gt = icmp sgt i32 %sext54, %62, !dbg !2869
  %check = icmp sge i32 %62, 0, !dbg !2869
  %siui-gt = and i1 %check, %gt, !dbg !2869
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !2869

or.rhs:                                           ; preds = %if.exit53
  %63 = load i16, ptr %s, align 2, !dbg !2871
  %sext55 = sext i16 %63 to i32, !dbg !2871
  %64 = load i32, ptr %min, align 4, !dbg !2872
  %lt56 = icmp slt i32 %sext55, %64, !dbg !2871
  %check57 = icmp slt i32 %64, 0, !dbg !2871
  %siui-lt = or i1 %check57, %lt56, !dbg !2871
  br label %or.phi, !dbg !2871

or.phi:                                           ; preds = %or.rhs, %if.exit53
  %val58 = phi i1 [ true, %if.exit53 ], [ %siui-lt, %or.rhs ], !dbg !2871
  br i1 %val58, label %if.then59, label %if.exit60, !dbg !2871

if.then59:                                        ; preds = %or.phi
  br label %else_block, !dbg !2873

if.exit60:                                        ; preds = %or.phi
  %65 = load i16, ptr %s, align 2, !dbg !2874
  %sext61 = sext i16 %65 to i32, !dbg !2874
  store i32 %sext61, ptr %blockret, align 4, !dbg !2874
  br label %expr_block.exit, !dbg !2874

next_if62:                                        ; preds = %result_block39
  br label %check_subtype63, !dbg !2875

check_subtype63:                                  ; preds = %parent_type_block65, %next_if62
  %66 = phi i64 [ %39, %next_if62 ], [ %typeid.parent67, %parent_type_block65 ], !dbg !2875
  %eq64 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %66, !dbg !2875
  br i1 %eq64, label %result_block68, label %parent_type_block65, !dbg !2875

parent_type_block65:                              ; preds = %check_subtype63
  %67 = inttoptr i64 %66 to ptr, !dbg !2875
  %ptradd66 = getelementptr inbounds i8, ptr %67, i64 8, !dbg !2875
  %typeid.parent67 = load i64, ptr %ptradd66, align 8, !dbg !2875
  %68 = icmp eq i64 %typeid.parent67, 0, !dbg !2875
  br i1 %68, label %result_block68, label %check_subtype63, !dbg !2875

result_block68:                                   ; preds = %parent_type_block65, %check_subtype63
  %69 = phi i1 [ false, %parent_type_block65 ], [ true, %check_subtype63 ], !dbg !2875
  br i1 %69, label %switch.case69, label %next_if93, !dbg !2875

switch.case69:                                    ; preds = %result_block68
  call void @llvm.dbg.declare(metadata ptr %i, metadata !2876, metadata !DIExpression()), !dbg !2878
  %70 = load ptr, ptr %v, align 8, !dbg !2879
  %checknull70 = icmp eq ptr %70, null, !dbg !2879
  %71 = call i1 @llvm.expect.i1(i1 %checknull70, i1 false), !dbg !2879
  br i1 %71, label %panic71, label %checkok75, !dbg !2879

checkok75:                                        ; preds = %switch.case69
  %72 = load i32, ptr %70, align 4, !dbg !2880
  store i32 %72, ptr %i, align 4, !dbg !2880
  %73 = load i8, ptr %is_mixed_signed, align 1, !dbg !2881
  %74 = trunc i8 %73 to i1, !dbg !2881
  br i1 %74, label %and.rhs76, label %and.phi78, !dbg !2881

and.rhs76:                                        ; preds = %checkok75
  %75 = load i32, ptr %i, align 4, !dbg !2882
  %lt77 = icmp slt i32 %75, 0, !dbg !2882
  br label %and.phi78, !dbg !2882

and.phi78:                                        ; preds = %and.rhs76, %checkok75
  %val79 = phi i1 [ false, %checkok75 ], [ %lt77, %and.rhs76 ], !dbg !2882
  br i1 %val79, label %if.then80, label %if.exit81, !dbg !2882

if.then80:                                        ; preds = %and.phi78
  br label %else_block, !dbg !2883

if.exit81:                                        ; preds = %and.phi78
  %76 = load i32, ptr %i, align 4, !dbg !2884
  %77 = load i32, ptr %max, align 4, !dbg !2885
  %gt82 = icmp sgt i32 %76, %77, !dbg !2884
  %check83 = icmp sge i32 %77, 0, !dbg !2884
  %siui-gt84 = and i1 %check83, %gt82, !dbg !2884
  br i1 %siui-gt84, label %or.phi89, label %or.rhs85, !dbg !2884

or.rhs85:                                         ; preds = %if.exit81
  %78 = load i32, ptr %i, align 4, !dbg !2886
  %79 = load i32, ptr %min, align 4, !dbg !2887
  %lt86 = icmp slt i32 %78, %79, !dbg !2886
  %check87 = icmp slt i32 %79, 0, !dbg !2886
  %siui-lt88 = or i1 %check87, %lt86, !dbg !2886
  br label %or.phi89, !dbg !2886

or.phi89:                                         ; preds = %or.rhs85, %if.exit81
  %val90 = phi i1 [ true, %if.exit81 ], [ %siui-lt88, %or.rhs85 ], !dbg !2886
  br i1 %val90, label %if.then91, label %if.exit92, !dbg !2886

if.then91:                                        ; preds = %or.phi89
  br label %else_block, !dbg !2888

if.exit92:                                        ; preds = %or.phi89
  %80 = load i32, ptr %i, align 4, !dbg !2889
  store i32 %80, ptr %blockret, align 4, !dbg !2889
  br label %expr_block.exit, !dbg !2889

next_if93:                                        ; preds = %result_block68
  br label %check_subtype94, !dbg !2890

check_subtype94:                                  ; preds = %parent_type_block96, %next_if93
  %81 = phi i64 [ %39, %next_if93 ], [ %typeid.parent98, %parent_type_block96 ], !dbg !2890
  %eq95 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %81, !dbg !2890
  br i1 %eq95, label %result_block99, label %parent_type_block96, !dbg !2890

parent_type_block96:                              ; preds = %check_subtype94
  %82 = inttoptr i64 %81 to ptr, !dbg !2890
  %ptradd97 = getelementptr inbounds i8, ptr %82, i64 8, !dbg !2890
  %typeid.parent98 = load i64, ptr %ptradd97, align 8, !dbg !2890
  %83 = icmp eq i64 %typeid.parent98, 0, !dbg !2890
  br i1 %83, label %result_block99, label %check_subtype94, !dbg !2890

result_block99:                                   ; preds = %parent_type_block96, %check_subtype94
  %84 = phi i1 [ false, %parent_type_block96 ], [ true, %check_subtype94 ], !dbg !2890
  br i1 %84, label %switch.case100, label %next_if127, !dbg !2890

switch.case100:                                   ; preds = %result_block99
  call void @llvm.dbg.declare(metadata ptr %l101, metadata !2891, metadata !DIExpression()), !dbg !2893
  %85 = load ptr, ptr %v, align 8, !dbg !2894
  %checknull102 = icmp eq ptr %85, null, !dbg !2894
  %86 = call i1 @llvm.expect.i1(i1 %checknull102, i1 false), !dbg !2894
  br i1 %86, label %panic103, label %checkok107, !dbg !2894

checkok107:                                       ; preds = %switch.case100
  %87 = load i64, ptr %85, align 8, !dbg !2895
  store i64 %87, ptr %l101, align 8, !dbg !2895
  %88 = load i8, ptr %is_mixed_signed, align 1, !dbg !2896
  %89 = trunc i8 %88 to i1, !dbg !2896
  br i1 %89, label %and.rhs108, label %and.phi110, !dbg !2896

and.rhs108:                                       ; preds = %checkok107
  %90 = load i64, ptr %l101, align 8, !dbg !2897
  %lt109 = icmp slt i64 %90, 0, !dbg !2897
  br label %and.phi110, !dbg !2897

and.phi110:                                       ; preds = %and.rhs108, %checkok107
  %val111 = phi i1 [ false, %checkok107 ], [ %lt109, %and.rhs108 ], !dbg !2897
  br i1 %val111, label %if.then112, label %if.exit113, !dbg !2897

if.then112:                                       ; preds = %and.phi110
  br label %else_block, !dbg !2898

if.exit113:                                       ; preds = %and.phi110
  %91 = load i64, ptr %l101, align 8, !dbg !2899
  %92 = load i32, ptr %max, align 4, !dbg !2900
  %zext114 = zext i32 %92 to i64, !dbg !2900
  %gt115 = icmp sgt i64 %91, %zext114, !dbg !2899
  %check116 = icmp sge i64 %zext114, 0, !dbg !2899
  %siui-gt117 = and i1 %check116, %gt115, !dbg !2899
  br i1 %siui-gt117, label %or.phi123, label %or.rhs118, !dbg !2899

or.rhs118:                                        ; preds = %if.exit113
  %93 = load i64, ptr %l101, align 8, !dbg !2901
  %94 = load i32, ptr %min, align 4, !dbg !2902
  %zext119 = zext i32 %94 to i64, !dbg !2902
  %lt120 = icmp slt i64 %93, %zext119, !dbg !2901
  %check121 = icmp slt i64 %zext119, 0, !dbg !2901
  %siui-lt122 = or i1 %check121, %lt120, !dbg !2901
  br label %or.phi123, !dbg !2901

or.phi123:                                        ; preds = %or.rhs118, %if.exit113
  %val124 = phi i1 [ true, %if.exit113 ], [ %siui-lt122, %or.rhs118 ], !dbg !2901
  br i1 %val124, label %if.then125, label %if.exit126, !dbg !2901

if.then125:                                       ; preds = %or.phi123
  br label %else_block, !dbg !2903

if.exit126:                                       ; preds = %or.phi123
  %95 = load i64, ptr %l101, align 8, !dbg !2904
  %trunc = trunc i64 %95 to i32, !dbg !2904
  store i32 %trunc, ptr %blockret, align 4, !dbg !2904
  br label %expr_block.exit, !dbg !2904

next_if127:                                       ; preds = %result_block99
  br label %check_subtype128, !dbg !2905

check_subtype128:                                 ; preds = %parent_type_block130, %next_if127
  %96 = phi i64 [ %39, %next_if127 ], [ %typeid.parent132, %parent_type_block130 ], !dbg !2905
  %eq129 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %96, !dbg !2905
  br i1 %eq129, label %result_block133, label %parent_type_block130, !dbg !2905

parent_type_block130:                             ; preds = %check_subtype128
  %97 = inttoptr i64 %96 to ptr, !dbg !2905
  %ptradd131 = getelementptr inbounds i8, ptr %97, i64 8, !dbg !2905
  %typeid.parent132 = load i64, ptr %ptradd131, align 8, !dbg !2905
  %98 = icmp eq i64 %typeid.parent132, 0, !dbg !2905
  br i1 %98, label %result_block133, label %check_subtype128, !dbg !2905

result_block133:                                  ; preds = %parent_type_block130, %check_subtype128
  %99 = phi i1 [ false, %parent_type_block130 ], [ true, %check_subtype128 ], !dbg !2905
  br i1 %99, label %switch.case134, label %next_if162, !dbg !2905

switch.case134:                                   ; preds = %result_block133
  call void @llvm.dbg.declare(metadata ptr %i135, metadata !2906, metadata !DIExpression()), !dbg !2909
  %100 = load ptr, ptr %v, align 8, !dbg !2910
  %checknull136 = icmp eq ptr %100, null, !dbg !2910
  %101 = call i1 @llvm.expect.i1(i1 %checknull136, i1 false), !dbg !2910
  br i1 %101, label %panic137, label %checkok141, !dbg !2910

checkok141:                                       ; preds = %switch.case134
  %102 = load i128, ptr %100, align 16, !dbg !2911
  store i128 %102, ptr %i135, align 16, !dbg !2911
  %103 = load i8, ptr %is_mixed_signed, align 1, !dbg !2912
  %104 = trunc i8 %103 to i1, !dbg !2912
  br i1 %104, label %and.rhs142, label %and.phi144, !dbg !2912

and.rhs142:                                       ; preds = %checkok141
  %105 = load i128, ptr %i135, align 16, !dbg !2913
  %lt143 = icmp slt i128 %105, 0, !dbg !2913
  br label %and.phi144, !dbg !2913

and.phi144:                                       ; preds = %and.rhs142, %checkok141
  %val145 = phi i1 [ false, %checkok141 ], [ %lt143, %and.rhs142 ], !dbg !2913
  br i1 %val145, label %if.then146, label %if.exit147, !dbg !2913

if.then146:                                       ; preds = %and.phi144
  br label %else_block, !dbg !2914

if.exit147:                                       ; preds = %and.phi144
  %106 = load i128, ptr %i135, align 16, !dbg !2915
  %107 = load i32, ptr %max, align 4, !dbg !2916
  %zext148 = zext i32 %107 to i128, !dbg !2916
  %gt149 = icmp sgt i128 %106, %zext148, !dbg !2915
  %check150 = icmp sge i128 %zext148, 0, !dbg !2915
  %siui-gt151 = and i1 %check150, %gt149, !dbg !2915
  br i1 %siui-gt151, label %or.phi157, label %or.rhs152, !dbg !2915

or.rhs152:                                        ; preds = %if.exit147
  %108 = load i128, ptr %i135, align 16, !dbg !2917
  %109 = load i32, ptr %min, align 4, !dbg !2918
  %zext153 = zext i32 %109 to i128, !dbg !2918
  %lt154 = icmp slt i128 %108, %zext153, !dbg !2917
  %check155 = icmp slt i128 %zext153, 0, !dbg !2917
  %siui-lt156 = or i1 %check155, %lt154, !dbg !2917
  br label %or.phi157, !dbg !2917

or.phi157:                                        ; preds = %or.rhs152, %if.exit147
  %val158 = phi i1 [ true, %if.exit147 ], [ %siui-lt156, %or.rhs152 ], !dbg !2917
  br i1 %val158, label %if.then159, label %if.exit160, !dbg !2917

if.then159:                                       ; preds = %or.phi157
  br label %else_block, !dbg !2919

if.exit160:                                       ; preds = %or.phi157
  %110 = load i128, ptr %i135, align 16, !dbg !2920
  %trunc161 = trunc i128 %110 to i32, !dbg !2920
  store i32 %trunc161, ptr %blockret, align 4, !dbg !2920
  br label %expr_block.exit, !dbg !2920

next_if162:                                       ; preds = %result_block133
  br label %check_subtype163, !dbg !2921

check_subtype163:                                 ; preds = %parent_type_block165, %next_if162
  %111 = phi i64 [ %39, %next_if162 ], [ %typeid.parent167, %parent_type_block165 ], !dbg !2921
  %eq164 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %111, !dbg !2921
  br i1 %eq164, label %result_block168, label %parent_type_block165, !dbg !2921

parent_type_block165:                             ; preds = %check_subtype163
  %112 = inttoptr i64 %111 to ptr, !dbg !2921
  %ptradd166 = getelementptr inbounds i8, ptr %112, i64 8, !dbg !2921
  %typeid.parent167 = load i64, ptr %ptradd166, align 8, !dbg !2921
  %113 = icmp eq i64 %typeid.parent167, 0, !dbg !2921
  br i1 %113, label %result_block168, label %check_subtype163, !dbg !2921

result_block168:                                  ; preds = %parent_type_block165, %check_subtype163
  %114 = phi i1 [ false, %parent_type_block165 ], [ true, %check_subtype163 ], !dbg !2921
  br i1 %114, label %switch.case169, label %next_if182, !dbg !2921

switch.case169:                                   ; preds = %result_block168
  call void @llvm.dbg.declare(metadata ptr %c170, metadata !2922, metadata !DIExpression()), !dbg !2924
  %115 = load ptr, ptr %v, align 8, !dbg !2925
  %checknull171 = icmp eq ptr %115, null, !dbg !2925
  %116 = call i1 @llvm.expect.i1(i1 %checknull171, i1 false), !dbg !2925
  br i1 %116, label %panic172, label %checkok176, !dbg !2925

checkok176:                                       ; preds = %switch.case169
  %117 = load i8, ptr %115, align 1, !dbg !2926
  store i8 %117, ptr %c170, align 1, !dbg !2926
  %118 = load i8, ptr %c170, align 1, !dbg !2927
  %zext177 = zext i8 %118 to i32, !dbg !2927
  %119 = load i32, ptr %max, align 4, !dbg !2928
  %gt178 = icmp ugt i32 %zext177, %119, !dbg !2927
  br i1 %gt178, label %if.then179, label %if.exit180, !dbg !2927

if.then179:                                       ; preds = %checkok176
  br label %else_block, !dbg !2929

if.exit180:                                       ; preds = %checkok176
  %120 = load i8, ptr %c170, align 1, !dbg !2930
  %zext181 = zext i8 %120 to i32, !dbg !2930
  store i32 %zext181, ptr %blockret, align 4, !dbg !2930
  br label %expr_block.exit, !dbg !2930

next_if182:                                       ; preds = %result_block168
  br label %check_subtype183, !dbg !2931

check_subtype183:                                 ; preds = %parent_type_block185, %next_if182
  %121 = phi i64 [ %39, %next_if182 ], [ %typeid.parent187, %parent_type_block185 ], !dbg !2931
  %eq184 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %121, !dbg !2931
  br i1 %eq184, label %result_block188, label %parent_type_block185, !dbg !2931

parent_type_block185:                             ; preds = %check_subtype183
  %122 = inttoptr i64 %121 to ptr, !dbg !2931
  %ptradd186 = getelementptr inbounds i8, ptr %122, i64 8, !dbg !2931
  %typeid.parent187 = load i64, ptr %ptradd186, align 8, !dbg !2931
  %123 = icmp eq i64 %typeid.parent187, 0, !dbg !2931
  br i1 %123, label %result_block188, label %check_subtype183, !dbg !2931

result_block188:                                  ; preds = %parent_type_block185, %check_subtype183
  %124 = phi i1 [ false, %parent_type_block185 ], [ true, %check_subtype183 ], !dbg !2931
  br i1 %124, label %switch.case189, label %next_if207, !dbg !2931

switch.case189:                                   ; preds = %result_block188
  call void @llvm.dbg.declare(metadata ptr %s190, metadata !2932, metadata !DIExpression()), !dbg !2935
  %125 = load ptr, ptr %v, align 8, !dbg !2936
  %checknull191 = icmp eq ptr %125, null, !dbg !2936
  %126 = call i1 @llvm.expect.i1(i1 %checknull191, i1 false), !dbg !2936
  br i1 %126, label %panic192, label %checkok196, !dbg !2936

checkok196:                                       ; preds = %switch.case189
  %127 = load i16, ptr %125, align 2, !dbg !2937
  store i16 %127, ptr %s190, align 2, !dbg !2937
  %128 = load i16, ptr %s190, align 2, !dbg !2938
  %zext197 = zext i16 %128 to i32, !dbg !2938
  %129 = load i32, ptr %max, align 4, !dbg !2939
  %gt198 = icmp ugt i32 %zext197, %129, !dbg !2938
  br i1 %gt198, label %or.phi202, label %or.rhs199, !dbg !2938

or.rhs199:                                        ; preds = %checkok196
  %130 = load i16, ptr %s190, align 2, !dbg !2940
  %zext200 = zext i16 %130 to i32, !dbg !2940
  %131 = load i32, ptr %min, align 4, !dbg !2941
  %lt201 = icmp ult i32 %zext200, %131, !dbg !2940
  br label %or.phi202, !dbg !2940

or.phi202:                                        ; preds = %or.rhs199, %checkok196
  %val203 = phi i1 [ true, %checkok196 ], [ %lt201, %or.rhs199 ], !dbg !2940
  br i1 %val203, label %if.then204, label %if.exit205, !dbg !2940

if.then204:                                       ; preds = %or.phi202
  br label %else_block, !dbg !2942

if.exit205:                                       ; preds = %or.phi202
  %132 = load i16, ptr %s190, align 2, !dbg !2943
  %zext206 = zext i16 %132 to i32, !dbg !2943
  store i32 %zext206, ptr %blockret, align 4, !dbg !2943
  br label %expr_block.exit, !dbg !2943

next_if207:                                       ; preds = %result_block188
  br label %check_subtype208, !dbg !2944

check_subtype208:                                 ; preds = %parent_type_block210, %next_if207
  %133 = phi i64 [ %39, %next_if207 ], [ %typeid.parent212, %parent_type_block210 ], !dbg !2944
  %eq209 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %133, !dbg !2944
  br i1 %eq209, label %result_block213, label %parent_type_block210, !dbg !2944

parent_type_block210:                             ; preds = %check_subtype208
  %134 = inttoptr i64 %133 to ptr, !dbg !2944
  %ptradd211 = getelementptr inbounds i8, ptr %134, i64 8, !dbg !2944
  %typeid.parent212 = load i64, ptr %ptradd211, align 8, !dbg !2944
  %135 = icmp eq i64 %typeid.parent212, 0, !dbg !2944
  br i1 %135, label %result_block213, label %check_subtype208, !dbg !2944

result_block213:                                  ; preds = %parent_type_block210, %check_subtype208
  %136 = phi i1 [ false, %parent_type_block210 ], [ true, %check_subtype208 ], !dbg !2944
  br i1 %136, label %switch.case214, label %next_if229, !dbg !2944

switch.case214:                                   ; preds = %result_block213
  call void @llvm.dbg.declare(metadata ptr %i215, metadata !2945, metadata !DIExpression()), !dbg !2947
  %137 = load ptr, ptr %v, align 8, !dbg !2948
  %checknull216 = icmp eq ptr %137, null, !dbg !2948
  %138 = call i1 @llvm.expect.i1(i1 %checknull216, i1 false), !dbg !2948
  br i1 %138, label %panic217, label %checkok221, !dbg !2948

checkok221:                                       ; preds = %switch.case214
  %139 = load i32, ptr %137, align 4, !dbg !2949
  store i32 %139, ptr %i215, align 4, !dbg !2949
  %140 = load i32, ptr %i215, align 4, !dbg !2950
  %141 = load i32, ptr %max, align 4, !dbg !2951
  %gt222 = icmp ugt i32 %140, %141, !dbg !2950
  br i1 %gt222, label %or.phi225, label %or.rhs223, !dbg !2950

or.rhs223:                                        ; preds = %checkok221
  %142 = load i32, ptr %i215, align 4, !dbg !2952
  %143 = load i32, ptr %min, align 4, !dbg !2953
  %lt224 = icmp ult i32 %142, %143, !dbg !2952
  br label %or.phi225, !dbg !2952

or.phi225:                                        ; preds = %or.rhs223, %checkok221
  %val226 = phi i1 [ true, %checkok221 ], [ %lt224, %or.rhs223 ], !dbg !2952
  br i1 %val226, label %if.then227, label %if.exit228, !dbg !2952

if.then227:                                       ; preds = %or.phi225
  br label %else_block, !dbg !2954

if.exit228:                                       ; preds = %or.phi225
  %144 = load i32, ptr %i215, align 4, !dbg !2955
  store i32 %144, ptr %blockret, align 4, !dbg !2955
  br label %expr_block.exit, !dbg !2955

next_if229:                                       ; preds = %result_block213
  br label %check_subtype230, !dbg !2956

check_subtype230:                                 ; preds = %parent_type_block232, %next_if229
  %145 = phi i64 [ %39, %next_if229 ], [ %typeid.parent234, %parent_type_block232 ], !dbg !2956
  %eq231 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %145, !dbg !2956
  br i1 %eq231, label %result_block235, label %parent_type_block232, !dbg !2956

parent_type_block232:                             ; preds = %check_subtype230
  %146 = inttoptr i64 %145 to ptr, !dbg !2956
  %ptradd233 = getelementptr inbounds i8, ptr %146, i64 8, !dbg !2956
  %typeid.parent234 = load i64, ptr %ptradd233, align 8, !dbg !2956
  %147 = icmp eq i64 %typeid.parent234, 0, !dbg !2956
  br i1 %147, label %result_block235, label %check_subtype230, !dbg !2956

result_block235:                                  ; preds = %parent_type_block232, %check_subtype230
  %148 = phi i1 [ false, %parent_type_block232 ], [ true, %check_subtype230 ], !dbg !2956
  br i1 %148, label %switch.case236, label %next_if254, !dbg !2956

switch.case236:                                   ; preds = %result_block235
  call void @llvm.dbg.declare(metadata ptr %l237, metadata !2957, metadata !DIExpression()), !dbg !2959
  %149 = load ptr, ptr %v, align 8, !dbg !2960
  %checknull238 = icmp eq ptr %149, null, !dbg !2960
  %150 = call i1 @llvm.expect.i1(i1 %checknull238, i1 false), !dbg !2960
  br i1 %150, label %panic239, label %checkok243, !dbg !2960

checkok243:                                       ; preds = %switch.case236
  %151 = load i64, ptr %149, align 8, !dbg !2961
  store i64 %151, ptr %l237, align 8, !dbg !2961
  %152 = load i64, ptr %l237, align 8, !dbg !2962
  %153 = load i32, ptr %max, align 4, !dbg !2963
  %zext244 = zext i32 %153 to i64, !dbg !2963
  %gt245 = icmp ugt i64 %152, %zext244, !dbg !2962
  br i1 %gt245, label %or.phi249, label %or.rhs246, !dbg !2962

or.rhs246:                                        ; preds = %checkok243
  %154 = load i64, ptr %l237, align 8, !dbg !2964
  %155 = load i32, ptr %min, align 4, !dbg !2965
  %zext247 = zext i32 %155 to i64, !dbg !2965
  %lt248 = icmp ult i64 %154, %zext247, !dbg !2964
  br label %or.phi249, !dbg !2964

or.phi249:                                        ; preds = %or.rhs246, %checkok243
  %val250 = phi i1 [ true, %checkok243 ], [ %lt248, %or.rhs246 ], !dbg !2964
  br i1 %val250, label %if.then251, label %if.exit252, !dbg !2964

if.then251:                                       ; preds = %or.phi249
  br label %else_block, !dbg !2966

if.exit252:                                       ; preds = %or.phi249
  %156 = load i64, ptr %l237, align 8, !dbg !2967
  %trunc253 = trunc i64 %156 to i32, !dbg !2967
  store i32 %trunc253, ptr %blockret, align 4, !dbg !2967
  br label %expr_block.exit, !dbg !2967

next_if254:                                       ; preds = %result_block235
  br label %check_subtype255, !dbg !2968

check_subtype255:                                 ; preds = %parent_type_block257, %next_if254
  %157 = phi i64 [ %39, %next_if254 ], [ %typeid.parent259, %parent_type_block257 ], !dbg !2968
  %eq256 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %157, !dbg !2968
  br i1 %eq256, label %result_block260, label %parent_type_block257, !dbg !2968

parent_type_block257:                             ; preds = %check_subtype255
  %158 = inttoptr i64 %157 to ptr, !dbg !2968
  %ptradd258 = getelementptr inbounds i8, ptr %158, i64 8, !dbg !2968
  %typeid.parent259 = load i64, ptr %ptradd258, align 8, !dbg !2968
  %159 = icmp eq i64 %typeid.parent259, 0, !dbg !2968
  br i1 %159, label %result_block260, label %check_subtype255, !dbg !2968

result_block260:                                  ; preds = %parent_type_block257, %check_subtype255
  %160 = phi i1 [ false, %parent_type_block257 ], [ true, %check_subtype255 ], !dbg !2968
  br i1 %160, label %switch.case261, label %next_if279, !dbg !2968

switch.case261:                                   ; preds = %result_block260
  call void @llvm.dbg.declare(metadata ptr %i262, metadata !2969, metadata !DIExpression()), !dbg !2971
  %161 = load ptr, ptr %v, align 8, !dbg !2972
  %checknull263 = icmp eq ptr %161, null, !dbg !2972
  %162 = call i1 @llvm.expect.i1(i1 %checknull263, i1 false), !dbg !2972
  br i1 %162, label %panic264, label %checkok268, !dbg !2972

checkok268:                                       ; preds = %switch.case261
  %163 = load i128, ptr %161, align 16, !dbg !2973
  store i128 %163, ptr %i262, align 16, !dbg !2973
  %164 = load i128, ptr %i262, align 16, !dbg !2974
  %165 = load i32, ptr %max, align 4, !dbg !2975
  %zext269 = zext i32 %165 to i128, !dbg !2975
  %gt270 = icmp ugt i128 %164, %zext269, !dbg !2974
  br i1 %gt270, label %or.phi274, label %or.rhs271, !dbg !2974

or.rhs271:                                        ; preds = %checkok268
  %166 = load i128, ptr %i262, align 16, !dbg !2976
  %167 = load i32, ptr %min, align 4, !dbg !2977
  %zext272 = zext i32 %167 to i128, !dbg !2977
  %lt273 = icmp ult i128 %166, %zext272, !dbg !2976
  br label %or.phi274, !dbg !2976

or.phi274:                                        ; preds = %or.rhs271, %checkok268
  %val275 = phi i1 [ true, %checkok268 ], [ %lt273, %or.rhs271 ], !dbg !2976
  br i1 %val275, label %if.then276, label %if.exit277, !dbg !2976

if.then276:                                       ; preds = %or.phi274
  br label %else_block, !dbg !2978

if.exit277:                                       ; preds = %or.phi274
  %168 = load i128, ptr %i262, align 16, !dbg !2979
  %trunc278 = trunc i128 %168 to i32, !dbg !2979
  store i32 %trunc278, ptr %blockret, align 4, !dbg !2979
  br label %expr_block.exit, !dbg !2979

next_if279:                                       ; preds = %result_block260
  br label %switch.default, !dbg !2979

switch.default:                                   ; preds = %next_if279
  store %"char[]" { ptr @.str.168, i64 30 }, ptr %string, align 8
  %169 = load [2 x i64], ptr %string, align 8, !dbg !2980
  store %"char[]" { ptr @.str.169, i64 20 }, ptr %taddr280, align 8
  %170 = load [2 x i64], ptr %taddr280, align 8
  store %"char[]" { ptr @.str.170, i64 18 }, ptr %taddr281, align 8
  %171 = load [2 x i64], ptr %taddr281, align 8
  store %"any[]" zeroinitializer, ptr %taddr282, align 8
  %172 = load [2 x i64], ptr %taddr282, align 8
  call void @std.core.builtin.panicf([2 x i64] %169, [2 x i64] %170, [2 x i64] %171, i32 633, [2 x i64] %172), !dbg !2984
  unreachable, !dbg !2985

expr_block.exit:                                  ; preds = %if.exit277, %if.exit252, %if.exit228, %if.exit205, %if.exit180, %if.exit160, %if.exit126, %if.exit92, %if.exit60, %if.exit32
  %173 = load i32, ptr %blockret, align 4, !dbg !2985
  br label %phi_block, !dbg !2985

else_block:                                       ; preds = %if.then276, %if.then251, %if.then227, %if.then204, %if.then179, %if.then159, %if.then146, %if.then125, %if.then112, %if.then91, %if.then80, %if.then59, %if.then52, %if.then31
  br label %phi_block, !dbg !2986

phi_block:                                        ; preds = %else_block, %expr_block.exit
  %val283 = phi i32 [ %173, %expr_block.exit ], [ 65533, %else_block ], !dbg !2986
  store i32 %val283, ptr %c, align 4, !dbg !2986
  store i8 1, ptr %switch284, align 1
  br label %switch.entry285

switch.entry285:                                  ; preds = %phi_block
  %174 = load i8, ptr %switch284, align 1
  %175 = trunc i8 %174 to i1
  %176 = load i32, ptr %c, align 4, !dbg !2987
  %lt286 = icmp ult i32 %176, 127, !dbg !2987
  %eq287 = icmp eq i1 %lt286, %175, !dbg !2987
  br i1 %eq287, label %switch.case288, label %next_if297, !dbg !2987

switch.case288:                                   ; preds = %switch.entry285
  %177 = load i32, ptr %c, align 4, !dbg !2989
  %trunc290 = trunc i32 %177 to i8, !dbg !2989
  %178 = load ptr, ptr %self, align 8
  %179 = call i64 @std.io.Formatter.out(ptr %retparam291, ptr %178, i8 %trunc290), !dbg !2991
  %not_err292 = icmp eq i64 %179, 0, !dbg !2991
  %180 = call i1 @llvm.expect.i1(i1 %not_err292, i1 true), !dbg !2991
  br i1 %180, label %after_check294, label %assign_optional293, !dbg !2991

assign_optional293:                               ; preds = %switch.case288
  store i64 %179, ptr %error_var289, align 8, !dbg !2991
  br label %guard_block295, !dbg !2991

after_check294:                                   ; preds = %switch.case288
  br label %noerr_block296, !dbg !2991

guard_block295:                                   ; preds = %assign_optional293
  %181 = load i64, ptr %error_var289, align 8, !dbg !2991
  ret i64 %181, !dbg !2991

noerr_block296:                                   ; preds = %after_check294
  br label %switch.exit, !dbg !2991

next_if297:                                       ; preds = %switch.entry285
  %182 = load i32, ptr %c, align 4, !dbg !2992
  %lt298 = icmp ult i32 %182, 2047, !dbg !2992
  %eq299 = icmp eq i1 %lt298, %175, !dbg !2992
  br i1 %eq299, label %switch.case300, label %next_if318, !dbg !2992

switch.case300:                                   ; preds = %next_if297
  %183 = load i32, ptr %c, align 4, !dbg !2993
  %lshr = lshr i32 %183, 6, !dbg !2993
  %184 = freeze i32 %lshr, !dbg !2993
  %or = or i32 192, %184, !dbg !2995
  %trunc302 = trunc i32 %or to i8, !dbg !2995
  %185 = load ptr, ptr %self, align 8
  %186 = call i64 @std.io.Formatter.out(ptr %retparam303, ptr %185, i8 %trunc302), !dbg !2996
  %not_err304 = icmp eq i64 %186, 0, !dbg !2996
  %187 = call i1 @llvm.expect.i1(i1 %not_err304, i1 true), !dbg !2996
  br i1 %187, label %after_check306, label %assign_optional305, !dbg !2996

assign_optional305:                               ; preds = %switch.case300
  store i64 %186, ptr %error_var301, align 8, !dbg !2996
  br label %guard_block307, !dbg !2996

after_check306:                                   ; preds = %switch.case300
  br label %noerr_block308, !dbg !2996

guard_block307:                                   ; preds = %assign_optional305
  %188 = load i64, ptr %error_var301, align 8, !dbg !2996
  ret i64 %188, !dbg !2996

noerr_block308:                                   ; preds = %after_check306
  %189 = load i32, ptr %c, align 4, !dbg !2997
  %and = and i32 %189, 63, !dbg !2997
  %or310 = or i32 128, %and, !dbg !2998
  %trunc311 = trunc i32 %or310 to i8, !dbg !2998
  %190 = load ptr, ptr %self, align 8
  %191 = call i64 @std.io.Formatter.out(ptr %retparam312, ptr %190, i8 %trunc311), !dbg !2999
  %not_err313 = icmp eq i64 %191, 0, !dbg !2999
  %192 = call i1 @llvm.expect.i1(i1 %not_err313, i1 true), !dbg !2999
  br i1 %192, label %after_check315, label %assign_optional314, !dbg !2999

assign_optional314:                               ; preds = %noerr_block308
  store i64 %191, ptr %error_var309, align 8, !dbg !2999
  br label %guard_block316, !dbg !2999

after_check315:                                   ; preds = %noerr_block308
  br label %noerr_block317, !dbg !2999

guard_block316:                                   ; preds = %assign_optional314
  %193 = load i64, ptr %error_var309, align 8, !dbg !2999
  ret i64 %193, !dbg !2999

noerr_block317:                                   ; preds = %after_check315
  br label %switch.exit, !dbg !2999

next_if318:                                       ; preds = %next_if297
  %194 = load i32, ptr %c, align 4, !dbg !3000
  %lt319 = icmp ult i32 %194, 65535, !dbg !3000
  %eq320 = icmp eq i1 %lt319, %175, !dbg !3000
  br i1 %eq320, label %switch.case321, label %next_if353, !dbg !3000

switch.case321:                                   ; preds = %next_if318
  %195 = load i32, ptr %c, align 4, !dbg !3001
  %lshr323 = lshr i32 %195, 12, !dbg !3001
  %196 = freeze i32 %lshr323, !dbg !3001
  %or324 = or i32 224, %196, !dbg !3003
  %trunc325 = trunc i32 %or324 to i8, !dbg !3003
  %197 = load ptr, ptr %self, align 8
  %198 = call i64 @std.io.Formatter.out(ptr %retparam326, ptr %197, i8 %trunc325), !dbg !3004
  %not_err327 = icmp eq i64 %198, 0, !dbg !3004
  %199 = call i1 @llvm.expect.i1(i1 %not_err327, i1 true), !dbg !3004
  br i1 %199, label %after_check329, label %assign_optional328, !dbg !3004

assign_optional328:                               ; preds = %switch.case321
  store i64 %198, ptr %error_var322, align 8, !dbg !3004
  br label %guard_block330, !dbg !3004

after_check329:                                   ; preds = %switch.case321
  br label %noerr_block331, !dbg !3004

guard_block330:                                   ; preds = %assign_optional328
  %200 = load i64, ptr %error_var322, align 8, !dbg !3004
  ret i64 %200, !dbg !3004

noerr_block331:                                   ; preds = %after_check329
  %201 = load i32, ptr %c, align 4, !dbg !3005
  %lshr333 = lshr i32 %201, 6, !dbg !3005
  %202 = freeze i32 %lshr333, !dbg !3005
  %and334 = and i32 %202, 63, !dbg !3005
  %or335 = or i32 128, %and334, !dbg !3006
  %trunc336 = trunc i32 %or335 to i8, !dbg !3006
  %203 = load ptr, ptr %self, align 8
  %204 = call i64 @std.io.Formatter.out(ptr %retparam337, ptr %203, i8 %trunc336), !dbg !3007
  %not_err338 = icmp eq i64 %204, 0, !dbg !3007
  %205 = call i1 @llvm.expect.i1(i1 %not_err338, i1 true), !dbg !3007
  br i1 %205, label %after_check340, label %assign_optional339, !dbg !3007

assign_optional339:                               ; preds = %noerr_block331
  store i64 %204, ptr %error_var332, align 8, !dbg !3007
  br label %guard_block341, !dbg !3007

after_check340:                                   ; preds = %noerr_block331
  br label %noerr_block342, !dbg !3007

guard_block341:                                   ; preds = %assign_optional339
  %206 = load i64, ptr %error_var332, align 8, !dbg !3007
  ret i64 %206, !dbg !3007

noerr_block342:                                   ; preds = %after_check340
  %207 = load i32, ptr %c, align 4, !dbg !3008
  %and344 = and i32 %207, 63, !dbg !3008
  %or345 = or i32 128, %and344, !dbg !3009
  %trunc346 = trunc i32 %or345 to i8, !dbg !3009
  %208 = load ptr, ptr %self, align 8
  %209 = call i64 @std.io.Formatter.out(ptr %retparam347, ptr %208, i8 %trunc346), !dbg !3010
  %not_err348 = icmp eq i64 %209, 0, !dbg !3010
  %210 = call i1 @llvm.expect.i1(i1 %not_err348, i1 true), !dbg !3010
  br i1 %210, label %after_check350, label %assign_optional349, !dbg !3010

assign_optional349:                               ; preds = %noerr_block342
  store i64 %209, ptr %error_var343, align 8, !dbg !3010
  br label %guard_block351, !dbg !3010

after_check350:                                   ; preds = %noerr_block342
  br label %noerr_block352, !dbg !3010

guard_block351:                                   ; preds = %assign_optional349
  %211 = load i64, ptr %error_var343, align 8, !dbg !3010
  ret i64 %211, !dbg !3010

noerr_block352:                                   ; preds = %after_check350
  br label %switch.exit, !dbg !3010

next_if353:                                       ; preds = %next_if318
  br label %switch.default354, !dbg !3010

switch.default354:                                ; preds = %next_if353
  %212 = load i32, ptr %c, align 4, !dbg !3011
  %lshr356 = lshr i32 %212, 18, !dbg !3011
  %213 = freeze i32 %lshr356, !dbg !3011
  %or357 = or i32 240, %213, !dbg !3013
  %trunc358 = trunc i32 %or357 to i8, !dbg !3013
  %214 = load ptr, ptr %self, align 8
  %215 = call i64 @std.io.Formatter.out(ptr %retparam359, ptr %214, i8 %trunc358), !dbg !3014
  %not_err360 = icmp eq i64 %215, 0, !dbg !3014
  %216 = call i1 @llvm.expect.i1(i1 %not_err360, i1 true), !dbg !3014
  br i1 %216, label %after_check362, label %assign_optional361, !dbg !3014

assign_optional361:                               ; preds = %switch.default354
  store i64 %215, ptr %error_var355, align 8, !dbg !3014
  br label %guard_block363, !dbg !3014

after_check362:                                   ; preds = %switch.default354
  br label %noerr_block364, !dbg !3014

guard_block363:                                   ; preds = %assign_optional361
  %217 = load i64, ptr %error_var355, align 8, !dbg !3014
  ret i64 %217, !dbg !3014

noerr_block364:                                   ; preds = %after_check362
  %218 = load i32, ptr %c, align 4, !dbg !3015
  %lshr366 = lshr i32 %218, 12, !dbg !3015
  %219 = freeze i32 %lshr366, !dbg !3015
  %and367 = and i32 %219, 63, !dbg !3015
  %or368 = or i32 128, %and367, !dbg !3016
  %trunc369 = trunc i32 %or368 to i8, !dbg !3016
  %220 = load ptr, ptr %self, align 8
  %221 = call i64 @std.io.Formatter.out(ptr %retparam370, ptr %220, i8 %trunc369), !dbg !3017
  %not_err371 = icmp eq i64 %221, 0, !dbg !3017
  %222 = call i1 @llvm.expect.i1(i1 %not_err371, i1 true), !dbg !3017
  br i1 %222, label %after_check373, label %assign_optional372, !dbg !3017

assign_optional372:                               ; preds = %noerr_block364
  store i64 %221, ptr %error_var365, align 8, !dbg !3017
  br label %guard_block374, !dbg !3017

after_check373:                                   ; preds = %noerr_block364
  br label %noerr_block375, !dbg !3017

guard_block374:                                   ; preds = %assign_optional372
  %223 = load i64, ptr %error_var365, align 8, !dbg !3017
  ret i64 %223, !dbg !3017

noerr_block375:                                   ; preds = %after_check373
  %224 = load i32, ptr %c, align 4, !dbg !3018
  %lshr377 = lshr i32 %224, 6, !dbg !3018
  %225 = freeze i32 %lshr377, !dbg !3018
  %and378 = and i32 %225, 63, !dbg !3018
  %or379 = or i32 128, %and378, !dbg !3019
  %trunc380 = trunc i32 %or379 to i8, !dbg !3019
  %226 = load ptr, ptr %self, align 8
  %227 = call i64 @std.io.Formatter.out(ptr %retparam381, ptr %226, i8 %trunc380), !dbg !3020
  %not_err382 = icmp eq i64 %227, 0, !dbg !3020
  %228 = call i1 @llvm.expect.i1(i1 %not_err382, i1 true), !dbg !3020
  br i1 %228, label %after_check384, label %assign_optional383, !dbg !3020

assign_optional383:                               ; preds = %noerr_block375
  store i64 %227, ptr %error_var376, align 8, !dbg !3020
  br label %guard_block385, !dbg !3020

after_check384:                                   ; preds = %noerr_block375
  br label %noerr_block386, !dbg !3020

guard_block385:                                   ; preds = %assign_optional383
  %229 = load i64, ptr %error_var376, align 8, !dbg !3020
  ret i64 %229, !dbg !3020

noerr_block386:                                   ; preds = %after_check384
  %230 = load i32, ptr %c, align 4, !dbg !3021
  %and388 = and i32 %230, 63, !dbg !3021
  %or389 = or i32 128, %and388, !dbg !3022
  %trunc390 = trunc i32 %or389 to i8, !dbg !3022
  %231 = load ptr, ptr %self, align 8
  %232 = call i64 @std.io.Formatter.out(ptr %retparam391, ptr %231, i8 %trunc390), !dbg !3023
  %not_err392 = icmp eq i64 %232, 0, !dbg !3023
  %233 = call i1 @llvm.expect.i1(i1 %not_err392, i1 true), !dbg !3023
  br i1 %233, label %after_check394, label %assign_optional393, !dbg !3023

assign_optional393:                               ; preds = %noerr_block386
  store i64 %232, ptr %error_var387, align 8, !dbg !3023
  br label %guard_block395, !dbg !3023

after_check394:                                   ; preds = %noerr_block386
  br label %noerr_block396, !dbg !3023

guard_block395:                                   ; preds = %assign_optional393
  %234 = load i64, ptr %error_var387, align 8, !dbg !3023
  ret i64 %234, !dbg !3023

noerr_block396:                                   ; preds = %after_check394
  br label %switch.exit, !dbg !3023

switch.exit:                                      ; preds = %noerr_block396, %noerr_block352, %noerr_block317, %noerr_block296
  %235 = load i64, ptr %len, align 8, !dbg !3024
  %236 = load i32, ptr %l, align 4, !dbg !3025
  %zext398 = zext i32 %236 to i64, !dbg !3025
  %237 = load ptr, ptr %self, align 8
  %238 = call i64 @std.io.Formatter.adjust(ptr %retparam399, ptr %237, i64 %zext398), !dbg !3026
  %not_err400 = icmp eq i64 %238, 0, !dbg !3026
  %239 = call i1 @llvm.expect.i1(i1 %not_err400, i1 true), !dbg !3026
  br i1 %239, label %after_check402, label %assign_optional401, !dbg !3026

assign_optional401:                               ; preds = %switch.exit
  store i64 %238, ptr %error_var397, align 8, !dbg !3026
  br label %guard_block403, !dbg !3026

after_check402:                                   ; preds = %switch.exit
  br label %noerr_block404, !dbg !3026

guard_block403:                                   ; preds = %assign_optional401
  %240 = load i64, ptr %error_var397, align 8, !dbg !3026
  ret i64 %240, !dbg !3026

noerr_block404:                                   ; preds = %after_check402
  %241 = load i64, ptr %retparam399, align 8, !dbg !3026
  %add405 = add i64 %235, %241, !dbg !3024
  store i64 %add405, ptr %len, align 8, !dbg !3024
  %242 = load i64, ptr %len, align 8, !dbg !3027
  store i64 %242, ptr %0, align 8, !dbg !3027
  ret i64 0, !dbg !3027

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %243 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %244 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr2, align 8
  %245 = load [2 x i64], ptr %taddr2, align 8
  %246 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %246([2 x i64] %243, [2 x i64] %244, [2 x i64] %245, i32 622), !dbg !2807
  unreachable, !dbg !2807

panic26:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr27, align 8
  %247 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr28, align 8
  %248 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr29, align 8
  %249 = load [2 x i64], ptr %taddr29, align 8
  %250 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %250([2 x i64] %247, [2 x i64] %248, [2 x i64] %249, i32 35), !dbg !2854
  unreachable, !dbg !2854

panic42:                                          ; preds = %switch.case40
  store %"char[]" { ptr @.panic_msg.125, i64 53 }, ptr %taddr43, align 8
  %251 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr44, align 8
  %252 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr45, align 8
  %253 = load [2 x i64], ptr %taddr45, align 8
  %254 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %254([2 x i64] %251, [2 x i64] %252, [2 x i64] %253, i32 39), !dbg !2865
  unreachable, !dbg !2865

panic71:                                          ; preds = %switch.case69
  store %"char[]" { ptr @.panic_msg.126, i64 51 }, ptr %taddr72, align 8
  %255 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr73, align 8
  %256 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr74, align 8
  %257 = load [2 x i64], ptr %taddr74, align 8
  %258 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %258([2 x i64] %255, [2 x i64] %256, [2 x i64] %257, i32 44), !dbg !2880
  unreachable, !dbg !2880

panic103:                                         ; preds = %switch.case100
  store %"char[]" { ptr @.panic_msg.127, i64 52 }, ptr %taddr104, align 8
  %259 = load [2 x i64], ptr %taddr104, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr105, align 8
  %260 = load [2 x i64], ptr %taddr105, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr106, align 8
  %261 = load [2 x i64], ptr %taddr106, align 8
  %262 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %262([2 x i64] %259, [2 x i64] %260, [2 x i64] %261, i32 49), !dbg !2895
  unreachable, !dbg !2895

panic137:                                         ; preds = %switch.case134
  store %"char[]" { ptr @.panic_msg.128, i64 54 }, ptr %taddr138, align 8
  %263 = load [2 x i64], ptr %taddr138, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr139, align 8
  %264 = load [2 x i64], ptr %taddr139, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr140, align 8
  %265 = load [2 x i64], ptr %taddr140, align 8
  %266 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %266([2 x i64] %263, [2 x i64] %264, [2 x i64] %265, i32 54), !dbg !2911
  unreachable, !dbg !2911

panic172:                                         ; preds = %switch.case169
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr173, align 8
  %267 = load [2 x i64], ptr %taddr173, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr174, align 8
  %268 = load [2 x i64], ptr %taddr174, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr175, align 8
  %269 = load [2 x i64], ptr %taddr175, align 8
  %270 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %270([2 x i64] %267, [2 x i64] %268, [2 x i64] %269, i32 59), !dbg !2926
  unreachable, !dbg !2926

panic192:                                         ; preds = %switch.case189
  store %"char[]" { ptr @.panic_msg.129, i64 54 }, ptr %taddr193, align 8
  %271 = load [2 x i64], ptr %taddr193, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr194, align 8
  %272 = load [2 x i64], ptr %taddr194, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr195, align 8
  %273 = load [2 x i64], ptr %taddr195, align 8
  %274 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %274([2 x i64] %271, [2 x i64] %272, [2 x i64] %273, i32 63), !dbg !2937
  unreachable, !dbg !2937

panic217:                                         ; preds = %switch.case214
  store %"char[]" { ptr @.panic_msg.130, i64 52 }, ptr %taddr218, align 8
  %275 = load [2 x i64], ptr %taddr218, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr219, align 8
  %276 = load [2 x i64], ptr %taddr219, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr220, align 8
  %277 = load [2 x i64], ptr %taddr220, align 8
  %278 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %278([2 x i64] %275, [2 x i64] %276, [2 x i64] %277, i32 67), !dbg !2949
  unreachable, !dbg !2949

panic239:                                         ; preds = %switch.case236
  store %"char[]" { ptr @.panic_msg.131, i64 53 }, ptr %taddr240, align 8
  %279 = load [2 x i64], ptr %taddr240, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr241, align 8
  %280 = load [2 x i64], ptr %taddr241, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr242, align 8
  %281 = load [2 x i64], ptr %taddr242, align 8
  %282 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %282([2 x i64] %279, [2 x i64] %280, [2 x i64] %281, i32 71), !dbg !2961
  unreachable, !dbg !2961

panic264:                                         ; preds = %switch.case261
  store %"char[]" { ptr @.panic_msg.132, i64 55 }, ptr %taddr265, align 8
  %283 = load [2 x i64], ptr %taddr265, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr266, align 8
  %284 = load [2 x i64], ptr %taddr266, align 8
  store %"char[]" { ptr @.func.166, i64 8 }, ptr %taddr267, align 8
  %285 = load [2 x i64], ptr %taddr267, align 8
  %286 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %286([2 x i64] %283, [2 x i64] %284, [2 x i64] %285, i32 75), !dbg !2973
  unreachable, !dbg !2973
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.out_reverse(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !3028 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %buf = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %buffer_start_idx = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var11 = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr20 = alloca %"any[]", align 8
  %retparam23 = alloca i64, align 8
  %error_var30 = alloca i64, align 8
  %retparam31 = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3029
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3029
  br i1 %4, label %panic, label %checkok, !dbg !3029

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3030, metadata !DIExpression()), !dbg !3031
  store [2 x i64] %2, ptr %buf, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !3032, metadata !DIExpression()), !dbg !3033
  call void @llvm.dbg.declare(metadata ptr %n, metadata !3034, metadata !DIExpression()), !dbg !3035
  store i64 0, ptr %n, align 8, !dbg !3035
  call void @llvm.dbg.declare(metadata ptr %buffer_start_idx, metadata !3036, metadata !DIExpression()), !dbg !3037
  %5 = load ptr, ptr %self, align 8, !dbg !3038
  %ptradd = getelementptr inbounds i8, ptr %5, i64 16, !dbg !3038
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 16, !dbg !3038
  %6 = load i64, ptr %ptradd3, align 8, !dbg !3038
  store i64 %6, ptr %buffer_start_idx, align 8, !dbg !3038
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3039, metadata !DIExpression()), !dbg !3040
  %ptradd4 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3041
  %7 = load i64, ptr %ptradd4, align 8, !dbg !3041
  store i64 %7, ptr %len, align 8, !dbg !3041
  %8 = load ptr, ptr %self, align 8, !dbg !3042
  %ptradd5 = getelementptr inbounds i8, ptr %8, i64 16, !dbg !3042
  %9 = load i32, ptr %ptradd5, align 8, !dbg !3042
  %10 = and i32 1, %9, !dbg !3042
  %trunc = trunc i32 %10 to i8, !dbg !3042
  %11 = trunc i8 %trunc to i1, !dbg !3042
  %not = xor i1 %11, true, !dbg !3042
  br i1 %not, label %and.rhs, label %and.phi, !dbg !3042

and.rhs:                                          ; preds = %checkok
  %12 = load ptr, ptr %self, align 8, !dbg !3043
  %ptradd6 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !3043
  %13 = load i32, ptr %ptradd6, align 8, !dbg !3043
  %lshrl = lshr i32 %13, 1, !dbg !3043
  %14 = and i32 1, %lshrl, !dbg !3043
  %trunc7 = trunc i32 %14 to i8, !dbg !3043
  %15 = trunc i8 %trunc7 to i1, !dbg !3043
  %not8 = xor i1 %15, true, !dbg !3043
  br label %and.phi, !dbg !3043

and.phi:                                          ; preds = %and.rhs, %checkok
  %val = phi i1 [ false, %checkok ], [ %not8, %and.rhs ], !dbg !3043
  br i1 %val, label %if.then, label %if.exit, !dbg !3043

if.then:                                          ; preds = %and.phi
  %16 = load i64, ptr %n, align 8, !dbg !3044
  %17 = load ptr, ptr %self, align 8, !dbg !3046
  %ptradd9 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !3046
  %ptradd10 = getelementptr inbounds i8, ptr %ptradd9, i64 4, !dbg !3046
  %18 = load i32, ptr %ptradd10, align 4, !dbg !3046
  %zext = zext i32 %18 to i64, !dbg !3046
  %19 = load i64, ptr %len, align 8, !dbg !3047
  %20 = load ptr, ptr %self, align 8
  %21 = call i64 @std.io.Formatter.pad(ptr %retparam, ptr %20, i8 32, i64 %zext, i64 %19) #5, !dbg !3048
  %not_err = icmp eq i64 %21, 0, !dbg !3048
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3048
  br i1 %22, label %after_check, label %assign_optional, !dbg !3048

assign_optional:                                  ; preds = %if.then
  store i64 %21, ptr %error_var, align 8, !dbg !3048
  br label %guard_block, !dbg !3048

after_check:                                      ; preds = %if.then
  br label %noerr_block, !dbg !3048

guard_block:                                      ; preds = %assign_optional
  %23 = load i64, ptr %error_var, align 8, !dbg !3048
  ret i64 %23, !dbg !3048

noerr_block:                                      ; preds = %after_check
  %24 = load i64, ptr %retparam, align 8, !dbg !3048
  %add = add i64 %16, %24, !dbg !3044
  store i64 %add, ptr %n, align 8, !dbg !3044
  br label %if.exit, !dbg !3044

if.exit:                                          ; preds = %noerr_block, %and.phi
  br label %loop.cond, !dbg !3049

loop.cond:                                        ; preds = %noerr_block28, %if.exit
  %25 = load i64, ptr %len, align 8, !dbg !3050
  %i2b = icmp ne i64 %25, 0, !dbg !3050
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !3050

loop.body:                                        ; preds = %loop.cond
  %26 = load i64, ptr %n, align 8, !dbg !3052
  %ptradd12 = getelementptr inbounds i8, ptr %buf, i64 8, !dbg !3053
  %27 = load i64, ptr %ptradd12, align 8, !dbg !3053
  %28 = load ptr, ptr %buf, align 8, !dbg !3053
  %29 = load i64, ptr %len, align 8, !dbg !3054
  %sub = sub i64 %29, 1, !dbg !3054
  store i64 %sub, ptr %len, align 8, !dbg !3054
  %ge = icmp uge i64 %sub, %27, !dbg !3054
  %30 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3054
  br i1 %30, label %panic13, label %checkok21, !dbg !3054

checkok21:                                        ; preds = %loop.body
  %ptradd22 = getelementptr inbounds i8, ptr %28, i64 %sub, !dbg !3055
  %31 = load ptr, ptr %self, align 8
  %32 = load i8, ptr %ptradd22, align 1
  %33 = call i64 @std.io.Formatter.out(ptr %retparam23, ptr %31, i8 %32), !dbg !3056
  %not_err24 = icmp eq i64 %33, 0, !dbg !3056
  %34 = call i1 @llvm.expect.i1(i1 %not_err24, i1 true), !dbg !3056
  br i1 %34, label %after_check26, label %assign_optional25, !dbg !3056

assign_optional25:                                ; preds = %checkok21
  store i64 %33, ptr %error_var11, align 8, !dbg !3056
  br label %guard_block27, !dbg !3056

after_check26:                                    ; preds = %checkok21
  br label %noerr_block28, !dbg !3056

guard_block27:                                    ; preds = %assign_optional25
  %35 = load i64, ptr %error_var11, align 8, !dbg !3056
  ret i64 %35, !dbg !3056

noerr_block28:                                    ; preds = %after_check26
  %36 = load i64, ptr %retparam23, align 8, !dbg !3056
  %add29 = add i64 %26, %36, !dbg !3052
  store i64 %add29, ptr %n, align 8, !dbg !3052
  br label %loop.cond, !dbg !3052

loop.exit:                                        ; preds = %loop.cond
  %37 = load i64, ptr %n, align 8, !dbg !3057
  %38 = load ptr, ptr %self, align 8
  %39 = load i64, ptr %n, align 8
  %40 = call i64 @std.io.Formatter.adjust(ptr %retparam31, ptr %38, i64 %39), !dbg !3058
  %not_err32 = icmp eq i64 %40, 0, !dbg !3058
  %41 = call i1 @llvm.expect.i1(i1 %not_err32, i1 true), !dbg !3058
  br i1 %41, label %after_check34, label %assign_optional33, !dbg !3058

assign_optional33:                                ; preds = %loop.exit
  store i64 %40, ptr %error_var30, align 8, !dbg !3058
  br label %guard_block35, !dbg !3058

after_check34:                                    ; preds = %loop.exit
  br label %noerr_block36, !dbg !3058

guard_block35:                                    ; preds = %assign_optional33
  %42 = load i64, ptr %error_var30, align 8, !dbg !3058
  ret i64 %42, !dbg !3058

noerr_block36:                                    ; preds = %after_check34
  %43 = load i64, ptr %retparam31, align 8, !dbg !3058
  %add37 = add i64 %37, %43, !dbg !3057
  store i64 %add37, ptr %n, align 8, !dbg !3057
  %44 = load i64, ptr %n, align 8, !dbg !3059
  store i64 %44, ptr %0, align 8, !dbg !3059
  ret i64 0, !dbg !3059

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %45 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %46 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.171, i64 11 }, ptr %taddr2, align 8
  %47 = load [2 x i64], ptr %taddr2, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48([2 x i64] %45, [2 x i64] %46, [2 x i64] %47, i32 656), !dbg !3031
  unreachable, !dbg !3031

panic13:                                          ; preds = %loop.body
  store i64 %27, ptr %taddr14, align 8
  %49 = insertvalue %any undef, ptr %taddr14, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr15, align 8
  %51 = insertvalue %any undef, ptr %taddr15, 0
  %52 = insertvalue %any %51, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr16, align 8
  %53 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr17, align 8
  %54 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.171, i64 11 }, ptr %taddr18, align 8
  %55 = load [2 x i64], ptr %taddr18, align 8
  store %any %50, ptr %varargslots, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %52, ptr %ptradd19, align 8
  %56 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %56, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr20, align 8
  %57 = load [2 x i64], ptr %taddr20, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 667, [2 x i64] %57), !dbg !3055
  unreachable, !dbg !3055
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.print_hex_chars(ptr %0, ptr %1, [2 x i64] %2, i8 %3) #0 !dbg !3060 {
entry:
  %f = alloca ptr, align 8
  %out = alloca %"char[]", align 8
  %uppercase = alloca i8, align 1
  %past_10 = alloca i8, align 1
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %digit = alloca i8, align 1
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var18 = alloca i64, align 8
  %retparam29 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr %1, ptr %f, align 8
  call void @llvm.dbg.declare(metadata ptr %f, metadata !3063, metadata !DIExpression()), !dbg !3064
  store [2 x i64] %2, ptr %out, align 8
  call void @llvm.dbg.declare(metadata ptr %out, metadata !3065, metadata !DIExpression()), !dbg !3066
  store i8 %3, ptr %uppercase, align 1
  call void @llvm.dbg.declare(metadata ptr %uppercase, metadata !3067, metadata !DIExpression()), !dbg !3068
  call void @llvm.dbg.declare(metadata ptr %past_10, metadata !3069, metadata !DIExpression()), !dbg !3070
  %4 = load i8, ptr %uppercase, align 1, !dbg !3071
  %5 = trunc i8 %4 to i1, !dbg !3071
  %ternary = select i1 %5, i8 65, i8 97, !dbg !3072
  %zext = zext i8 %ternary to i32, !dbg !3072
  %sub = sub i32 %zext, 10, !dbg !3071
  %trunc = trunc i32 %sub to i8, !dbg !3071
  store i8 %trunc, ptr %past_10, align 1, !dbg !3071
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3073, metadata !DIExpression()), !dbg !3074
  store i64 0, ptr %len, align 8, !dbg !3075
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3076
  %6 = load i64, ptr %ptradd, align 8, !dbg !3076
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !3078, metadata !DIExpression()), !dbg !3076
  store i64 0, ptr %.anon, align 8, !dbg !3076
  br label %loop.cond, !dbg !3076

loop.cond:                                        ; preds = %noerr_block34, %entry
  %7 = load i64, ptr %.anon, align 8, !dbg !3076
  %lt = icmp ult i64 %7, %6, !dbg !3076
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3076

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3079, metadata !DIExpression()), !dbg !3081
  %ptradd1 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3082
  %8 = load i64, ptr %ptradd1, align 8, !dbg !3082
  %9 = load ptr, ptr %out, align 8, !dbg !3082
  %10 = load i64, ptr %.anon, align 8, !dbg !3082
  %ge = icmp uge i64 %10, %8, !dbg !3082
  %11 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3082
  br i1 %11, label %panic, label %checkok, !dbg !3082

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !3082
  %12 = load i8, ptr %ptradd8, align 1, !dbg !3082
  store i8 %12, ptr %c, align 1, !dbg !3082
  call void @llvm.dbg.declare(metadata ptr %digit, metadata !3083, metadata !DIExpression()), !dbg !3085
  %13 = load i8, ptr %c, align 1, !dbg !3086
  %zext9 = zext i8 %13 to i32, !dbg !3086
  %lshr = lshr i32 %zext9, 4, !dbg !3086
  %14 = freeze i32 %lshr, !dbg !3086
  %trunc10 = trunc i32 %14 to i8, !dbg !3086
  store i8 %trunc10, ptr %digit, align 1, !dbg !3086
  %15 = load i8, ptr %digit, align 1, !dbg !3087
  %zext11 = zext i8 %15 to i32, !dbg !3087
  %16 = load i8, ptr %digit, align 1, !dbg !3088
  %zext12 = zext i8 %16 to i32, !dbg !3088
  %gt = icmp ugt i32 10, %zext12, !dbg !3088
  br i1 %gt, label %cond.lhs, label %cond.rhs, !dbg !3088

cond.lhs:                                         ; preds = %checkok
  br label %cond.phi, !dbg !3089

cond.rhs:                                         ; preds = %checkok
  %17 = load i8, ptr %past_10, align 1, !dbg !3090
  br label %cond.phi, !dbg !3090

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i8 [ 48, %cond.lhs ], [ %17, %cond.rhs ], !dbg !3090
  %zext13 = zext i8 %val to i32, !dbg !3090
  %add = add i32 %zext11, %zext13, !dbg !3087
  %trunc14 = trunc i32 %add to i8, !dbg !3087
  %18 = load ptr, ptr %f, align 8
  %19 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %18, i8 %trunc14), !dbg !3091
  %not_err = icmp eq i64 %19, 0, !dbg !3091
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3091
  br i1 %20, label %after_check, label %assign_optional, !dbg !3091

assign_optional:                                  ; preds = %cond.phi
  store i64 %19, ptr %error_var, align 8, !dbg !3091
  br label %guard_block, !dbg !3091

after_check:                                      ; preds = %cond.phi
  br label %noerr_block, !dbg !3091

guard_block:                                      ; preds = %assign_optional
  %21 = load i64, ptr %error_var, align 8, !dbg !3091
  ret i64 %21, !dbg !3091

noerr_block:                                      ; preds = %after_check
  %22 = load i64, ptr %len, align 8, !dbg !3092
  %add15 = add i64 %22, 1, !dbg !3092
  store i64 %add15, ptr %len, align 8, !dbg !3092
  %23 = load i8, ptr %c, align 1, !dbg !3093
  %zext16 = zext i8 %23 to i32, !dbg !3093
  %and = and i32 %zext16, 15, !dbg !3093
  %trunc17 = trunc i32 %and to i8, !dbg !3093
  store i8 %trunc17, ptr %digit, align 1, !dbg !3093
  %24 = load i8, ptr %digit, align 1, !dbg !3094
  %zext19 = zext i8 %24 to i32, !dbg !3094
  %25 = load i8, ptr %digit, align 1, !dbg !3095
  %zext20 = zext i8 %25 to i32, !dbg !3095
  %gt21 = icmp ugt i32 10, %zext20, !dbg !3095
  br i1 %gt21, label %cond.lhs22, label %cond.rhs23, !dbg !3095

cond.lhs22:                                       ; preds = %noerr_block
  br label %cond.phi24, !dbg !3096

cond.rhs23:                                       ; preds = %noerr_block
  %26 = load i8, ptr %past_10, align 1, !dbg !3097
  br label %cond.phi24, !dbg !3097

cond.phi24:                                       ; preds = %cond.rhs23, %cond.lhs22
  %val25 = phi i8 [ 48, %cond.lhs22 ], [ %26, %cond.rhs23 ], !dbg !3097
  %zext26 = zext i8 %val25 to i32, !dbg !3097
  %add27 = add i32 %zext19, %zext26, !dbg !3094
  %trunc28 = trunc i32 %add27 to i8, !dbg !3094
  %27 = load ptr, ptr %f, align 8
  %28 = call i64 @std.io.Formatter.out(ptr %retparam29, ptr %27, i8 %trunc28), !dbg !3098
  %not_err30 = icmp eq i64 %28, 0, !dbg !3098
  %29 = call i1 @llvm.expect.i1(i1 %not_err30, i1 true), !dbg !3098
  br i1 %29, label %after_check32, label %assign_optional31, !dbg !3098

assign_optional31:                                ; preds = %cond.phi24
  store i64 %28, ptr %error_var18, align 8, !dbg !3098
  br label %guard_block33, !dbg !3098

after_check32:                                    ; preds = %cond.phi24
  br label %noerr_block34, !dbg !3098

guard_block33:                                    ; preds = %assign_optional31
  %30 = load i64, ptr %error_var18, align 8, !dbg !3098
  ret i64 %30, !dbg !3098

noerr_block34:                                    ; preds = %after_check32
  %31 = load i64, ptr %len, align 8, !dbg !3099
  %add35 = add i64 %31, 1, !dbg !3099
  store i64 %add35, ptr %len, align 8, !dbg !3099
  %32 = load i64, ptr %.anon, align 8, !dbg !3076
  %addnuw = add nuw i64 %32, 1, !dbg !3076
  store i64 %addnuw, ptr %.anon, align 8, !dbg !3076
  br label %loop.cond, !dbg !3076

loop.exit:                                        ; preds = %loop.cond
  %33 = load i64, ptr %len, align 8, !dbg !3100
  store i64 %33, ptr %0, align 8, !dbg !3100
  ret i64 0, !dbg !3100

panic:                                            ; preds = %loop.body
  store i64 %8, ptr %taddr, align 8
  %34 = insertvalue %any undef, ptr %taddr, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr2, align 8
  %36 = insertvalue %any undef, ptr %taddr2, 0
  %37 = insertvalue %any %36, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr3, align 8
  %38 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr4, align 8
  %39 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.104, i64 15 }, ptr %taddr5, align 8
  %40 = load [2 x i64], ptr %taddr5, align 8
  store %any %35, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %37, ptr %ptradd6, align 8
  %41 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %41, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %42 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 16, [2 x i64] %42), !dbg !3082
  unreachable, !dbg !3082
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.int_from_any(ptr %0, [2 x i64] %1, ptr %2) #0 !dbg !3101 {
entry:
  %arg = alloca %any, align 8
  %is_neg = alloca ptr, align 8
  %switch = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %reterr10 = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %retparam = alloca i128, align 16
  %taddr44 = alloca %any, align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %switch52 = alloca i64, align 8
  %arg57 = alloca ptr, align 8
  %reterr58 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %arg73 = alloca ptr, align 8
  %val = alloca i32, align 4
  %taddr76 = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %reterr80 = alloca i64, align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"char[]", align 8
  %taddr85 = alloca %"char[]", align 8
  %arg98 = alloca ptr, align 8
  %val99 = alloca i32, align 4
  %taddr102 = alloca %"char[]", align 8
  %taddr103 = alloca %"char[]", align 8
  %taddr104 = alloca %"char[]", align 8
  %reterr107 = alloca i64, align 8
  %taddr110 = alloca %"char[]", align 8
  %taddr111 = alloca %"char[]", align 8
  %taddr112 = alloca %"char[]", align 8
  %arg131 = alloca ptr, align 8
  %val132 = alloca i32, align 4
  %taddr135 = alloca %"char[]", align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr137 = alloca %"char[]", align 8
  %reterr139 = alloca i64, align 8
  %taddr142 = alloca %"char[]", align 8
  %taddr143 = alloca %"char[]", align 8
  %taddr144 = alloca %"char[]", align 8
  %arg163 = alloca ptr, align 8
  %val164 = alloca i64, align 8
  %taddr167 = alloca %"char[]", align 8
  %taddr168 = alloca %"char[]", align 8
  %taddr169 = alloca %"char[]", align 8
  %reterr171 = alloca i64, align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr175 = alloca %"char[]", align 8
  %taddr176 = alloca %"char[]", align 8
  %arg195 = alloca ptr, align 8
  %val196 = alloca i128, align 16
  %taddr199 = alloca %"char[]", align 8
  %taddr200 = alloca %"char[]", align 8
  %taddr201 = alloca %"char[]", align 8
  %reterr203 = alloca i64, align 8
  %taddr206 = alloca %"char[]", align 8
  %taddr207 = alloca %"char[]", align 8
  %taddr208 = alloca %"char[]", align 8
  %arg225 = alloca ptr, align 8
  %reterr226 = alloca i64, align 8
  %taddr229 = alloca %"char[]", align 8
  %taddr230 = alloca %"char[]", align 8
  %taddr231 = alloca %"char[]", align 8
  %arg242 = alloca ptr, align 8
  %reterr243 = alloca i64, align 8
  %taddr246 = alloca %"char[]", align 8
  %taddr247 = alloca %"char[]", align 8
  %taddr248 = alloca %"char[]", align 8
  %arg259 = alloca ptr, align 8
  %reterr260 = alloca i64, align 8
  %taddr263 = alloca %"char[]", align 8
  %taddr264 = alloca %"char[]", align 8
  %taddr265 = alloca %"char[]", align 8
  %arg276 = alloca ptr, align 8
  %reterr277 = alloca i64, align 8
  %taddr280 = alloca %"char[]", align 8
  %taddr281 = alloca %"char[]", align 8
  %taddr282 = alloca %"char[]", align 8
  %arg293 = alloca ptr, align 8
  %reterr294 = alloca i64, align 8
  %taddr297 = alloca %"char[]", align 8
  %taddr298 = alloca %"char[]", align 8
  %taddr299 = alloca %"char[]", align 8
  %arg309 = alloca ptr, align 8
  %f = alloca float, align 4
  %taddr312 = alloca %"char[]", align 8
  %taddr313 = alloca %"char[]", align 8
  %taddr314 = alloca %"char[]", align 8
  %reterr316 = alloca i64, align 8
  %taddr319 = alloca %"char[]", align 8
  %taddr320 = alloca %"char[]", align 8
  %taddr321 = alloca %"char[]", align 8
  %arg336 = alloca ptr, align 8
  %d = alloca double, align 8
  %taddr339 = alloca %"char[]", align 8
  %taddr340 = alloca %"char[]", align 8
  %taddr341 = alloca %"char[]", align 8
  %reterr343 = alloca i64, align 8
  %taddr346 = alloca %"char[]", align 8
  %taddr347 = alloca %"char[]", align 8
  %taddr348 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3106, metadata !DIExpression()), !dbg !3107
  store ptr %2, ptr %is_neg, align 8
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !3108, metadata !DIExpression()), !dbg !3109
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3110
  %3 = load i64, ptr %ptradd, align 8, !dbg !3110
  %"introspect*" = inttoptr i64 %3 to ptr, !dbg !3110
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3110
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %entry
  %4 = load i8, ptr %switch, align 1
  switch i8 %4, label %switch.default [
    i8 19, label %switch.case
    i8 18, label %switch.case9
    i8 8, label %switch.case9
  ]

switch.case:                                      ; preds = %switch.entry
  %5 = load ptr, ptr %is_neg, align 8, !dbg !3112
  %checknull = icmp eq ptr %5, null, !dbg !3112
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3112
  br i1 %6, label %panic, label %checkok, !dbg !3112

checkok:                                          ; preds = %switch.case
  store i8 0, ptr %5, align 1, !dbg !3114
  %7 = load ptr, ptr %arg, align 8, !dbg !3115
  %checknull3 = icmp eq ptr %7, null, !dbg !3115
  %8 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !3115
  br i1 %8, label %panic4, label %checkok8, !dbg !3115

checkok8:                                         ; preds = %checkok
  %9 = load ptr, ptr %7, align 8, !dbg !3116
  %ptrxi = ptrtoint ptr %9 to i64, !dbg !3116
  %zext = zext i64 %ptrxi to i128, !dbg !3116
  store i128 %zext, ptr %0, align 16, !dbg !3116
  ret i64 0, !dbg !3116

switch.case9:                                     ; preds = %switch.entry, %switch.entry
  store ptr %arg, ptr %self, align 8
  %10 = load ptr, ptr %self, align 8, !dbg !3117
  %checknull11 = icmp eq ptr %10, null, !dbg !3117
  %11 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !3117
  br i1 %11, label %panic12, label %checkok16, !dbg !3117

checkok16:                                        ; preds = %switch.case9
  %12 = load ptr, ptr %10, align 8, !dbg !3117
  %13 = load ptr, ptr %self, align 8, !dbg !3121
  %checknull17 = icmp eq ptr %13, null, !dbg !3121
  %14 = call i1 @llvm.expect.i1(i1 %checknull17, i1 false), !dbg !3121
  br i1 %14, label %panic18, label %checkok22, !dbg !3121

checkok22:                                        ; preds = %checkok16
  %ptradd23 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !3121
  %15 = load i64, ptr %ptradd23, align 8, !dbg !3121
  %"introspect*24" = inttoptr i64 %15 to ptr, !dbg !3121
  %typeid.kind25 = load i8, ptr %"introspect*24", align 8, !dbg !3121
  %eq = icmp eq i8 %typeid.kind25, 15, !dbg !3121
  br i1 %eq, label %check_type_ok, label %check_next, !dbg !3121

check_next:                                       ; preds = %checkok22
  %eq26 = icmp eq i8 %typeid.kind25, 19, !dbg !3121
  br i1 %eq26, label %check_type_ok, label %check_next27, !dbg !3121

check_next27:                                     ; preds = %check_next
  %eq28 = icmp eq i8 %typeid.kind25, 17, !dbg !3121
  br i1 %eq28, label %check_type_ok, label %check_next29, !dbg !3121

check_next29:                                     ; preds = %check_next27
  %eq30 = icmp eq i8 %typeid.kind25, 8, !dbg !3121
  br i1 %eq30, label %check_type_ok, label %check_next31, !dbg !3121

check_next31:                                     ; preds = %check_next29
  %eq32 = icmp eq i8 %typeid.kind25, 16, !dbg !3121
  br i1 %eq32, label %check_type_ok, label %check_next33, !dbg !3121

check_next33:                                     ; preds = %check_next31
  %eq34 = icmp eq i8 %typeid.kind25, 18, !dbg !3121
  br i1 %eq34, label %check_type_ok, label %check_next35, !dbg !3121

check_next35:                                     ; preds = %check_next33
  %eq36 = icmp eq i8 %typeid.kind25, 14, !dbg !3121
  br i1 %eq36, label %check_type_ok, label %check_next37, !dbg !3121

check_next37:                                     ; preds = %check_next35
  %eq38 = icmp eq i8 %typeid.kind25, 12, !dbg !3121
  br i1 %eq38, label %check_type_ok, label %check_next39, !dbg !3121

check_next39:                                     ; preds = %check_next37
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr40, align 8
  %16 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr41, align 8
  %17 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr42, align 8
  %18 = load [2 x i64], ptr %taddr42, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 200), !dbg !3121
  unreachable, !dbg !3121

check_type_ok:                                    ; preds = %check_next37, %check_next35, %check_next33, %check_next31, %check_next29, %check_next27, %check_next, %checkok22
  %ptradd43 = getelementptr inbounds i8, ptr %"introspect*24", i64 32, !dbg !3121
  %typeid.inner = load i64, ptr %ptradd43, align 8, !dbg !3121
  %20 = insertvalue %any undef, ptr %12, 0, !dbg !3121
  %21 = insertvalue %any %20, i64 %typeid.inner, 1, !dbg !3121
  store %any %21, ptr %taddr44, align 8
  %22 = load [2 x i64], ptr %taddr44, align 8
  %23 = load ptr, ptr %is_neg, align 8
  %24 = call i64 @std.io.int_from_any(ptr %retparam, [2 x i64] %22, ptr %23), !dbg !3122
  %not_err = icmp eq i64 %24, 0, !dbg !3122
  %25 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3122
  br i1 %25, label %after_check, label %assign_optional, !dbg !3122

assign_optional:                                  ; preds = %check_type_ok
  store i64 %24, ptr %reterr10, align 8, !dbg !3122
  br label %err_retblock, !dbg !3122

after_check:                                      ; preds = %check_type_ok
  %26 = load i128, ptr %retparam, align 16, !dbg !3122
  store i128 %26, ptr %0, align 16, !dbg !3122
  ret i64 0, !dbg !3122

err_retblock:                                     ; preds = %assign_optional
  %27 = load i64, ptr %reterr10, align 8, !dbg !3122
  ret i64 %27, !dbg !3122

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !3123

switch.exit:                                      ; preds = %switch.default
  %28 = load ptr, ptr %is_neg, align 8, !dbg !3125
  %checknull45 = icmp eq ptr %28, null, !dbg !3125
  %29 = call i1 @llvm.expect.i1(i1 %checknull45, i1 false), !dbg !3125
  br i1 %29, label %panic46, label %checkok50, !dbg !3125

checkok50:                                        ; preds = %switch.exit
  store i8 0, ptr %28, align 1, !dbg !3126
  %ptradd51 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3127
  %30 = load i64, ptr %ptradd51, align 8
  store i64 %30, ptr %switch52, align 8
  br label %switch.entry53

switch.entry53:                                   ; preds = %checkok50
  %31 = load i64, ptr %switch52, align 8
  br label %check_subtype, !dbg !3129

check_subtype:                                    ; preds = %parent_type_block, %switch.entry53
  %32 = phi i64 [ %31, %switch.entry53 ], [ %typeid.parent, %parent_type_block ], !dbg !3129
  %eq54 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %32, !dbg !3129
  br i1 %eq54, label %result_block, label %parent_type_block, !dbg !3129

parent_type_block:                                ; preds = %check_subtype
  %33 = inttoptr i64 %32 to ptr, !dbg !3129
  %ptradd55 = getelementptr inbounds i8, ptr %33, i64 8, !dbg !3129
  %typeid.parent = load i64, ptr %ptradd55, align 8, !dbg !3129
  %34 = icmp eq i64 %typeid.parent, 0, !dbg !3129
  br i1 %34, label %result_block, label %check_subtype, !dbg !3129

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %35 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3129
  br i1 %35, label %switch.case56, label %next_if, !dbg !3129

switch.case56:                                    ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %arg57, metadata !3130, metadata !DIExpression()), !dbg !3132
  %36 = load ptr, ptr %arg, align 8, !dbg !3132
  store ptr %36, ptr %arg57, align 8, !dbg !3132
  %37 = load ptr, ptr %arg57, align 8, !dbg !3133
  %checknull59 = icmp eq ptr %37, null, !dbg !3133
  %38 = call i1 @llvm.expect.i1(i1 %checknull59, i1 false), !dbg !3133
  br i1 %38, label %panic60, label %checkok64, !dbg !3133

checkok64:                                        ; preds = %switch.case56
  %39 = load i8, ptr %37, align 1, !dbg !3133
  %40 = trunc i8 %39 to i1, !dbg !3133
  %zext65 = zext i1 %40 to i128, !dbg !3133
  store i128 %zext65, ptr %0, align 16, !dbg !3133
  ret i64 0, !dbg !3133

next_if:                                          ; preds = %result_block
  br label %check_subtype66, !dbg !3134

check_subtype66:                                  ; preds = %parent_type_block68, %next_if
  %41 = phi i64 [ %31, %next_if ], [ %typeid.parent70, %parent_type_block68 ], !dbg !3134
  %eq67 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %41, !dbg !3134
  br i1 %eq67, label %result_block71, label %parent_type_block68, !dbg !3134

parent_type_block68:                              ; preds = %check_subtype66
  %42 = inttoptr i64 %41 to ptr, !dbg !3134
  %ptradd69 = getelementptr inbounds i8, ptr %42, i64 8, !dbg !3134
  %typeid.parent70 = load i64, ptr %ptradd69, align 8, !dbg !3134
  %43 = icmp eq i64 %typeid.parent70, 0, !dbg !3134
  br i1 %43, label %result_block71, label %check_subtype66, !dbg !3134

result_block71:                                   ; preds = %parent_type_block68, %check_subtype66
  %44 = phi i1 [ false, %parent_type_block68 ], [ true, %check_subtype66 ], !dbg !3134
  br i1 %44, label %switch.case72, label %next_if90, !dbg !3134

switch.case72:                                    ; preds = %result_block71
  call void @llvm.dbg.declare(metadata ptr %arg73, metadata !3135, metadata !DIExpression()), !dbg !3138
  %45 = load ptr, ptr %arg, align 8, !dbg !3138
  store ptr %45, ptr %arg73, align 8, !dbg !3138
  call void @llvm.dbg.declare(metadata ptr %val, metadata !3139, metadata !DIExpression()), !dbg !3140
  %46 = load ptr, ptr %arg73, align 8, !dbg !3141
  %checknull74 = icmp eq ptr %46, null, !dbg !3141
  %47 = call i1 @llvm.expect.i1(i1 %checknull74, i1 false), !dbg !3141
  br i1 %47, label %panic75, label %checkok79, !dbg !3141

checkok79:                                        ; preds = %switch.case72
  %48 = load i8, ptr %46, align 1, !dbg !3141
  %sext = sext i8 %48 to i32, !dbg !3141
  store i32 %sext, ptr %val, align 4, !dbg !3141
  %49 = load ptr, ptr %is_neg, align 8, !dbg !3142
  %checknull81 = icmp eq ptr %49, null, !dbg !3142
  %50 = call i1 @llvm.expect.i1(i1 %checknull81, i1 false), !dbg !3142
  br i1 %50, label %panic82, label %checkok86, !dbg !3142

checkok86:                                        ; preds = %checkok79
  %51 = load i32, ptr %val, align 4, !dbg !3143
  %lt = icmp slt i32 %51, 0, !dbg !3143
  %52 = zext i1 %lt to i8, !dbg !3143
  store i8 %52, ptr %49, align 1, !dbg !3143
  %53 = trunc i8 %52 to i1, !dbg !3143
  br i1 %53, label %cond.lhs, label %cond.rhs, !dbg !3143

cond.lhs:                                         ; preds = %checkok86
  %54 = load i32, ptr %val, align 4, !dbg !3144
  %sext87 = sext i32 %54 to i128, !dbg !3144
  %bnot = xor i128 %sext87, -1, !dbg !3144
  %add = add i128 %bnot, 1, !dbg !3145
  br label %cond.phi, !dbg !3145

cond.rhs:                                         ; preds = %checkok86
  %55 = load i32, ptr %val, align 4, !dbg !3146
  %sext88 = sext i32 %55 to i128, !dbg !3146
  br label %cond.phi, !dbg !3146

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val89 = phi i128 [ %add, %cond.lhs ], [ %sext88, %cond.rhs ], !dbg !3146
  store i128 %val89, ptr %0, align 16, !dbg !3146
  ret i64 0, !dbg !3146

next_if90:                                        ; preds = %result_block71
  br label %check_subtype91, !dbg !3147

check_subtype91:                                  ; preds = %parent_type_block93, %next_if90
  %56 = phi i64 [ %31, %next_if90 ], [ %typeid.parent95, %parent_type_block93 ], !dbg !3147
  %eq92 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %56, !dbg !3147
  br i1 %eq92, label %result_block96, label %parent_type_block93, !dbg !3147

parent_type_block93:                              ; preds = %check_subtype91
  %57 = inttoptr i64 %56 to ptr, !dbg !3147
  %ptradd94 = getelementptr inbounds i8, ptr %57, i64 8, !dbg !3147
  %typeid.parent95 = load i64, ptr %ptradd94, align 8, !dbg !3147
  %58 = icmp eq i64 %typeid.parent95, 0, !dbg !3147
  br i1 %58, label %result_block96, label %check_subtype91, !dbg !3147

result_block96:                                   ; preds = %parent_type_block93, %check_subtype91
  %59 = phi i1 [ false, %parent_type_block93 ], [ true, %check_subtype91 ], !dbg !3147
  br i1 %59, label %switch.case97, label %next_if123, !dbg !3147

switch.case97:                                    ; preds = %result_block96
  call void @llvm.dbg.declare(metadata ptr %arg98, metadata !3148, metadata !DIExpression()), !dbg !3151
  %60 = load ptr, ptr %arg, align 8, !dbg !3151
  store ptr %60, ptr %arg98, align 8, !dbg !3151
  call void @llvm.dbg.declare(metadata ptr %val99, metadata !3152, metadata !DIExpression()), !dbg !3153
  %61 = load ptr, ptr %arg98, align 8, !dbg !3154
  %checknull100 = icmp eq ptr %61, null, !dbg !3154
  %62 = call i1 @llvm.expect.i1(i1 %checknull100, i1 false), !dbg !3154
  br i1 %62, label %panic101, label %checkok105, !dbg !3154

checkok105:                                       ; preds = %switch.case97
  %63 = load i16, ptr %61, align 2, !dbg !3154
  %sext106 = sext i16 %63 to i32, !dbg !3154
  store i32 %sext106, ptr %val99, align 4, !dbg !3154
  %64 = load ptr, ptr %is_neg, align 8, !dbg !3155
  %checknull108 = icmp eq ptr %64, null, !dbg !3155
  %65 = call i1 @llvm.expect.i1(i1 %checknull108, i1 false), !dbg !3155
  br i1 %65, label %panic109, label %checkok113, !dbg !3155

checkok113:                                       ; preds = %checkok105
  %66 = load i32, ptr %val99, align 4, !dbg !3156
  %lt114 = icmp slt i32 %66, 0, !dbg !3156
  %67 = zext i1 %lt114 to i8, !dbg !3156
  store i8 %67, ptr %64, align 1, !dbg !3156
  %68 = trunc i8 %67 to i1, !dbg !3156
  br i1 %68, label %cond.lhs115, label %cond.rhs119, !dbg !3156

cond.lhs115:                                      ; preds = %checkok113
  %69 = load i32, ptr %val99, align 4, !dbg !3157
  %sext116 = sext i32 %69 to i128, !dbg !3157
  %bnot117 = xor i128 %sext116, -1, !dbg !3157
  %add118 = add i128 %bnot117, 1, !dbg !3158
  br label %cond.phi121, !dbg !3158

cond.rhs119:                                      ; preds = %checkok113
  %70 = load i32, ptr %val99, align 4, !dbg !3159
  %sext120 = sext i32 %70 to i128, !dbg !3159
  br label %cond.phi121, !dbg !3159

cond.phi121:                                      ; preds = %cond.rhs119, %cond.lhs115
  %val122 = phi i128 [ %add118, %cond.lhs115 ], [ %sext120, %cond.rhs119 ], !dbg !3159
  store i128 %val122, ptr %0, align 16, !dbg !3159
  ret i64 0, !dbg !3159

next_if123:                                       ; preds = %result_block96
  br label %check_subtype124, !dbg !3160

check_subtype124:                                 ; preds = %parent_type_block126, %next_if123
  %71 = phi i64 [ %31, %next_if123 ], [ %typeid.parent128, %parent_type_block126 ], !dbg !3160
  %eq125 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %71, !dbg !3160
  br i1 %eq125, label %result_block129, label %parent_type_block126, !dbg !3160

parent_type_block126:                             ; preds = %check_subtype124
  %72 = inttoptr i64 %71 to ptr, !dbg !3160
  %ptradd127 = getelementptr inbounds i8, ptr %72, i64 8, !dbg !3160
  %typeid.parent128 = load i64, ptr %ptradd127, align 8, !dbg !3160
  %73 = icmp eq i64 %typeid.parent128, 0, !dbg !3160
  br i1 %73, label %result_block129, label %check_subtype124, !dbg !3160

result_block129:                                  ; preds = %parent_type_block126, %check_subtype124
  %74 = phi i1 [ false, %parent_type_block126 ], [ true, %check_subtype124 ], !dbg !3160
  br i1 %74, label %switch.case130, label %next_if155, !dbg !3160

switch.case130:                                   ; preds = %result_block129
  call void @llvm.dbg.declare(metadata ptr %arg131, metadata !3161, metadata !DIExpression()), !dbg !3164
  %75 = load ptr, ptr %arg, align 8, !dbg !3164
  store ptr %75, ptr %arg131, align 8, !dbg !3164
  call void @llvm.dbg.declare(metadata ptr %val132, metadata !3165, metadata !DIExpression()), !dbg !3166
  %76 = load ptr, ptr %arg131, align 8, !dbg !3167
  %checknull133 = icmp eq ptr %76, null, !dbg !3167
  %77 = call i1 @llvm.expect.i1(i1 %checknull133, i1 false), !dbg !3167
  br i1 %77, label %panic134, label %checkok138, !dbg !3167

checkok138:                                       ; preds = %switch.case130
  %78 = load i32, ptr %76, align 4, !dbg !3167
  store i32 %78, ptr %val132, align 4, !dbg !3167
  %79 = load ptr, ptr %is_neg, align 8, !dbg !3168
  %checknull140 = icmp eq ptr %79, null, !dbg !3168
  %80 = call i1 @llvm.expect.i1(i1 %checknull140, i1 false), !dbg !3168
  br i1 %80, label %panic141, label %checkok145, !dbg !3168

checkok145:                                       ; preds = %checkok138
  %81 = load i32, ptr %val132, align 4, !dbg !3169
  %lt146 = icmp slt i32 %81, 0, !dbg !3169
  %82 = zext i1 %lt146 to i8, !dbg !3169
  store i8 %82, ptr %79, align 1, !dbg !3169
  %83 = trunc i8 %82 to i1, !dbg !3169
  br i1 %83, label %cond.lhs147, label %cond.rhs151, !dbg !3169

cond.lhs147:                                      ; preds = %checkok145
  %84 = load i32, ptr %val132, align 4, !dbg !3170
  %sext148 = sext i32 %84 to i128, !dbg !3170
  %bnot149 = xor i128 %sext148, -1, !dbg !3170
  %add150 = add i128 %bnot149, 1, !dbg !3171
  br label %cond.phi153, !dbg !3171

cond.rhs151:                                      ; preds = %checkok145
  %85 = load i32, ptr %val132, align 4, !dbg !3172
  %sext152 = sext i32 %85 to i128, !dbg !3172
  br label %cond.phi153, !dbg !3172

cond.phi153:                                      ; preds = %cond.rhs151, %cond.lhs147
  %val154 = phi i128 [ %add150, %cond.lhs147 ], [ %sext152, %cond.rhs151 ], !dbg !3172
  store i128 %val154, ptr %0, align 16, !dbg !3172
  ret i64 0, !dbg !3172

next_if155:                                       ; preds = %result_block129
  br label %check_subtype156, !dbg !3173

check_subtype156:                                 ; preds = %parent_type_block158, %next_if155
  %86 = phi i64 [ %31, %next_if155 ], [ %typeid.parent160, %parent_type_block158 ], !dbg !3173
  %eq157 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %86, !dbg !3173
  br i1 %eq157, label %result_block161, label %parent_type_block158, !dbg !3173

parent_type_block158:                             ; preds = %check_subtype156
  %87 = inttoptr i64 %86 to ptr, !dbg !3173
  %ptradd159 = getelementptr inbounds i8, ptr %87, i64 8, !dbg !3173
  %typeid.parent160 = load i64, ptr %ptradd159, align 8, !dbg !3173
  %88 = icmp eq i64 %typeid.parent160, 0, !dbg !3173
  br i1 %88, label %result_block161, label %check_subtype156, !dbg !3173

result_block161:                                  ; preds = %parent_type_block158, %check_subtype156
  %89 = phi i1 [ false, %parent_type_block158 ], [ true, %check_subtype156 ], !dbg !3173
  br i1 %89, label %switch.case162, label %next_if187, !dbg !3173

switch.case162:                                   ; preds = %result_block161
  call void @llvm.dbg.declare(metadata ptr %arg163, metadata !3174, metadata !DIExpression()), !dbg !3177
  %90 = load ptr, ptr %arg, align 8, !dbg !3177
  store ptr %90, ptr %arg163, align 8, !dbg !3177
  call void @llvm.dbg.declare(metadata ptr %val164, metadata !3178, metadata !DIExpression()), !dbg !3179
  %91 = load ptr, ptr %arg163, align 8, !dbg !3180
  %checknull165 = icmp eq ptr %91, null, !dbg !3180
  %92 = call i1 @llvm.expect.i1(i1 %checknull165, i1 false), !dbg !3180
  br i1 %92, label %panic166, label %checkok170, !dbg !3180

checkok170:                                       ; preds = %switch.case162
  %93 = load i64, ptr %91, align 8, !dbg !3180
  store i64 %93, ptr %val164, align 8, !dbg !3180
  %94 = load ptr, ptr %is_neg, align 8, !dbg !3181
  %checknull172 = icmp eq ptr %94, null, !dbg !3181
  %95 = call i1 @llvm.expect.i1(i1 %checknull172, i1 false), !dbg !3181
  br i1 %95, label %panic173, label %checkok177, !dbg !3181

checkok177:                                       ; preds = %checkok170
  %96 = load i64, ptr %val164, align 8, !dbg !3182
  %lt178 = icmp slt i64 %96, 0, !dbg !3182
  %97 = zext i1 %lt178 to i8, !dbg !3182
  store i8 %97, ptr %94, align 1, !dbg !3182
  %98 = trunc i8 %97 to i1, !dbg !3182
  br i1 %98, label %cond.lhs179, label %cond.rhs183, !dbg !3182

cond.lhs179:                                      ; preds = %checkok177
  %99 = load i64, ptr %val164, align 8, !dbg !3183
  %sext180 = sext i64 %99 to i128, !dbg !3183
  %bnot181 = xor i128 %sext180, -1, !dbg !3183
  %add182 = add i128 %bnot181, 1, !dbg !3184
  br label %cond.phi185, !dbg !3184

cond.rhs183:                                      ; preds = %checkok177
  %100 = load i64, ptr %val164, align 8, !dbg !3185
  %sext184 = sext i64 %100 to i128, !dbg !3185
  br label %cond.phi185, !dbg !3185

cond.phi185:                                      ; preds = %cond.rhs183, %cond.lhs179
  %val186 = phi i128 [ %add182, %cond.lhs179 ], [ %sext184, %cond.rhs183 ], !dbg !3185
  store i128 %val186, ptr %0, align 16, !dbg !3185
  ret i64 0, !dbg !3185

next_if187:                                       ; preds = %result_block161
  br label %check_subtype188, !dbg !3186

check_subtype188:                                 ; preds = %parent_type_block190, %next_if187
  %101 = phi i64 [ %31, %next_if187 ], [ %typeid.parent192, %parent_type_block190 ], !dbg !3186
  %eq189 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %101, !dbg !3186
  br i1 %eq189, label %result_block193, label %parent_type_block190, !dbg !3186

parent_type_block190:                             ; preds = %check_subtype188
  %102 = inttoptr i64 %101 to ptr, !dbg !3186
  %ptradd191 = getelementptr inbounds i8, ptr %102, i64 8, !dbg !3186
  %typeid.parent192 = load i64, ptr %ptradd191, align 8, !dbg !3186
  %103 = icmp eq i64 %typeid.parent192, 0, !dbg !3186
  br i1 %103, label %result_block193, label %check_subtype188, !dbg !3186

result_block193:                                  ; preds = %parent_type_block190, %check_subtype188
  %104 = phi i1 [ false, %parent_type_block190 ], [ true, %check_subtype188 ], !dbg !3186
  br i1 %104, label %switch.case194, label %next_if217, !dbg !3186

switch.case194:                                   ; preds = %result_block193
  call void @llvm.dbg.declare(metadata ptr %arg195, metadata !3187, metadata !DIExpression()), !dbg !3190
  %105 = load ptr, ptr %arg, align 8, !dbg !3190
  store ptr %105, ptr %arg195, align 8, !dbg !3190
  call void @llvm.dbg.declare(metadata ptr %val196, metadata !3191, metadata !DIExpression()), !dbg !3192
  %106 = load ptr, ptr %arg195, align 8, !dbg !3193
  %checknull197 = icmp eq ptr %106, null, !dbg !3193
  %107 = call i1 @llvm.expect.i1(i1 %checknull197, i1 false), !dbg !3193
  br i1 %107, label %panic198, label %checkok202, !dbg !3193

checkok202:                                       ; preds = %switch.case194
  %108 = load i128, ptr %106, align 16, !dbg !3193
  store i128 %108, ptr %val196, align 16, !dbg !3193
  %109 = load ptr, ptr %is_neg, align 8, !dbg !3194
  %checknull204 = icmp eq ptr %109, null, !dbg !3194
  %110 = call i1 @llvm.expect.i1(i1 %checknull204, i1 false), !dbg !3194
  br i1 %110, label %panic205, label %checkok209, !dbg !3194

checkok209:                                       ; preds = %checkok202
  %111 = load i128, ptr %val196, align 16, !dbg !3195
  %lt210 = icmp slt i128 %111, 0, !dbg !3195
  %112 = zext i1 %lt210 to i8, !dbg !3195
  store i8 %112, ptr %109, align 1, !dbg !3195
  %113 = trunc i8 %112 to i1, !dbg !3195
  br i1 %113, label %cond.lhs211, label %cond.rhs214, !dbg !3195

cond.lhs211:                                      ; preds = %checkok209
  %114 = load i128, ptr %val196, align 16, !dbg !3196
  %bnot212 = xor i128 %114, -1, !dbg !3196
  %add213 = add i128 %bnot212, 1, !dbg !3197
  br label %cond.phi215, !dbg !3197

cond.rhs214:                                      ; preds = %checkok209
  %115 = load i128, ptr %val196, align 16, !dbg !3198
  br label %cond.phi215, !dbg !3198

cond.phi215:                                      ; preds = %cond.rhs214, %cond.lhs211
  %val216 = phi i128 [ %add213, %cond.lhs211 ], [ %115, %cond.rhs214 ], !dbg !3198
  store i128 %val216, ptr %0, align 16, !dbg !3198
  ret i64 0, !dbg !3198

next_if217:                                       ; preds = %result_block193
  br label %check_subtype218, !dbg !3199

check_subtype218:                                 ; preds = %parent_type_block220, %next_if217
  %116 = phi i64 [ %31, %next_if217 ], [ %typeid.parent222, %parent_type_block220 ], !dbg !3199
  %eq219 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %116, !dbg !3199
  br i1 %eq219, label %result_block223, label %parent_type_block220, !dbg !3199

parent_type_block220:                             ; preds = %check_subtype218
  %117 = inttoptr i64 %116 to ptr, !dbg !3199
  %ptradd221 = getelementptr inbounds i8, ptr %117, i64 8, !dbg !3199
  %typeid.parent222 = load i64, ptr %ptradd221, align 8, !dbg !3199
  %118 = icmp eq i64 %typeid.parent222, 0, !dbg !3199
  br i1 %118, label %result_block223, label %check_subtype218, !dbg !3199

result_block223:                                  ; preds = %parent_type_block220, %check_subtype218
  %119 = phi i1 [ false, %parent_type_block220 ], [ true, %check_subtype218 ], !dbg !3199
  br i1 %119, label %switch.case224, label %next_if234, !dbg !3199

switch.case224:                                   ; preds = %result_block223
  call void @llvm.dbg.declare(metadata ptr %arg225, metadata !3200, metadata !DIExpression()), !dbg !3202
  %120 = load ptr, ptr %arg, align 8, !dbg !3202
  store ptr %120, ptr %arg225, align 8, !dbg !3202
  %121 = load ptr, ptr %arg225, align 8, !dbg !3203
  %checknull227 = icmp eq ptr %121, null, !dbg !3203
  %122 = call i1 @llvm.expect.i1(i1 %checknull227, i1 false), !dbg !3203
  br i1 %122, label %panic228, label %checkok232, !dbg !3203

checkok232:                                       ; preds = %switch.case224
  %123 = load i8, ptr %121, align 1, !dbg !3203
  %zext233 = zext i8 %123 to i128, !dbg !3203
  store i128 %zext233, ptr %0, align 16, !dbg !3203
  ret i64 0, !dbg !3203

next_if234:                                       ; preds = %result_block223
  br label %check_subtype235, !dbg !3204

check_subtype235:                                 ; preds = %parent_type_block237, %next_if234
  %124 = phi i64 [ %31, %next_if234 ], [ %typeid.parent239, %parent_type_block237 ], !dbg !3204
  %eq236 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %124, !dbg !3204
  br i1 %eq236, label %result_block240, label %parent_type_block237, !dbg !3204

parent_type_block237:                             ; preds = %check_subtype235
  %125 = inttoptr i64 %124 to ptr, !dbg !3204
  %ptradd238 = getelementptr inbounds i8, ptr %125, i64 8, !dbg !3204
  %typeid.parent239 = load i64, ptr %ptradd238, align 8, !dbg !3204
  %126 = icmp eq i64 %typeid.parent239, 0, !dbg !3204
  br i1 %126, label %result_block240, label %check_subtype235, !dbg !3204

result_block240:                                  ; preds = %parent_type_block237, %check_subtype235
  %127 = phi i1 [ false, %parent_type_block237 ], [ true, %check_subtype235 ], !dbg !3204
  br i1 %127, label %switch.case241, label %next_if251, !dbg !3204

switch.case241:                                   ; preds = %result_block240
  call void @llvm.dbg.declare(metadata ptr %arg242, metadata !3205, metadata !DIExpression()), !dbg !3208
  %128 = load ptr, ptr %arg, align 8, !dbg !3208
  store ptr %128, ptr %arg242, align 8, !dbg !3208
  %129 = load ptr, ptr %arg242, align 8, !dbg !3209
  %checknull244 = icmp eq ptr %129, null, !dbg !3209
  %130 = call i1 @llvm.expect.i1(i1 %checknull244, i1 false), !dbg !3209
  br i1 %130, label %panic245, label %checkok249, !dbg !3209

checkok249:                                       ; preds = %switch.case241
  %131 = load i16, ptr %129, align 2, !dbg !3209
  %zext250 = zext i16 %131 to i128, !dbg !3209
  store i128 %zext250, ptr %0, align 16, !dbg !3209
  ret i64 0, !dbg !3209

next_if251:                                       ; preds = %result_block240
  br label %check_subtype252, !dbg !3210

check_subtype252:                                 ; preds = %parent_type_block254, %next_if251
  %132 = phi i64 [ %31, %next_if251 ], [ %typeid.parent256, %parent_type_block254 ], !dbg !3210
  %eq253 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %132, !dbg !3210
  br i1 %eq253, label %result_block257, label %parent_type_block254, !dbg !3210

parent_type_block254:                             ; preds = %check_subtype252
  %133 = inttoptr i64 %132 to ptr, !dbg !3210
  %ptradd255 = getelementptr inbounds i8, ptr %133, i64 8, !dbg !3210
  %typeid.parent256 = load i64, ptr %ptradd255, align 8, !dbg !3210
  %134 = icmp eq i64 %typeid.parent256, 0, !dbg !3210
  br i1 %134, label %result_block257, label %check_subtype252, !dbg !3210

result_block257:                                  ; preds = %parent_type_block254, %check_subtype252
  %135 = phi i1 [ false, %parent_type_block254 ], [ true, %check_subtype252 ], !dbg !3210
  br i1 %135, label %switch.case258, label %next_if268, !dbg !3210

switch.case258:                                   ; preds = %result_block257
  call void @llvm.dbg.declare(metadata ptr %arg259, metadata !3211, metadata !DIExpression()), !dbg !3213
  %136 = load ptr, ptr %arg, align 8, !dbg !3213
  store ptr %136, ptr %arg259, align 8, !dbg !3213
  %137 = load ptr, ptr %arg259, align 8, !dbg !3214
  %checknull261 = icmp eq ptr %137, null, !dbg !3214
  %138 = call i1 @llvm.expect.i1(i1 %checknull261, i1 false), !dbg !3214
  br i1 %138, label %panic262, label %checkok266, !dbg !3214

checkok266:                                       ; preds = %switch.case258
  %139 = load i32, ptr %137, align 4, !dbg !3214
  %zext267 = zext i32 %139 to i128, !dbg !3214
  store i128 %zext267, ptr %0, align 16, !dbg !3214
  ret i64 0, !dbg !3214

next_if268:                                       ; preds = %result_block257
  br label %check_subtype269, !dbg !3215

check_subtype269:                                 ; preds = %parent_type_block271, %next_if268
  %140 = phi i64 [ %31, %next_if268 ], [ %typeid.parent273, %parent_type_block271 ], !dbg !3215
  %eq270 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %140, !dbg !3215
  br i1 %eq270, label %result_block274, label %parent_type_block271, !dbg !3215

parent_type_block271:                             ; preds = %check_subtype269
  %141 = inttoptr i64 %140 to ptr, !dbg !3215
  %ptradd272 = getelementptr inbounds i8, ptr %141, i64 8, !dbg !3215
  %typeid.parent273 = load i64, ptr %ptradd272, align 8, !dbg !3215
  %142 = icmp eq i64 %typeid.parent273, 0, !dbg !3215
  br i1 %142, label %result_block274, label %check_subtype269, !dbg !3215

result_block274:                                  ; preds = %parent_type_block271, %check_subtype269
  %143 = phi i1 [ false, %parent_type_block271 ], [ true, %check_subtype269 ], !dbg !3215
  br i1 %143, label %switch.case275, label %next_if285, !dbg !3215

switch.case275:                                   ; preds = %result_block274
  call void @llvm.dbg.declare(metadata ptr %arg276, metadata !3216, metadata !DIExpression()), !dbg !3219
  %144 = load ptr, ptr %arg, align 8, !dbg !3219
  store ptr %144, ptr %arg276, align 8, !dbg !3219
  %145 = load ptr, ptr %arg276, align 8, !dbg !3220
  %checknull278 = icmp eq ptr %145, null, !dbg !3220
  %146 = call i1 @llvm.expect.i1(i1 %checknull278, i1 false), !dbg !3220
  br i1 %146, label %panic279, label %checkok283, !dbg !3220

checkok283:                                       ; preds = %switch.case275
  %147 = load i64, ptr %145, align 8, !dbg !3220
  %zext284 = zext i64 %147 to i128, !dbg !3220
  store i128 %zext284, ptr %0, align 16, !dbg !3220
  ret i64 0, !dbg !3220

next_if285:                                       ; preds = %result_block274
  br label %check_subtype286, !dbg !3221

check_subtype286:                                 ; preds = %parent_type_block288, %next_if285
  %148 = phi i64 [ %31, %next_if285 ], [ %typeid.parent290, %parent_type_block288 ], !dbg !3221
  %eq287 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %148, !dbg !3221
  br i1 %eq287, label %result_block291, label %parent_type_block288, !dbg !3221

parent_type_block288:                             ; preds = %check_subtype286
  %149 = inttoptr i64 %148 to ptr, !dbg !3221
  %ptradd289 = getelementptr inbounds i8, ptr %149, i64 8, !dbg !3221
  %typeid.parent290 = load i64, ptr %ptradd289, align 8, !dbg !3221
  %150 = icmp eq i64 %typeid.parent290, 0, !dbg !3221
  br i1 %150, label %result_block291, label %check_subtype286, !dbg !3221

result_block291:                                  ; preds = %parent_type_block288, %check_subtype286
  %151 = phi i1 [ false, %parent_type_block288 ], [ true, %check_subtype286 ], !dbg !3221
  br i1 %151, label %switch.case292, label %next_if301, !dbg !3221

switch.case292:                                   ; preds = %result_block291
  call void @llvm.dbg.declare(metadata ptr %arg293, metadata !3222, metadata !DIExpression()), !dbg !3224
  %152 = load ptr, ptr %arg, align 8, !dbg !3224
  store ptr %152, ptr %arg293, align 8, !dbg !3224
  %153 = load ptr, ptr %arg293, align 8, !dbg !3225
  %checknull295 = icmp eq ptr %153, null, !dbg !3225
  %154 = call i1 @llvm.expect.i1(i1 %checknull295, i1 false), !dbg !3225
  br i1 %154, label %panic296, label %checkok300, !dbg !3225

checkok300:                                       ; preds = %switch.case292
  %155 = load i128, ptr %153, align 16, !dbg !3225
  store i128 %155, ptr %0, align 16, !dbg !3225
  ret i64 0, !dbg !3225

next_if301:                                       ; preds = %result_block291
  br label %check_subtype302, !dbg !3226

check_subtype302:                                 ; preds = %parent_type_block304, %next_if301
  %156 = phi i64 [ %31, %next_if301 ], [ %typeid.parent306, %parent_type_block304 ], !dbg !3226
  %eq303 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %156, !dbg !3226
  br i1 %eq303, label %result_block307, label %parent_type_block304, !dbg !3226

parent_type_block304:                             ; preds = %check_subtype302
  %157 = inttoptr i64 %156 to ptr, !dbg !3226
  %ptradd305 = getelementptr inbounds i8, ptr %157, i64 8, !dbg !3226
  %typeid.parent306 = load i64, ptr %ptradd305, align 8, !dbg !3226
  %158 = icmp eq i64 %typeid.parent306, 0, !dbg !3226
  br i1 %158, label %result_block307, label %check_subtype302, !dbg !3226

result_block307:                                  ; preds = %parent_type_block304, %check_subtype302
  %159 = phi i1 [ false, %parent_type_block304 ], [ true, %check_subtype302 ], !dbg !3226
  br i1 %159, label %switch.case308, label %next_if328, !dbg !3226

switch.case308:                                   ; preds = %result_block307
  call void @llvm.dbg.declare(metadata ptr %arg309, metadata !3227, metadata !DIExpression()), !dbg !3231
  %160 = load ptr, ptr %arg, align 8, !dbg !3231
  store ptr %160, ptr %arg309, align 8, !dbg !3231
  call void @llvm.dbg.declare(metadata ptr %f, metadata !3232, metadata !DIExpression()), !dbg !3233
  %161 = load ptr, ptr %arg309, align 8, !dbg !3234
  %checknull310 = icmp eq ptr %161, null, !dbg !3234
  %162 = call i1 @llvm.expect.i1(i1 %checknull310, i1 false), !dbg !3234
  br i1 %162, label %panic311, label %checkok315, !dbg !3234

checkok315:                                       ; preds = %switch.case308
  %163 = load float, ptr %161, align 4, !dbg !3234
  store float %163, ptr %f, align 4, !dbg !3234
  %164 = load ptr, ptr %is_neg, align 8, !dbg !3235
  %checknull317 = icmp eq ptr %164, null, !dbg !3235
  %165 = call i1 @llvm.expect.i1(i1 %checknull317, i1 false), !dbg !3235
  br i1 %165, label %panic318, label %checkok322, !dbg !3235

checkok322:                                       ; preds = %checkok315
  %166 = load float, ptr %f, align 4, !dbg !3236
  %lt323 = fcmp olt float %166, 0.000000e+00, !dbg !3236
  %167 = zext i1 %lt323 to i8, !dbg !3236
  store i8 %167, ptr %164, align 1, !dbg !3236
  %168 = trunc i8 %167 to i1, !dbg !3236
  br i1 %168, label %cond.lhs324, label %cond.rhs325, !dbg !3236

cond.lhs324:                                      ; preds = %checkok322
  %169 = load float, ptr %f, align 4, !dbg !3237
  %fneg = fneg float %169, !dbg !3237
  br label %cond.phi326, !dbg !3237

cond.rhs325:                                      ; preds = %checkok322
  %170 = load float, ptr %f, align 4, !dbg !3238
  br label %cond.phi326, !dbg !3238

cond.phi326:                                      ; preds = %cond.rhs325, %cond.lhs324
  %val327 = phi float [ %fneg, %cond.lhs324 ], [ %170, %cond.rhs325 ], !dbg !3238
  %fpui = fptoui float %val327 to i128, !dbg !3238
  store i128 %fpui, ptr %0, align 16, !dbg !3238
  ret i64 0, !dbg !3238

next_if328:                                       ; preds = %result_block307
  br label %check_subtype329, !dbg !3239

check_subtype329:                                 ; preds = %parent_type_block331, %next_if328
  %171 = phi i64 [ %31, %next_if328 ], [ %typeid.parent333, %parent_type_block331 ], !dbg !3239
  %eq330 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %171, !dbg !3239
  br i1 %eq330, label %result_block334, label %parent_type_block331, !dbg !3239

parent_type_block331:                             ; preds = %check_subtype329
  %172 = inttoptr i64 %171 to ptr, !dbg !3239
  %ptradd332 = getelementptr inbounds i8, ptr %172, i64 8, !dbg !3239
  %typeid.parent333 = load i64, ptr %ptradd332, align 8, !dbg !3239
  %173 = icmp eq i64 %typeid.parent333, 0, !dbg !3239
  br i1 %173, label %result_block334, label %check_subtype329, !dbg !3239

result_block334:                                  ; preds = %parent_type_block331, %check_subtype329
  %174 = phi i1 [ false, %parent_type_block331 ], [ true, %check_subtype329 ], !dbg !3239
  br i1 %174, label %switch.case335, label %next_if357, !dbg !3239

switch.case335:                                   ; preds = %result_block334
  call void @llvm.dbg.declare(metadata ptr %arg336, metadata !3240, metadata !DIExpression()), !dbg !3243
  %175 = load ptr, ptr %arg, align 8, !dbg !3243
  store ptr %175, ptr %arg336, align 8, !dbg !3243
  call void @llvm.dbg.declare(metadata ptr %d, metadata !3244, metadata !DIExpression()), !dbg !3245
  %176 = load ptr, ptr %arg336, align 8, !dbg !3246
  %checknull337 = icmp eq ptr %176, null, !dbg !3246
  %177 = call i1 @llvm.expect.i1(i1 %checknull337, i1 false), !dbg !3246
  br i1 %177, label %panic338, label %checkok342, !dbg !3246

checkok342:                                       ; preds = %switch.case335
  %178 = load double, ptr %176, align 8, !dbg !3246
  store double %178, ptr %d, align 8, !dbg !3246
  %179 = load ptr, ptr %is_neg, align 8, !dbg !3247
  %checknull344 = icmp eq ptr %179, null, !dbg !3247
  %180 = call i1 @llvm.expect.i1(i1 %checknull344, i1 false), !dbg !3247
  br i1 %180, label %panic345, label %checkok349, !dbg !3247

checkok349:                                       ; preds = %checkok342
  %181 = load double, ptr %d, align 8, !dbg !3248
  %lt350 = fcmp olt double %181, 0.000000e+00, !dbg !3248
  %182 = zext i1 %lt350 to i8, !dbg !3248
  store i8 %182, ptr %179, align 1, !dbg !3248
  %183 = trunc i8 %182 to i1, !dbg !3248
  br i1 %183, label %cond.lhs351, label %cond.rhs353, !dbg !3248

cond.lhs351:                                      ; preds = %checkok349
  %184 = load double, ptr %d, align 8, !dbg !3249
  %fneg352 = fneg double %184, !dbg !3249
  br label %cond.phi354, !dbg !3249

cond.rhs353:                                      ; preds = %checkok349
  %185 = load double, ptr %d, align 8, !dbg !3250
  br label %cond.phi354, !dbg !3250

cond.phi354:                                      ; preds = %cond.rhs353, %cond.lhs351
  %val355 = phi double [ %fneg352, %cond.lhs351 ], [ %185, %cond.rhs353 ], !dbg !3250
  %fpui356 = fptoui double %val355 to i128, !dbg !3250
  store i128 %fpui356, ptr %0, align 16, !dbg !3250
  ret i64 0, !dbg !3250

next_if357:                                       ; preds = %result_block334
  br label %switch.default358, !dbg !3250

switch.default358:                                ; preds = %next_if357
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3251

panic:                                            ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr, align 8
  %186 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %187 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr2, align 8
  %188 = load [2 x i64], ptr %taddr2, align 8
  %189 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %189([2 x i64] %186, [2 x i64] %187, [2 x i64] %188, i32 46), !dbg !3112
  unreachable, !dbg !3112

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.107, i64 55 }, ptr %taddr5, align 8
  %190 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr6, align 8
  %191 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr7, align 8
  %192 = load [2 x i64], ptr %taddr7, align 8
  %193 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %193([2 x i64] %190, [2 x i64] %191, [2 x i64] %192, i32 47), !dbg !3116
  unreachable, !dbg !3116

panic12:                                          ; preds = %switch.case9
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr13, align 8
  %194 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr14, align 8
  %195 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr15, align 8
  %196 = load [2 x i64], ptr %taddr15, align 8
  %197 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %197([2 x i64] %194, [2 x i64] %195, [2 x i64] %196, i32 200), !dbg !3117
  unreachable, !dbg !3117

panic18:                                          ; preds = %checkok16
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr19, align 8
  %198 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr20, align 8
  %199 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr21, align 8
  %200 = load [2 x i64], ptr %taddr21, align 8
  %201 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %201([2 x i64] %198, [2 x i64] %199, [2 x i64] %200, i32 200), !dbg !3121
  unreachable, !dbg !3121

panic46:                                          ; preds = %switch.exit
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr47, align 8
  %202 = load [2 x i64], ptr %taddr47, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr48, align 8
  %203 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr49, align 8
  %204 = load [2 x i64], ptr %taddr49, align 8
  %205 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %205([2 x i64] %202, [2 x i64] %203, [2 x i64] %204, i32 54), !dbg !3125
  unreachable, !dbg !3125

panic60:                                          ; preds = %switch.case56
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr61, align 8
  %206 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr62, align 8
  %207 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr63, align 8
  %208 = load [2 x i64], ptr %taddr63, align 8
  %209 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %209([2 x i64] %206, [2 x i64] %207, [2 x i64] %208, i32 58), !dbg !3133
  unreachable, !dbg !3133

panic75:                                          ; preds = %switch.case72
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr76, align 8
  %210 = load [2 x i64], ptr %taddr76, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr77, align 8
  %211 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr78, align 8
  %212 = load [2 x i64], ptr %taddr78, align 8
  %213 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %213([2 x i64] %210, [2 x i64] %211, [2 x i64] %212, i32 60), !dbg !3141
  unreachable, !dbg !3141

panic82:                                          ; preds = %checkok79
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr83, align 8
  %214 = load [2 x i64], ptr %taddr83, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr84, align 8
  %215 = load [2 x i64], ptr %taddr84, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr85, align 8
  %216 = load [2 x i64], ptr %taddr85, align 8
  %217 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %217([2 x i64] %214, [2 x i64] %215, [2 x i64] %216, i32 61), !dbg !3142
  unreachable, !dbg !3142

panic101:                                         ; preds = %switch.case97
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr102, align 8
  %218 = load [2 x i64], ptr %taddr102, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr103, align 8
  %219 = load [2 x i64], ptr %taddr103, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr104, align 8
  %220 = load [2 x i64], ptr %taddr104, align 8
  %221 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %221([2 x i64] %218, [2 x i64] %219, [2 x i64] %220, i32 63), !dbg !3154
  unreachable, !dbg !3154

panic109:                                         ; preds = %checkok105
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr110, align 8
  %222 = load [2 x i64], ptr %taddr110, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr111, align 8
  %223 = load [2 x i64], ptr %taddr111, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr112, align 8
  %224 = load [2 x i64], ptr %taddr112, align 8
  %225 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %225([2 x i64] %222, [2 x i64] %223, [2 x i64] %224, i32 64), !dbg !3155
  unreachable, !dbg !3155

panic134:                                         ; preds = %switch.case130
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr135, align 8
  %226 = load [2 x i64], ptr %taddr135, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr136, align 8
  %227 = load [2 x i64], ptr %taddr136, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr137, align 8
  %228 = load [2 x i64], ptr %taddr137, align 8
  %229 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %229([2 x i64] %226, [2 x i64] %227, [2 x i64] %228, i32 66), !dbg !3167
  unreachable, !dbg !3167

panic141:                                         ; preds = %checkok138
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr142, align 8
  %230 = load [2 x i64], ptr %taddr142, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr143, align 8
  %231 = load [2 x i64], ptr %taddr143, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr144, align 8
  %232 = load [2 x i64], ptr %taddr144, align 8
  %233 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %233([2 x i64] %230, [2 x i64] %231, [2 x i64] %232, i32 67), !dbg !3168
  unreachable, !dbg !3168

panic166:                                         ; preds = %switch.case162
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr167, align 8
  %234 = load [2 x i64], ptr %taddr167, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr168, align 8
  %235 = load [2 x i64], ptr %taddr168, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr169, align 8
  %236 = load [2 x i64], ptr %taddr169, align 8
  %237 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %237([2 x i64] %234, [2 x i64] %235, [2 x i64] %236, i32 69), !dbg !3180
  unreachable, !dbg !3180

panic173:                                         ; preds = %checkok170
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr174, align 8
  %238 = load [2 x i64], ptr %taddr174, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr175, align 8
  %239 = load [2 x i64], ptr %taddr175, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr176, align 8
  %240 = load [2 x i64], ptr %taddr176, align 8
  %241 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %241([2 x i64] %238, [2 x i64] %239, [2 x i64] %240, i32 70), !dbg !3181
  unreachable, !dbg !3181

panic198:                                         ; preds = %switch.case194
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr199, align 8
  %242 = load [2 x i64], ptr %taddr199, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr200, align 8
  %243 = load [2 x i64], ptr %taddr200, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr201, align 8
  %244 = load [2 x i64], ptr %taddr201, align 8
  %245 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %245([2 x i64] %242, [2 x i64] %243, [2 x i64] %244, i32 72), !dbg !3193
  unreachable, !dbg !3193

panic205:                                         ; preds = %checkok202
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr206, align 8
  %246 = load [2 x i64], ptr %taddr206, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr207, align 8
  %247 = load [2 x i64], ptr %taddr207, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr208, align 8
  %248 = load [2 x i64], ptr %taddr208, align 8
  %249 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %249([2 x i64] %246, [2 x i64] %247, [2 x i64] %248, i32 73), !dbg !3194
  unreachable, !dbg !3194

panic228:                                         ; preds = %switch.case224
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr229, align 8
  %250 = load [2 x i64], ptr %taddr229, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr230, align 8
  %251 = load [2 x i64], ptr %taddr230, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr231, align 8
  %252 = load [2 x i64], ptr %taddr231, align 8
  %253 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %253([2 x i64] %250, [2 x i64] %251, [2 x i64] %252, i32 75), !dbg !3203
  unreachable, !dbg !3203

panic245:                                         ; preds = %switch.case241
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr246, align 8
  %254 = load [2 x i64], ptr %taddr246, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr247, align 8
  %255 = load [2 x i64], ptr %taddr247, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr248, align 8
  %256 = load [2 x i64], ptr %taddr248, align 8
  %257 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %257([2 x i64] %254, [2 x i64] %255, [2 x i64] %256, i32 77), !dbg !3209
  unreachable, !dbg !3209

panic262:                                         ; preds = %switch.case258
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr263, align 8
  %258 = load [2 x i64], ptr %taddr263, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr264, align 8
  %259 = load [2 x i64], ptr %taddr264, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr265, align 8
  %260 = load [2 x i64], ptr %taddr265, align 8
  %261 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %261([2 x i64] %258, [2 x i64] %259, [2 x i64] %260, i32 79), !dbg !3214
  unreachable, !dbg !3214

panic279:                                         ; preds = %switch.case275
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr280, align 8
  %262 = load [2 x i64], ptr %taddr280, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr281, align 8
  %263 = load [2 x i64], ptr %taddr281, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr282, align 8
  %264 = load [2 x i64], ptr %taddr282, align 8
  %265 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %265([2 x i64] %262, [2 x i64] %263, [2 x i64] %264, i32 81), !dbg !3220
  unreachable, !dbg !3220

panic296:                                         ; preds = %switch.case292
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr297, align 8
  %266 = load [2 x i64], ptr %taddr297, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr298, align 8
  %267 = load [2 x i64], ptr %taddr298, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr299, align 8
  %268 = load [2 x i64], ptr %taddr299, align 8
  %269 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %269([2 x i64] %266, [2 x i64] %267, [2 x i64] %268, i32 83), !dbg !3225
  unreachable, !dbg !3225

panic311:                                         ; preds = %switch.case308
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr312, align 8
  %270 = load [2 x i64], ptr %taddr312, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr313, align 8
  %271 = load [2 x i64], ptr %taddr313, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr314, align 8
  %272 = load [2 x i64], ptr %taddr314, align 8
  %273 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %273([2 x i64] %270, [2 x i64] %271, [2 x i64] %272, i32 85), !dbg !3234
  unreachable, !dbg !3234

panic318:                                         ; preds = %checkok315
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr319, align 8
  %274 = load [2 x i64], ptr %taddr319, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr320, align 8
  %275 = load [2 x i64], ptr %taddr320, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr321, align 8
  %276 = load [2 x i64], ptr %taddr321, align 8
  %277 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %277([2 x i64] %274, [2 x i64] %275, [2 x i64] %276, i32 86), !dbg !3235
  unreachable, !dbg !3235

panic338:                                         ; preds = %switch.case335
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr339, align 8
  %278 = load [2 x i64], ptr %taddr339, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr340, align 8
  %279 = load [2 x i64], ptr %taddr340, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr341, align 8
  %280 = load [2 x i64], ptr %taddr341, align 8
  %281 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %281([2 x i64] %278, [2 x i64] %279, [2 x i64] %280, i32 88), !dbg !3246
  unreachable, !dbg !3246

panic345:                                         ; preds = %checkok342
  store %"char[]" { ptr @.panic_msg.105, i64 47 }, ptr %taddr346, align 8
  %282 = load [2 x i64], ptr %taddr346, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr347, align 8
  %283 = load [2 x i64], ptr %taddr347, align 8
  store %"char[]" { ptr @.func.106, i64 12 }, ptr %taddr348, align 8
  %284 = load [2 x i64], ptr %taddr348, align 8
  %285 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %285([2 x i64] %282, [2 x i64] %283, [2 x i64] %284, i32 89), !dbg !3247
  unreachable, !dbg !3247
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.float_from_any(ptr %0, [2 x i64] %1) #0 !dbg !3253 {
entry:
  %arg = alloca %any, align 8
  %reterr = alloca i64, align 8
  %self = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %retparam = alloca double, align 8
  %taddr31 = alloca %any, align 8
  %switch = alloca i64, align 8
  %arg35 = alloca ptr, align 8
  %reterr36 = alloca i64, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %arg50 = alloca ptr, align 8
  %reterr51 = alloca i64, align 8
  %taddr54 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %arg66 = alloca ptr, align 8
  %reterr67 = alloca i64, align 8
  %taddr70 = alloca %"char[]", align 8
  %taddr71 = alloca %"char[]", align 8
  %taddr72 = alloca %"char[]", align 8
  %arg83 = alloca ptr, align 8
  %reterr84 = alloca i64, align 8
  %taddr87 = alloca %"char[]", align 8
  %taddr88 = alloca %"char[]", align 8
  %taddr89 = alloca %"char[]", align 8
  %arg100 = alloca ptr, align 8
  %reterr101 = alloca i64, align 8
  %taddr104 = alloca %"char[]", align 8
  %taddr105 = alloca %"char[]", align 8
  %taddr106 = alloca %"char[]", align 8
  %arg117 = alloca ptr, align 8
  %reterr118 = alloca i64, align 8
  %taddr121 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %taddr123 = alloca %"char[]", align 8
  %arg134 = alloca ptr, align 8
  %reterr135 = alloca i64, align 8
  %taddr138 = alloca %"char[]", align 8
  %taddr139 = alloca %"char[]", align 8
  %taddr140 = alloca %"char[]", align 8
  %arg151 = alloca ptr, align 8
  %reterr152 = alloca i64, align 8
  %taddr155 = alloca %"char[]", align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %arg168 = alloca ptr, align 8
  %reterr169 = alloca i64, align 8
  %taddr172 = alloca %"char[]", align 8
  %taddr173 = alloca %"char[]", align 8
  %taddr174 = alloca %"char[]", align 8
  %arg185 = alloca ptr, align 8
  %reterr186 = alloca i64, align 8
  %taddr189 = alloca %"char[]", align 8
  %taddr190 = alloca %"char[]", align 8
  %taddr191 = alloca %"char[]", align 8
  %arg202 = alloca ptr, align 8
  %reterr203 = alloca i64, align 8
  %taddr206 = alloca %"char[]", align 8
  %taddr207 = alloca %"char[]", align 8
  %taddr208 = alloca %"char[]", align 8
  %arg219 = alloca ptr, align 8
  %reterr220 = alloca i64, align 8
  %taddr223 = alloca %"char[]", align 8
  %taddr224 = alloca %"char[]", align 8
  %taddr225 = alloca %"char[]", align 8
  %arg235 = alloca ptr, align 8
  %reterr236 = alloca i64, align 8
  %taddr239 = alloca %"char[]", align 8
  %taddr240 = alloca %"char[]", align 8
  %taddr241 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3258, metadata !DIExpression()), !dbg !3259
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3260
  %2 = load i64, ptr %ptradd, align 8, !dbg !3260
  %"introspect*" = inttoptr i64 %2 to ptr, !dbg !3260
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3260
  %eq = icmp eq i8 %typeid.kind, 18, !dbg !3260
  br i1 %eq, label %if.then, label %if.exit, !dbg !3260

if.then:                                          ; preds = %entry
  store ptr %arg, ptr %self, align 8
  %3 = load ptr, ptr %self, align 8, !dbg !3261
  %checknull = icmp eq ptr %3, null, !dbg !3261
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3261
  br i1 %4, label %panic, label %checkok, !dbg !3261

checkok:                                          ; preds = %if.then
  %5 = load ptr, ptr %3, align 8, !dbg !3261
  %6 = load ptr, ptr %self, align 8, !dbg !3265
  %checknull3 = icmp eq ptr %6, null, !dbg !3265
  %7 = call i1 @llvm.expect.i1(i1 %checknull3, i1 false), !dbg !3265
  br i1 %7, label %panic4, label %checkok8, !dbg !3265

checkok8:                                         ; preds = %checkok
  %ptradd9 = getelementptr inbounds i8, ptr %6, i64 8, !dbg !3265
  %8 = load i64, ptr %ptradd9, align 8, !dbg !3265
  %"introspect*10" = inttoptr i64 %8 to ptr, !dbg !3265
  %typeid.kind11 = load i8, ptr %"introspect*10", align 8, !dbg !3265
  %eq12 = icmp eq i8 %typeid.kind11, 15, !dbg !3265
  br i1 %eq12, label %check_type_ok, label %check_next, !dbg !3265

check_next:                                       ; preds = %checkok8
  %eq13 = icmp eq i8 %typeid.kind11, 19, !dbg !3265
  br i1 %eq13, label %check_type_ok, label %check_next14, !dbg !3265

check_next14:                                     ; preds = %check_next
  %eq15 = icmp eq i8 %typeid.kind11, 17, !dbg !3265
  br i1 %eq15, label %check_type_ok, label %check_next16, !dbg !3265

check_next16:                                     ; preds = %check_next14
  %eq17 = icmp eq i8 %typeid.kind11, 8, !dbg !3265
  br i1 %eq17, label %check_type_ok, label %check_next18, !dbg !3265

check_next18:                                     ; preds = %check_next16
  %eq19 = icmp eq i8 %typeid.kind11, 16, !dbg !3265
  br i1 %eq19, label %check_type_ok, label %check_next20, !dbg !3265

check_next20:                                     ; preds = %check_next18
  %eq21 = icmp eq i8 %typeid.kind11, 18, !dbg !3265
  br i1 %eq21, label %check_type_ok, label %check_next22, !dbg !3265

check_next22:                                     ; preds = %check_next20
  %eq23 = icmp eq i8 %typeid.kind11, 14, !dbg !3265
  br i1 %eq23, label %check_type_ok, label %check_next24, !dbg !3265

check_next24:                                     ; preds = %check_next22
  %eq25 = icmp eq i8 %typeid.kind11, 12, !dbg !3265
  br i1 %eq25, label %check_type_ok, label %check_next26, !dbg !3265

check_next26:                                     ; preds = %check_next24
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr27, align 8
  %9 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr28, align 8
  %10 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr29, align 8
  %11 = load [2 x i64], ptr %taddr29, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12([2 x i64] %9, [2 x i64] %10, [2 x i64] %11, i32 200), !dbg !3265
  unreachable, !dbg !3265

check_type_ok:                                    ; preds = %check_next24, %check_next22, %check_next20, %check_next18, %check_next16, %check_next14, %check_next, %checkok8
  %ptradd30 = getelementptr inbounds i8, ptr %"introspect*10", i64 32, !dbg !3265
  %typeid.inner = load i64, ptr %ptradd30, align 8, !dbg !3265
  %13 = insertvalue %any undef, ptr %5, 0, !dbg !3265
  %14 = insertvalue %any %13, i64 %typeid.inner, 1, !dbg !3265
  store %any %14, ptr %taddr31, align 8
  %15 = load [2 x i64], ptr %taddr31, align 8
  %16 = call i64 @std.io.float_from_any(ptr %retparam, [2 x i64] %15), !dbg !3266
  %not_err = icmp eq i64 %16, 0, !dbg !3266
  %17 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3266
  br i1 %17, label %after_check, label %assign_optional, !dbg !3266

assign_optional:                                  ; preds = %check_type_ok
  store i64 %16, ptr %reterr, align 8, !dbg !3266
  br label %err_retblock, !dbg !3266

after_check:                                      ; preds = %check_type_ok
  %18 = load double, ptr %retparam, align 8, !dbg !3266
  store double %18, ptr %0, align 8, !dbg !3266
  ret i64 0, !dbg !3266

err_retblock:                                     ; preds = %assign_optional
  %19 = load i64, ptr %reterr, align 8, !dbg !3266
  ret i64 %19, !dbg !3266

if.exit:                                          ; preds = %entry
  %ptradd32 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3267
  %20 = load i64, ptr %ptradd32, align 8
  store i64 %20, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.exit
  %21 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !3269

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %22 = phi i64 [ %21, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !3269
  %eq33 = icmp eq i64 ptrtoint (ptr @"$ct.bool" to i64), %22, !dbg !3269
  br i1 %eq33, label %result_block, label %parent_type_block, !dbg !3269

parent_type_block:                                ; preds = %check_subtype
  %23 = inttoptr i64 %22 to ptr, !dbg !3269
  %ptradd34 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !3269
  %typeid.parent = load i64, ptr %ptradd34, align 8, !dbg !3269
  %24 = icmp eq i64 %typeid.parent, 0, !dbg !3269
  br i1 %24, label %result_block, label %check_subtype, !dbg !3269

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %25 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3269
  br i1 %25, label %switch.case, label %next_if, !dbg !3269

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %arg35, metadata !3270, metadata !DIExpression()), !dbg !3272
  %26 = load ptr, ptr %arg, align 8, !dbg !3272
  store ptr %26, ptr %arg35, align 8, !dbg !3272
  %27 = load ptr, ptr %arg35, align 8, !dbg !3273
  %checknull37 = icmp eq ptr %27, null, !dbg !3273
  %28 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !3273
  br i1 %28, label %panic38, label %checkok42, !dbg !3273

checkok42:                                        ; preds = %switch.case
  %29 = load i8, ptr %27, align 1, !dbg !3273
  %30 = trunc i8 %29 to i1, !dbg !3273
  %uifp = uitofp i1 %30 to double, !dbg !3273
  store double %uifp, ptr %0, align 8, !dbg !3273
  ret i64 0, !dbg !3273

next_if:                                          ; preds = %result_block
  br label %check_subtype43, !dbg !3274

check_subtype43:                                  ; preds = %parent_type_block45, %next_if
  %31 = phi i64 [ %21, %next_if ], [ %typeid.parent47, %parent_type_block45 ], !dbg !3274
  %eq44 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %31, !dbg !3274
  br i1 %eq44, label %result_block48, label %parent_type_block45, !dbg !3274

parent_type_block45:                              ; preds = %check_subtype43
  %32 = inttoptr i64 %31 to ptr, !dbg !3274
  %ptradd46 = getelementptr inbounds i8, ptr %32, i64 8, !dbg !3274
  %typeid.parent47 = load i64, ptr %ptradd46, align 8, !dbg !3274
  %33 = icmp eq i64 %typeid.parent47, 0, !dbg !3274
  br i1 %33, label %result_block48, label %check_subtype43, !dbg !3274

result_block48:                                   ; preds = %parent_type_block45, %check_subtype43
  %34 = phi i1 [ false, %parent_type_block45 ], [ true, %check_subtype43 ], !dbg !3274
  br i1 %34, label %switch.case49, label %next_if58, !dbg !3274

switch.case49:                                    ; preds = %result_block48
  call void @llvm.dbg.declare(metadata ptr %arg50, metadata !3275, metadata !DIExpression()), !dbg !3277
  %35 = load ptr, ptr %arg, align 8, !dbg !3277
  store ptr %35, ptr %arg50, align 8, !dbg !3277
  %36 = load ptr, ptr %arg50, align 8, !dbg !3278
  %checknull52 = icmp eq ptr %36, null, !dbg !3278
  %37 = call i1 @llvm.expect.i1(i1 %checknull52, i1 false), !dbg !3278
  br i1 %37, label %panic53, label %checkok57, !dbg !3278

checkok57:                                        ; preds = %switch.case49
  %38 = load i8, ptr %36, align 1, !dbg !3278
  %sifp = sitofp i8 %38 to double, !dbg !3278
  store double %sifp, ptr %0, align 8, !dbg !3278
  ret i64 0, !dbg !3278

next_if58:                                        ; preds = %result_block48
  br label %check_subtype59, !dbg !3279

check_subtype59:                                  ; preds = %parent_type_block61, %next_if58
  %39 = phi i64 [ %21, %next_if58 ], [ %typeid.parent63, %parent_type_block61 ], !dbg !3279
  %eq60 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %39, !dbg !3279
  br i1 %eq60, label %result_block64, label %parent_type_block61, !dbg !3279

parent_type_block61:                              ; preds = %check_subtype59
  %40 = inttoptr i64 %39 to ptr, !dbg !3279
  %ptradd62 = getelementptr inbounds i8, ptr %40, i64 8, !dbg !3279
  %typeid.parent63 = load i64, ptr %ptradd62, align 8, !dbg !3279
  %41 = icmp eq i64 %typeid.parent63, 0, !dbg !3279
  br i1 %41, label %result_block64, label %check_subtype59, !dbg !3279

result_block64:                                   ; preds = %parent_type_block61, %check_subtype59
  %42 = phi i1 [ false, %parent_type_block61 ], [ true, %check_subtype59 ], !dbg !3279
  br i1 %42, label %switch.case65, label %next_if75, !dbg !3279

switch.case65:                                    ; preds = %result_block64
  call void @llvm.dbg.declare(metadata ptr %arg66, metadata !3280, metadata !DIExpression()), !dbg !3282
  %43 = load ptr, ptr %arg, align 8, !dbg !3282
  store ptr %43, ptr %arg66, align 8, !dbg !3282
  %44 = load ptr, ptr %arg66, align 8, !dbg !3283
  %checknull68 = icmp eq ptr %44, null, !dbg !3283
  %45 = call i1 @llvm.expect.i1(i1 %checknull68, i1 false), !dbg !3283
  br i1 %45, label %panic69, label %checkok73, !dbg !3283

checkok73:                                        ; preds = %switch.case65
  %46 = load i16, ptr %44, align 2, !dbg !3283
  %sifp74 = sitofp i16 %46 to double, !dbg !3283
  store double %sifp74, ptr %0, align 8, !dbg !3283
  ret i64 0, !dbg !3283

next_if75:                                        ; preds = %result_block64
  br label %check_subtype76, !dbg !3284

check_subtype76:                                  ; preds = %parent_type_block78, %next_if75
  %47 = phi i64 [ %21, %next_if75 ], [ %typeid.parent80, %parent_type_block78 ], !dbg !3284
  %eq77 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %47, !dbg !3284
  br i1 %eq77, label %result_block81, label %parent_type_block78, !dbg !3284

parent_type_block78:                              ; preds = %check_subtype76
  %48 = inttoptr i64 %47 to ptr, !dbg !3284
  %ptradd79 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !3284
  %typeid.parent80 = load i64, ptr %ptradd79, align 8, !dbg !3284
  %49 = icmp eq i64 %typeid.parent80, 0, !dbg !3284
  br i1 %49, label %result_block81, label %check_subtype76, !dbg !3284

result_block81:                                   ; preds = %parent_type_block78, %check_subtype76
  %50 = phi i1 [ false, %parent_type_block78 ], [ true, %check_subtype76 ], !dbg !3284
  br i1 %50, label %switch.case82, label %next_if92, !dbg !3284

switch.case82:                                    ; preds = %result_block81
  call void @llvm.dbg.declare(metadata ptr %arg83, metadata !3285, metadata !DIExpression()), !dbg !3287
  %51 = load ptr, ptr %arg, align 8, !dbg !3287
  store ptr %51, ptr %arg83, align 8, !dbg !3287
  %52 = load ptr, ptr %arg83, align 8, !dbg !3288
  %checknull85 = icmp eq ptr %52, null, !dbg !3288
  %53 = call i1 @llvm.expect.i1(i1 %checknull85, i1 false), !dbg !3288
  br i1 %53, label %panic86, label %checkok90, !dbg !3288

checkok90:                                        ; preds = %switch.case82
  %54 = load i32, ptr %52, align 4, !dbg !3288
  %sifp91 = sitofp i32 %54 to double, !dbg !3288
  store double %sifp91, ptr %0, align 8, !dbg !3288
  ret i64 0, !dbg !3288

next_if92:                                        ; preds = %result_block81
  br label %check_subtype93, !dbg !3289

check_subtype93:                                  ; preds = %parent_type_block95, %next_if92
  %55 = phi i64 [ %21, %next_if92 ], [ %typeid.parent97, %parent_type_block95 ], !dbg !3289
  %eq94 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %55, !dbg !3289
  br i1 %eq94, label %result_block98, label %parent_type_block95, !dbg !3289

parent_type_block95:                              ; preds = %check_subtype93
  %56 = inttoptr i64 %55 to ptr, !dbg !3289
  %ptradd96 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !3289
  %typeid.parent97 = load i64, ptr %ptradd96, align 8, !dbg !3289
  %57 = icmp eq i64 %typeid.parent97, 0, !dbg !3289
  br i1 %57, label %result_block98, label %check_subtype93, !dbg !3289

result_block98:                                   ; preds = %parent_type_block95, %check_subtype93
  %58 = phi i1 [ false, %parent_type_block95 ], [ true, %check_subtype93 ], !dbg !3289
  br i1 %58, label %switch.case99, label %next_if109, !dbg !3289

switch.case99:                                    ; preds = %result_block98
  call void @llvm.dbg.declare(metadata ptr %arg100, metadata !3290, metadata !DIExpression()), !dbg !3292
  %59 = load ptr, ptr %arg, align 8, !dbg !3292
  store ptr %59, ptr %arg100, align 8, !dbg !3292
  %60 = load ptr, ptr %arg100, align 8, !dbg !3293
  %checknull102 = icmp eq ptr %60, null, !dbg !3293
  %61 = call i1 @llvm.expect.i1(i1 %checknull102, i1 false), !dbg !3293
  br i1 %61, label %panic103, label %checkok107, !dbg !3293

checkok107:                                       ; preds = %switch.case99
  %62 = load i64, ptr %60, align 8, !dbg !3293
  %sifp108 = sitofp i64 %62 to double, !dbg !3293
  store double %sifp108, ptr %0, align 8, !dbg !3293
  ret i64 0, !dbg !3293

next_if109:                                       ; preds = %result_block98
  br label %check_subtype110, !dbg !3294

check_subtype110:                                 ; preds = %parent_type_block112, %next_if109
  %63 = phi i64 [ %21, %next_if109 ], [ %typeid.parent114, %parent_type_block112 ], !dbg !3294
  %eq111 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %63, !dbg !3294
  br i1 %eq111, label %result_block115, label %parent_type_block112, !dbg !3294

parent_type_block112:                             ; preds = %check_subtype110
  %64 = inttoptr i64 %63 to ptr, !dbg !3294
  %ptradd113 = getelementptr inbounds i8, ptr %64, i64 8, !dbg !3294
  %typeid.parent114 = load i64, ptr %ptradd113, align 8, !dbg !3294
  %65 = icmp eq i64 %typeid.parent114, 0, !dbg !3294
  br i1 %65, label %result_block115, label %check_subtype110, !dbg !3294

result_block115:                                  ; preds = %parent_type_block112, %check_subtype110
  %66 = phi i1 [ false, %parent_type_block112 ], [ true, %check_subtype110 ], !dbg !3294
  br i1 %66, label %switch.case116, label %next_if126, !dbg !3294

switch.case116:                                   ; preds = %result_block115
  call void @llvm.dbg.declare(metadata ptr %arg117, metadata !3295, metadata !DIExpression()), !dbg !3297
  %67 = load ptr, ptr %arg, align 8, !dbg !3297
  store ptr %67, ptr %arg117, align 8, !dbg !3297
  %68 = load ptr, ptr %arg117, align 8, !dbg !3298
  %checknull119 = icmp eq ptr %68, null, !dbg !3298
  %69 = call i1 @llvm.expect.i1(i1 %checknull119, i1 false), !dbg !3298
  br i1 %69, label %panic120, label %checkok124, !dbg !3298

checkok124:                                       ; preds = %switch.case116
  %70 = load i128, ptr %68, align 16, !dbg !3298
  %sifp125 = sitofp i128 %70 to double, !dbg !3298
  store double %sifp125, ptr %0, align 8, !dbg !3298
  ret i64 0, !dbg !3298

next_if126:                                       ; preds = %result_block115
  br label %check_subtype127, !dbg !3299

check_subtype127:                                 ; preds = %parent_type_block129, %next_if126
  %71 = phi i64 [ %21, %next_if126 ], [ %typeid.parent131, %parent_type_block129 ], !dbg !3299
  %eq128 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %71, !dbg !3299
  br i1 %eq128, label %result_block132, label %parent_type_block129, !dbg !3299

parent_type_block129:                             ; preds = %check_subtype127
  %72 = inttoptr i64 %71 to ptr, !dbg !3299
  %ptradd130 = getelementptr inbounds i8, ptr %72, i64 8, !dbg !3299
  %typeid.parent131 = load i64, ptr %ptradd130, align 8, !dbg !3299
  %73 = icmp eq i64 %typeid.parent131, 0, !dbg !3299
  br i1 %73, label %result_block132, label %check_subtype127, !dbg !3299

result_block132:                                  ; preds = %parent_type_block129, %check_subtype127
  %74 = phi i1 [ false, %parent_type_block129 ], [ true, %check_subtype127 ], !dbg !3299
  br i1 %74, label %switch.case133, label %next_if143, !dbg !3299

switch.case133:                                   ; preds = %result_block132
  call void @llvm.dbg.declare(metadata ptr %arg134, metadata !3300, metadata !DIExpression()), !dbg !3302
  %75 = load ptr, ptr %arg, align 8, !dbg !3302
  store ptr %75, ptr %arg134, align 8, !dbg !3302
  %76 = load ptr, ptr %arg134, align 8, !dbg !3303
  %checknull136 = icmp eq ptr %76, null, !dbg !3303
  %77 = call i1 @llvm.expect.i1(i1 %checknull136, i1 false), !dbg !3303
  br i1 %77, label %panic137, label %checkok141, !dbg !3303

checkok141:                                       ; preds = %switch.case133
  %78 = load i8, ptr %76, align 1, !dbg !3303
  %uifp142 = uitofp i8 %78 to double, !dbg !3303
  store double %uifp142, ptr %0, align 8, !dbg !3303
  ret i64 0, !dbg !3303

next_if143:                                       ; preds = %result_block132
  br label %check_subtype144, !dbg !3304

check_subtype144:                                 ; preds = %parent_type_block146, %next_if143
  %79 = phi i64 [ %21, %next_if143 ], [ %typeid.parent148, %parent_type_block146 ], !dbg !3304
  %eq145 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %79, !dbg !3304
  br i1 %eq145, label %result_block149, label %parent_type_block146, !dbg !3304

parent_type_block146:                             ; preds = %check_subtype144
  %80 = inttoptr i64 %79 to ptr, !dbg !3304
  %ptradd147 = getelementptr inbounds i8, ptr %80, i64 8, !dbg !3304
  %typeid.parent148 = load i64, ptr %ptradd147, align 8, !dbg !3304
  %81 = icmp eq i64 %typeid.parent148, 0, !dbg !3304
  br i1 %81, label %result_block149, label %check_subtype144, !dbg !3304

result_block149:                                  ; preds = %parent_type_block146, %check_subtype144
  %82 = phi i1 [ false, %parent_type_block146 ], [ true, %check_subtype144 ], !dbg !3304
  br i1 %82, label %switch.case150, label %next_if160, !dbg !3304

switch.case150:                                   ; preds = %result_block149
  call void @llvm.dbg.declare(metadata ptr %arg151, metadata !3305, metadata !DIExpression()), !dbg !3307
  %83 = load ptr, ptr %arg, align 8, !dbg !3307
  store ptr %83, ptr %arg151, align 8, !dbg !3307
  %84 = load ptr, ptr %arg151, align 8, !dbg !3308
  %checknull153 = icmp eq ptr %84, null, !dbg !3308
  %85 = call i1 @llvm.expect.i1(i1 %checknull153, i1 false), !dbg !3308
  br i1 %85, label %panic154, label %checkok158, !dbg !3308

checkok158:                                       ; preds = %switch.case150
  %86 = load i16, ptr %84, align 2, !dbg !3308
  %uifp159 = uitofp i16 %86 to double, !dbg !3308
  store double %uifp159, ptr %0, align 8, !dbg !3308
  ret i64 0, !dbg !3308

next_if160:                                       ; preds = %result_block149
  br label %check_subtype161, !dbg !3309

check_subtype161:                                 ; preds = %parent_type_block163, %next_if160
  %87 = phi i64 [ %21, %next_if160 ], [ %typeid.parent165, %parent_type_block163 ], !dbg !3309
  %eq162 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %87, !dbg !3309
  br i1 %eq162, label %result_block166, label %parent_type_block163, !dbg !3309

parent_type_block163:                             ; preds = %check_subtype161
  %88 = inttoptr i64 %87 to ptr, !dbg !3309
  %ptradd164 = getelementptr inbounds i8, ptr %88, i64 8, !dbg !3309
  %typeid.parent165 = load i64, ptr %ptradd164, align 8, !dbg !3309
  %89 = icmp eq i64 %typeid.parent165, 0, !dbg !3309
  br i1 %89, label %result_block166, label %check_subtype161, !dbg !3309

result_block166:                                  ; preds = %parent_type_block163, %check_subtype161
  %90 = phi i1 [ false, %parent_type_block163 ], [ true, %check_subtype161 ], !dbg !3309
  br i1 %90, label %switch.case167, label %next_if177, !dbg !3309

switch.case167:                                   ; preds = %result_block166
  call void @llvm.dbg.declare(metadata ptr %arg168, metadata !3310, metadata !DIExpression()), !dbg !3312
  %91 = load ptr, ptr %arg, align 8, !dbg !3312
  store ptr %91, ptr %arg168, align 8, !dbg !3312
  %92 = load ptr, ptr %arg168, align 8, !dbg !3313
  %checknull170 = icmp eq ptr %92, null, !dbg !3313
  %93 = call i1 @llvm.expect.i1(i1 %checknull170, i1 false), !dbg !3313
  br i1 %93, label %panic171, label %checkok175, !dbg !3313

checkok175:                                       ; preds = %switch.case167
  %94 = load i32, ptr %92, align 4, !dbg !3313
  %uifp176 = uitofp i32 %94 to double, !dbg !3313
  store double %uifp176, ptr %0, align 8, !dbg !3313
  ret i64 0, !dbg !3313

next_if177:                                       ; preds = %result_block166
  br label %check_subtype178, !dbg !3314

check_subtype178:                                 ; preds = %parent_type_block180, %next_if177
  %95 = phi i64 [ %21, %next_if177 ], [ %typeid.parent182, %parent_type_block180 ], !dbg !3314
  %eq179 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %95, !dbg !3314
  br i1 %eq179, label %result_block183, label %parent_type_block180, !dbg !3314

parent_type_block180:                             ; preds = %check_subtype178
  %96 = inttoptr i64 %95 to ptr, !dbg !3314
  %ptradd181 = getelementptr inbounds i8, ptr %96, i64 8, !dbg !3314
  %typeid.parent182 = load i64, ptr %ptradd181, align 8, !dbg !3314
  %97 = icmp eq i64 %typeid.parent182, 0, !dbg !3314
  br i1 %97, label %result_block183, label %check_subtype178, !dbg !3314

result_block183:                                  ; preds = %parent_type_block180, %check_subtype178
  %98 = phi i1 [ false, %parent_type_block180 ], [ true, %check_subtype178 ], !dbg !3314
  br i1 %98, label %switch.case184, label %next_if194, !dbg !3314

switch.case184:                                   ; preds = %result_block183
  call void @llvm.dbg.declare(metadata ptr %arg185, metadata !3315, metadata !DIExpression()), !dbg !3317
  %99 = load ptr, ptr %arg, align 8, !dbg !3317
  store ptr %99, ptr %arg185, align 8, !dbg !3317
  %100 = load ptr, ptr %arg185, align 8, !dbg !3318
  %checknull187 = icmp eq ptr %100, null, !dbg !3318
  %101 = call i1 @llvm.expect.i1(i1 %checknull187, i1 false), !dbg !3318
  br i1 %101, label %panic188, label %checkok192, !dbg !3318

checkok192:                                       ; preds = %switch.case184
  %102 = load i64, ptr %100, align 8, !dbg !3318
  %uifp193 = uitofp i64 %102 to double, !dbg !3318
  store double %uifp193, ptr %0, align 8, !dbg !3318
  ret i64 0, !dbg !3318

next_if194:                                       ; preds = %result_block183
  br label %check_subtype195, !dbg !3319

check_subtype195:                                 ; preds = %parent_type_block197, %next_if194
  %103 = phi i64 [ %21, %next_if194 ], [ %typeid.parent199, %parent_type_block197 ], !dbg !3319
  %eq196 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %103, !dbg !3319
  br i1 %eq196, label %result_block200, label %parent_type_block197, !dbg !3319

parent_type_block197:                             ; preds = %check_subtype195
  %104 = inttoptr i64 %103 to ptr, !dbg !3319
  %ptradd198 = getelementptr inbounds i8, ptr %104, i64 8, !dbg !3319
  %typeid.parent199 = load i64, ptr %ptradd198, align 8, !dbg !3319
  %105 = icmp eq i64 %typeid.parent199, 0, !dbg !3319
  br i1 %105, label %result_block200, label %check_subtype195, !dbg !3319

result_block200:                                  ; preds = %parent_type_block197, %check_subtype195
  %106 = phi i1 [ false, %parent_type_block197 ], [ true, %check_subtype195 ], !dbg !3319
  br i1 %106, label %switch.case201, label %next_if211, !dbg !3319

switch.case201:                                   ; preds = %result_block200
  call void @llvm.dbg.declare(metadata ptr %arg202, metadata !3320, metadata !DIExpression()), !dbg !3322
  %107 = load ptr, ptr %arg, align 8, !dbg !3322
  store ptr %107, ptr %arg202, align 8, !dbg !3322
  %108 = load ptr, ptr %arg202, align 8, !dbg !3323
  %checknull204 = icmp eq ptr %108, null, !dbg !3323
  %109 = call i1 @llvm.expect.i1(i1 %checknull204, i1 false), !dbg !3323
  br i1 %109, label %panic205, label %checkok209, !dbg !3323

checkok209:                                       ; preds = %switch.case201
  %110 = load i128, ptr %108, align 16, !dbg !3323
  %uifp210 = uitofp i128 %110 to double, !dbg !3323
  store double %uifp210, ptr %0, align 8, !dbg !3323
  ret i64 0, !dbg !3323

next_if211:                                       ; preds = %result_block200
  br label %check_subtype212, !dbg !3324

check_subtype212:                                 ; preds = %parent_type_block214, %next_if211
  %111 = phi i64 [ %21, %next_if211 ], [ %typeid.parent216, %parent_type_block214 ], !dbg !3324
  %eq213 = icmp eq i64 ptrtoint (ptr @"$ct.float" to i64), %111, !dbg !3324
  br i1 %eq213, label %result_block217, label %parent_type_block214, !dbg !3324

parent_type_block214:                             ; preds = %check_subtype212
  %112 = inttoptr i64 %111 to ptr, !dbg !3324
  %ptradd215 = getelementptr inbounds i8, ptr %112, i64 8, !dbg !3324
  %typeid.parent216 = load i64, ptr %ptradd215, align 8, !dbg !3324
  %113 = icmp eq i64 %typeid.parent216, 0, !dbg !3324
  br i1 %113, label %result_block217, label %check_subtype212, !dbg !3324

result_block217:                                  ; preds = %parent_type_block214, %check_subtype212
  %114 = phi i1 [ false, %parent_type_block214 ], [ true, %check_subtype212 ], !dbg !3324
  br i1 %114, label %switch.case218, label %next_if227, !dbg !3324

switch.case218:                                   ; preds = %result_block217
  call void @llvm.dbg.declare(metadata ptr %arg219, metadata !3325, metadata !DIExpression()), !dbg !3327
  %115 = load ptr, ptr %arg, align 8, !dbg !3327
  store ptr %115, ptr %arg219, align 8, !dbg !3327
  %116 = load ptr, ptr %arg219, align 8, !dbg !3328
  %checknull221 = icmp eq ptr %116, null, !dbg !3328
  %117 = call i1 @llvm.expect.i1(i1 %checknull221, i1 false), !dbg !3328
  br i1 %117, label %panic222, label %checkok226, !dbg !3328

checkok226:                                       ; preds = %switch.case218
  %118 = load float, ptr %116, align 4, !dbg !3328
  %fpfpext = fpext float %118 to double, !dbg !3328
  store double %fpfpext, ptr %0, align 8, !dbg !3328
  ret i64 0, !dbg !3328

next_if227:                                       ; preds = %result_block217
  br label %check_subtype228, !dbg !3329

check_subtype228:                                 ; preds = %parent_type_block230, %next_if227
  %119 = phi i64 [ %21, %next_if227 ], [ %typeid.parent232, %parent_type_block230 ], !dbg !3329
  %eq229 = icmp eq i64 ptrtoint (ptr @"$ct.double" to i64), %119, !dbg !3329
  br i1 %eq229, label %result_block233, label %parent_type_block230, !dbg !3329

parent_type_block230:                             ; preds = %check_subtype228
  %120 = inttoptr i64 %119 to ptr, !dbg !3329
  %ptradd231 = getelementptr inbounds i8, ptr %120, i64 8, !dbg !3329
  %typeid.parent232 = load i64, ptr %ptradd231, align 8, !dbg !3329
  %121 = icmp eq i64 %typeid.parent232, 0, !dbg !3329
  br i1 %121, label %result_block233, label %check_subtype228, !dbg !3329

result_block233:                                  ; preds = %parent_type_block230, %check_subtype228
  %122 = phi i1 [ false, %parent_type_block230 ], [ true, %check_subtype228 ], !dbg !3329
  br i1 %122, label %switch.case234, label %next_if243, !dbg !3329

switch.case234:                                   ; preds = %result_block233
  call void @llvm.dbg.declare(metadata ptr %arg235, metadata !3330, metadata !DIExpression()), !dbg !3332
  %123 = load ptr, ptr %arg, align 8, !dbg !3332
  store ptr %123, ptr %arg235, align 8, !dbg !3332
  %124 = load ptr, ptr %arg235, align 8, !dbg !3333
  %checknull237 = icmp eq ptr %124, null, !dbg !3333
  %125 = call i1 @llvm.expect.i1(i1 %checknull237, i1 false), !dbg !3333
  br i1 %125, label %panic238, label %checkok242, !dbg !3333

checkok242:                                       ; preds = %switch.case234
  %126 = load double, ptr %124, align 8, !dbg !3333
  store double %126, ptr %0, align 8, !dbg !3333
  ret i64 0, !dbg !3333

next_if243:                                       ; preds = %result_block233
  br label %switch.default, !dbg !3333

switch.default:                                   ; preds = %next_if243
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3334

panic:                                            ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr, align 8
  %127 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr1, align 8
  %128 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr2, align 8
  %129 = load [2 x i64], ptr %taddr2, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130([2 x i64] %127, [2 x i64] %128, [2 x i64] %129, i32 200), !dbg !3261
  unreachable, !dbg !3261

panic4:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr5, align 8
  %131 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr6, align 8
  %132 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr7, align 8
  %133 = load [2 x i64], ptr %taddr7, align 8
  %134 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %134([2 x i64] %131, [2 x i64] %132, [2 x i64] %133, i32 200), !dbg !3265
  unreachable, !dbg !3265

panic38:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr39, align 8
  %135 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr40, align 8
  %136 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr41, align 8
  %137 = load [2 x i64], ptr %taddr41, align 8
  %138 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %138([2 x i64] %135, [2 x i64] %136, [2 x i64] %137, i32 107), !dbg !3273
  unreachable, !dbg !3273

panic53:                                          ; preds = %switch.case49
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr54, align 8
  %139 = load [2 x i64], ptr %taddr54, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr55, align 8
  %140 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr56, align 8
  %141 = load [2 x i64], ptr %taddr56, align 8
  %142 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %142([2 x i64] %139, [2 x i64] %140, [2 x i64] %141, i32 109), !dbg !3278
  unreachable, !dbg !3278

panic69:                                          ; preds = %switch.case65
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr70, align 8
  %143 = load [2 x i64], ptr %taddr70, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr71, align 8
  %144 = load [2 x i64], ptr %taddr71, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr72, align 8
  %145 = load [2 x i64], ptr %taddr72, align 8
  %146 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %146([2 x i64] %143, [2 x i64] %144, [2 x i64] %145, i32 111), !dbg !3283
  unreachable, !dbg !3283

panic86:                                          ; preds = %switch.case82
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr87, align 8
  %147 = load [2 x i64], ptr %taddr87, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr88, align 8
  %148 = load [2 x i64], ptr %taddr88, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr89, align 8
  %149 = load [2 x i64], ptr %taddr89, align 8
  %150 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %150([2 x i64] %147, [2 x i64] %148, [2 x i64] %149, i32 113), !dbg !3288
  unreachable, !dbg !3288

panic103:                                         ; preds = %switch.case99
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr104, align 8
  %151 = load [2 x i64], ptr %taddr104, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr105, align 8
  %152 = load [2 x i64], ptr %taddr105, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr106, align 8
  %153 = load [2 x i64], ptr %taddr106, align 8
  %154 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %154([2 x i64] %151, [2 x i64] %152, [2 x i64] %153, i32 115), !dbg !3293
  unreachable, !dbg !3293

panic120:                                         ; preds = %switch.case116
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr121, align 8
  %155 = load [2 x i64], ptr %taddr121, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr122, align 8
  %156 = load [2 x i64], ptr %taddr122, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr123, align 8
  %157 = load [2 x i64], ptr %taddr123, align 8
  %158 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %158([2 x i64] %155, [2 x i64] %156, [2 x i64] %157, i32 117), !dbg !3298
  unreachable, !dbg !3298

panic137:                                         ; preds = %switch.case133
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr138, align 8
  %159 = load [2 x i64], ptr %taddr138, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr139, align 8
  %160 = load [2 x i64], ptr %taddr139, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr140, align 8
  %161 = load [2 x i64], ptr %taddr140, align 8
  %162 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %162([2 x i64] %159, [2 x i64] %160, [2 x i64] %161, i32 119), !dbg !3303
  unreachable, !dbg !3303

panic154:                                         ; preds = %switch.case150
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr155, align 8
  %163 = load [2 x i64], ptr %taddr155, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr156, align 8
  %164 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr157, align 8
  %165 = load [2 x i64], ptr %taddr157, align 8
  %166 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %166([2 x i64] %163, [2 x i64] %164, [2 x i64] %165, i32 121), !dbg !3308
  unreachable, !dbg !3308

panic171:                                         ; preds = %switch.case167
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr172, align 8
  %167 = load [2 x i64], ptr %taddr172, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr173, align 8
  %168 = load [2 x i64], ptr %taddr173, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr174, align 8
  %169 = load [2 x i64], ptr %taddr174, align 8
  %170 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %170([2 x i64] %167, [2 x i64] %168, [2 x i64] %169, i32 123), !dbg !3313
  unreachable, !dbg !3313

panic188:                                         ; preds = %switch.case184
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr189, align 8
  %171 = load [2 x i64], ptr %taddr189, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr190, align 8
  %172 = load [2 x i64], ptr %taddr190, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr191, align 8
  %173 = load [2 x i64], ptr %taddr191, align 8
  %174 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %174([2 x i64] %171, [2 x i64] %172, [2 x i64] %173, i32 125), !dbg !3318
  unreachable, !dbg !3318

panic205:                                         ; preds = %switch.case201
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr206, align 8
  %175 = load [2 x i64], ptr %taddr206, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr207, align 8
  %176 = load [2 x i64], ptr %taddr207, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr208, align 8
  %177 = load [2 x i64], ptr %taddr208, align 8
  %178 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %178([2 x i64] %175, [2 x i64] %176, [2 x i64] %177, i32 127), !dbg !3323
  unreachable, !dbg !3323

panic222:                                         ; preds = %switch.case218
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr223, align 8
  %179 = load [2 x i64], ptr %taddr223, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr224, align 8
  %180 = load [2 x i64], ptr %taddr224, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr225, align 8
  %181 = load [2 x i64], ptr %taddr225, align 8
  %182 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %182([2 x i64] %179, [2 x i64] %180, [2 x i64] %181, i32 129), !dbg !3328
  unreachable, !dbg !3328

panic238:                                         ; preds = %switch.case234
  store %"char[]" { ptr @.panic_msg.110, i64 44 }, ptr %taddr239, align 8
  %183 = load [2 x i64], ptr %taddr239, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr240, align 8
  %184 = load [2 x i64], ptr %taddr240, align 8
  store %"char[]" { ptr @.func.111, i64 14 }, ptr %taddr241, align 8
  %185 = load [2 x i64], ptr %taddr241, align 8
  %186 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %186([2 x i64] %183, [2 x i64] %184, [2 x i64] %185, i32 131), !dbg !3333
  unreachable, !dbg !3333
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i32 @std.io.simple_atoi(ptr %0, i64 %1, ptr %2) #0 !dbg !3336 {
entry:
  %buf = alloca ptr, align 8
  %maxlen = alloca i64, align 8
  %len_ptr = alloca ptr, align 8
  %i = alloca i32, align 4
  %len = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %c = alloca i8, align 1
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  store ptr %0, ptr %buf, align 8
  call void @llvm.dbg.declare(metadata ptr %buf, metadata !3339, metadata !DIExpression()), !dbg !3340
  store i64 %1, ptr %maxlen, align 8
  call void @llvm.dbg.declare(metadata ptr %maxlen, metadata !3341, metadata !DIExpression()), !dbg !3342
  store ptr %2, ptr %len_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %len_ptr, metadata !3343, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3345, metadata !DIExpression()), !dbg !3346
  store i32 0, ptr %i, align 4, !dbg !3347
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3348, metadata !DIExpression()), !dbg !3349
  %3 = load ptr, ptr %len_ptr, align 8, !dbg !3350
  %checknull = icmp eq ptr %3, null, !dbg !3350
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3350
  br i1 %4, label %panic, label %checkok, !dbg !3350

checkok:                                          ; preds = %entry
  %5 = load i64, ptr %3, align 8, !dbg !3350
  store i64 %5, ptr %len, align 8, !dbg !3350
  br label %loop.cond, !dbg !3351

loop.cond:                                        ; preds = %if.exit, %checkok
  %6 = load i64, ptr %len, align 8, !dbg !3352
  %7 = load i64, ptr %maxlen, align 8, !dbg !3354
  %lt = icmp ult i64 %6, %7, !dbg !3352
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3352

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3355, metadata !DIExpression()), !dbg !3357
  %8 = load ptr, ptr %buf, align 8, !dbg !3358
  %9 = load i64, ptr %len, align 8, !dbg !3359
  %ptradd = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !3359
  %10 = load i8, ptr %ptradd, align 1, !dbg !3359
  store i8 %10, ptr %c, align 1, !dbg !3359
  %11 = load i8, ptr %c, align 1, !dbg !3360
  %12 = call i8 @std.ascii.char.is_digit(i8 %11), !dbg !3360
  %13 = trunc i8 %12 to i1, !dbg !3360
  %not = xor i1 %13, true, !dbg !3360
  br i1 %not, label %if.then, label %if.exit, !dbg !3360

if.then:                                          ; preds = %loop.body
  br label %loop.exit, !dbg !3361

if.exit:                                          ; preds = %loop.body
  %14 = load i32, ptr %i, align 4, !dbg !3362
  %mul = mul i32 %14, 10, !dbg !3362
  %15 = load i8, ptr %c, align 1, !dbg !3363
  %zext = zext i8 %15 to i32, !dbg !3363
  %add = add i32 %mul, %zext, !dbg !3362
  %sub = sub i32 %add, 48, !dbg !3362
  store i32 %sub, ptr %i, align 4, !dbg !3362
  %16 = load i64, ptr %len, align 8, !dbg !3364
  %add3 = add i64 %16, 1, !dbg !3364
  store i64 %add3, ptr %len, align 8, !dbg !3364
  br label %loop.cond, !dbg !3364

loop.exit:                                        ; preds = %if.then, %loop.cond
  %17 = load ptr, ptr %len_ptr, align 8, !dbg !3365
  %checknull4 = icmp eq ptr %17, null, !dbg !3365
  %18 = call i1 @llvm.expect.i1(i1 %checknull4, i1 false), !dbg !3365
  br i1 %18, label %panic5, label %checkok9, !dbg !3365

checkok9:                                         ; preds = %loop.exit
  %19 = load i64, ptr %len, align 8, !dbg !3366
  store i64 %19, ptr %17, align 8, !dbg !3366
  %20 = load i32, ptr %i, align 4, !dbg !3367
  ret i32 %20, !dbg !3367

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.112, i64 48 }, ptr %taddr, align 8
  %21 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %22 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.113, i64 11 }, ptr %taddr2, align 8
  %23 = load [2 x i64], ptr %taddr2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 149), !dbg !3350
  unreachable, !dbg !3350

panic5:                                           ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.112, i64 48 }, ptr %taddr6, align 8
  %25 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr7, align 8
  %26 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.113, i64 11 }, ptr %taddr8, align 8
  %27 = load [2 x i64], ptr %taddr8, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 157), !dbg !3365
  unreachable, !dbg !3365
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.fmt_u(i128 %0, ptr %1) #0 !dbg !3368 {
entry:
  %x = alloca i128, align 16
  %s = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %y = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  store i128 %0, ptr %x, align 16
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3371, metadata !DIExpression()), !dbg !3372
  store ptr %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3373, metadata !DIExpression()), !dbg !3374
  br label %loop.cond, !dbg !3375

loop.cond:                                        ; preds = %checkok, %entry
  %2 = load i128, ptr %x, align 16, !dbg !3376
  %gt = icmp ugt i128 %2, 18446744073709551615, !dbg !3376
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !3376

loop.body:                                        ; preds = %loop.cond
  %3 = load ptr, ptr %s, align 8, !dbg !3378
  %ptradd_any = getelementptr i8, ptr %3, i8 -1, !dbg !3378
  store ptr %ptradd_any, ptr %s, align 8, !dbg !3378
  %checknull = icmp eq ptr %ptradd_any, null, !dbg !3378
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3378
  br i1 %4, label %panic, label %checkok, !dbg !3378

checkok:                                          ; preds = %loop.body
  %5 = load i128, ptr %x, align 16, !dbg !3379
  %smod = srem i128 %5, 10, !dbg !3380
  %trunc = trunc i128 %smod to i8, !dbg !3380
  %zext = zext i8 %trunc to i32, !dbg !3380
  %add = add i32 48, %zext, !dbg !3381
  %trunc3 = trunc i32 %add to i8, !dbg !3381
  store i8 %trunc3, ptr %ptradd_any, align 1, !dbg !3381
  %6 = load i128, ptr %x, align 16, !dbg !3382
  %udiv = udiv i128 %6, 10, !dbg !3382
  store i128 %udiv, ptr %x, align 16, !dbg !3382
  br label %loop.cond, !dbg !3382

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %y, metadata !3383, metadata !DIExpression()), !dbg !3385
  %7 = load i128, ptr %x, align 16, !dbg !3386
  %trunc4 = trunc i128 %7 to i64, !dbg !3386
  store i64 %trunc4, ptr %y, align 8, !dbg !3386
  br label %loop.cond5, !dbg !3386

loop.cond5:                                       ; preds = %checkok13, %loop.exit
  %8 = load i64, ptr %y, align 8, !dbg !3387
  %i2b = icmp ne i64 %8, 0, !dbg !3387
  br i1 %i2b, label %loop.body6, label %loop.exit20, !dbg !3387

loop.body6:                                       ; preds = %loop.cond5
  %9 = load ptr, ptr %s, align 8, !dbg !3388
  %ptradd_any7 = getelementptr i8, ptr %9, i8 -1, !dbg !3388
  store ptr %ptradd_any7, ptr %s, align 8, !dbg !3388
  %checknull8 = icmp eq ptr %ptradd_any7, null, !dbg !3388
  %10 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3388
  br i1 %10, label %panic9, label %checkok13, !dbg !3388

checkok13:                                        ; preds = %loop.body6
  %11 = load i64, ptr %y, align 8, !dbg !3389
  %smod14 = srem i64 %11, 10, !dbg !3390
  %trunc15 = trunc i64 %smod14 to i8, !dbg !3390
  %zext16 = zext i8 %trunc15 to i32, !dbg !3390
  %add17 = add i32 48, %zext16, !dbg !3391
  %trunc18 = trunc i32 %add17 to i8, !dbg !3391
  store i8 %trunc18, ptr %ptradd_any7, align 1, !dbg !3391
  %12 = load i64, ptr %y, align 8, !dbg !3392
  %udiv19 = udiv i64 %12, 10, !dbg !3392
  store i64 %udiv19, ptr %y, align 8, !dbg !3392
  br label %loop.cond5, !dbg !3392

loop.exit20:                                      ; preds = %loop.cond5
  %13 = load ptr, ptr %s, align 8, !dbg !3393
  ret ptr %13, !dbg !3393

panic:                                            ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.114, i64 44 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.115, i64 5 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 189), !dbg !3394
  unreachable, !dbg !3394

panic9:                                           ; preds = %loop.body6
  store %"char[]" { ptr @.panic_msg.114, i64 44 }, ptr %taddr10, align 8
  %18 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr11, align 8
  %19 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.115, i64 5 }, ptr %taddr12, align 8
  %20 = load [2 x i64], ptr %taddr12, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 190), !dbg !3395
  unreachable, !dbg !3395
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.printf_parse_format_field(ptr %0, ptr %1, i64 %2, ptr %3, ptr %4, i64 %5, ptr %6) #0 !dbg !3396 {
entry:
  %args_ptr = alloca ptr, align 8
  %args_len = alloca i64, align 8
  %args_index_ptr = alloca ptr, align 8
  %format_ptr = alloca ptr, align 8
  %format_len = alloca i64, align 8
  %index_ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %reterr4 = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %val = alloca %any, align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %intval = alloca i32, align 4
  %intval.f = alloca i64, align 8
  %v = alloca %any, align 8
  %blockret = alloca i32, align 4
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i32, align 4
  %min = alloca i32, align 4
  %switch = alloca i64, align 8
  %c51 = alloca i8, align 1
  %taddr54 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %taddr71 = alloca %"char[]", align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %i = alloca i32, align 4
  %taddr99 = alloca %"char[]", align 8
  %taddr100 = alloca %"char[]", align 8
  %taddr101 = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %taddr126 = alloca %"char[]", align 8
  %taddr127 = alloca %"char[]", align 8
  %taddr128 = alloca %"char[]", align 8
  %i153 = alloca i128, align 16
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr158 = alloca %"char[]", align 8
  %c184 = alloca i8, align 1
  %taddr187 = alloca %"char[]", align 8
  %taddr188 = alloca %"char[]", align 8
  %taddr189 = alloca %"char[]", align 8
  %s203 = alloca i16, align 2
  %taddr206 = alloca %"char[]", align 8
  %taddr207 = alloca %"char[]", align 8
  %taddr208 = alloca %"char[]", align 8
  %i231 = alloca i32, align 4
  %taddr234 = alloca %"char[]", align 8
  %taddr235 = alloca %"char[]", align 8
  %taddr236 = alloca %"char[]", align 8
  %l257 = alloca i64, align 8
  %taddr260 = alloca %"char[]", align 8
  %taddr261 = alloca %"char[]", align 8
  %taddr262 = alloca %"char[]", align 8
  %i286 = alloca i128, align 16
  %taddr289 = alloca %"char[]", align 8
  %taddr290 = alloca %"char[]", align 8
  %taddr291 = alloca %"char[]", align 8
  %string = alloca %"char[]", align 8
  %taddr308 = alloca %"char[]", align 8
  %taddr309 = alloca %"char[]", align 8
  %taddr310 = alloca %"any[]", align 8
  %reterr311 = alloca i64, align 8
  store ptr %1, ptr %args_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %args_ptr, metadata !3400, metadata !DIExpression()), !dbg !3401
  store i64 %2, ptr %args_len, align 8
  call void @llvm.dbg.declare(metadata ptr %args_len, metadata !3402, metadata !DIExpression()), !dbg !3403
  store ptr %3, ptr %args_index_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %args_index_ptr, metadata !3404, metadata !DIExpression()), !dbg !3405
  store ptr %4, ptr %format_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %format_ptr, metadata !3406, metadata !DIExpression()), !dbg !3407
  store i64 %5, ptr %format_len, align 8
  call void @llvm.dbg.declare(metadata ptr %format_len, metadata !3408, metadata !DIExpression()), !dbg !3409
  store ptr %6, ptr %index_ptr, align 8
  call void @llvm.dbg.declare(metadata ptr %index_ptr, metadata !3410, metadata !DIExpression()), !dbg !3411
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3412, metadata !DIExpression()), !dbg !3413
  %7 = load ptr, ptr %format_ptr, align 8, !dbg !3414
  %8 = load ptr, ptr %index_ptr, align 8, !dbg !3415
  %checknull = icmp eq ptr %8, null, !dbg !3415
  %9 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3415
  br i1 %9, label %panic, label %checkok, !dbg !3415

checkok:                                          ; preds = %entry
  %10 = load i64, ptr %8, align 8, !dbg !3415
  %ptradd = getelementptr inbounds i8, ptr %7, i64 %10, !dbg !3415
  %11 = load i8, ptr %ptradd, align 1, !dbg !3415
  store i8 %11, ptr %c, align 1, !dbg !3415
  %12 = load i8, ptr %c, align 1, !dbg !3416
  %13 = call i8 @std.ascii.char.is_digit(i8 %12), !dbg !3416
  %14 = trunc i8 %13 to i1, !dbg !3416
  br i1 %14, label %if.then, label %if.exit, !dbg !3416

if.then:                                          ; preds = %checkok
  %15 = load ptr, ptr %format_ptr, align 8, !dbg !3417
  %16 = load i64, ptr %format_len, align 8, !dbg !3417
  %17 = load ptr, ptr %index_ptr, align 8, !dbg !3417
  %18 = call i32 @std.io.simple_atoi(ptr %15, i64 %16, ptr %17) #5, !dbg !3418
  store i32 %18, ptr %0, align 4, !dbg !3418
  ret i64 0, !dbg !3418

if.exit:                                          ; preds = %checkok
  %19 = load i8, ptr %c, align 1, !dbg !3419
  %neq = icmp ne i8 %19, 42, !dbg !3419
  br i1 %neq, label %if.then3, label %if.exit5, !dbg !3419

if.then3:                                         ; preds = %if.exit
  store i32 0, ptr %0, align 4, !dbg !3420
  ret i64 0, !dbg !3420

if.exit5:                                         ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3421, metadata !DIExpression()), !dbg !3422
  %20 = load ptr, ptr %index_ptr, align 8, !dbg !3423
  %checknull6 = icmp eq ptr %20, null, !dbg !3423
  %21 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !3423
  br i1 %21, label %panic7, label %checkok11, !dbg !3423

checkok11:                                        ; preds = %if.exit5
  %22 = load i64, ptr %20, align 8, !dbg !3424
  %add = add i64 %22, 1, !dbg !3424
  store i64 %add, ptr %20, align 8, !dbg !3424
  store i64 %add, ptr %len, align 8, !dbg !3424
  %23 = load i64, ptr %len, align 8, !dbg !3425
  %24 = load i64, ptr %format_len, align 8, !dbg !3426
  %ge = icmp uge i64 %23, %24, !dbg !3425
  br i1 %ge, label %if.then12, label %if.exit13, !dbg !3425

if.then12:                                        ; preds = %checkok11
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3427

if.exit13:                                        ; preds = %checkok11
  %25 = load ptr, ptr %args_index_ptr, align 8, !dbg !3428
  %checknull14 = icmp eq ptr %25, null, !dbg !3428
  %26 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !3428
  br i1 %26, label %panic15, label %checkok19, !dbg !3428

checkok19:                                        ; preds = %if.exit13
  %27 = load i64, ptr %25, align 8, !dbg !3428
  %28 = load i64, ptr %args_len, align 8, !dbg !3429
  %ge20 = icmp uge i64 %27, %28, !dbg !3430
  br i1 %ge20, label %if.then21, label %if.exit22, !dbg !3430

if.then21:                                        ; preds = %checkok19
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3431

if.exit22:                                        ; preds = %checkok19
  call void @llvm.dbg.declare(metadata ptr %val, metadata !3432, metadata !DIExpression()), !dbg !3433
  %29 = load ptr, ptr %args_ptr, align 8, !dbg !3434
  %30 = load ptr, ptr %args_index_ptr, align 8, !dbg !3435
  %checknull23 = icmp eq ptr %30, null, !dbg !3435
  %31 = call i1 @llvm.expect.i1(i1 %checknull23, i1 false), !dbg !3435
  br i1 %31, label %panic24, label %checkok28, !dbg !3435

checkok28:                                        ; preds = %if.exit22
  %32 = load i64, ptr %30, align 8, !dbg !3436
  %add29 = add i64 %32, 1, !dbg !3436
  store i64 %add29, ptr %30, align 8, !dbg !3436
  %ptroffset = getelementptr inbounds [16 x i8], ptr %29, i64 %32, !dbg !3436
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %val, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !3436
  %ptradd30 = getelementptr inbounds i8, ptr %val, i64 8, !dbg !3437
  %33 = load i64, ptr %ptradd30, align 8, !dbg !3437
  %"introspect*" = inttoptr i64 %33 to ptr, !dbg !3437
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !3437
  %34 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind) #5, !dbg !3437
  %35 = trunc i8 %34 to i1, !dbg !3437
  %not = xor i1 %35, true, !dbg !3437
  br i1 %not, label %if.then31, label %if.exit32, !dbg !3437

if.then31:                                        ; preds = %checkok28
  ret i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), !dbg !3438

if.exit32:                                        ; preds = %checkok28
  call void @llvm.dbg.declare(metadata ptr %intval, metadata !3439, metadata !DIExpression()), !dbg !3440
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %val, i32 16, i1 false)
  %36 = call i8 @std.core.types.TypeKind.is_int(i8 2) #5, !dbg !3441
  %37 = trunc i8 %36 to i1, !dbg !3441
  br i1 %37, label %assert_ok, label %assert_fail, !dbg !3441

assert_fail:                                      ; preds = %if.exit32
  store %"char[]" { ptr @.panic_msg.119, i64 69 }, ptr %taddr33, align 8
  %38 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr34, align 8
  %39 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr35, align 8
  %40 = load [2 x i64], ptr %taddr35, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 22), !dbg !3441
  unreachable, !dbg !3441

assert_ok:                                        ; preds = %if.exit32
  %ptradd36 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !3445
  %42 = load i64, ptr %ptradd36, align 8, !dbg !3445
  %"introspect*37" = inttoptr i64 %42 to ptr, !dbg !3445
  %typeid.kind38 = load i8, ptr %"introspect*37", align 8, !dbg !3445
  %43 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind38) #5, !dbg !3445
  %44 = trunc i8 %43 to i1, !dbg !3445
  br i1 %44, label %assert_ok43, label %assert_fail39, !dbg !3445

assert_fail39:                                    ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.121, i64 71 }, ptr %taddr40, align 8
  %45 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr41, align 8
  %46 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr42, align 8
  %47 = load [2 x i64], ptr %taddr42, align 8
  %48 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %48([2 x i64] %45, [2 x i64] %46, [2 x i64] %47, i32 23), !dbg !3445
  unreachable, !dbg !3445

assert_ok43:                                      ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !3446, metadata !DIExpression()), !dbg !3447
  %ptradd44 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !3448
  %49 = load i64, ptr %ptradd44, align 8, !dbg !3448
  store i64 %49, ptr %any_type, align 8, !dbg !3448
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !3449, metadata !DIExpression()), !dbg !3450
  %50 = load i64, ptr %any_type, align 8, !dbg !3451
  %"introspect*45" = inttoptr i64 %50 to ptr, !dbg !3451
  %typeid.kind46 = load i8, ptr %"introspect*45", align 8, !dbg !3451
  store i8 %typeid.kind46, ptr %kind, align 1, !dbg !3451
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !3452, metadata !DIExpression()), !dbg !3453
  %51 = load i64, ptr %any_type, align 8, !dbg !3454
  %"introspect*47" = inttoptr i64 %51 to ptr, !dbg !3454
  %typeid.kind48 = load i8, ptr %"introspect*47", align 8, !dbg !3454
  %neq49 = icmp ne i8 2, %typeid.kind48, !dbg !3455
  %52 = zext i1 %neq49 to i8, !dbg !3455
  store i8 %52, ptr %is_mixed_signed, align 1, !dbg !3455
  call void @llvm.dbg.declare(metadata ptr %max, metadata !3456, metadata !DIExpression()), !dbg !3457
  store i32 2147483647, ptr %max, align 4, !dbg !3458
  call void @llvm.dbg.declare(metadata ptr %min, metadata !3459, metadata !DIExpression()), !dbg !3460
  store i32 -2147483648, ptr %min, align 4, !dbg !3461
  %53 = load i64, ptr %any_type, align 8
  store i64 %53, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %assert_ok43
  %54 = load i64, ptr %switch, align 8
  br label %check_subtype, !dbg !3462

check_subtype:                                    ; preds = %parent_type_block, %switch.entry
  %55 = phi i64 [ %54, %switch.entry ], [ %typeid.parent, %parent_type_block ], !dbg !3462
  %eq = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %55, !dbg !3462
  br i1 %eq, label %result_block, label %parent_type_block, !dbg !3462

parent_type_block:                                ; preds = %check_subtype
  %56 = inttoptr i64 %55 to ptr, !dbg !3462
  %ptradd50 = getelementptr inbounds i8, ptr %56, i64 8, !dbg !3462
  %typeid.parent = load i64, ptr %ptradd50, align 8, !dbg !3462
  %57 = icmp eq i64 %typeid.parent, 0, !dbg !3462
  br i1 %57, label %result_block, label %check_subtype, !dbg !3462

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %58 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !3462
  br i1 %58, label %switch.case, label %next_if, !dbg !3462

switch.case:                                      ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c51, metadata !3464, metadata !DIExpression()), !dbg !3466
  %59 = load ptr, ptr %v, align 8, !dbg !3467
  %checknull52 = icmp eq ptr %59, null, !dbg !3467
  %60 = call i1 @llvm.expect.i1(i1 %checknull52, i1 false), !dbg !3467
  br i1 %60, label %panic53, label %checkok57, !dbg !3467

checkok57:                                        ; preds = %switch.case
  %61 = load i8, ptr %59, align 1, !dbg !3468
  store i8 %61, ptr %c51, align 1, !dbg !3468
  %62 = load i8, ptr %is_mixed_signed, align 1, !dbg !3469
  %63 = trunc i8 %62 to i1, !dbg !3469
  br i1 %63, label %and.rhs, label %and.phi, !dbg !3469

and.rhs:                                          ; preds = %checkok57
  %64 = load i8, ptr %c51, align 1, !dbg !3470
  %sext = sext i8 %64 to i32, !dbg !3470
  %lt = icmp slt i32 %sext, 0, !dbg !3470
  br label %and.phi, !dbg !3470

and.phi:                                          ; preds = %and.rhs, %checkok57
  %val58 = phi i1 [ false, %checkok57 ], [ %lt, %and.rhs ], !dbg !3470
  br i1 %val58, label %if.then59, label %if.exit60, !dbg !3470

if.then59:                                        ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3471
  br label %after_assign, !dbg !3471

if.exit60:                                        ; preds = %and.phi
  %65 = load i8, ptr %c51, align 1, !dbg !3472
  %sext61 = sext i8 %65 to i32, !dbg !3472
  store i32 %sext61, ptr %blockret, align 4, !dbg !3472
  br label %expr_block.exit, !dbg !3472

next_if:                                          ; preds = %result_block
  br label %check_subtype62, !dbg !3473

check_subtype62:                                  ; preds = %parent_type_block64, %next_if
  %66 = phi i64 [ %54, %next_if ], [ %typeid.parent66, %parent_type_block64 ], !dbg !3473
  %eq63 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %66, !dbg !3473
  br i1 %eq63, label %result_block67, label %parent_type_block64, !dbg !3473

parent_type_block64:                              ; preds = %check_subtype62
  %67 = inttoptr i64 %66 to ptr, !dbg !3473
  %ptradd65 = getelementptr inbounds i8, ptr %67, i64 8, !dbg !3473
  %typeid.parent66 = load i64, ptr %ptradd65, align 8, !dbg !3473
  %68 = icmp eq i64 %typeid.parent66, 0, !dbg !3473
  br i1 %68, label %result_block67, label %check_subtype62, !dbg !3473

result_block67:                                   ; preds = %parent_type_block64, %check_subtype62
  %69 = phi i1 [ false, %parent_type_block64 ], [ true, %check_subtype62 ], !dbg !3473
  br i1 %69, label %switch.case68, label %next_if89, !dbg !3473

switch.case68:                                    ; preds = %result_block67
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3474, metadata !DIExpression()), !dbg !3476
  %70 = load ptr, ptr %v, align 8, !dbg !3477
  %checknull69 = icmp eq ptr %70, null, !dbg !3477
  %71 = call i1 @llvm.expect.i1(i1 %checknull69, i1 false), !dbg !3477
  br i1 %71, label %panic70, label %checkok74, !dbg !3477

checkok74:                                        ; preds = %switch.case68
  %72 = load i16, ptr %70, align 2, !dbg !3478
  store i16 %72, ptr %s, align 2, !dbg !3478
  %73 = load i8, ptr %is_mixed_signed, align 1, !dbg !3479
  %74 = trunc i8 %73 to i1, !dbg !3479
  br i1 %74, label %and.rhs75, label %and.phi78, !dbg !3479

and.rhs75:                                        ; preds = %checkok74
  %75 = load i16, ptr %s, align 2, !dbg !3480
  %sext76 = sext i16 %75 to i32, !dbg !3480
  %lt77 = icmp slt i32 %sext76, 0, !dbg !3480
  br label %and.phi78, !dbg !3480

and.phi78:                                        ; preds = %and.rhs75, %checkok74
  %val79 = phi i1 [ false, %checkok74 ], [ %lt77, %and.rhs75 ], !dbg !3480
  br i1 %val79, label %if.then80, label %if.exit81, !dbg !3480

if.then80:                                        ; preds = %and.phi78
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3481
  br label %after_assign, !dbg !3481

if.exit81:                                        ; preds = %and.phi78
  %76 = load i16, ptr %s, align 2, !dbg !3482
  %sext82 = sext i16 %76 to i32, !dbg !3482
  %77 = load i32, ptr %max, align 4, !dbg !3483
  %gt = icmp sgt i32 %sext82, %77, !dbg !3482
  br i1 %gt, label %or.phi, label %or.rhs, !dbg !3482

or.rhs:                                           ; preds = %if.exit81
  %78 = load i16, ptr %s, align 2, !dbg !3484
  %sext83 = sext i16 %78 to i32, !dbg !3484
  %79 = load i32, ptr %min, align 4, !dbg !3485
  %lt84 = icmp slt i32 %sext83, %79, !dbg !3484
  br label %or.phi, !dbg !3484

or.phi:                                           ; preds = %or.rhs, %if.exit81
  %val85 = phi i1 [ true, %if.exit81 ], [ %lt84, %or.rhs ], !dbg !3484
  br i1 %val85, label %if.then86, label %if.exit87, !dbg !3484

if.then86:                                        ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3486
  br label %after_assign, !dbg !3486

if.exit87:                                        ; preds = %or.phi
  %80 = load i16, ptr %s, align 2, !dbg !3487
  %sext88 = sext i16 %80 to i32, !dbg !3487
  store i32 %sext88, ptr %blockret, align 4, !dbg !3487
  br label %expr_block.exit, !dbg !3487

next_if89:                                        ; preds = %result_block67
  br label %check_subtype90, !dbg !3488

check_subtype90:                                  ; preds = %parent_type_block92, %next_if89
  %81 = phi i64 [ %54, %next_if89 ], [ %typeid.parent94, %parent_type_block92 ], !dbg !3488
  %eq91 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %81, !dbg !3488
  br i1 %eq91, label %result_block95, label %parent_type_block92, !dbg !3488

parent_type_block92:                              ; preds = %check_subtype90
  %82 = inttoptr i64 %81 to ptr, !dbg !3488
  %ptradd93 = getelementptr inbounds i8, ptr %82, i64 8, !dbg !3488
  %typeid.parent94 = load i64, ptr %ptradd93, align 8, !dbg !3488
  %83 = icmp eq i64 %typeid.parent94, 0, !dbg !3488
  br i1 %83, label %result_block95, label %check_subtype90, !dbg !3488

result_block95:                                   ; preds = %parent_type_block92, %check_subtype90
  %84 = phi i1 [ false, %parent_type_block92 ], [ true, %check_subtype90 ], !dbg !3488
  br i1 %84, label %switch.case96, label %next_if116, !dbg !3488

switch.case96:                                    ; preds = %result_block95
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3489, metadata !DIExpression()), !dbg !3491
  %85 = load ptr, ptr %v, align 8, !dbg !3492
  %checknull97 = icmp eq ptr %85, null, !dbg !3492
  %86 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !3492
  br i1 %86, label %panic98, label %checkok102, !dbg !3492

checkok102:                                       ; preds = %switch.case96
  %87 = load i32, ptr %85, align 4, !dbg !3493
  store i32 %87, ptr %i, align 4, !dbg !3493
  %88 = load i8, ptr %is_mixed_signed, align 1, !dbg !3494
  %89 = trunc i8 %88 to i1, !dbg !3494
  br i1 %89, label %and.rhs103, label %and.phi105, !dbg !3494

and.rhs103:                                       ; preds = %checkok102
  %90 = load i32, ptr %i, align 4, !dbg !3495
  %lt104 = icmp slt i32 %90, 0, !dbg !3495
  br label %and.phi105, !dbg !3495

and.phi105:                                       ; preds = %and.rhs103, %checkok102
  %val106 = phi i1 [ false, %checkok102 ], [ %lt104, %and.rhs103 ], !dbg !3495
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !3495

if.then107:                                       ; preds = %and.phi105
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3496
  br label %after_assign, !dbg !3496

if.exit108:                                       ; preds = %and.phi105
  %91 = load i32, ptr %i, align 4, !dbg !3497
  %92 = load i32, ptr %max, align 4, !dbg !3498
  %gt109 = icmp sgt i32 %91, %92, !dbg !3497
  br i1 %gt109, label %or.phi112, label %or.rhs110, !dbg !3497

or.rhs110:                                        ; preds = %if.exit108
  %93 = load i32, ptr %i, align 4, !dbg !3499
  %94 = load i32, ptr %min, align 4, !dbg !3500
  %lt111 = icmp slt i32 %93, %94, !dbg !3499
  br label %or.phi112, !dbg !3499

or.phi112:                                        ; preds = %or.rhs110, %if.exit108
  %val113 = phi i1 [ true, %if.exit108 ], [ %lt111, %or.rhs110 ], !dbg !3499
  br i1 %val113, label %if.then114, label %if.exit115, !dbg !3499

if.then114:                                       ; preds = %or.phi112
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3501
  br label %after_assign, !dbg !3501

if.exit115:                                       ; preds = %or.phi112
  %95 = load i32, ptr %i, align 4, !dbg !3502
  store i32 %95, ptr %blockret, align 4, !dbg !3502
  br label %expr_block.exit, !dbg !3502

next_if116:                                       ; preds = %result_block95
  br label %check_subtype117, !dbg !3503

check_subtype117:                                 ; preds = %parent_type_block119, %next_if116
  %96 = phi i64 [ %54, %next_if116 ], [ %typeid.parent121, %parent_type_block119 ], !dbg !3503
  %eq118 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %96, !dbg !3503
  br i1 %eq118, label %result_block122, label %parent_type_block119, !dbg !3503

parent_type_block119:                             ; preds = %check_subtype117
  %97 = inttoptr i64 %96 to ptr, !dbg !3503
  %ptradd120 = getelementptr inbounds i8, ptr %97, i64 8, !dbg !3503
  %typeid.parent121 = load i64, ptr %ptradd120, align 8, !dbg !3503
  %98 = icmp eq i64 %typeid.parent121, 0, !dbg !3503
  br i1 %98, label %result_block122, label %check_subtype117, !dbg !3503

result_block122:                                  ; preds = %parent_type_block119, %check_subtype117
  %99 = phi i1 [ false, %parent_type_block119 ], [ true, %check_subtype117 ], !dbg !3503
  br i1 %99, label %switch.case123, label %next_if145, !dbg !3503

switch.case123:                                   ; preds = %result_block122
  call void @llvm.dbg.declare(metadata ptr %l, metadata !3504, metadata !DIExpression()), !dbg !3506
  %100 = load ptr, ptr %v, align 8, !dbg !3507
  %checknull124 = icmp eq ptr %100, null, !dbg !3507
  %101 = call i1 @llvm.expect.i1(i1 %checknull124, i1 false), !dbg !3507
  br i1 %101, label %panic125, label %checkok129, !dbg !3507

checkok129:                                       ; preds = %switch.case123
  %102 = load i64, ptr %100, align 8, !dbg !3508
  store i64 %102, ptr %l, align 8, !dbg !3508
  %103 = load i8, ptr %is_mixed_signed, align 1, !dbg !3509
  %104 = trunc i8 %103 to i1, !dbg !3509
  br i1 %104, label %and.rhs130, label %and.phi132, !dbg !3509

and.rhs130:                                       ; preds = %checkok129
  %105 = load i64, ptr %l, align 8, !dbg !3510
  %lt131 = icmp slt i64 %105, 0, !dbg !3510
  br label %and.phi132, !dbg !3510

and.phi132:                                       ; preds = %and.rhs130, %checkok129
  %val133 = phi i1 [ false, %checkok129 ], [ %lt131, %and.rhs130 ], !dbg !3510
  br i1 %val133, label %if.then134, label %if.exit135, !dbg !3510

if.then134:                                       ; preds = %and.phi132
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3511
  br label %after_assign, !dbg !3511

if.exit135:                                       ; preds = %and.phi132
  %106 = load i64, ptr %l, align 8, !dbg !3512
  %107 = load i32, ptr %max, align 4, !dbg !3513
  %sext136 = sext i32 %107 to i64, !dbg !3513
  %gt137 = icmp sgt i64 %106, %sext136, !dbg !3512
  br i1 %gt137, label %or.phi141, label %or.rhs138, !dbg !3512

or.rhs138:                                        ; preds = %if.exit135
  %108 = load i64, ptr %l, align 8, !dbg !3514
  %109 = load i32, ptr %min, align 4, !dbg !3515
  %sext139 = sext i32 %109 to i64, !dbg !3515
  %lt140 = icmp slt i64 %108, %sext139, !dbg !3514
  br label %or.phi141, !dbg !3514

or.phi141:                                        ; preds = %or.rhs138, %if.exit135
  %val142 = phi i1 [ true, %if.exit135 ], [ %lt140, %or.rhs138 ], !dbg !3514
  br i1 %val142, label %if.then143, label %if.exit144, !dbg !3514

if.then143:                                       ; preds = %or.phi141
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3516
  br label %after_assign, !dbg !3516

if.exit144:                                       ; preds = %or.phi141
  %110 = load i64, ptr %l, align 8, !dbg !3517
  %trunc = trunc i64 %110 to i32, !dbg !3517
  store i32 %trunc, ptr %blockret, align 4, !dbg !3517
  br label %expr_block.exit, !dbg !3517

next_if145:                                       ; preds = %result_block122
  br label %check_subtype146, !dbg !3518

check_subtype146:                                 ; preds = %parent_type_block148, %next_if145
  %111 = phi i64 [ %54, %next_if145 ], [ %typeid.parent150, %parent_type_block148 ], !dbg !3518
  %eq147 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %111, !dbg !3518
  br i1 %eq147, label %result_block151, label %parent_type_block148, !dbg !3518

parent_type_block148:                             ; preds = %check_subtype146
  %112 = inttoptr i64 %111 to ptr, !dbg !3518
  %ptradd149 = getelementptr inbounds i8, ptr %112, i64 8, !dbg !3518
  %typeid.parent150 = load i64, ptr %ptradd149, align 8, !dbg !3518
  %113 = icmp eq i64 %typeid.parent150, 0, !dbg !3518
  br i1 %113, label %result_block151, label %check_subtype146, !dbg !3518

result_block151:                                  ; preds = %parent_type_block148, %check_subtype146
  %114 = phi i1 [ false, %parent_type_block148 ], [ true, %check_subtype146 ], !dbg !3518
  br i1 %114, label %switch.case152, label %next_if176, !dbg !3518

switch.case152:                                   ; preds = %result_block151
  call void @llvm.dbg.declare(metadata ptr %i153, metadata !3519, metadata !DIExpression()), !dbg !3521
  %115 = load ptr, ptr %v, align 8, !dbg !3522
  %checknull154 = icmp eq ptr %115, null, !dbg !3522
  %116 = call i1 @llvm.expect.i1(i1 %checknull154, i1 false), !dbg !3522
  br i1 %116, label %panic155, label %checkok159, !dbg !3522

checkok159:                                       ; preds = %switch.case152
  %117 = load i128, ptr %115, align 16, !dbg !3523
  store i128 %117, ptr %i153, align 16, !dbg !3523
  %118 = load i8, ptr %is_mixed_signed, align 1, !dbg !3524
  %119 = trunc i8 %118 to i1, !dbg !3524
  br i1 %119, label %and.rhs160, label %and.phi162, !dbg !3524

and.rhs160:                                       ; preds = %checkok159
  %120 = load i128, ptr %i153, align 16, !dbg !3525
  %lt161 = icmp slt i128 %120, 0, !dbg !3525
  br label %and.phi162, !dbg !3525

and.phi162:                                       ; preds = %and.rhs160, %checkok159
  %val163 = phi i1 [ false, %checkok159 ], [ %lt161, %and.rhs160 ], !dbg !3525
  br i1 %val163, label %if.then164, label %if.exit165, !dbg !3525

if.then164:                                       ; preds = %and.phi162
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %intval.f, align 8, !dbg !3526
  br label %after_assign, !dbg !3526

if.exit165:                                       ; preds = %and.phi162
  %121 = load i128, ptr %i153, align 16, !dbg !3527
  %122 = load i32, ptr %max, align 4, !dbg !3528
  %sext166 = sext i32 %122 to i128, !dbg !3528
  %gt167 = icmp sgt i128 %121, %sext166, !dbg !3527
  br i1 %gt167, label %or.phi171, label %or.rhs168, !dbg !3527

or.rhs168:                                        ; preds = %if.exit165
  %123 = load i128, ptr %i153, align 16, !dbg !3529
  %124 = load i32, ptr %min, align 4, !dbg !3530
  %sext169 = sext i32 %124 to i128, !dbg !3530
  %lt170 = icmp slt i128 %123, %sext169, !dbg !3529
  br label %or.phi171, !dbg !3529

or.phi171:                                        ; preds = %or.rhs168, %if.exit165
  %val172 = phi i1 [ true, %if.exit165 ], [ %lt170, %or.rhs168 ], !dbg !3529
  br i1 %val172, label %if.then173, label %if.exit174, !dbg !3529

if.then173:                                       ; preds = %or.phi171
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3531
  br label %after_assign, !dbg !3531

if.exit174:                                       ; preds = %or.phi171
  %125 = load i128, ptr %i153, align 16, !dbg !3532
  %trunc175 = trunc i128 %125 to i32, !dbg !3532
  store i32 %trunc175, ptr %blockret, align 4, !dbg !3532
  br label %expr_block.exit, !dbg !3532

next_if176:                                       ; preds = %result_block151
  br label %check_subtype177, !dbg !3533

check_subtype177:                                 ; preds = %parent_type_block179, %next_if176
  %126 = phi i64 [ %54, %next_if176 ], [ %typeid.parent181, %parent_type_block179 ], !dbg !3533
  %eq178 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %126, !dbg !3533
  br i1 %eq178, label %result_block182, label %parent_type_block179, !dbg !3533

parent_type_block179:                             ; preds = %check_subtype177
  %127 = inttoptr i64 %126 to ptr, !dbg !3533
  %ptradd180 = getelementptr inbounds i8, ptr %127, i64 8, !dbg !3533
  %typeid.parent181 = load i64, ptr %ptradd180, align 8, !dbg !3533
  %128 = icmp eq i64 %typeid.parent181, 0, !dbg !3533
  br i1 %128, label %result_block182, label %check_subtype177, !dbg !3533

result_block182:                                  ; preds = %parent_type_block179, %check_subtype177
  %129 = phi i1 [ false, %parent_type_block179 ], [ true, %check_subtype177 ], !dbg !3533
  br i1 %129, label %switch.case183, label %next_if195, !dbg !3533

switch.case183:                                   ; preds = %result_block182
  call void @llvm.dbg.declare(metadata ptr %c184, metadata !3534, metadata !DIExpression()), !dbg !3536
  %130 = load ptr, ptr %v, align 8, !dbg !3537
  %checknull185 = icmp eq ptr %130, null, !dbg !3537
  %131 = call i1 @llvm.expect.i1(i1 %checknull185, i1 false), !dbg !3537
  br i1 %131, label %panic186, label %checkok190, !dbg !3537

checkok190:                                       ; preds = %switch.case183
  %132 = load i8, ptr %130, align 1, !dbg !3538
  store i8 %132, ptr %c184, align 1, !dbg !3538
  %133 = load i8, ptr %c184, align 1, !dbg !3539
  %zext = zext i8 %133 to i32, !dbg !3539
  %134 = load i32, ptr %max, align 4, !dbg !3540
  %lt191 = icmp slt i32 %134, %zext, !dbg !3539
  %check = icmp slt i32 %zext, 0, !dbg !3539
  %siui-lt = or i1 %check, %lt191, !dbg !3539
  br i1 %siui-lt, label %if.then192, label %if.exit193, !dbg !3539

if.then192:                                       ; preds = %checkok190
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3541
  br label %after_assign, !dbg !3541

if.exit193:                                       ; preds = %checkok190
  %135 = load i8, ptr %c184, align 1, !dbg !3542
  %zext194 = zext i8 %135 to i32, !dbg !3542
  store i32 %zext194, ptr %blockret, align 4, !dbg !3542
  br label %expr_block.exit, !dbg !3542

next_if195:                                       ; preds = %result_block182
  br label %check_subtype196, !dbg !3543

check_subtype196:                                 ; preds = %parent_type_block198, %next_if195
  %136 = phi i64 [ %54, %next_if195 ], [ %typeid.parent200, %parent_type_block198 ], !dbg !3543
  %eq197 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %136, !dbg !3543
  br i1 %eq197, label %result_block201, label %parent_type_block198, !dbg !3543

parent_type_block198:                             ; preds = %check_subtype196
  %137 = inttoptr i64 %136 to ptr, !dbg !3543
  %ptradd199 = getelementptr inbounds i8, ptr %137, i64 8, !dbg !3543
  %typeid.parent200 = load i64, ptr %ptradd199, align 8, !dbg !3543
  %138 = icmp eq i64 %typeid.parent200, 0, !dbg !3543
  br i1 %138, label %result_block201, label %check_subtype196, !dbg !3543

result_block201:                                  ; preds = %parent_type_block198, %check_subtype196
  %139 = phi i1 [ false, %parent_type_block198 ], [ true, %check_subtype196 ], !dbg !3543
  br i1 %139, label %switch.case202, label %next_if223, !dbg !3543

switch.case202:                                   ; preds = %result_block201
  call void @llvm.dbg.declare(metadata ptr %s203, metadata !3544, metadata !DIExpression()), !dbg !3546
  %140 = load ptr, ptr %v, align 8, !dbg !3547
  %checknull204 = icmp eq ptr %140, null, !dbg !3547
  %141 = call i1 @llvm.expect.i1(i1 %checknull204, i1 false), !dbg !3547
  br i1 %141, label %panic205, label %checkok209, !dbg !3547

checkok209:                                       ; preds = %switch.case202
  %142 = load i16, ptr %140, align 2, !dbg !3548
  store i16 %142, ptr %s203, align 2, !dbg !3548
  %143 = load i16, ptr %s203, align 2, !dbg !3549
  %zext210 = zext i16 %143 to i32, !dbg !3549
  %144 = load i32, ptr %max, align 4, !dbg !3550
  %lt211 = icmp slt i32 %144, %zext210, !dbg !3549
  %check212 = icmp slt i32 %zext210, 0, !dbg !3549
  %siui-lt213 = or i1 %check212, %lt211, !dbg !3549
  br i1 %siui-lt213, label %or.phi218, label %or.rhs214, !dbg !3549

or.rhs214:                                        ; preds = %checkok209
  %145 = load i16, ptr %s203, align 2, !dbg !3551
  %zext215 = zext i16 %145 to i32, !dbg !3551
  %146 = load i32, ptr %min, align 4, !dbg !3552
  %gt216 = icmp sgt i32 %146, %zext215, !dbg !3551
  %check217 = icmp sge i32 %zext215, 0, !dbg !3551
  %siui-gt = and i1 %check217, %gt216, !dbg !3551
  br label %or.phi218, !dbg !3551

or.phi218:                                        ; preds = %or.rhs214, %checkok209
  %val219 = phi i1 [ true, %checkok209 ], [ %siui-gt, %or.rhs214 ], !dbg !3551
  br i1 %val219, label %if.then220, label %if.exit221, !dbg !3551

if.then220:                                       ; preds = %or.phi218
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3553
  br label %after_assign, !dbg !3553

if.exit221:                                       ; preds = %or.phi218
  %147 = load i16, ptr %s203, align 2, !dbg !3554
  %zext222 = zext i16 %147 to i32, !dbg !3554
  store i32 %zext222, ptr %blockret, align 4, !dbg !3554
  br label %expr_block.exit, !dbg !3554

next_if223:                                       ; preds = %result_block201
  br label %check_subtype224, !dbg !3555

check_subtype224:                                 ; preds = %parent_type_block226, %next_if223
  %148 = phi i64 [ %54, %next_if223 ], [ %typeid.parent228, %parent_type_block226 ], !dbg !3555
  %eq225 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %148, !dbg !3555
  br i1 %eq225, label %result_block229, label %parent_type_block226, !dbg !3555

parent_type_block226:                             ; preds = %check_subtype224
  %149 = inttoptr i64 %148 to ptr, !dbg !3555
  %ptradd227 = getelementptr inbounds i8, ptr %149, i64 8, !dbg !3555
  %typeid.parent228 = load i64, ptr %ptradd227, align 8, !dbg !3555
  %150 = icmp eq i64 %typeid.parent228, 0, !dbg !3555
  br i1 %150, label %result_block229, label %check_subtype224, !dbg !3555

result_block229:                                  ; preds = %parent_type_block226, %check_subtype224
  %151 = phi i1 [ false, %parent_type_block226 ], [ true, %check_subtype224 ], !dbg !3555
  br i1 %151, label %switch.case230, label %next_if249, !dbg !3555

switch.case230:                                   ; preds = %result_block229
  call void @llvm.dbg.declare(metadata ptr %i231, metadata !3556, metadata !DIExpression()), !dbg !3558
  %152 = load ptr, ptr %v, align 8, !dbg !3559
  %checknull232 = icmp eq ptr %152, null, !dbg !3559
  %153 = call i1 @llvm.expect.i1(i1 %checknull232, i1 false), !dbg !3559
  br i1 %153, label %panic233, label %checkok237, !dbg !3559

checkok237:                                       ; preds = %switch.case230
  %154 = load i32, ptr %152, align 4, !dbg !3560
  store i32 %154, ptr %i231, align 4, !dbg !3560
  %155 = load i32, ptr %i231, align 4, !dbg !3561
  %156 = load i32, ptr %max, align 4, !dbg !3562
  %lt238 = icmp slt i32 %156, %155, !dbg !3561
  %check239 = icmp slt i32 %155, 0, !dbg !3561
  %siui-lt240 = or i1 %check239, %lt238, !dbg !3561
  br i1 %siui-lt240, label %or.phi245, label %or.rhs241, !dbg !3561

or.rhs241:                                        ; preds = %checkok237
  %157 = load i32, ptr %i231, align 4, !dbg !3563
  %158 = load i32, ptr %min, align 4, !dbg !3564
  %gt242 = icmp sgt i32 %158, %157, !dbg !3563
  %check243 = icmp sge i32 %157, 0, !dbg !3563
  %siui-gt244 = and i1 %check243, %gt242, !dbg !3563
  br label %or.phi245, !dbg !3563

or.phi245:                                        ; preds = %or.rhs241, %checkok237
  %val246 = phi i1 [ true, %checkok237 ], [ %siui-gt244, %or.rhs241 ], !dbg !3563
  br i1 %val246, label %if.then247, label %if.exit248, !dbg !3563

if.then247:                                       ; preds = %or.phi245
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3565
  br label %after_assign, !dbg !3565

if.exit248:                                       ; preds = %or.phi245
  %159 = load i32, ptr %i231, align 4, !dbg !3566
  store i32 %159, ptr %blockret, align 4, !dbg !3566
  br label %expr_block.exit, !dbg !3566

next_if249:                                       ; preds = %result_block229
  br label %check_subtype250, !dbg !3567

check_subtype250:                                 ; preds = %parent_type_block252, %next_if249
  %160 = phi i64 [ %54, %next_if249 ], [ %typeid.parent254, %parent_type_block252 ], !dbg !3567
  %eq251 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %160, !dbg !3567
  br i1 %eq251, label %result_block255, label %parent_type_block252, !dbg !3567

parent_type_block252:                             ; preds = %check_subtype250
  %161 = inttoptr i64 %160 to ptr, !dbg !3567
  %ptradd253 = getelementptr inbounds i8, ptr %161, i64 8, !dbg !3567
  %typeid.parent254 = load i64, ptr %ptradd253, align 8, !dbg !3567
  %162 = icmp eq i64 %typeid.parent254, 0, !dbg !3567
  br i1 %162, label %result_block255, label %check_subtype250, !dbg !3567

result_block255:                                  ; preds = %parent_type_block252, %check_subtype250
  %163 = phi i1 [ false, %parent_type_block252 ], [ true, %check_subtype250 ], !dbg !3567
  br i1 %163, label %switch.case256, label %next_if278, !dbg !3567

switch.case256:                                   ; preds = %result_block255
  call void @llvm.dbg.declare(metadata ptr %l257, metadata !3568, metadata !DIExpression()), !dbg !3570
  %164 = load ptr, ptr %v, align 8, !dbg !3571
  %checknull258 = icmp eq ptr %164, null, !dbg !3571
  %165 = call i1 @llvm.expect.i1(i1 %checknull258, i1 false), !dbg !3571
  br i1 %165, label %panic259, label %checkok263, !dbg !3571

checkok263:                                       ; preds = %switch.case256
  %166 = load i64, ptr %164, align 8, !dbg !3572
  store i64 %166, ptr %l257, align 8, !dbg !3572
  %167 = load i64, ptr %l257, align 8, !dbg !3573
  %168 = load i32, ptr %max, align 4, !dbg !3574
  %sext264 = sext i32 %168 to i64, !dbg !3574
  %lt265 = icmp slt i64 %sext264, %167, !dbg !3573
  %check266 = icmp slt i64 %167, 0, !dbg !3573
  %siui-lt267 = or i1 %check266, %lt265, !dbg !3573
  br i1 %siui-lt267, label %or.phi273, label %or.rhs268, !dbg !3573

or.rhs268:                                        ; preds = %checkok263
  %169 = load i64, ptr %l257, align 8, !dbg !3575
  %170 = load i32, ptr %min, align 4, !dbg !3576
  %sext269 = sext i32 %170 to i64, !dbg !3576
  %gt270 = icmp sgt i64 %sext269, %169, !dbg !3575
  %check271 = icmp sge i64 %169, 0, !dbg !3575
  %siui-gt272 = and i1 %check271, %gt270, !dbg !3575
  br label %or.phi273, !dbg !3575

or.phi273:                                        ; preds = %or.rhs268, %checkok263
  %val274 = phi i1 [ true, %checkok263 ], [ %siui-gt272, %or.rhs268 ], !dbg !3575
  br i1 %val274, label %if.then275, label %if.exit276, !dbg !3575

if.then275:                                       ; preds = %or.phi273
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3577
  br label %after_assign, !dbg !3577

if.exit276:                                       ; preds = %or.phi273
  %171 = load i64, ptr %l257, align 8, !dbg !3578
  %trunc277 = trunc i64 %171 to i32, !dbg !3578
  store i32 %trunc277, ptr %blockret, align 4, !dbg !3578
  br label %expr_block.exit, !dbg !3578

next_if278:                                       ; preds = %result_block255
  br label %check_subtype279, !dbg !3579

check_subtype279:                                 ; preds = %parent_type_block281, %next_if278
  %172 = phi i64 [ %54, %next_if278 ], [ %typeid.parent283, %parent_type_block281 ], !dbg !3579
  %eq280 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %172, !dbg !3579
  br i1 %eq280, label %result_block284, label %parent_type_block281, !dbg !3579

parent_type_block281:                             ; preds = %check_subtype279
  %173 = inttoptr i64 %172 to ptr, !dbg !3579
  %ptradd282 = getelementptr inbounds i8, ptr %173, i64 8, !dbg !3579
  %typeid.parent283 = load i64, ptr %ptradd282, align 8, !dbg !3579
  %174 = icmp eq i64 %typeid.parent283, 0, !dbg !3579
  br i1 %174, label %result_block284, label %check_subtype279, !dbg !3579

result_block284:                                  ; preds = %parent_type_block281, %check_subtype279
  %175 = phi i1 [ false, %parent_type_block281 ], [ true, %check_subtype279 ], !dbg !3579
  br i1 %175, label %switch.case285, label %next_if307, !dbg !3579

switch.case285:                                   ; preds = %result_block284
  call void @llvm.dbg.declare(metadata ptr %i286, metadata !3580, metadata !DIExpression()), !dbg !3582
  %176 = load ptr, ptr %v, align 8, !dbg !3583
  %checknull287 = icmp eq ptr %176, null, !dbg !3583
  %177 = call i1 @llvm.expect.i1(i1 %checknull287, i1 false), !dbg !3583
  br i1 %177, label %panic288, label %checkok292, !dbg !3583

checkok292:                                       ; preds = %switch.case285
  %178 = load i128, ptr %176, align 16, !dbg !3584
  store i128 %178, ptr %i286, align 16, !dbg !3584
  %179 = load i128, ptr %i286, align 16, !dbg !3585
  %180 = load i32, ptr %max, align 4, !dbg !3586
  %sext293 = sext i32 %180 to i128, !dbg !3586
  %lt294 = icmp slt i128 %sext293, %179, !dbg !3585
  %check295 = icmp slt i128 %179, 0, !dbg !3585
  %siui-lt296 = or i1 %check295, %lt294, !dbg !3585
  br i1 %siui-lt296, label %or.phi302, label %or.rhs297, !dbg !3585

or.rhs297:                                        ; preds = %checkok292
  %181 = load i128, ptr %i286, align 16, !dbg !3587
  %182 = load i32, ptr %min, align 4, !dbg !3588
  %sext298 = sext i32 %182 to i128, !dbg !3588
  %gt299 = icmp sgt i128 %sext298, %181, !dbg !3587
  %check300 = icmp sge i128 %181, 0, !dbg !3587
  %siui-gt301 = and i1 %check300, %gt299, !dbg !3587
  br label %or.phi302, !dbg !3587

or.phi302:                                        ; preds = %or.rhs297, %checkok292
  %val303 = phi i1 [ true, %checkok292 ], [ %siui-gt301, %or.rhs297 ], !dbg !3587
  br i1 %val303, label %if.then304, label %if.exit305, !dbg !3587

if.then304:                                       ; preds = %or.phi302
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %intval.f, align 8, !dbg !3589
  br label %after_assign, !dbg !3589

if.exit305:                                       ; preds = %or.phi302
  %183 = load i128, ptr %i286, align 16, !dbg !3590
  %trunc306 = trunc i128 %183 to i32, !dbg !3590
  store i32 %trunc306, ptr %blockret, align 4, !dbg !3590
  br label %expr_block.exit, !dbg !3590

next_if307:                                       ; preds = %result_block284
  br label %switch.default, !dbg !3590

switch.default:                                   ; preds = %next_if307
  store %"char[]" { ptr @.str, i64 30 }, ptr %string, align 8
  %184 = load [2 x i64], ptr %string, align 8, !dbg !3591
  store %"char[]" { ptr @.str.133, i64 20 }, ptr %taddr308, align 8
  %185 = load [2 x i64], ptr %taddr308, align 8
  store %"char[]" { ptr @.str.134, i64 25 }, ptr %taddr309, align 8
  %186 = load [2 x i64], ptr %taddr309, align 8
  store %"any[]" zeroinitializer, ptr %taddr310, align 8
  %187 = load [2 x i64], ptr %taddr310, align 8
  call void @std.core.builtin.panicf([2 x i64] %184, [2 x i64] %185, [2 x i64] %186, i32 687, [2 x i64] %187), !dbg !3595
  unreachable, !dbg !3596

expr_block.exit:                                  ; preds = %if.exit305, %if.exit276, %if.exit248, %if.exit221, %if.exit193, %if.exit174, %if.exit144, %if.exit115, %if.exit87, %if.exit60
  %188 = load i32, ptr %blockret, align 4, !dbg !3596
  store i32 %188, ptr %intval, align 4, !dbg !3596
  store i64 0, ptr %intval.f, align 8, !dbg !3596
  br label %after_assign, !dbg !3596

after_assign:                                     ; preds = %expr_block.exit, %if.then304, %if.then275, %if.then247, %if.then220, %if.then192, %if.then173, %if.then164, %if.then143, %if.then134, %if.then114, %if.then107, %if.then86, %if.then80, %if.then59
  %optval = load i64, ptr %intval.f, align 8, !dbg !3597
  %not_err = icmp eq i64 %optval, 0, !dbg !3597
  %189 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3597
  br i1 %189, label %after_check, label %else_block, !dbg !3597

after_check:                                      ; preds = %after_assign
  %190 = load i32, ptr %intval, align 4, !dbg !3597
  br label %phi_block, !dbg !3597

else_block:                                       ; preds = %after_assign
  store i64 ptrtoint (ptr @"std.io.FormattingFault$BAD_FORMAT" to i64), ptr %reterr311, align 8, !dbg !3598
  br label %err_retblock, !dbg !3598

phi_block:                                        ; preds = %after_check
  store i32 %190, ptr %0, align 4, !dbg !3598
  ret i64 0, !dbg !3598

err_retblock:                                     ; preds = %else_block
  %191 = load i64, ptr %reterr311, align 8, !dbg !3598
  ret i64 %191, !dbg !3598

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.116, i64 50 }, ptr %taddr, align 8
  %192 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr1, align 8
  %193 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr2, align 8
  %194 = load [2 x i64], ptr %taddr2, align 8
  %195 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %195([2 x i64] %192, [2 x i64] %193, [2 x i64] %194, i32 679), !dbg !3415
  unreachable, !dbg !3415

panic7:                                           ; preds = %if.exit5
  store %"char[]" { ptr @.panic_msg.116, i64 50 }, ptr %taddr8, align 8
  %196 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr9, align 8
  %197 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr10, align 8
  %198 = load [2 x i64], ptr %taddr10, align 8
  %199 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %199([2 x i64] %196, [2 x i64] %197, [2 x i64] %198, i32 682), !dbg !3423
  unreachable, !dbg !3423

panic15:                                          ; preds = %if.exit13
  store %"char[]" { ptr @.panic_msg.118, i64 55 }, ptr %taddr16, align 8
  %200 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr17, align 8
  %201 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr18, align 8
  %202 = load [2 x i64], ptr %taddr18, align 8
  %203 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %203([2 x i64] %200, [2 x i64] %201, [2 x i64] %202, i32 684), !dbg !3428
  unreachable, !dbg !3428

panic24:                                          ; preds = %if.exit22
  store %"char[]" { ptr @.panic_msg.118, i64 55 }, ptr %taddr25, align 8
  %204 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.file.103, i64 20 }, ptr %taddr26, align 8
  %205 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr27, align 8
  %206 = load [2 x i64], ptr %taddr27, align 8
  %207 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %207([2 x i64] %204, [2 x i64] %205, [2 x i64] %206, i32 685), !dbg !3435
  unreachable, !dbg !3435

panic53:                                          ; preds = %switch.case
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr54, align 8
  %208 = load [2 x i64], ptr %taddr54, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr55, align 8
  %209 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr56, align 8
  %210 = load [2 x i64], ptr %taddr56, align 8
  %211 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %211([2 x i64] %208, [2 x i64] %209, [2 x i64] %210, i32 35), !dbg !3468
  unreachable, !dbg !3468

panic70:                                          ; preds = %switch.case68
  store %"char[]" { ptr @.panic_msg.125, i64 53 }, ptr %taddr71, align 8
  %212 = load [2 x i64], ptr %taddr71, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr72, align 8
  %213 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr73, align 8
  %214 = load [2 x i64], ptr %taddr73, align 8
  %215 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %215([2 x i64] %212, [2 x i64] %213, [2 x i64] %214, i32 39), !dbg !3478
  unreachable, !dbg !3478

panic98:                                          ; preds = %switch.case96
  store %"char[]" { ptr @.panic_msg.126, i64 51 }, ptr %taddr99, align 8
  %216 = load [2 x i64], ptr %taddr99, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr100, align 8
  %217 = load [2 x i64], ptr %taddr100, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr101, align 8
  %218 = load [2 x i64], ptr %taddr101, align 8
  %219 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %219([2 x i64] %216, [2 x i64] %217, [2 x i64] %218, i32 44), !dbg !3493
  unreachable, !dbg !3493

panic125:                                         ; preds = %switch.case123
  store %"char[]" { ptr @.panic_msg.127, i64 52 }, ptr %taddr126, align 8
  %220 = load [2 x i64], ptr %taddr126, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr127, align 8
  %221 = load [2 x i64], ptr %taddr127, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr128, align 8
  %222 = load [2 x i64], ptr %taddr128, align 8
  %223 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %223([2 x i64] %220, [2 x i64] %221, [2 x i64] %222, i32 49), !dbg !3508
  unreachable, !dbg !3508

panic155:                                         ; preds = %switch.case152
  store %"char[]" { ptr @.panic_msg.128, i64 54 }, ptr %taddr156, align 8
  %224 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr157, align 8
  %225 = load [2 x i64], ptr %taddr157, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr158, align 8
  %226 = load [2 x i64], ptr %taddr158, align 8
  %227 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %227([2 x i64] %224, [2 x i64] %225, [2 x i64] %226, i32 54), !dbg !3523
  unreachable, !dbg !3523

panic186:                                         ; preds = %switch.case183
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr187, align 8
  %228 = load [2 x i64], ptr %taddr187, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr188, align 8
  %229 = load [2 x i64], ptr %taddr188, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr189, align 8
  %230 = load [2 x i64], ptr %taddr189, align 8
  %231 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %231([2 x i64] %228, [2 x i64] %229, [2 x i64] %230, i32 59), !dbg !3538
  unreachable, !dbg !3538

panic205:                                         ; preds = %switch.case202
  store %"char[]" { ptr @.panic_msg.129, i64 54 }, ptr %taddr206, align 8
  %232 = load [2 x i64], ptr %taddr206, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr207, align 8
  %233 = load [2 x i64], ptr %taddr207, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr208, align 8
  %234 = load [2 x i64], ptr %taddr208, align 8
  %235 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %235([2 x i64] %232, [2 x i64] %233, [2 x i64] %234, i32 63), !dbg !3548
  unreachable, !dbg !3548

panic233:                                         ; preds = %switch.case230
  store %"char[]" { ptr @.panic_msg.130, i64 52 }, ptr %taddr234, align 8
  %236 = load [2 x i64], ptr %taddr234, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr235, align 8
  %237 = load [2 x i64], ptr %taddr235, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr236, align 8
  %238 = load [2 x i64], ptr %taddr236, align 8
  %239 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %239([2 x i64] %236, [2 x i64] %237, [2 x i64] %238, i32 67), !dbg !3560
  unreachable, !dbg !3560

panic259:                                         ; preds = %switch.case256
  store %"char[]" { ptr @.panic_msg.131, i64 53 }, ptr %taddr260, align 8
  %240 = load [2 x i64], ptr %taddr260, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr261, align 8
  %241 = load [2 x i64], ptr %taddr261, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr262, align 8
  %242 = load [2 x i64], ptr %taddr262, align 8
  %243 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %243([2 x i64] %240, [2 x i64] %241, [2 x i64] %242, i32 71), !dbg !3572
  unreachable, !dbg !3572

panic288:                                         ; preds = %switch.case285
  store %"char[]" { ptr @.panic_msg.132, i64 55 }, ptr %taddr289, align 8
  %244 = load [2 x i64], ptr %taddr289, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr290, align 8
  %245 = load [2 x i64], ptr %taddr290, align 8
  store %"char[]" { ptr @.func.117, i64 25 }, ptr %taddr291, align 8
  %246 = load [2 x i64], ptr %taddr291, align 8
  %247 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %247([2 x i64] %244, [2 x i64] %245, [2 x i64] %246, i32 75), !dbg !3584
  unreachable, !dbg !3584
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.fprintf(ptr %0, [2 x i64] %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !3599 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %1, ptr %out, align 8
  call void @llvm.dbg.declare(metadata ptr %out, metadata !3606, metadata !DIExpression()), !dbg !3607
  store [2 x i64] %2, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3608, metadata !DIExpression()), !dbg !3609
  store [2 x i64] %3, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3610, metadata !DIExpression()), !dbg !3611
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3612, metadata !DIExpression()), !dbg !3613
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3613
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !3614
  %4 = load [2 x i64], ptr %format, align 8
  %5 = load [2 x i64], ptr %args, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %4, [2 x i64] %5), !dbg !3615
  %not_err = icmp eq i64 %6, 0, !dbg !3615
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3615
  br i1 %7, label %after_check, label %assign_optional, !dbg !3615

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %reterr, align 8, !dbg !3615
  br label %err_retblock, !dbg !3615

after_check:                                      ; preds = %entry
  %8 = load i64, ptr %retparam, align 8, !dbg !3615
  store i64 %8, ptr %0, align 8, !dbg !3615
  ret i64 0, !dbg !3615

err_retblock:                                     ; preds = %assign_optional
  %9 = load i64, ptr %reterr, align 8, !dbg !3615
  ret i64 %9, !dbg !3615
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.fprintfn(ptr %0, [2 x i64] %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !3616 {
entry:
  %out = alloca %any, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var1 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %.inlinecache11 = alloca ptr, align 8
  %.cachedtype12 = alloca ptr, align 8
  %error_var19 = alloca i64, align 8
  %.inlinecache21 = alloca ptr, align 8
  %.cachedtype22 = alloca ptr, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype22, align 8
  store ptr null, ptr %.cachedtype12, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %out, align 8
  call void @llvm.dbg.declare(metadata ptr %out, metadata !3617, metadata !DIExpression()), !dbg !3618
  store [2 x i64] %2, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3619, metadata !DIExpression()), !dbg !3620
  store [2 x i64] %3, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3621, metadata !DIExpression()), !dbg !3622
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3623, metadata !DIExpression()), !dbg !3624
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3624
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %out), !dbg !3625
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3626, metadata !DIExpression()), !dbg !3627
  %4 = load [2 x i64], ptr %format, align 8
  %5 = load [2 x i64], ptr %args, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %4, [2 x i64] %5), !dbg !3628
  %not_err = icmp eq i64 %6, 0, !dbg !3628
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3628
  br i1 %7, label %after_check, label %assign_optional, !dbg !3628

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !3628
  br label %guard_block, !dbg !3628

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !3628

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !3628
  ret i64 %8, !dbg !3628

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !3628
  store i64 %9, ptr %len, align 8, !dbg !3628
  %ptradd = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3629
  %10 = load i64, ptr %ptradd, align 8, !dbg !3629
  %11 = inttoptr i64 %10 to ptr, !dbg !3629
  %type = load ptr, ptr %.cachedtype, align 8
  %12 = icmp eq ptr %11, %type
  br i1 %12, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %noerr_block
  %ptradd2 = getelementptr inbounds i8, ptr %11, i64 16
  %13 = load ptr, ptr %ptradd2, align 8
  %14 = call ptr @.dyn_search(ptr %13, ptr @"$sel.write_byte")
  store ptr %14, ptr %.inlinecache, align 8
  store ptr %11, ptr %.cachedtype, align 8
  br label %15

cache_hit:                                        ; preds = %noerr_block
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %15

15:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %14, %cache_miss ]
  %16 = icmp eq ptr %fn_phi, null
  br i1 %16, label %missing_function, label %match

missing_function:                                 ; preds = %15
  store %"char[]" { ptr @.panic_msg.172, i64 47 }, ptr %taddr, align 8
  %17 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr3, align 8
  %18 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.174, i64 8 }, ptr %taddr4, align 8
  %19 = load [2 x i64], ptr %taddr4, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 164), !dbg !3630
  unreachable, !dbg !3630

match:                                            ; preds = %15
  %21 = load ptr, ptr %out, align 8, !dbg !3630
  %22 = call i64 %fn_phi(ptr %21, i8 10), !dbg !3630
  %not_err5 = icmp eq i64 %22, 0, !dbg !3630
  %23 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !3630
  br i1 %23, label %after_check7, label %assign_optional6, !dbg !3630

assign_optional6:                                 ; preds = %match
  store i64 %22, ptr %error_var1, align 8, !dbg !3630
  br label %guard_block8, !dbg !3630

after_check7:                                     ; preds = %match
  br label %noerr_block9, !dbg !3630

guard_block8:                                     ; preds = %assign_optional6
  %24 = load i64, ptr %error_var1, align 8, !dbg !3630
  ret i64 %24, !dbg !3630

noerr_block9:                                     ; preds = %after_check7
  %ptradd10 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3631
  %25 = load i64, ptr %ptradd10, align 8, !dbg !3631
  %26 = inttoptr i64 %25 to ptr, !dbg !3631
  %type13 = load ptr, ptr %.cachedtype12, align 8
  %27 = icmp eq ptr %26, %type13
  br i1 %27, label %cache_hit16, label %cache_miss14

cache_miss14:                                     ; preds = %noerr_block9
  %ptradd15 = getelementptr inbounds i8, ptr %26, i64 16
  %28 = load ptr, ptr %ptradd15, align 8
  %29 = call ptr @.dyn_search(ptr %28, ptr @"$sel.flush")
  store ptr %29, ptr %.inlinecache11, align 8
  store ptr %26, ptr %.cachedtype12, align 8
  br label %30

cache_hit16:                                      ; preds = %noerr_block9
  %cache_hit_fn17 = load ptr, ptr %.inlinecache11, align 8
  br label %30

30:                                               ; preds = %cache_hit16, %cache_miss14
  %fn_phi18 = phi ptr [ %cache_hit_fn17, %cache_hit16 ], [ %29, %cache_miss14 ]
  %i2b = icmp ne ptr %fn_phi18, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %30
  %ptradd20 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !3632
  %31 = load i64, ptr %ptradd20, align 8, !dbg !3632
  %32 = inttoptr i64 %31 to ptr, !dbg !3632
  %type23 = load ptr, ptr %.cachedtype22, align 8
  %33 = icmp eq ptr %32, %type23
  br i1 %33, label %cache_hit26, label %cache_miss24

cache_miss24:                                     ; preds = %if.then
  %ptradd25 = getelementptr inbounds i8, ptr %32, i64 16
  %34 = load ptr, ptr %ptradd25, align 8
  %35 = call ptr @.dyn_search(ptr %34, ptr @"$sel.flush")
  store ptr %35, ptr %.inlinecache21, align 8
  store ptr %32, ptr %.cachedtype22, align 8
  br label %36

cache_hit26:                                      ; preds = %if.then
  %cache_hit_fn27 = load ptr, ptr %.inlinecache21, align 8
  br label %36

36:                                               ; preds = %cache_hit26, %cache_miss24
  %fn_phi28 = phi ptr [ %cache_hit_fn27, %cache_hit26 ], [ %35, %cache_miss24 ]
  %37 = icmp eq ptr %fn_phi28, null
  br i1 %37, label %missing_function29, label %match33

missing_function29:                               ; preds = %36
  store %"char[]" { ptr @.panic_msg.82, i64 42 }, ptr %taddr30, align 8
  %38 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr31, align 8
  %39 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.174, i64 8 }, ptr %taddr32, align 8
  %40 = load [2 x i64], ptr %taddr32, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 165), !dbg !3632
  unreachable, !dbg !3632

match33:                                          ; preds = %36
  %42 = load ptr, ptr %out, align 8, !dbg !3632
  %43 = call i64 %fn_phi28(ptr %42), !dbg !3632
  %not_err34 = icmp eq i64 %43, 0, !dbg !3632
  %44 = call i1 @llvm.expect.i1(i1 %not_err34, i1 true), !dbg !3632
  br i1 %44, label %after_check36, label %assign_optional35, !dbg !3632

assign_optional35:                                ; preds = %match33
  store i64 %43, ptr %error_var19, align 8, !dbg !3632
  br label %guard_block37, !dbg !3632

after_check36:                                    ; preds = %match33
  br label %noerr_block38, !dbg !3632

guard_block37:                                    ; preds = %assign_optional35
  %45 = load i64, ptr %error_var19, align 8, !dbg !3632
  ret i64 %45, !dbg !3632

noerr_block38:                                    ; preds = %after_check36
  br label %if.exit, !dbg !3632

if.exit:                                          ; preds = %noerr_block38, %30
  %46 = load i64, ptr %len, align 8, !dbg !3633
  %add = add i64 %46, 1, !dbg !3633
  store i64 %add, ptr %0, align 8, !dbg !3633
  ret i64 0, !dbg !3633
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.out_putstream_fn(ptr %0, i8 %1) #0 !dbg !3634 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %stream = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3635, metadata !DIExpression()), !dbg !3636
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3637, metadata !DIExpression()), !dbg !3638
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !3639, metadata !DIExpression()), !dbg !3640
  %2 = load ptr, ptr %data, align 8, !dbg !3641
  store ptr %2, ptr %stream, align 8, !dbg !3641
  %3 = load ptr, ptr %stream, align 8, !dbg !3642
  %checknull = icmp eq ptr %3, null, !dbg !3642
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3642
  br i1 %4, label %panic, label %checkok, !dbg !3642

checkok:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %3, i64 8, !dbg !3643
  %5 = load i64, ptr %ptradd, align 8, !dbg !3643
  %6 = inttoptr i64 %5 to ptr, !dbg !3643
  %type = load ptr, ptr %.cachedtype, align 8
  %7 = icmp eq ptr %6, %type
  br i1 %7, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16
  %8 = load ptr, ptr %ptradd3, align 8
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.write_byte")
  store ptr %9, ptr %.inlinecache, align 8
  store ptr %6, ptr %.cachedtype, align 8
  br label %10

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %10

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ]
  %11 = icmp eq ptr %fn_phi, null
  br i1 %11, label %missing_function, label %match

missing_function:                                 ; preds = %10
  store %"char[]" { ptr @.panic_msg.172, i64 47 }, ptr %taddr4, align 8
  %12 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr5, align 8
  %13 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.176, i64 16 }, ptr %taddr6, align 8
  %14 = load [2 x i64], ptr %taddr6, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 225), !dbg !3644
  unreachable, !dbg !3644

match:                                            ; preds = %10
  %16 = load ptr, ptr %3, align 8, !dbg !3644
  %17 = load i8, ptr %c, align 1, !dbg !3644
  %18 = call i64 %fn_phi(ptr %16, i8 %17), !dbg !3644
  %not_err = icmp eq i64 %18, 0, !dbg !3644
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3644
  br i1 %19, label %after_check, label %assign_optional, !dbg !3644

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %reterr, align 8, !dbg !3644
  br label %err_retblock, !dbg !3644

after_check:                                      ; preds = %match
  ret i64 0, !dbg !3644

err_retblock:                                     ; preds = %assign_optional
  %20 = load i64, ptr %reterr, align 8, !dbg !3644
  ret i64 %20, !dbg !3644

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.175, i64 47 }, ptr %taddr, align 8
  %21 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr1, align 8
  %22 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.176, i64 16 }, ptr %taddr2, align 8
  %23 = load [2 x i64], ptr %taddr2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 225), !dbg !3642
  unreachable, !dbg !3642
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.out_putchar_fn(ptr %0, i8 %1) #0 !dbg !3645 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3646, metadata !DIExpression()), !dbg !3647
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3648, metadata !DIExpression()), !dbg !3649
  %2 = load i8, ptr %c, align 1, !dbg !3650
  %zext = zext i8 %2 to i32, !dbg !3650
  %3 = call i32 @putchar(i32 %zext), !dbg !3651
  ret i64 0, !dbg !3651
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.printf(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3652 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %1, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3655, metadata !DIExpression()), !dbg !3656
  store [2 x i64] %2, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3657, metadata !DIExpression()), !dbg !3658
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3659, metadata !DIExpression()), !dbg !3660
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3660
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !3661
  %3 = load [2 x i64], ptr %format, align 8
  %4 = load [2 x i64], ptr %args, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %3, [2 x i64] %4), !dbg !3662
  %not_err = icmp eq i64 %5, 0, !dbg !3662
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3662
  br i1 %6, label %after_check, label %assign_optional, !dbg !3662

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !3662
  br label %err_retblock, !dbg !3662

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !3662
  store i64 %7, ptr %0, align 8, !dbg !3662
  ret i64 0, !dbg !3662

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !3662
  ret i64 %8, !dbg !3662
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.printfn(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3663 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %reterr = alloca i64, align 8
  store [2 x i64] %1, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3664, metadata !DIExpression()), !dbg !3665
  store [2 x i64] %2, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3666, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3668, metadata !DIExpression()), !dbg !3669
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3669
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putchar_fn, ptr null), !dbg !3670
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3671, metadata !DIExpression()), !dbg !3672
  %3 = load [2 x i64], ptr %format, align 8
  %4 = load [2 x i64], ptr %args, align 8
  %5 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %3, [2 x i64] %4), !dbg !3673
  %not_err = icmp eq i64 %5, 0, !dbg !3673
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3673
  br i1 %6, label %after_check, label %assign_optional, !dbg !3673

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %len.f, align 8, !dbg !3673
  br label %after_assign, !dbg !3673

after_check:                                      ; preds = %entry
  %7 = load i64, ptr %retparam, align 8, !dbg !3673
  store i64 %7, ptr %len, align 8, !dbg !3673
  store i64 0, ptr %len.f, align 8, !dbg !3673
  br label %after_assign, !dbg !3673

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @std.io.putchar(i8 10) #5, !dbg !3674
  %8 = call ptr @std.io.stdout(), !dbg !3675
  %9 = call i64 @std.io.File.flush(ptr %8), !dbg !3675
  %not_err1 = icmp eq i64 %9, 0, !dbg !3675
  %10 = call i1 @llvm.expect.i1(i1 %not_err1, i1 true), !dbg !3675
  br i1 %10, label %after_check3, label %assign_optional2, !dbg !3675

assign_optional2:                                 ; preds = %after_assign
  store i64 %9, ptr %error_var, align 8, !dbg !3675
  br label %guard_block, !dbg !3675

after_check3:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !3675

guard_block:                                      ; preds = %assign_optional2
  %11 = load i64, ptr %error_var, align 8, !dbg !3675
  ret i64 %11, !dbg !3675

noerr_block:                                      ; preds = %after_check3
  %optval = load i64, ptr %len.f, align 8, !dbg !3676
  %not_err4 = icmp eq i64 %optval, 0, !dbg !3676
  %12 = call i1 @llvm.expect.i1(i1 %not_err4, i1 true), !dbg !3676
  br i1 %12, label %after_check6, label %assign_optional5, !dbg !3676

assign_optional5:                                 ; preds = %noerr_block
  store i64 %optval, ptr %reterr, align 8, !dbg !3676
  br label %err_retblock, !dbg !3676

after_check6:                                     ; preds = %noerr_block
  %13 = load i64, ptr %len, align 8, !dbg !3676
  %add = add i64 %13, 1, !dbg !3676
  store i64 %add, ptr %0, align 8, !dbg !3676
  ret i64 0, !dbg !3676

err_retblock:                                     ; preds = %assign_optional5
  %14 = load i64, ptr %reterr, align 8, !dbg !3676
  ret i64 %14, !dbg !3676
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.eprintf(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3677 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %1, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3678, metadata !DIExpression()), !dbg !3679
  store [2 x i64] %2, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3680, metadata !DIExpression()), !dbg !3681
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3682, metadata !DIExpression()), !dbg !3683
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3683
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !3684, metadata !DIExpression()), !dbg !3685
  %3 = call ptr @std.io.stderr(), !dbg !3686
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !3686
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !3686
  store %any %5, ptr %stream, align 8, !dbg !3686
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !3687
  %6 = load [2 x i64], ptr %format, align 8
  %7 = load [2 x i64], ptr %args, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %6, [2 x i64] %7), !dbg !3688
  %not_err = icmp eq i64 %8, 0, !dbg !3688
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3688
  br i1 %9, label %after_check, label %assign_optional, !dbg !3688

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %reterr, align 8, !dbg !3688
  br label %err_retblock, !dbg !3688

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !3688
  store i64 %10, ptr %0, align 8, !dbg !3688
  ret i64 0, !dbg !3688

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !3688
  ret i64 %11, !dbg !3688
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.eprintfn(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3689 {
entry:
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %stream = alloca %any, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %error_var = alloca i64, align 8
  %error_var4 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store [2 x i64] %1, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3690, metadata !DIExpression()), !dbg !3691
  store [2 x i64] %2, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3692, metadata !DIExpression()), !dbg !3693
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3694, metadata !DIExpression()), !dbg !3695
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3695
  call void @llvm.dbg.declare(metadata ptr %stream, metadata !3696, metadata !DIExpression()), !dbg !3697
  %3 = call ptr @std.io.stderr(), !dbg !3698
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !3698
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.io.File" to i64), 1, !dbg !3698
  store %any %5, ptr %stream, align 8, !dbg !3698
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_putstream_fn, ptr %stream), !dbg !3699
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3700, metadata !DIExpression()), !dbg !3701
  %6 = load [2 x i64], ptr %format, align 8
  %7 = load [2 x i64], ptr %args, align 8
  %8 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %6, [2 x i64] %7), !dbg !3702
  %not_err = icmp eq i64 %8, 0, !dbg !3702
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3702
  br i1 %9, label %after_check, label %assign_optional, !dbg !3702

assign_optional:                                  ; preds = %entry
  store i64 %8, ptr %len.f, align 8, !dbg !3702
  br label %after_assign, !dbg !3702

after_check:                                      ; preds = %entry
  %10 = load i64, ptr %retparam, align 8, !dbg !3702
  store i64 %10, ptr %len, align 8, !dbg !3702
  store i64 0, ptr %len.f, align 8, !dbg !3702
  br label %after_assign, !dbg !3702

after_assign:                                     ; preds = %after_check, %assign_optional
  %11 = call ptr @std.io.stderr(), !dbg !3703
  %12 = call i64 @std.io.File.write_byte(ptr %11, i8 10), !dbg !3703
  %not_err1 = icmp eq i64 %12, 0, !dbg !3703
  %13 = call i1 @llvm.expect.i1(i1 %not_err1, i1 true), !dbg !3703
  br i1 %13, label %after_check3, label %assign_optional2, !dbg !3703

assign_optional2:                                 ; preds = %after_assign
  store i64 %12, ptr %error_var, align 8, !dbg !3703
  br label %guard_block, !dbg !3703

after_check3:                                     ; preds = %after_assign
  br label %noerr_block, !dbg !3703

guard_block:                                      ; preds = %assign_optional2
  %14 = load i64, ptr %error_var, align 8, !dbg !3703
  ret i64 %14, !dbg !3703

noerr_block:                                      ; preds = %after_check3
  %15 = call ptr @std.io.stderr(), !dbg !3704
  %16 = call i64 @std.io.File.flush(ptr %15), !dbg !3704
  %not_err5 = icmp eq i64 %16, 0, !dbg !3704
  %17 = call i1 @llvm.expect.i1(i1 %not_err5, i1 true), !dbg !3704
  br i1 %17, label %after_check7, label %assign_optional6, !dbg !3704

assign_optional6:                                 ; preds = %noerr_block
  store i64 %16, ptr %error_var4, align 8, !dbg !3704
  br label %guard_block8, !dbg !3704

after_check7:                                     ; preds = %noerr_block
  br label %noerr_block9, !dbg !3704

guard_block8:                                     ; preds = %assign_optional6
  %18 = load i64, ptr %error_var4, align 8, !dbg !3704
  ret i64 %18, !dbg !3704

noerr_block9:                                     ; preds = %after_check7
  %optval = load i64, ptr %len.f, align 8, !dbg !3705
  %not_err10 = icmp eq i64 %optval, 0, !dbg !3705
  %19 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !3705
  br i1 %19, label %after_check12, label %assign_optional11, !dbg !3705

assign_optional11:                                ; preds = %noerr_block9
  store i64 %optval, ptr %reterr, align 8, !dbg !3705
  br label %err_retblock, !dbg !3705

after_check12:                                    ; preds = %noerr_block9
  %20 = load i64, ptr %len, align 8, !dbg !3705
  %add = add i64 %20, 1, !dbg !3705
  store i64 %add, ptr %0, align 8, !dbg !3705
  ret i64 0, !dbg !3705

err_retblock:                                     ; preds = %assign_optional11
  %21 = load i64, ptr %reterr, align 8, !dbg !3705
  ret i64 %21, !dbg !3705
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.bprintf(ptr %0, [2 x i64] %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !3706 {
entry:
  %buffer = alloca %"char[]", align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %formatter = alloca %Formatter, align 8
  %data = alloca %BufferData, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr1 = alloca i64, align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr5 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 8
  %taddr16 = alloca %"any[]", align 8
  store [2 x i64] %1, ptr %buffer, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !3709, metadata !DIExpression()), !dbg !3710
  store [2 x i64] %2, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3711, metadata !DIExpression()), !dbg !3712
  store [2 x i64] %3, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3713, metadata !DIExpression()), !dbg !3714
  call void @llvm.dbg.declare(metadata ptr %formatter, metadata !3715, metadata !DIExpression()), !dbg !3716
  call void @llvm.memset.p0.i64(ptr align 8 %formatter, i8 0, i64 48, i1 false), !dbg !3716
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3717, metadata !DIExpression()), !dbg !3722
  call void @llvm.memset.p0.i64(ptr align 8 %data, i8 0, i64 24, i1 false), !dbg !3722
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %data, ptr align 8 %buffer, i32 16, i1 false), !dbg !3723
  call void @std.io.Formatter.init(ptr %formatter, ptr @std.io.out_buffer_fn, ptr %data), !dbg !3724
  call void @llvm.dbg.declare(metadata ptr %size, metadata !3725, metadata !DIExpression()), !dbg !3726
  %4 = load [2 x i64], ptr %format, align 8
  %5 = load [2 x i64], ptr %args, align 8
  %6 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %formatter, [2 x i64] %4, [2 x i64] %5), !dbg !3727
  %not_err = icmp eq i64 %6, 0, !dbg !3727
  %7 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3727
  br i1 %7, label %after_check, label %assign_optional, !dbg !3727

assign_optional:                                  ; preds = %entry
  store i64 %6, ptr %error_var, align 8, !dbg !3727
  br label %guard_block, !dbg !3727

after_check:                                      ; preds = %entry
  br label %noerr_block, !dbg !3727

guard_block:                                      ; preds = %assign_optional
  %8 = load i64, ptr %error_var, align 8, !dbg !3727
  ret i64 %8, !dbg !3727

noerr_block:                                      ; preds = %after_check
  %9 = load i64, ptr %retparam, align 8, !dbg !3727
  store i64 %9, ptr %size, align 8, !dbg !3727
  %10 = load %"char[]", ptr %buffer, align 8, !dbg !3728
  %11 = extractvalue %"char[]" %10, 0, !dbg !3728
  %12 = extractvalue %"char[]" %10, 1, !dbg !3729
  %gt = icmp ugt i64 0, %12, !dbg !3729
  %13 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3729
  br i1 %13, label %panic, label %checkok, !dbg !3729

checkok:                                          ; preds = %noerr_block
  %ptradd6 = getelementptr inbounds i8, ptr %data, i64 16, !dbg !3730
  %14 = load i64, ptr %ptradd6, align 8, !dbg !3730
  %add = add i64 0, %14, !dbg !3730
  %lt = icmp ult i64 %12, %add, !dbg !3730
  %sub = sub i64 %add, 1, !dbg !3730
  %15 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3730
  br i1 %15, label %panic7, label %checkok17, !dbg !3730

checkok17:                                        ; preds = %checkok
  %size18 = sub i64 %add, 0, !dbg !3728
  %16 = insertvalue %"char[]" undef, ptr %11, 0, !dbg !3728
  %17 = insertvalue %"char[]" %16, i64 %size18, 1, !dbg !3728
  store %"char[]" %17, ptr %0, align 8, !dbg !3728
  ret i64 0, !dbg !3728

panic:                                            ; preds = %noerr_block
  store i64 %12, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr1, align 8
  %20 = insertvalue %any undef, ptr %taddr1, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr2, align 8
  %22 = load [2 x i64], ptr %taddr2, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr3, align 8
  %23 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.177, i64 7 }, ptr %taddr4, align 8
  %24 = load [2 x i64], ptr %taddr4, align 8
  store %any %19, ptr %varargslots, align 8
  %ptradd = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd, align 8
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr5, align 8
  %26 = load [2 x i64], ptr %taddr5, align 8
  call void @std.core.builtin.panicf([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 319, [2 x i64] %26), !dbg !3728
  unreachable, !dbg !3728

panic7:                                           ; preds = %checkok
  store i64 %sub, ptr %taddr8, align 8
  %27 = insertvalue %any undef, ptr %taddr8, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr9, align 8
  %29 = insertvalue %any undef, ptr %taddr9, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr10, align 8
  %31 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr11, align 8
  %32 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.177, i64 7 }, ptr %taddr12, align 8
  %33 = load [2 x i64], ptr %taddr12, align 8
  store %any %28, ptr %varargslots13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %30, ptr %ptradd14, align 8
  %34 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp15", ptr %taddr16, align 8
  %35 = load [2 x i64], ptr %taddr16, align 8
  call void @std.core.builtin.panicf([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 319, [2 x i64] %35), !dbg !3728
  unreachable, !dbg !3728
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.out_buffer_fn(ptr %0, i8 %1) #0 !dbg !3731 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  %buffer_data = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr10 = alloca %"any[]", align 8
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3732, metadata !DIExpression()), !dbg !3733
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3734, metadata !DIExpression()), !dbg !3735
  call void @llvm.dbg.declare(metadata ptr %buffer_data, metadata !3736, metadata !DIExpression()), !dbg !3738
  %2 = load ptr, ptr %data, align 8, !dbg !3739
  store ptr %2, ptr %buffer_data, align 8, !dbg !3739
  %3 = load ptr, ptr %buffer_data, align 8, !dbg !3740
  %ptradd = getelementptr inbounds i8, ptr %3, i64 16, !dbg !3740
  %4 = load i64, ptr %ptradd, align 8, !dbg !3740
  %5 = load ptr, ptr %buffer_data, align 8, !dbg !3741
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3741
  %6 = load i64, ptr %ptradd1, align 8, !dbg !3741
  %ge = icmp uge i64 %4, %6, !dbg !3740
  br i1 %ge, label %if.then, label %if.exit, !dbg !3740

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), !dbg !3742

if.exit:                                          ; preds = %entry
  %7 = load ptr, ptr %buffer_data, align 8, !dbg !3743
  %ptradd2 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !3743
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3743
  %9 = load ptr, ptr %7, align 8, !dbg !3743
  %10 = load ptr, ptr %buffer_data, align 8, !dbg !3744
  %ptradd3 = getelementptr inbounds i8, ptr %10, i64 16, !dbg !3744
  %11 = load i64, ptr %ptradd3, align 8, !dbg !3744
  %add = add i64 %11, 1, !dbg !3744
  store i64 %add, ptr %ptradd3, align 8, !dbg !3744
  %ge4 = icmp uge i64 %11, %8, !dbg !3744
  %12 = call i1 @llvm.expect.i1(i1 %ge4, i1 false), !dbg !3744
  br i1 %12, label %panic, label %checkok, !dbg !3744

checkok:                                          ; preds = %if.exit
  %ptradd11 = getelementptr inbounds i8, ptr %9, i64 %11, !dbg !3744
  %13 = load i8, ptr %c, align 1, !dbg !3745
  store i8 %13, ptr %ptradd11, align 1, !dbg !3745
  ret i64 0, !dbg !3745

panic:                                            ; preds = %if.exit
  store i64 %8, ptr %taddr, align 8
  %14 = insertvalue %any undef, ptr %taddr, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %11, ptr %taddr5, align 8
  %16 = insertvalue %any undef, ptr %taddr5, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.173, i64 5 }, ptr %taddr7, align 8
  %19 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.178, i64 13 }, ptr %taddr8, align 8
  %20 = load [2 x i64], ptr %taddr8, align 8
  store %any %15, ptr %varargslots, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %17, ptr %ptradd9, align 8
  %21 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %21, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  call void @std.core.builtin.panicf([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 327, [2 x i64] %22), !dbg !3744
  unreachable, !dbg !3744
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.putchar(i8 %0) #0 !dbg !3746 {
entry:
  %c = alloca i8, align 1
  store i8 %0, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3749, metadata !DIExpression()), !dbg !3750
  %1 = load i8, ptr %c, align 1, !dbg !3751
  %zext = zext i8 %1 to i32, !dbg !3751
  %2 = call i32 @putchar(i32 %zext), !dbg !3752
  ret void, !dbg !3752
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.stdout() #0 !dbg !3753 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdout.file, align 8, !dbg !3757
  %i2nb = icmp eq ptr %0, null, !dbg !3757
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3757

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @__stdoutp, align 8, !dbg !3758
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !3762
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdout.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdout.file, !dbg !3763
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.stderr() #0 !dbg !3764 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stderr.file, align 8, !dbg !3765
  %i2nb = icmp eq ptr %0, null, !dbg !3765
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3765

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @__stderrp, align 8, !dbg !3766
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !3769
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stderr.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stderr.file, !dbg !3770
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.io.stdin() #0 !dbg !3771 {
entry:
  %result = alloca %File, align 8
  %0 = load ptr, ptr @stdin.file, align 8, !dbg !3772
  %i2nb = icmp eq ptr %0, null, !dbg !3772
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3772

if.then:                                          ; preds = %entry
  %1 = load ptr, ptr @__stdinp, align 8, !dbg !3773
  %2 = call i64 @std.io.file.from_handle(ptr %1), !dbg !3776
  %3 = inttoptr i64 %2 to ptr
  store ptr %3, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 @stdin.file, ptr align 8 %result, i32 8, i1 false)
  br label %if.exit

if.exit:                                          ; preds = %if.then, %entry
  ret ptr @stdin.file, !dbg !3777
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.available(ptr %0, [2 x i64] %1) #0 !dbg !3778 {
entry:
  %s = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %.inlinecache3 = alloca ptr, align 8
  %.cachedtype4 = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %.inlinecache14 = alloca ptr, align 8
  %.cachedtype15 = alloca ptr, align 8
  %curr = alloca i64, align 8
  %error_var = alloca i64, align 8
  %.inlinecache25 = alloca ptr, align 8
  %.cachedtype26 = alloca ptr, align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %retparam38 = alloca i64, align 8
  %len = alloca i64, align 8
  %error_var42 = alloca i64, align 8
  %.inlinecache44 = alloca ptr, align 8
  %.cachedtype45 = alloca ptr, align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr54 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %retparam57 = alloca i64, align 8
  %error_var63 = alloca i64, align 8
  %.inlinecache65 = alloca ptr, align 8
  %.cachedtype66 = alloca ptr, align 8
  %taddr74 = alloca %"char[]", align 8
  %taddr75 = alloca %"char[]", align 8
  %taddr76 = alloca %"char[]", align 8
  %retparam78 = alloca i64, align 8
  %reterr84 = alloca i64, align 8
  %reterr86 = alloca i64, align 8
  store ptr null, ptr %.cachedtype66, align 8
  store ptr null, ptr %.cachedtype45, align 8
  store ptr null, ptr %.cachedtype26, align 8
  store ptr null, ptr %.cachedtype15, align 8
  store ptr null, ptr %.cachedtype4, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3781, metadata !DIExpression()), !dbg !3782
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3783
  %2 = load i64, ptr %ptradd, align 8, !dbg !3783
  %3 = inttoptr i64 %2 to ptr, !dbg !3783
  %type = load ptr, ptr %.cachedtype, align 8
  %4 = icmp eq ptr %3, %type
  br i1 %4, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %entry
  %ptradd1 = getelementptr inbounds i8, ptr %3, i64 16
  %5 = load ptr, ptr %ptradd1, align 8
  %6 = call ptr @.dyn_search(ptr %5, ptr @"$sel.available")
  store ptr %6, ptr %.inlinecache, align 8
  store ptr %3, ptr %.cachedtype, align 8
  br label %7

cache_hit:                                        ; preds = %entry
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %7

7:                                                ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %6, %cache_miss ]
  %i2b = icmp ne ptr %fn_phi, null
  br i1 %i2b, label %if.then, label %if.exit

if.then:                                          ; preds = %7
  %ptradd2 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3784
  %8 = load i64, ptr %ptradd2, align 8, !dbg !3784
  %9 = inttoptr i64 %8 to ptr, !dbg !3784
  %type5 = load ptr, ptr %.cachedtype4, align 8
  %10 = icmp eq ptr %9, %type5
  br i1 %10, label %cache_hit8, label %cache_miss6

cache_miss6:                                      ; preds = %if.then
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.available")
  store ptr %12, ptr %.inlinecache3, align 8
  store ptr %9, ptr %.cachedtype4, align 8
  br label %13

cache_hit8:                                       ; preds = %if.then
  %cache_hit_fn9 = load ptr, ptr %.inlinecache3, align 8
  br label %13

13:                                               ; preds = %cache_hit8, %cache_miss6
  %fn_phi10 = phi ptr [ %cache_hit_fn9, %cache_hit8 ], [ %12, %cache_miss6 ]
  %14 = icmp eq ptr %fn_phi10, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg.66, i64 46 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr11, align 8
  %16 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr12, align 8
  %17 = load [2 x i64], ptr %taddr12, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 29), !dbg !3784
  unreachable, !dbg !3784

match:                                            ; preds = %13
  %19 = load ptr, ptr %s, align 8
  %20 = call i64 %fn_phi10(ptr %retparam, ptr %19), !dbg !3784
  %not_err = icmp eq i64 %20, 0, !dbg !3784
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3784
  br i1 %21, label %after_check, label %assign_optional, !dbg !3784

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %reterr, align 8, !dbg !3784
  br label %err_retblock, !dbg !3784

after_check:                                      ; preds = %match
  %22 = load i64, ptr %retparam, align 8, !dbg !3784
  store i64 %22, ptr %0, align 8, !dbg !3784
  ret i64 0, !dbg !3784

err_retblock:                                     ; preds = %assign_optional
  %23 = load i64, ptr %reterr, align 8, !dbg !3784
  ret i64 %23, !dbg !3784

if.exit:                                          ; preds = %7
  %ptradd13 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3785
  %24 = load i64, ptr %ptradd13, align 8, !dbg !3785
  %25 = inttoptr i64 %24 to ptr, !dbg !3785
  %type16 = load ptr, ptr %.cachedtype15, align 8
  %26 = icmp eq ptr %25, %type16
  br i1 %26, label %cache_hit19, label %cache_miss17

cache_miss17:                                     ; preds = %if.exit
  %ptradd18 = getelementptr inbounds i8, ptr %25, i64 16
  %27 = load ptr, ptr %ptradd18, align 8
  %28 = call ptr @.dyn_search(ptr %27, ptr @"$sel.seek")
  store ptr %28, ptr %.inlinecache14, align 8
  store ptr %25, ptr %.cachedtype15, align 8
  br label %29

cache_hit19:                                      ; preds = %if.exit
  %cache_hit_fn20 = load ptr, ptr %.inlinecache14, align 8
  br label %29

29:                                               ; preds = %cache_hit19, %cache_miss17
  %fn_phi21 = phi ptr [ %cache_hit_fn20, %cache_hit19 ], [ %28, %cache_miss17 ]
  %i2b22 = icmp ne ptr %fn_phi21, null
  br i1 %i2b22, label %if.then23, label %if.exit85

if.then23:                                        ; preds = %29
  call void @llvm.dbg.declare(metadata ptr %curr, metadata !3786, metadata !DIExpression()), !dbg !3788
  %ptradd24 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3789
  %30 = load i64, ptr %ptradd24, align 8, !dbg !3789
  %31 = inttoptr i64 %30 to ptr, !dbg !3789
  %type27 = load ptr, ptr %.cachedtype26, align 8
  %32 = icmp eq ptr %31, %type27
  br i1 %32, label %cache_hit30, label %cache_miss28

cache_miss28:                                     ; preds = %if.then23
  %ptradd29 = getelementptr inbounds i8, ptr %31, i64 16
  %33 = load ptr, ptr %ptradd29, align 8
  %34 = call ptr @.dyn_search(ptr %33, ptr @"$sel.seek")
  store ptr %34, ptr %.inlinecache25, align 8
  store ptr %31, ptr %.cachedtype26, align 8
  br label %35

cache_hit30:                                      ; preds = %if.then23
  %cache_hit_fn31 = load ptr, ptr %.inlinecache25, align 8
  br label %35

35:                                               ; preds = %cache_hit30, %cache_miss28
  %fn_phi32 = phi ptr [ %cache_hit_fn31, %cache_hit30 ], [ %34, %cache_miss28 ]
  %36 = icmp eq ptr %fn_phi32, null
  br i1 %36, label %missing_function33, label %match37

missing_function33:                               ; preds = %35
  store %"char[]" { ptr @.panic_msg.180, i64 41 }, ptr %taddr34, align 8
  %37 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr35, align 8
  %38 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr36, align 8
  %39 = load [2 x i64], ptr %taddr36, align 8
  %40 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %40([2 x i64] %37, [2 x i64] %38, [2 x i64] %39, i32 32), !dbg !3790
  unreachable, !dbg !3790

match37:                                          ; preds = %35
  %41 = load ptr, ptr %s, align 8
  %42 = call i64 %fn_phi32(ptr %retparam38, ptr %41, i64 0, i32 1), !dbg !3790
  %not_err39 = icmp eq i64 %42, 0, !dbg !3790
  %43 = call i1 @llvm.expect.i1(i1 %not_err39, i1 true), !dbg !3790
  br i1 %43, label %after_check41, label %assign_optional40, !dbg !3790

assign_optional40:                                ; preds = %match37
  store i64 %42, ptr %error_var, align 8, !dbg !3790
  br label %guard_block, !dbg !3790

after_check41:                                    ; preds = %match37
  br label %noerr_block, !dbg !3790

guard_block:                                      ; preds = %assign_optional40
  %44 = load i64, ptr %error_var, align 8, !dbg !3790
  ret i64 %44, !dbg !3790

noerr_block:                                      ; preds = %after_check41
  %45 = load i64, ptr %retparam38, align 8, !dbg !3790
  store i64 %45, ptr %curr, align 8, !dbg !3790
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3791, metadata !DIExpression()), !dbg !3792
  %ptradd43 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3793
  %46 = load i64, ptr %ptradd43, align 8, !dbg !3793
  %47 = inttoptr i64 %46 to ptr, !dbg !3793
  %type46 = load ptr, ptr %.cachedtype45, align 8
  %48 = icmp eq ptr %47, %type46
  br i1 %48, label %cache_hit49, label %cache_miss47

cache_miss47:                                     ; preds = %noerr_block
  %ptradd48 = getelementptr inbounds i8, ptr %47, i64 16
  %49 = load ptr, ptr %ptradd48, align 8
  %50 = call ptr @.dyn_search(ptr %49, ptr @"$sel.seek")
  store ptr %50, ptr %.inlinecache44, align 8
  store ptr %47, ptr %.cachedtype45, align 8
  br label %51

cache_hit49:                                      ; preds = %noerr_block
  %cache_hit_fn50 = load ptr, ptr %.inlinecache44, align 8
  br label %51

51:                                               ; preds = %cache_hit49, %cache_miss47
  %fn_phi51 = phi ptr [ %cache_hit_fn50, %cache_hit49 ], [ %50, %cache_miss47 ]
  %52 = icmp eq ptr %fn_phi51, null
  br i1 %52, label %missing_function52, label %match56

missing_function52:                               ; preds = %51
  store %"char[]" { ptr @.panic_msg.180, i64 41 }, ptr %taddr53, align 8
  %53 = load [2 x i64], ptr %taddr53, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr54, align 8
  %54 = load [2 x i64], ptr %taddr54, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr55, align 8
  %55 = load [2 x i64], ptr %taddr55, align 8
  %56 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %56([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 33), !dbg !3794
  unreachable, !dbg !3794

match56:                                          ; preds = %51
  %57 = load ptr, ptr %s, align 8
  %58 = call i64 %fn_phi51(ptr %retparam57, ptr %57, i64 0, i32 2), !dbg !3794
  %not_err58 = icmp eq i64 %58, 0, !dbg !3794
  %59 = call i1 @llvm.expect.i1(i1 %not_err58, i1 true), !dbg !3794
  br i1 %59, label %after_check60, label %assign_optional59, !dbg !3794

assign_optional59:                                ; preds = %match56
  store i64 %58, ptr %error_var42, align 8, !dbg !3794
  br label %guard_block61, !dbg !3794

after_check60:                                    ; preds = %match56
  br label %noerr_block62, !dbg !3794

guard_block61:                                    ; preds = %assign_optional59
  %60 = load i64, ptr %error_var42, align 8, !dbg !3794
  ret i64 %60, !dbg !3794

noerr_block62:                                    ; preds = %after_check60
  %61 = load i64, ptr %retparam57, align 8, !dbg !3794
  store i64 %61, ptr %len, align 8, !dbg !3794
  %62 = load i64, ptr %curr, align 8, !dbg !3795
  %ptradd64 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !3796
  %63 = load i64, ptr %ptradd64, align 8, !dbg !3796
  %64 = inttoptr i64 %63 to ptr, !dbg !3796
  %type67 = load ptr, ptr %.cachedtype66, align 8
  %65 = icmp eq ptr %64, %type67
  br i1 %65, label %cache_hit70, label %cache_miss68

cache_miss68:                                     ; preds = %noerr_block62
  %ptradd69 = getelementptr inbounds i8, ptr %64, i64 16
  %66 = load ptr, ptr %ptradd69, align 8
  %67 = call ptr @.dyn_search(ptr %66, ptr @"$sel.seek")
  store ptr %67, ptr %.inlinecache65, align 8
  store ptr %64, ptr %.cachedtype66, align 8
  br label %68

cache_hit70:                                      ; preds = %noerr_block62
  %cache_hit_fn71 = load ptr, ptr %.inlinecache65, align 8
  br label %68

68:                                               ; preds = %cache_hit70, %cache_miss68
  %fn_phi72 = phi ptr [ %cache_hit_fn71, %cache_hit70 ], [ %67, %cache_miss68 ]
  %69 = icmp eq ptr %fn_phi72, null
  br i1 %69, label %missing_function73, label %match77

missing_function73:                               ; preds = %68
  store %"char[]" { ptr @.panic_msg.180, i64 41 }, ptr %taddr74, align 8
  %70 = load [2 x i64], ptr %taddr74, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr75, align 8
  %71 = load [2 x i64], ptr %taddr75, align 8
  store %"char[]" { ptr @.func.45, i64 9 }, ptr %taddr76, align 8
  %72 = load [2 x i64], ptr %taddr76, align 8
  %73 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %73([2 x i64] %70, [2 x i64] %71, [2 x i64] %72, i32 34), !dbg !3797
  unreachable, !dbg !3797

match77:                                          ; preds = %68
  %74 = load ptr, ptr %s, align 8
  %75 = call i64 %fn_phi72(ptr %retparam78, ptr %74, i64 %62, i32 0), !dbg !3797
  %not_err79 = icmp eq i64 %75, 0, !dbg !3797
  %76 = call i1 @llvm.expect.i1(i1 %not_err79, i1 true), !dbg !3797
  br i1 %76, label %after_check81, label %assign_optional80, !dbg !3797

assign_optional80:                                ; preds = %match77
  store i64 %75, ptr %error_var63, align 8, !dbg !3797
  br label %guard_block82, !dbg !3797

after_check81:                                    ; preds = %match77
  br label %noerr_block83, !dbg !3797

guard_block82:                                    ; preds = %assign_optional80
  %77 = load i64, ptr %error_var63, align 8, !dbg !3797
  ret i64 %77, !dbg !3797

noerr_block83:                                    ; preds = %after_check81
  %78 = load i64, ptr %len, align 8, !dbg !3798
  %79 = load i64, ptr %curr, align 8, !dbg !3799
  %sub = sub i64 %78, %79, !dbg !3798
  store i64 %sub, ptr %0, align 8, !dbg !3798
  ret i64 0, !dbg !3798

if.exit85:                                        ; preds = %29
  store i64 0, ptr %0, align 8, !dbg !3800
  ret i64 0, !dbg !3800
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.copy_to(ptr %0, [2 x i64] %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !3801 {
entry:
  %in = alloca %any, align 8
  %dst = alloca %any, align 8
  %buffer = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %in1 = alloca %any, align 8
  %dst2 = alloca %any, align 8
  %buffer3 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %total_copied = alloca i64, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  %err = alloca i64, align 8
  %switch = alloca i64, align 8
  %written = alloca i64, align 8
  %error_var = alloca i64, align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr20 = alloca %"any[]", align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %varargslots27 = alloca [2 x %any], align 8
  %taddr30 = alloca %"any[]", align 8
  %.inlinecache33 = alloca ptr, align 8
  %.cachedtype34 = alloca ptr, align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %retparam46 = alloca i64, align 8
  %taddr47 = alloca %"char[]", align 8
  %.inlinecache57 = alloca ptr, align 8
  %.cachedtype58 = alloca ptr, align 8
  %reterr67 = alloca i64, align 8
  %.inlinecache69 = alloca ptr, align 8
  %.cachedtype70 = alloca ptr, align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"char[]", align 8
  %taddr80 = alloca %"char[]", align 8
  %retparam82 = alloca i64, align 8
  %.inlinecache89 = alloca ptr, align 8
  %.cachedtype90 = alloca ptr, align 8
  %reterr99 = alloca i64, align 8
  %.inlinecache101 = alloca ptr, align 8
  %.cachedtype102 = alloca ptr, align 8
  %taddr110 = alloca %"char[]", align 8
  %taddr111 = alloca %"char[]", align 8
  %taddr112 = alloca %"char[]", align 8
  %retparam114 = alloca i64, align 8
  %reterr120 = alloca i64, align 8
  %in121 = alloca %any, align 8
  %dst122 = alloca %any, align 8
  %literal = alloca [4096 x i8], align 1
  %buffer123 = alloca %"char[]", align 8
  %blockret124 = alloca i64, align 8
  %total_copied125 = alloca i64, align 8
  %len127 = alloca i64, align 8
  %len.f128 = alloca i64, align 8
  %.inlinecache130 = alloca ptr, align 8
  %.cachedtype131 = alloca ptr, align 8
  %taddr139 = alloca %"char[]", align 8
  %taddr140 = alloca %"char[]", align 8
  %taddr141 = alloca %"char[]", align 8
  %retparam143 = alloca i64, align 8
  %err148 = alloca i64, align 8
  %switch157 = alloca i64, align 8
  %written167 = alloca i64, align 8
  %error_var168 = alloca i64, align 8
  %taddr171 = alloca i64, align 8
  %taddr172 = alloca i64, align 8
  %taddr173 = alloca %"char[]", align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr175 = alloca %"char[]", align 8
  %varargslots176 = alloca [2 x %any], align 8
  %taddr179 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %taddr187 = alloca %"char[]", align 8
  %taddr188 = alloca %"char[]", align 8
  %taddr189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 8
  %taddr193 = alloca %"any[]", align 8
  %.inlinecache197 = alloca ptr, align 8
  %.cachedtype198 = alloca ptr, align 8
  %taddr206 = alloca %"char[]", align 8
  %taddr207 = alloca %"char[]", align 8
  %taddr208 = alloca %"char[]", align 8
  %retparam210 = alloca i64, align 8
  %taddr211 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype198, align 8
  store ptr null, ptr %.cachedtype131, align 8
  store ptr null, ptr %.cachedtype102, align 8
  store ptr null, ptr %.cachedtype90, align 8
  store ptr null, ptr %.cachedtype70, align 8
  store ptr null, ptr %.cachedtype58, align 8
  store ptr null, ptr %.cachedtype34, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %in, align 8
  call void @llvm.dbg.declare(metadata ptr %in, metadata !3804, metadata !DIExpression()), !dbg !3805
  store [2 x i64] %2, ptr %dst, align 8
  call void @llvm.dbg.declare(metadata ptr %dst, metadata !3806, metadata !DIExpression()), !dbg !3807
  store [2 x i64] %3, ptr %buffer, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !3808, metadata !DIExpression()), !dbg !3809
  %ptradd = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !3810
  %4 = load i64, ptr %ptradd, align 8, !dbg !3810
  %i2b = icmp ne i64 %4, 0, !dbg !3810
  br i1 %i2b, label %if.then, label %if.exit55, !dbg !3810

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in1, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst2, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %buffer3, ptr align 8 %buffer, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %total_copied, metadata !3811, metadata !DIExpression()), !dbg !3813
  store i64 0, ptr %total_copied, align 8, !dbg !3813
  br label %loop.body, !dbg !3815

loop.body:                                        ; preds = %if.exit54, %if.then
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3816, metadata !DIExpression()), !dbg !3819
  %ptradd4 = getelementptr inbounds i8, ptr %in1, i64 8, !dbg !3820
  %5 = load i64, ptr %ptradd4, align 8, !dbg !3820
  %6 = inttoptr i64 %5 to ptr, !dbg !3820
  %type = load ptr, ptr %.cachedtype, align 8
  %7 = icmp eq ptr %6, %type
  br i1 %7, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %loop.body
  %ptradd5 = getelementptr inbounds i8, ptr %6, i64 16
  %8 = load ptr, ptr %ptradd5, align 8
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.read")
  store ptr %9, ptr %.inlinecache, align 8
  store ptr %6, ptr %.cachedtype, align 8
  br label %10

cache_hit:                                        ; preds = %loop.body
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %10

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ]
  %11 = icmp eq ptr %fn_phi, null
  br i1 %11, label %missing_function, label %match

missing_function:                                 ; preds = %10
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr6, align 8
  %13 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr7, align 8
  %14 = load [2 x i64], ptr %taddr7, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 198), !dbg !3821
  unreachable, !dbg !3821

match:                                            ; preds = %10
  %16 = load ptr, ptr %in1, align 8
  %17 = load [2 x i64], ptr %buffer3, align 8
  %18 = call i64 %fn_phi(ptr %retparam, ptr %16, [2 x i64] %17), !dbg !3821
  %not_err = icmp eq i64 %18, 0, !dbg !3821
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3821
  br i1 %19, label %after_check, label %assign_optional, !dbg !3821

assign_optional:                                  ; preds = %match
  store i64 %18, ptr %len.f, align 8, !dbg !3821
  br label %after_assign, !dbg !3821

after_check:                                      ; preds = %match
  %20 = load i64, ptr %retparam, align 8, !dbg !3821
  store i64 %20, ptr %len, align 8, !dbg !3821
  store i64 0, ptr %len.f, align 8, !dbg !3821
  br label %after_assign, !dbg !3821

after_assign:                                     ; preds = %after_check, %assign_optional
  call void @llvm.dbg.declare(metadata ptr %err, metadata !3822, metadata !DIExpression()), !dbg !3823
  br label %testblock, !dbg !3823

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %len.f, align 8, !dbg !3824
  %not_err8 = icmp eq i64 %optval, 0, !dbg !3824
  %21 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !3824
  br i1 %21, label %after_check10, label %assign_optional9, !dbg !3824

assign_optional9:                                 ; preds = %testblock
  store i64 %optval, ptr %err, align 8, !dbg !3824
  br label %end_block, !dbg !3824

after_check10:                                    ; preds = %testblock
  store i64 0, ptr %err, align 8, !dbg !3824
  br label %end_block, !dbg !3824

end_block:                                        ; preds = %after_check10, %assign_optional9
  %22 = load i64, ptr %err, align 8, !dbg !3824
  %neq = icmp ne i64 %22, 0, !dbg !3824
  br i1 %neq, label %if.then11, label %if.exit, !dbg !3824

if.then11:                                        ; preds = %end_block
  store i64 %22, ptr %switch, align 8
  br label %switch.entry

switch.entry:                                     ; preds = %if.then11
  %23 = load i64, ptr %switch, align 8
  %eq = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %23, !dbg !3825
  br i1 %eq, label %switch.case, label %next_if, !dbg !3825

switch.case:                                      ; preds = %switch.entry
  %24 = load i64, ptr %total_copied, align 8, !dbg !3826
  store i64 %24, ptr %blockret, align 8, !dbg !3826
  br label %expr_block.exit, !dbg !3826

next_if:                                          ; preds = %switch.entry
  br label %switch.default, !dbg !3826

switch.default:                                   ; preds = %next_if
  %25 = load i64, ptr %err, align 8, !dbg !3828
  store i64 %25, ptr %reterr, align 8, !dbg !3828
  br label %err_retblock, !dbg !3828

if.exit:                                          ; preds = %end_block
  %26 = load i64, ptr %len, align 8, !dbg !3830
  %i2nb = icmp eq i64 %26, 0, !dbg !3830
  br i1 %i2nb, label %if.then12, label %if.exit13, !dbg !3830

if.then12:                                        ; preds = %if.exit
  %27 = load i64, ptr %total_copied, align 8, !dbg !3831
  store i64 %27, ptr %blockret, align 8, !dbg !3831
  br label %expr_block.exit, !dbg !3831

if.exit13:                                        ; preds = %if.exit
  call void @llvm.dbg.declare(metadata ptr %written, metadata !3832, metadata !DIExpression()), !dbg !3833
  %28 = load %"char[]", ptr %buffer3, align 8, !dbg !3834
  %29 = extractvalue %"char[]" %28, 0, !dbg !3834
  %30 = extractvalue %"char[]" %28, 1, !dbg !3835
  %gt = icmp ugt i64 0, %30, !dbg !3835
  %31 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3835
  br i1 %31, label %panic, label %checkok, !dbg !3835

checkok:                                          ; preds = %if.exit13
  %32 = load i64, ptr %len, align 8, !dbg !3836
  %add = add i64 0, %32, !dbg !3836
  %lt = icmp ult i64 %30, %add, !dbg !3836
  %sub = sub i64 %add, 1, !dbg !3836
  %33 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !3836
  br i1 %33, label %panic21, label %checkok31, !dbg !3836

checkok31:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !3834
  %34 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !3834
  %35 = insertvalue %"char[]" %34, i64 %size, 1, !dbg !3834
  %ptradd32 = getelementptr inbounds i8, ptr %dst2, i64 8, !dbg !3834
  %36 = load i64, ptr %ptradd32, align 8, !dbg !3834
  %37 = inttoptr i64 %36 to ptr, !dbg !3834
  %type35 = load ptr, ptr %.cachedtype34, align 8
  %38 = icmp eq ptr %37, %type35
  br i1 %38, label %cache_hit38, label %cache_miss36

cache_miss36:                                     ; preds = %checkok31
  %ptradd37 = getelementptr inbounds i8, ptr %37, i64 16
  %39 = load ptr, ptr %ptradd37, align 8
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.write")
  store ptr %40, ptr %.inlinecache33, align 8
  store ptr %37, ptr %.cachedtype34, align 8
  br label %41

cache_hit38:                                      ; preds = %checkok31
  %cache_hit_fn39 = load ptr, ptr %.inlinecache33, align 8
  br label %41

41:                                               ; preds = %cache_hit38, %cache_miss36
  %fn_phi40 = phi ptr [ %cache_hit_fn39, %cache_hit38 ], [ %40, %cache_miss36 ]
  %42 = icmp eq ptr %fn_phi40, null
  br i1 %42, label %missing_function41, label %match45

missing_function41:                               ; preds = %41
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr42, align 8
  %43 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr43, align 8
  %44 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr44, align 8
  %45 = load [2 x i64], ptr %taddr44, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 205), !dbg !3837
  unreachable, !dbg !3837

match45:                                          ; preds = %41
  %47 = load ptr, ptr %dst2, align 8
  store %"char[]" %35, ptr %taddr47, align 8
  %48 = load [2 x i64], ptr %taddr47, align 8
  %49 = call i64 %fn_phi40(ptr %retparam46, ptr %47, [2 x i64] %48), !dbg !3837
  %not_err48 = icmp eq i64 %49, 0, !dbg !3837
  %50 = call i1 @llvm.expect.i1(i1 %not_err48, i1 true), !dbg !3837
  br i1 %50, label %after_check50, label %assign_optional49, !dbg !3837

assign_optional49:                                ; preds = %match45
  store i64 %49, ptr %error_var, align 8, !dbg !3837
  br label %guard_block, !dbg !3837

after_check50:                                    ; preds = %match45
  br label %noerr_block, !dbg !3837

guard_block:                                      ; preds = %assign_optional49
  %51 = load i64, ptr %error_var, align 8, !dbg !3837
  store i64 %51, ptr %reterr, align 8, !dbg !3837
  br label %err_retblock, !dbg !3837

noerr_block:                                      ; preds = %after_check50
  %52 = load i64, ptr %retparam46, align 8, !dbg !3837
  store i64 %52, ptr %written, align 8, !dbg !3837
  %53 = load i64, ptr %total_copied, align 8, !dbg !3838
  %54 = load i64, ptr %len, align 8, !dbg !3839
  %add51 = add i64 %53, %54, !dbg !3838
  store i64 %add51, ptr %total_copied, align 8, !dbg !3838
  %55 = load i64, ptr %written, align 8, !dbg !3840
  %56 = load i64, ptr %len, align 8, !dbg !3841
  %neq52 = icmp ne i64 %55, %56, !dbg !3840
  br i1 %neq52, label %if.then53, label %if.exit54, !dbg !3840

if.then53:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr, align 8, !dbg !3842
  br label %err_retblock, !dbg !3842

if.exit54:                                        ; preds = %noerr_block
  br label %loop.body, !dbg !3842

expr_block.exit:                                  ; preds = %if.then12, %switch.case
  %57 = load i64, ptr %blockret, align 8, !dbg !3842
  store i64 %57, ptr %0, align 8, !dbg !3842
  ret i64 0, !dbg !3842

err_retblock:                                     ; preds = %if.then53, %guard_block, %switch.default
  %58 = load i64, ptr %reterr, align 8, !dbg !3842
  ret i64 %58, !dbg !3842

if.exit55:                                        ; preds = %entry
  %ptradd56 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3843
  %59 = load i64, ptr %ptradd56, align 8, !dbg !3843
  %60 = inttoptr i64 %59 to ptr, !dbg !3843
  %type59 = load ptr, ptr %.cachedtype58, align 8
  %61 = icmp eq ptr %60, %type59
  br i1 %61, label %cache_hit62, label %cache_miss60

cache_miss60:                                     ; preds = %if.exit55
  %ptradd61 = getelementptr inbounds i8, ptr %60, i64 16
  %62 = load ptr, ptr %ptradd61, align 8
  %63 = call ptr @.dyn_search(ptr %62, ptr @"$sel.write_to")
  store ptr %63, ptr %.inlinecache57, align 8
  store ptr %60, ptr %.cachedtype58, align 8
  br label %64

cache_hit62:                                      ; preds = %if.exit55
  %cache_hit_fn63 = load ptr, ptr %.inlinecache57, align 8
  br label %64

64:                                               ; preds = %cache_hit62, %cache_miss60
  %fn_phi64 = phi ptr [ %cache_hit_fn63, %cache_hit62 ], [ %63, %cache_miss60 ]
  %i2b65 = icmp ne ptr %fn_phi64, null
  br i1 %i2b65, label %if.then66, label %if.exit87

if.then66:                                        ; preds = %64
  %ptradd68 = getelementptr inbounds i8, ptr %in, i64 8, !dbg !3844
  %65 = load i64, ptr %ptradd68, align 8, !dbg !3844
  %66 = inttoptr i64 %65 to ptr, !dbg !3844
  %type71 = load ptr, ptr %.cachedtype70, align 8
  %67 = icmp eq ptr %66, %type71
  br i1 %67, label %cache_hit74, label %cache_miss72

cache_miss72:                                     ; preds = %if.then66
  %ptradd73 = getelementptr inbounds i8, ptr %66, i64 16
  %68 = load ptr, ptr %ptradd73, align 8
  %69 = call ptr @.dyn_search(ptr %68, ptr @"$sel.write_to")
  store ptr %69, ptr %.inlinecache69, align 8
  store ptr %66, ptr %.cachedtype70, align 8
  br label %70

cache_hit74:                                      ; preds = %if.then66
  %cache_hit_fn75 = load ptr, ptr %.inlinecache69, align 8
  br label %70

70:                                               ; preds = %cache_hit74, %cache_miss72
  %fn_phi76 = phi ptr [ %cache_hit_fn75, %cache_hit74 ], [ %69, %cache_miss72 ]
  %71 = icmp eq ptr %fn_phi76, null
  br i1 %71, label %missing_function77, label %match81

missing_function77:                               ; preds = %70
  store %"char[]" { ptr @.panic_msg.182, i64 45 }, ptr %taddr78, align 8
  %72 = load [2 x i64], ptr %taddr78, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr79, align 8
  %73 = load [2 x i64], ptr %taddr79, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr80, align 8
  %74 = load [2 x i64], ptr %taddr80, align 8
  %75 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %75([2 x i64] %72, [2 x i64] %73, [2 x i64] %74, i32 180), !dbg !3845
  unreachable, !dbg !3845

match81:                                          ; preds = %70
  %76 = load ptr, ptr %in, align 8
  %77 = load [2 x i64], ptr %dst, align 8
  %78 = call i64 %fn_phi76(ptr %retparam82, ptr %76, [2 x i64] %77), !dbg !3845
  %not_err83 = icmp eq i64 %78, 0, !dbg !3845
  %79 = call i1 @llvm.expect.i1(i1 %not_err83, i1 true), !dbg !3845
  br i1 %79, label %after_check85, label %assign_optional84, !dbg !3845

assign_optional84:                                ; preds = %match81
  store i64 %78, ptr %reterr67, align 8, !dbg !3845
  br label %err_retblock86, !dbg !3845

after_check85:                                    ; preds = %match81
  %80 = load i64, ptr %retparam82, align 8, !dbg !3845
  store i64 %80, ptr %0, align 8, !dbg !3845
  ret i64 0, !dbg !3845

err_retblock86:                                   ; preds = %assign_optional84
  %81 = load i64, ptr %reterr67, align 8, !dbg !3845
  ret i64 %81, !dbg !3845

if.exit87:                                        ; preds = %64
  %ptradd88 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3846
  %82 = load i64, ptr %ptradd88, align 8, !dbg !3846
  %83 = inttoptr i64 %82 to ptr, !dbg !3846
  %type91 = load ptr, ptr %.cachedtype90, align 8
  %84 = icmp eq ptr %83, %type91
  br i1 %84, label %cache_hit94, label %cache_miss92

cache_miss92:                                     ; preds = %if.exit87
  %ptradd93 = getelementptr inbounds i8, ptr %83, i64 16
  %85 = load ptr, ptr %ptradd93, align 8
  %86 = call ptr @.dyn_search(ptr %85, ptr @"$sel.read_to")
  store ptr %86, ptr %.inlinecache89, align 8
  store ptr %83, ptr %.cachedtype90, align 8
  br label %87

cache_hit94:                                      ; preds = %if.exit87
  %cache_hit_fn95 = load ptr, ptr %.inlinecache89, align 8
  br label %87

87:                                               ; preds = %cache_hit94, %cache_miss92
  %fn_phi96 = phi ptr [ %cache_hit_fn95, %cache_hit94 ], [ %86, %cache_miss92 ]
  %i2b97 = icmp ne ptr %fn_phi96, null
  br i1 %i2b97, label %if.then98, label %if.exit119

if.then98:                                        ; preds = %87
  %ptradd100 = getelementptr inbounds i8, ptr %dst, i64 8, !dbg !3847
  %88 = load i64, ptr %ptradd100, align 8, !dbg !3847
  %89 = inttoptr i64 %88 to ptr, !dbg !3847
  %type103 = load ptr, ptr %.cachedtype102, align 8
  %90 = icmp eq ptr %89, %type103
  br i1 %90, label %cache_hit106, label %cache_miss104

cache_miss104:                                    ; preds = %if.then98
  %ptradd105 = getelementptr inbounds i8, ptr %89, i64 16
  %91 = load ptr, ptr %ptradd105, align 8
  %92 = call ptr @.dyn_search(ptr %91, ptr @"$sel.read_to")
  store ptr %92, ptr %.inlinecache101, align 8
  store ptr %89, ptr %.cachedtype102, align 8
  br label %93

cache_hit106:                                     ; preds = %if.then98
  %cache_hit_fn107 = load ptr, ptr %.inlinecache101, align 8
  br label %93

93:                                               ; preds = %cache_hit106, %cache_miss104
  %fn_phi108 = phi ptr [ %cache_hit_fn107, %cache_hit106 ], [ %92, %cache_miss104 ]
  %94 = icmp eq ptr %fn_phi108, null
  br i1 %94, label %missing_function109, label %match113

missing_function109:                              ; preds = %93
  store %"char[]" { ptr @.panic_msg.183, i64 44 }, ptr %taddr110, align 8
  %95 = load [2 x i64], ptr %taddr110, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr111, align 8
  %96 = load [2 x i64], ptr %taddr111, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr112, align 8
  %97 = load [2 x i64], ptr %taddr112, align 8
  %98 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %98([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 181), !dbg !3848
  unreachable, !dbg !3848

match113:                                         ; preds = %93
  %99 = load ptr, ptr %dst, align 8
  %100 = load [2 x i64], ptr %in, align 8
  %101 = call i64 %fn_phi108(ptr %retparam114, ptr %99, [2 x i64] %100), !dbg !3848
  %not_err115 = icmp eq i64 %101, 0, !dbg !3848
  %102 = call i1 @llvm.expect.i1(i1 %not_err115, i1 true), !dbg !3848
  br i1 %102, label %after_check117, label %assign_optional116, !dbg !3848

assign_optional116:                               ; preds = %match113
  store i64 %101, ptr %reterr99, align 8, !dbg !3848
  br label %err_retblock118, !dbg !3848

after_check117:                                   ; preds = %match113
  %103 = load i64, ptr %retparam114, align 8, !dbg !3848
  store i64 %103, ptr %0, align 8, !dbg !3848
  ret i64 0, !dbg !3848

err_retblock118:                                  ; preds = %assign_optional116
  %104 = load i64, ptr %reterr99, align 8, !dbg !3848
  ret i64 %104, !dbg !3848

if.exit119:                                       ; preds = %87
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %in121, ptr align 8 %in, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %dst122, ptr align 8 %dst, i32 16, i1 false)
  call void @llvm.memset.p0.i64(ptr align 1 %literal, i8 0, i64 4096, i1 false)
  %105 = insertvalue %"char[]" undef, ptr %literal, 0
  %106 = insertvalue %"char[]" %105, i64 4096, 1
  store %"char[]" %106, ptr %buffer123, align 8
  call void @llvm.dbg.declare(metadata ptr %total_copied125, metadata !3849, metadata !DIExpression()), !dbg !3851
  store i64 0, ptr %total_copied125, align 8, !dbg !3851
  br label %loop.body126, !dbg !3853

loop.body126:                                     ; preds = %if.exit220, %if.exit119
  call void @llvm.dbg.declare(metadata ptr %len127, metadata !3854, metadata !DIExpression()), !dbg !3857
  %ptradd129 = getelementptr inbounds i8, ptr %in121, i64 8, !dbg !3858
  %107 = load i64, ptr %ptradd129, align 8, !dbg !3858
  %108 = inttoptr i64 %107 to ptr, !dbg !3858
  %type132 = load ptr, ptr %.cachedtype131, align 8
  %109 = icmp eq ptr %108, %type132
  br i1 %109, label %cache_hit135, label %cache_miss133

cache_miss133:                                    ; preds = %loop.body126
  %ptradd134 = getelementptr inbounds i8, ptr %108, i64 16
  %110 = load ptr, ptr %ptradd134, align 8
  %111 = call ptr @.dyn_search(ptr %110, ptr @"$sel.read")
  store ptr %111, ptr %.inlinecache130, align 8
  store ptr %108, ptr %.cachedtype131, align 8
  br label %112

cache_hit135:                                     ; preds = %loop.body126
  %cache_hit_fn136 = load ptr, ptr %.inlinecache130, align 8
  br label %112

112:                                              ; preds = %cache_hit135, %cache_miss133
  %fn_phi137 = phi ptr [ %cache_hit_fn136, %cache_hit135 ], [ %111, %cache_miss133 ]
  %113 = icmp eq ptr %fn_phi137, null
  br i1 %113, label %missing_function138, label %match142

missing_function138:                              ; preds = %112
  store %"char[]" { ptr @.panic_msg.42, i64 41 }, ptr %taddr139, align 8
  %114 = load [2 x i64], ptr %taddr139, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr140, align 8
  %115 = load [2 x i64], ptr %taddr140, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr141, align 8
  %116 = load [2 x i64], ptr %taddr141, align 8
  %117 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %117([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 198), !dbg !3859
  unreachable, !dbg !3859

match142:                                         ; preds = %112
  %118 = load ptr, ptr %in121, align 8
  %119 = load [2 x i64], ptr %buffer123, align 8
  %120 = call i64 %fn_phi137(ptr %retparam143, ptr %118, [2 x i64] %119), !dbg !3859
  %not_err144 = icmp eq i64 %120, 0, !dbg !3859
  %121 = call i1 @llvm.expect.i1(i1 %not_err144, i1 true), !dbg !3859
  br i1 %121, label %after_check146, label %assign_optional145, !dbg !3859

assign_optional145:                               ; preds = %match142
  store i64 %120, ptr %len.f128, align 8, !dbg !3859
  br label %after_assign147, !dbg !3859

after_check146:                                   ; preds = %match142
  %122 = load i64, ptr %retparam143, align 8, !dbg !3859
  store i64 %122, ptr %len127, align 8, !dbg !3859
  store i64 0, ptr %len.f128, align 8, !dbg !3859
  br label %after_assign147, !dbg !3859

after_assign147:                                  ; preds = %after_check146, %assign_optional145
  call void @llvm.dbg.declare(metadata ptr %err148, metadata !3860, metadata !DIExpression()), !dbg !3861
  br label %testblock149, !dbg !3861

testblock149:                                     ; preds = %after_assign147
  %optval150 = load i64, ptr %len.f128, align 8, !dbg !3862
  %not_err151 = icmp eq i64 %optval150, 0, !dbg !3862
  %123 = call i1 @llvm.expect.i1(i1 %not_err151, i1 true), !dbg !3862
  br i1 %123, label %after_check153, label %assign_optional152, !dbg !3862

assign_optional152:                               ; preds = %testblock149
  store i64 %optval150, ptr %err148, align 8, !dbg !3862
  br label %end_block154, !dbg !3862

after_check153:                                   ; preds = %testblock149
  store i64 0, ptr %err148, align 8, !dbg !3862
  br label %end_block154, !dbg !3862

end_block154:                                     ; preds = %after_check153, %assign_optional152
  %124 = load i64, ptr %err148, align 8, !dbg !3862
  %neq155 = icmp ne i64 %124, 0, !dbg !3862
  br i1 %neq155, label %if.then156, label %if.exit163, !dbg !3862

if.then156:                                       ; preds = %end_block154
  store i64 %124, ptr %switch157, align 8
  br label %switch.entry158

switch.entry158:                                  ; preds = %if.then156
  %125 = load i64, ptr %switch157, align 8
  %eq159 = icmp eq i64 ptrtoint (ptr @"std.io.IoError$EOF" to i64), %125, !dbg !3863
  br i1 %eq159, label %switch.case160, label %next_if161, !dbg !3863

switch.case160:                                   ; preds = %switch.entry158
  %126 = load i64, ptr %total_copied125, align 8, !dbg !3864
  store i64 %126, ptr %blockret124, align 8, !dbg !3864
  br label %expr_block.exit221, !dbg !3864

next_if161:                                       ; preds = %switch.entry158
  br label %switch.default162, !dbg !3864

switch.default162:                                ; preds = %next_if161
  %127 = load i64, ptr %err148, align 8, !dbg !3866
  store i64 %127, ptr %reterr120, align 8, !dbg !3866
  br label %err_retblock222, !dbg !3866

if.exit163:                                       ; preds = %end_block154
  %128 = load i64, ptr %len127, align 8, !dbg !3868
  %i2nb164 = icmp eq i64 %128, 0, !dbg !3868
  br i1 %i2nb164, label %if.then165, label %if.exit166, !dbg !3868

if.then165:                                       ; preds = %if.exit163
  %129 = load i64, ptr %total_copied125, align 8, !dbg !3869
  store i64 %129, ptr %blockret124, align 8, !dbg !3869
  br label %expr_block.exit221, !dbg !3869

if.exit166:                                       ; preds = %if.exit163
  call void @llvm.dbg.declare(metadata ptr %written167, metadata !3870, metadata !DIExpression()), !dbg !3871
  %130 = load %"char[]", ptr %buffer123, align 8, !dbg !3872
  %131 = extractvalue %"char[]" %130, 0, !dbg !3872
  %132 = extractvalue %"char[]" %130, 1, !dbg !3873
  %gt169 = icmp ugt i64 0, %132, !dbg !3873
  %133 = call i1 @llvm.expect.i1(i1 %gt169, i1 false), !dbg !3873
  br i1 %133, label %panic170, label %checkok180, !dbg !3873

checkok180:                                       ; preds = %if.exit166
  %134 = load i64, ptr %len127, align 8, !dbg !3874
  %add181 = add i64 0, %134, !dbg !3874
  %lt182 = icmp ult i64 %132, %add181, !dbg !3874
  %sub183 = sub i64 %add181, 1, !dbg !3874
  %135 = call i1 @llvm.expect.i1(i1 %lt182, i1 false), !dbg !3874
  br i1 %135, label %panic184, label %checkok194, !dbg !3874

checkok194:                                       ; preds = %checkok180
  %size195 = sub i64 %add181, 0, !dbg !3872
  %136 = insertvalue %"char[]" undef, ptr %131, 0, !dbg !3872
  %137 = insertvalue %"char[]" %136, i64 %size195, 1, !dbg !3872
  %ptradd196 = getelementptr inbounds i8, ptr %dst122, i64 8, !dbg !3872
  %138 = load i64, ptr %ptradd196, align 8, !dbg !3872
  %139 = inttoptr i64 %138 to ptr, !dbg !3872
  %type199 = load ptr, ptr %.cachedtype198, align 8
  %140 = icmp eq ptr %139, %type199
  br i1 %140, label %cache_hit202, label %cache_miss200

cache_miss200:                                    ; preds = %checkok194
  %ptradd201 = getelementptr inbounds i8, ptr %139, i64 16
  %141 = load ptr, ptr %ptradd201, align 8
  %142 = call ptr @.dyn_search(ptr %141, ptr @"$sel.write")
  store ptr %142, ptr %.inlinecache197, align 8
  store ptr %139, ptr %.cachedtype198, align 8
  br label %143

cache_hit202:                                     ; preds = %checkok194
  %cache_hit_fn203 = load ptr, ptr %.inlinecache197, align 8
  br label %143

143:                                              ; preds = %cache_hit202, %cache_miss200
  %fn_phi204 = phi ptr [ %cache_hit_fn203, %cache_hit202 ], [ %142, %cache_miss200 ]
  %144 = icmp eq ptr %fn_phi204, null
  br i1 %144, label %missing_function205, label %match209

missing_function205:                              ; preds = %143
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr206, align 8
  %145 = load [2 x i64], ptr %taddr206, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr207, align 8
  %146 = load [2 x i64], ptr %taddr207, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr208, align 8
  %147 = load [2 x i64], ptr %taddr208, align 8
  %148 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %148([2 x i64] %145, [2 x i64] %146, [2 x i64] %147, i32 205), !dbg !3875
  unreachable, !dbg !3875

match209:                                         ; preds = %143
  %149 = load ptr, ptr %dst122, align 8
  store %"char[]" %137, ptr %taddr211, align 8
  %150 = load [2 x i64], ptr %taddr211, align 8
  %151 = call i64 %fn_phi204(ptr %retparam210, ptr %149, [2 x i64] %150), !dbg !3875
  %not_err212 = icmp eq i64 %151, 0, !dbg !3875
  %152 = call i1 @llvm.expect.i1(i1 %not_err212, i1 true), !dbg !3875
  br i1 %152, label %after_check214, label %assign_optional213, !dbg !3875

assign_optional213:                               ; preds = %match209
  store i64 %151, ptr %error_var168, align 8, !dbg !3875
  br label %guard_block215, !dbg !3875

after_check214:                                   ; preds = %match209
  br label %noerr_block216, !dbg !3875

guard_block215:                                   ; preds = %assign_optional213
  %153 = load i64, ptr %error_var168, align 8, !dbg !3875
  store i64 %153, ptr %reterr120, align 8, !dbg !3875
  br label %err_retblock222, !dbg !3875

noerr_block216:                                   ; preds = %after_check214
  %154 = load i64, ptr %retparam210, align 8, !dbg !3875
  store i64 %154, ptr %written167, align 8, !dbg !3875
  %155 = load i64, ptr %total_copied125, align 8, !dbg !3876
  %156 = load i64, ptr %len127, align 8, !dbg !3877
  %add217 = add i64 %155, %156, !dbg !3876
  store i64 %add217, ptr %total_copied125, align 8, !dbg !3876
  %157 = load i64, ptr %written167, align 8, !dbg !3878
  %158 = load i64, ptr %len127, align 8, !dbg !3879
  %neq218 = icmp ne i64 %157, %158, !dbg !3878
  br i1 %neq218, label %if.then219, label %if.exit220, !dbg !3878

if.then219:                                       ; preds = %noerr_block216
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %reterr120, align 8, !dbg !3880
  br label %err_retblock222, !dbg !3880

if.exit220:                                       ; preds = %noerr_block216
  br label %loop.body126, !dbg !3880

expr_block.exit221:                               ; preds = %if.then165, %switch.case160
  %159 = load i64, ptr %blockret124, align 8, !dbg !3880
  store i64 %159, ptr %0, align 8, !dbg !3880
  ret i64 0, !dbg !3880

err_retblock222:                                  ; preds = %if.then219, %guard_block215, %switch.default162
  %160 = load i64, ptr %reterr120, align 8, !dbg !3880
  ret i64 %160, !dbg !3880

panic:                                            ; preds = %if.exit13
  store i64 %30, ptr %taddr14, align 8
  %161 = insertvalue %any undef, ptr %taddr14, 0
  %162 = insertvalue %any %161, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr15, align 8
  %163 = insertvalue %any undef, ptr %taddr15, 0
  %164 = insertvalue %any %163, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr16, align 8
  %165 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr17, align 8
  %166 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr18, align 8
  %167 = load [2 x i64], ptr %taddr18, align 8
  store %any %162, ptr %varargslots, align 8
  %ptradd19 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %164, ptr %ptradd19, align 8
  %168 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %168, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr20, align 8
  %169 = load [2 x i64], ptr %taddr20, align 8
  call void @std.core.builtin.panicf([2 x i64] %165, [2 x i64] %166, [2 x i64] %167, i32 205, [2 x i64] %169), !dbg !3834
  unreachable, !dbg !3834

panic21:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr22, align 8
  %170 = insertvalue %any undef, ptr %taddr22, 0
  %171 = insertvalue %any %170, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %30, ptr %taddr23, align 8
  %172 = insertvalue %any undef, ptr %taddr23, 0
  %173 = insertvalue %any %172, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr24, align 8
  %174 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr25, align 8
  %175 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr26, align 8
  %176 = load [2 x i64], ptr %taddr26, align 8
  store %any %171, ptr %varargslots27, align 8
  %ptradd28 = getelementptr inbounds i8, ptr %varargslots27, i64 16
  store %any %173, ptr %ptradd28, align 8
  %177 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp29" = insertvalue %"any[]" %177, i64 2, 1
  store %"any[]" %"$$temp29", ptr %taddr30, align 8
  %178 = load [2 x i64], ptr %taddr30, align 8
  call void @std.core.builtin.panicf([2 x i64] %174, [2 x i64] %175, [2 x i64] %176, i32 205, [2 x i64] %178), !dbg !3834
  unreachable, !dbg !3834

panic170:                                         ; preds = %if.exit166
  store i64 %132, ptr %taddr171, align 8
  %179 = insertvalue %any undef, ptr %taddr171, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr172, align 8
  %181 = insertvalue %any undef, ptr %taddr172, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.40, i64 61 }, ptr %taddr173, align 8
  %183 = load [2 x i64], ptr %taddr173, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr174, align 8
  %184 = load [2 x i64], ptr %taddr174, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr175, align 8
  %185 = load [2 x i64], ptr %taddr175, align 8
  store %any %180, ptr %varargslots176, align 8
  %ptradd177 = getelementptr inbounds i8, ptr %varargslots176, i64 16
  store %any %182, ptr %ptradd177, align 8
  %186 = insertvalue %"any[]" undef, ptr %varargslots176, 0
  %"$$temp178" = insertvalue %"any[]" %186, i64 2, 1
  store %"any[]" %"$$temp178", ptr %taddr179, align 8
  %187 = load [2 x i64], ptr %taddr179, align 8
  call void @std.core.builtin.panicf([2 x i64] %183, [2 x i64] %184, [2 x i64] %185, i32 205, [2 x i64] %187), !dbg !3872
  unreachable, !dbg !3872

panic184:                                         ; preds = %checkok180
  store i64 %sub183, ptr %taddr185, align 8
  %188 = insertvalue %any undef, ptr %taddr185, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr186, align 8
  %190 = insertvalue %any undef, ptr %taddr186, 0
  %191 = insertvalue %any %190, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr187, align 8
  %192 = load [2 x i64], ptr %taddr187, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr188, align 8
  %193 = load [2 x i64], ptr %taddr188, align 8
  store %"char[]" { ptr @.func.181, i64 7 }, ptr %taddr189, align 8
  %194 = load [2 x i64], ptr %taddr189, align 8
  store %any %189, ptr %varargslots190, align 8
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %191, ptr %ptradd191, align 8
  %195 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %195, i64 2, 1
  store %"any[]" %"$$temp192", ptr %taddr193, align 8
  %196 = load [2 x i64], ptr %taddr193, align 8
  call void @std.core.builtin.panicf([2 x i64] %192, [2 x i64] %193, [2 x i64] %194, i32 205, [2 x i64] %196), !dbg !3872
  unreachable, !dbg !3872
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.wrap_bytes(ptr noalias sret(%ByteReader) align 8 %0, [2 x i64] %1) #0 !dbg !3881 {
entry:
  %bytes = alloca %"char[]", align 8
  %literal = alloca %ByteReader, align 8
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3884, metadata !DIExpression()), !dbg !3885
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %bytes, i32 16, i1 false), !dbg !3886
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3886
  store i64 0, ptr %ptradd, align 8, !dbg !3887
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !3887
  ret void, !dbg !3887
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.ReflectedParam.to_format(ptr %0, ptr %1, ptr %2) #0 !dbg !3888 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %f = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %varargslots = alloca [1 x %any], align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"any[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !3896
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3896
  br i1 %4, label %panic, label %checkok, !dbg !3896

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3897, metadata !DIExpression()), !dbg !3898
  store ptr %2, ptr %f, align 8
  call void @llvm.dbg.declare(metadata ptr %f, metadata !3899, metadata !DIExpression()), !dbg !3900
  %5 = load ptr, ptr %self, align 8, !dbg !3901
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !3901
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.String" to i64), 1, !dbg !3901
  store %any %7, ptr %varargslots, align 8, !dbg !3901
  %8 = insertvalue %"any[]" undef, ptr %varargslots, 0, !dbg !3901
  %"$$temp" = insertvalue %"any[]" %8, i64 1, 1, !dbg !3901
  %9 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str.186, i64 16 }, ptr %taddr3, align 8
  %10 = load [2 x i64], ptr %taddr3, align 8
  store %"any[]" %"$$temp", ptr %taddr4, align 8
  %11 = load [2 x i64], ptr %taddr4, align 8
  %12 = call i64 @std.io.Formatter.printf(ptr %retparam, ptr %9, [2 x i64] %10, [2 x i64] %11), !dbg !3902
  %not_err = icmp eq i64 %12, 0, !dbg !3902
  %13 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3902
  br i1 %13, label %after_check, label %assign_optional, !dbg !3902

assign_optional:                                  ; preds = %checkok
  store i64 %12, ptr %reterr, align 8, !dbg !3902
  br label %err_retblock, !dbg !3902

after_check:                                      ; preds = %checkok
  %14 = load i64, ptr %retparam, align 8, !dbg !3902
  store i64 %14, ptr %0, align 8, !dbg !3902
  ret i64 0, !dbg !3902

err_retblock:                                     ; preds = %assign_optional
  %15 = load i64, ptr %reterr, align 8, !dbg !3902
  ret i64 %15, !dbg !3902

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %16 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %17 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.185, i64 9 }, ptr %taddr2, align 8
  %18 = load [2 x i64], ptr %taddr2, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 61), !dbg !3898
  unreachable, !dbg !3898
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.printf(ptr %0, ptr %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !3903 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !3906
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !3906
  br i1 %5, label %panic, label %checkok, !dbg !3906

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3907, metadata !DIExpression()), !dbg !3908
  store [2 x i64] %2, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !3909, metadata !DIExpression()), !dbg !3910
  store [2 x i64] %3, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !3911, metadata !DIExpression()), !dbg !3912
  %6 = load ptr, ptr %self, align 8
  %7 = load [2 x i64], ptr %format, align 8
  %8 = load [2 x i64], ptr %args, align 8
  %9 = call i64 @std.io.Formatter.vprintf(ptr %retparam, ptr %6, [2 x i64] %7, [2 x i64] %8) #5, !dbg !3913
  %not_err = icmp eq i64 %9, 0, !dbg !3913
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3913
  br i1 %10, label %after_check, label %assign_optional, !dbg !3913

assign_optional:                                  ; preds = %checkok
  store i64 %9, ptr %reterr, align 8, !dbg !3913
  br label %err_retblock, !dbg !3913

after_check:                                      ; preds = %checkok
  %11 = load i64, ptr %retparam, align 8, !dbg !3913
  store i64 %11, ptr %0, align 8, !dbg !3913
  ret i64 0, !dbg !3913

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !3913
  ret i64 %12, !dbg !3913

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %13 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %14 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.187, i64 6 }, ptr %taddr2, align 8
  %15 = load [2 x i64], ptr %taddr2, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 66), !dbg !3908
  unreachable, !dbg !3908
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.Formatter.init(ptr %0, ptr %1, ptr %2) #0 !dbg !3914 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %out_fn = alloca ptr, align 8
  %data = alloca ptr, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %Formatter, align 8
  %3 = icmp eq ptr %0, null, !dbg !3917
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3917
  br i1 %4, label %panic, label %checkok, !dbg !3917

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3918, metadata !DIExpression()), !dbg !3919
  store ptr %1, ptr %out_fn, align 8
  call void @llvm.dbg.declare(metadata ptr %out_fn, metadata !3920, metadata !DIExpression()), !dbg !3921
  store ptr %2, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !3922, metadata !DIExpression()), !dbg !3923
  %5 = load ptr, ptr %self, align 8, !dbg !3924
  %checknull = icmp eq ptr %5, null, !dbg !3924
  %6 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3924
  br i1 %6, label %panic3, label %checkok7, !dbg !3924

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 48, i1 false)
  %7 = load ptr, ptr %data, align 8, !dbg !3925
  store ptr %7, ptr %.assign_list, align 8, !dbg !3925
  %ptradd = getelementptr inbounds i8, ptr %.assign_list, i64 8, !dbg !3925
  %8 = load ptr, ptr %out_fn, align 8, !dbg !3926
  store ptr %8, ptr %ptradd, align 8, !dbg !3926
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %5, ptr align 8 %.assign_list, i32 48, i1 false), !dbg !3926
  ret void, !dbg !3926

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %9 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %10 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %11 = load [2 x i64], ptr %taddr2, align 8
  %12 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %12([2 x i64] %9, [2 x i64] %10, [2 x i64] %11, i32 96), !dbg !3919
  unreachable, !dbg !3919

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %13 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr5, align 8
  %14 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %15 = load [2 x i64], ptr %taddr6, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 98), !dbg !3924
  unreachable, !dbg !3924
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.out(ptr %0, ptr %1, i8 %2) #0 !dbg !3927 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %c = alloca i8, align 1
  %err = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !3930
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3930
  br i1 %4, label %panic, label %checkok, !dbg !3930

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3931, metadata !DIExpression()), !dbg !3932
  store i8 %2, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3933, metadata !DIExpression()), !dbg !3934
  call void @llvm.dbg.declare(metadata ptr %err, metadata !3935, metadata !DIExpression()), !dbg !3936
  br label %testblock, !dbg !3936

testblock:                                        ; preds = %checkok
  %5 = load ptr, ptr %self, align 8, !dbg !3937
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !3937
  %6 = load ptr, ptr %ptradd, align 8, !dbg !3937
  %checknull = icmp eq ptr %6, null, !dbg !3937
  %7 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3937
  br i1 %7, label %panic3, label %checkok7, !dbg !3937

checkok7:                                         ; preds = %testblock
  %8 = load ptr, ptr %self, align 8, !dbg !3938
  %9 = load ptr, ptr %8, align 8, !dbg !3939
  %10 = load i8, ptr %c, align 1, !dbg !3939
  %11 = call i64 %6(ptr %9, i8 %10), !dbg !3937
  %not_err = icmp eq i64 %11, 0, !dbg !3937
  %12 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3937
  br i1 %12, label %after_check, label %assign_optional, !dbg !3937

assign_optional:                                  ; preds = %checkok7
  store i64 %11, ptr %err, align 8, !dbg !3937
  br label %end_block, !dbg !3937

after_check:                                      ; preds = %checkok7
  store i64 0, ptr %err, align 8, !dbg !3937
  br label %end_block, !dbg !3937

end_block:                                        ; preds = %after_check, %assign_optional
  %13 = load i64, ptr %err, align 8, !dbg !3937
  %i2b = icmp ne i64 %13, 0, !dbg !3937
  br i1 %i2b, label %if.then, label %if.exit16, !dbg !3937

if.then:                                          ; preds = %end_block
  %14 = load ptr, ptr %self, align 8, !dbg !3940
  %ptradd8 = getelementptr inbounds i8, ptr %14, i64 16, !dbg !3940
  %ptradd9 = getelementptr inbounds i8, ptr %ptradd8, i64 24, !dbg !3940
  %15 = load i64, ptr %ptradd9, align 8, !dbg !3940
  %i2b10 = icmp ne i64 %15, 0, !dbg !3940
  br i1 %i2b10, label %if.then11, label %if.exit, !dbg !3940

if.then11:                                        ; preds = %if.then
  %16 = load ptr, ptr %self, align 8, !dbg !3942
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !3942
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 24, !dbg !3942
  %17 = load i64, ptr %ptradd13, align 8, !dbg !3942
  ret i64 %17, !dbg !3942

if.exit:                                          ; preds = %if.then
  %18 = load ptr, ptr %self, align 8, !dbg !3943
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !3943
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 24, !dbg !3943
  %19 = load i64, ptr %err, align 8, !dbg !3944
  store i64 %19, ptr %ptradd15, align 8, !dbg !3944
  %20 = load i64, ptr %err, align 8, !dbg !3945
  ret i64 %20, !dbg !3945

if.exit16:                                        ; preds = %end_block
  store i64 1, ptr %0, align 8, !dbg !3946
  ret i64 0, !dbg !3946

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %21 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %22 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.188, i64 3 }, ptr %taddr2, align 8
  %23 = load [2 x i64], ptr %taddr2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 101), !dbg !3932
  unreachable, !dbg !3932

panic3:                                           ; preds = %testblock
  store %"char[]" { ptr @.panic_msg.189, i64 54 }, ptr %taddr4, align 8
  %25 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr5, align 8
  %26 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.188, i64 3 }, ptr %taddr6, align 8
  %27 = load [2 x i64], ptr %taddr6, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 103), !dbg !3937
  unreachable, !dbg !3937
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.print_with_function(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !3947 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %old = alloca i32, align 4
  %old_width = alloca i32, align 4
  %old_prec = alloca i32, align 4
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %reterr21 = alloca i64, align 8
  %.inlinecache23 = alloca ptr, align 8
  %.cachedtype24 = alloca ptr, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %retparam34 = alloca i64, align 8
  %.inlinecache51 = alloca ptr, align 8
  %.cachedtype52 = alloca ptr, align 8
  %old61 = alloca i32, align 4
  %old_width63 = alloca i32, align 4
  %old_prec66 = alloca i32, align 4
  %reterr71 = alloca i64, align 8
  %retparam72 = alloca i64, align 8
  %taddr73 = alloca %"char[]", align 8
  %buffer = alloca [1024 x i8], align 1
  %allocator = alloca %OnStackAllocator, align 8
  %taddr89 = alloca %"char[]", align 8
  %mem = alloca %any, align 8
  %reterr90 = alloca i64, align 8
  %.inlinecache92 = alloca ptr, align 8
  %.cachedtype93 = alloca ptr, align 8
  %taddr101 = alloca %"char[]", align 8
  %taddr102 = alloca %"char[]", align 8
  %taddr103 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %retparam105 = alloca i64, align 8
  store ptr null, ptr %.cachedtype93, align 8, !dbg !3954
  store ptr null, ptr %.cachedtype52, align 8, !dbg !3954
  store ptr null, ptr %.cachedtype24, align 8, !dbg !3954
  store ptr null, ptr %.cachedtype, align 8, !dbg !3954
  %3 = icmp eq ptr %1, null, !dbg !3954
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !3954
  br i1 %4, label %panic, label %checkok, !dbg !3954

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3955, metadata !DIExpression()), !dbg !3956
  store [2 x i64] %2, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !3957, metadata !DIExpression()), !dbg !3958
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3959
  %5 = load i64, ptr %ptradd, align 8, !dbg !3959
  %6 = inttoptr i64 %5 to ptr, !dbg !3959
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !3954
  %7 = icmp eq ptr %6, %type, !dbg !3954
  br i1 %7, label %cache_hit, label %cache_miss, !dbg !3954

cache_miss:                                       ; preds = %checkok
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 16, !dbg !3954
  %8 = load ptr, ptr %ptradd3, align 8, !dbg !3954
  %9 = call ptr @.dyn_search(ptr %8, ptr @"$sel.to_format"), !dbg !3954
  store ptr %9, ptr %.inlinecache, align 8, !dbg !3954
  store ptr %6, ptr %.cachedtype, align 8, !dbg !3954
  br label %10, !dbg !3954

cache_hit:                                        ; preds = %checkok
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !3954
  br label %10, !dbg !3954

10:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %9, %cache_miss ], !dbg !3954
  %i2b = icmp ne ptr %fn_phi, null, !dbg !3954
  br i1 %i2b, label %if.then, label %if.exit49, !dbg !3954

if.then:                                          ; preds = %10
  call void @llvm.dbg.declare(metadata ptr %old, metadata !3960, metadata !DIExpression()), !dbg !3962
  %11 = load ptr, ptr %self, align 8, !dbg !3963
  %ptradd4 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !3963
  %12 = load i32, ptr %ptradd4, align 8, !dbg !3963
  store i32 %12, ptr %old, align 4, !dbg !3963
  call void @llvm.dbg.declare(metadata ptr %old_width, metadata !3964, metadata !DIExpression()), !dbg !3965
  %13 = load ptr, ptr %self, align 8, !dbg !3966
  %ptradd5 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !3966
  %ptradd6 = getelementptr inbounds i8, ptr %ptradd5, i64 4, !dbg !3966
  %14 = load i32, ptr %ptradd6, align 4, !dbg !3966
  store i32 %14, ptr %old_width, align 4, !dbg !3966
  call void @llvm.dbg.declare(metadata ptr %old_prec, metadata !3967, metadata !DIExpression()), !dbg !3968
  %15 = load ptr, ptr %self, align 8, !dbg !3969
  %ptradd7 = getelementptr inbounds i8, ptr %15, i64 16, !dbg !3969
  %ptradd8 = getelementptr inbounds i8, ptr %ptradd7, i64 8, !dbg !3969
  %16 = load i32, ptr %ptradd8, align 8, !dbg !3969
  store i32 %16, ptr %old_prec, align 4, !dbg !3969
  %17 = load ptr, ptr %arg, align 8, !dbg !3970
  %i2nb = icmp eq ptr %17, null, !dbg !3970
  br i1 %i2nb, label %if.then9, label %if.exit, !dbg !3970

if.then9:                                         ; preds = %if.then
  %18 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.191, i64 6 }, ptr %taddr10, align 8
  %19 = load [2 x i64], ptr %taddr10, align 8
  %20 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %18, [2 x i64] %19), !dbg !3971
  %not_err = icmp eq i64 %20, 0, !dbg !3971
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3971
  br i1 %21, label %after_check, label %assign_optional, !dbg !3971

assign_optional:                                  ; preds = %if.then9
  store i64 %20, ptr %reterr, align 8, !dbg !3971
  br label %err_retblock, !dbg !3971

after_check:                                      ; preds = %if.then9
  %22 = load i64, ptr %retparam, align 8, !dbg !3971
  %23 = load ptr, ptr %self, align 8, !dbg !3972
  %ptradd11 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !3972
  %24 = load i32, ptr %old, align 4, !dbg !3974
  store i32 %24, ptr %ptradd11, align 8, !dbg !3974
  %25 = load ptr, ptr %self, align 8, !dbg !3975
  %ptradd12 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !3975
  %ptradd13 = getelementptr inbounds i8, ptr %ptradd12, i64 4, !dbg !3975
  %26 = load i32, ptr %old_width, align 4, !dbg !3976
  store i32 %26, ptr %ptradd13, align 4, !dbg !3976
  %27 = load ptr, ptr %self, align 8, !dbg !3977
  %ptradd14 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !3977
  %ptradd15 = getelementptr inbounds i8, ptr %ptradd14, i64 8, !dbg !3977
  %28 = load i32, ptr %old_prec, align 4, !dbg !3978
  store i32 %28, ptr %ptradd15, align 8, !dbg !3978
  store i64 %22, ptr %0, align 8, !dbg !3978
  ret i64 0, !dbg !3978

err_retblock:                                     ; preds = %assign_optional
  %29 = load ptr, ptr %self, align 8, !dbg !3979
  %ptradd16 = getelementptr inbounds i8, ptr %29, i64 16, !dbg !3979
  %30 = load i32, ptr %old, align 4, !dbg !3981
  store i32 %30, ptr %ptradd16, align 8, !dbg !3981
  %31 = load ptr, ptr %self, align 8, !dbg !3982
  %ptradd17 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !3982
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 4, !dbg !3982
  %32 = load i32, ptr %old_width, align 4, !dbg !3983
  store i32 %32, ptr %ptradd18, align 4, !dbg !3983
  %33 = load ptr, ptr %self, align 8, !dbg !3984
  %ptradd19 = getelementptr inbounds i8, ptr %33, i64 16, !dbg !3984
  %ptradd20 = getelementptr inbounds i8, ptr %ptradd19, i64 8, !dbg !3984
  %34 = load i32, ptr %old_prec, align 4, !dbg !3985
  store i32 %34, ptr %ptradd20, align 8, !dbg !3985
  %35 = load i64, ptr %reterr, align 8, !dbg !3985
  ret i64 %35, !dbg !3985

if.exit:                                          ; preds = %if.then
  %ptradd22 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !3986
  %36 = load i64, ptr %ptradd22, align 8, !dbg !3986
  %37 = inttoptr i64 %36 to ptr, !dbg !3986
  %type25 = load ptr, ptr %.cachedtype24, align 8, !dbg !3954
  %38 = icmp eq ptr %37, %type25, !dbg !3954
  br i1 %38, label %cache_hit28, label %cache_miss26, !dbg !3954

cache_miss26:                                     ; preds = %if.exit
  %ptradd27 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !3954
  %39 = load ptr, ptr %ptradd27, align 8, !dbg !3954
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.to_format"), !dbg !3954
  store ptr %40, ptr %.inlinecache23, align 8, !dbg !3954
  store ptr %37, ptr %.cachedtype24, align 8, !dbg !3954
  br label %41, !dbg !3954

cache_hit28:                                      ; preds = %if.exit
  %cache_hit_fn29 = load ptr, ptr %.inlinecache23, align 8, !dbg !3954
  br label %41, !dbg !3954

41:                                               ; preds = %cache_hit28, %cache_miss26
  %fn_phi30 = phi ptr [ %cache_hit_fn29, %cache_hit28 ], [ %40, %cache_miss26 ], !dbg !3954
  %42 = icmp eq ptr %fn_phi30, null, !dbg !3954
  br i1 %42, label %missing_function, label %match, !dbg !3954

missing_function:                                 ; preds = %41
  store %"char[]" { ptr @.panic_msg.192, i64 46 }, ptr %taddr31, align 8
  %43 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr32, align 8
  %44 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.190, i64 19 }, ptr %taddr33, align 8
  %45 = load [2 x i64], ptr %taddr33, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 126), !dbg !3987
  unreachable, !dbg !3987

match:                                            ; preds = %41
  %47 = load ptr, ptr %arg, align 8
  %48 = load ptr, ptr %self, align 8
  %49 = call i64 %fn_phi30(ptr %retparam34, ptr %47, ptr %48), !dbg !3987
  %not_err35 = icmp eq i64 %49, 0, !dbg !3987
  %50 = call i1 @llvm.expect.i1(i1 %not_err35, i1 true), !dbg !3987
  br i1 %50, label %after_check37, label %assign_optional36, !dbg !3987

assign_optional36:                                ; preds = %match
  store i64 %49, ptr %reterr21, align 8, !dbg !3987
  br label %err_retblock43, !dbg !3987

after_check37:                                    ; preds = %match
  %51 = load i64, ptr %retparam34, align 8, !dbg !3987
  %52 = load ptr, ptr %self, align 8, !dbg !3988
  %ptradd38 = getelementptr inbounds i8, ptr %52, i64 16, !dbg !3988
  %53 = load i32, ptr %old, align 4, !dbg !3990
  store i32 %53, ptr %ptradd38, align 8, !dbg !3990
  %54 = load ptr, ptr %self, align 8, !dbg !3991
  %ptradd39 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !3991
  %ptradd40 = getelementptr inbounds i8, ptr %ptradd39, i64 4, !dbg !3991
  %55 = load i32, ptr %old_width, align 4, !dbg !3992
  store i32 %55, ptr %ptradd40, align 4, !dbg !3992
  %56 = load ptr, ptr %self, align 8, !dbg !3993
  %ptradd41 = getelementptr inbounds i8, ptr %56, i64 16, !dbg !3993
  %ptradd42 = getelementptr inbounds i8, ptr %ptradd41, i64 8, !dbg !3993
  %57 = load i32, ptr %old_prec, align 4, !dbg !3994
  store i32 %57, ptr %ptradd42, align 8, !dbg !3994
  store i64 %51, ptr %0, align 8, !dbg !3994
  ret i64 0, !dbg !3994

err_retblock43:                                   ; preds = %assign_optional36
  %58 = load ptr, ptr %self, align 8, !dbg !3995
  %ptradd44 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !3995
  %59 = load i32, ptr %old, align 4, !dbg !3997
  store i32 %59, ptr %ptradd44, align 8, !dbg !3997
  %60 = load ptr, ptr %self, align 8, !dbg !3998
  %ptradd45 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !3998
  %ptradd46 = getelementptr inbounds i8, ptr %ptradd45, i64 4, !dbg !3998
  %61 = load i32, ptr %old_width, align 4, !dbg !3999
  store i32 %61, ptr %ptradd46, align 4, !dbg !3999
  %62 = load ptr, ptr %self, align 8, !dbg !4000
  %ptradd47 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !4000
  %ptradd48 = getelementptr inbounds i8, ptr %ptradd47, i64 8, !dbg !4000
  %63 = load i32, ptr %old_prec, align 4, !dbg !4001
  store i32 %63, ptr %ptradd48, align 8, !dbg !4001
  %64 = load i64, ptr %reterr21, align 8, !dbg !4001
  ret i64 %64, !dbg !4001

if.exit49:                                        ; preds = %10
  %ptradd50 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4002
  %65 = load i64, ptr %ptradd50, align 8, !dbg !4002
  %66 = inttoptr i64 %65 to ptr, !dbg !4002
  %type53 = load ptr, ptr %.cachedtype52, align 8, !dbg !3954
  %67 = icmp eq ptr %66, %type53, !dbg !3954
  br i1 %67, label %cache_hit56, label %cache_miss54, !dbg !3954

cache_miss54:                                     ; preds = %if.exit49
  %ptradd55 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !3954
  %68 = load ptr, ptr %ptradd55, align 8, !dbg !3954
  %69 = call ptr @.dyn_search(ptr %68, ptr @"$sel.to_string"), !dbg !3954
  store ptr %69, ptr %.inlinecache51, align 8, !dbg !3954
  store ptr %66, ptr %.cachedtype52, align 8, !dbg !3954
  br label %70, !dbg !3954

cache_hit56:                                      ; preds = %if.exit49
  %cache_hit_fn57 = load ptr, ptr %.inlinecache51, align 8, !dbg !3954
  br label %70, !dbg !3954

70:                                               ; preds = %cache_hit56, %cache_miss54
  %fn_phi58 = phi ptr [ %cache_hit_fn57, %cache_hit56 ], [ %69, %cache_miss54 ], !dbg !3954
  %i2b59 = icmp ne ptr %fn_phi58, null, !dbg !3954
  br i1 %i2b59, label %if.then60, label %if.exit120, !dbg !3954

if.then60:                                        ; preds = %70
  call void @llvm.dbg.declare(metadata ptr %old61, metadata !4003, metadata !DIExpression()), !dbg !4005
  %71 = load ptr, ptr %self, align 8, !dbg !4006
  %ptradd62 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !4006
  %72 = load i32, ptr %ptradd62, align 8, !dbg !4006
  store i32 %72, ptr %old61, align 4, !dbg !4006
  call void @llvm.dbg.declare(metadata ptr %old_width63, metadata !4007, metadata !DIExpression()), !dbg !4008
  %73 = load ptr, ptr %self, align 8, !dbg !4009
  %ptradd64 = getelementptr inbounds i8, ptr %73, i64 16, !dbg !4009
  %ptradd65 = getelementptr inbounds i8, ptr %ptradd64, i64 4, !dbg !4009
  %74 = load i32, ptr %ptradd65, align 4, !dbg !4009
  store i32 %74, ptr %old_width63, align 4, !dbg !4009
  call void @llvm.dbg.declare(metadata ptr %old_prec66, metadata !4010, metadata !DIExpression()), !dbg !4011
  %75 = load ptr, ptr %self, align 8, !dbg !4012
  %ptradd67 = getelementptr inbounds i8, ptr %75, i64 16, !dbg !4012
  %ptradd68 = getelementptr inbounds i8, ptr %ptradd67, i64 8, !dbg !4012
  %76 = load i32, ptr %ptradd68, align 8, !dbg !4012
  store i32 %76, ptr %old_prec66, align 4, !dbg !4012
  %77 = load ptr, ptr %arg, align 8, !dbg !4013
  %i2nb69 = icmp eq ptr %77, null, !dbg !4013
  br i1 %i2nb69, label %if.then70, label %if.exit88, !dbg !4013

if.then70:                                        ; preds = %if.then60
  %78 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.193, i64 6 }, ptr %taddr73, align 8
  %79 = load [2 x i64], ptr %taddr73, align 8
  %80 = call i64 @std.io.Formatter.out_substr(ptr %retparam72, ptr %78, [2 x i64] %79), !dbg !4014
  %not_err74 = icmp eq i64 %80, 0, !dbg !4014
  %81 = call i1 @llvm.expect.i1(i1 %not_err74, i1 true), !dbg !4014
  br i1 %81, label %after_check76, label %assign_optional75, !dbg !4014

assign_optional75:                                ; preds = %if.then70
  store i64 %80, ptr %reterr71, align 8, !dbg !4014
  br label %err_retblock82, !dbg !4014

after_check76:                                    ; preds = %if.then70
  %82 = load i64, ptr %retparam72, align 8, !dbg !4014
  %83 = load ptr, ptr %self, align 8, !dbg !4015
  %ptradd77 = getelementptr inbounds i8, ptr %83, i64 16, !dbg !4015
  %84 = load i32, ptr %old61, align 4, !dbg !4017
  store i32 %84, ptr %ptradd77, align 8, !dbg !4017
  %85 = load ptr, ptr %self, align 8, !dbg !4018
  %ptradd78 = getelementptr inbounds i8, ptr %85, i64 16, !dbg !4018
  %ptradd79 = getelementptr inbounds i8, ptr %ptradd78, i64 4, !dbg !4018
  %86 = load i32, ptr %old_width63, align 4, !dbg !4019
  store i32 %86, ptr %ptradd79, align 4, !dbg !4019
  %87 = load ptr, ptr %self, align 8, !dbg !4020
  %ptradd80 = getelementptr inbounds i8, ptr %87, i64 16, !dbg !4020
  %ptradd81 = getelementptr inbounds i8, ptr %ptradd80, i64 8, !dbg !4020
  %88 = load i32, ptr %old_prec66, align 4, !dbg !4021
  store i32 %88, ptr %ptradd81, align 8, !dbg !4021
  store i64 %82, ptr %0, align 8, !dbg !4021
  ret i64 0, !dbg !4021

err_retblock82:                                   ; preds = %assign_optional75
  %89 = load ptr, ptr %self, align 8, !dbg !4022
  %ptradd83 = getelementptr inbounds i8, ptr %89, i64 16, !dbg !4022
  %90 = load i32, ptr %old61, align 4, !dbg !4024
  store i32 %90, ptr %ptradd83, align 8, !dbg !4024
  %91 = load ptr, ptr %self, align 8, !dbg !4025
  %ptradd84 = getelementptr inbounds i8, ptr %91, i64 16, !dbg !4025
  %ptradd85 = getelementptr inbounds i8, ptr %ptradd84, i64 4, !dbg !4025
  %92 = load i32, ptr %old_width63, align 4, !dbg !4026
  store i32 %92, ptr %ptradd85, align 4, !dbg !4026
  %93 = load ptr, ptr %self, align 8, !dbg !4027
  %ptradd86 = getelementptr inbounds i8, ptr %93, i64 16, !dbg !4027
  %ptradd87 = getelementptr inbounds i8, ptr %ptradd86, i64 8, !dbg !4027
  %94 = load i32, ptr %old_prec66, align 4, !dbg !4028
  store i32 %94, ptr %ptradd87, align 8, !dbg !4028
  %95 = load i64, ptr %reterr71, align 8, !dbg !4028
  ret i64 %95, !dbg !4028

if.exit88:                                        ; preds = %if.then60
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !4029, metadata !DIExpression()), !dbg !4034
  call void @llvm.memset.p0.i64(ptr align 1 %buffer, i8 0, i64 1024, i1 false), !dbg !4034
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4036, metadata !DIExpression()), !dbg !4049
  call void @llvm.memset.p0.i64(ptr align 8 %allocator, i8 0, i64 48, i1 false), !dbg !4049
  %96 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !4050
  %97 = insertvalue %"char[]" %96, i64 1024, 1, !dbg !4050
  store %"char[]" %97, ptr %taddr89, align 8
  %98 = load [2 x i64], ptr %taddr89, align 8
  %99 = load [2 x i64], ptr @std.core.mem.allocator.thread_allocator, align 8
  call void @std.core.mem.allocator.OnStackAllocator.init(ptr %allocator, [2 x i64] %98, [2 x i64] %99), !dbg !4051
  call void @llvm.dbg.declare(metadata ptr %mem, metadata !4052, metadata !DIExpression()), !dbg !4053
  %100 = insertvalue %any undef, ptr %allocator, 0, !dbg !4054
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.OnStackAllocator" to i64), 1, !dbg !4054
  store %any %101, ptr %mem, align 8, !dbg !4054
  %ptradd91 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4056
  %102 = load i64, ptr %ptradd91, align 8, !dbg !4056
  %103 = inttoptr i64 %102 to ptr, !dbg !4056
  %type94 = load ptr, ptr %.cachedtype93, align 8, !dbg !3954
  %104 = icmp eq ptr %103, %type94, !dbg !3954
  br i1 %104, label %cache_hit97, label %cache_miss95, !dbg !3954

cache_miss95:                                     ; preds = %if.exit88
  %ptradd96 = getelementptr inbounds i8, ptr %103, i64 16, !dbg !3954
  %105 = load ptr, ptr %ptradd96, align 8, !dbg !3954
  %106 = call ptr @.dyn_search(ptr %105, ptr @"$sel.to_string"), !dbg !3954
  store ptr %106, ptr %.inlinecache92, align 8, !dbg !3954
  store ptr %103, ptr %.cachedtype93, align 8, !dbg !3954
  br label %107, !dbg !3954

cache_hit97:                                      ; preds = %if.exit88
  %cache_hit_fn98 = load ptr, ptr %.inlinecache92, align 8, !dbg !3954
  br label %107, !dbg !3954

107:                                              ; preds = %cache_hit97, %cache_miss95
  %fn_phi99 = phi ptr [ %cache_hit_fn98, %cache_hit97 ], [ %106, %cache_miss95 ], !dbg !3954
  %108 = icmp eq ptr %fn_phi99, null, !dbg !3954
  br i1 %108, label %missing_function100, label %match104, !dbg !3954

missing_function100:                              ; preds = %107
  store %"char[]" { ptr @.panic_msg.194, i64 46 }, ptr %taddr101, align 8
  %109 = load [2 x i64], ptr %taddr101, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr102, align 8
  %110 = load [2 x i64], ptr %taddr102, align 8
  store %"char[]" { ptr @.func.190, i64 19 }, ptr %taddr103, align 8
  %111 = load [2 x i64], ptr %taddr103, align 8
  %112 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %112([2 x i64] %109, [2 x i64] %110, [2 x i64] %111, i32 142), !dbg !4058
  unreachable, !dbg !4058

match104:                                         ; preds = %107
  %113 = load ptr, ptr %arg, align 8, !dbg !4058
  %114 = load [2 x i64], ptr %mem, align 8, !dbg !4058
  %115 = call [2 x i64] %fn_phi99(ptr %113, [2 x i64] %114), !dbg !4058
  store [2 x i64] %115, ptr %result, align 8
  %116 = load ptr, ptr %self, align 8
  %117 = load [2 x i64], ptr %result, align 8
  %118 = call i64 @std.io.Formatter.out_substr(ptr %retparam105, ptr %116, [2 x i64] %117), !dbg !4059
  %not_err106 = icmp eq i64 %118, 0, !dbg !4059
  %119 = call i1 @llvm.expect.i1(i1 %not_err106, i1 true), !dbg !4059
  br i1 %119, label %after_check108, label %assign_optional107, !dbg !4059

assign_optional107:                               ; preds = %match104
  store i64 %118, ptr %reterr90, align 8, !dbg !4059
  br label %err_retblock114, !dbg !4059

after_check108:                                   ; preds = %match104
  %120 = load i64, ptr %retparam105, align 8, !dbg !4059
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !4060
  %121 = load ptr, ptr %self, align 8, !dbg !4062
  %ptradd109 = getelementptr inbounds i8, ptr %121, i64 16, !dbg !4062
  %122 = load i32, ptr %old61, align 4, !dbg !4064
  store i32 %122, ptr %ptradd109, align 8, !dbg !4064
  %123 = load ptr, ptr %self, align 8, !dbg !4065
  %ptradd110 = getelementptr inbounds i8, ptr %123, i64 16, !dbg !4065
  %ptradd111 = getelementptr inbounds i8, ptr %ptradd110, i64 4, !dbg !4065
  %124 = load i32, ptr %old_width63, align 4, !dbg !4066
  store i32 %124, ptr %ptradd111, align 4, !dbg !4066
  %125 = load ptr, ptr %self, align 8, !dbg !4067
  %ptradd112 = getelementptr inbounds i8, ptr %125, i64 16, !dbg !4067
  %ptradd113 = getelementptr inbounds i8, ptr %ptradd112, i64 8, !dbg !4067
  %126 = load i32, ptr %old_prec66, align 4, !dbg !4068
  store i32 %126, ptr %ptradd113, align 8, !dbg !4068
  store i64 %120, ptr %0, align 8, !dbg !4068
  ret i64 0, !dbg !4068

err_retblock114:                                  ; preds = %assign_optional107
  call void @std.core.mem.allocator.OnStackAllocator.free(ptr %allocator), !dbg !4069
  %127 = load ptr, ptr %self, align 8, !dbg !4071
  %ptradd115 = getelementptr inbounds i8, ptr %127, i64 16, !dbg !4071
  %128 = load i32, ptr %old61, align 4, !dbg !4073
  store i32 %128, ptr %ptradd115, align 8, !dbg !4073
  %129 = load ptr, ptr %self, align 8, !dbg !4074
  %ptradd116 = getelementptr inbounds i8, ptr %129, i64 16, !dbg !4074
  %ptradd117 = getelementptr inbounds i8, ptr %ptradd116, i64 4, !dbg !4074
  %130 = load i32, ptr %old_width63, align 4, !dbg !4075
  store i32 %130, ptr %ptradd117, align 4, !dbg !4075
  %131 = load ptr, ptr %self, align 8, !dbg !4076
  %ptradd118 = getelementptr inbounds i8, ptr %131, i64 16, !dbg !4076
  %ptradd119 = getelementptr inbounds i8, ptr %ptradd118, i64 8, !dbg !4076
  %132 = load i32, ptr %old_prec66, align 4, !dbg !4077
  store i32 %132, ptr %ptradd119, align 8, !dbg !4077
  %133 = load i64, ptr %reterr90, align 8, !dbg !4077
  ret i64 %133, !dbg !4077

if.exit120:                                       ; preds = %70
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !4078

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %134 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %135 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.190, i64 19 }, ptr %taddr2, align 8
  %136 = load [2 x i64], ptr %taddr2, align 8
  %137 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %137([2 x i64] %134, [2 x i64] %135, [2 x i64] %136, i32 112), !dbg !3956
  unreachable, !dbg !3956
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.Formatter.out_str(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !4079 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %arg = alloca %any, align 8
  %switch = alloca i8, align 1
  %reterr = alloca i64, align 8
  %retparam = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %reterr5 = alloca i64, align 8
  %retparam6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %reterr13 = alloca i64, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %faultname_zero = alloca %"char[]", align 8
  %retparam19 = alloca i64, align 8
  %reterr25 = alloca i64, align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %retparam32 = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"any[]", align 8
  %flags = alloca i32, align 4
  %width = alloca i32, align 4
  %reterr48 = alloca i64, align 8
  %retparam49 = alloca i64, align 8
  %retparam52 = alloca i64, align 8
  %taddr53 = alloca %"char[]", align 8
  %flags65 = alloca i32, align 4
  %width67 = alloca i32, align 4
  %reterr73 = alloca i64, align 8
  %retparam74 = alloca double, align 8
  %retparam77 = alloca i64, align 8
  %retparam81 = alloca i64, align 8
  %taddr82 = alloca %"char[]", align 8
  %reterr96 = alloca i64, align 8
  %taddr99 = alloca %"char[]", align 8
  %taddr100 = alloca %"char[]", align 8
  %taddr101 = alloca %"char[]", align 8
  %retparam103 = alloca i64, align 8
  %taddr104 = alloca %"char[]", align 8
  %n = alloca i64, align 8
  %n.f = alloca i64, align 8
  %retparam109 = alloca i64, align 8
  %taddr110 = alloca %any, align 8
  %reterr114 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %f = alloca i64, align 8
  %error_var = alloca i64, align 8
  %switch129 = alloca i8, align 1
  %i = alloca i64, align 8
  %error_var132 = alloca i64, align 8
  %v = alloca %any, align 8
  %taddr134 = alloca %"char[]", align 8
  %taddr135 = alloca %"char[]", align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr142 = alloca %"char[]", align 8
  %taddr143 = alloca %"char[]", align 8
  %taddr144 = alloca %"char[]", align 8
  %self146 = alloca ptr, align 8
  %taddr149 = alloca %"char[]", align 8
  %taddr150 = alloca %"char[]", align 8
  %taddr151 = alloca %"char[]", align 8
  %taddr155 = alloca %"char[]", align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr177 = alloca %"char[]", align 8
  %taddr178 = alloca %"char[]", align 8
  %taddr179 = alloca %"char[]", align 8
  %v181 = alloca %any, align 8
  %blockret182 = alloca i64, align 8
  %taddr184 = alloca %"char[]", align 8
  %taddr185 = alloca %"char[]", align 8
  %taddr186 = alloca %"char[]", align 8
  %taddr192 = alloca %"char[]", align 8
  %taddr193 = alloca %"char[]", align 8
  %taddr194 = alloca %"char[]", align 8
  %any_type = alloca i64, align 8
  %kind = alloca i8, align 1
  %is_mixed_signed = alloca i8, align 1
  %max = alloca i64, align 8
  %min = alloca i64, align 8
  %switch202 = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr209 = alloca %"char[]", align 8
  %taddr210 = alloca %"char[]", align 8
  %taddr211 = alloca %"char[]", align 8
  %s = alloca i16, align 2
  %taddr226 = alloca %"char[]", align 8
  %taddr227 = alloca %"char[]", align 8
  %taddr228 = alloca %"char[]", align 8
  %i253 = alloca i32, align 4
  %taddr256 = alloca %"char[]", align 8
  %taddr257 = alloca %"char[]", align 8
  %taddr258 = alloca %"char[]", align 8
  %l = alloca i64, align 8
  %taddr290 = alloca %"char[]", align 8
  %taddr291 = alloca %"char[]", align 8
  %taddr292 = alloca %"char[]", align 8
  %i319 = alloca i128, align 16
  %taddr322 = alloca %"char[]", align 8
  %taddr323 = alloca %"char[]", align 8
  %taddr324 = alloca %"char[]", align 8
  %c352 = alloca i8, align 1
  %taddr355 = alloca %"char[]", align 8
  %taddr356 = alloca %"char[]", align 8
  %taddr357 = alloca %"char[]", align 8
  %s372 = alloca i16, align 2
  %taddr375 = alloca %"char[]", align 8
  %taddr376 = alloca %"char[]", align 8
  %taddr377 = alloca %"char[]", align 8
  %i397 = alloca i32, align 4
  %taddr400 = alloca %"char[]", align 8
  %taddr401 = alloca %"char[]", align 8
  %taddr402 = alloca %"char[]", align 8
  %l422 = alloca i64, align 8
  %taddr425 = alloca %"char[]", align 8
  %taddr426 = alloca %"char[]", align 8
  %taddr427 = alloca %"char[]", align 8
  %i444 = alloca i128, align 16
  %taddr447 = alloca %"char[]", align 8
  %taddr448 = alloca %"char[]", align 8
  %taddr449 = alloca %"char[]", align 8
  %string462 = alloca %"char[]", align 8
  %taddr463 = alloca %"char[]", align 8
  %taddr464 = alloca %"char[]", align 8
  %taddr465 = alloca %"any[]", align 8
  %taddr468 = alloca %"char[]", align 8
  %taddr469 = alloca %"char[]", align 8
  %taddr470 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr471 = alloca %"any[]", align 8
  %taddr478 = alloca %"char[]", align 8
  %taddr479 = alloca %"char[]", align 8
  %taddr480 = alloca %"char[]", align 8
  %taddr486 = alloca %"char[]", align 8
  %taddr487 = alloca %"char[]", align 8
  %taddr488 = alloca %"char[]", align 8
  %varargslots489 = alloca [1 x %any], align 8
  %taddr491 = alloca %"any[]", align 8
  %reterr493 = alloca i64, align 8
  %taddr499 = alloca %"char[]", align 8
  %taddr500 = alloca %"char[]", align 8
  %taddr501 = alloca %"char[]", align 8
  %taddr507 = alloca i64, align 8
  %taddr508 = alloca i64, align 8
  %taddr509 = alloca %"char[]", align 8
  %taddr510 = alloca %"char[]", align 8
  %taddr511 = alloca %"char[]", align 8
  %varargslots512 = alloca [2 x %any], align 8
  %taddr515 = alloca %"any[]", align 8
  %retparam517 = alloca i64, align 8
  %reterr523 = alloca i64, align 8
  %retparam524 = alloca i64, align 8
  %taddr525 = alloca %"char[]", align 8
  %reterr531 = alloca i64, align 8
  %retparam532 = alloca i64, align 8
  %taddr533 = alloca %"char[]", align 8
  %reterr539 = alloca i64, align 8
  %retparam540 = alloca i64, align 8
  %taddr541 = alloca %"char[]", align 8
  %reterr547 = alloca i64, align 8
  %retparam548 = alloca i64, align 8
  %taddr549 = alloca %"char[]", align 8
  %reterr558 = alloca i64, align 8
  %taddr561 = alloca %"char[]", align 8
  %taddr562 = alloca %"char[]", align 8
  %taddr563 = alloca %"char[]", align 8
  %retparam565 = alloca i64, align 8
  %reterr574 = alloca i64, align 8
  %taddr577 = alloca %"char[]", align 8
  %taddr578 = alloca %"char[]", align 8
  %taddr579 = alloca %"char[]", align 8
  %taddr584 = alloca %"char[]", align 8
  %taddr585 = alloca %"char[]", align 8
  %taddr586 = alloca %"char[]", align 8
  %result588 = alloca %"char[]", align 8
  %retparam590 = alloca i64, align 8
  %taddr591 = alloca %"char[]", align 8
  %reterr600 = alloca i64, align 8
  %taddr603 = alloca %"char[]", align 8
  %taddr604 = alloca %"char[]", align 8
  %taddr605 = alloca %"char[]", align 8
  %taddr611 = alloca %"char[]", align 8
  %taddr612 = alloca %"char[]", align 8
  %taddr613 = alloca %"char[]", align 8
  %result615 = alloca %"char[]", align 8
  %retparam619 = alloca i64, align 8
  %taddr620 = alloca %"char[]", align 8
  %reterr626 = alloca i64, align 8
  %self627 = alloca ptr, align 8
  %taddr630 = alloca %"char[]", align 8
  %taddr631 = alloca %"char[]", align 8
  %taddr632 = alloca %"char[]", align 8
  %taddr636 = alloca %"char[]", align 8
  %taddr637 = alloca %"char[]", align 8
  %taddr638 = alloca %"char[]", align 8
  %taddr659 = alloca %"char[]", align 8
  %taddr660 = alloca %"char[]", align 8
  %taddr661 = alloca %"char[]", align 8
  %retparam665 = alloca i64, align 8
  %taddr666 = alloca %any, align 8
  %inner = alloca i64, align 8
  %taddr691 = alloca %"char[]", align 8
  %taddr692 = alloca %"char[]", align 8
  %taddr693 = alloca %"char[]", align 8
  %pointer = alloca ptr, align 8
  %taddr716 = alloca %"char[]", align 8
  %taddr717 = alloca %"char[]", align 8
  %taddr718 = alloca %"char[]", align 8
  %deref = alloca %any, align 8
  %taddr726 = alloca %"char[]", align 8
  %taddr727 = alloca %"char[]", align 8
  %taddr728 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %type = alloca i64, align 8
  %retparam730 = alloca i64, align 8
  %taddr731 = alloca %any, align 8
  %reterr739 = alloca i64, align 8
  %blockret741 = alloca i64, align 8
  %f742 = alloca i64, align 8
  %error_var755 = alloca i64, align 8
  %flags764 = alloca i32, align 4
  %width766 = alloca i32, align 4
  %reterr771 = alloca i64, align 8
  %error_var772 = alloca i64, align 8
  %retparam773 = alloca i64, align 8
  %taddr774 = alloca %"char[]", align 8
  %retparam783 = alloca i64, align 8
  %flags795 = alloca i32, align 4
  %width797 = alloca i32, align 4
  %inner803 = alloca i64, align 8
  %taddr823 = alloca %"char[]", align 8
  %taddr824 = alloca %"char[]", align 8
  %taddr825 = alloca %"char[]", align 8
  %size = alloca i64, align 8
  %alen = alloca i64, align 8
  %taddr843 = alloca %"char[]", align 8
  %taddr844 = alloca %"char[]", align 8
  %taddr845 = alloca %"char[]", align 8
  %ptr848 = alloca ptr, align 8
  %len = alloca i64, align 8
  %error_var849 = alloca i64, align 8
  %retparam850 = alloca i64, align 8
  %i859 = alloca i64, align 8
  %error_var863 = alloca i64, align 8
  %retparam864 = alloca i64, align 8
  %taddr865 = alloca %"char[]", align 8
  %error_var876 = alloca i64, align 8
  %ptr877 = alloca ptr, align 8
  %type878 = alloca i64, align 8
  %retparam879 = alloca i64, align 8
  %taddr880 = alloca %any, align 8
  %error_var891 = alloca i64, align 8
  %retparam892 = alloca i64, align 8
  %reterr902 = alloca i64, align 8
  %flags907 = alloca i32, align 4
  %width909 = alloca i32, align 4
  %inner915 = alloca i64, align 8
  %taddr935 = alloca %"char[]", align 8
  %taddr936 = alloca %"char[]", align 8
  %taddr937 = alloca %"char[]", align 8
  %size941 = alloca i64, align 8
  %vlen = alloca i64, align 8
  %taddr957 = alloca %"char[]", align 8
  %taddr958 = alloca %"char[]", align 8
  %taddr959 = alloca %"char[]", align 8
  %ptr963 = alloca ptr, align 8
  %len964 = alloca i64, align 8
  %error_var965 = alloca i64, align 8
  %retparam966 = alloca i64, align 8
  %taddr967 = alloca %"char[]", align 8
  %i976 = alloca i64, align 8
  %error_var982 = alloca i64, align 8
  %retparam983 = alloca i64, align 8
  %taddr984 = alloca %"char[]", align 8
  %error_var995 = alloca i64, align 8
  %ptr996 = alloca ptr, align 8
  %type997 = alloca i64, align 8
  %retparam998 = alloca i64, align 8
  %taddr999 = alloca %any, align 8
  %error_var1012 = alloca i64, align 8
  %retparam1013 = alloca i64, align 8
  %taddr1014 = alloca %"char[]", align 8
  %reterr1024 = alloca i64, align 8
  %inner1029 = alloca i64, align 8
  %taddr1049 = alloca %"char[]", align 8
  %taddr1050 = alloca %"char[]", align 8
  %taddr1051 = alloca %"char[]", align 8
  %flags1058 = alloca i32, align 4
  %width1060 = alloca i32, align 4
  %size1066 = alloca i64, align 8
  %temp = alloca ptr, align 8
  %ptr1071 = alloca ptr, align 8
  %taddr1074 = alloca %"char[]", align 8
  %taddr1075 = alloca %"char[]", align 8
  %taddr1076 = alloca %"char[]", align 8
  %slen = alloca i64, align 8
  %taddr1080 = alloca %"char[]", align 8
  %taddr1081 = alloca %"char[]", align 8
  %taddr1082 = alloca %"char[]", align 8
  %len1085 = alloca i64, align 8
  %error_var1086 = alloca i64, align 8
  %retparam1087 = alloca i64, align 8
  %i1096 = alloca i64, align 8
  %error_var1102 = alloca i64, align 8
  %retparam1103 = alloca i64, align 8
  %taddr1104 = alloca %"char[]", align 8
  %error_var1115 = alloca i64, align 8
  %ptr1116 = alloca ptr, align 8
  %type1117 = alloca i64, align 8
  %retparam1118 = alloca i64, align 8
  %taddr1119 = alloca %any, align 8
  %error_var1132 = alloca i64, align 8
  %retparam1133 = alloca i64, align 8
  %reterr1143 = alloca i64, align 8
  %string1148 = alloca %"char[]", align 8
  %taddr1149 = alloca %"char[]", align 8
  %taddr1150 = alloca %"char[]", align 8
  %taddr1151 = alloca %"any[]", align 8
  %reterr1153 = alloca i64, align 8
  %retparam1154 = alloca i64, align 8
  %taddr1155 = alloca %"char[]", align 8
  %3 = icmp eq ptr %1, null, !dbg !4080
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !4080
  br i1 %4, label %panic, label %checkok, !dbg !4080

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4081, metadata !DIExpression()), !dbg !4082
  store [2 x i64] %2, ptr %arg, align 8
  call void @llvm.dbg.declare(metadata ptr %arg, metadata !4083, metadata !DIExpression()), !dbg !4084
  %ptradd = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4085
  %5 = load i64, ptr %ptradd, align 8, !dbg !4085
  %"introspect*" = inttoptr i64 %5 to ptr, !dbg !4085
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !4085
  store i8 %typeid.kind, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %6 = load i8, ptr %switch, align 1
  switch i8 %6, label %switch.exit [
    i8 5, label %switch.case
    i8 0, label %switch.case4
    i8 6, label %switch.case12
    i8 9, label %switch.case12
    i8 20, label %switch.case24
    i8 7, label %switch.case24
    i8 14, label %switch.case37
    i8 2, label %switch.case41
    i8 3, label %switch.case41
    i8 4, label %switch.case64
    i8 1, label %switch.case95
  ]

switch.case:                                      ; preds = %switch.entry
  %7 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.196, i64 6 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  %9 = call i64 @std.io.Formatter.out_substr(ptr %retparam, ptr %7, [2 x i64] %8), !dbg !4087
  %not_err = icmp eq i64 %9, 0, !dbg !4087
  %10 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4087
  br i1 %10, label %after_check, label %assign_optional, !dbg !4087

assign_optional:                                  ; preds = %switch.case
  store i64 %9, ptr %reterr, align 8, !dbg !4087
  br label %err_retblock, !dbg !4087

after_check:                                      ; preds = %switch.case
  %11 = load i64, ptr %retparam, align 8, !dbg !4087
  store i64 %11, ptr %0, align 8, !dbg !4087
  ret i64 0, !dbg !4087

err_retblock:                                     ; preds = %assign_optional
  %12 = load i64, ptr %reterr, align 8, !dbg !4087
  ret i64 %12, !dbg !4087

switch.case4:                                     ; preds = %switch.entry
  %13 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.197, i64 4 }, ptr %taddr7, align 8
  %14 = load [2 x i64], ptr %taddr7, align 8
  %15 = call i64 @std.io.Formatter.out_substr(ptr %retparam6, ptr %13, [2 x i64] %14), !dbg !4089
  %not_err8 = icmp eq i64 %15, 0, !dbg !4089
  %16 = call i1 @llvm.expect.i1(i1 %not_err8, i1 true), !dbg !4089
  br i1 %16, label %after_check10, label %assign_optional9, !dbg !4089

assign_optional9:                                 ; preds = %switch.case4
  store i64 %15, ptr %reterr5, align 8, !dbg !4089
  br label %err_retblock11, !dbg !4089

after_check10:                                    ; preds = %switch.case4
  %17 = load i64, ptr %retparam6, align 8, !dbg !4089
  store i64 %17, ptr %0, align 8, !dbg !4089
  ret i64 0, !dbg !4089

err_retblock11:                                   ; preds = %assign_optional9
  %18 = load i64, ptr %reterr5, align 8, !dbg !4089
  ret i64 %18, !dbg !4089

switch.case12:                                    ; preds = %switch.entry, %switch.entry
  %19 = load ptr, ptr %arg, align 8, !dbg !4091
  %checknull = icmp eq ptr %19, null, !dbg !4091
  %20 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4091
  br i1 %20, label %panic14, label %checkok18, !dbg !4091

checkok18:                                        ; preds = %switch.case12
  %21 = load i64, ptr %19, align 8, !dbg !4093
  %eq = icmp eq i64 %21, 0
  br i1 %eq, label %faultname_no, label %faultname_ok

faultname_no:                                     ; preds = %checkok18
  call void @llvm.memset.p0.i64(ptr align 8 %faultname_zero, i8 0, i64 16, i1 false)
  br label %faultname_exit

faultname_ok:                                     ; preds = %checkok18
  %22 = inttoptr i64 %21 to ptr
  %23 = getelementptr inbounds %.fault, ptr %22, i32 0, i32 1
  br label %faultname_exit

faultname_exit:                                   ; preds = %faultname_ok, %faultname_no
  %faultname = phi ptr [ %faultname_zero, %faultname_no ], [ %23, %faultname_ok ]
  %24 = load ptr, ptr %self, align 8
  %25 = load [2 x i64], ptr %faultname, align 8
  %26 = call i64 @std.io.Formatter.out_substr(ptr %retparam19, ptr %24, [2 x i64] %25), !dbg !4094
  %not_err20 = icmp eq i64 %26, 0, !dbg !4094
  %27 = call i1 @llvm.expect.i1(i1 %not_err20, i1 true), !dbg !4094
  br i1 %27, label %after_check22, label %assign_optional21, !dbg !4094

assign_optional21:                                ; preds = %faultname_exit
  store i64 %26, ptr %reterr13, align 8, !dbg !4094
  br label %err_retblock23, !dbg !4094

after_check22:                                    ; preds = %faultname_exit
  %28 = load i64, ptr %retparam19, align 8, !dbg !4094
  store i64 %28, ptr %0, align 8, !dbg !4094
  ret i64 0, !dbg !4094

err_retblock23:                                   ; preds = %assign_optional21
  %29 = load i64, ptr %reterr13, align 8, !dbg !4094
  ret i64 %29, !dbg !4094

switch.case24:                                    ; preds = %switch.entry, %switch.entry
  %30 = load ptr, ptr %arg, align 8, !dbg !4095
  %checknull26 = icmp eq ptr %30, null, !dbg !4095
  %31 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !4095
  br i1 %31, label %panic27, label %checkok31, !dbg !4095

checkok31:                                        ; preds = %switch.case24
  %32 = load ptr, ptr %self, align 8
  %33 = load [2 x i64], ptr %30, align 8
  %34 = call i64 @std.io.Formatter.out_str(ptr %retparam32, ptr %32, [2 x i64] %33), !dbg !4097
  %not_err33 = icmp eq i64 %34, 0, !dbg !4097
  %35 = call i1 @llvm.expect.i1(i1 %not_err33, i1 true), !dbg !4097
  br i1 %35, label %after_check35, label %assign_optional34, !dbg !4097

assign_optional34:                                ; preds = %checkok31
  store i64 %34, ptr %reterr25, align 8, !dbg !4097
  br label %err_retblock36, !dbg !4097

after_check35:                                    ; preds = %checkok31
  %36 = load i64, ptr %retparam32, align 8, !dbg !4097
  store i64 %36, ptr %0, align 8, !dbg !4097
  ret i64 0, !dbg !4097

err_retblock36:                                   ; preds = %assign_optional34
  %37 = load i64, ptr %reterr25, align 8, !dbg !4097
  ret i64 %37, !dbg !4097

switch.case37:                                    ; preds = %switch.entry
  store %"char[]" { ptr @.str.200, i64 30 }, ptr %string, align 8
  %38 = load [2 x i64], ptr %string, align 8, !dbg !4098
  store %"char[]" { ptr @.str.201, i64 12 }, ptr %taddr38, align 8
  %39 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.str.202, i64 17 }, ptr %taddr39, align 8
  %40 = load [2 x i64], ptr %taddr39, align 8
  store %"any[]" zeroinitializer, ptr %taddr40, align 8
  %41 = load [2 x i64], ptr %taddr40, align 8
  call void @std.core.builtin.panicf([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 164, [2 x i64] %41), !dbg !4102
  unreachable, !dbg !4103

switch.case41:                                    ; preds = %switch.entry, %switch.entry
  call void @llvm.dbg.declare(metadata ptr %flags, metadata !4104, metadata !DIExpression()), !dbg !4106
  %42 = load ptr, ptr %self, align 8, !dbg !4107
  %ptradd42 = getelementptr inbounds i8, ptr %42, i64 16, !dbg !4107
  %43 = load i32, ptr %ptradd42, align 8, !dbg !4107
  store i32 %43, ptr %flags, align 4, !dbg !4107
  call void @llvm.dbg.declare(metadata ptr %width, metadata !4108, metadata !DIExpression()), !dbg !4109
  %44 = load ptr, ptr %self, align 8, !dbg !4110
  %ptradd43 = getelementptr inbounds i8, ptr %44, i64 16, !dbg !4110
  %ptradd44 = getelementptr inbounds i8, ptr %ptradd43, i64 4, !dbg !4110
  %45 = load i32, ptr %ptradd44, align 4, !dbg !4110
  store i32 %45, ptr %width, align 4, !dbg !4110
  %46 = load ptr, ptr %self, align 8, !dbg !4111
  %ptradd45 = getelementptr inbounds i8, ptr %46, i64 16, !dbg !4111
  store i32 0, ptr %ptradd45, align 8, !dbg !4111
  %47 = load ptr, ptr %self, align 8, !dbg !4112
  %ptradd46 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !4112
  %ptradd47 = getelementptr inbounds i8, ptr %ptradd46, i64 4, !dbg !4112
  store i32 0, ptr %ptradd47, align 4, !dbg !4113
  %48 = load ptr, ptr %self, align 8
  %49 = load [2 x i64], ptr %arg, align 8
  %50 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam49, ptr %48, [2 x i64] %49, i32 10), !dbg !4114
  %not_err50 = icmp eq i64 %50, 0, !dbg !4114
  %51 = call i1 @llvm.expect.i1(i1 %not_err50, i1 true), !dbg !4114
  br i1 %51, label %after_check51, label %else_block, !dbg !4114

after_check51:                                    ; preds = %switch.case41
  %52 = load i64, ptr %retparam49, align 8, !dbg !4114
  br label %phi_block, !dbg !4114

else_block:                                       ; preds = %switch.case41
  %53 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.203, i64 9 }, ptr %taddr53, align 8
  %54 = load [2 x i64], ptr %taddr53, align 8
  %55 = call i64 @std.io.Formatter.out_substr(ptr %retparam52, ptr %53, [2 x i64] %54), !dbg !4115
  %not_err54 = icmp eq i64 %55, 0, !dbg !4115
  %56 = call i1 @llvm.expect.i1(i1 %not_err54, i1 true), !dbg !4115
  br i1 %56, label %after_check56, label %assign_optional55, !dbg !4115

assign_optional55:                                ; preds = %else_block
  store i64 %55, ptr %reterr48, align 8, !dbg !4115
  br label %err_retblock60, !dbg !4115

after_check56:                                    ; preds = %else_block
  %57 = load i64, ptr %retparam52, align 8, !dbg !4115
  br label %phi_block, !dbg !4115

phi_block:                                        ; preds = %after_check56, %after_check51
  %val = phi i64 [ %52, %after_check51 ], [ %57, %after_check56 ], !dbg !4115
  %58 = load ptr, ptr %self, align 8, !dbg !4116
  %ptradd57 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !4116
  %59 = load i32, ptr %flags, align 4, !dbg !4118
  store i32 %59, ptr %ptradd57, align 8, !dbg !4118
  %60 = load ptr, ptr %self, align 8, !dbg !4119
  %ptradd58 = getelementptr inbounds i8, ptr %60, i64 16, !dbg !4119
  %ptradd59 = getelementptr inbounds i8, ptr %ptradd58, i64 4, !dbg !4119
  %61 = load i32, ptr %width, align 4, !dbg !4120
  store i32 %61, ptr %ptradd59, align 4, !dbg !4120
  store i64 %val, ptr %0, align 8, !dbg !4120
  ret i64 0, !dbg !4120

err_retblock60:                                   ; preds = %assign_optional55
  %62 = load ptr, ptr %self, align 8, !dbg !4121
  %ptradd61 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !4121
  %63 = load i32, ptr %flags, align 4, !dbg !4123
  store i32 %63, ptr %ptradd61, align 8, !dbg !4123
  %64 = load ptr, ptr %self, align 8, !dbg !4124
  %ptradd62 = getelementptr inbounds i8, ptr %64, i64 16, !dbg !4124
  %ptradd63 = getelementptr inbounds i8, ptr %ptradd62, i64 4, !dbg !4124
  %65 = load i32, ptr %width, align 4, !dbg !4125
  store i32 %65, ptr %ptradd63, align 4, !dbg !4125
  %66 = load i64, ptr %reterr48, align 8, !dbg !4125
  ret i64 %66, !dbg !4125

switch.case64:                                    ; preds = %switch.entry
  call void @llvm.dbg.declare(metadata ptr %flags65, metadata !4126, metadata !DIExpression()), !dbg !4128
  %67 = load ptr, ptr %self, align 8, !dbg !4129
  %ptradd66 = getelementptr inbounds i8, ptr %67, i64 16, !dbg !4129
  %68 = load i32, ptr %ptradd66, align 8, !dbg !4129
  store i32 %68, ptr %flags65, align 4, !dbg !4129
  call void @llvm.dbg.declare(metadata ptr %width67, metadata !4130, metadata !DIExpression()), !dbg !4131
  %69 = load ptr, ptr %self, align 8, !dbg !4132
  %ptradd68 = getelementptr inbounds i8, ptr %69, i64 16, !dbg !4132
  %ptradd69 = getelementptr inbounds i8, ptr %ptradd68, i64 4, !dbg !4132
  %70 = load i32, ptr %ptradd69, align 4, !dbg !4132
  store i32 %70, ptr %width67, align 4, !dbg !4132
  %71 = load ptr, ptr %self, align 8, !dbg !4133
  %ptradd70 = getelementptr inbounds i8, ptr %71, i64 16, !dbg !4133
  store i32 0, ptr %ptradd70, align 8, !dbg !4133
  %72 = load ptr, ptr %self, align 8, !dbg !4134
  %ptradd71 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !4134
  %ptradd72 = getelementptr inbounds i8, ptr %ptradd71, i64 4, !dbg !4134
  store i32 0, ptr %ptradd72, align 4, !dbg !4135
  %73 = load [2 x i64], ptr %arg, align 8
  %74 = call i64 @std.io.float_from_any(ptr %retparam74, [2 x i64] %73), !dbg !4136
  %not_err75 = icmp eq i64 %74, 0, !dbg !4136
  %75 = call i1 @llvm.expect.i1(i1 %not_err75, i1 true), !dbg !4136
  br i1 %75, label %after_check76, label %else_block80, !dbg !4136

after_check76:                                    ; preds = %switch.case64
  %76 = load ptr, ptr %self, align 8
  %77 = load double, ptr %retparam74, align 8
  %78 = call i64 @std.io.Formatter.ftoa(ptr %retparam77, ptr %76, double %77), !dbg !4137
  %not_err78 = icmp eq i64 %78, 0, !dbg !4137
  %79 = call i1 @llvm.expect.i1(i1 %not_err78, i1 true), !dbg !4137
  br i1 %79, label %after_check79, label %else_block80, !dbg !4137

after_check79:                                    ; preds = %after_check76
  %80 = load i64, ptr %retparam77, align 8, !dbg !4137
  br label %phi_block86, !dbg !4137

else_block80:                                     ; preds = %after_check76, %switch.case64
  %81 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.204, i64 3 }, ptr %taddr82, align 8
  %82 = load [2 x i64], ptr %taddr82, align 8
  %83 = call i64 @std.io.Formatter.out_substr(ptr %retparam81, ptr %81, [2 x i64] %82), !dbg !4138
  %not_err83 = icmp eq i64 %83, 0, !dbg !4138
  %84 = call i1 @llvm.expect.i1(i1 %not_err83, i1 true), !dbg !4138
  br i1 %84, label %after_check85, label %assign_optional84, !dbg !4138

assign_optional84:                                ; preds = %else_block80
  store i64 %83, ptr %reterr73, align 8, !dbg !4138
  br label %err_retblock91, !dbg !4138

after_check85:                                    ; preds = %else_block80
  %85 = load i64, ptr %retparam81, align 8, !dbg !4138
  br label %phi_block86, !dbg !4138

phi_block86:                                      ; preds = %after_check85, %after_check79
  %val87 = phi i64 [ %80, %after_check79 ], [ %85, %after_check85 ], !dbg !4138
  %86 = load ptr, ptr %self, align 8, !dbg !4139
  %ptradd88 = getelementptr inbounds i8, ptr %86, i64 16, !dbg !4139
  %87 = load i32, ptr %flags65, align 4, !dbg !4141
  store i32 %87, ptr %ptradd88, align 8, !dbg !4141
  %88 = load ptr, ptr %self, align 8, !dbg !4142
  %ptradd89 = getelementptr inbounds i8, ptr %88, i64 16, !dbg !4142
  %ptradd90 = getelementptr inbounds i8, ptr %ptradd89, i64 4, !dbg !4142
  %89 = load i32, ptr %width67, align 4, !dbg !4143
  store i32 %89, ptr %ptradd90, align 4, !dbg !4143
  store i64 %val87, ptr %0, align 8, !dbg !4143
  ret i64 0, !dbg !4143

err_retblock91:                                   ; preds = %assign_optional84
  %90 = load ptr, ptr %self, align 8, !dbg !4144
  %ptradd92 = getelementptr inbounds i8, ptr %90, i64 16, !dbg !4144
  %91 = load i32, ptr %flags65, align 4, !dbg !4146
  store i32 %91, ptr %ptradd92, align 8, !dbg !4146
  %92 = load ptr, ptr %self, align 8, !dbg !4147
  %ptradd93 = getelementptr inbounds i8, ptr %92, i64 16, !dbg !4147
  %ptradd94 = getelementptr inbounds i8, ptr %ptradd93, i64 4, !dbg !4147
  %93 = load i32, ptr %width67, align 4, !dbg !4148
  store i32 %93, ptr %ptradd94, align 4, !dbg !4148
  %94 = load i64, ptr %reterr73, align 8, !dbg !4148
  ret i64 %94, !dbg !4148

switch.case95:                                    ; preds = %switch.entry
  %95 = load ptr, ptr %arg, align 8, !dbg !4149
  %checknull97 = icmp eq ptr %95, null, !dbg !4149
  %96 = call i1 @llvm.expect.i1(i1 %checknull97, i1 false), !dbg !4149
  br i1 %96, label %panic98, label %checkok102, !dbg !4149

checkok102:                                       ; preds = %switch.case95
  %97 = load i8, ptr %95, align 1, !dbg !4151
  %98 = trunc i8 %97 to i1, !dbg !4151
  %ternary = select i1 %98, %"char[]" { ptr @.str.206, i64 4 }, %"char[]" { ptr @.str.207, i64 5 }, !dbg !4152
  %99 = load ptr, ptr %self, align 8
  store %"char[]" %ternary, ptr %taddr104, align 8
  %100 = load [2 x i64], ptr %taddr104, align 8
  %101 = call i64 @std.io.Formatter.out_substr(ptr %retparam103, ptr %99, [2 x i64] %100), !dbg !4153
  %not_err105 = icmp eq i64 %101, 0, !dbg !4153
  %102 = call i1 @llvm.expect.i1(i1 %not_err105, i1 true), !dbg !4153
  br i1 %102, label %after_check107, label %assign_optional106, !dbg !4153

assign_optional106:                               ; preds = %checkok102
  store i64 %101, ptr %reterr96, align 8, !dbg !4153
  br label %err_retblock108, !dbg !4153

after_check107:                                   ; preds = %checkok102
  %103 = load i64, ptr %retparam103, align 8, !dbg !4153
  store i64 %103, ptr %0, align 8, !dbg !4153
  ret i64 0, !dbg !4153

err_retblock108:                                  ; preds = %assign_optional106
  %104 = load i64, ptr %reterr96, align 8, !dbg !4153
  ret i64 %104, !dbg !4153

switch.exit:                                      ; preds = %switch.entry
  call void @llvm.dbg.declare(metadata ptr %n, metadata !4154, metadata !DIExpression()), !dbg !4155
  %105 = load %any, ptr %arg, align 8, !dbg !4156
  %106 = load ptr, ptr %self, align 8
  store %any %105, ptr %taddr110, align 8
  %107 = load [2 x i64], ptr %taddr110, align 8
  %108 = call i64 @std.io.Formatter.print_with_function(ptr %retparam109, ptr %106, [2 x i64] %107), !dbg !4157
  %not_err111 = icmp eq i64 %108, 0, !dbg !4157
  %109 = call i1 @llvm.expect.i1(i1 %not_err111, i1 true), !dbg !4157
  br i1 %109, label %after_check113, label %assign_optional112, !dbg !4157

assign_optional112:                               ; preds = %switch.exit
  store i64 %108, ptr %n.f, align 8, !dbg !4157
  br label %after_assign, !dbg !4157

after_check113:                                   ; preds = %switch.exit
  %110 = load i64, ptr %retparam109, align 8, !dbg !4157
  store i64 %110, ptr %n, align 8, !dbg !4157
  store i64 0, ptr %n.f, align 8, !dbg !4157
  br label %after_assign, !dbg !4157

after_assign:                                     ; preds = %after_check113, %assign_optional112
  %load.err = load i64, ptr %n.f, align 8, !dbg !4158
  %result = icmp eq i64 %load.err, 0, !dbg !4158
  br i1 %result, label %if.then, label %if.exit, !dbg !4158

if.then:                                          ; preds = %after_assign
  %111 = load i64, ptr %n, align 8, !dbg !4159
  store i64 %111, ptr %0, align 8, !dbg !4159
  ret i64 0, !dbg !4159

if.exit:                                          ; preds = %after_assign
  call void @llvm.dbg.declare(metadata ptr %f, metadata !4160, metadata !DIExpression()), !dbg !4162
  br label %testblock, !dbg !4162

testblock:                                        ; preds = %if.exit
  %optval = load i64, ptr %n.f, align 8, !dbg !4164
  %not_err115 = icmp eq i64 %optval, 0, !dbg !4164
  %112 = call i1 @llvm.expect.i1(i1 %not_err115, i1 true), !dbg !4164
  br i1 %112, label %after_check117, label %assign_optional116, !dbg !4164

assign_optional116:                               ; preds = %testblock
  store i64 %optval, ptr %f, align 8, !dbg !4164
  br label %end_block, !dbg !4164

after_check117:                                   ; preds = %testblock
  store i64 0, ptr %f, align 8, !dbg !4164
  br label %end_block, !dbg !4164

end_block:                                        ; preds = %after_check117, %assign_optional116
  %113 = load i64, ptr %f, align 8, !dbg !4164
  %i2b = icmp ne i64 %113, 0, !dbg !4164
  br i1 %i2b, label %if.then118, label %if.exit119, !dbg !4164

if.then118:                                       ; preds = %end_block
  %114 = load i64, ptr %f, align 8, !dbg !4165
  store i64 %114, ptr %blockret, align 8, !dbg !4165
  br label %expr_block.exit, !dbg !4165

if.exit119:                                       ; preds = %end_block
  store i64 0, ptr %blockret, align 8, !dbg !4166
  br label %expr_block.exit, !dbg !4166

expr_block.exit:                                  ; preds = %if.exit119, %if.then118
  %115 = load i64, ptr %blockret, align 8, !dbg !4166
  %neq = icmp ne i64 %115, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !4163
  br i1 %neq, label %if.then120, label %if.exit125, !dbg !4163

if.then120:                                       ; preds = %expr_block.exit
  %optval121 = load i64, ptr %n.f, align 8, !dbg !4167
  %not_err122 = icmp eq i64 %optval121, 0, !dbg !4167
  %116 = call i1 @llvm.expect.i1(i1 %not_err122, i1 true), !dbg !4167
  br i1 %116, label %after_check124, label %assign_optional123, !dbg !4167

assign_optional123:                               ; preds = %if.then120
  store i64 %optval121, ptr %error_var, align 8, !dbg !4167
  br label %guard_block, !dbg !4167

after_check124:                                   ; preds = %if.then120
  br label %noerr_block, !dbg !4167

guard_block:                                      ; preds = %assign_optional123
  %117 = load i64, ptr %error_var, align 8, !dbg !4167
  ret i64 %117, !dbg !4167

noerr_block:                                      ; preds = %after_check124
  br label %if.exit125, !dbg !4167

if.exit125:                                       ; preds = %noerr_block, %expr_block.exit
  %ptradd126 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4168
  %118 = load i64, ptr %ptradd126, align 8, !dbg !4168
  %"introspect*127" = inttoptr i64 %118 to ptr, !dbg !4168
  %typeid.kind128 = load i8, ptr %"introspect*127", align 8, !dbg !4168
  store i8 %typeid.kind128, ptr %switch129, align 1
  br label %switch.entry130

switch.entry130:                                  ; preds = %if.exit125
  %119 = load i8, ptr %switch129, align 1
  switch i8 %119, label %switch.exit1152 [
    i8 8, label %switch.case131
    i8 10, label %switch.case522
    i8 11, label %switch.case530
    i8 12, label %switch.case538
    i8 13, label %switch.case546
    i8 18, label %switch.case554
    i8 19, label %switch.case671
    i8 15, label %switch.case794
    i8 17, label %switch.case906
    i8 16, label %switch.case1028
    i8 7, label %switch.case1147
    i8 20, label %switch.case1147
  ]

switch.case131:                                   ; preds = %switch.entry130
  call void @llvm.dbg.declare(metadata ptr %i, metadata !4170, metadata !DIExpression()), !dbg !4172
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %v, ptr align 8 %arg, i32 16, i1 false)
  %120 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !4173
  %121 = trunc i8 %120 to i1, !dbg !4173
  br i1 %121, label %assert_ok, label %assert_fail, !dbg !4173

assert_fail:                                      ; preds = %switch.case131
  store %"char[]" { ptr @.panic_msg.119, i64 69 }, ptr %taddr134, align 8
  %122 = load [2 x i64], ptr %taddr134, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr135, align 8
  %123 = load [2 x i64], ptr %taddr135, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr136, align 8
  %124 = load [2 x i64], ptr %taddr136, align 8
  %125 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %125([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 13), !dbg !4173
  unreachable, !dbg !4173

assert_ok:                                        ; preds = %switch.case131
  %ptradd137 = getelementptr inbounds i8, ptr %v, i64 8, !dbg !4177
  %126 = load i64, ptr %ptradd137, align 8, !dbg !4177
  %"introspect*138" = inttoptr i64 %126 to ptr, !dbg !4177
  %typeid.kind139 = load i8, ptr %"introspect*138", align 8, !dbg !4177
  %eq140 = icmp eq i8 %typeid.kind139, 8, !dbg !4177
  br i1 %eq140, label %assert_ok145, label %assert_fail141, !dbg !4177

assert_fail141:                                   ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.208, i64 67 }, ptr %taddr142, align 8
  %127 = load [2 x i64], ptr %taddr142, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr143, align 8
  %128 = load [2 x i64], ptr %taddr143, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr144, align 8
  %129 = load [2 x i64], ptr %taddr144, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130([2 x i64] %127, [2 x i64] %128, [2 x i64] %129, i32 14), !dbg !4177
  unreachable, !dbg !4177

assert_ok145:                                     ; preds = %assert_ok
  store ptr %v, ptr %self146, align 8
  %131 = load ptr, ptr %self146, align 8, !dbg !4178
  %checknull147 = icmp eq ptr %131, null, !dbg !4178
  %132 = call i1 @llvm.expect.i1(i1 %checknull147, i1 false), !dbg !4178
  br i1 %132, label %panic148, label %checkok152, !dbg !4178

checkok152:                                       ; preds = %assert_ok145
  %133 = load ptr, ptr %131, align 8, !dbg !4178
  %134 = load ptr, ptr %self146, align 8, !dbg !4181
  %checknull153 = icmp eq ptr %134, null, !dbg !4181
  %135 = call i1 @llvm.expect.i1(i1 %checknull153, i1 false), !dbg !4181
  br i1 %135, label %panic154, label %checkok158, !dbg !4181

checkok158:                                       ; preds = %checkok152
  %ptradd159 = getelementptr inbounds i8, ptr %134, i64 8, !dbg !4181
  %136 = load i64, ptr %ptradd159, align 8, !dbg !4181
  %"introspect*160" = inttoptr i64 %136 to ptr, !dbg !4181
  %typeid.kind161 = load i8, ptr %"introspect*160", align 8, !dbg !4181
  %eq162 = icmp eq i8 %typeid.kind161, 15, !dbg !4181
  br i1 %eq162, label %check_type_ok, label %check_next, !dbg !4181

check_next:                                       ; preds = %checkok158
  %eq163 = icmp eq i8 %typeid.kind161, 19, !dbg !4181
  br i1 %eq163, label %check_type_ok, label %check_next164, !dbg !4181

check_next164:                                    ; preds = %check_next
  %eq165 = icmp eq i8 %typeid.kind161, 17, !dbg !4181
  br i1 %eq165, label %check_type_ok, label %check_next166, !dbg !4181

check_next166:                                    ; preds = %check_next164
  %eq167 = icmp eq i8 %typeid.kind161, 8, !dbg !4181
  br i1 %eq167, label %check_type_ok, label %check_next168, !dbg !4181

check_next168:                                    ; preds = %check_next166
  %eq169 = icmp eq i8 %typeid.kind161, 16, !dbg !4181
  br i1 %eq169, label %check_type_ok, label %check_next170, !dbg !4181

check_next170:                                    ; preds = %check_next168
  %eq171 = icmp eq i8 %typeid.kind161, 18, !dbg !4181
  br i1 %eq171, label %check_type_ok, label %check_next172, !dbg !4181

check_next172:                                    ; preds = %check_next170
  %eq173 = icmp eq i8 %typeid.kind161, 14, !dbg !4181
  br i1 %eq173, label %check_type_ok, label %check_next174, !dbg !4181

check_next174:                                    ; preds = %check_next172
  %eq175 = icmp eq i8 %typeid.kind161, 12, !dbg !4181
  br i1 %eq175, label %check_type_ok, label %check_next176, !dbg !4181

check_next176:                                    ; preds = %check_next174
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr177, align 8
  %137 = load [2 x i64], ptr %taddr177, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr178, align 8
  %138 = load [2 x i64], ptr %taddr178, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr179, align 8
  %139 = load [2 x i64], ptr %taddr179, align 8
  %140 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %140([2 x i64] %137, [2 x i64] %138, [2 x i64] %139, i32 200), !dbg !4181
  unreachable, !dbg !4181

check_type_ok:                                    ; preds = %check_next174, %check_next172, %check_next170, %check_next168, %check_next166, %check_next164, %check_next, %checkok158
  %ptradd180 = getelementptr inbounds i8, ptr %"introspect*160", i64 32, !dbg !4181
  %typeid.inner = load i64, ptr %ptradd180, align 8, !dbg !4181
  %141 = insertvalue %any undef, ptr %133, 0, !dbg !4181
  %142 = insertvalue %any %141, i64 %typeid.inner, 1, !dbg !4181
  store %any %142, ptr %v181, align 8
  %143 = call i8 @std.core.types.TypeKind.is_int(i8 3) #5, !dbg !4182
  %144 = trunc i8 %143 to i1, !dbg !4182
  br i1 %144, label %assert_ok187, label %assert_fail183, !dbg !4182

assert_fail183:                                   ; preds = %check_type_ok
  store %"char[]" { ptr @.panic_msg.119, i64 69 }, ptr %taddr184, align 8
  %145 = load [2 x i64], ptr %taddr184, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr185, align 8
  %146 = load [2 x i64], ptr %taddr185, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr186, align 8
  %147 = load [2 x i64], ptr %taddr186, align 8
  %148 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %148([2 x i64] %145, [2 x i64] %146, [2 x i64] %147, i32 22), !dbg !4182
  unreachable, !dbg !4182

assert_ok187:                                     ; preds = %check_type_ok
  %ptradd188 = getelementptr inbounds i8, ptr %v181, i64 8, !dbg !4186
  %149 = load i64, ptr %ptradd188, align 8, !dbg !4186
  %"introspect*189" = inttoptr i64 %149 to ptr, !dbg !4186
  %typeid.kind190 = load i8, ptr %"introspect*189", align 8, !dbg !4186
  %150 = call i8 @std.core.types.TypeKind.is_int(i8 %typeid.kind190) #5, !dbg !4186
  %151 = trunc i8 %150 to i1, !dbg !4186
  br i1 %151, label %assert_ok195, label %assert_fail191, !dbg !4186

assert_fail191:                                   ; preds = %assert_ok187
  store %"char[]" { ptr @.panic_msg.121, i64 71 }, ptr %taddr192, align 8
  %152 = load [2 x i64], ptr %taddr192, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr193, align 8
  %153 = load [2 x i64], ptr %taddr193, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr194, align 8
  %154 = load [2 x i64], ptr %taddr194, align 8
  %155 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %155([2 x i64] %152, [2 x i64] %153, [2 x i64] %154, i32 23), !dbg !4186
  unreachable, !dbg !4186

assert_ok195:                                     ; preds = %assert_ok187
  call void @llvm.dbg.declare(metadata ptr %any_type, metadata !4187, metadata !DIExpression()), !dbg !4188
  %ptradd196 = getelementptr inbounds i8, ptr %v181, i64 8, !dbg !4189
  %156 = load i64, ptr %ptradd196, align 8, !dbg !4189
  store i64 %156, ptr %any_type, align 8, !dbg !4189
  call void @llvm.dbg.declare(metadata ptr %kind, metadata !4190, metadata !DIExpression()), !dbg !4191
  %157 = load i64, ptr %any_type, align 8, !dbg !4192
  %"introspect*197" = inttoptr i64 %157 to ptr, !dbg !4192
  %typeid.kind198 = load i8, ptr %"introspect*197", align 8, !dbg !4192
  store i8 %typeid.kind198, ptr %kind, align 1, !dbg !4192
  call void @llvm.dbg.declare(metadata ptr %is_mixed_signed, metadata !4193, metadata !DIExpression()), !dbg !4194
  %158 = load i64, ptr %any_type, align 8, !dbg !4195
  %"introspect*199" = inttoptr i64 %158 to ptr, !dbg !4195
  %typeid.kind200 = load i8, ptr %"introspect*199", align 8, !dbg !4195
  %neq201 = icmp ne i8 3, %typeid.kind200, !dbg !4196
  %159 = zext i1 %neq201 to i8, !dbg !4196
  store i8 %159, ptr %is_mixed_signed, align 1, !dbg !4196
  call void @llvm.dbg.declare(metadata ptr %max, metadata !4197, metadata !DIExpression()), !dbg !4198
  store i64 -1, ptr %max, align 8, !dbg !4199
  call void @llvm.dbg.declare(metadata ptr %min, metadata !4200, metadata !DIExpression()), !dbg !4201
  store i64 0, ptr %min, align 8, !dbg !4202
  %160 = load i64, ptr %any_type, align 8
  store i64 %160, ptr %switch202, align 8
  br label %switch.entry203

switch.entry203:                                  ; preds = %assert_ok195
  %161 = load i64, ptr %switch202, align 8
  br label %check_subtype, !dbg !4203

check_subtype:                                    ; preds = %parent_type_block, %switch.entry203
  %162 = phi i64 [ %161, %switch.entry203 ], [ %typeid.parent, %parent_type_block ], !dbg !4203
  %eq204 = icmp eq i64 ptrtoint (ptr @"$ct.ichar" to i64), %162, !dbg !4203
  br i1 %eq204, label %result_block, label %parent_type_block, !dbg !4203

parent_type_block:                                ; preds = %check_subtype
  %163 = inttoptr i64 %162 to ptr, !dbg !4203
  %ptradd205 = getelementptr inbounds i8, ptr %163, i64 8, !dbg !4203
  %typeid.parent = load i64, ptr %ptradd205, align 8, !dbg !4203
  %164 = icmp eq i64 %typeid.parent, 0, !dbg !4203
  br i1 %164, label %result_block, label %check_subtype, !dbg !4203

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %165 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4203
  br i1 %165, label %switch.case206, label %next_if, !dbg !4203

switch.case206:                                   ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4205, metadata !DIExpression()), !dbg !4207
  %166 = load ptr, ptr %v181, align 8, !dbg !4208
  %checknull207 = icmp eq ptr %166, null, !dbg !4208
  %167 = call i1 @llvm.expect.i1(i1 %checknull207, i1 false), !dbg !4208
  br i1 %167, label %panic208, label %checkok212, !dbg !4208

checkok212:                                       ; preds = %switch.case206
  %168 = load i8, ptr %166, align 1, !dbg !4209
  store i8 %168, ptr %c, align 1, !dbg !4209
  %169 = load i8, ptr %is_mixed_signed, align 1, !dbg !4210
  %170 = trunc i8 %169 to i1, !dbg !4210
  br i1 %170, label %and.rhs, label %and.phi, !dbg !4210

and.rhs:                                          ; preds = %checkok212
  %171 = load i8, ptr %c, align 1, !dbg !4211
  %sext = sext i8 %171 to i32, !dbg !4211
  %lt = icmp slt i32 %sext, 0, !dbg !4211
  br label %and.phi, !dbg !4211

and.phi:                                          ; preds = %and.rhs, %checkok212
  %val213 = phi i1 [ false, %checkok212 ], [ %lt, %and.rhs ], !dbg !4211
  br i1 %val213, label %if.then214, label %if.exit215, !dbg !4211

if.then214:                                       ; preds = %and.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var132, align 8, !dbg !4212
  br label %panic_block, !dbg !4212

if.exit215:                                       ; preds = %and.phi
  %172 = load i8, ptr %c, align 1, !dbg !4213
  %sext216 = sext i8 %172 to i64, !dbg !4213
  store i64 %sext216, ptr %blockret182, align 8, !dbg !4213
  br label %expr_block.exit467, !dbg !4213

next_if:                                          ; preds = %result_block
  br label %check_subtype217, !dbg !4214

check_subtype217:                                 ; preds = %parent_type_block219, %next_if
  %173 = phi i64 [ %161, %next_if ], [ %typeid.parent221, %parent_type_block219 ], !dbg !4214
  %eq218 = icmp eq i64 ptrtoint (ptr @"$ct.short" to i64), %173, !dbg !4214
  br i1 %eq218, label %result_block222, label %parent_type_block219, !dbg !4214

parent_type_block219:                             ; preds = %check_subtype217
  %174 = inttoptr i64 %173 to ptr, !dbg !4214
  %ptradd220 = getelementptr inbounds i8, ptr %174, i64 8, !dbg !4214
  %typeid.parent221 = load i64, ptr %ptradd220, align 8, !dbg !4214
  %175 = icmp eq i64 %typeid.parent221, 0, !dbg !4214
  br i1 %175, label %result_block222, label %check_subtype217, !dbg !4214

result_block222:                                  ; preds = %parent_type_block219, %check_subtype217
  %176 = phi i1 [ false, %parent_type_block219 ], [ true, %check_subtype217 ], !dbg !4214
  br i1 %176, label %switch.case223, label %next_if245, !dbg !4214

switch.case223:                                   ; preds = %result_block222
  call void @llvm.dbg.declare(metadata ptr %s, metadata !4215, metadata !DIExpression()), !dbg !4217
  %177 = load ptr, ptr %v181, align 8, !dbg !4218
  %checknull224 = icmp eq ptr %177, null, !dbg !4218
  %178 = call i1 @llvm.expect.i1(i1 %checknull224, i1 false), !dbg !4218
  br i1 %178, label %panic225, label %checkok229, !dbg !4218

checkok229:                                       ; preds = %switch.case223
  %179 = load i16, ptr %177, align 2, !dbg !4219
  store i16 %179, ptr %s, align 2, !dbg !4219
  %180 = load i8, ptr %is_mixed_signed, align 1, !dbg !4220
  %181 = trunc i8 %180 to i1, !dbg !4220
  br i1 %181, label %and.rhs230, label %and.phi233, !dbg !4220

and.rhs230:                                       ; preds = %checkok229
  %182 = load i16, ptr %s, align 2, !dbg !4221
  %sext231 = sext i16 %182 to i32, !dbg !4221
  %lt232 = icmp slt i32 %sext231, 0, !dbg !4221
  br label %and.phi233, !dbg !4221

and.phi233:                                       ; preds = %and.rhs230, %checkok229
  %val234 = phi i1 [ false, %checkok229 ], [ %lt232, %and.rhs230 ], !dbg !4221
  br i1 %val234, label %if.then235, label %if.exit236, !dbg !4221

if.then235:                                       ; preds = %and.phi233
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var132, align 8, !dbg !4222
  br label %panic_block, !dbg !4222

if.exit236:                                       ; preds = %and.phi233
  %183 = load i16, ptr %s, align 2, !dbg !4223
  %sext237 = sext i16 %183 to i64, !dbg !4223
  %184 = load i64, ptr %max, align 8, !dbg !4224
  %gt = icmp sgt i64 %sext237, %184, !dbg !4223
  %check = icmp sge i64 %184, 0, !dbg !4223
  %siui-gt = and i1 %check, %gt, !dbg !4223
  br i1 %siui-gt, label %or.phi, label %or.rhs, !dbg !4223

or.rhs:                                           ; preds = %if.exit236
  %185 = load i16, ptr %s, align 2, !dbg !4225
  %sext238 = sext i16 %185 to i64, !dbg !4225
  %186 = load i64, ptr %min, align 8, !dbg !4226
  %lt239 = icmp slt i64 %sext238, %186, !dbg !4225
  %check240 = icmp slt i64 %186, 0, !dbg !4225
  %siui-lt = or i1 %check240, %lt239, !dbg !4225
  br label %or.phi, !dbg !4225

or.phi:                                           ; preds = %or.rhs, %if.exit236
  %val241 = phi i1 [ true, %if.exit236 ], [ %siui-lt, %or.rhs ], !dbg !4225
  br i1 %val241, label %if.then242, label %if.exit243, !dbg !4225

if.then242:                                       ; preds = %or.phi
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4227
  br label %panic_block, !dbg !4227

if.exit243:                                       ; preds = %or.phi
  %187 = load i16, ptr %s, align 2, !dbg !4228
  %sext244 = sext i16 %187 to i64, !dbg !4228
  store i64 %sext244, ptr %blockret182, align 8, !dbg !4228
  br label %expr_block.exit467, !dbg !4228

next_if245:                                       ; preds = %result_block222
  br label %check_subtype246, !dbg !4229

check_subtype246:                                 ; preds = %parent_type_block248, %next_if245
  %188 = phi i64 [ %161, %next_if245 ], [ %typeid.parent250, %parent_type_block248 ], !dbg !4229
  %eq247 = icmp eq i64 ptrtoint (ptr @"$ct.int" to i64), %188, !dbg !4229
  br i1 %eq247, label %result_block251, label %parent_type_block248, !dbg !4229

parent_type_block248:                             ; preds = %check_subtype246
  %189 = inttoptr i64 %188 to ptr, !dbg !4229
  %ptradd249 = getelementptr inbounds i8, ptr %189, i64 8, !dbg !4229
  %typeid.parent250 = load i64, ptr %ptradd249, align 8, !dbg !4229
  %190 = icmp eq i64 %typeid.parent250, 0, !dbg !4229
  br i1 %190, label %result_block251, label %check_subtype246, !dbg !4229

result_block251:                                  ; preds = %parent_type_block248, %check_subtype246
  %191 = phi i1 [ false, %parent_type_block248 ], [ true, %check_subtype246 ], !dbg !4229
  br i1 %191, label %switch.case252, label %next_if280, !dbg !4229

switch.case252:                                   ; preds = %result_block251
  call void @llvm.dbg.declare(metadata ptr %i253, metadata !4230, metadata !DIExpression()), !dbg !4232
  %192 = load ptr, ptr %v181, align 8, !dbg !4233
  %checknull254 = icmp eq ptr %192, null, !dbg !4233
  %193 = call i1 @llvm.expect.i1(i1 %checknull254, i1 false), !dbg !4233
  br i1 %193, label %panic255, label %checkok259, !dbg !4233

checkok259:                                       ; preds = %switch.case252
  %194 = load i32, ptr %192, align 4, !dbg !4234
  store i32 %194, ptr %i253, align 4, !dbg !4234
  %195 = load i8, ptr %is_mixed_signed, align 1, !dbg !4235
  %196 = trunc i8 %195 to i1, !dbg !4235
  br i1 %196, label %and.rhs260, label %and.phi262, !dbg !4235

and.rhs260:                                       ; preds = %checkok259
  %197 = load i32, ptr %i253, align 4, !dbg !4236
  %lt261 = icmp slt i32 %197, 0, !dbg !4236
  br label %and.phi262, !dbg !4236

and.phi262:                                       ; preds = %and.rhs260, %checkok259
  %val263 = phi i1 [ false, %checkok259 ], [ %lt261, %and.rhs260 ], !dbg !4236
  br i1 %val263, label %if.then264, label %if.exit265, !dbg !4236

if.then264:                                       ; preds = %and.phi262
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var132, align 8, !dbg !4237
  br label %panic_block, !dbg !4237

if.exit265:                                       ; preds = %and.phi262
  %198 = load i32, ptr %i253, align 4, !dbg !4238
  %sext266 = sext i32 %198 to i64, !dbg !4238
  %199 = load i64, ptr %max, align 8, !dbg !4239
  %gt267 = icmp sgt i64 %sext266, %199, !dbg !4238
  %check268 = icmp sge i64 %199, 0, !dbg !4238
  %siui-gt269 = and i1 %check268, %gt267, !dbg !4238
  br i1 %siui-gt269, label %or.phi275, label %or.rhs270, !dbg !4238

or.rhs270:                                        ; preds = %if.exit265
  %200 = load i32, ptr %i253, align 4, !dbg !4240
  %sext271 = sext i32 %200 to i64, !dbg !4240
  %201 = load i64, ptr %min, align 8, !dbg !4241
  %lt272 = icmp slt i64 %sext271, %201, !dbg !4240
  %check273 = icmp slt i64 %201, 0, !dbg !4240
  %siui-lt274 = or i1 %check273, %lt272, !dbg !4240
  br label %or.phi275, !dbg !4240

or.phi275:                                        ; preds = %or.rhs270, %if.exit265
  %val276 = phi i1 [ true, %if.exit265 ], [ %siui-lt274, %or.rhs270 ], !dbg !4240
  br i1 %val276, label %if.then277, label %if.exit278, !dbg !4240

if.then277:                                       ; preds = %or.phi275
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4242
  br label %panic_block, !dbg !4242

if.exit278:                                       ; preds = %or.phi275
  %202 = load i32, ptr %i253, align 4, !dbg !4243
  %sext279 = sext i32 %202 to i64, !dbg !4243
  store i64 %sext279, ptr %blockret182, align 8, !dbg !4243
  br label %expr_block.exit467, !dbg !4243

next_if280:                                       ; preds = %result_block251
  br label %check_subtype281, !dbg !4244

check_subtype281:                                 ; preds = %parent_type_block283, %next_if280
  %203 = phi i64 [ %161, %next_if280 ], [ %typeid.parent285, %parent_type_block283 ], !dbg !4244
  %eq282 = icmp eq i64 ptrtoint (ptr @"$ct.long" to i64), %203, !dbg !4244
  br i1 %eq282, label %result_block286, label %parent_type_block283, !dbg !4244

parent_type_block283:                             ; preds = %check_subtype281
  %204 = inttoptr i64 %203 to ptr, !dbg !4244
  %ptradd284 = getelementptr inbounds i8, ptr %204, i64 8, !dbg !4244
  %typeid.parent285 = load i64, ptr %ptradd284, align 8, !dbg !4244
  %205 = icmp eq i64 %typeid.parent285, 0, !dbg !4244
  br i1 %205, label %result_block286, label %check_subtype281, !dbg !4244

result_block286:                                  ; preds = %parent_type_block283, %check_subtype281
  %206 = phi i1 [ false, %parent_type_block283 ], [ true, %check_subtype281 ], !dbg !4244
  br i1 %206, label %switch.case287, label %next_if311, !dbg !4244

switch.case287:                                   ; preds = %result_block286
  call void @llvm.dbg.declare(metadata ptr %l, metadata !4245, metadata !DIExpression()), !dbg !4247
  %207 = load ptr, ptr %v181, align 8, !dbg !4248
  %checknull288 = icmp eq ptr %207, null, !dbg !4248
  %208 = call i1 @llvm.expect.i1(i1 %checknull288, i1 false), !dbg !4248
  br i1 %208, label %panic289, label %checkok293, !dbg !4248

checkok293:                                       ; preds = %switch.case287
  %209 = load i64, ptr %207, align 8, !dbg !4249
  store i64 %209, ptr %l, align 8, !dbg !4249
  %210 = load i8, ptr %is_mixed_signed, align 1, !dbg !4250
  %211 = trunc i8 %210 to i1, !dbg !4250
  br i1 %211, label %and.rhs294, label %and.phi296, !dbg !4250

and.rhs294:                                       ; preds = %checkok293
  %212 = load i64, ptr %l, align 8, !dbg !4251
  %lt295 = icmp slt i64 %212, 0, !dbg !4251
  br label %and.phi296, !dbg !4251

and.phi296:                                       ; preds = %and.rhs294, %checkok293
  %val297 = phi i1 [ false, %checkok293 ], [ %lt295, %and.rhs294 ], !dbg !4251
  br i1 %val297, label %if.then298, label %if.exit299, !dbg !4251

if.then298:                                       ; preds = %and.phi296
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var132, align 8, !dbg !4252
  br label %panic_block, !dbg !4252

if.exit299:                                       ; preds = %and.phi296
  %213 = load i64, ptr %l, align 8, !dbg !4253
  %214 = load i64, ptr %max, align 8, !dbg !4254
  %gt300 = icmp sgt i64 %213, %214, !dbg !4253
  %check301 = icmp sge i64 %214, 0, !dbg !4253
  %siui-gt302 = and i1 %check301, %gt300, !dbg !4253
  br i1 %siui-gt302, label %or.phi307, label %or.rhs303, !dbg !4253

or.rhs303:                                        ; preds = %if.exit299
  %215 = load i64, ptr %l, align 8, !dbg !4255
  %216 = load i64, ptr %min, align 8, !dbg !4256
  %lt304 = icmp slt i64 %215, %216, !dbg !4255
  %check305 = icmp slt i64 %216, 0, !dbg !4255
  %siui-lt306 = or i1 %check305, %lt304, !dbg !4255
  br label %or.phi307, !dbg !4255

or.phi307:                                        ; preds = %or.rhs303, %if.exit299
  %val308 = phi i1 [ true, %if.exit299 ], [ %siui-lt306, %or.rhs303 ], !dbg !4255
  br i1 %val308, label %if.then309, label %if.exit310, !dbg !4255

if.then309:                                       ; preds = %or.phi307
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4257
  br label %panic_block, !dbg !4257

if.exit310:                                       ; preds = %or.phi307
  %217 = load i64, ptr %l, align 8, !dbg !4258
  store i64 %217, ptr %blockret182, align 8, !dbg !4258
  br label %expr_block.exit467, !dbg !4258

next_if311:                                       ; preds = %result_block286
  br label %check_subtype312, !dbg !4259

check_subtype312:                                 ; preds = %parent_type_block314, %next_if311
  %218 = phi i64 [ %161, %next_if311 ], [ %typeid.parent316, %parent_type_block314 ], !dbg !4259
  %eq313 = icmp eq i64 ptrtoint (ptr @"$ct.int128" to i64), %218, !dbg !4259
  br i1 %eq313, label %result_block317, label %parent_type_block314, !dbg !4259

parent_type_block314:                             ; preds = %check_subtype312
  %219 = inttoptr i64 %218 to ptr, !dbg !4259
  %ptradd315 = getelementptr inbounds i8, ptr %219, i64 8, !dbg !4259
  %typeid.parent316 = load i64, ptr %ptradd315, align 8, !dbg !4259
  %220 = icmp eq i64 %typeid.parent316, 0, !dbg !4259
  br i1 %220, label %result_block317, label %check_subtype312, !dbg !4259

result_block317:                                  ; preds = %parent_type_block314, %check_subtype312
  %221 = phi i1 [ false, %parent_type_block314 ], [ true, %check_subtype312 ], !dbg !4259
  br i1 %221, label %switch.case318, label %next_if344, !dbg !4259

switch.case318:                                   ; preds = %result_block317
  call void @llvm.dbg.declare(metadata ptr %i319, metadata !4260, metadata !DIExpression()), !dbg !4262
  %222 = load ptr, ptr %v181, align 8, !dbg !4263
  %checknull320 = icmp eq ptr %222, null, !dbg !4263
  %223 = call i1 @llvm.expect.i1(i1 %checknull320, i1 false), !dbg !4263
  br i1 %223, label %panic321, label %checkok325, !dbg !4263

checkok325:                                       ; preds = %switch.case318
  %224 = load i128, ptr %222, align 16, !dbg !4264
  store i128 %224, ptr %i319, align 16, !dbg !4264
  %225 = load i8, ptr %is_mixed_signed, align 1, !dbg !4265
  %226 = trunc i8 %225 to i1, !dbg !4265
  br i1 %226, label %and.rhs326, label %and.phi328, !dbg !4265

and.rhs326:                                       ; preds = %checkok325
  %227 = load i128, ptr %i319, align 16, !dbg !4266
  %lt327 = icmp slt i128 %227, 0, !dbg !4266
  br label %and.phi328, !dbg !4266

and.phi328:                                       ; preds = %and.rhs326, %checkok325
  %val329 = phi i1 [ false, %checkok325 ], [ %lt327, %and.rhs326 ], !dbg !4266
  br i1 %val329, label %if.then330, label %if.exit331, !dbg !4266

if.then330:                                       ; preds = %and.phi328
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_UNSIGNED_RANGE" to i64), ptr %error_var132, align 8, !dbg !4267
  br label %panic_block, !dbg !4267

if.exit331:                                       ; preds = %and.phi328
  %228 = load i128, ptr %i319, align 16, !dbg !4268
  %229 = load i64, ptr %max, align 8, !dbg !4269
  %zext = zext i64 %229 to i128, !dbg !4269
  %gt332 = icmp sgt i128 %228, %zext, !dbg !4268
  %check333 = icmp sge i128 %zext, 0, !dbg !4268
  %siui-gt334 = and i1 %check333, %gt332, !dbg !4268
  br i1 %siui-gt334, label %or.phi340, label %or.rhs335, !dbg !4268

or.rhs335:                                        ; preds = %if.exit331
  %230 = load i128, ptr %i319, align 16, !dbg !4270
  %231 = load i64, ptr %min, align 8, !dbg !4271
  %zext336 = zext i64 %231 to i128, !dbg !4271
  %lt337 = icmp slt i128 %230, %zext336, !dbg !4270
  %check338 = icmp slt i128 %zext336, 0, !dbg !4270
  %siui-lt339 = or i1 %check338, %lt337, !dbg !4270
  br label %or.phi340, !dbg !4270

or.phi340:                                        ; preds = %or.rhs335, %if.exit331
  %val341 = phi i1 [ true, %if.exit331 ], [ %siui-lt339, %or.rhs335 ], !dbg !4270
  br i1 %val341, label %if.then342, label %if.exit343, !dbg !4270

if.then342:                                       ; preds = %or.phi340
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4272
  br label %panic_block, !dbg !4272

if.exit343:                                       ; preds = %or.phi340
  %232 = load i128, ptr %i319, align 16, !dbg !4273
  %trunc = trunc i128 %232 to i64, !dbg !4273
  store i64 %trunc, ptr %blockret182, align 8, !dbg !4273
  br label %expr_block.exit467, !dbg !4273

next_if344:                                       ; preds = %result_block317
  br label %check_subtype345, !dbg !4274

check_subtype345:                                 ; preds = %parent_type_block347, %next_if344
  %233 = phi i64 [ %161, %next_if344 ], [ %typeid.parent349, %parent_type_block347 ], !dbg !4274
  %eq346 = icmp eq i64 ptrtoint (ptr @"$ct.char" to i64), %233, !dbg !4274
  br i1 %eq346, label %result_block350, label %parent_type_block347, !dbg !4274

parent_type_block347:                             ; preds = %check_subtype345
  %234 = inttoptr i64 %233 to ptr, !dbg !4274
  %ptradd348 = getelementptr inbounds i8, ptr %234, i64 8, !dbg !4274
  %typeid.parent349 = load i64, ptr %ptradd348, align 8, !dbg !4274
  %235 = icmp eq i64 %typeid.parent349, 0, !dbg !4274
  br i1 %235, label %result_block350, label %check_subtype345, !dbg !4274

result_block350:                                  ; preds = %parent_type_block347, %check_subtype345
  %236 = phi i1 [ false, %parent_type_block347 ], [ true, %check_subtype345 ], !dbg !4274
  br i1 %236, label %switch.case351, label %next_if364, !dbg !4274

switch.case351:                                   ; preds = %result_block350
  call void @llvm.dbg.declare(metadata ptr %c352, metadata !4275, metadata !DIExpression()), !dbg !4277
  %237 = load ptr, ptr %v181, align 8, !dbg !4278
  %checknull353 = icmp eq ptr %237, null, !dbg !4278
  %238 = call i1 @llvm.expect.i1(i1 %checknull353, i1 false), !dbg !4278
  br i1 %238, label %panic354, label %checkok358, !dbg !4278

checkok358:                                       ; preds = %switch.case351
  %239 = load i8, ptr %237, align 1, !dbg !4279
  store i8 %239, ptr %c352, align 1, !dbg !4279
  %240 = load i8, ptr %c352, align 1, !dbg !4280
  %zext359 = zext i8 %240 to i64, !dbg !4280
  %241 = load i64, ptr %max, align 8, !dbg !4281
  %gt360 = icmp ugt i64 %zext359, %241, !dbg !4280
  br i1 %gt360, label %if.then361, label %if.exit362, !dbg !4280

if.then361:                                       ; preds = %checkok358
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4282
  br label %panic_block, !dbg !4282

if.exit362:                                       ; preds = %checkok358
  %242 = load i8, ptr %c352, align 1, !dbg !4283
  %zext363 = zext i8 %242 to i64, !dbg !4283
  store i64 %zext363, ptr %blockret182, align 8, !dbg !4283
  br label %expr_block.exit467, !dbg !4283

next_if364:                                       ; preds = %result_block350
  br label %check_subtype365, !dbg !4284

check_subtype365:                                 ; preds = %parent_type_block367, %next_if364
  %243 = phi i64 [ %161, %next_if364 ], [ %typeid.parent369, %parent_type_block367 ], !dbg !4284
  %eq366 = icmp eq i64 ptrtoint (ptr @"$ct.ushort" to i64), %243, !dbg !4284
  br i1 %eq366, label %result_block370, label %parent_type_block367, !dbg !4284

parent_type_block367:                             ; preds = %check_subtype365
  %244 = inttoptr i64 %243 to ptr, !dbg !4284
  %ptradd368 = getelementptr inbounds i8, ptr %244, i64 8, !dbg !4284
  %typeid.parent369 = load i64, ptr %ptradd368, align 8, !dbg !4284
  %245 = icmp eq i64 %typeid.parent369, 0, !dbg !4284
  br i1 %245, label %result_block370, label %check_subtype365, !dbg !4284

result_block370:                                  ; preds = %parent_type_block367, %check_subtype365
  %246 = phi i1 [ false, %parent_type_block367 ], [ true, %check_subtype365 ], !dbg !4284
  br i1 %246, label %switch.case371, label %next_if389, !dbg !4284

switch.case371:                                   ; preds = %result_block370
  call void @llvm.dbg.declare(metadata ptr %s372, metadata !4285, metadata !DIExpression()), !dbg !4287
  %247 = load ptr, ptr %v181, align 8, !dbg !4288
  %checknull373 = icmp eq ptr %247, null, !dbg !4288
  %248 = call i1 @llvm.expect.i1(i1 %checknull373, i1 false), !dbg !4288
  br i1 %248, label %panic374, label %checkok378, !dbg !4288

checkok378:                                       ; preds = %switch.case371
  %249 = load i16, ptr %247, align 2, !dbg !4289
  store i16 %249, ptr %s372, align 2, !dbg !4289
  %250 = load i16, ptr %s372, align 2, !dbg !4290
  %zext379 = zext i16 %250 to i64, !dbg !4290
  %251 = load i64, ptr %max, align 8, !dbg !4291
  %gt380 = icmp ugt i64 %zext379, %251, !dbg !4290
  br i1 %gt380, label %or.phi384, label %or.rhs381, !dbg !4290

or.rhs381:                                        ; preds = %checkok378
  %252 = load i16, ptr %s372, align 2, !dbg !4292
  %zext382 = zext i16 %252 to i64, !dbg !4292
  %253 = load i64, ptr %min, align 8, !dbg !4293
  %lt383 = icmp ult i64 %zext382, %253, !dbg !4292
  br label %or.phi384, !dbg !4292

or.phi384:                                        ; preds = %or.rhs381, %checkok378
  %val385 = phi i1 [ true, %checkok378 ], [ %lt383, %or.rhs381 ], !dbg !4292
  br i1 %val385, label %if.then386, label %if.exit387, !dbg !4292

if.then386:                                       ; preds = %or.phi384
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4294
  br label %panic_block, !dbg !4294

if.exit387:                                       ; preds = %or.phi384
  %254 = load i16, ptr %s372, align 2, !dbg !4295
  %zext388 = zext i16 %254 to i64, !dbg !4295
  store i64 %zext388, ptr %blockret182, align 8, !dbg !4295
  br label %expr_block.exit467, !dbg !4295

next_if389:                                       ; preds = %result_block370
  br label %check_subtype390, !dbg !4296

check_subtype390:                                 ; preds = %parent_type_block392, %next_if389
  %255 = phi i64 [ %161, %next_if389 ], [ %typeid.parent394, %parent_type_block392 ], !dbg !4296
  %eq391 = icmp eq i64 ptrtoint (ptr @"$ct.uint" to i64), %255, !dbg !4296
  br i1 %eq391, label %result_block395, label %parent_type_block392, !dbg !4296

parent_type_block392:                             ; preds = %check_subtype390
  %256 = inttoptr i64 %255 to ptr, !dbg !4296
  %ptradd393 = getelementptr inbounds i8, ptr %256, i64 8, !dbg !4296
  %typeid.parent394 = load i64, ptr %ptradd393, align 8, !dbg !4296
  %257 = icmp eq i64 %typeid.parent394, 0, !dbg !4296
  br i1 %257, label %result_block395, label %check_subtype390, !dbg !4296

result_block395:                                  ; preds = %parent_type_block392, %check_subtype390
  %258 = phi i1 [ false, %parent_type_block392 ], [ true, %check_subtype390 ], !dbg !4296
  br i1 %258, label %switch.case396, label %next_if414, !dbg !4296

switch.case396:                                   ; preds = %result_block395
  call void @llvm.dbg.declare(metadata ptr %i397, metadata !4297, metadata !DIExpression()), !dbg !4299
  %259 = load ptr, ptr %v181, align 8, !dbg !4300
  %checknull398 = icmp eq ptr %259, null, !dbg !4300
  %260 = call i1 @llvm.expect.i1(i1 %checknull398, i1 false), !dbg !4300
  br i1 %260, label %panic399, label %checkok403, !dbg !4300

checkok403:                                       ; preds = %switch.case396
  %261 = load i32, ptr %259, align 4, !dbg !4301
  store i32 %261, ptr %i397, align 4, !dbg !4301
  %262 = load i32, ptr %i397, align 4, !dbg !4302
  %zext404 = zext i32 %262 to i64, !dbg !4302
  %263 = load i64, ptr %max, align 8, !dbg !4303
  %gt405 = icmp ugt i64 %zext404, %263, !dbg !4302
  br i1 %gt405, label %or.phi409, label %or.rhs406, !dbg !4302

or.rhs406:                                        ; preds = %checkok403
  %264 = load i32, ptr %i397, align 4, !dbg !4304
  %zext407 = zext i32 %264 to i64, !dbg !4304
  %265 = load i64, ptr %min, align 8, !dbg !4305
  %lt408 = icmp ult i64 %zext407, %265, !dbg !4304
  br label %or.phi409, !dbg !4304

or.phi409:                                        ; preds = %or.rhs406, %checkok403
  %val410 = phi i1 [ true, %checkok403 ], [ %lt408, %or.rhs406 ], !dbg !4304
  br i1 %val410, label %if.then411, label %if.exit412, !dbg !4304

if.then411:                                       ; preds = %or.phi409
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4306
  br label %panic_block, !dbg !4306

if.exit412:                                       ; preds = %or.phi409
  %266 = load i32, ptr %i397, align 4, !dbg !4307
  %zext413 = zext i32 %266 to i64, !dbg !4307
  store i64 %zext413, ptr %blockret182, align 8, !dbg !4307
  br label %expr_block.exit467, !dbg !4307

next_if414:                                       ; preds = %result_block395
  br label %check_subtype415, !dbg !4308

check_subtype415:                                 ; preds = %parent_type_block417, %next_if414
  %267 = phi i64 [ %161, %next_if414 ], [ %typeid.parent419, %parent_type_block417 ], !dbg !4308
  %eq416 = icmp eq i64 ptrtoint (ptr @"$ct.ulong" to i64), %267, !dbg !4308
  br i1 %eq416, label %result_block420, label %parent_type_block417, !dbg !4308

parent_type_block417:                             ; preds = %check_subtype415
  %268 = inttoptr i64 %267 to ptr, !dbg !4308
  %ptradd418 = getelementptr inbounds i8, ptr %268, i64 8, !dbg !4308
  %typeid.parent419 = load i64, ptr %ptradd418, align 8, !dbg !4308
  %269 = icmp eq i64 %typeid.parent419, 0, !dbg !4308
  br i1 %269, label %result_block420, label %check_subtype415, !dbg !4308

result_block420:                                  ; preds = %parent_type_block417, %check_subtype415
  %270 = phi i1 [ false, %parent_type_block417 ], [ true, %check_subtype415 ], !dbg !4308
  br i1 %270, label %switch.case421, label %next_if436, !dbg !4308

switch.case421:                                   ; preds = %result_block420
  call void @llvm.dbg.declare(metadata ptr %l422, metadata !4309, metadata !DIExpression()), !dbg !4311
  %271 = load ptr, ptr %v181, align 8, !dbg !4312
  %checknull423 = icmp eq ptr %271, null, !dbg !4312
  %272 = call i1 @llvm.expect.i1(i1 %checknull423, i1 false), !dbg !4312
  br i1 %272, label %panic424, label %checkok428, !dbg !4312

checkok428:                                       ; preds = %switch.case421
  %273 = load i64, ptr %271, align 8, !dbg !4313
  store i64 %273, ptr %l422, align 8, !dbg !4313
  %274 = load i64, ptr %l422, align 8, !dbg !4314
  %275 = load i64, ptr %max, align 8, !dbg !4315
  %gt429 = icmp ugt i64 %274, %275, !dbg !4314
  br i1 %gt429, label %or.phi432, label %or.rhs430, !dbg !4314

or.rhs430:                                        ; preds = %checkok428
  %276 = load i64, ptr %l422, align 8, !dbg !4316
  %277 = load i64, ptr %min, align 8, !dbg !4317
  %lt431 = icmp ult i64 %276, %277, !dbg !4316
  br label %or.phi432, !dbg !4316

or.phi432:                                        ; preds = %or.rhs430, %checkok428
  %val433 = phi i1 [ true, %checkok428 ], [ %lt431, %or.rhs430 ], !dbg !4316
  br i1 %val433, label %if.then434, label %if.exit435, !dbg !4316

if.then434:                                       ; preds = %or.phi432
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4318
  br label %panic_block, !dbg !4318

if.exit435:                                       ; preds = %or.phi432
  %278 = load i64, ptr %l422, align 8, !dbg !4319
  store i64 %278, ptr %blockret182, align 8, !dbg !4319
  br label %expr_block.exit467, !dbg !4319

next_if436:                                       ; preds = %result_block420
  br label %check_subtype437, !dbg !4320

check_subtype437:                                 ; preds = %parent_type_block439, %next_if436
  %279 = phi i64 [ %161, %next_if436 ], [ %typeid.parent441, %parent_type_block439 ], !dbg !4320
  %eq438 = icmp eq i64 ptrtoint (ptr @"$ct.uint128" to i64), %279, !dbg !4320
  br i1 %eq438, label %result_block442, label %parent_type_block439, !dbg !4320

parent_type_block439:                             ; preds = %check_subtype437
  %280 = inttoptr i64 %279 to ptr, !dbg !4320
  %ptradd440 = getelementptr inbounds i8, ptr %280, i64 8, !dbg !4320
  %typeid.parent441 = load i64, ptr %ptradd440, align 8, !dbg !4320
  %281 = icmp eq i64 %typeid.parent441, 0, !dbg !4320
  br i1 %281, label %result_block442, label %check_subtype437, !dbg !4320

result_block442:                                  ; preds = %parent_type_block439, %check_subtype437
  %282 = phi i1 [ false, %parent_type_block439 ], [ true, %check_subtype437 ], !dbg !4320
  br i1 %282, label %switch.case443, label %next_if461, !dbg !4320

switch.case443:                                   ; preds = %result_block442
  call void @llvm.dbg.declare(metadata ptr %i444, metadata !4321, metadata !DIExpression()), !dbg !4323
  %283 = load ptr, ptr %v181, align 8, !dbg !4324
  %checknull445 = icmp eq ptr %283, null, !dbg !4324
  %284 = call i1 @llvm.expect.i1(i1 %checknull445, i1 false), !dbg !4324
  br i1 %284, label %panic446, label %checkok450, !dbg !4324

checkok450:                                       ; preds = %switch.case443
  %285 = load i128, ptr %283, align 16, !dbg !4325
  store i128 %285, ptr %i444, align 16, !dbg !4325
  %286 = load i128, ptr %i444, align 16, !dbg !4326
  %287 = load i64, ptr %max, align 8, !dbg !4327
  %zext451 = zext i64 %287 to i128, !dbg !4327
  %gt452 = icmp ugt i128 %286, %zext451, !dbg !4326
  br i1 %gt452, label %or.phi456, label %or.rhs453, !dbg !4326

or.rhs453:                                        ; preds = %checkok450
  %288 = load i128, ptr %i444, align 16, !dbg !4328
  %289 = load i64, ptr %min, align 8, !dbg !4329
  %zext454 = zext i64 %289 to i128, !dbg !4329
  %lt455 = icmp ult i128 %288, %zext454, !dbg !4328
  br label %or.phi456, !dbg !4328

or.phi456:                                        ; preds = %or.rhs453, %checkok450
  %val457 = phi i1 [ true, %checkok450 ], [ %lt455, %or.rhs453 ], !dbg !4328
  br i1 %val457, label %if.then458, label %if.exit459, !dbg !4328

if.then458:                                       ; preds = %or.phi456
  store i64 ptrtoint (ptr @"std.core.types.ConversionResult$VALUE_OUT_OF_RANGE" to i64), ptr %error_var132, align 8, !dbg !4330
  br label %panic_block, !dbg !4330

if.exit459:                                       ; preds = %or.phi456
  %290 = load i128, ptr %i444, align 16, !dbg !4331
  %trunc460 = trunc i128 %290 to i64, !dbg !4331
  store i64 %trunc460, ptr %blockret182, align 8, !dbg !4331
  br label %expr_block.exit467, !dbg !4331

next_if461:                                       ; preds = %result_block442
  br label %switch.default, !dbg !4331

switch.default:                                   ; preds = %next_if461
  store %"char[]" { ptr @.str.209, i64 30 }, ptr %string462, align 8
  %291 = load [2 x i64], ptr %string462, align 8, !dbg !4332
  store %"char[]" { ptr @.str.210, i64 12 }, ptr %taddr463, align 8
  %292 = load [2 x i64], ptr %taddr463, align 8
  store %"char[]" { ptr @.str.211, i64 17 }, ptr %taddr464, align 8
  %293 = load [2 x i64], ptr %taddr464, align 8
  store %"any[]" zeroinitializer, ptr %taddr465, align 8
  %294 = load [2 x i64], ptr %taddr465, align 8
  call void @std.core.builtin.panicf([2 x i64] %291, [2 x i64] %292, [2 x i64] %293, i32 198, [2 x i64] %294), !dbg !4336
  unreachable, !dbg !4337

expr_block.exit467:                               ; preds = %if.exit459, %if.exit435, %if.exit412, %if.exit387, %if.exit362, %if.exit343, %if.exit310, %if.exit278, %if.exit243, %if.exit215
  br label %noerr_block472, !dbg !4337

panic_block:                                      ; preds = %if.then458, %if.then434, %if.then411, %if.then386, %if.then361, %if.then342, %if.then330, %if.then309, %if.then298, %if.then277, %if.then264, %if.then242, %if.then235, %if.then214
  %295 = insertvalue %any undef, ptr %error_var132, 0, !dbg !4337
  %296 = insertvalue %any %295, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4337
  store %"char[]" { ptr @.panic_msg.90, i64 36 }, ptr %taddr468, align 8
  %297 = load [2 x i64], ptr %taddr468, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr469, align 8
  %298 = load [2 x i64], ptr %taddr469, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr470, align 8
  %299 = load [2 x i64], ptr %taddr470, align 8
  store %any %296, ptr %varargslots, align 8
  %300 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %300, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr471, align 8
  %301 = load [2 x i64], ptr %taddr471, align 8
  call void @std.core.builtin.panicf([2 x i64] %297, [2 x i64] %298, [2 x i64] %299, i32 198, [2 x i64] %301), !dbg !4176
  unreachable, !dbg !4176

noerr_block472:                                   ; preds = %expr_block.exit467
  %302 = load i64, ptr %blockret182, align 8, !dbg !4176
  store i64 %302, ptr %i, align 8, !dbg !4176
  %303 = load i64, ptr %i, align 8, !dbg !4338
  %ptradd473 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4339
  %304 = load i64, ptr %ptradd473, align 8, !dbg !4339
  %"introspect*474" = inttoptr i64 %304 to ptr, !dbg !4339
  %typeid.kind475 = load i8, ptr %"introspect*474", align 8, !dbg !4339
  %eq476 = icmp eq i8 %typeid.kind475, 8, !dbg !4339
  br i1 %eq476, label %check_type_ok481, label %check_next477, !dbg !4339

check_next477:                                    ; preds = %noerr_block472
  store %"char[]" { ptr @.panic_msg.212, i64 51 }, ptr %taddr478, align 8
  %305 = load [2 x i64], ptr %taddr478, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr479, align 8
  %306 = load [2 x i64], ptr %taddr479, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr480, align 8
  %307 = load [2 x i64], ptr %taddr480, align 8
  %308 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %308([2 x i64] %305, [2 x i64] %306, [2 x i64] %307, i32 199), !dbg !4339
  unreachable, !dbg !4339

check_type_ok481:                                 ; preds = %noerr_block472
  %ptradd482 = getelementptr inbounds i8, ptr %"introspect*474", i64 40, !dbg !4339
  %namelen = load i64, ptr %ptradd482, align 8, !dbg !4339
  %ptradd483 = getelementptr inbounds i8, ptr %"introspect*474", i64 48, !dbg !4339
  %309 = insertvalue %"char[][]" undef, ptr %ptradd483, 0, !dbg !4339
  %310 = insertvalue %"char[][]" %309, i64 %namelen, 1, !dbg !4339
  %311 = extractvalue %"char[][]" %310, 1, !dbg !4339
  %lt484 = icmp ult i64 %303, %311, !dbg !4338
  br i1 %lt484, label %assert_ok492, label %assert_fail485, !dbg !4338

assert_fail485:                                   ; preds = %check_type_ok481
  %312 = insertvalue %any undef, ptr %i, 0, !dbg !4340
  %313 = insertvalue %any %312, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1, !dbg !4340
  store %"char[]" { ptr @.panic_msg.213, i64 49 }, ptr %taddr486, align 8
  %314 = load [2 x i64], ptr %taddr486, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr487, align 8
  %315 = load [2 x i64], ptr %taddr487, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr488, align 8
  %316 = load [2 x i64], ptr %taddr488, align 8
  store %any %313, ptr %varargslots489, align 8
  %317 = insertvalue %"any[]" undef, ptr %varargslots489, 0
  %"$$temp490" = insertvalue %"any[]" %317, i64 1, 1
  store %"any[]" %"$$temp490", ptr %taddr491, align 8
  %318 = load [2 x i64], ptr %taddr491, align 8
  call void @std.core.builtin.panicf([2 x i64] %314, [2 x i64] %315, [2 x i64] %316, i32 199, [2 x i64] %318), !dbg !4338
  unreachable, !dbg !4338

assert_ok492:                                     ; preds = %check_type_ok481
  %ptradd494 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4341
  %319 = load i64, ptr %ptradd494, align 8, !dbg !4341
  %"introspect*495" = inttoptr i64 %319 to ptr, !dbg !4341
  %typeid.kind496 = load i8, ptr %"introspect*495", align 8, !dbg !4341
  %eq497 = icmp eq i8 %typeid.kind496, 8, !dbg !4341
  br i1 %eq497, label %check_type_ok502, label %check_next498, !dbg !4341

check_next498:                                    ; preds = %assert_ok492
  store %"char[]" { ptr @.panic_msg.212, i64 51 }, ptr %taddr499, align 8
  %320 = load [2 x i64], ptr %taddr499, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr500, align 8
  %321 = load [2 x i64], ptr %taddr500, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr501, align 8
  %322 = load [2 x i64], ptr %taddr501, align 8
  %323 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %323([2 x i64] %320, [2 x i64] %321, [2 x i64] %322, i32 200), !dbg !4341
  unreachable, !dbg !4341

check_type_ok502:                                 ; preds = %assert_ok492
  %ptradd503 = getelementptr inbounds i8, ptr %"introspect*495", i64 40, !dbg !4341
  %namelen504 = load i64, ptr %ptradd503, align 8, !dbg !4341
  %ptradd505 = getelementptr inbounds i8, ptr %"introspect*495", i64 48, !dbg !4341
  %324 = insertvalue %"char[][]" undef, ptr %ptradd505, 0, !dbg !4341
  %325 = insertvalue %"char[][]" %324, i64 %namelen504, 1, !dbg !4341
  %326 = extractvalue %"char[][]" %325, 1, !dbg !4341
  %327 = extractvalue %"char[][]" %325, 0, !dbg !4341
  %328 = load i64, ptr %i, align 8, !dbg !4342
  %ge = icmp uge i64 %328, %326, !dbg !4342
  %329 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4342
  br i1 %329, label %panic506, label %checkok516, !dbg !4342

checkok516:                                       ; preds = %check_type_ok502
  %ptroffset = getelementptr inbounds [16 x i8], ptr %327, i64 %328, !dbg !4342
  %330 = load ptr, ptr %self, align 8
  %331 = load [2 x i64], ptr %ptroffset, align 8
  %332 = call i64 @std.io.Formatter.out_substr(ptr %retparam517, ptr %330, [2 x i64] %331), !dbg !4343
  %not_err518 = icmp eq i64 %332, 0, !dbg !4343
  %333 = call i1 @llvm.expect.i1(i1 %not_err518, i1 true), !dbg !4343
  br i1 %333, label %after_check520, label %assign_optional519, !dbg !4343

assign_optional519:                               ; preds = %checkok516
  store i64 %332, ptr %reterr493, align 8, !dbg !4343
  br label %err_retblock521, !dbg !4343

after_check520:                                   ; preds = %checkok516
  %334 = load i64, ptr %retparam517, align 8, !dbg !4343
  store i64 %334, ptr %0, align 8, !dbg !4343
  ret i64 0, !dbg !4343

err_retblock521:                                  ; preds = %assign_optional519
  %335 = load i64, ptr %reterr493, align 8, !dbg !4343
  ret i64 %335, !dbg !4343

switch.case522:                                   ; preds = %switch.entry130
  %336 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.214, i64 8 }, ptr %taddr525, align 8
  %337 = load [2 x i64], ptr %taddr525, align 8
  %338 = call i64 @std.io.Formatter.out_substr(ptr %retparam524, ptr %336, [2 x i64] %337), !dbg !4344
  %not_err526 = icmp eq i64 %338, 0, !dbg !4344
  %339 = call i1 @llvm.expect.i1(i1 %not_err526, i1 true), !dbg !4344
  br i1 %339, label %after_check528, label %assign_optional527, !dbg !4344

assign_optional527:                               ; preds = %switch.case522
  store i64 %338, ptr %reterr523, align 8, !dbg !4344
  br label %err_retblock529, !dbg !4344

after_check528:                                   ; preds = %switch.case522
  %340 = load i64, ptr %retparam524, align 8, !dbg !4344
  store i64 %340, ptr %0, align 8, !dbg !4344
  ret i64 0, !dbg !4344

err_retblock529:                                  ; preds = %assign_optional527
  %341 = load i64, ptr %reterr523, align 8, !dbg !4344
  ret i64 %341, !dbg !4344

switch.case530:                                   ; preds = %switch.entry130
  %342 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.215, i64 7 }, ptr %taddr533, align 8
  %343 = load [2 x i64], ptr %taddr533, align 8
  %344 = call i64 @std.io.Formatter.out_substr(ptr %retparam532, ptr %342, [2 x i64] %343), !dbg !4346
  %not_err534 = icmp eq i64 %344, 0, !dbg !4346
  %345 = call i1 @llvm.expect.i1(i1 %not_err534, i1 true), !dbg !4346
  br i1 %345, label %after_check536, label %assign_optional535, !dbg !4346

assign_optional535:                               ; preds = %switch.case530
  store i64 %344, ptr %reterr531, align 8, !dbg !4346
  br label %err_retblock537, !dbg !4346

after_check536:                                   ; preds = %switch.case530
  %346 = load i64, ptr %retparam532, align 8, !dbg !4346
  store i64 %346, ptr %0, align 8, !dbg !4346
  ret i64 0, !dbg !4346

err_retblock537:                                  ; preds = %assign_optional535
  %347 = load i64, ptr %reterr531, align 8, !dbg !4346
  ret i64 %347, !dbg !4346

switch.case538:                                   ; preds = %switch.entry130
  %348 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.216, i64 11 }, ptr %taddr541, align 8
  %349 = load [2 x i64], ptr %taddr541, align 8
  %350 = call i64 @std.io.Formatter.out_substr(ptr %retparam540, ptr %348, [2 x i64] %349), !dbg !4348
  %not_err542 = icmp eq i64 %350, 0, !dbg !4348
  %351 = call i1 @llvm.expect.i1(i1 %not_err542, i1 true), !dbg !4348
  br i1 %351, label %after_check544, label %assign_optional543, !dbg !4348

assign_optional543:                               ; preds = %switch.case538
  store i64 %350, ptr %reterr539, align 8, !dbg !4348
  br label %err_retblock545, !dbg !4348

after_check544:                                   ; preds = %switch.case538
  %352 = load i64, ptr %retparam540, align 8, !dbg !4348
  store i64 %352, ptr %0, align 8, !dbg !4348
  ret i64 0, !dbg !4348

err_retblock545:                                  ; preds = %assign_optional543
  %353 = load i64, ptr %reterr539, align 8, !dbg !4348
  ret i64 %353, !dbg !4348

switch.case546:                                   ; preds = %switch.entry130
  %354 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.217, i64 10 }, ptr %taddr549, align 8
  %355 = load [2 x i64], ptr %taddr549, align 8
  %356 = call i64 @std.io.Formatter.out_substr(ptr %retparam548, ptr %354, [2 x i64] %355), !dbg !4350
  %not_err550 = icmp eq i64 %356, 0, !dbg !4350
  %357 = call i1 @llvm.expect.i1(i1 %not_err550, i1 true), !dbg !4350
  br i1 %357, label %after_check552, label %assign_optional551, !dbg !4350

assign_optional551:                               ; preds = %switch.case546
  store i64 %356, ptr %reterr547, align 8, !dbg !4350
  br label %err_retblock553, !dbg !4350

after_check552:                                   ; preds = %switch.case546
  %358 = load i64, ptr %retparam548, align 8, !dbg !4350
  store i64 %358, ptr %0, align 8, !dbg !4350
  ret i64 0, !dbg !4350

err_retblock553:                                  ; preds = %assign_optional551
  %359 = load i64, ptr %reterr547, align 8, !dbg !4350
  ret i64 %359, !dbg !4350

switch.case554:                                   ; preds = %switch.entry130
  %ptradd555 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4352
  %360 = load i64, ptr %ptradd555, align 8, !dbg !4352
  %eq556 = icmp eq i64 %360, ptrtoint (ptr @"$ct.String" to i64), !dbg !4352
  br i1 %eq556, label %if.then557, label %if.exit570, !dbg !4352

if.then557:                                       ; preds = %switch.case554
  %361 = load ptr, ptr %arg, align 8, !dbg !4354
  %checknull559 = icmp eq ptr %361, null, !dbg !4354
  %362 = call i1 @llvm.expect.i1(i1 %checknull559, i1 false), !dbg !4354
  br i1 %362, label %panic560, label %checkok564, !dbg !4354

checkok564:                                       ; preds = %if.then557
  %363 = load ptr, ptr %self, align 8
  %364 = load [2 x i64], ptr %361, align 8
  %365 = call i64 @std.io.Formatter.out_substr(ptr %retparam565, ptr %363, [2 x i64] %364), !dbg !4356
  %not_err566 = icmp eq i64 %365, 0, !dbg !4356
  %366 = call i1 @llvm.expect.i1(i1 %not_err566, i1 true), !dbg !4356
  br i1 %366, label %after_check568, label %assign_optional567, !dbg !4356

assign_optional567:                               ; preds = %checkok564
  store i64 %365, ptr %reterr558, align 8, !dbg !4356
  br label %err_retblock569, !dbg !4356

after_check568:                                   ; preds = %checkok564
  %367 = load i64, ptr %retparam565, align 8, !dbg !4356
  store i64 %367, ptr %0, align 8, !dbg !4356
  ret i64 0, !dbg !4356

err_retblock569:                                  ; preds = %assign_optional567
  %368 = load i64, ptr %reterr558, align 8, !dbg !4356
  ret i64 %368, !dbg !4356

if.exit570:                                       ; preds = %switch.case554
  %ptradd571 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4357
  %369 = load i64, ptr %ptradd571, align 8, !dbg !4357
  %eq572 = icmp eq i64 %369, ptrtoint (ptr @"$ct.std.core.string.ZString" to i64), !dbg !4357
  br i1 %eq572, label %if.then573, label %if.exit596, !dbg !4357

if.then573:                                       ; preds = %if.exit570
  %370 = load ptr, ptr %arg, align 8, !dbg !4358
  %checknull575 = icmp eq ptr %370, null, !dbg !4358
  %371 = call i1 @llvm.expect.i1(i1 %checknull575, i1 false), !dbg !4358
  br i1 %371, label %panic576, label %checkok580, !dbg !4358

checkok580:                                       ; preds = %if.then573
  %372 = load ptr, ptr %370, align 8, !dbg !4358
  %i2b581 = icmp ne ptr %372, null, !dbg !4358
  br i1 %i2b581, label %cond.lhs, label %cond.rhs, !dbg !4358

cond.lhs:                                         ; preds = %checkok580
  %373 = load ptr, ptr %arg, align 8, !dbg !4360
  %checknull582 = icmp eq ptr %373, null, !dbg !4360
  %374 = call i1 @llvm.expect.i1(i1 %checknull582, i1 false), !dbg !4360
  br i1 %374, label %panic583, label %checkok587, !dbg !4360

checkok587:                                       ; preds = %cond.lhs
  %375 = load ptr, ptr %373, align 8, !dbg !4360
  %376 = call [2 x i64] @std.core.string.ZString.str_view(ptr %375), !dbg !4360
  store [2 x i64] %376, ptr %result588, align 8
  %377 = load %"char[]", ptr %result588, align 8
  br label %cond.phi

cond.rhs:                                         ; preds = %checkok580
  br label %cond.phi, !dbg !4361

cond.phi:                                         ; preds = %cond.rhs, %checkok587
  %val589 = phi %"char[]" [ %377, %checkok587 ], [ { ptr @.str.221, i64 6 }, %cond.rhs ], !dbg !4361
  %378 = load ptr, ptr %self, align 8
  store %"char[]" %val589, ptr %taddr591, align 8
  %379 = load [2 x i64], ptr %taddr591, align 8
  %380 = call i64 @std.io.Formatter.out_substr(ptr %retparam590, ptr %378, [2 x i64] %379), !dbg !4362
  %not_err592 = icmp eq i64 %380, 0, !dbg !4362
  %381 = call i1 @llvm.expect.i1(i1 %not_err592, i1 true), !dbg !4362
  br i1 %381, label %after_check594, label %assign_optional593, !dbg !4362

assign_optional593:                               ; preds = %cond.phi
  store i64 %380, ptr %reterr574, align 8, !dbg !4362
  br label %err_retblock595, !dbg !4362

after_check594:                                   ; preds = %cond.phi
  %382 = load i64, ptr %retparam590, align 8, !dbg !4362
  store i64 %382, ptr %0, align 8, !dbg !4362
  ret i64 0, !dbg !4362

err_retblock595:                                  ; preds = %assign_optional593
  %383 = load i64, ptr %reterr574, align 8, !dbg !4362
  ret i64 %383, !dbg !4362

if.exit596:                                       ; preds = %if.exit570
  %ptradd597 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4363
  %384 = load i64, ptr %ptradd597, align 8, !dbg !4363
  %eq598 = icmp eq i64 %384, ptrtoint (ptr @"$ct.std.core.dstring.DString" to i64), !dbg !4363
  br i1 %eq598, label %if.then599, label %if.exit625, !dbg !4363

if.then599:                                       ; preds = %if.exit596
  %385 = load ptr, ptr %arg, align 8, !dbg !4364
  %checknull601 = icmp eq ptr %385, null, !dbg !4364
  %386 = call i1 @llvm.expect.i1(i1 %checknull601, i1 false), !dbg !4364
  br i1 %386, label %panic602, label %checkok606, !dbg !4364

checkok606:                                       ; preds = %if.then599
  %387 = load ptr, ptr %385, align 8, !dbg !4364
  %i2b607 = icmp ne ptr %387, null, !dbg !4364
  br i1 %i2b607, label %cond.lhs608, label %cond.rhs616, !dbg !4364

cond.lhs608:                                      ; preds = %checkok606
  %388 = load ptr, ptr %arg, align 8, !dbg !4366
  %checknull609 = icmp eq ptr %388, null, !dbg !4366
  %389 = call i1 @llvm.expect.i1(i1 %checknull609, i1 false), !dbg !4366
  br i1 %389, label %panic610, label %checkok614, !dbg !4366

checkok614:                                       ; preds = %cond.lhs608
  %390 = load ptr, ptr %388, align 8, !dbg !4366
  %391 = call [2 x i64] @std.core.dstring.DString.str_view(ptr %390), !dbg !4366
  store [2 x i64] %391, ptr %result615, align 8
  %392 = load %"char[]", ptr %result615, align 8
  br label %cond.phi617

cond.rhs616:                                      ; preds = %checkok606
  br label %cond.phi617, !dbg !4367

cond.phi617:                                      ; preds = %cond.rhs616, %checkok614
  %val618 = phi %"char[]" [ %392, %checkok614 ], [ { ptr @.str.224, i64 6 }, %cond.rhs616 ], !dbg !4367
  %393 = load ptr, ptr %self, align 8
  store %"char[]" %val618, ptr %taddr620, align 8
  %394 = load [2 x i64], ptr %taddr620, align 8
  %395 = call i64 @std.io.Formatter.out_substr(ptr %retparam619, ptr %393, [2 x i64] %394), !dbg !4368
  %not_err621 = icmp eq i64 %395, 0, !dbg !4368
  %396 = call i1 @llvm.expect.i1(i1 %not_err621, i1 true), !dbg !4368
  br i1 %396, label %after_check623, label %assign_optional622, !dbg !4368

assign_optional622:                               ; preds = %cond.phi617
  store i64 %395, ptr %reterr600, align 8, !dbg !4368
  br label %err_retblock624, !dbg !4368

after_check623:                                   ; preds = %cond.phi617
  %397 = load i64, ptr %retparam619, align 8, !dbg !4368
  store i64 %397, ptr %0, align 8, !dbg !4368
  ret i64 0, !dbg !4368

err_retblock624:                                  ; preds = %assign_optional622
  %398 = load i64, ptr %reterr600, align 8, !dbg !4368
  ret i64 %398, !dbg !4368

if.exit625:                                       ; preds = %if.exit596
  store ptr %arg, ptr %self627, align 8
  %399 = load ptr, ptr %self627, align 8, !dbg !4369
  %checknull628 = icmp eq ptr %399, null, !dbg !4369
  %400 = call i1 @llvm.expect.i1(i1 %checknull628, i1 false), !dbg !4369
  br i1 %400, label %panic629, label %checkok633, !dbg !4369

checkok633:                                       ; preds = %if.exit625
  %401 = load ptr, ptr %399, align 8, !dbg !4369
  %402 = load ptr, ptr %self627, align 8, !dbg !4372
  %checknull634 = icmp eq ptr %402, null, !dbg !4372
  %403 = call i1 @llvm.expect.i1(i1 %checknull634, i1 false), !dbg !4372
  br i1 %403, label %panic635, label %checkok639, !dbg !4372

checkok639:                                       ; preds = %checkok633
  %ptradd640 = getelementptr inbounds i8, ptr %402, i64 8, !dbg !4372
  %404 = load i64, ptr %ptradd640, align 8, !dbg !4372
  %"introspect*641" = inttoptr i64 %404 to ptr, !dbg !4372
  %typeid.kind642 = load i8, ptr %"introspect*641", align 8, !dbg !4372
  %eq643 = icmp eq i8 %typeid.kind642, 15, !dbg !4372
  br i1 %eq643, label %check_type_ok662, label %check_next644, !dbg !4372

check_next644:                                    ; preds = %checkok639
  %eq645 = icmp eq i8 %typeid.kind642, 19, !dbg !4372
  br i1 %eq645, label %check_type_ok662, label %check_next646, !dbg !4372

check_next646:                                    ; preds = %check_next644
  %eq647 = icmp eq i8 %typeid.kind642, 17, !dbg !4372
  br i1 %eq647, label %check_type_ok662, label %check_next648, !dbg !4372

check_next648:                                    ; preds = %check_next646
  %eq649 = icmp eq i8 %typeid.kind642, 8, !dbg !4372
  br i1 %eq649, label %check_type_ok662, label %check_next650, !dbg !4372

check_next650:                                    ; preds = %check_next648
  %eq651 = icmp eq i8 %typeid.kind642, 16, !dbg !4372
  br i1 %eq651, label %check_type_ok662, label %check_next652, !dbg !4372

check_next652:                                    ; preds = %check_next650
  %eq653 = icmp eq i8 %typeid.kind642, 18, !dbg !4372
  br i1 %eq653, label %check_type_ok662, label %check_next654, !dbg !4372

check_next654:                                    ; preds = %check_next652
  %eq655 = icmp eq i8 %typeid.kind642, 14, !dbg !4372
  br i1 %eq655, label %check_type_ok662, label %check_next656, !dbg !4372

check_next656:                                    ; preds = %check_next654
  %eq657 = icmp eq i8 %typeid.kind642, 12, !dbg !4372
  br i1 %eq657, label %check_type_ok662, label %check_next658, !dbg !4372

check_next658:                                    ; preds = %check_next656
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr659, align 8
  %405 = load [2 x i64], ptr %taddr659, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr660, align 8
  %406 = load [2 x i64], ptr %taddr660, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr661, align 8
  %407 = load [2 x i64], ptr %taddr661, align 8
  %408 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %408([2 x i64] %405, [2 x i64] %406, [2 x i64] %407, i32 200), !dbg !4372
  unreachable, !dbg !4372

check_type_ok662:                                 ; preds = %check_next656, %check_next654, %check_next652, %check_next650, %check_next648, %check_next646, %check_next644, %checkok639
  %ptradd663 = getelementptr inbounds i8, ptr %"introspect*641", i64 32, !dbg !4372
  %typeid.inner664 = load i64, ptr %ptradd663, align 8, !dbg !4372
  %409 = insertvalue %any undef, ptr %401, 0, !dbg !4372
  %410 = insertvalue %any %409, i64 %typeid.inner664, 1, !dbg !4372
  %411 = load ptr, ptr %self, align 8
  store %any %410, ptr %taddr666, align 8
  %412 = load [2 x i64], ptr %taddr666, align 8
  %413 = call i64 @std.io.Formatter.out_str(ptr %retparam665, ptr %411, [2 x i64] %412), !dbg !4373
  %not_err667 = icmp eq i64 %413, 0, !dbg !4373
  %414 = call i1 @llvm.expect.i1(i1 %not_err667, i1 true), !dbg !4373
  br i1 %414, label %after_check669, label %assign_optional668, !dbg !4373

assign_optional668:                               ; preds = %check_type_ok662
  store i64 %413, ptr %reterr626, align 8, !dbg !4373
  br label %err_retblock670, !dbg !4373

after_check669:                                   ; preds = %check_type_ok662
  %415 = load i64, ptr %retparam665, align 8, !dbg !4373
  store i64 %415, ptr %0, align 8, !dbg !4373
  ret i64 0, !dbg !4373

err_retblock670:                                  ; preds = %assign_optional668
  %416 = load i64, ptr %reterr626, align 8, !dbg !4373
  ret i64 %416, !dbg !4373

switch.case671:                                   ; preds = %switch.entry130
  call void @llvm.dbg.declare(metadata ptr %inner, metadata !4374, metadata !DIExpression()), !dbg !4376
  %ptradd672 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4377
  %417 = load i64, ptr %ptradd672, align 8, !dbg !4377
  %"introspect*673" = inttoptr i64 %417 to ptr, !dbg !4377
  %typeid.kind674 = load i8, ptr %"introspect*673", align 8, !dbg !4377
  %eq675 = icmp eq i8 %typeid.kind674, 15, !dbg !4377
  br i1 %eq675, label %check_type_ok694, label %check_next676, !dbg !4377

check_next676:                                    ; preds = %switch.case671
  %eq677 = icmp eq i8 %typeid.kind674, 19, !dbg !4377
  br i1 %eq677, label %check_type_ok694, label %check_next678, !dbg !4377

check_next678:                                    ; preds = %check_next676
  %eq679 = icmp eq i8 %typeid.kind674, 17, !dbg !4377
  br i1 %eq679, label %check_type_ok694, label %check_next680, !dbg !4377

check_next680:                                    ; preds = %check_next678
  %eq681 = icmp eq i8 %typeid.kind674, 8, !dbg !4377
  br i1 %eq681, label %check_type_ok694, label %check_next682, !dbg !4377

check_next682:                                    ; preds = %check_next680
  %eq683 = icmp eq i8 %typeid.kind674, 16, !dbg !4377
  br i1 %eq683, label %check_type_ok694, label %check_next684, !dbg !4377

check_next684:                                    ; preds = %check_next682
  %eq685 = icmp eq i8 %typeid.kind674, 18, !dbg !4377
  br i1 %eq685, label %check_type_ok694, label %check_next686, !dbg !4377

check_next686:                                    ; preds = %check_next684
  %eq687 = icmp eq i8 %typeid.kind674, 14, !dbg !4377
  br i1 %eq687, label %check_type_ok694, label %check_next688, !dbg !4377

check_next688:                                    ; preds = %check_next686
  %eq689 = icmp eq i8 %typeid.kind674, 12, !dbg !4377
  br i1 %eq689, label %check_type_ok694, label %check_next690, !dbg !4377

check_next690:                                    ; preds = %check_next688
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr691, align 8
  %418 = load [2 x i64], ptr %taddr691, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr692, align 8
  %419 = load [2 x i64], ptr %taddr692, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr693, align 8
  %420 = load [2 x i64], ptr %taddr693, align 8
  %421 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %421([2 x i64] %418, [2 x i64] %419, [2 x i64] %420, i32 224), !dbg !4377
  unreachable, !dbg !4377

check_type_ok694:                                 ; preds = %check_next688, %check_next686, %check_next684, %check_next682, %check_next680, %check_next678, %check_next676, %switch.case671
  %ptradd695 = getelementptr inbounds i8, ptr %"introspect*673", i64 32, !dbg !4377
  %typeid.inner696 = load i64, ptr %ptradd695, align 8, !dbg !4377
  store i64 %typeid.inner696, ptr %inner, align 8, !dbg !4377
  call void @llvm.dbg.declare(metadata ptr %pointer, metadata !4378, metadata !DIExpression()), !dbg !4380
  %422 = load ptr, ptr %arg, align 8, !dbg !4381
  store ptr %422, ptr %pointer, align 8, !dbg !4381
  %ptradd697 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4382
  %423 = load i64, ptr %ptradd697, align 8, !dbg !4382
  %"introspect*698" = inttoptr i64 %423 to ptr, !dbg !4382
  %typeid.kind699 = load i8, ptr %"introspect*698", align 8, !dbg !4382
  %eq700 = icmp eq i8 %typeid.kind699, 15, !dbg !4382
  br i1 %eq700, label %check_type_ok719, label %check_next701, !dbg !4382

check_next701:                                    ; preds = %check_type_ok694
  %eq702 = icmp eq i8 %typeid.kind699, 19, !dbg !4382
  br i1 %eq702, label %check_type_ok719, label %check_next703, !dbg !4382

check_next703:                                    ; preds = %check_next701
  %eq704 = icmp eq i8 %typeid.kind699, 17, !dbg !4382
  br i1 %eq704, label %check_type_ok719, label %check_next705, !dbg !4382

check_next705:                                    ; preds = %check_next703
  %eq706 = icmp eq i8 %typeid.kind699, 8, !dbg !4382
  br i1 %eq706, label %check_type_ok719, label %check_next707, !dbg !4382

check_next707:                                    ; preds = %check_next705
  %eq708 = icmp eq i8 %typeid.kind699, 16, !dbg !4382
  br i1 %eq708, label %check_type_ok719, label %check_next709, !dbg !4382

check_next709:                                    ; preds = %check_next707
  %eq710 = icmp eq i8 %typeid.kind699, 18, !dbg !4382
  br i1 %eq710, label %check_type_ok719, label %check_next711, !dbg !4382

check_next711:                                    ; preds = %check_next709
  %eq712 = icmp eq i8 %typeid.kind699, 14, !dbg !4382
  br i1 %eq712, label %check_type_ok719, label %check_next713, !dbg !4382

check_next713:                                    ; preds = %check_next711
  %eq714 = icmp eq i8 %typeid.kind699, 12, !dbg !4382
  br i1 %eq714, label %check_type_ok719, label %check_next715, !dbg !4382

check_next715:                                    ; preds = %check_next713
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr716, align 8
  %424 = load [2 x i64], ptr %taddr716, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr717, align 8
  %425 = load [2 x i64], ptr %taddr717, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr718, align 8
  %426 = load [2 x i64], ptr %taddr718, align 8
  %427 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %427([2 x i64] %424, [2 x i64] %425, [2 x i64] %426, i32 226), !dbg !4382
  unreachable, !dbg !4382

check_type_ok719:                                 ; preds = %check_next713, %check_next711, %check_next709, %check_next707, %check_next705, %check_next703, %check_next701, %check_type_ok694
  %ptradd720 = getelementptr inbounds i8, ptr %"introspect*698", i64 32, !dbg !4382
  %typeid.inner721 = load i64, ptr %ptradd720, align 8, !dbg !4382
  %neq722 = icmp ne i64 %typeid.inner721, ptrtoint (ptr @"$ct.void" to i64), !dbg !4382
  br i1 %neq722, label %if.then723, label %if.exit763, !dbg !4382

if.then723:                                       ; preds = %check_type_ok719
  call void @llvm.dbg.declare(metadata ptr %deref, metadata !4383, metadata !DIExpression()), !dbg !4385
  %428 = load ptr, ptr %pointer, align 8, !dbg !4386
  %checknull724 = icmp eq ptr %428, null, !dbg !4386
  %429 = call i1 @llvm.expect.i1(i1 %checknull724, i1 false), !dbg !4386
  br i1 %429, label %panic725, label %checkok729, !dbg !4386

checkok729:                                       ; preds = %if.then723
  %430 = load ptr, ptr %428, align 8
  store ptr %430, ptr %ptr, align 8
  %431 = load i64, ptr %inner, align 8
  store i64 %431, ptr %type, align 8
  %432 = load ptr, ptr %ptr, align 8, !dbg !4387
  %433 = load i64, ptr %type, align 8, !dbg !4390
  %434 = insertvalue %any undef, ptr %432, 0, !dbg !4390
  %435 = insertvalue %any %434, i64 %433, 1, !dbg !4390
  store %any %435, ptr %deref, align 8, !dbg !4390
  %436 = load %any, ptr %deref, align 8, !dbg !4391
  %437 = load ptr, ptr %self, align 8
  store %any %436, ptr %taddr731, align 8
  %438 = load [2 x i64], ptr %taddr731, align 8
  %439 = call i64 @std.io.Formatter.print_with_function(ptr %retparam730, ptr %437, [2 x i64] %438), !dbg !4392
  %not_err732 = icmp eq i64 %439, 0, !dbg !4392
  %440 = call i1 @llvm.expect.i1(i1 %not_err732, i1 true), !dbg !4392
  br i1 %440, label %after_check734, label %assign_optional733, !dbg !4392

assign_optional733:                               ; preds = %checkok729
  store i64 %439, ptr %n.f, align 8, !dbg !4392
  br label %after_assign735, !dbg !4392

after_check734:                                   ; preds = %checkok729
  %441 = load i64, ptr %retparam730, align 8, !dbg !4392
  store i64 %441, ptr %n, align 8, !dbg !4392
  store i64 0, ptr %n.f, align 8, !dbg !4392
  br label %after_assign735, !dbg !4392

after_assign735:                                  ; preds = %after_check734, %assign_optional733
  %load.err736 = load i64, ptr %n.f, align 8, !dbg !4393
  %result737 = icmp eq i64 %load.err736, 0, !dbg !4393
  br i1 %result737, label %if.then738, label %if.exit740, !dbg !4393

if.then738:                                       ; preds = %after_assign735
  %442 = load i64, ptr %n, align 8, !dbg !4394
  store i64 %442, ptr %0, align 8, !dbg !4394
  ret i64 0, !dbg !4394

if.exit740:                                       ; preds = %after_assign735
  call void @llvm.dbg.declare(metadata ptr %f742, metadata !4395, metadata !DIExpression()), !dbg !4397
  br label %testblock743, !dbg !4397

testblock743:                                     ; preds = %if.exit740
  %optval744 = load i64, ptr %n.f, align 8, !dbg !4399
  %not_err745 = icmp eq i64 %optval744, 0, !dbg !4399
  %443 = call i1 @llvm.expect.i1(i1 %not_err745, i1 true), !dbg !4399
  br i1 %443, label %after_check747, label %assign_optional746, !dbg !4399

assign_optional746:                               ; preds = %testblock743
  store i64 %optval744, ptr %f742, align 8, !dbg !4399
  br label %end_block748, !dbg !4399

after_check747:                                   ; preds = %testblock743
  store i64 0, ptr %f742, align 8, !dbg !4399
  br label %end_block748, !dbg !4399

end_block748:                                     ; preds = %after_check747, %assign_optional746
  %444 = load i64, ptr %f742, align 8, !dbg !4399
  %i2b749 = icmp ne i64 %444, 0, !dbg !4399
  br i1 %i2b749, label %if.then750, label %if.exit751, !dbg !4399

if.then750:                                       ; preds = %end_block748
  %445 = load i64, ptr %f742, align 8, !dbg !4400
  store i64 %445, ptr %blockret741, align 8, !dbg !4400
  br label %expr_block.exit752, !dbg !4400

if.exit751:                                       ; preds = %end_block748
  store i64 0, ptr %blockret741, align 8, !dbg !4401
  br label %expr_block.exit752, !dbg !4401

expr_block.exit752:                               ; preds = %if.exit751, %if.then750
  %446 = load i64, ptr %blockret741, align 8, !dbg !4401
  %neq753 = icmp ne i64 %446, ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !4398
  br i1 %neq753, label %if.then754, label %if.exit762, !dbg !4398

if.then754:                                       ; preds = %expr_block.exit752
  %optval756 = load i64, ptr %n.f, align 8, !dbg !4402
  %not_err757 = icmp eq i64 %optval756, 0, !dbg !4402
  %447 = call i1 @llvm.expect.i1(i1 %not_err757, i1 true), !dbg !4402
  br i1 %447, label %after_check759, label %assign_optional758, !dbg !4402

assign_optional758:                               ; preds = %if.then754
  store i64 %optval756, ptr %error_var755, align 8, !dbg !4402
  br label %guard_block760, !dbg !4402

after_check759:                                   ; preds = %if.then754
  br label %noerr_block761, !dbg !4402

guard_block760:                                   ; preds = %assign_optional758
  %448 = load i64, ptr %error_var755, align 8, !dbg !4402
  ret i64 %448, !dbg !4402

noerr_block761:                                   ; preds = %after_check759
  br label %if.exit762, !dbg !4402

if.exit762:                                       ; preds = %noerr_block761, %expr_block.exit752
  br label %if.exit763, !dbg !4402

if.exit763:                                       ; preds = %if.exit762, %check_type_ok719
  call void @llvm.dbg.declare(metadata ptr %flags764, metadata !4403, metadata !DIExpression()), !dbg !4404
  %449 = load ptr, ptr %self, align 8, !dbg !4405
  %ptradd765 = getelementptr inbounds i8, ptr %449, i64 16, !dbg !4405
  %450 = load i32, ptr %ptradd765, align 8, !dbg !4405
  store i32 %450, ptr %flags764, align 4, !dbg !4405
  call void @llvm.dbg.declare(metadata ptr %width766, metadata !4406, metadata !DIExpression()), !dbg !4407
  %451 = load ptr, ptr %self, align 8, !dbg !4408
  %ptradd767 = getelementptr inbounds i8, ptr %451, i64 16, !dbg !4408
  %ptradd768 = getelementptr inbounds i8, ptr %ptradd767, i64 4, !dbg !4408
  %452 = load i32, ptr %ptradd768, align 4, !dbg !4408
  store i32 %452, ptr %width766, align 4, !dbg !4408
  %453 = load ptr, ptr %self, align 8, !dbg !4409
  %ptradd769 = getelementptr inbounds i8, ptr %453, i64 16, !dbg !4409
  %ptradd770 = getelementptr inbounds i8, ptr %ptradd769, i64 4, !dbg !4409
  store i32 0, ptr %ptradd770, align 4, !dbg !4410
  %454 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.226, i64 2 }, ptr %taddr774, align 8
  %455 = load [2 x i64], ptr %taddr774, align 8
  %456 = call i64 @std.io.Formatter.out_substr(ptr %retparam773, ptr %454, [2 x i64] %455), !dbg !4411
  %not_err775 = icmp eq i64 %456, 0, !dbg !4411
  %457 = call i1 @llvm.expect.i1(i1 %not_err775, i1 true), !dbg !4411
  br i1 %457, label %after_check777, label %assign_optional776, !dbg !4411

assign_optional776:                               ; preds = %if.exit763
  store i64 %456, ptr %error_var772, align 8, !dbg !4411
  br label %guard_block778, !dbg !4411

after_check777:                                   ; preds = %if.exit763
  br label %noerr_block782, !dbg !4411

guard_block778:                                   ; preds = %assign_optional776
  %458 = load ptr, ptr %self, align 8, !dbg !4412
  %ptradd779 = getelementptr inbounds i8, ptr %458, i64 16, !dbg !4412
  %459 = load i32, ptr %flags764, align 4, !dbg !4414
  store i32 %459, ptr %ptradd779, align 8, !dbg !4414
  %460 = load ptr, ptr %self, align 8, !dbg !4415
  %ptradd780 = getelementptr inbounds i8, ptr %460, i64 16, !dbg !4415
  %ptradd781 = getelementptr inbounds i8, ptr %ptradd780, i64 4, !dbg !4415
  %461 = load i32, ptr %width766, align 4, !dbg !4416
  store i32 %461, ptr %ptradd781, align 4, !dbg !4416
  %462 = load i64, ptr %error_var772, align 8, !dbg !4416
  ret i64 %462, !dbg !4416

noerr_block782:                                   ; preds = %after_check777
  %463 = load i64, ptr %retparam773, align 8, !dbg !4416
  %464 = load ptr, ptr %self, align 8
  %465 = load [2 x i64], ptr %arg, align 8
  %466 = call i64 @std.io.Formatter.ntoa_any(ptr %retparam783, ptr %464, [2 x i64] %465, i32 16), !dbg !4417
  %not_err784 = icmp eq i64 %466, 0, !dbg !4417
  %467 = call i1 @llvm.expect.i1(i1 %not_err784, i1 true), !dbg !4417
  br i1 %467, label %after_check786, label %assign_optional785, !dbg !4417

assign_optional785:                               ; preds = %noerr_block782
  store i64 %466, ptr %reterr771, align 8, !dbg !4417
  br label %err_retblock790, !dbg !4417

after_check786:                                   ; preds = %noerr_block782
  %468 = load i64, ptr %retparam783, align 8, !dbg !4417
  %add = add i64 %463, %468, !dbg !4411
  %469 = load ptr, ptr %self, align 8, !dbg !4418
  %ptradd787 = getelementptr inbounds i8, ptr %469, i64 16, !dbg !4418
  %470 = load i32, ptr %flags764, align 4, !dbg !4420
  store i32 %470, ptr %ptradd787, align 8, !dbg !4420
  %471 = load ptr, ptr %self, align 8, !dbg !4421
  %ptradd788 = getelementptr inbounds i8, ptr %471, i64 16, !dbg !4421
  %ptradd789 = getelementptr inbounds i8, ptr %ptradd788, i64 4, !dbg !4421
  %472 = load i32, ptr %width766, align 4, !dbg !4422
  store i32 %472, ptr %ptradd789, align 4, !dbg !4422
  store i64 %add, ptr %0, align 8, !dbg !4422
  ret i64 0, !dbg !4422

err_retblock790:                                  ; preds = %assign_optional785
  %473 = load ptr, ptr %self, align 8, !dbg !4423
  %ptradd791 = getelementptr inbounds i8, ptr %473, i64 16, !dbg !4423
  %474 = load i32, ptr %flags764, align 4, !dbg !4425
  store i32 %474, ptr %ptradd791, align 8, !dbg !4425
  %475 = load ptr, ptr %self, align 8, !dbg !4426
  %ptradd792 = getelementptr inbounds i8, ptr %475, i64 16, !dbg !4426
  %ptradd793 = getelementptr inbounds i8, ptr %ptradd792, i64 4, !dbg !4426
  %476 = load i32, ptr %width766, align 4, !dbg !4427
  store i32 %476, ptr %ptradd793, align 4, !dbg !4427
  %477 = load i64, ptr %reterr771, align 8, !dbg !4427
  ret i64 %477, !dbg !4427

switch.case794:                                   ; preds = %switch.entry130
  call void @llvm.dbg.declare(metadata ptr %flags795, metadata !4428, metadata !DIExpression()), !dbg !4430
  %478 = load ptr, ptr %self, align 8, !dbg !4431
  %ptradd796 = getelementptr inbounds i8, ptr %478, i64 16, !dbg !4431
  %479 = load i32, ptr %ptradd796, align 8, !dbg !4431
  store i32 %479, ptr %flags795, align 4, !dbg !4431
  call void @llvm.dbg.declare(metadata ptr %width797, metadata !4432, metadata !DIExpression()), !dbg !4433
  %480 = load ptr, ptr %self, align 8, !dbg !4434
  %ptradd798 = getelementptr inbounds i8, ptr %480, i64 16, !dbg !4434
  %ptradd799 = getelementptr inbounds i8, ptr %ptradd798, i64 4, !dbg !4434
  %481 = load i32, ptr %ptradd799, align 4, !dbg !4434
  store i32 %481, ptr %width797, align 4, !dbg !4434
  %482 = load ptr, ptr %self, align 8, !dbg !4435
  %ptradd800 = getelementptr inbounds i8, ptr %482, i64 16, !dbg !4435
  store i32 0, ptr %ptradd800, align 8, !dbg !4435
  %483 = load ptr, ptr %self, align 8, !dbg !4436
  %ptradd801 = getelementptr inbounds i8, ptr %483, i64 16, !dbg !4436
  %ptradd802 = getelementptr inbounds i8, ptr %ptradd801, i64 4, !dbg !4436
  store i32 0, ptr %ptradd802, align 4, !dbg !4437
  call void @llvm.dbg.declare(metadata ptr %inner803, metadata !4438, metadata !DIExpression()), !dbg !4439
  %ptradd804 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4440
  %484 = load i64, ptr %ptradd804, align 8, !dbg !4440
  %"introspect*805" = inttoptr i64 %484 to ptr, !dbg !4440
  %typeid.kind806 = load i8, ptr %"introspect*805", align 8, !dbg !4440
  %eq807 = icmp eq i8 %typeid.kind806, 15, !dbg !4440
  br i1 %eq807, label %check_type_ok826, label %check_next808, !dbg !4440

check_next808:                                    ; preds = %switch.case794
  %eq809 = icmp eq i8 %typeid.kind806, 19, !dbg !4440
  br i1 %eq809, label %check_type_ok826, label %check_next810, !dbg !4440

check_next810:                                    ; preds = %check_next808
  %eq811 = icmp eq i8 %typeid.kind806, 17, !dbg !4440
  br i1 %eq811, label %check_type_ok826, label %check_next812, !dbg !4440

check_next812:                                    ; preds = %check_next810
  %eq813 = icmp eq i8 %typeid.kind806, 8, !dbg !4440
  br i1 %eq813, label %check_type_ok826, label %check_next814, !dbg !4440

check_next814:                                    ; preds = %check_next812
  %eq815 = icmp eq i8 %typeid.kind806, 16, !dbg !4440
  br i1 %eq815, label %check_type_ok826, label %check_next816, !dbg !4440

check_next816:                                    ; preds = %check_next814
  %eq817 = icmp eq i8 %typeid.kind806, 18, !dbg !4440
  br i1 %eq817, label %check_type_ok826, label %check_next818, !dbg !4440

check_next818:                                    ; preds = %check_next816
  %eq819 = icmp eq i8 %typeid.kind806, 14, !dbg !4440
  br i1 %eq819, label %check_type_ok826, label %check_next820, !dbg !4440

check_next820:                                    ; preds = %check_next818
  %eq821 = icmp eq i8 %typeid.kind806, 12, !dbg !4440
  br i1 %eq821, label %check_type_ok826, label %check_next822, !dbg !4440

check_next822:                                    ; preds = %check_next820
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr823, align 8
  %485 = load [2 x i64], ptr %taddr823, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr824, align 8
  %486 = load [2 x i64], ptr %taddr824, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr825, align 8
  %487 = load [2 x i64], ptr %taddr825, align 8
  %488 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %488([2 x i64] %485, [2 x i64] %486, [2 x i64] %487, i32 253), !dbg !4440
  unreachable, !dbg !4440

check_type_ok826:                                 ; preds = %check_next820, %check_next818, %check_next816, %check_next814, %check_next812, %check_next810, %check_next808, %switch.case794
  %ptradd827 = getelementptr inbounds i8, ptr %"introspect*805", i64 32, !dbg !4440
  %typeid.inner828 = load i64, ptr %ptradd827, align 8, !dbg !4440
  store i64 %typeid.inner828, ptr %inner803, align 8, !dbg !4440
  call void @llvm.dbg.declare(metadata ptr %size, metadata !4441, metadata !DIExpression()), !dbg !4442
  %489 = load i64, ptr %inner803, align 8, !dbg !4443
  %"introspect*829" = inttoptr i64 %489 to ptr, !dbg !4443
  %typeid.kind830 = load i8, ptr %"introspect*829", align 8, !dbg !4443
  %ptradd831 = getelementptr inbounds i8, ptr %"introspect*829", i64 24, !dbg !4443
  %typeid.size = load i64, ptr %ptradd831, align 8, !dbg !4443
  store i64 %typeid.size, ptr %size, align 8, !dbg !4443
  call void @llvm.dbg.declare(metadata ptr %alen, metadata !4444, metadata !DIExpression()), !dbg !4445
  %ptradd832 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4446
  %490 = load i64, ptr %ptradd832, align 8, !dbg !4446
  %"introspect*833" = inttoptr i64 %490 to ptr, !dbg !4446
  %typeid.kind834 = load i8, ptr %"introspect*833", align 8, !dbg !4446
  %eq835 = icmp eq i8 %typeid.kind834, 15, !dbg !4446
  br i1 %eq835, label %check_type_ok846, label %check_next836, !dbg !4446

check_next836:                                    ; preds = %check_type_ok826
  %eq837 = icmp eq i8 %typeid.kind834, 17, !dbg !4446
  br i1 %eq837, label %check_type_ok846, label %check_next838, !dbg !4446

check_next838:                                    ; preds = %check_next836
  %eq839 = icmp eq i8 %typeid.kind834, 8, !dbg !4446
  br i1 %eq839, label %check_type_ok846, label %check_next840, !dbg !4446

check_next840:                                    ; preds = %check_next838
  %eq841 = icmp eq i8 %typeid.kind834, 16, !dbg !4446
  br i1 %eq841, label %check_type_ok846, label %check_next842, !dbg !4446

check_next842:                                    ; preds = %check_next840
  store %"char[]" { ptr @.panic_msg.227, i64 43 }, ptr %taddr843, align 8
  %491 = load [2 x i64], ptr %taddr843, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr844, align 8
  %492 = load [2 x i64], ptr %taddr844, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr845, align 8
  %493 = load [2 x i64], ptr %taddr845, align 8
  %494 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %494([2 x i64] %491, [2 x i64] %492, [2 x i64] %493, i32 255), !dbg !4446
  unreachable, !dbg !4446

check_type_ok846:                                 ; preds = %check_next840, %check_next838, %check_next836, %check_type_ok826
  %ptradd847 = getelementptr inbounds i8, ptr %"introspect*833", i64 40, !dbg !4446
  %typeid.len = load i64, ptr %ptradd847, align 8, !dbg !4446
  store i64 %typeid.len, ptr %alen, align 8, !dbg !4446
  call void @llvm.dbg.declare(metadata ptr %ptr848, metadata !4447, metadata !DIExpression()), !dbg !4448
  %495 = load ptr, ptr %arg, align 8, !dbg !4449
  store ptr %495, ptr %ptr848, align 8, !dbg !4449
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4450, metadata !DIExpression()), !dbg !4451
  %496 = load ptr, ptr %self, align 8
  %497 = call i64 @std.io.Formatter.out(ptr %retparam850, ptr %496, i8 91), !dbg !4452
  %not_err851 = icmp eq i64 %497, 0, !dbg !4452
  %498 = call i1 @llvm.expect.i1(i1 %not_err851, i1 true), !dbg !4452
  br i1 %498, label %after_check853, label %assign_optional852, !dbg !4452

assign_optional852:                               ; preds = %check_type_ok846
  store i64 %497, ptr %error_var849, align 8, !dbg !4452
  br label %guard_block854, !dbg !4452

after_check853:                                   ; preds = %check_type_ok846
  br label %noerr_block858, !dbg !4452

guard_block854:                                   ; preds = %assign_optional852
  %499 = load ptr, ptr %self, align 8, !dbg !4453
  %ptradd855 = getelementptr inbounds i8, ptr %499, i64 16, !dbg !4453
  %500 = load i32, ptr %flags795, align 4, !dbg !4455
  store i32 %500, ptr %ptradd855, align 8, !dbg !4455
  %501 = load ptr, ptr %self, align 8, !dbg !4456
  %ptradd856 = getelementptr inbounds i8, ptr %501, i64 16, !dbg !4456
  %ptradd857 = getelementptr inbounds i8, ptr %ptradd856, i64 4, !dbg !4456
  %502 = load i32, ptr %width797, align 4, !dbg !4457
  store i32 %502, ptr %ptradd857, align 4, !dbg !4457
  %503 = load i64, ptr %error_var849, align 8, !dbg !4457
  ret i64 %503, !dbg !4457

noerr_block858:                                   ; preds = %after_check853
  %504 = load i64, ptr %retparam850, align 8, !dbg !4457
  store i64 %504, ptr %len, align 8, !dbg !4457
  call void @llvm.dbg.declare(metadata ptr %i859, metadata !4458, metadata !DIExpression()), !dbg !4460
  store i64 0, ptr %i859, align 8, !dbg !4461
  br label %loop.cond, !dbg !4461

loop.cond:                                        ; preds = %noerr_block888, %noerr_block858
  %505 = load i64, ptr %i859, align 8, !dbg !4462
  %506 = load i64, ptr %alen, align 8, !dbg !4463
  %lt860 = icmp ult i64 %505, %506, !dbg !4462
  br i1 %lt860, label %loop.body, label %loop.exit, !dbg !4462

loop.body:                                        ; preds = %loop.cond
  %507 = load i64, ptr %i859, align 8, !dbg !4464
  %neq861 = icmp ne i64 0, %507, !dbg !4464
  br i1 %neq861, label %if.then862, label %if.exit875, !dbg !4464

if.then862:                                       ; preds = %loop.body
  %508 = load i64, ptr %len, align 8, !dbg !4466
  %509 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.228, i64 2 }, ptr %taddr865, align 8
  %510 = load [2 x i64], ptr %taddr865, align 8
  %511 = call i64 @std.io.Formatter.out_substr(ptr %retparam864, ptr %509, [2 x i64] %510), !dbg !4467
  %not_err866 = icmp eq i64 %511, 0, !dbg !4467
  %512 = call i1 @llvm.expect.i1(i1 %not_err866, i1 true), !dbg !4467
  br i1 %512, label %after_check868, label %assign_optional867, !dbg !4467

assign_optional867:                               ; preds = %if.then862
  store i64 %511, ptr %error_var863, align 8, !dbg !4467
  br label %guard_block869, !dbg !4467

after_check868:                                   ; preds = %if.then862
  br label %noerr_block873, !dbg !4467

guard_block869:                                   ; preds = %assign_optional867
  %513 = load ptr, ptr %self, align 8, !dbg !4468
  %ptradd870 = getelementptr inbounds i8, ptr %513, i64 16, !dbg !4468
  %514 = load i32, ptr %flags795, align 4, !dbg !4470
  store i32 %514, ptr %ptradd870, align 8, !dbg !4470
  %515 = load ptr, ptr %self, align 8, !dbg !4471
  %ptradd871 = getelementptr inbounds i8, ptr %515, i64 16, !dbg !4471
  %ptradd872 = getelementptr inbounds i8, ptr %ptradd871, i64 4, !dbg !4471
  %516 = load i32, ptr %width797, align 4, !dbg !4472
  store i32 %516, ptr %ptradd872, align 4, !dbg !4472
  %517 = load i64, ptr %error_var863, align 8, !dbg !4472
  ret i64 %517, !dbg !4472

noerr_block873:                                   ; preds = %after_check868
  %518 = load i64, ptr %retparam864, align 8, !dbg !4472
  %add874 = add i64 %508, %518, !dbg !4466
  store i64 %add874, ptr %len, align 8, !dbg !4466
  br label %if.exit875, !dbg !4466

if.exit875:                                       ; preds = %noerr_block873, %loop.body
  %519 = load i64, ptr %len, align 8, !dbg !4473
  %520 = load ptr, ptr %ptr848, align 8
  store ptr %520, ptr %ptr877, align 8
  %521 = load i64, ptr %inner803, align 8
  store i64 %521, ptr %type878, align 8
  %522 = load ptr, ptr %ptr877, align 8, !dbg !4474
  %523 = load i64, ptr %type878, align 8, !dbg !4477
  %524 = insertvalue %any undef, ptr %522, 0, !dbg !4477
  %525 = insertvalue %any %524, i64 %523, 1, !dbg !4477
  %526 = load ptr, ptr %self, align 8
  store %any %525, ptr %taddr880, align 8
  %527 = load [2 x i64], ptr %taddr880, align 8
  %528 = call i64 @std.io.Formatter.out_str(ptr %retparam879, ptr %526, [2 x i64] %527), !dbg !4478
  %not_err881 = icmp eq i64 %528, 0, !dbg !4478
  %529 = call i1 @llvm.expect.i1(i1 %not_err881, i1 true), !dbg !4478
  br i1 %529, label %after_check883, label %assign_optional882, !dbg !4478

assign_optional882:                               ; preds = %if.exit875
  store i64 %528, ptr %error_var876, align 8, !dbg !4478
  br label %guard_block884, !dbg !4478

after_check883:                                   ; preds = %if.exit875
  br label %noerr_block888, !dbg !4478

guard_block884:                                   ; preds = %assign_optional882
  %530 = load ptr, ptr %self, align 8, !dbg !4479
  %ptradd885 = getelementptr inbounds i8, ptr %530, i64 16, !dbg !4479
  %531 = load i32, ptr %flags795, align 4, !dbg !4481
  store i32 %531, ptr %ptradd885, align 8, !dbg !4481
  %532 = load ptr, ptr %self, align 8, !dbg !4482
  %ptradd886 = getelementptr inbounds i8, ptr %532, i64 16, !dbg !4482
  %ptradd887 = getelementptr inbounds i8, ptr %ptradd886, i64 4, !dbg !4482
  %533 = load i32, ptr %width797, align 4, !dbg !4483
  store i32 %533, ptr %ptradd887, align 4, !dbg !4483
  %534 = load i64, ptr %error_var876, align 8, !dbg !4483
  ret i64 %534, !dbg !4483

noerr_block888:                                   ; preds = %after_check883
  %535 = load i64, ptr %retparam879, align 8, !dbg !4483
  %add889 = add i64 %519, %535, !dbg !4473
  store i64 %add889, ptr %len, align 8, !dbg !4473
  %536 = load ptr, ptr %ptr848, align 8, !dbg !4484
  %537 = load i64, ptr %size, align 8, !dbg !4485
  %ptradd_any = getelementptr i8, ptr %536, i64 %537, !dbg !4484
  store ptr %ptradd_any, ptr %ptr848, align 8, !dbg !4484
  %538 = load i64, ptr %i859, align 8, !dbg !4486
  %add890 = add i64 %538, 1, !dbg !4486
  store i64 %add890, ptr %i859, align 8, !dbg !4486
  br label %loop.cond, !dbg !4486

loop.exit:                                        ; preds = %loop.cond
  %539 = load i64, ptr %len, align 8, !dbg !4487
  %540 = load ptr, ptr %self, align 8
  %541 = call i64 @std.io.Formatter.out(ptr %retparam892, ptr %540, i8 93), !dbg !4488
  %not_err893 = icmp eq i64 %541, 0, !dbg !4488
  %542 = call i1 @llvm.expect.i1(i1 %not_err893, i1 true), !dbg !4488
  br i1 %542, label %after_check895, label %assign_optional894, !dbg !4488

assign_optional894:                               ; preds = %loop.exit
  store i64 %541, ptr %error_var891, align 8, !dbg !4488
  br label %guard_block896, !dbg !4488

after_check895:                                   ; preds = %loop.exit
  br label %noerr_block900, !dbg !4488

guard_block896:                                   ; preds = %assign_optional894
  %543 = load ptr, ptr %self, align 8, !dbg !4489
  %ptradd897 = getelementptr inbounds i8, ptr %543, i64 16, !dbg !4489
  %544 = load i32, ptr %flags795, align 4, !dbg !4491
  store i32 %544, ptr %ptradd897, align 8, !dbg !4491
  %545 = load ptr, ptr %self, align 8, !dbg !4492
  %ptradd898 = getelementptr inbounds i8, ptr %545, i64 16, !dbg !4492
  %ptradd899 = getelementptr inbounds i8, ptr %ptradd898, i64 4, !dbg !4492
  %546 = load i32, ptr %width797, align 4, !dbg !4493
  store i32 %546, ptr %ptradd899, align 4, !dbg !4493
  %547 = load i64, ptr %error_var891, align 8, !dbg !4493
  ret i64 %547, !dbg !4493

noerr_block900:                                   ; preds = %after_check895
  %548 = load i64, ptr %retparam892, align 8, !dbg !4493
  %add901 = add i64 %539, %548, !dbg !4487
  store i64 %add901, ptr %len, align 8, !dbg !4487
  %549 = load i64, ptr %len, align 8, !dbg !4494
  %550 = load ptr, ptr %self, align 8, !dbg !4495
  %ptradd903 = getelementptr inbounds i8, ptr %550, i64 16, !dbg !4495
  %551 = load i32, ptr %flags795, align 4, !dbg !4497
  store i32 %551, ptr %ptradd903, align 8, !dbg !4497
  %552 = load ptr, ptr %self, align 8, !dbg !4498
  %ptradd904 = getelementptr inbounds i8, ptr %552, i64 16, !dbg !4498
  %ptradd905 = getelementptr inbounds i8, ptr %ptradd904, i64 4, !dbg !4498
  %553 = load i32, ptr %width797, align 4, !dbg !4499
  store i32 %553, ptr %ptradd905, align 4, !dbg !4499
  store i64 %549, ptr %0, align 8, !dbg !4499
  ret i64 0, !dbg !4499

switch.case906:                                   ; preds = %switch.entry130
  call void @llvm.dbg.declare(metadata ptr %flags907, metadata !4500, metadata !DIExpression()), !dbg !4502
  %554 = load ptr, ptr %self, align 8, !dbg !4503
  %ptradd908 = getelementptr inbounds i8, ptr %554, i64 16, !dbg !4503
  %555 = load i32, ptr %ptradd908, align 8, !dbg !4503
  store i32 %555, ptr %flags907, align 4, !dbg !4503
  call void @llvm.dbg.declare(metadata ptr %width909, metadata !4504, metadata !DIExpression()), !dbg !4505
  %556 = load ptr, ptr %self, align 8, !dbg !4506
  %ptradd910 = getelementptr inbounds i8, ptr %556, i64 16, !dbg !4506
  %ptradd911 = getelementptr inbounds i8, ptr %ptradd910, i64 4, !dbg !4506
  %557 = load i32, ptr %ptradd911, align 4, !dbg !4506
  store i32 %557, ptr %width909, align 4, !dbg !4506
  %558 = load ptr, ptr %self, align 8, !dbg !4507
  %ptradd912 = getelementptr inbounds i8, ptr %558, i64 16, !dbg !4507
  store i32 0, ptr %ptradd912, align 8, !dbg !4507
  %559 = load ptr, ptr %self, align 8, !dbg !4508
  %ptradd913 = getelementptr inbounds i8, ptr %559, i64 16, !dbg !4508
  %ptradd914 = getelementptr inbounds i8, ptr %ptradd913, i64 4, !dbg !4508
  store i32 0, ptr %ptradd914, align 4, !dbg !4509
  call void @llvm.dbg.declare(metadata ptr %inner915, metadata !4510, metadata !DIExpression()), !dbg !4511
  %ptradd916 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4512
  %560 = load i64, ptr %ptradd916, align 8, !dbg !4512
  %"introspect*917" = inttoptr i64 %560 to ptr, !dbg !4512
  %typeid.kind918 = load i8, ptr %"introspect*917", align 8, !dbg !4512
  %eq919 = icmp eq i8 %typeid.kind918, 15, !dbg !4512
  br i1 %eq919, label %check_type_ok938, label %check_next920, !dbg !4512

check_next920:                                    ; preds = %switch.case906
  %eq921 = icmp eq i8 %typeid.kind918, 19, !dbg !4512
  br i1 %eq921, label %check_type_ok938, label %check_next922, !dbg !4512

check_next922:                                    ; preds = %check_next920
  %eq923 = icmp eq i8 %typeid.kind918, 17, !dbg !4512
  br i1 %eq923, label %check_type_ok938, label %check_next924, !dbg !4512

check_next924:                                    ; preds = %check_next922
  %eq925 = icmp eq i8 %typeid.kind918, 8, !dbg !4512
  br i1 %eq925, label %check_type_ok938, label %check_next926, !dbg !4512

check_next926:                                    ; preds = %check_next924
  %eq927 = icmp eq i8 %typeid.kind918, 16, !dbg !4512
  br i1 %eq927, label %check_type_ok938, label %check_next928, !dbg !4512

check_next928:                                    ; preds = %check_next926
  %eq929 = icmp eq i8 %typeid.kind918, 18, !dbg !4512
  br i1 %eq929, label %check_type_ok938, label %check_next930, !dbg !4512

check_next930:                                    ; preds = %check_next928
  %eq931 = icmp eq i8 %typeid.kind918, 14, !dbg !4512
  br i1 %eq931, label %check_type_ok938, label %check_next932, !dbg !4512

check_next932:                                    ; preds = %check_next930
  %eq933 = icmp eq i8 %typeid.kind918, 12, !dbg !4512
  br i1 %eq933, label %check_type_ok938, label %check_next934, !dbg !4512

check_next934:                                    ; preds = %check_next932
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr935, align 8
  %561 = load [2 x i64], ptr %taddr935, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr936, align 8
  %562 = load [2 x i64], ptr %taddr936, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr937, align 8
  %563 = load [2 x i64], ptr %taddr937, align 8
  %564 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %564([2 x i64] %561, [2 x i64] %562, [2 x i64] %563, i32 278), !dbg !4512
  unreachable, !dbg !4512

check_type_ok938:                                 ; preds = %check_next932, %check_next930, %check_next928, %check_next926, %check_next924, %check_next922, %check_next920, %switch.case906
  %ptradd939 = getelementptr inbounds i8, ptr %"introspect*917", i64 32, !dbg !4512
  %typeid.inner940 = load i64, ptr %ptradd939, align 8, !dbg !4512
  store i64 %typeid.inner940, ptr %inner915, align 8, !dbg !4512
  call void @llvm.dbg.declare(metadata ptr %size941, metadata !4513, metadata !DIExpression()), !dbg !4514
  %565 = load i64, ptr %inner915, align 8, !dbg !4515
  %"introspect*942" = inttoptr i64 %565 to ptr, !dbg !4515
  %typeid.kind943 = load i8, ptr %"introspect*942", align 8, !dbg !4515
  %ptradd944 = getelementptr inbounds i8, ptr %"introspect*942", i64 24, !dbg !4515
  %typeid.size945 = load i64, ptr %ptradd944, align 8, !dbg !4515
  store i64 %typeid.size945, ptr %size941, align 8, !dbg !4515
  call void @llvm.dbg.declare(metadata ptr %vlen, metadata !4516, metadata !DIExpression()), !dbg !4517
  %ptradd946 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4518
  %566 = load i64, ptr %ptradd946, align 8, !dbg !4518
  %"introspect*947" = inttoptr i64 %566 to ptr, !dbg !4518
  %typeid.kind948 = load i8, ptr %"introspect*947", align 8, !dbg !4518
  %eq949 = icmp eq i8 %typeid.kind948, 15, !dbg !4518
  br i1 %eq949, label %check_type_ok960, label %check_next950, !dbg !4518

check_next950:                                    ; preds = %check_type_ok938
  %eq951 = icmp eq i8 %typeid.kind948, 17, !dbg !4518
  br i1 %eq951, label %check_type_ok960, label %check_next952, !dbg !4518

check_next952:                                    ; preds = %check_next950
  %eq953 = icmp eq i8 %typeid.kind948, 8, !dbg !4518
  br i1 %eq953, label %check_type_ok960, label %check_next954, !dbg !4518

check_next954:                                    ; preds = %check_next952
  %eq955 = icmp eq i8 %typeid.kind948, 16, !dbg !4518
  br i1 %eq955, label %check_type_ok960, label %check_next956, !dbg !4518

check_next956:                                    ; preds = %check_next954
  store %"char[]" { ptr @.panic_msg.227, i64 43 }, ptr %taddr957, align 8
  %567 = load [2 x i64], ptr %taddr957, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr958, align 8
  %568 = load [2 x i64], ptr %taddr958, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr959, align 8
  %569 = load [2 x i64], ptr %taddr959, align 8
  %570 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %570([2 x i64] %567, [2 x i64] %568, [2 x i64] %569, i32 280), !dbg !4518
  unreachable, !dbg !4518

check_type_ok960:                                 ; preds = %check_next954, %check_next952, %check_next950, %check_type_ok938
  %ptradd961 = getelementptr inbounds i8, ptr %"introspect*947", i64 40, !dbg !4518
  %typeid.len962 = load i64, ptr %ptradd961, align 8, !dbg !4518
  store i64 %typeid.len962, ptr %vlen, align 8, !dbg !4518
  call void @llvm.dbg.declare(metadata ptr %ptr963, metadata !4519, metadata !DIExpression()), !dbg !4520
  %571 = load ptr, ptr %arg, align 8, !dbg !4521
  store ptr %571, ptr %ptr963, align 8, !dbg !4521
  call void @llvm.dbg.declare(metadata ptr %len964, metadata !4522, metadata !DIExpression()), !dbg !4523
  %572 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.229, i64 2 }, ptr %taddr967, align 8
  %573 = load [2 x i64], ptr %taddr967, align 8
  %574 = call i64 @std.io.Formatter.out_substr(ptr %retparam966, ptr %572, [2 x i64] %573), !dbg !4524
  %not_err968 = icmp eq i64 %574, 0, !dbg !4524
  %575 = call i1 @llvm.expect.i1(i1 %not_err968, i1 true), !dbg !4524
  br i1 %575, label %after_check970, label %assign_optional969, !dbg !4524

assign_optional969:                               ; preds = %check_type_ok960
  store i64 %574, ptr %error_var965, align 8, !dbg !4524
  br label %guard_block971, !dbg !4524

after_check970:                                   ; preds = %check_type_ok960
  br label %noerr_block975, !dbg !4524

guard_block971:                                   ; preds = %assign_optional969
  %576 = load ptr, ptr %self, align 8, !dbg !4525
  %ptradd972 = getelementptr inbounds i8, ptr %576, i64 16, !dbg !4525
  %577 = load i32, ptr %flags907, align 4, !dbg !4527
  store i32 %577, ptr %ptradd972, align 8, !dbg !4527
  %578 = load ptr, ptr %self, align 8, !dbg !4528
  %ptradd973 = getelementptr inbounds i8, ptr %578, i64 16, !dbg !4528
  %ptradd974 = getelementptr inbounds i8, ptr %ptradd973, i64 4, !dbg !4528
  %579 = load i32, ptr %width909, align 4, !dbg !4529
  store i32 %579, ptr %ptradd974, align 4, !dbg !4529
  %580 = load i64, ptr %error_var965, align 8, !dbg !4529
  ret i64 %580, !dbg !4529

noerr_block975:                                   ; preds = %after_check970
  %581 = load i64, ptr %retparam966, align 8, !dbg !4529
  store i64 %581, ptr %len964, align 8, !dbg !4529
  call void @llvm.dbg.declare(metadata ptr %i976, metadata !4530, metadata !DIExpression()), !dbg !4532
  store i64 0, ptr %i976, align 8, !dbg !4533
  br label %loop.cond977, !dbg !4533

loop.cond977:                                     ; preds = %noerr_block1007, %noerr_block975
  %582 = load i64, ptr %i976, align 8, !dbg !4534
  %583 = load i64, ptr %vlen, align 8, !dbg !4535
  %lt978 = icmp ult i64 %582, %583, !dbg !4534
  br i1 %lt978, label %loop.body979, label %loop.exit1011, !dbg !4534

loop.body979:                                     ; preds = %loop.cond977
  %584 = load i64, ptr %i976, align 8, !dbg !4536
  %neq980 = icmp ne i64 0, %584, !dbg !4536
  br i1 %neq980, label %if.then981, label %if.exit994, !dbg !4536

if.then981:                                       ; preds = %loop.body979
  %585 = load i64, ptr %len964, align 8, !dbg !4538
  %586 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.230, i64 2 }, ptr %taddr984, align 8
  %587 = load [2 x i64], ptr %taddr984, align 8
  %588 = call i64 @std.io.Formatter.out_substr(ptr %retparam983, ptr %586, [2 x i64] %587), !dbg !4539
  %not_err985 = icmp eq i64 %588, 0, !dbg !4539
  %589 = call i1 @llvm.expect.i1(i1 %not_err985, i1 true), !dbg !4539
  br i1 %589, label %after_check987, label %assign_optional986, !dbg !4539

assign_optional986:                               ; preds = %if.then981
  store i64 %588, ptr %error_var982, align 8, !dbg !4539
  br label %guard_block988, !dbg !4539

after_check987:                                   ; preds = %if.then981
  br label %noerr_block992, !dbg !4539

guard_block988:                                   ; preds = %assign_optional986
  %590 = load ptr, ptr %self, align 8, !dbg !4540
  %ptradd989 = getelementptr inbounds i8, ptr %590, i64 16, !dbg !4540
  %591 = load i32, ptr %flags907, align 4, !dbg !4542
  store i32 %591, ptr %ptradd989, align 8, !dbg !4542
  %592 = load ptr, ptr %self, align 8, !dbg !4543
  %ptradd990 = getelementptr inbounds i8, ptr %592, i64 16, !dbg !4543
  %ptradd991 = getelementptr inbounds i8, ptr %ptradd990, i64 4, !dbg !4543
  %593 = load i32, ptr %width909, align 4, !dbg !4544
  store i32 %593, ptr %ptradd991, align 4, !dbg !4544
  %594 = load i64, ptr %error_var982, align 8, !dbg !4544
  ret i64 %594, !dbg !4544

noerr_block992:                                   ; preds = %after_check987
  %595 = load i64, ptr %retparam983, align 8, !dbg !4544
  %add993 = add i64 %585, %595, !dbg !4538
  store i64 %add993, ptr %len964, align 8, !dbg !4538
  br label %if.exit994, !dbg !4538

if.exit994:                                       ; preds = %noerr_block992, %loop.body979
  %596 = load i64, ptr %len964, align 8, !dbg !4545
  %597 = load ptr, ptr %ptr963, align 8
  store ptr %597, ptr %ptr996, align 8
  %598 = load i64, ptr %inner915, align 8
  store i64 %598, ptr %type997, align 8
  %599 = load ptr, ptr %ptr996, align 8, !dbg !4546
  %600 = load i64, ptr %type997, align 8, !dbg !4549
  %601 = insertvalue %any undef, ptr %599, 0, !dbg !4549
  %602 = insertvalue %any %601, i64 %600, 1, !dbg !4549
  %603 = load ptr, ptr %self, align 8
  store %any %602, ptr %taddr999, align 8
  %604 = load [2 x i64], ptr %taddr999, align 8
  %605 = call i64 @std.io.Formatter.out_str(ptr %retparam998, ptr %603, [2 x i64] %604), !dbg !4550
  %not_err1000 = icmp eq i64 %605, 0, !dbg !4550
  %606 = call i1 @llvm.expect.i1(i1 %not_err1000, i1 true), !dbg !4550
  br i1 %606, label %after_check1002, label %assign_optional1001, !dbg !4550

assign_optional1001:                              ; preds = %if.exit994
  store i64 %605, ptr %error_var995, align 8, !dbg !4550
  br label %guard_block1003, !dbg !4550

after_check1002:                                  ; preds = %if.exit994
  br label %noerr_block1007, !dbg !4550

guard_block1003:                                  ; preds = %assign_optional1001
  %607 = load ptr, ptr %self, align 8, !dbg !4551
  %ptradd1004 = getelementptr inbounds i8, ptr %607, i64 16, !dbg !4551
  %608 = load i32, ptr %flags907, align 4, !dbg !4553
  store i32 %608, ptr %ptradd1004, align 8, !dbg !4553
  %609 = load ptr, ptr %self, align 8, !dbg !4554
  %ptradd1005 = getelementptr inbounds i8, ptr %609, i64 16, !dbg !4554
  %ptradd1006 = getelementptr inbounds i8, ptr %ptradd1005, i64 4, !dbg !4554
  %610 = load i32, ptr %width909, align 4, !dbg !4555
  store i32 %610, ptr %ptradd1006, align 4, !dbg !4555
  %611 = load i64, ptr %error_var995, align 8, !dbg !4555
  ret i64 %611, !dbg !4555

noerr_block1007:                                  ; preds = %after_check1002
  %612 = load i64, ptr %retparam998, align 8, !dbg !4555
  %add1008 = add i64 %596, %612, !dbg !4545
  store i64 %add1008, ptr %len964, align 8, !dbg !4545
  %613 = load ptr, ptr %ptr963, align 8, !dbg !4556
  %614 = load i64, ptr %size941, align 8, !dbg !4557
  %ptradd_any1009 = getelementptr i8, ptr %613, i64 %614, !dbg !4556
  store ptr %ptradd_any1009, ptr %ptr963, align 8, !dbg !4556
  %615 = load i64, ptr %i976, align 8, !dbg !4558
  %add1010 = add i64 %615, 1, !dbg !4558
  store i64 %add1010, ptr %i976, align 8, !dbg !4558
  br label %loop.cond977, !dbg !4558

loop.exit1011:                                    ; preds = %loop.cond977
  %616 = load i64, ptr %len964, align 8, !dbg !4559
  %617 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.231, i64 2 }, ptr %taddr1014, align 8
  %618 = load [2 x i64], ptr %taddr1014, align 8
  %619 = call i64 @std.io.Formatter.out_substr(ptr %retparam1013, ptr %617, [2 x i64] %618), !dbg !4560
  %not_err1015 = icmp eq i64 %619, 0, !dbg !4560
  %620 = call i1 @llvm.expect.i1(i1 %not_err1015, i1 true), !dbg !4560
  br i1 %620, label %after_check1017, label %assign_optional1016, !dbg !4560

assign_optional1016:                              ; preds = %loop.exit1011
  store i64 %619, ptr %error_var1012, align 8, !dbg !4560
  br label %guard_block1018, !dbg !4560

after_check1017:                                  ; preds = %loop.exit1011
  br label %noerr_block1022, !dbg !4560

guard_block1018:                                  ; preds = %assign_optional1016
  %621 = load ptr, ptr %self, align 8, !dbg !4561
  %ptradd1019 = getelementptr inbounds i8, ptr %621, i64 16, !dbg !4561
  %622 = load i32, ptr %flags907, align 4, !dbg !4563
  store i32 %622, ptr %ptradd1019, align 8, !dbg !4563
  %623 = load ptr, ptr %self, align 8, !dbg !4564
  %ptradd1020 = getelementptr inbounds i8, ptr %623, i64 16, !dbg !4564
  %ptradd1021 = getelementptr inbounds i8, ptr %ptradd1020, i64 4, !dbg !4564
  %624 = load i32, ptr %width909, align 4, !dbg !4565
  store i32 %624, ptr %ptradd1021, align 4, !dbg !4565
  %625 = load i64, ptr %error_var1012, align 8, !dbg !4565
  ret i64 %625, !dbg !4565

noerr_block1022:                                  ; preds = %after_check1017
  %626 = load i64, ptr %retparam1013, align 8, !dbg !4565
  %add1023 = add i64 %616, %626, !dbg !4559
  store i64 %add1023, ptr %len964, align 8, !dbg !4559
  %627 = load i64, ptr %len964, align 8, !dbg !4566
  %628 = load ptr, ptr %self, align 8, !dbg !4567
  %ptradd1025 = getelementptr inbounds i8, ptr %628, i64 16, !dbg !4567
  %629 = load i32, ptr %flags907, align 4, !dbg !4569
  store i32 %629, ptr %ptradd1025, align 8, !dbg !4569
  %630 = load ptr, ptr %self, align 8, !dbg !4570
  %ptradd1026 = getelementptr inbounds i8, ptr %630, i64 16, !dbg !4570
  %ptradd1027 = getelementptr inbounds i8, ptr %ptradd1026, i64 4, !dbg !4570
  %631 = load i32, ptr %width909, align 4, !dbg !4571
  store i32 %631, ptr %ptradd1027, align 4, !dbg !4571
  store i64 %627, ptr %0, align 8, !dbg !4571
  ret i64 0, !dbg !4571

switch.case1028:                                  ; preds = %switch.entry130
  call void @llvm.dbg.declare(metadata ptr %inner1029, metadata !4572, metadata !DIExpression()), !dbg !4574
  %ptradd1030 = getelementptr inbounds i8, ptr %arg, i64 8, !dbg !4575
  %632 = load i64, ptr %ptradd1030, align 8, !dbg !4575
  %"introspect*1031" = inttoptr i64 %632 to ptr, !dbg !4575
  %typeid.kind1032 = load i8, ptr %"introspect*1031", align 8, !dbg !4575
  %eq1033 = icmp eq i8 %typeid.kind1032, 15, !dbg !4575
  br i1 %eq1033, label %check_type_ok1052, label %check_next1034, !dbg !4575

check_next1034:                                   ; preds = %switch.case1028
  %eq1035 = icmp eq i8 %typeid.kind1032, 19, !dbg !4575
  br i1 %eq1035, label %check_type_ok1052, label %check_next1036, !dbg !4575

check_next1036:                                   ; preds = %check_next1034
  %eq1037 = icmp eq i8 %typeid.kind1032, 17, !dbg !4575
  br i1 %eq1037, label %check_type_ok1052, label %check_next1038, !dbg !4575

check_next1038:                                   ; preds = %check_next1036
  %eq1039 = icmp eq i8 %typeid.kind1032, 8, !dbg !4575
  br i1 %eq1039, label %check_type_ok1052, label %check_next1040, !dbg !4575

check_next1040:                                   ; preds = %check_next1038
  %eq1041 = icmp eq i8 %typeid.kind1032, 16, !dbg !4575
  br i1 %eq1041, label %check_type_ok1052, label %check_next1042, !dbg !4575

check_next1042:                                   ; preds = %check_next1040
  %eq1043 = icmp eq i8 %typeid.kind1032, 18, !dbg !4575
  br i1 %eq1043, label %check_type_ok1052, label %check_next1044, !dbg !4575

check_next1044:                                   ; preds = %check_next1042
  %eq1045 = icmp eq i8 %typeid.kind1032, 14, !dbg !4575
  br i1 %eq1045, label %check_type_ok1052, label %check_next1046, !dbg !4575

check_next1046:                                   ; preds = %check_next1044
  %eq1047 = icmp eq i8 %typeid.kind1032, 12, !dbg !4575
  br i1 %eq1047, label %check_type_ok1052, label %check_next1048, !dbg !4575

check_next1048:                                   ; preds = %check_next1046
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr1049, align 8
  %633 = load [2 x i64], ptr %taddr1049, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1050, align 8
  %634 = load [2 x i64], ptr %taddr1050, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr1051, align 8
  %635 = load [2 x i64], ptr %taddr1051, align 8
  %636 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %636([2 x i64] %633, [2 x i64] %634, [2 x i64] %635, i32 294), !dbg !4575
  unreachable, !dbg !4575

check_type_ok1052:                                ; preds = %check_next1046, %check_next1044, %check_next1042, %check_next1040, %check_next1038, %check_next1036, %check_next1034, %switch.case1028
  %ptradd1053 = getelementptr inbounds i8, ptr %"introspect*1031", i64 32, !dbg !4575
  %typeid.inner1054 = load i64, ptr %ptradd1053, align 8, !dbg !4575
  store i64 %typeid.inner1054, ptr %inner1029, align 8, !dbg !4575
  %637 = load i64, ptr %inner1029, align 8, !dbg !4576
  %eq1055 = icmp eq i64 %637, ptrtoint (ptr @"$ct.void" to i64), !dbg !4576
  br i1 %eq1055, label %if.then1056, label %if.exit1057, !dbg !4576

if.then1056:                                      ; preds = %check_type_ok1052
  store i64 ptrtoint (ptr @"$ct.char" to i64), ptr %inner1029, align 8, !dbg !4577
  br label %if.exit1057, !dbg !4577

if.exit1057:                                      ; preds = %if.then1056, %check_type_ok1052
  call void @llvm.dbg.declare(metadata ptr %flags1058, metadata !4578, metadata !DIExpression()), !dbg !4579
  %638 = load ptr, ptr %self, align 8, !dbg !4580
  %ptradd1059 = getelementptr inbounds i8, ptr %638, i64 16, !dbg !4580
  %639 = load i32, ptr %ptradd1059, align 8, !dbg !4580
  store i32 %639, ptr %flags1058, align 4, !dbg !4580
  call void @llvm.dbg.declare(metadata ptr %width1060, metadata !4581, metadata !DIExpression()), !dbg !4582
  %640 = load ptr, ptr %self, align 8, !dbg !4583
  %ptradd1061 = getelementptr inbounds i8, ptr %640, i64 16, !dbg !4583
  %ptradd1062 = getelementptr inbounds i8, ptr %ptradd1061, i64 4, !dbg !4583
  %641 = load i32, ptr %ptradd1062, align 4, !dbg !4583
  store i32 %641, ptr %width1060, align 4, !dbg !4583
  %642 = load ptr, ptr %self, align 8, !dbg !4584
  %ptradd1063 = getelementptr inbounds i8, ptr %642, i64 16, !dbg !4584
  store i32 0, ptr %ptradd1063, align 8, !dbg !4584
  %643 = load ptr, ptr %self, align 8, !dbg !4585
  %ptradd1064 = getelementptr inbounds i8, ptr %643, i64 16, !dbg !4585
  %ptradd1065 = getelementptr inbounds i8, ptr %ptradd1064, i64 4, !dbg !4585
  store i32 0, ptr %ptradd1065, align 4, !dbg !4586
  call void @llvm.dbg.declare(metadata ptr %size1066, metadata !4587, metadata !DIExpression()), !dbg !4588
  %644 = load i64, ptr %inner1029, align 8, !dbg !4589
  %"introspect*1067" = inttoptr i64 %644 to ptr, !dbg !4589
  %typeid.kind1068 = load i8, ptr %"introspect*1067", align 8, !dbg !4589
  %ptradd1069 = getelementptr inbounds i8, ptr %"introspect*1067", i64 24, !dbg !4589
  %typeid.size1070 = load i64, ptr %ptradd1069, align 8, !dbg !4589
  store i64 %typeid.size1070, ptr %size1066, align 8, !dbg !4589
  call void @llvm.dbg.declare(metadata ptr %temp, metadata !4590, metadata !DIExpression()), !dbg !4592
  %645 = load ptr, ptr %arg, align 8, !dbg !4593
  store ptr %645, ptr %temp, align 8, !dbg !4593
  call void @llvm.dbg.declare(metadata ptr %ptr1071, metadata !4594, metadata !DIExpression()), !dbg !4595
  %646 = load ptr, ptr %temp, align 8, !dbg !4596
  %checknull1072 = icmp eq ptr %646, null, !dbg !4596
  %647 = call i1 @llvm.expect.i1(i1 %checknull1072, i1 false), !dbg !4596
  br i1 %647, label %panic1073, label %checkok1077, !dbg !4596

checkok1077:                                      ; preds = %if.exit1057
  %648 = load ptr, ptr %646, align 8, !dbg !4596
  store ptr %648, ptr %ptr1071, align 8, !dbg !4596
  call void @llvm.dbg.declare(metadata ptr %slen, metadata !4597, metadata !DIExpression()), !dbg !4598
  %649 = load ptr, ptr %temp, align 8, !dbg !4599
  %checknull1078 = icmp eq ptr %649, null, !dbg !4599
  %650 = call i1 @llvm.expect.i1(i1 %checknull1078, i1 false), !dbg !4599
  br i1 %650, label %panic1079, label %checkok1083, !dbg !4599

checkok1083:                                      ; preds = %checkok1077
  %ptradd1084 = getelementptr inbounds i8, ptr %649, i64 8, !dbg !4599
  %651 = load i64, ptr %ptradd1084, align 8, !dbg !4599
  store i64 %651, ptr %slen, align 8, !dbg !4599
  call void @llvm.dbg.declare(metadata ptr %len1085, metadata !4600, metadata !DIExpression()), !dbg !4601
  %652 = load ptr, ptr %self, align 8
  %653 = call i64 @std.io.Formatter.out(ptr %retparam1087, ptr %652, i8 91), !dbg !4602
  %not_err1088 = icmp eq i64 %653, 0, !dbg !4602
  %654 = call i1 @llvm.expect.i1(i1 %not_err1088, i1 true), !dbg !4602
  br i1 %654, label %after_check1090, label %assign_optional1089, !dbg !4602

assign_optional1089:                              ; preds = %checkok1083
  store i64 %653, ptr %error_var1086, align 8, !dbg !4602
  br label %guard_block1091, !dbg !4602

after_check1090:                                  ; preds = %checkok1083
  br label %noerr_block1095, !dbg !4602

guard_block1091:                                  ; preds = %assign_optional1089
  %655 = load ptr, ptr %self, align 8, !dbg !4603
  %ptradd1092 = getelementptr inbounds i8, ptr %655, i64 16, !dbg !4603
  %656 = load i32, ptr %flags1058, align 4, !dbg !4605
  store i32 %656, ptr %ptradd1092, align 8, !dbg !4605
  %657 = load ptr, ptr %self, align 8, !dbg !4606
  %ptradd1093 = getelementptr inbounds i8, ptr %657, i64 16, !dbg !4606
  %ptradd1094 = getelementptr inbounds i8, ptr %ptradd1093, i64 4, !dbg !4606
  %658 = load i32, ptr %width1060, align 4, !dbg !4607
  store i32 %658, ptr %ptradd1094, align 4, !dbg !4607
  %659 = load i64, ptr %error_var1086, align 8, !dbg !4607
  ret i64 %659, !dbg !4607

noerr_block1095:                                  ; preds = %after_check1090
  %660 = load i64, ptr %retparam1087, align 8, !dbg !4607
  store i64 %660, ptr %len1085, align 8, !dbg !4607
  call void @llvm.dbg.declare(metadata ptr %i1096, metadata !4608, metadata !DIExpression()), !dbg !4610
  store i64 0, ptr %i1096, align 8, !dbg !4611
  br label %loop.cond1097, !dbg !4611

loop.cond1097:                                    ; preds = %noerr_block1127, %noerr_block1095
  %661 = load i64, ptr %i1096, align 8, !dbg !4612
  %662 = load i64, ptr %slen, align 8, !dbg !4613
  %lt1098 = icmp ult i64 %661, %662, !dbg !4612
  br i1 %lt1098, label %loop.body1099, label %loop.exit1131, !dbg !4612

loop.body1099:                                    ; preds = %loop.cond1097
  %663 = load i64, ptr %i1096, align 8, !dbg !4614
  %neq1100 = icmp ne i64 0, %663, !dbg !4614
  br i1 %neq1100, label %if.then1101, label %if.exit1114, !dbg !4614

if.then1101:                                      ; preds = %loop.body1099
  %664 = load i64, ptr %len1085, align 8, !dbg !4616
  %665 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.233, i64 2 }, ptr %taddr1104, align 8
  %666 = load [2 x i64], ptr %taddr1104, align 8
  %667 = call i64 @std.io.Formatter.out_substr(ptr %retparam1103, ptr %665, [2 x i64] %666), !dbg !4617
  %not_err1105 = icmp eq i64 %667, 0, !dbg !4617
  %668 = call i1 @llvm.expect.i1(i1 %not_err1105, i1 true), !dbg !4617
  br i1 %668, label %after_check1107, label %assign_optional1106, !dbg !4617

assign_optional1106:                              ; preds = %if.then1101
  store i64 %667, ptr %error_var1102, align 8, !dbg !4617
  br label %guard_block1108, !dbg !4617

after_check1107:                                  ; preds = %if.then1101
  br label %noerr_block1112, !dbg !4617

guard_block1108:                                  ; preds = %assign_optional1106
  %669 = load ptr, ptr %self, align 8, !dbg !4618
  %ptradd1109 = getelementptr inbounds i8, ptr %669, i64 16, !dbg !4618
  %670 = load i32, ptr %flags1058, align 4, !dbg !4620
  store i32 %670, ptr %ptradd1109, align 8, !dbg !4620
  %671 = load ptr, ptr %self, align 8, !dbg !4621
  %ptradd1110 = getelementptr inbounds i8, ptr %671, i64 16, !dbg !4621
  %ptradd1111 = getelementptr inbounds i8, ptr %ptradd1110, i64 4, !dbg !4621
  %672 = load i32, ptr %width1060, align 4, !dbg !4622
  store i32 %672, ptr %ptradd1111, align 4, !dbg !4622
  %673 = load i64, ptr %error_var1102, align 8, !dbg !4622
  ret i64 %673, !dbg !4622

noerr_block1112:                                  ; preds = %after_check1107
  %674 = load i64, ptr %retparam1103, align 8, !dbg !4622
  %add1113 = add i64 %664, %674, !dbg !4616
  store i64 %add1113, ptr %len1085, align 8, !dbg !4616
  br label %if.exit1114, !dbg !4616

if.exit1114:                                      ; preds = %noerr_block1112, %loop.body1099
  %675 = load i64, ptr %len1085, align 8, !dbg !4623
  %676 = load ptr, ptr %ptr1071, align 8
  store ptr %676, ptr %ptr1116, align 8
  %677 = load i64, ptr %inner1029, align 8
  store i64 %677, ptr %type1117, align 8
  %678 = load ptr, ptr %ptr1116, align 8, !dbg !4624
  %679 = load i64, ptr %type1117, align 8, !dbg !4627
  %680 = insertvalue %any undef, ptr %678, 0, !dbg !4627
  %681 = insertvalue %any %680, i64 %679, 1, !dbg !4627
  %682 = load ptr, ptr %self, align 8
  store %any %681, ptr %taddr1119, align 8
  %683 = load [2 x i64], ptr %taddr1119, align 8
  %684 = call i64 @std.io.Formatter.out_str(ptr %retparam1118, ptr %682, [2 x i64] %683), !dbg !4628
  %not_err1120 = icmp eq i64 %684, 0, !dbg !4628
  %685 = call i1 @llvm.expect.i1(i1 %not_err1120, i1 true), !dbg !4628
  br i1 %685, label %after_check1122, label %assign_optional1121, !dbg !4628

assign_optional1121:                              ; preds = %if.exit1114
  store i64 %684, ptr %error_var1115, align 8, !dbg !4628
  br label %guard_block1123, !dbg !4628

after_check1122:                                  ; preds = %if.exit1114
  br label %noerr_block1127, !dbg !4628

guard_block1123:                                  ; preds = %assign_optional1121
  %686 = load ptr, ptr %self, align 8, !dbg !4629
  %ptradd1124 = getelementptr inbounds i8, ptr %686, i64 16, !dbg !4629
  %687 = load i32, ptr %flags1058, align 4, !dbg !4631
  store i32 %687, ptr %ptradd1124, align 8, !dbg !4631
  %688 = load ptr, ptr %self, align 8, !dbg !4632
  %ptradd1125 = getelementptr inbounds i8, ptr %688, i64 16, !dbg !4632
  %ptradd1126 = getelementptr inbounds i8, ptr %ptradd1125, i64 4, !dbg !4632
  %689 = load i32, ptr %width1060, align 4, !dbg !4633
  store i32 %689, ptr %ptradd1126, align 4, !dbg !4633
  %690 = load i64, ptr %error_var1115, align 8, !dbg !4633
  ret i64 %690, !dbg !4633

noerr_block1127:                                  ; preds = %after_check1122
  %691 = load i64, ptr %retparam1118, align 8, !dbg !4633
  %add1128 = add i64 %675, %691, !dbg !4623
  store i64 %add1128, ptr %len1085, align 8, !dbg !4623
  %692 = load ptr, ptr %ptr1071, align 8, !dbg !4634
  %693 = load i64, ptr %size1066, align 8, !dbg !4635
  %ptradd_any1129 = getelementptr i8, ptr %692, i64 %693, !dbg !4634
  store ptr %ptradd_any1129, ptr %ptr1071, align 8, !dbg !4634
  %694 = load i64, ptr %i1096, align 8, !dbg !4636
  %add1130 = add i64 %694, 1, !dbg !4636
  store i64 %add1130, ptr %i1096, align 8, !dbg !4636
  br label %loop.cond1097, !dbg !4636

loop.exit1131:                                    ; preds = %loop.cond1097
  %695 = load i64, ptr %len1085, align 8, !dbg !4637
  %696 = load ptr, ptr %self, align 8
  %697 = call i64 @std.io.Formatter.out(ptr %retparam1133, ptr %696, i8 93), !dbg !4638
  %not_err1134 = icmp eq i64 %697, 0, !dbg !4638
  %698 = call i1 @llvm.expect.i1(i1 %not_err1134, i1 true), !dbg !4638
  br i1 %698, label %after_check1136, label %assign_optional1135, !dbg !4638

assign_optional1135:                              ; preds = %loop.exit1131
  store i64 %697, ptr %error_var1132, align 8, !dbg !4638
  br label %guard_block1137, !dbg !4638

after_check1136:                                  ; preds = %loop.exit1131
  br label %noerr_block1141, !dbg !4638

guard_block1137:                                  ; preds = %assign_optional1135
  %699 = load ptr, ptr %self, align 8, !dbg !4639
  %ptradd1138 = getelementptr inbounds i8, ptr %699, i64 16, !dbg !4639
  %700 = load i32, ptr %flags1058, align 4, !dbg !4641
  store i32 %700, ptr %ptradd1138, align 8, !dbg !4641
  %701 = load ptr, ptr %self, align 8, !dbg !4642
  %ptradd1139 = getelementptr inbounds i8, ptr %701, i64 16, !dbg !4642
  %ptradd1140 = getelementptr inbounds i8, ptr %ptradd1139, i64 4, !dbg !4642
  %702 = load i32, ptr %width1060, align 4, !dbg !4643
  store i32 %702, ptr %ptradd1140, align 4, !dbg !4643
  %703 = load i64, ptr %error_var1132, align 8, !dbg !4643
  ret i64 %703, !dbg !4643

noerr_block1141:                                  ; preds = %after_check1136
  %704 = load i64, ptr %retparam1133, align 8, !dbg !4643
  %add1142 = add i64 %695, %704, !dbg !4637
  store i64 %add1142, ptr %len1085, align 8, !dbg !4637
  %705 = load i64, ptr %len1085, align 8, !dbg !4644
  %706 = load ptr, ptr %self, align 8, !dbg !4645
  %ptradd1144 = getelementptr inbounds i8, ptr %706, i64 16, !dbg !4645
  %707 = load i32, ptr %flags1058, align 4, !dbg !4647
  store i32 %707, ptr %ptradd1144, align 8, !dbg !4647
  %708 = load ptr, ptr %self, align 8, !dbg !4648
  %ptradd1145 = getelementptr inbounds i8, ptr %708, i64 16, !dbg !4648
  %ptradd1146 = getelementptr inbounds i8, ptr %ptradd1145, i64 4, !dbg !4648
  %709 = load i32, ptr %width1060, align 4, !dbg !4649
  store i32 %709, ptr %ptradd1146, align 4, !dbg !4649
  store i64 %705, ptr %0, align 8, !dbg !4649
  ret i64 0, !dbg !4649

switch.case1147:                                  ; preds = %switch.entry130, %switch.entry130
  store %"char[]" { ptr @.str.234, i64 15 }, ptr %string1148, align 8
  %710 = load [2 x i64], ptr %string1148, align 8, !dbg !4650
  store %"char[]" { ptr @.str.235, i64 12 }, ptr %taddr1149, align 8
  %711 = load [2 x i64], ptr %taddr1149, align 8
  store %"char[]" { ptr @.str.236, i64 17 }, ptr %taddr1150, align 8
  %712 = load [2 x i64], ptr %taddr1150, align 8
  store %"any[]" zeroinitializer, ptr %taddr1151, align 8
  %713 = load [2 x i64], ptr %taddr1151, align 8
  call void @std.core.builtin.panicf([2 x i64] %710, [2 x i64] %711, [2 x i64] %712, i32 321, [2 x i64] %713), !dbg !4654
  unreachable, !dbg !4655

switch.exit1152:                                  ; preds = %switch.entry130
  %714 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.237, i64 12 }, ptr %taddr1155, align 8
  %715 = load [2 x i64], ptr %taddr1155, align 8
  %716 = call i64 @std.io.Formatter.out_substr(ptr %retparam1154, ptr %714, [2 x i64] %715), !dbg !4656
  %not_err1156 = icmp eq i64 %716, 0, !dbg !4656
  %717 = call i1 @llvm.expect.i1(i1 %not_err1156, i1 true), !dbg !4656
  br i1 %717, label %after_check1158, label %assign_optional1157, !dbg !4656

assign_optional1157:                              ; preds = %switch.exit1152
  store i64 %716, ptr %reterr1153, align 8, !dbg !4656
  br label %err_retblock1159, !dbg !4656

after_check1158:                                  ; preds = %switch.exit1152
  %718 = load i64, ptr %retparam1154, align 8, !dbg !4656
  store i64 %718, ptr %0, align 8, !dbg !4656
  ret i64 0, !dbg !4656

err_retblock1159:                                 ; preds = %assign_optional1157
  %719 = load i64, ptr %reterr1153, align 8, !dbg !4656
  ret i64 %719, !dbg !4656

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %720 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %721 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr2, align 8
  %722 = load [2 x i64], ptr %taddr2, align 8
  %723 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %723([2 x i64] %720, [2 x i64] %721, [2 x i64] %722, i32 149), !dbg !4082
  unreachable, !dbg !4082

panic14:                                          ; preds = %switch.case12
  store %"char[]" { ptr @.panic_msg.198, i64 58 }, ptr %taddr15, align 8
  %724 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr16, align 8
  %725 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr17, align 8
  %726 = load [2 x i64], ptr %taddr17, align 8
  %727 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %727([2 x i64] %724, [2 x i64] %725, [2 x i64] %726, i32 159), !dbg !4093
  unreachable, !dbg !4093

panic27:                                          ; preds = %switch.case24
  store %"char[]" { ptr @.panic_msg.199, i64 49 }, ptr %taddr28, align 8
  %728 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr29, align 8
  %729 = load [2 x i64], ptr %taddr29, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr30, align 8
  %730 = load [2 x i64], ptr %taddr30, align 8
  %731 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %731([2 x i64] %728, [2 x i64] %729, [2 x i64] %730, i32 162), !dbg !4095
  unreachable, !dbg !4095

panic98:                                          ; preds = %switch.case95
  store %"char[]" { ptr @.panic_msg.205, i64 54 }, ptr %taddr99, align 8
  %732 = load [2 x i64], ptr %taddr99, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr100, align 8
  %733 = load [2 x i64], ptr %taddr100, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr101, align 8
  %734 = load [2 x i64], ptr %taddr101, align 8
  %735 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %735([2 x i64] %732, [2 x i64] %733, [2 x i64] %734, i32 189), !dbg !4151
  unreachable, !dbg !4151

panic148:                                         ; preds = %assert_ok145
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr149, align 8
  %736 = load [2 x i64], ptr %taddr149, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr150, align 8
  %737 = load [2 x i64], ptr %taddr150, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr151, align 8
  %738 = load [2 x i64], ptr %taddr151, align 8
  %739 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %739([2 x i64] %736, [2 x i64] %737, [2 x i64] %738, i32 200), !dbg !4178
  unreachable, !dbg !4178

panic154:                                         ; preds = %checkok152
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr155, align 8
  %740 = load [2 x i64], ptr %taddr155, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr156, align 8
  %741 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr157, align 8
  %742 = load [2 x i64], ptr %taddr157, align 8
  %743 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %743([2 x i64] %740, [2 x i64] %741, [2 x i64] %742, i32 200), !dbg !4181
  unreachable, !dbg !4181

panic208:                                         ; preds = %switch.case206
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr209, align 8
  %744 = load [2 x i64], ptr %taddr209, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr210, align 8
  %745 = load [2 x i64], ptr %taddr210, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr211, align 8
  %746 = load [2 x i64], ptr %taddr211, align 8
  %747 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %747([2 x i64] %744, [2 x i64] %745, [2 x i64] %746, i32 35), !dbg !4209
  unreachable, !dbg !4209

panic225:                                         ; preds = %switch.case223
  store %"char[]" { ptr @.panic_msg.125, i64 53 }, ptr %taddr226, align 8
  %748 = load [2 x i64], ptr %taddr226, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr227, align 8
  %749 = load [2 x i64], ptr %taddr227, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr228, align 8
  %750 = load [2 x i64], ptr %taddr228, align 8
  %751 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %751([2 x i64] %748, [2 x i64] %749, [2 x i64] %750, i32 39), !dbg !4219
  unreachable, !dbg !4219

panic255:                                         ; preds = %switch.case252
  store %"char[]" { ptr @.panic_msg.126, i64 51 }, ptr %taddr256, align 8
  %752 = load [2 x i64], ptr %taddr256, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr257, align 8
  %753 = load [2 x i64], ptr %taddr257, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr258, align 8
  %754 = load [2 x i64], ptr %taddr258, align 8
  %755 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %755([2 x i64] %752, [2 x i64] %753, [2 x i64] %754, i32 44), !dbg !4234
  unreachable, !dbg !4234

panic289:                                         ; preds = %switch.case287
  store %"char[]" { ptr @.panic_msg.127, i64 52 }, ptr %taddr290, align 8
  %756 = load [2 x i64], ptr %taddr290, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr291, align 8
  %757 = load [2 x i64], ptr %taddr291, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr292, align 8
  %758 = load [2 x i64], ptr %taddr292, align 8
  %759 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %759([2 x i64] %756, [2 x i64] %757, [2 x i64] %758, i32 49), !dbg !4249
  unreachable, !dbg !4249

panic321:                                         ; preds = %switch.case318
  store %"char[]" { ptr @.panic_msg.128, i64 54 }, ptr %taddr322, align 8
  %760 = load [2 x i64], ptr %taddr322, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr323, align 8
  %761 = load [2 x i64], ptr %taddr323, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr324, align 8
  %762 = load [2 x i64], ptr %taddr324, align 8
  %763 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %763([2 x i64] %760, [2 x i64] %761, [2 x i64] %762, i32 54), !dbg !4264
  unreachable, !dbg !4264

panic354:                                         ; preds = %switch.case351
  store %"char[]" { ptr @.panic_msg.122, i64 52 }, ptr %taddr355, align 8
  %764 = load [2 x i64], ptr %taddr355, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr356, align 8
  %765 = load [2 x i64], ptr %taddr356, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr357, align 8
  %766 = load [2 x i64], ptr %taddr357, align 8
  %767 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %767([2 x i64] %764, [2 x i64] %765, [2 x i64] %766, i32 59), !dbg !4279
  unreachable, !dbg !4279

panic374:                                         ; preds = %switch.case371
  store %"char[]" { ptr @.panic_msg.129, i64 54 }, ptr %taddr375, align 8
  %768 = load [2 x i64], ptr %taddr375, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr376, align 8
  %769 = load [2 x i64], ptr %taddr376, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr377, align 8
  %770 = load [2 x i64], ptr %taddr377, align 8
  %771 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %771([2 x i64] %768, [2 x i64] %769, [2 x i64] %770, i32 63), !dbg !4289
  unreachable, !dbg !4289

panic399:                                         ; preds = %switch.case396
  store %"char[]" { ptr @.panic_msg.130, i64 52 }, ptr %taddr400, align 8
  %772 = load [2 x i64], ptr %taddr400, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr401, align 8
  %773 = load [2 x i64], ptr %taddr401, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr402, align 8
  %774 = load [2 x i64], ptr %taddr402, align 8
  %775 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %775([2 x i64] %772, [2 x i64] %773, [2 x i64] %774, i32 67), !dbg !4301
  unreachable, !dbg !4301

panic424:                                         ; preds = %switch.case421
  store %"char[]" { ptr @.panic_msg.131, i64 53 }, ptr %taddr425, align 8
  %776 = load [2 x i64], ptr %taddr425, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr426, align 8
  %777 = load [2 x i64], ptr %taddr426, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr427, align 8
  %778 = load [2 x i64], ptr %taddr427, align 8
  %779 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %779([2 x i64] %776, [2 x i64] %777, [2 x i64] %778, i32 71), !dbg !4313
  unreachable, !dbg !4313

panic446:                                         ; preds = %switch.case443
  store %"char[]" { ptr @.panic_msg.132, i64 55 }, ptr %taddr447, align 8
  %780 = load [2 x i64], ptr %taddr447, align 8
  store %"char[]" { ptr @.file.120, i64 8 }, ptr %taddr448, align 8
  %781 = load [2 x i64], ptr %taddr448, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr449, align 8
  %782 = load [2 x i64], ptr %taddr449, align 8
  %783 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %783([2 x i64] %780, [2 x i64] %781, [2 x i64] %782, i32 75), !dbg !4325
  unreachable, !dbg !4325

panic506:                                         ; preds = %check_type_ok502
  store i64 %326, ptr %taddr507, align 8
  %784 = insertvalue %any undef, ptr %taddr507, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %328, ptr %taddr508, align 8
  %786 = insertvalue %any undef, ptr %taddr508, 0
  %787 = insertvalue %any %786, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr509, align 8
  %788 = load [2 x i64], ptr %taddr509, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr510, align 8
  %789 = load [2 x i64], ptr %taddr510, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr511, align 8
  %790 = load [2 x i64], ptr %taddr511, align 8
  store %any %785, ptr %varargslots512, align 8
  %ptradd513 = getelementptr inbounds i8, ptr %varargslots512, i64 16
  store %any %787, ptr %ptradd513, align 8
  %791 = insertvalue %"any[]" undef, ptr %varargslots512, 0
  %"$$temp514" = insertvalue %"any[]" %791, i64 2, 1
  store %"any[]" %"$$temp514", ptr %taddr515, align 8
  %792 = load [2 x i64], ptr %taddr515, align 8
  call void @std.core.builtin.panicf([2 x i64] %788, [2 x i64] %789, [2 x i64] %790, i32 200, [2 x i64] %792), !dbg !4342
  unreachable, !dbg !4342

panic560:                                         ; preds = %if.then557
  store %"char[]" { ptr @.panic_msg.218, i64 52 }, ptr %taddr561, align 8
  %793 = load [2 x i64], ptr %taddr561, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr562, align 8
  %794 = load [2 x i64], ptr %taddr562, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr563, align 8
  %795 = load [2 x i64], ptr %taddr563, align 8
  %796 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %796([2 x i64] %793, [2 x i64] %794, [2 x i64] %795, i32 212), !dbg !4354
  unreachable, !dbg !4354

panic576:                                         ; preds = %if.then573
  store %"char[]" { ptr @.panic_msg.219, i64 53 }, ptr %taddr577, align 8
  %797 = load [2 x i64], ptr %taddr577, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr578, align 8
  %798 = load [2 x i64], ptr %taddr578, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr579, align 8
  %799 = load [2 x i64], ptr %taddr579, align 8
  %800 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %800([2 x i64] %797, [2 x i64] %798, [2 x i64] %799, i32 216), !dbg !4358
  unreachable, !dbg !4358

panic583:                                         ; preds = %cond.lhs
  store %"char[]" { ptr @.panic_msg.220, i64 54 }, ptr %taddr584, align 8
  %801 = load [2 x i64], ptr %taddr584, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr585, align 8
  %802 = load [2 x i64], ptr %taddr585, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr586, align 8
  %803 = load [2 x i64], ptr %taddr586, align 8
  %804 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %804([2 x i64] %801, [2 x i64] %802, [2 x i64] %803, i32 216), !dbg !4360
  unreachable, !dbg !4360

panic602:                                         ; preds = %if.then599
  store %"char[]" { ptr @.panic_msg.222, i64 53 }, ptr %taddr603, align 8
  %805 = load [2 x i64], ptr %taddr603, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr604, align 8
  %806 = load [2 x i64], ptr %taddr604, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr605, align 8
  %807 = load [2 x i64], ptr %taddr605, align 8
  %808 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %808([2 x i64] %805, [2 x i64] %806, [2 x i64] %807, i32 220), !dbg !4364
  unreachable, !dbg !4364

panic610:                                         ; preds = %cond.lhs608
  store %"char[]" { ptr @.panic_msg.223, i64 54 }, ptr %taddr611, align 8
  %809 = load [2 x i64], ptr %taddr611, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr612, align 8
  %810 = load [2 x i64], ptr %taddr612, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr613, align 8
  %811 = load [2 x i64], ptr %taddr613, align 8
  %812 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %812([2 x i64] %809, [2 x i64] %810, [2 x i64] %811, i32 220), !dbg !4366
  unreachable, !dbg !4366

panic629:                                         ; preds = %if.exit625
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr630, align 8
  %813 = load [2 x i64], ptr %taddr630, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr631, align 8
  %814 = load [2 x i64], ptr %taddr631, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr632, align 8
  %815 = load [2 x i64], ptr %taddr632, align 8
  %816 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %816([2 x i64] %813, [2 x i64] %814, [2 x i64] %815, i32 200), !dbg !4369
  unreachable, !dbg !4369

panic635:                                         ; preds = %checkok633
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr636, align 8
  %817 = load [2 x i64], ptr %taddr636, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr637, align 8
  %818 = load [2 x i64], ptr %taddr637, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr638, align 8
  %819 = load [2 x i64], ptr %taddr638, align 8
  %820 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %820([2 x i64] %817, [2 x i64] %818, [2 x i64] %819, i32 200), !dbg !4372
  unreachable, !dbg !4372

panic725:                                         ; preds = %if.then723
  store %"char[]" { ptr @.panic_msg.225, i64 48 }, ptr %taddr726, align 8
  %821 = load [2 x i64], ptr %taddr726, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr727, align 8
  %822 = load [2 x i64], ptr %taddr727, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr728, align 8
  %823 = load [2 x i64], ptr %taddr728, align 8
  %824 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %824([2 x i64] %821, [2 x i64] %822, [2 x i64] %823, i32 228), !dbg !4386
  unreachable, !dbg !4386

panic1073:                                        ; preds = %if.exit1057
  store %"char[]" { ptr @.panic_msg.232, i64 45 }, ptr %taddr1074, align 8
  %825 = load [2 x i64], ptr %taddr1074, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1075, align 8
  %826 = load [2 x i64], ptr %taddr1075, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr1076, align 8
  %827 = load [2 x i64], ptr %taddr1076, align 8
  %828 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %828([2 x i64] %825, [2 x i64] %826, [2 x i64] %827, i32 308), !dbg !4596
  unreachable, !dbg !4596

panic1079:                                        ; preds = %checkok1077
  store %"char[]" { ptr @.panic_msg.232, i64 45 }, ptr %taddr1080, align 8
  %829 = load [2 x i64], ptr %taddr1080, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1081, align 8
  %830 = load [2 x i64], ptr %taddr1081, align 8
  store %"char[]" { ptr @.func.195, i64 7 }, ptr %taddr1082, align 8
  %831 = load [2 x i64], ptr %taddr1082, align 8
  %832 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %832([2 x i64] %829, [2 x i64] %830, [2 x i64] %831, i32 309), !dbg !4599
  unreachable, !dbg !4599
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.vprintf(ptr %0, ptr %1, [2 x i64] %2, [2 x i64] %3) #0 !dbg !4657 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %format = alloca %"char[]", align 8
  %anys = alloca %"any[]", align 8
  %total_len = alloca i64, align 8
  %format_len = alloca i64, align 8
  %variant_index = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %f = alloca ptr, align 8
  %retparam23 = alloca i64, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 8
  %taddr39 = alloca %"any[]", align 8
  %error_var43 = alloca i64, align 8
  %retparam44 = alloca i64, align 8
  %switch = alloca i8, align 1
  %reterr66 = alloca i64, align 8
  %f67 = alloca ptr, align 8
  %retparam68 = alloca i64, align 8
  %taddr69 = alloca %"char[]", align 8
  %taddr77 = alloca i64, align 8
  %taddr78 = alloca i64, align 8
  %taddr79 = alloca %"char[]", align 8
  %taddr80 = alloca %"char[]", align 8
  %taddr81 = alloca %"char[]", align 8
  %varargslots82 = alloca [2 x %any], align 8
  %taddr85 = alloca %"any[]", align 8
  %w = alloca i32, align 4
  %w.f = alloca i64, align 8
  %retparam90 = alloca i32, align 4
  %temp_err = alloca i64, align 8
  %reterr98 = alloca i64, align 8
  %f99 = alloca ptr, align 8
  %retparam100 = alloca i64, align 8
  %taddr101 = alloca %"char[]", align 8
  %taddr109 = alloca i64, align 8
  %taddr110 = alloca i64, align 8
  %taddr111 = alloca %"char[]", align 8
  %taddr112 = alloca %"char[]", align 8
  %taddr113 = alloca %"char[]", align 8
  %varargslots114 = alloca [2 x %any], align 8
  %taddr117 = alloca %"any[]", align 8
  %reterr134 = alloca i64, align 8
  %f135 = alloca ptr, align 8
  %retparam136 = alloca i64, align 8
  %taddr137 = alloca %"char[]", align 8
  %prec = alloca i32, align 4
  %prec.f = alloca i64, align 8
  %retparam144 = alloca i32, align 4
  %temp_err149 = alloca i64, align 8
  %reterr158 = alloca i64, align 8
  %f159 = alloca ptr, align 8
  %retparam160 = alloca i64, align 8
  %taddr161 = alloca %"char[]", align 8
  %taddr172 = alloca i64, align 8
  %taddr173 = alloca i64, align 8
  %taddr174 = alloca %"char[]", align 8
  %taddr175 = alloca %"char[]", align 8
  %taddr176 = alloca %"char[]", align 8
  %varargslots177 = alloca [2 x %any], align 8
  %taddr180 = alloca %"any[]", align 8
  %base = alloca i32, align 4
  %self187 = alloca ptr, align 8
  %f188 = alloca i64, align 8
  %blockret = alloca i64, align 8
  %error_var198 = alloca i64, align 8
  %retparam199 = alloca i64, align 8
  %taddr200 = alloca %"char[]", align 8
  %current = alloca %any, align 8
  %taddr212 = alloca i64, align 8
  %taddr213 = alloca i64, align 8
  %taddr214 = alloca %"char[]", align 8
  %taddr215 = alloca %"char[]", align 8
  %taddr216 = alloca %"char[]", align 8
  %varargslots217 = alloca [2 x %any], align 8
  %taddr220 = alloca %"any[]", align 8
  %switch222 = alloca i8, align 1
  %error_var238 = alloca i64, align 8
  %f239 = alloca ptr, align 8
  %len = alloca i64, align 8
  %len.f = alloca i64, align 8
  %retparam241 = alloca double, align 8
  %retparam245 = alloca i64, align 8
  %err = alloca i64, align 8
  %switch258 = alloca i64, align 8
  %self263 = alloca ptr, align 8
  %f264 = alloca i64, align 8
  %blockret265 = alloca i64, align 8
  %self278 = alloca ptr, align 8
  %f279 = alloca i64, align 8
  %blockret280 = alloca i64, align 8
  %error_var291 = alloca i64, align 8
  %retparam292 = alloca i64, align 8
  %taddr293 = alloca %"char[]", align 8
  %error_var307 = alloca i64, align 8
  %f308 = alloca ptr, align 8
  %len310 = alloca i64, align 8
  %len.f311 = alloca i64, align 8
  %retparam312 = alloca double, align 8
  %retparam316 = alloca i64, align 8
  %err321 = alloca i64, align 8
  %switch330 = alloca i64, align 8
  %self336 = alloca ptr, align 8
  %f337 = alloca i64, align 8
  %blockret338 = alloca i64, align 8
  %self351 = alloca ptr, align 8
  %f352 = alloca i64, align 8
  %blockret353 = alloca i64, align 8
  %error_var364 = alloca i64, align 8
  %retparam365 = alloca i64, align 8
  %taddr366 = alloca %"char[]", align 8
  %error_var380 = alloca i64, align 8
  %f381 = alloca ptr, align 8
  %len383 = alloca i64, align 8
  %len.f384 = alloca i64, align 8
  %retparam385 = alloca double, align 8
  %retparam389 = alloca i64, align 8
  %err394 = alloca i64, align 8
  %switch403 = alloca i64, align 8
  %self409 = alloca ptr, align 8
  %f410 = alloca i64, align 8
  %blockret411 = alloca i64, align 8
  %self424 = alloca ptr, align 8
  %f425 = alloca i64, align 8
  %blockret426 = alloca i64, align 8
  %error_var437 = alloca i64, align 8
  %retparam438 = alloca i64, align 8
  %taddr439 = alloca %"char[]", align 8
  %error_var453 = alloca i64, align 8
  %f454 = alloca ptr, align 8
  %len456 = alloca i64, align 8
  %len.f457 = alloca i64, align 8
  %retparam458 = alloca double, align 8
  %retparam462 = alloca i64, align 8
  %err467 = alloca i64, align 8
  %switch476 = alloca i64, align 8
  %self482 = alloca ptr, align 8
  %f483 = alloca i64, align 8
  %blockret484 = alloca i64, align 8
  %self497 = alloca ptr, align 8
  %f498 = alloca i64, align 8
  %blockret499 = alloca i64, align 8
  %error_var510 = alloca i64, align 8
  %retparam511 = alloca i64, align 8
  %taddr512 = alloca %"char[]", align 8
  %error_var524 = alloca i64, align 8
  %retparam525 = alloca i64, align 8
  %out = alloca %"char[]", align 8
  %switch536 = alloca i64, align 8
  %current541 = alloca ptr, align 8
  %taddr543 = alloca %"char[]", align 8
  %taddr544 = alloca %"char[]", align 8
  %taddr545 = alloca %"char[]", align 8
  %current555 = alloca ptr, align 8
  %taddr558 = alloca %"char[]", align 8
  %taddr559 = alloca %"char[]", align 8
  %taddr560 = alloca %"char[]", align 8
  %taddr584 = alloca %"char[]", align 8
  %taddr585 = alloca %"char[]", align 8
  %taddr586 = alloca %"char[]", align 8
  %taddr608 = alloca %"char[]", align 8
  %taddr609 = alloca %"char[]", align 8
  %taddr610 = alloca %"char[]", align 8
  %taddr618 = alloca ptr, align 8
  %error_var625 = alloca i64, align 8
  %retparam626 = alloca i64, align 8
  %taddr627 = alloca %"char[]", align 8
  %len637 = alloca i64, align 8
  %error_var638 = alloca i64, align 8
  %retparam642 = alloca i64, align 8
  %error_var649 = alloca i64, align 8
  %retparam652 = alloca i64, align 8
  %error_var664 = alloca i64, align 8
  %retparam669 = alloca i64, align 8
  %error_var677 = alloca i64, align 8
  %retparam681 = alloca i64, align 8
  %len693 = alloca i64, align 8
  %error_var694 = alloca i64, align 8
  %retparam695 = alloca i64, align 8
  %error_var702 = alloca i64, align 8
  %retparam706 = alloca i64, align 8
  %out_fn = alloca ptr, align 8
  %len720 = alloca i64, align 8
  %error_var721 = alloca i64, align 8
  %retparam722 = alloca i64, align 8
  %error_var729 = alloca i64, align 8
  %retparam733 = alloca i64, align 8
  %error_var741 = alloca i64, align 8
  %retparam742 = alloca i64, align 8
  %self753 = alloca ptr, align 8
  %f754 = alloca i64, align 8
  %blockret755 = alloca i64, align 8
  %error_var766 = alloca i64, align 8
  %retparam767 = alloca i64, align 8
  %taddr768 = alloca %"char[]", align 8
  %is_neg = alloca i8, align 1
  %error_var787 = alloca i64, align 8
  %f788 = alloca ptr, align 8
  %len790 = alloca i64, align 8
  %len.f791 = alloca i64, align 8
  %retparam792 = alloca i128, align 16
  %retparam796 = alloca i64, align 8
  %err801 = alloca i64, align 8
  %switch810 = alloca i64, align 8
  %self816 = alloca ptr, align 8
  %f817 = alloca i64, align 8
  %blockret818 = alloca i64, align 8
  %self831 = alloca ptr, align 8
  %f832 = alloca i64, align 8
  %blockret833 = alloca i64, align 8
  %error_var844 = alloca i64, align 8
  %retparam845 = alloca i64, align 8
  %taddr846 = alloca %"char[]", align 8
  %reterr866 = alloca i64, align 8
  %4 = icmp eq ptr %1, null, !dbg !4658
  %5 = call i1 @llvm.expect.i1(i1 %4, i1 false), !dbg !4658
  br i1 %5, label %panic, label %checkok, !dbg !4658

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4659, metadata !DIExpression()), !dbg !4660
  store [2 x i64] %2, ptr %format, align 8
  call void @llvm.dbg.declare(metadata ptr %format, metadata !4661, metadata !DIExpression()), !dbg !4662
  store [2 x i64] %3, ptr %anys, align 8
  call void @llvm.dbg.declare(metadata ptr %anys, metadata !4663, metadata !DIExpression()), !dbg !4664
  %6 = load ptr, ptr %self, align 8, !dbg !4665
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !4665
  %ptradd3 = getelementptr inbounds i8, ptr %ptradd, i64 24, !dbg !4665
  store i64 0, ptr %ptradd3, align 8, !dbg !4666
  %7 = load ptr, ptr %self, align 8, !dbg !4667
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !4667
  %8 = load ptr, ptr %ptradd4, align 8, !dbg !4667
  %i2nb = icmp eq ptr %8, null, !dbg !4667
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4667

if.then:                                          ; preds = %checkok
  %9 = load ptr, ptr %self, align 8, !dbg !4668
  %ptradd5 = getelementptr inbounds i8, ptr %9, i64 8, !dbg !4668
  store ptr @std.io.out_null_fn, ptr %ptradd5, align 8, !dbg !4670
  br label %if.exit, !dbg !4670

if.exit:                                          ; preds = %if.then, %checkok
  call void @llvm.dbg.declare(metadata ptr %total_len, metadata !4671, metadata !DIExpression()), !dbg !4672
  store i64 0, ptr %total_len, align 8, !dbg !4672
  call void @llvm.dbg.declare(metadata ptr %format_len, metadata !4673, metadata !DIExpression()), !dbg !4674
  %ptradd6 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4675
  %10 = load i64, ptr %ptradd6, align 8, !dbg !4675
  store i64 %10, ptr %format_len, align 8, !dbg !4675
  call void @llvm.dbg.declare(metadata ptr %variant_index, metadata !4676, metadata !DIExpression()), !dbg !4677
  store i64 0, ptr %variant_index, align 8, !dbg !4678
  call void @llvm.dbg.declare(metadata ptr %i, metadata !4679, metadata !DIExpression()), !dbg !4681
  store i64 0, ptr %i, align 8, !dbg !4682
  br label %loop.cond, !dbg !4682

loop.cond:                                        ; preds = %loop.inc, %if.exit
  %11 = load i64, ptr %i, align 8, !dbg !4683
  %12 = load i64, ptr %format_len, align 8, !dbg !4684
  %lt = icmp ult i64 %11, %12, !dbg !4683
  br i1 %lt, label %loop.body, label %loop.exit858, !dbg !4683

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !4685, metadata !DIExpression()), !dbg !4687
  %ptradd7 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4688
  %13 = load i64, ptr %ptradd7, align 8, !dbg !4688
  %14 = load ptr, ptr %format, align 8, !dbg !4688
  %15 = load i64, ptr %i, align 8, !dbg !4689
  %ge = icmp uge i64 %15, %13, !dbg !4689
  %16 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4689
  br i1 %16, label %panic8, label %checkok16, !dbg !4689

checkok16:                                        ; preds = %loop.body
  %ptradd17 = getelementptr inbounds i8, ptr %14, i64 %15, !dbg !4689
  %17 = load i8, ptr %ptradd17, align 1, !dbg !4689
  store i8 %17, ptr %c, align 1, !dbg !4689
  %18 = load i8, ptr %c, align 1, !dbg !4690
  %neq = icmp ne i8 %18, 37, !dbg !4690
  br i1 %neq, label %if.then18, label %if.exit19, !dbg !4690

if.then18:                                        ; preds = %checkok16
  %19 = load i64, ptr %total_len, align 8, !dbg !4691
  %20 = load ptr, ptr %self, align 8
  %21 = load i8, ptr %c, align 1
  %22 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %20, i8 %21), !dbg !4693
  %not_err = icmp eq i64 %22, 0, !dbg !4693
  %23 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4693
  br i1 %23, label %after_check, label %assign_optional, !dbg !4693

assign_optional:                                  ; preds = %if.then18
  store i64 %22, ptr %error_var, align 8, !dbg !4693
  br label %guard_block, !dbg !4693

after_check:                                      ; preds = %if.then18
  br label %noerr_block, !dbg !4693

guard_block:                                      ; preds = %assign_optional
  %24 = load i64, ptr %error_var, align 8, !dbg !4693
  ret i64 %24, !dbg !4693

noerr_block:                                      ; preds = %after_check
  %25 = load i64, ptr %retparam, align 8, !dbg !4693
  %add = add i64 %19, %25, !dbg !4691
  store i64 %add, ptr %total_len, align 8, !dbg !4691
  br label %loop.inc, !dbg !4694

if.exit19:                                        ; preds = %checkok16
  %26 = load i64, ptr %i, align 8, !dbg !4695
  %add20 = add i64 %26, 1, !dbg !4695
  store i64 %add20, ptr %i, align 8, !dbg !4695
  %27 = load i64, ptr %i, align 8, !dbg !4696
  %28 = load i64, ptr %format_len, align 8, !dbg !4697
  %ge21 = icmp uge i64 %27, %28, !dbg !4696
  br i1 %ge21, label %if.then22, label %if.exit27, !dbg !4696

if.then22:                                        ; preds = %if.exit19
  %29 = load ptr, ptr %self, align 8
  store ptr %29, ptr %f, align 8
  %30 = load ptr, ptr %f, align 8
  store %"char[]" { ptr @.str.239, i64 4 }, ptr %taddr24, align 8
  %31 = load [2 x i64], ptr %taddr24, align 8
  %32 = call i64 @std.io.Formatter.out_substr(ptr %retparam23, ptr %30, [2 x i64] %31), !dbg !4698
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr, align 8, !dbg !4701
  br label %err_retblock, !dbg !4701

err_retblock:                                     ; preds = %if.then22
  %33 = load i64, ptr %reterr, align 8, !dbg !4701
  ret i64 %33, !dbg !4701

if.exit27:                                        ; preds = %if.exit19
  %ptradd28 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4702
  %34 = load i64, ptr %ptradd28, align 8, !dbg !4702
  %35 = load ptr, ptr %format, align 8, !dbg !4702
  %36 = load i64, ptr %i, align 8, !dbg !4703
  %ge29 = icmp uge i64 %36, %34, !dbg !4703
  %37 = call i1 @llvm.expect.i1(i1 %ge29, i1 false), !dbg !4703
  br i1 %37, label %panic30, label %checkok40, !dbg !4703

checkok40:                                        ; preds = %if.exit27
  %ptradd41 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !4703
  %38 = load i8, ptr %ptradd41, align 1, !dbg !4703
  store i8 %38, ptr %c, align 1, !dbg !4703
  %39 = load i8, ptr %c, align 1, !dbg !4704
  %eq = icmp eq i8 %39, 37, !dbg !4704
  br i1 %eq, label %if.then42, label %if.exit51, !dbg !4704

if.then42:                                        ; preds = %checkok40
  %40 = load i64, ptr %total_len, align 8, !dbg !4705
  %41 = load ptr, ptr %self, align 8
  %42 = load i8, ptr %c, align 1
  %43 = call i64 @std.io.Formatter.out(ptr %retparam44, ptr %41, i8 %42), !dbg !4707
  %not_err45 = icmp eq i64 %43, 0, !dbg !4707
  %44 = call i1 @llvm.expect.i1(i1 %not_err45, i1 true), !dbg !4707
  br i1 %44, label %after_check47, label %assign_optional46, !dbg !4707

assign_optional46:                                ; preds = %if.then42
  store i64 %43, ptr %error_var43, align 8, !dbg !4707
  br label %guard_block48, !dbg !4707

after_check47:                                    ; preds = %if.then42
  br label %noerr_block49, !dbg !4707

guard_block48:                                    ; preds = %assign_optional46
  %45 = load i64, ptr %error_var43, align 8, !dbg !4707
  ret i64 %45, !dbg !4707

noerr_block49:                                    ; preds = %after_check47
  %46 = load i64, ptr %retparam44, align 8, !dbg !4707
  %add50 = add i64 %40, %46, !dbg !4705
  store i64 %add50, ptr %total_len, align 8, !dbg !4705
  br label %loop.inc, !dbg !4708

if.exit51:                                        ; preds = %checkok40
  %47 = load ptr, ptr %self, align 8, !dbg !4709
  %ptradd52 = getelementptr inbounds i8, ptr %47, i64 16, !dbg !4709
  store i32 0, ptr %ptradd52, align 8, !dbg !4709
  br label %loop.body53, !dbg !4710

loop.body53:                                      ; preds = %checkok86, %if.exit51
  %48 = load i8, ptr %c, align 1
  store i8 %48, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %loop.body53
  %49 = load i8, ptr %switch, align 1
  switch i8 %49, label %switch.default [
    i8 48, label %switch.case
    i8 45, label %switch.case55
    i8 43, label %switch.case57
    i8 32, label %switch.case59
    i8 35, label %switch.case61
  ]

switch.case:                                      ; preds = %switch.entry
  %50 = load ptr, ptr %self, align 8, !dbg !4711
  %ptradd54 = getelementptr inbounds i8, ptr %50, i64 16, !dbg !4711
  %51 = load i32, ptr %ptradd54, align 8, !dbg !4716
  %52 = and i32 %51, -2, !dbg !4716
  %53 = or i32 %52, 1, !dbg !4716
  store i32 %53, ptr %ptradd54, align 8, !dbg !4716
  br label %switch.exit, !dbg !4716

switch.case55:                                    ; preds = %switch.entry
  %54 = load ptr, ptr %self, align 8, !dbg !4717
  %ptradd56 = getelementptr inbounds i8, ptr %54, i64 16, !dbg !4717
  %55 = load i32, ptr %ptradd56, align 8, !dbg !4719
  %56 = and i32 %55, -3, !dbg !4719
  %57 = or i32 %56, 2, !dbg !4719
  store i32 %57, ptr %ptradd56, align 8, !dbg !4719
  br label %switch.exit, !dbg !4719

switch.case57:                                    ; preds = %switch.entry
  %58 = load ptr, ptr %self, align 8, !dbg !4720
  %ptradd58 = getelementptr inbounds i8, ptr %58, i64 16, !dbg !4720
  %59 = load i32, ptr %ptradd58, align 8, !dbg !4722
  %60 = and i32 %59, -5, !dbg !4722
  %61 = or i32 %60, 4, !dbg !4722
  store i32 %61, ptr %ptradd58, align 8, !dbg !4722
  br label %switch.exit, !dbg !4722

switch.case59:                                    ; preds = %switch.entry
  %62 = load ptr, ptr %self, align 8, !dbg !4723
  %ptradd60 = getelementptr inbounds i8, ptr %62, i64 16, !dbg !4723
  %63 = load i32, ptr %ptradd60, align 8, !dbg !4725
  %64 = and i32 %63, -9, !dbg !4725
  %65 = or i32 %64, 8, !dbg !4725
  store i32 %65, ptr %ptradd60, align 8, !dbg !4725
  br label %switch.exit, !dbg !4725

switch.case61:                                    ; preds = %switch.entry
  %66 = load ptr, ptr %self, align 8, !dbg !4726
  %ptradd62 = getelementptr inbounds i8, ptr %66, i64 16, !dbg !4726
  %67 = load i32, ptr %ptradd62, align 8, !dbg !4728
  %68 = and i32 %67, -17, !dbg !4728
  %69 = or i32 %68, 16, !dbg !4728
  store i32 %69, ptr %ptradd62, align 8, !dbg !4728
  br label %switch.exit, !dbg !4728

switch.default:                                   ; preds = %switch.entry
  br label %loop.exit, !dbg !4729

switch.exit:                                      ; preds = %switch.case61, %switch.case59, %switch.case57, %switch.case55, %switch.case
  %70 = load i64, ptr %i, align 8, !dbg !4731
  %add63 = add i64 %70, 1, !dbg !4731
  store i64 %add63, ptr %i, align 8, !dbg !4731
  %71 = load i64, ptr %format_len, align 8, !dbg !4732
  %ge64 = icmp uge i64 %add63, %71, !dbg !4733
  br i1 %ge64, label %if.then65, label %if.exit73, !dbg !4733

if.then65:                                        ; preds = %switch.exit
  %72 = load ptr, ptr %self, align 8
  store ptr %72, ptr %f67, align 8
  %73 = load ptr, ptr %f67, align 8
  store %"char[]" { ptr @.str.240, i64 4 }, ptr %taddr69, align 8
  %74 = load [2 x i64], ptr %taddr69, align 8
  %75 = call i64 @std.io.Formatter.out_substr(ptr %retparam68, ptr %73, [2 x i64] %74), !dbg !4734
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr66, align 8, !dbg !4737
  br label %err_retblock72, !dbg !4737

err_retblock72:                                   ; preds = %if.then65
  %76 = load i64, ptr %reterr66, align 8, !dbg !4737
  ret i64 %76, !dbg !4737

if.exit73:                                        ; preds = %switch.exit
  %ptradd74 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4738
  %77 = load i64, ptr %ptradd74, align 8, !dbg !4738
  %78 = load ptr, ptr %format, align 8, !dbg !4738
  %79 = load i64, ptr %i, align 8, !dbg !4739
  %ge75 = icmp uge i64 %79, %77, !dbg !4739
  %80 = call i1 @llvm.expect.i1(i1 %ge75, i1 false), !dbg !4739
  br i1 %80, label %panic76, label %checkok86, !dbg !4739

checkok86:                                        ; preds = %if.exit73
  %ptradd87 = getelementptr inbounds i8, ptr %78, i64 %79, !dbg !4739
  %81 = load i8, ptr %ptradd87, align 1, !dbg !4739
  store i8 %81, ptr %c, align 1, !dbg !4739
  br label %loop.body53, !dbg !4739

loop.exit:                                        ; preds = %switch.default
  call void @llvm.dbg.declare(metadata ptr %w, metadata !4740, metadata !DIExpression()), !dbg !4741
  %ptradd88 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4742
  %ptradd89 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4743
  %82 = load ptr, ptr %anys, align 8
  %83 = load i64, ptr %ptradd88, align 8
  %84 = load ptr, ptr %format, align 8
  %85 = load i64, ptr %ptradd89, align 8
  %86 = call i64 @std.io.printf_parse_format_field(ptr %retparam90, ptr %82, i64 %83, ptr %variant_index, ptr %84, i64 %85, ptr %i) #5, !dbg !4744
  %not_err91 = icmp eq i64 %86, 0, !dbg !4744
  %87 = call i1 @llvm.expect.i1(i1 %not_err91, i1 true), !dbg !4744
  br i1 %87, label %after_check93, label %assign_optional92, !dbg !4744

assign_optional92:                                ; preds = %loop.exit
  store i64 %86, ptr %w.f, align 8, !dbg !4744
  br label %after_assign, !dbg !4744

after_check93:                                    ; preds = %loop.exit
  %88 = load i32, ptr %retparam90, align 4, !dbg !4744
  store i32 %88, ptr %w, align 4, !dbg !4744
  store i64 0, ptr %w.f, align 8, !dbg !4744
  br label %after_assign, !dbg !4744

after_assign:                                     ; preds = %after_check93, %assign_optional92
  br label %testblock

testblock:                                        ; preds = %after_assign
  %optval = load i64, ptr %w.f, align 8, !dbg !4745
  %not_err94 = icmp eq i64 %optval, 0, !dbg !4745
  %89 = call i1 @llvm.expect.i1(i1 %not_err94, i1 true), !dbg !4745
  br i1 %89, label %after_check96, label %assign_optional95, !dbg !4745

assign_optional95:                                ; preds = %testblock
  store i64 %optval, ptr %temp_err, align 8, !dbg !4745
  br label %end_block, !dbg !4745

after_check96:                                    ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !4745
  br label %end_block, !dbg !4745

end_block:                                        ; preds = %after_check96, %assign_optional95
  %90 = load i64, ptr %temp_err, align 8, !dbg !4745
  %i2b = icmp ne i64 %90, 0, !dbg !4745
  br i1 %i2b, label %if.then97, label %if.exit105, !dbg !4745

if.then97:                                        ; preds = %end_block
  %91 = load ptr, ptr %self, align 8
  store ptr %91, ptr %f99, align 8
  %92 = load ptr, ptr %f99, align 8
  store %"char[]" { ptr @.str.241, i64 4 }, ptr %taddr101, align 8
  %93 = load [2 x i64], ptr %taddr101, align 8
  %94 = call i64 @std.io.Formatter.out_substr(ptr %retparam100, ptr %92, [2 x i64] %93), !dbg !4746
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr98, align 8, !dbg !4749
  br label %err_retblock104, !dbg !4749

err_retblock104:                                  ; preds = %if.then97
  %95 = load i64, ptr %reterr98, align 8, !dbg !4749
  ret i64 %95, !dbg !4749

if.exit105:                                       ; preds = %end_block
  %ptradd106 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4750
  %96 = load i64, ptr %ptradd106, align 8, !dbg !4750
  %97 = load ptr, ptr %format, align 8, !dbg !4750
  %98 = load i64, ptr %i, align 8, !dbg !4751
  %ge107 = icmp uge i64 %98, %96, !dbg !4751
  %99 = call i1 @llvm.expect.i1(i1 %ge107, i1 false), !dbg !4751
  br i1 %99, label %panic108, label %checkok118, !dbg !4751

checkok118:                                       ; preds = %if.exit105
  %ptradd119 = getelementptr inbounds i8, ptr %97, i64 %98, !dbg !4751
  %100 = load i8, ptr %ptradd119, align 1, !dbg !4751
  store i8 %100, ptr %c, align 1, !dbg !4751
  %101 = load i32, ptr %w, align 4, !dbg !4752
  %lt120 = icmp slt i32 %101, 0, !dbg !4752
  br i1 %lt120, label %if.then121, label %if.exit123, !dbg !4752

if.then121:                                       ; preds = %checkok118
  %102 = load ptr, ptr %self, align 8, !dbg !4753
  %ptradd122 = getelementptr inbounds i8, ptr %102, i64 16, !dbg !4753
  %103 = load i32, ptr %ptradd122, align 8, !dbg !4755
  %104 = and i32 %103, -3, !dbg !4755
  %105 = or i32 %104, 2, !dbg !4755
  store i32 %105, ptr %ptradd122, align 8, !dbg !4755
  %106 = load i32, ptr %w, align 4, !dbg !4756
  %neg = sub i32 0, %106, !dbg !4756
  store i32 %neg, ptr %w, align 4, !dbg !4756
  store i64 0, ptr %w.f, align 8, !dbg !4756
  br label %if.exit123, !dbg !4756

if.exit123:                                       ; preds = %if.then121, %checkok118
  %107 = load ptr, ptr %self, align 8, !dbg !4757
  %ptradd124 = getelementptr inbounds i8, ptr %107, i64 16, !dbg !4757
  %ptradd125 = getelementptr inbounds i8, ptr %ptradd124, i64 4, !dbg !4757
  %108 = load i32, ptr %w, align 4, !dbg !4758
  store i32 %108, ptr %ptradd125, align 4, !dbg !4758
  %109 = load ptr, ptr %self, align 8, !dbg !4759
  %ptradd126 = getelementptr inbounds i8, ptr %109, i64 16, !dbg !4759
  %ptradd127 = getelementptr inbounds i8, ptr %ptradd126, i64 8, !dbg !4759
  store i32 0, ptr %ptradd127, align 8, !dbg !4760
  %110 = load i8, ptr %c, align 1, !dbg !4761
  %eq128 = icmp eq i8 %110, 46, !dbg !4761
  br i1 %eq128, label %if.then129, label %if.exit183, !dbg !4761

if.then129:                                       ; preds = %if.exit123
  %111 = load ptr, ptr %self, align 8, !dbg !4762
  %ptradd130 = getelementptr inbounds i8, ptr %111, i64 16, !dbg !4762
  %112 = load i32, ptr %ptradd130, align 8, !dbg !4764
  %113 = and i32 %112, -65, !dbg !4764
  %114 = or i32 %113, 64, !dbg !4764
  store i32 %114, ptr %ptradd130, align 8, !dbg !4764
  %115 = load i64, ptr %i, align 8, !dbg !4765
  %add131 = add i64 %115, 1, !dbg !4765
  store i64 %add131, ptr %i, align 8, !dbg !4765
  %116 = load i64, ptr %format_len, align 8, !dbg !4766
  %ge132 = icmp uge i64 %add131, %116, !dbg !4767
  br i1 %ge132, label %if.then133, label %if.exit141, !dbg !4767

if.then133:                                       ; preds = %if.then129
  %117 = load ptr, ptr %self, align 8
  store ptr %117, ptr %f135, align 8
  %118 = load ptr, ptr %f135, align 8
  store %"char[]" { ptr @.str.242, i64 12 }, ptr %taddr137, align 8
  %119 = load [2 x i64], ptr %taddr137, align 8
  %120 = call i64 @std.io.Formatter.out_substr(ptr %retparam136, ptr %118, [2 x i64] %119), !dbg !4768
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr134, align 8, !dbg !4771
  br label %err_retblock140, !dbg !4771

err_retblock140:                                  ; preds = %if.then133
  %121 = load i64, ptr %reterr134, align 8, !dbg !4771
  ret i64 %121, !dbg !4771

if.exit141:                                       ; preds = %if.then129
  call void @llvm.dbg.declare(metadata ptr %prec, metadata !4772, metadata !DIExpression()), !dbg !4773
  %ptradd142 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4774
  %ptradd143 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4775
  %122 = load ptr, ptr %anys, align 8
  %123 = load i64, ptr %ptradd142, align 8
  %124 = load ptr, ptr %format, align 8
  %125 = load i64, ptr %ptradd143, align 8
  %126 = call i64 @std.io.printf_parse_format_field(ptr %retparam144, ptr %122, i64 %123, ptr %variant_index, ptr %124, i64 %125, ptr %i) #5, !dbg !4776
  %not_err145 = icmp eq i64 %126, 0, !dbg !4776
  %127 = call i1 @llvm.expect.i1(i1 %not_err145, i1 true), !dbg !4776
  br i1 %127, label %after_check147, label %assign_optional146, !dbg !4776

assign_optional146:                               ; preds = %if.exit141
  store i64 %126, ptr %prec.f, align 8, !dbg !4776
  br label %after_assign148, !dbg !4776

after_check147:                                   ; preds = %if.exit141
  %128 = load i32, ptr %retparam144, align 4, !dbg !4776
  store i32 %128, ptr %prec, align 4, !dbg !4776
  store i64 0, ptr %prec.f, align 8, !dbg !4776
  br label %after_assign148, !dbg !4776

after_assign148:                                  ; preds = %after_check147, %assign_optional146
  br label %testblock150

testblock150:                                     ; preds = %after_assign148
  %optval151 = load i64, ptr %prec.f, align 8, !dbg !4777
  %not_err152 = icmp eq i64 %optval151, 0, !dbg !4777
  %129 = call i1 @llvm.expect.i1(i1 %not_err152, i1 true), !dbg !4777
  br i1 %129, label %after_check154, label %assign_optional153, !dbg !4777

assign_optional153:                               ; preds = %testblock150
  store i64 %optval151, ptr %temp_err149, align 8, !dbg !4777
  br label %end_block155, !dbg !4777

after_check154:                                   ; preds = %testblock150
  store i64 0, ptr %temp_err149, align 8, !dbg !4777
  br label %end_block155, !dbg !4777

end_block155:                                     ; preds = %after_check154, %assign_optional153
  %130 = load i64, ptr %temp_err149, align 8, !dbg !4777
  %i2b156 = icmp ne i64 %130, 0, !dbg !4777
  br i1 %i2b156, label %if.then157, label %if.exit165, !dbg !4777

if.then157:                                       ; preds = %end_block155
  %131 = load ptr, ptr %self, align 8
  store ptr %131, ptr %f159, align 8
  %132 = load ptr, ptr %f159, align 8
  store %"char[]" { ptr @.str.243, i64 12 }, ptr %taddr161, align 8
  %133 = load [2 x i64], ptr %taddr161, align 8
  %134 = call i64 @std.io.Formatter.out_substr(ptr %retparam160, ptr %132, [2 x i64] %133), !dbg !4778
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %reterr158, align 8, !dbg !4781
  br label %err_retblock164, !dbg !4781

err_retblock164:                                  ; preds = %if.then157
  %135 = load i64, ptr %reterr158, align 8, !dbg !4781
  ret i64 %135, !dbg !4781

if.exit165:                                       ; preds = %end_block155
  %136 = load ptr, ptr %self, align 8, !dbg !4782
  %ptradd166 = getelementptr inbounds i8, ptr %136, i64 16, !dbg !4782
  %ptradd167 = getelementptr inbounds i8, ptr %ptradd166, i64 8, !dbg !4782
  %137 = load i32, ptr %prec, align 4, !dbg !4783
  %lt168 = icmp slt i32 %137, 0, !dbg !4783
  br i1 %lt168, label %cond.lhs, label %cond.rhs, !dbg !4783

cond.lhs:                                         ; preds = %if.exit165
  br label %cond.phi, !dbg !4784

cond.rhs:                                         ; preds = %if.exit165
  %138 = load i32, ptr %prec, align 4, !dbg !4785
  br label %cond.phi, !dbg !4785

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi i32 [ 0, %cond.lhs ], [ %138, %cond.rhs ], !dbg !4785
  store i32 %val, ptr %ptradd167, align 8, !dbg !4785
  %ptradd169 = getelementptr inbounds i8, ptr %format, i64 8, !dbg !4786
  %139 = load i64, ptr %ptradd169, align 8, !dbg !4786
  %140 = load ptr, ptr %format, align 8, !dbg !4786
  %141 = load i64, ptr %i, align 8, !dbg !4787
  %ge170 = icmp uge i64 %141, %139, !dbg !4787
  %142 = call i1 @llvm.expect.i1(i1 %ge170, i1 false), !dbg !4787
  br i1 %142, label %panic171, label %checkok181, !dbg !4787

checkok181:                                       ; preds = %cond.phi
  %ptradd182 = getelementptr inbounds i8, ptr %140, i64 %141, !dbg !4787
  %143 = load i8, ptr %ptradd182, align 1, !dbg !4787
  store i8 %143, ptr %c, align 1, !dbg !4787
  br label %if.exit183, !dbg !4787

if.exit183:                                       ; preds = %checkok181, %if.exit123
  call void @llvm.dbg.declare(metadata ptr %base, metadata !4788, metadata !DIExpression()), !dbg !4789
  store i32 0, ptr %base, align 4, !dbg !4790
  %144 = load i64, ptr %variant_index, align 8, !dbg !4791
  %ptradd184 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4792
  %145 = load i64, ptr %ptradd184, align 8, !dbg !4792
  %ge185 = icmp uge i64 %144, %145, !dbg !4791
  br i1 %ge185, label %if.then186, label %if.exit207, !dbg !4791

if.then186:                                       ; preds = %if.exit183
  %146 = load ptr, ptr %self, align 8
  store ptr %146, ptr %self187, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$NOT_ENOUGH_ARGUMENTS" to i64), ptr %f188, align 8
  %147 = load ptr, ptr %self187, align 8, !dbg !4793
  %ptradd189 = getelementptr inbounds i8, ptr %147, i64 16, !dbg !4793
  %ptradd190 = getelementptr inbounds i8, ptr %ptradd189, i64 24, !dbg !4793
  %148 = load i64, ptr %ptradd190, align 8, !dbg !4793
  %i2b191 = icmp ne i64 %148, 0, !dbg !4793
  br i1 %i2b191, label %if.then192, label %if.exit195, !dbg !4793

if.then192:                                       ; preds = %if.then186
  %149 = load ptr, ptr %self187, align 8, !dbg !4797
  %ptradd193 = getelementptr inbounds i8, ptr %149, i64 16, !dbg !4797
  %ptradd194 = getelementptr inbounds i8, ptr %ptradd193, i64 24, !dbg !4797
  %150 = load i64, ptr %ptradd194, align 8, !dbg !4797
  store i64 %150, ptr %blockret, align 8, !dbg !4797
  br label %expr_block.exit, !dbg !4797

if.exit195:                                       ; preds = %if.then186
  %151 = load ptr, ptr %self187, align 8, !dbg !4798
  %ptradd196 = getelementptr inbounds i8, ptr %151, i64 16, !dbg !4798
  %ptradd197 = getelementptr inbounds i8, ptr %ptradd196, i64 24, !dbg !4798
  %152 = load i64, ptr %f188, align 8, !dbg !4799
  store i64 %152, ptr %ptradd197, align 8, !dbg !4799
  %153 = load i64, ptr %f188, align 8, !dbg !4800
  store i64 %153, ptr %blockret, align 8, !dbg !4800
  br label %expr_block.exit, !dbg !4800

expr_block.exit:                                  ; preds = %if.exit195, %if.then192
  %154 = load i64, ptr %total_len, align 8, !dbg !4801
  %155 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.244, i64 9 }, ptr %taddr200, align 8
  %156 = load [2 x i64], ptr %taddr200, align 8
  %157 = call i64 @std.io.Formatter.out_substr(ptr %retparam199, ptr %155, [2 x i64] %156), !dbg !4802
  %not_err201 = icmp eq i64 %157, 0, !dbg !4802
  %158 = call i1 @llvm.expect.i1(i1 %not_err201, i1 true), !dbg !4802
  br i1 %158, label %after_check203, label %assign_optional202, !dbg !4802

assign_optional202:                               ; preds = %expr_block.exit
  store i64 %157, ptr %error_var198, align 8, !dbg !4802
  br label %guard_block204, !dbg !4802

after_check203:                                   ; preds = %expr_block.exit
  br label %noerr_block205, !dbg !4802

guard_block204:                                   ; preds = %assign_optional202
  %159 = load i64, ptr %error_var198, align 8, !dbg !4802
  ret i64 %159, !dbg !4802

noerr_block205:                                   ; preds = %after_check203
  %160 = load i64, ptr %retparam199, align 8, !dbg !4802
  %add206 = add i64 %154, %160, !dbg !4801
  store i64 %add206, ptr %total_len, align 8, !dbg !4801
  br label %loop.inc, !dbg !4803

if.exit207:                                       ; preds = %if.exit183
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4804, metadata !DIExpression()), !dbg !4805
  %ptradd208 = getelementptr inbounds i8, ptr %anys, i64 8, !dbg !4806
  %161 = load i64, ptr %ptradd208, align 8, !dbg !4806
  %162 = load ptr, ptr %anys, align 8, !dbg !4806
  %163 = load i64, ptr %variant_index, align 8, !dbg !4807
  %add209 = add i64 %163, 1, !dbg !4807
  store i64 %add209, ptr %variant_index, align 8, !dbg !4807
  %ge210 = icmp uge i64 %163, %161, !dbg !4807
  %164 = call i1 @llvm.expect.i1(i1 %ge210, i1 false), !dbg !4807
  br i1 %164, label %panic211, label %checkok221, !dbg !4807

checkok221:                                       ; preds = %if.exit207
  %ptroffset = getelementptr inbounds [16 x i8], ptr %162, i64 %163, !dbg !4807
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %current, ptr align 8 %ptroffset, i32 16, i1 false), !dbg !4807
  %165 = load i8, ptr %c, align 1
  store i8 %165, ptr %switch222, align 1
  br label %switch.entry223

switch.entry223:                                  ; preds = %checkok221
  %166 = load i8, ptr %switch222, align 1
  switch i8 %166, label %switch.default752 [
    i8 100, label %switch.case224
    i8 88, label %switch.case226
    i8 120, label %switch.case228
    i8 79, label %switch.case229
    i8 111, label %switch.case231
    i8 66, label %switch.case232
    i8 98, label %switch.case234
    i8 65, label %switch.case235
    i8 97, label %switch.case237
    i8 70, label %switch.case304
    i8 102, label %switch.case306
    i8 69, label %switch.case377
    i8 101, label %switch.case379
    i8 71, label %switch.case450
    i8 103, label %switch.case452
    i8 99, label %switch.case523
    i8 72, label %switch.case532
    i8 104, label %switch.case534
    i8 115, label %switch.case688
    i8 112, label %switch.case749
  ]

switch.case224:                                   ; preds = %switch.entry223
  store i32 10, ptr %base, align 4, !dbg !4808
  %167 = load ptr, ptr %self, align 8, !dbg !4811
  %ptradd225 = getelementptr inbounds i8, ptr %167, i64 16, !dbg !4811
  %168 = load i32, ptr %ptradd225, align 8, !dbg !4812
  %169 = and i32 %168, -17, !dbg !4812
  store i32 %169, ptr %ptradd225, align 8, !dbg !4812
  br label %switch.exit775, !dbg !4812

switch.case226:                                   ; preds = %switch.entry223
  %170 = load ptr, ptr %self, align 8, !dbg !4813
  %ptradd227 = getelementptr inbounds i8, ptr %170, i64 16, !dbg !4813
  %171 = load i32, ptr %ptradd227, align 8, !dbg !4815
  %172 = and i32 %171, -33, !dbg !4815
  %173 = or i32 %172, 32, !dbg !4815
  store i32 %173, ptr %ptradd227, align 8, !dbg !4815
  br label %switch.case228, !dbg !4816

switch.case228:                                   ; preds = %switch.entry223, %switch.case226
  store i32 16, ptr %base, align 4, !dbg !4817
  br label %switch.exit775, !dbg !4817

switch.case229:                                   ; preds = %switch.entry223
  %174 = load ptr, ptr %self, align 8, !dbg !4819
  %ptradd230 = getelementptr inbounds i8, ptr %174, i64 16, !dbg !4819
  %175 = load i32, ptr %ptradd230, align 8, !dbg !4821
  %176 = and i32 %175, -33, !dbg !4821
  %177 = or i32 %176, 32, !dbg !4821
  store i32 %177, ptr %ptradd230, align 8, !dbg !4821
  br label %switch.case231, !dbg !4822

switch.case231:                                   ; preds = %switch.entry223, %switch.case229
  store i32 8, ptr %base, align 4, !dbg !4823
  br label %switch.exit775, !dbg !4823

switch.case232:                                   ; preds = %switch.entry223
  %178 = load ptr, ptr %self, align 8, !dbg !4825
  %ptradd233 = getelementptr inbounds i8, ptr %178, i64 16, !dbg !4825
  %179 = load i32, ptr %ptradd233, align 8, !dbg !4827
  %180 = and i32 %179, -33, !dbg !4827
  %181 = or i32 %180, 32, !dbg !4827
  store i32 %181, ptr %ptradd233, align 8, !dbg !4827
  br label %switch.case234, !dbg !4828

switch.case234:                                   ; preds = %switch.entry223, %switch.case232
  store i32 2, ptr %base, align 4, !dbg !4829
  br label %switch.exit775, !dbg !4829

switch.case235:                                   ; preds = %switch.entry223
  %182 = load ptr, ptr %self, align 8, !dbg !4831
  %ptradd236 = getelementptr inbounds i8, ptr %182, i64 16, !dbg !4831
  %183 = load i32, ptr %ptradd236, align 8, !dbg !4833
  %184 = and i32 %183, -33, !dbg !4833
  %185 = or i32 %184, 32, !dbg !4833
  store i32 %185, ptr %ptradd236, align 8, !dbg !4833
  br label %switch.case237, !dbg !4834

switch.case237:                                   ; preds = %switch.entry223, %switch.case235
  %186 = load i64, ptr %total_len, align 8, !dbg !4835
  %187 = load ptr, ptr %self, align 8
  store ptr %187, ptr %f239, align 8
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4837, metadata !DIExpression()), !dbg !4839
  %188 = load [2 x i64], ptr %current, align 8
  %189 = call i64 @std.io.float_from_any(ptr %retparam241, [2 x i64] %188), !dbg !4841
  %not_err242 = icmp eq i64 %189, 0, !dbg !4841
  %190 = call i1 @llvm.expect.i1(i1 %not_err242, i1 true), !dbg !4841
  br i1 %190, label %after_check244, label %assign_optional243, !dbg !4841

assign_optional243:                               ; preds = %switch.case237
  store i64 %189, ptr %len.f, align 8, !dbg !4841
  br label %after_assign249, !dbg !4841

after_check244:                                   ; preds = %switch.case237
  %191 = load ptr, ptr %self, align 8
  %192 = load double, ptr %retparam241, align 8
  %193 = call i64 @std.io.Formatter.atoa(ptr %retparam245, ptr %191, double %192), !dbg !4842
  %not_err246 = icmp eq i64 %193, 0, !dbg !4842
  %194 = call i1 @llvm.expect.i1(i1 %not_err246, i1 true), !dbg !4842
  br i1 %194, label %after_check248, label %assign_optional247, !dbg !4842

assign_optional247:                               ; preds = %after_check244
  store i64 %193, ptr %len.f, align 8, !dbg !4842
  br label %after_assign249, !dbg !4842

after_check248:                                   ; preds = %after_check244
  %195 = load i64, ptr %retparam245, align 8, !dbg !4842
  store i64 %195, ptr %len, align 8, !dbg !4842
  store i64 0, ptr %len.f, align 8, !dbg !4842
  br label %after_assign249, !dbg !4842

after_assign249:                                  ; preds = %after_check248, %assign_optional247, %assign_optional243
  call void @llvm.dbg.declare(metadata ptr %err, metadata !4843, metadata !DIExpression()), !dbg !4844
  br label %testblock250, !dbg !4844

testblock250:                                     ; preds = %after_assign249
  %optval251 = load i64, ptr %len.f, align 8, !dbg !4845
  %not_err252 = icmp eq i64 %optval251, 0, !dbg !4845
  %196 = call i1 @llvm.expect.i1(i1 %not_err252, i1 true), !dbg !4845
  br i1 %196, label %after_check254, label %assign_optional253, !dbg !4845

assign_optional253:                               ; preds = %testblock250
  store i64 %optval251, ptr %err, align 8, !dbg !4845
  br label %end_block255, !dbg !4845

after_check254:                                   ; preds = %testblock250
  store i64 0, ptr %err, align 8, !dbg !4845
  br label %end_block255, !dbg !4845

end_block255:                                     ; preds = %after_check254, %assign_optional253
  %197 = load i64, ptr %err, align 8, !dbg !4845
  %neq256 = icmp ne i64 %197, 0, !dbg !4845
  br i1 %neq256, label %if.then257, label %if.exit300, !dbg !4845

if.then257:                                       ; preds = %end_block255
  store i64 %197, ptr %switch258, align 8
  br label %switch.entry259

switch.entry259:                                  ; preds = %if.then257
  %198 = load i64, ptr %switch258, align 8
  %eq260 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %198, !dbg !4846
  br i1 %eq260, label %switch.case262, label %next_if, !dbg !4846

next_if:                                          ; preds = %switch.entry259
  %eq261 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %198, !dbg !4847
  br i1 %eq261, label %switch.case262, label %next_if276, !dbg !4847

switch.case262:                                   ; preds = %next_if, %switch.entry259
  %199 = load ptr, ptr %f239, align 8
  store ptr %199, ptr %self263, align 8
  %200 = load i64, ptr %err, align 8
  store i64 %200, ptr %f264, align 8
  %201 = load ptr, ptr %self263, align 8, !dbg !4848
  %ptradd266 = getelementptr inbounds i8, ptr %201, i64 16, !dbg !4848
  %ptradd267 = getelementptr inbounds i8, ptr %ptradd266, i64 24, !dbg !4848
  %202 = load i64, ptr %ptradd267, align 8, !dbg !4848
  %i2b268 = icmp ne i64 %202, 0, !dbg !4848
  br i1 %i2b268, label %if.then269, label %if.exit272, !dbg !4848

if.then269:                                       ; preds = %switch.case262
  %203 = load ptr, ptr %self263, align 8, !dbg !4852
  %ptradd270 = getelementptr inbounds i8, ptr %203, i64 16, !dbg !4852
  %ptradd271 = getelementptr inbounds i8, ptr %ptradd270, i64 24, !dbg !4852
  %204 = load i64, ptr %ptradd271, align 8, !dbg !4852
  store i64 %204, ptr %blockret265, align 8, !dbg !4852
  br label %expr_block.exit275, !dbg !4852

if.exit272:                                       ; preds = %switch.case262
  %205 = load ptr, ptr %self263, align 8, !dbg !4853
  %ptradd273 = getelementptr inbounds i8, ptr %205, i64 16, !dbg !4853
  %ptradd274 = getelementptr inbounds i8, ptr %ptradd273, i64 24, !dbg !4853
  %206 = load i64, ptr %f264, align 8, !dbg !4854
  store i64 %206, ptr %ptradd274, align 8, !dbg !4854
  %207 = load i64, ptr %f264, align 8, !dbg !4855
  store i64 %207, ptr %blockret265, align 8, !dbg !4855
  br label %expr_block.exit275, !dbg !4855

expr_block.exit275:                               ; preds = %if.exit272, %if.then269
  %208 = load i64, ptr %blockret265, align 8, !dbg !4855
  store i64 %208, ptr %error_var238, align 8, !dbg !4855
  br label %guard_block301, !dbg !4855

next_if276:                                       ; preds = %next_if
  br label %switch.default277, !dbg !4855

switch.default277:                                ; preds = %next_if276
  %209 = load ptr, ptr %f239, align 8
  store ptr %209, ptr %self278, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f279, align 8
  %210 = load ptr, ptr %self278, align 8, !dbg !4856
  %ptradd281 = getelementptr inbounds i8, ptr %210, i64 16, !dbg !4856
  %ptradd282 = getelementptr inbounds i8, ptr %ptradd281, i64 24, !dbg !4856
  %211 = load i64, ptr %ptradd282, align 8, !dbg !4856
  %i2b283 = icmp ne i64 %211, 0, !dbg !4856
  br i1 %i2b283, label %if.then284, label %if.exit287, !dbg !4856

if.then284:                                       ; preds = %switch.default277
  %212 = load ptr, ptr %self278, align 8, !dbg !4860
  %ptradd285 = getelementptr inbounds i8, ptr %212, i64 16, !dbg !4860
  %ptradd286 = getelementptr inbounds i8, ptr %ptradd285, i64 24, !dbg !4860
  %213 = load i64, ptr %ptradd286, align 8, !dbg !4860
  store i64 %213, ptr %blockret280, align 8, !dbg !4860
  br label %expr_block.exit290, !dbg !4860

if.exit287:                                       ; preds = %switch.default277
  %214 = load ptr, ptr %self278, align 8, !dbg !4861
  %ptradd288 = getelementptr inbounds i8, ptr %214, i64 16, !dbg !4861
  %ptradd289 = getelementptr inbounds i8, ptr %ptradd288, i64 24, !dbg !4861
  %215 = load i64, ptr %f279, align 8, !dbg !4862
  store i64 %215, ptr %ptradd289, align 8, !dbg !4862
  %216 = load i64, ptr %f279, align 8, !dbg !4863
  store i64 %216, ptr %blockret280, align 8, !dbg !4863
  br label %expr_block.exit290, !dbg !4863

expr_block.exit290:                               ; preds = %if.exit287, %if.then284
  %217 = load i64, ptr %blockret280, align 8, !dbg !4863
  store i64 %217, ptr %err, align 8, !dbg !4863
  %218 = load ptr, ptr %f239, align 8
  store %"char[]" { ptr @.str.245, i64 9 }, ptr %taddr293, align 8
  %219 = load [2 x i64], ptr %taddr293, align 8
  %220 = call i64 @std.io.Formatter.out_substr(ptr %retparam292, ptr %218, [2 x i64] %219), !dbg !4864
  %not_err294 = icmp eq i64 %220, 0, !dbg !4864
  %221 = call i1 @llvm.expect.i1(i1 %not_err294, i1 true), !dbg !4864
  br i1 %221, label %after_check296, label %assign_optional295, !dbg !4864

assign_optional295:                               ; preds = %expr_block.exit290
  store i64 %220, ptr %error_var291, align 8, !dbg !4864
  br label %guard_block297, !dbg !4864

after_check296:                                   ; preds = %expr_block.exit290
  br label %noerr_block298, !dbg !4864

guard_block297:                                   ; preds = %assign_optional295
  %222 = load i64, ptr %error_var291, align 8, !dbg !4864
  store i64 %222, ptr %error_var238, align 8, !dbg !4864
  br label %guard_block301, !dbg !4864

noerr_block298:                                   ; preds = %after_check296
  %223 = load i64, ptr %err, align 8, !dbg !4865
  store i64 %223, ptr %error_var238, align 8, !dbg !4865
  br label %guard_block301, !dbg !4865

if.exit300:                                       ; preds = %end_block255
  br label %noerr_block302, !dbg !4866

guard_block301:                                   ; preds = %noerr_block298, %guard_block297, %expr_block.exit275
  %224 = load i64, ptr %error_var238, align 8, !dbg !4866
  ret i64 %224, !dbg !4866

noerr_block302:                                   ; preds = %if.exit300
  %225 = load i64, ptr %len, align 8, !dbg !4866
  %add303 = add i64 %186, %225, !dbg !4835
  store i64 %add303, ptr %total_len, align 8, !dbg !4835
  br label %loop.inc, !dbg !4867

switch.case304:                                   ; preds = %switch.entry223
  %226 = load ptr, ptr %self, align 8, !dbg !4868
  %ptradd305 = getelementptr inbounds i8, ptr %226, i64 16, !dbg !4868
  %227 = load i32, ptr %ptradd305, align 8, !dbg !4870
  %228 = and i32 %227, -33, !dbg !4870
  %229 = or i32 %228, 32, !dbg !4870
  store i32 %229, ptr %ptradd305, align 8, !dbg !4870
  br label %switch.case306, !dbg !4871

switch.case306:                                   ; preds = %switch.entry223, %switch.case304
  %230 = load i64, ptr %total_len, align 8, !dbg !4872
  %231 = load ptr, ptr %self, align 8
  store ptr %231, ptr %f308, align 8
  call void @llvm.dbg.declare(metadata ptr %len310, metadata !4874, metadata !DIExpression()), !dbg !4876
  %232 = load [2 x i64], ptr %current, align 8
  %233 = call i64 @std.io.float_from_any(ptr %retparam312, [2 x i64] %232), !dbg !4878
  %not_err313 = icmp eq i64 %233, 0, !dbg !4878
  %234 = call i1 @llvm.expect.i1(i1 %not_err313, i1 true), !dbg !4878
  br i1 %234, label %after_check315, label %assign_optional314, !dbg !4878

assign_optional314:                               ; preds = %switch.case306
  store i64 %233, ptr %len.f311, align 8, !dbg !4878
  br label %after_assign320, !dbg !4878

after_check315:                                   ; preds = %switch.case306
  %235 = load ptr, ptr %self, align 8
  %236 = load double, ptr %retparam312, align 8
  %237 = call i64 @std.io.Formatter.ftoa(ptr %retparam316, ptr %235, double %236), !dbg !4879
  %not_err317 = icmp eq i64 %237, 0, !dbg !4879
  %238 = call i1 @llvm.expect.i1(i1 %not_err317, i1 true), !dbg !4879
  br i1 %238, label %after_check319, label %assign_optional318, !dbg !4879

assign_optional318:                               ; preds = %after_check315
  store i64 %237, ptr %len.f311, align 8, !dbg !4879
  br label %after_assign320, !dbg !4879

after_check319:                                   ; preds = %after_check315
  %239 = load i64, ptr %retparam316, align 8, !dbg !4879
  store i64 %239, ptr %len310, align 8, !dbg !4879
  store i64 0, ptr %len.f311, align 8, !dbg !4879
  br label %after_assign320, !dbg !4879

after_assign320:                                  ; preds = %after_check319, %assign_optional318, %assign_optional314
  call void @llvm.dbg.declare(metadata ptr %err321, metadata !4880, metadata !DIExpression()), !dbg !4881
  br label %testblock322, !dbg !4881

testblock322:                                     ; preds = %after_assign320
  %optval323 = load i64, ptr %len.f311, align 8, !dbg !4882
  %not_err324 = icmp eq i64 %optval323, 0, !dbg !4882
  %240 = call i1 @llvm.expect.i1(i1 %not_err324, i1 true), !dbg !4882
  br i1 %240, label %after_check326, label %assign_optional325, !dbg !4882

assign_optional325:                               ; preds = %testblock322
  store i64 %optval323, ptr %err321, align 8, !dbg !4882
  br label %end_block327, !dbg !4882

after_check326:                                   ; preds = %testblock322
  store i64 0, ptr %err321, align 8, !dbg !4882
  br label %end_block327, !dbg !4882

end_block327:                                     ; preds = %after_check326, %assign_optional325
  %241 = load i64, ptr %err321, align 8, !dbg !4882
  %neq328 = icmp ne i64 %241, 0, !dbg !4882
  br i1 %neq328, label %if.then329, label %if.exit373, !dbg !4882

if.then329:                                       ; preds = %end_block327
  store i64 %241, ptr %switch330, align 8
  br label %switch.entry331

switch.entry331:                                  ; preds = %if.then329
  %242 = load i64, ptr %switch330, align 8
  %eq332 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %242, !dbg !4883
  br i1 %eq332, label %switch.case335, label %next_if333, !dbg !4883

next_if333:                                       ; preds = %switch.entry331
  %eq334 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %242, !dbg !4884
  br i1 %eq334, label %switch.case335, label %next_if349, !dbg !4884

switch.case335:                                   ; preds = %next_if333, %switch.entry331
  %243 = load ptr, ptr %f308, align 8
  store ptr %243, ptr %self336, align 8
  %244 = load i64, ptr %err321, align 8
  store i64 %244, ptr %f337, align 8
  %245 = load ptr, ptr %self336, align 8, !dbg !4885
  %ptradd339 = getelementptr inbounds i8, ptr %245, i64 16, !dbg !4885
  %ptradd340 = getelementptr inbounds i8, ptr %ptradd339, i64 24, !dbg !4885
  %246 = load i64, ptr %ptradd340, align 8, !dbg !4885
  %i2b341 = icmp ne i64 %246, 0, !dbg !4885
  br i1 %i2b341, label %if.then342, label %if.exit345, !dbg !4885

if.then342:                                       ; preds = %switch.case335
  %247 = load ptr, ptr %self336, align 8, !dbg !4889
  %ptradd343 = getelementptr inbounds i8, ptr %247, i64 16, !dbg !4889
  %ptradd344 = getelementptr inbounds i8, ptr %ptradd343, i64 24, !dbg !4889
  %248 = load i64, ptr %ptradd344, align 8, !dbg !4889
  store i64 %248, ptr %blockret338, align 8, !dbg !4889
  br label %expr_block.exit348, !dbg !4889

if.exit345:                                       ; preds = %switch.case335
  %249 = load ptr, ptr %self336, align 8, !dbg !4890
  %ptradd346 = getelementptr inbounds i8, ptr %249, i64 16, !dbg !4890
  %ptradd347 = getelementptr inbounds i8, ptr %ptradd346, i64 24, !dbg !4890
  %250 = load i64, ptr %f337, align 8, !dbg !4891
  store i64 %250, ptr %ptradd347, align 8, !dbg !4891
  %251 = load i64, ptr %f337, align 8, !dbg !4892
  store i64 %251, ptr %blockret338, align 8, !dbg !4892
  br label %expr_block.exit348, !dbg !4892

expr_block.exit348:                               ; preds = %if.exit345, %if.then342
  %252 = load i64, ptr %blockret338, align 8, !dbg !4892
  store i64 %252, ptr %error_var307, align 8, !dbg !4892
  br label %guard_block374, !dbg !4892

next_if349:                                       ; preds = %next_if333
  br label %switch.default350, !dbg !4892

switch.default350:                                ; preds = %next_if349
  %253 = load ptr, ptr %f308, align 8
  store ptr %253, ptr %self351, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f352, align 8
  %254 = load ptr, ptr %self351, align 8, !dbg !4893
  %ptradd354 = getelementptr inbounds i8, ptr %254, i64 16, !dbg !4893
  %ptradd355 = getelementptr inbounds i8, ptr %ptradd354, i64 24, !dbg !4893
  %255 = load i64, ptr %ptradd355, align 8, !dbg !4893
  %i2b356 = icmp ne i64 %255, 0, !dbg !4893
  br i1 %i2b356, label %if.then357, label %if.exit360, !dbg !4893

if.then357:                                       ; preds = %switch.default350
  %256 = load ptr, ptr %self351, align 8, !dbg !4897
  %ptradd358 = getelementptr inbounds i8, ptr %256, i64 16, !dbg !4897
  %ptradd359 = getelementptr inbounds i8, ptr %ptradd358, i64 24, !dbg !4897
  %257 = load i64, ptr %ptradd359, align 8, !dbg !4897
  store i64 %257, ptr %blockret353, align 8, !dbg !4897
  br label %expr_block.exit363, !dbg !4897

if.exit360:                                       ; preds = %switch.default350
  %258 = load ptr, ptr %self351, align 8, !dbg !4898
  %ptradd361 = getelementptr inbounds i8, ptr %258, i64 16, !dbg !4898
  %ptradd362 = getelementptr inbounds i8, ptr %ptradd361, i64 24, !dbg !4898
  %259 = load i64, ptr %f352, align 8, !dbg !4899
  store i64 %259, ptr %ptradd362, align 8, !dbg !4899
  %260 = load i64, ptr %f352, align 8, !dbg !4900
  store i64 %260, ptr %blockret353, align 8, !dbg !4900
  br label %expr_block.exit363, !dbg !4900

expr_block.exit363:                               ; preds = %if.exit360, %if.then357
  %261 = load i64, ptr %blockret353, align 8, !dbg !4900
  store i64 %261, ptr %err321, align 8, !dbg !4900
  %262 = load ptr, ptr %f308, align 8
  store %"char[]" { ptr @.str.246, i64 9 }, ptr %taddr366, align 8
  %263 = load [2 x i64], ptr %taddr366, align 8
  %264 = call i64 @std.io.Formatter.out_substr(ptr %retparam365, ptr %262, [2 x i64] %263), !dbg !4901
  %not_err367 = icmp eq i64 %264, 0, !dbg !4901
  %265 = call i1 @llvm.expect.i1(i1 %not_err367, i1 true), !dbg !4901
  br i1 %265, label %after_check369, label %assign_optional368, !dbg !4901

assign_optional368:                               ; preds = %expr_block.exit363
  store i64 %264, ptr %error_var364, align 8, !dbg !4901
  br label %guard_block370, !dbg !4901

after_check369:                                   ; preds = %expr_block.exit363
  br label %noerr_block371, !dbg !4901

guard_block370:                                   ; preds = %assign_optional368
  %266 = load i64, ptr %error_var364, align 8, !dbg !4901
  store i64 %266, ptr %error_var307, align 8, !dbg !4901
  br label %guard_block374, !dbg !4901

noerr_block371:                                   ; preds = %after_check369
  %267 = load i64, ptr %err321, align 8, !dbg !4902
  store i64 %267, ptr %error_var307, align 8, !dbg !4902
  br label %guard_block374, !dbg !4902

if.exit373:                                       ; preds = %end_block327
  br label %noerr_block375, !dbg !4903

guard_block374:                                   ; preds = %noerr_block371, %guard_block370, %expr_block.exit348
  %268 = load i64, ptr %error_var307, align 8, !dbg !4903
  ret i64 %268, !dbg !4903

noerr_block375:                                   ; preds = %if.exit373
  %269 = load i64, ptr %len310, align 8, !dbg !4903
  %add376 = add i64 %230, %269, !dbg !4872
  store i64 %add376, ptr %total_len, align 8, !dbg !4872
  br label %loop.inc, !dbg !4904

switch.case377:                                   ; preds = %switch.entry223
  %270 = load ptr, ptr %self, align 8, !dbg !4905
  %ptradd378 = getelementptr inbounds i8, ptr %270, i64 16, !dbg !4905
  %271 = load i32, ptr %ptradd378, align 8, !dbg !4907
  %272 = and i32 %271, -33, !dbg !4907
  %273 = or i32 %272, 32, !dbg !4907
  store i32 %273, ptr %ptradd378, align 8, !dbg !4907
  br label %switch.case379, !dbg !4908

switch.case379:                                   ; preds = %switch.entry223, %switch.case377
  %274 = load i64, ptr %total_len, align 8, !dbg !4909
  %275 = load ptr, ptr %self, align 8
  store ptr %275, ptr %f381, align 8
  call void @llvm.dbg.declare(metadata ptr %len383, metadata !4911, metadata !DIExpression()), !dbg !4913
  %276 = load [2 x i64], ptr %current, align 8
  %277 = call i64 @std.io.float_from_any(ptr %retparam385, [2 x i64] %276), !dbg !4915
  %not_err386 = icmp eq i64 %277, 0, !dbg !4915
  %278 = call i1 @llvm.expect.i1(i1 %not_err386, i1 true), !dbg !4915
  br i1 %278, label %after_check388, label %assign_optional387, !dbg !4915

assign_optional387:                               ; preds = %switch.case379
  store i64 %277, ptr %len.f384, align 8, !dbg !4915
  br label %after_assign393, !dbg !4915

after_check388:                                   ; preds = %switch.case379
  %279 = load ptr, ptr %self, align 8
  %280 = load double, ptr %retparam385, align 8
  %281 = call i64 @std.io.Formatter.etoa(ptr %retparam389, ptr %279, double %280), !dbg !4916
  %not_err390 = icmp eq i64 %281, 0, !dbg !4916
  %282 = call i1 @llvm.expect.i1(i1 %not_err390, i1 true), !dbg !4916
  br i1 %282, label %after_check392, label %assign_optional391, !dbg !4916

assign_optional391:                               ; preds = %after_check388
  store i64 %281, ptr %len.f384, align 8, !dbg !4916
  br label %after_assign393, !dbg !4916

after_check392:                                   ; preds = %after_check388
  %283 = load i64, ptr %retparam389, align 8, !dbg !4916
  store i64 %283, ptr %len383, align 8, !dbg !4916
  store i64 0, ptr %len.f384, align 8, !dbg !4916
  br label %after_assign393, !dbg !4916

after_assign393:                                  ; preds = %after_check392, %assign_optional391, %assign_optional387
  call void @llvm.dbg.declare(metadata ptr %err394, metadata !4917, metadata !DIExpression()), !dbg !4918
  br label %testblock395, !dbg !4918

testblock395:                                     ; preds = %after_assign393
  %optval396 = load i64, ptr %len.f384, align 8, !dbg !4919
  %not_err397 = icmp eq i64 %optval396, 0, !dbg !4919
  %284 = call i1 @llvm.expect.i1(i1 %not_err397, i1 true), !dbg !4919
  br i1 %284, label %after_check399, label %assign_optional398, !dbg !4919

assign_optional398:                               ; preds = %testblock395
  store i64 %optval396, ptr %err394, align 8, !dbg !4919
  br label %end_block400, !dbg !4919

after_check399:                                   ; preds = %testblock395
  store i64 0, ptr %err394, align 8, !dbg !4919
  br label %end_block400, !dbg !4919

end_block400:                                     ; preds = %after_check399, %assign_optional398
  %285 = load i64, ptr %err394, align 8, !dbg !4919
  %neq401 = icmp ne i64 %285, 0, !dbg !4919
  br i1 %neq401, label %if.then402, label %if.exit446, !dbg !4919

if.then402:                                       ; preds = %end_block400
  store i64 %285, ptr %switch403, align 8
  br label %switch.entry404

switch.entry404:                                  ; preds = %if.then402
  %286 = load i64, ptr %switch403, align 8
  %eq405 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %286, !dbg !4920
  br i1 %eq405, label %switch.case408, label %next_if406, !dbg !4920

next_if406:                                       ; preds = %switch.entry404
  %eq407 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %286, !dbg !4921
  br i1 %eq407, label %switch.case408, label %next_if422, !dbg !4921

switch.case408:                                   ; preds = %next_if406, %switch.entry404
  %287 = load ptr, ptr %f381, align 8
  store ptr %287, ptr %self409, align 8
  %288 = load i64, ptr %err394, align 8
  store i64 %288, ptr %f410, align 8
  %289 = load ptr, ptr %self409, align 8, !dbg !4922
  %ptradd412 = getelementptr inbounds i8, ptr %289, i64 16, !dbg !4922
  %ptradd413 = getelementptr inbounds i8, ptr %ptradd412, i64 24, !dbg !4922
  %290 = load i64, ptr %ptradd413, align 8, !dbg !4922
  %i2b414 = icmp ne i64 %290, 0, !dbg !4922
  br i1 %i2b414, label %if.then415, label %if.exit418, !dbg !4922

if.then415:                                       ; preds = %switch.case408
  %291 = load ptr, ptr %self409, align 8, !dbg !4926
  %ptradd416 = getelementptr inbounds i8, ptr %291, i64 16, !dbg !4926
  %ptradd417 = getelementptr inbounds i8, ptr %ptradd416, i64 24, !dbg !4926
  %292 = load i64, ptr %ptradd417, align 8, !dbg !4926
  store i64 %292, ptr %blockret411, align 8, !dbg !4926
  br label %expr_block.exit421, !dbg !4926

if.exit418:                                       ; preds = %switch.case408
  %293 = load ptr, ptr %self409, align 8, !dbg !4927
  %ptradd419 = getelementptr inbounds i8, ptr %293, i64 16, !dbg !4927
  %ptradd420 = getelementptr inbounds i8, ptr %ptradd419, i64 24, !dbg !4927
  %294 = load i64, ptr %f410, align 8, !dbg !4928
  store i64 %294, ptr %ptradd420, align 8, !dbg !4928
  %295 = load i64, ptr %f410, align 8, !dbg !4929
  store i64 %295, ptr %blockret411, align 8, !dbg !4929
  br label %expr_block.exit421, !dbg !4929

expr_block.exit421:                               ; preds = %if.exit418, %if.then415
  %296 = load i64, ptr %blockret411, align 8, !dbg !4929
  store i64 %296, ptr %error_var380, align 8, !dbg !4929
  br label %guard_block447, !dbg !4929

next_if422:                                       ; preds = %next_if406
  br label %switch.default423, !dbg !4929

switch.default423:                                ; preds = %next_if422
  %297 = load ptr, ptr %f381, align 8
  store ptr %297, ptr %self424, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f425, align 8
  %298 = load ptr, ptr %self424, align 8, !dbg !4930
  %ptradd427 = getelementptr inbounds i8, ptr %298, i64 16, !dbg !4930
  %ptradd428 = getelementptr inbounds i8, ptr %ptradd427, i64 24, !dbg !4930
  %299 = load i64, ptr %ptradd428, align 8, !dbg !4930
  %i2b429 = icmp ne i64 %299, 0, !dbg !4930
  br i1 %i2b429, label %if.then430, label %if.exit433, !dbg !4930

if.then430:                                       ; preds = %switch.default423
  %300 = load ptr, ptr %self424, align 8, !dbg !4934
  %ptradd431 = getelementptr inbounds i8, ptr %300, i64 16, !dbg !4934
  %ptradd432 = getelementptr inbounds i8, ptr %ptradd431, i64 24, !dbg !4934
  %301 = load i64, ptr %ptradd432, align 8, !dbg !4934
  store i64 %301, ptr %blockret426, align 8, !dbg !4934
  br label %expr_block.exit436, !dbg !4934

if.exit433:                                       ; preds = %switch.default423
  %302 = load ptr, ptr %self424, align 8, !dbg !4935
  %ptradd434 = getelementptr inbounds i8, ptr %302, i64 16, !dbg !4935
  %ptradd435 = getelementptr inbounds i8, ptr %ptradd434, i64 24, !dbg !4935
  %303 = load i64, ptr %f425, align 8, !dbg !4936
  store i64 %303, ptr %ptradd435, align 8, !dbg !4936
  %304 = load i64, ptr %f425, align 8, !dbg !4937
  store i64 %304, ptr %blockret426, align 8, !dbg !4937
  br label %expr_block.exit436, !dbg !4937

expr_block.exit436:                               ; preds = %if.exit433, %if.then430
  %305 = load i64, ptr %blockret426, align 8, !dbg !4937
  store i64 %305, ptr %err394, align 8, !dbg !4937
  %306 = load ptr, ptr %f381, align 8
  store %"char[]" { ptr @.str.247, i64 9 }, ptr %taddr439, align 8
  %307 = load [2 x i64], ptr %taddr439, align 8
  %308 = call i64 @std.io.Formatter.out_substr(ptr %retparam438, ptr %306, [2 x i64] %307), !dbg !4938
  %not_err440 = icmp eq i64 %308, 0, !dbg !4938
  %309 = call i1 @llvm.expect.i1(i1 %not_err440, i1 true), !dbg !4938
  br i1 %309, label %after_check442, label %assign_optional441, !dbg !4938

assign_optional441:                               ; preds = %expr_block.exit436
  store i64 %308, ptr %error_var437, align 8, !dbg !4938
  br label %guard_block443, !dbg !4938

after_check442:                                   ; preds = %expr_block.exit436
  br label %noerr_block444, !dbg !4938

guard_block443:                                   ; preds = %assign_optional441
  %310 = load i64, ptr %error_var437, align 8, !dbg !4938
  store i64 %310, ptr %error_var380, align 8, !dbg !4938
  br label %guard_block447, !dbg !4938

noerr_block444:                                   ; preds = %after_check442
  %311 = load i64, ptr %err394, align 8, !dbg !4939
  store i64 %311, ptr %error_var380, align 8, !dbg !4939
  br label %guard_block447, !dbg !4939

if.exit446:                                       ; preds = %end_block400
  br label %noerr_block448, !dbg !4940

guard_block447:                                   ; preds = %noerr_block444, %guard_block443, %expr_block.exit421
  %312 = load i64, ptr %error_var380, align 8, !dbg !4940
  ret i64 %312, !dbg !4940

noerr_block448:                                   ; preds = %if.exit446
  %313 = load i64, ptr %len383, align 8, !dbg !4940
  %add449 = add i64 %274, %313, !dbg !4909
  store i64 %add449, ptr %total_len, align 8, !dbg !4909
  br label %loop.inc, !dbg !4941

switch.case450:                                   ; preds = %switch.entry223
  %314 = load ptr, ptr %self, align 8, !dbg !4942
  %ptradd451 = getelementptr inbounds i8, ptr %314, i64 16, !dbg !4942
  %315 = load i32, ptr %ptradd451, align 8, !dbg !4944
  %316 = and i32 %315, -33, !dbg !4944
  %317 = or i32 %316, 32, !dbg !4944
  store i32 %317, ptr %ptradd451, align 8, !dbg !4944
  br label %switch.case452, !dbg !4945

switch.case452:                                   ; preds = %switch.entry223, %switch.case450
  %318 = load i64, ptr %total_len, align 8, !dbg !4946
  %319 = load ptr, ptr %self, align 8
  store ptr %319, ptr %f454, align 8
  call void @llvm.dbg.declare(metadata ptr %len456, metadata !4948, metadata !DIExpression()), !dbg !4950
  %320 = load [2 x i64], ptr %current, align 8
  %321 = call i64 @std.io.float_from_any(ptr %retparam458, [2 x i64] %320), !dbg !4952
  %not_err459 = icmp eq i64 %321, 0, !dbg !4952
  %322 = call i1 @llvm.expect.i1(i1 %not_err459, i1 true), !dbg !4952
  br i1 %322, label %after_check461, label %assign_optional460, !dbg !4952

assign_optional460:                               ; preds = %switch.case452
  store i64 %321, ptr %len.f457, align 8, !dbg !4952
  br label %after_assign466, !dbg !4952

after_check461:                                   ; preds = %switch.case452
  %323 = load ptr, ptr %self, align 8
  %324 = load double, ptr %retparam458, align 8
  %325 = call i64 @std.io.Formatter.gtoa(ptr %retparam462, ptr %323, double %324), !dbg !4953
  %not_err463 = icmp eq i64 %325, 0, !dbg !4953
  %326 = call i1 @llvm.expect.i1(i1 %not_err463, i1 true), !dbg !4953
  br i1 %326, label %after_check465, label %assign_optional464, !dbg !4953

assign_optional464:                               ; preds = %after_check461
  store i64 %325, ptr %len.f457, align 8, !dbg !4953
  br label %after_assign466, !dbg !4953

after_check465:                                   ; preds = %after_check461
  %327 = load i64, ptr %retparam462, align 8, !dbg !4953
  store i64 %327, ptr %len456, align 8, !dbg !4953
  store i64 0, ptr %len.f457, align 8, !dbg !4953
  br label %after_assign466, !dbg !4953

after_assign466:                                  ; preds = %after_check465, %assign_optional464, %assign_optional460
  call void @llvm.dbg.declare(metadata ptr %err467, metadata !4954, metadata !DIExpression()), !dbg !4955
  br label %testblock468, !dbg !4955

testblock468:                                     ; preds = %after_assign466
  %optval469 = load i64, ptr %len.f457, align 8, !dbg !4956
  %not_err470 = icmp eq i64 %optval469, 0, !dbg !4956
  %328 = call i1 @llvm.expect.i1(i1 %not_err470, i1 true), !dbg !4956
  br i1 %328, label %after_check472, label %assign_optional471, !dbg !4956

assign_optional471:                               ; preds = %testblock468
  store i64 %optval469, ptr %err467, align 8, !dbg !4956
  br label %end_block473, !dbg !4956

after_check472:                                   ; preds = %testblock468
  store i64 0, ptr %err467, align 8, !dbg !4956
  br label %end_block473, !dbg !4956

end_block473:                                     ; preds = %after_check472, %assign_optional471
  %329 = load i64, ptr %err467, align 8, !dbg !4956
  %neq474 = icmp ne i64 %329, 0, !dbg !4956
  br i1 %neq474, label %if.then475, label %if.exit519, !dbg !4956

if.then475:                                       ; preds = %end_block473
  store i64 %329, ptr %switch476, align 8
  br label %switch.entry477

switch.entry477:                                  ; preds = %if.then475
  %330 = load i64, ptr %switch476, align 8
  %eq478 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %330, !dbg !4957
  br i1 %eq478, label %switch.case481, label %next_if479, !dbg !4957

next_if479:                                       ; preds = %switch.entry477
  %eq480 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %330, !dbg !4958
  br i1 %eq480, label %switch.case481, label %next_if495, !dbg !4958

switch.case481:                                   ; preds = %next_if479, %switch.entry477
  %331 = load ptr, ptr %f454, align 8
  store ptr %331, ptr %self482, align 8
  %332 = load i64, ptr %err467, align 8
  store i64 %332, ptr %f483, align 8
  %333 = load ptr, ptr %self482, align 8, !dbg !4959
  %ptradd485 = getelementptr inbounds i8, ptr %333, i64 16, !dbg !4959
  %ptradd486 = getelementptr inbounds i8, ptr %ptradd485, i64 24, !dbg !4959
  %334 = load i64, ptr %ptradd486, align 8, !dbg !4959
  %i2b487 = icmp ne i64 %334, 0, !dbg !4959
  br i1 %i2b487, label %if.then488, label %if.exit491, !dbg !4959

if.then488:                                       ; preds = %switch.case481
  %335 = load ptr, ptr %self482, align 8, !dbg !4963
  %ptradd489 = getelementptr inbounds i8, ptr %335, i64 16, !dbg !4963
  %ptradd490 = getelementptr inbounds i8, ptr %ptradd489, i64 24, !dbg !4963
  %336 = load i64, ptr %ptradd490, align 8, !dbg !4963
  store i64 %336, ptr %blockret484, align 8, !dbg !4963
  br label %expr_block.exit494, !dbg !4963

if.exit491:                                       ; preds = %switch.case481
  %337 = load ptr, ptr %self482, align 8, !dbg !4964
  %ptradd492 = getelementptr inbounds i8, ptr %337, i64 16, !dbg !4964
  %ptradd493 = getelementptr inbounds i8, ptr %ptradd492, i64 24, !dbg !4964
  %338 = load i64, ptr %f483, align 8, !dbg !4965
  store i64 %338, ptr %ptradd493, align 8, !dbg !4965
  %339 = load i64, ptr %f483, align 8, !dbg !4966
  store i64 %339, ptr %blockret484, align 8, !dbg !4966
  br label %expr_block.exit494, !dbg !4966

expr_block.exit494:                               ; preds = %if.exit491, %if.then488
  %340 = load i64, ptr %blockret484, align 8, !dbg !4966
  store i64 %340, ptr %error_var453, align 8, !dbg !4966
  br label %guard_block520, !dbg !4966

next_if495:                                       ; preds = %next_if479
  br label %switch.default496, !dbg !4966

switch.default496:                                ; preds = %next_if495
  %341 = load ptr, ptr %f454, align 8
  store ptr %341, ptr %self497, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f498, align 8
  %342 = load ptr, ptr %self497, align 8, !dbg !4967
  %ptradd500 = getelementptr inbounds i8, ptr %342, i64 16, !dbg !4967
  %ptradd501 = getelementptr inbounds i8, ptr %ptradd500, i64 24, !dbg !4967
  %343 = load i64, ptr %ptradd501, align 8, !dbg !4967
  %i2b502 = icmp ne i64 %343, 0, !dbg !4967
  br i1 %i2b502, label %if.then503, label %if.exit506, !dbg !4967

if.then503:                                       ; preds = %switch.default496
  %344 = load ptr, ptr %self497, align 8, !dbg !4971
  %ptradd504 = getelementptr inbounds i8, ptr %344, i64 16, !dbg !4971
  %ptradd505 = getelementptr inbounds i8, ptr %ptradd504, i64 24, !dbg !4971
  %345 = load i64, ptr %ptradd505, align 8, !dbg !4971
  store i64 %345, ptr %blockret499, align 8, !dbg !4971
  br label %expr_block.exit509, !dbg !4971

if.exit506:                                       ; preds = %switch.default496
  %346 = load ptr, ptr %self497, align 8, !dbg !4972
  %ptradd507 = getelementptr inbounds i8, ptr %346, i64 16, !dbg !4972
  %ptradd508 = getelementptr inbounds i8, ptr %ptradd507, i64 24, !dbg !4972
  %347 = load i64, ptr %f498, align 8, !dbg !4973
  store i64 %347, ptr %ptradd508, align 8, !dbg !4973
  %348 = load i64, ptr %f498, align 8, !dbg !4974
  store i64 %348, ptr %blockret499, align 8, !dbg !4974
  br label %expr_block.exit509, !dbg !4974

expr_block.exit509:                               ; preds = %if.exit506, %if.then503
  %349 = load i64, ptr %blockret499, align 8, !dbg !4974
  store i64 %349, ptr %err467, align 8, !dbg !4974
  %350 = load ptr, ptr %f454, align 8
  store %"char[]" { ptr @.str.248, i64 9 }, ptr %taddr512, align 8
  %351 = load [2 x i64], ptr %taddr512, align 8
  %352 = call i64 @std.io.Formatter.out_substr(ptr %retparam511, ptr %350, [2 x i64] %351), !dbg !4975
  %not_err513 = icmp eq i64 %352, 0, !dbg !4975
  %353 = call i1 @llvm.expect.i1(i1 %not_err513, i1 true), !dbg !4975
  br i1 %353, label %after_check515, label %assign_optional514, !dbg !4975

assign_optional514:                               ; preds = %expr_block.exit509
  store i64 %352, ptr %error_var510, align 8, !dbg !4975
  br label %guard_block516, !dbg !4975

after_check515:                                   ; preds = %expr_block.exit509
  br label %noerr_block517, !dbg !4975

guard_block516:                                   ; preds = %assign_optional514
  %354 = load i64, ptr %error_var510, align 8, !dbg !4975
  store i64 %354, ptr %error_var453, align 8, !dbg !4975
  br label %guard_block520, !dbg !4975

noerr_block517:                                   ; preds = %after_check515
  %355 = load i64, ptr %err467, align 8, !dbg !4976
  store i64 %355, ptr %error_var453, align 8, !dbg !4976
  br label %guard_block520, !dbg !4976

if.exit519:                                       ; preds = %end_block473
  br label %noerr_block521, !dbg !4977

guard_block520:                                   ; preds = %noerr_block517, %guard_block516, %expr_block.exit494
  %356 = load i64, ptr %error_var453, align 8, !dbg !4977
  ret i64 %356, !dbg !4977

noerr_block521:                                   ; preds = %if.exit519
  %357 = load i64, ptr %len456, align 8, !dbg !4977
  %add522 = add i64 %318, %357, !dbg !4946
  store i64 %add522, ptr %total_len, align 8, !dbg !4946
  br label %loop.inc, !dbg !4978

switch.case523:                                   ; preds = %switch.entry223
  %358 = load i64, ptr %total_len, align 8, !dbg !4979
  %359 = load ptr, ptr %self, align 8
  %360 = load [2 x i64], ptr %current, align 8
  %361 = call i64 @std.io.Formatter.out_char(ptr %retparam525, ptr %359, [2 x i64] %360), !dbg !4981
  %not_err526 = icmp eq i64 %361, 0, !dbg !4981
  %362 = call i1 @llvm.expect.i1(i1 %not_err526, i1 true), !dbg !4981
  br i1 %362, label %after_check528, label %assign_optional527, !dbg !4981

assign_optional527:                               ; preds = %switch.case523
  store i64 %361, ptr %error_var524, align 8, !dbg !4981
  br label %guard_block529, !dbg !4981

after_check528:                                   ; preds = %switch.case523
  br label %noerr_block530, !dbg !4981

guard_block529:                                   ; preds = %assign_optional527
  %363 = load i64, ptr %error_var524, align 8, !dbg !4981
  ret i64 %363, !dbg !4981

noerr_block530:                                   ; preds = %after_check528
  %364 = load i64, ptr %retparam525, align 8, !dbg !4981
  %add531 = add i64 %358, %364, !dbg !4979
  store i64 %add531, ptr %total_len, align 8, !dbg !4979
  br label %loop.inc, !dbg !4982

switch.case532:                                   ; preds = %switch.entry223
  %365 = load ptr, ptr %self, align 8, !dbg !4983
  %ptradd533 = getelementptr inbounds i8, ptr %365, i64 16, !dbg !4983
  %366 = load i32, ptr %ptradd533, align 8, !dbg !4985
  %367 = and i32 %366, -33, !dbg !4985
  %368 = or i32 %367, 32, !dbg !4985
  store i32 %368, ptr %ptradd533, align 8, !dbg !4985
  br label %switch.case534, !dbg !4986

switch.case534:                                   ; preds = %switch.entry223, %switch.case532
  call void @llvm.dbg.declare(metadata ptr %out, metadata !4987, metadata !DIExpression()), !dbg !4989
  %ptradd535 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !4990
  %369 = load i64, ptr %ptradd535, align 8
  store i64 %369, ptr %switch536, align 8
  br label %switch.entry537

switch.entry537:                                  ; preds = %switch.case534
  %370 = load i64, ptr %switch536, align 8
  br label %check_subtype, !dbg !4992

check_subtype:                                    ; preds = %parent_type_block, %switch.entry537
  %371 = phi i64 [ %370, %switch.entry537 ], [ %typeid.parent, %parent_type_block ], !dbg !4992
  %eq538 = icmp eq i64 ptrtoint (ptr @"$ct.sa$char" to i64), %371, !dbg !4992
  br i1 %eq538, label %result_block, label %parent_type_block, !dbg !4992

parent_type_block:                                ; preds = %check_subtype
  %372 = inttoptr i64 %371 to ptr, !dbg !4992
  %ptradd539 = getelementptr inbounds i8, ptr %372, i64 8, !dbg !4992
  %typeid.parent = load i64, ptr %ptradd539, align 8, !dbg !4992
  %373 = icmp eq i64 %typeid.parent, 0, !dbg !4992
  br i1 %373, label %result_block, label %check_subtype, !dbg !4992

result_block:                                     ; preds = %parent_type_block, %check_subtype
  %374 = phi i1 [ false, %parent_type_block ], [ true, %check_subtype ], !dbg !4992
  br i1 %374, label %switch.case540, label %next_if547, !dbg !4992

switch.case540:                                   ; preds = %result_block
  call void @llvm.dbg.declare(metadata ptr %current541, metadata !4993, metadata !DIExpression()), !dbg !4995
  %375 = load ptr, ptr %current, align 8, !dbg !4995
  store ptr %375, ptr %current541, align 8, !dbg !4995
  %376 = load ptr, ptr %current541, align 8, !dbg !4996
  %checknull = icmp eq ptr %376, null, !dbg !4996
  %377 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4996
  br i1 %377, label %panic542, label %checkok546, !dbg !4996

checkok546:                                       ; preds = %switch.case540
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %376, i32 16, i1 false), !dbg !4996
  br label %switch.exit634, !dbg !4996

next_if547:                                       ; preds = %result_block
  br label %check_subtype548, !dbg !4997

check_subtype548:                                 ; preds = %parent_type_block550, %next_if547
  %378 = phi i64 [ %370, %next_if547 ], [ %typeid.parent552, %parent_type_block550 ], !dbg !4997
  %eq549 = icmp eq i64 ptrtoint (ptr @"$ct.sa$ichar" to i64), %378, !dbg !4997
  br i1 %eq549, label %result_block553, label %parent_type_block550, !dbg !4997

parent_type_block550:                             ; preds = %check_subtype548
  %379 = inttoptr i64 %378 to ptr, !dbg !4997
  %ptradd551 = getelementptr inbounds i8, ptr %379, i64 8, !dbg !4997
  %typeid.parent552 = load i64, ptr %ptradd551, align 8, !dbg !4997
  %380 = icmp eq i64 %typeid.parent552, 0, !dbg !4997
  br i1 %380, label %result_block553, label %check_subtype548, !dbg !4997

result_block553:                                  ; preds = %parent_type_block550, %check_subtype548
  %381 = phi i1 [ false, %parent_type_block550 ], [ true, %check_subtype548 ], !dbg !4997
  br i1 %381, label %switch.case554, label %next_if562, !dbg !4997

switch.case554:                                   ; preds = %result_block553
  call void @llvm.dbg.declare(metadata ptr %current555, metadata !4998, metadata !DIExpression()), !dbg !5005
  %382 = load ptr, ptr %current, align 8, !dbg !5005
  store ptr %382, ptr %current555, align 8, !dbg !5005
  %383 = load ptr, ptr %current555, align 8, !dbg !5006
  %checknull556 = icmp eq ptr %383, null, !dbg !5006
  %384 = call i1 @llvm.expect.i1(i1 %checknull556, i1 false), !dbg !5006
  br i1 %384, label %panic557, label %checkok561, !dbg !5006

checkok561:                                       ; preds = %switch.case554
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %out, ptr align 8 %383, i32 16, i1 false), !dbg !5007
  br label %switch.exit634, !dbg !5007

next_if562:                                       ; preds = %result_block553
  br label %switch.default563, !dbg !5007

switch.default563:                                ; preds = %next_if562
  %ptradd564 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5008
  %385 = load i64, ptr %ptradd564, align 8, !dbg !5008
  %"introspect*" = inttoptr i64 %385 to ptr, !dbg !5008
  %typeid.kind = load i8, ptr %"introspect*", align 8, !dbg !5008
  %eq565 = icmp eq i8 %typeid.kind, 15, !dbg !5008
  br i1 %eq565, label %and.rhs, label %and.phi, !dbg !5008

and.rhs:                                          ; preds = %switch.default563
  %ptradd566 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5010
  %386 = load i64, ptr %ptradd566, align 8, !dbg !5010
  %"introspect*567" = inttoptr i64 %386 to ptr, !dbg !5010
  %typeid.kind568 = load i8, ptr %"introspect*567", align 8, !dbg !5010
  %eq569 = icmp eq i8 %typeid.kind568, 15, !dbg !5010
  br i1 %eq569, label %check_type_ok, label %check_next, !dbg !5010

check_next:                                       ; preds = %and.rhs
  %eq570 = icmp eq i8 %typeid.kind568, 19, !dbg !5010
  br i1 %eq570, label %check_type_ok, label %check_next571, !dbg !5010

check_next571:                                    ; preds = %check_next
  %eq572 = icmp eq i8 %typeid.kind568, 17, !dbg !5010
  br i1 %eq572, label %check_type_ok, label %check_next573, !dbg !5010

check_next573:                                    ; preds = %check_next571
  %eq574 = icmp eq i8 %typeid.kind568, 8, !dbg !5010
  br i1 %eq574, label %check_type_ok, label %check_next575, !dbg !5010

check_next575:                                    ; preds = %check_next573
  %eq576 = icmp eq i8 %typeid.kind568, 16, !dbg !5010
  br i1 %eq576, label %check_type_ok, label %check_next577, !dbg !5010

check_next577:                                    ; preds = %check_next575
  %eq578 = icmp eq i8 %typeid.kind568, 18, !dbg !5010
  br i1 %eq578, label %check_type_ok, label %check_next579, !dbg !5010

check_next579:                                    ; preds = %check_next577
  %eq580 = icmp eq i8 %typeid.kind568, 14, !dbg !5010
  br i1 %eq580, label %check_type_ok, label %check_next581, !dbg !5010

check_next581:                                    ; preds = %check_next579
  %eq582 = icmp eq i8 %typeid.kind568, 12, !dbg !5010
  br i1 %eq582, label %check_type_ok, label %check_next583, !dbg !5010

check_next583:                                    ; preds = %check_next581
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr584, align 8
  %387 = load [2 x i64], ptr %taddr584, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr585, align 8
  %388 = load [2 x i64], ptr %taddr585, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr586, align 8
  %389 = load [2 x i64], ptr %taddr586, align 8
  %390 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %390([2 x i64] %387, [2 x i64] %388, [2 x i64] %389, i32 491), !dbg !5010
  unreachable, !dbg !5010

check_type_ok:                                    ; preds = %check_next581, %check_next579, %check_next577, %check_next575, %check_next573, %check_next571, %check_next, %and.rhs
  %ptradd587 = getelementptr inbounds i8, ptr %"introspect*567", i64 32, !dbg !5010
  %typeid.inner = load i64, ptr %ptradd587, align 8, !dbg !5010
  %eq588 = icmp eq i64 %typeid.inner, ptrtoint (ptr @"$ct.char" to i64), !dbg !5010
  br i1 %eq588, label %or.phi, label %or.rhs, !dbg !5010

or.rhs:                                           ; preds = %check_type_ok
  %ptradd589 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5011
  %391 = load i64, ptr %ptradd589, align 8, !dbg !5011
  %"introspect*590" = inttoptr i64 %391 to ptr, !dbg !5011
  %typeid.kind591 = load i8, ptr %"introspect*590", align 8, !dbg !5011
  %eq592 = icmp eq i8 %typeid.kind591, 15, !dbg !5011
  br i1 %eq592, label %check_type_ok611, label %check_next593, !dbg !5011

check_next593:                                    ; preds = %or.rhs
  %eq594 = icmp eq i8 %typeid.kind591, 19, !dbg !5011
  br i1 %eq594, label %check_type_ok611, label %check_next595, !dbg !5011

check_next595:                                    ; preds = %check_next593
  %eq596 = icmp eq i8 %typeid.kind591, 17, !dbg !5011
  br i1 %eq596, label %check_type_ok611, label %check_next597, !dbg !5011

check_next597:                                    ; preds = %check_next595
  %eq598 = icmp eq i8 %typeid.kind591, 8, !dbg !5011
  br i1 %eq598, label %check_type_ok611, label %check_next599, !dbg !5011

check_next599:                                    ; preds = %check_next597
  %eq600 = icmp eq i8 %typeid.kind591, 16, !dbg !5011
  br i1 %eq600, label %check_type_ok611, label %check_next601, !dbg !5011

check_next601:                                    ; preds = %check_next599
  %eq602 = icmp eq i8 %typeid.kind591, 18, !dbg !5011
  br i1 %eq602, label %check_type_ok611, label %check_next603, !dbg !5011

check_next603:                                    ; preds = %check_next601
  %eq604 = icmp eq i8 %typeid.kind591, 14, !dbg !5011
  br i1 %eq604, label %check_type_ok611, label %check_next605, !dbg !5011

check_next605:                                    ; preds = %check_next603
  %eq606 = icmp eq i8 %typeid.kind591, 12, !dbg !5011
  br i1 %eq606, label %check_type_ok611, label %check_next607, !dbg !5011

check_next607:                                    ; preds = %check_next605
  store %"char[]" { ptr @.panic_msg.109, i64 49 }, ptr %taddr608, align 8
  %392 = load [2 x i64], ptr %taddr608, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr609, align 8
  %393 = load [2 x i64], ptr %taddr609, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr610, align 8
  %394 = load [2 x i64], ptr %taddr610, align 8
  %395 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %395([2 x i64] %392, [2 x i64] %393, [2 x i64] %394, i32 491), !dbg !5011
  unreachable, !dbg !5011

check_type_ok611:                                 ; preds = %check_next605, %check_next603, %check_next601, %check_next599, %check_next597, %check_next595, %check_next593, %or.rhs
  %ptradd612 = getelementptr inbounds i8, ptr %"introspect*590", i64 32, !dbg !5011
  %typeid.inner613 = load i64, ptr %ptradd612, align 8, !dbg !5011
  %eq614 = icmp eq i64 %typeid.inner613, ptrtoint (ptr @"$ct.ichar" to i64), !dbg !5011
  br label %or.phi, !dbg !5011

or.phi:                                           ; preds = %check_type_ok611, %check_type_ok
  %val615 = phi i1 [ true, %check_type_ok ], [ %eq614, %check_type_ok611 ], !dbg !5011
  br label %and.phi, !dbg !5011

and.phi:                                          ; preds = %or.phi, %switch.default563
  %val616 = phi i1 [ false, %switch.default563 ], [ %val615, %or.phi ], !dbg !5011
  br i1 %val616, label %if.then617, label %if.exit624, !dbg !5011

if.then617:                                       ; preds = %and.phi
  %396 = load ptr, ptr %current, align 8, !dbg !5012
  store ptr %396, ptr %taddr618, align 8
  %397 = load ptr, ptr %taddr618, align 8
  %ptradd619 = getelementptr inbounds i8, ptr %current, i64 8, !dbg !5014
  %398 = load i64, ptr %ptradd619, align 8, !dbg !5014
  %"introspect*620" = inttoptr i64 %398 to ptr, !dbg !5014
  %typeid.kind621 = load i8, ptr %"introspect*620", align 8, !dbg !5014
  %ptradd622 = getelementptr inbounds i8, ptr %"introspect*620", i64 24, !dbg !5014
  %typeid.size = load i64, ptr %ptradd622, align 8, !dbg !5014
  %add623 = add i64 0, %typeid.size, !dbg !5014
  %size = sub i64 %add623, 0, !dbg !5014
  %399 = insertvalue %"char[]" undef, ptr %397, 0, !dbg !5014
  %400 = insertvalue %"char[]" %399, i64 %size, 1, !dbg !5014
  store %"char[]" %400, ptr %out, align 8, !dbg !5014
  br label %switch.exit634, !dbg !5015

if.exit624:                                       ; preds = %and.phi
  %401 = load i64, ptr %total_len, align 8, !dbg !5016
  %402 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.251, i64 9 }, ptr %taddr627, align 8
  %403 = load [2 x i64], ptr %taddr627, align 8
  %404 = call i64 @std.io.Formatter.out_substr(ptr %retparam626, ptr %402, [2 x i64] %403), !dbg !5017
  %not_err628 = icmp eq i64 %404, 0, !dbg !5017
  %405 = call i1 @llvm.expect.i1(i1 %not_err628, i1 true), !dbg !5017
  br i1 %405, label %after_check630, label %assign_optional629, !dbg !5017

assign_optional629:                               ; preds = %if.exit624
  store i64 %404, ptr %error_var625, align 8, !dbg !5017
  br label %guard_block631, !dbg !5017

after_check630:                                   ; preds = %if.exit624
  br label %noerr_block632, !dbg !5017

guard_block631:                                   ; preds = %assign_optional629
  %406 = load i64, ptr %error_var625, align 8, !dbg !5017
  ret i64 %406, !dbg !5017

noerr_block632:                                   ; preds = %after_check630
  %407 = load i64, ptr %retparam626, align 8, !dbg !5017
  %add633 = add i64 %401, %407, !dbg !5016
  store i64 %add633, ptr %total_len, align 8, !dbg !5016
  br label %loop.inc, !dbg !5018

switch.exit634:                                   ; preds = %if.then617, %checkok561, %checkok546
  %408 = load ptr, ptr %self, align 8, !dbg !5019
  %ptradd635 = getelementptr inbounds i8, ptr %408, i64 16, !dbg !5019
  %409 = load i32, ptr %ptradd635, align 8, !dbg !5019
  %lshrl = lshr i32 %409, 1, !dbg !5019
  %410 = and i32 1, %lshrl, !dbg !5019
  %trunc = trunc i32 %410 to i8, !dbg !5019
  %411 = trunc i8 %trunc to i1, !dbg !5019
  br i1 %411, label %if.then636, label %if.exit659, !dbg !5019

if.then636:                                       ; preds = %switch.exit634
  call void @llvm.dbg.declare(metadata ptr %len637, metadata !5020, metadata !DIExpression()), !dbg !5022
  %412 = load ptr, ptr %self, align 8, !dbg !5023
  %ptradd639 = getelementptr inbounds i8, ptr %412, i64 16, !dbg !5023
  %413 = load i32, ptr %ptradd639, align 8, !dbg !5023
  %lshrl640 = lshr i32 %413, 5, !dbg !5023
  %414 = and i32 1, %lshrl640, !dbg !5023
  %trunc641 = trunc i32 %414 to i8, !dbg !5023
  %415 = load ptr, ptr %self, align 8
  %416 = load [2 x i64], ptr %out, align 8
  %417 = call i64 @std.io.print_hex_chars(ptr %retparam642, ptr %415, [2 x i64] %416, i8 %trunc641) #5, !dbg !5024
  %not_err643 = icmp eq i64 %417, 0, !dbg !5024
  %418 = call i1 @llvm.expect.i1(i1 %not_err643, i1 true), !dbg !5024
  br i1 %418, label %after_check645, label %assign_optional644, !dbg !5024

assign_optional644:                               ; preds = %if.then636
  store i64 %417, ptr %error_var638, align 8, !dbg !5024
  br label %guard_block646, !dbg !5024

after_check645:                                   ; preds = %if.then636
  br label %noerr_block647, !dbg !5024

guard_block646:                                   ; preds = %assign_optional644
  %419 = load i64, ptr %error_var638, align 8, !dbg !5024
  ret i64 %419, !dbg !5024

noerr_block647:                                   ; preds = %after_check645
  %420 = load i64, ptr %retparam642, align 8, !dbg !5024
  store i64 %420, ptr %len637, align 8, !dbg !5024
  %421 = load i64, ptr %total_len, align 8, !dbg !5025
  %422 = load i64, ptr %len637, align 8, !dbg !5026
  %add648 = add i64 %421, %422, !dbg !5025
  store i64 %add648, ptr %total_len, align 8, !dbg !5025
  %423 = load i64, ptr %total_len, align 8, !dbg !5027
  %424 = load ptr, ptr %self, align 8, !dbg !5028
  %ptradd650 = getelementptr inbounds i8, ptr %424, i64 16, !dbg !5028
  %ptradd651 = getelementptr inbounds i8, ptr %ptradd650, i64 4, !dbg !5028
  %425 = load i32, ptr %ptradd651, align 4, !dbg !5028
  %zext = zext i32 %425 to i64, !dbg !5028
  %426 = load i64, ptr %len637, align 8, !dbg !5029
  %427 = load ptr, ptr %self, align 8
  %428 = call i64 @std.io.Formatter.pad(ptr %retparam652, ptr %427, i8 32, i64 %zext, i64 %426) #5, !dbg !5030
  %not_err653 = icmp eq i64 %428, 0, !dbg !5030
  %429 = call i1 @llvm.expect.i1(i1 %not_err653, i1 true), !dbg !5030
  br i1 %429, label %after_check655, label %assign_optional654, !dbg !5030

assign_optional654:                               ; preds = %noerr_block647
  store i64 %428, ptr %error_var649, align 8, !dbg !5030
  br label %guard_block656, !dbg !5030

after_check655:                                   ; preds = %noerr_block647
  br label %noerr_block657, !dbg !5030

guard_block656:                                   ; preds = %assign_optional654
  %430 = load i64, ptr %error_var649, align 8, !dbg !5030
  ret i64 %430, !dbg !5030

noerr_block657:                                   ; preds = %after_check655
  %431 = load i64, ptr %retparam652, align 8, !dbg !5030
  %add658 = add i64 %423, %431, !dbg !5027
  store i64 %add658, ptr %total_len, align 8, !dbg !5027
  br label %loop.inc, !dbg !5031

if.exit659:                                       ; preds = %switch.exit634
  %432 = load ptr, ptr %self, align 8, !dbg !5032
  %ptradd660 = getelementptr inbounds i8, ptr %432, i64 16, !dbg !5032
  %ptradd661 = getelementptr inbounds i8, ptr %ptradd660, i64 4, !dbg !5032
  %433 = load i32, ptr %ptradd661, align 4, !dbg !5032
  %i2b662 = icmp ne i32 %433, 0, !dbg !5032
  br i1 %i2b662, label %if.then663, label %if.exit676, !dbg !5032

if.then663:                                       ; preds = %if.exit659
  %434 = load i64, ptr %total_len, align 8, !dbg !5033
  %435 = load ptr, ptr %self, align 8, !dbg !5035
  %ptradd665 = getelementptr inbounds i8, ptr %435, i64 16, !dbg !5035
  %ptradd666 = getelementptr inbounds i8, ptr %ptradd665, i64 4, !dbg !5035
  %436 = load i32, ptr %ptradd666, align 4, !dbg !5035
  %zext667 = zext i32 %436 to i64, !dbg !5035
  %ptradd668 = getelementptr inbounds i8, ptr %out, i64 8, !dbg !5036
  %437 = load i64, ptr %ptradd668, align 8, !dbg !5036
  %mul = mul i64 %437, 2, !dbg !5036
  %438 = load ptr, ptr %self, align 8
  %439 = call i64 @std.io.Formatter.pad(ptr %retparam669, ptr %438, i8 32, i64 %zext667, i64 %mul) #5, !dbg !5037
  %not_err670 = icmp eq i64 %439, 0, !dbg !5037
  %440 = call i1 @llvm.expect.i1(i1 %not_err670, i1 true), !dbg !5037
  br i1 %440, label %after_check672, label %assign_optional671, !dbg !5037

assign_optional671:                               ; preds = %if.then663
  store i64 %439, ptr %error_var664, align 8, !dbg !5037
  br label %guard_block673, !dbg !5037

after_check672:                                   ; preds = %if.then663
  br label %noerr_block674, !dbg !5037

guard_block673:                                   ; preds = %assign_optional671
  %441 = load i64, ptr %error_var664, align 8, !dbg !5037
  ret i64 %441, !dbg !5037

noerr_block674:                                   ; preds = %after_check672
  %442 = load i64, ptr %retparam669, align 8, !dbg !5037
  %add675 = add i64 %434, %442, !dbg !5033
  store i64 %add675, ptr %total_len, align 8, !dbg !5033
  br label %if.exit676, !dbg !5033

if.exit676:                                       ; preds = %noerr_block674, %if.exit659
  %443 = load i64, ptr %total_len, align 8, !dbg !5038
  %444 = load ptr, ptr %self, align 8, !dbg !5039
  %ptradd678 = getelementptr inbounds i8, ptr %444, i64 16, !dbg !5039
  %445 = load i32, ptr %ptradd678, align 8, !dbg !5039
  %lshrl679 = lshr i32 %445, 5, !dbg !5039
  %446 = and i32 1, %lshrl679, !dbg !5039
  %trunc680 = trunc i32 %446 to i8, !dbg !5039
  %447 = load ptr, ptr %self, align 8
  %448 = load [2 x i64], ptr %out, align 8
  %449 = call i64 @std.io.print_hex_chars(ptr %retparam681, ptr %447, [2 x i64] %448, i8 %trunc680) #5, !dbg !5040
  %not_err682 = icmp eq i64 %449, 0, !dbg !5040
  %450 = call i1 @llvm.expect.i1(i1 %not_err682, i1 true), !dbg !5040
  br i1 %450, label %after_check684, label %assign_optional683, !dbg !5040

assign_optional683:                               ; preds = %if.exit676
  store i64 %449, ptr %error_var677, align 8, !dbg !5040
  br label %guard_block685, !dbg !5040

after_check684:                                   ; preds = %if.exit676
  br label %noerr_block686, !dbg !5040

guard_block685:                                   ; preds = %assign_optional683
  %451 = load i64, ptr %error_var677, align 8, !dbg !5040
  ret i64 %451, !dbg !5040

noerr_block686:                                   ; preds = %after_check684
  %452 = load i64, ptr %retparam681, align 8, !dbg !5040
  %add687 = add i64 %443, %452, !dbg !5038
  store i64 %add687, ptr %total_len, align 8, !dbg !5038
  br label %loop.inc, !dbg !5041

switch.case688:                                   ; preds = %switch.entry223
  %453 = load ptr, ptr %self, align 8, !dbg !5042
  %ptradd689 = getelementptr inbounds i8, ptr %453, i64 16, !dbg !5042
  %454 = load i32, ptr %ptradd689, align 8, !dbg !5042
  %lshrl690 = lshr i32 %454, 1, !dbg !5042
  %455 = and i32 1, %lshrl690, !dbg !5042
  %trunc691 = trunc i32 %455 to i8, !dbg !5042
  %456 = trunc i8 %trunc691 to i1, !dbg !5042
  br i1 %456, label %if.then692, label %if.exit713, !dbg !5042

if.then692:                                       ; preds = %switch.case688
  call void @llvm.dbg.declare(metadata ptr %len693, metadata !5044, metadata !DIExpression()), !dbg !5046
  %457 = load ptr, ptr %self, align 8
  %458 = load [2 x i64], ptr %current, align 8
  %459 = call i64 @std.io.Formatter.out_str(ptr %retparam695, ptr %457, [2 x i64] %458), !dbg !5047
  %not_err696 = icmp eq i64 %459, 0, !dbg !5047
  %460 = call i1 @llvm.expect.i1(i1 %not_err696, i1 true), !dbg !5047
  br i1 %460, label %after_check698, label %assign_optional697, !dbg !5047

assign_optional697:                               ; preds = %if.then692
  store i64 %459, ptr %error_var694, align 8, !dbg !5047
  br label %guard_block699, !dbg !5047

after_check698:                                   ; preds = %if.then692
  br label %noerr_block700, !dbg !5047

guard_block699:                                   ; preds = %assign_optional697
  %461 = load i64, ptr %error_var694, align 8, !dbg !5047
  ret i64 %461, !dbg !5047

noerr_block700:                                   ; preds = %after_check698
  %462 = load i64, ptr %retparam695, align 8, !dbg !5047
  store i64 %462, ptr %len693, align 8, !dbg !5047
  %463 = load i64, ptr %total_len, align 8, !dbg !5048
  %464 = load i64, ptr %len693, align 8, !dbg !5049
  %add701 = add i64 %463, %464, !dbg !5048
  store i64 %add701, ptr %total_len, align 8, !dbg !5048
  %465 = load i64, ptr %total_len, align 8, !dbg !5050
  %466 = load ptr, ptr %self, align 8, !dbg !5051
  %ptradd703 = getelementptr inbounds i8, ptr %466, i64 16, !dbg !5051
  %ptradd704 = getelementptr inbounds i8, ptr %ptradd703, i64 4, !dbg !5051
  %467 = load i32, ptr %ptradd704, align 4, !dbg !5051
  %zext705 = zext i32 %467 to i64, !dbg !5051
  %468 = load i64, ptr %len693, align 8, !dbg !5052
  %469 = load ptr, ptr %self, align 8
  %470 = call i64 @std.io.Formatter.pad(ptr %retparam706, ptr %469, i8 32, i64 %zext705, i64 %468) #5, !dbg !5053
  %not_err707 = icmp eq i64 %470, 0, !dbg !5053
  %471 = call i1 @llvm.expect.i1(i1 %not_err707, i1 true), !dbg !5053
  br i1 %471, label %after_check709, label %assign_optional708, !dbg !5053

assign_optional708:                               ; preds = %noerr_block700
  store i64 %470, ptr %error_var702, align 8, !dbg !5053
  br label %guard_block710, !dbg !5053

after_check709:                                   ; preds = %noerr_block700
  br label %noerr_block711, !dbg !5053

guard_block710:                                   ; preds = %assign_optional708
  %472 = load i64, ptr %error_var702, align 8, !dbg !5053
  ret i64 %472, !dbg !5053

noerr_block711:                                   ; preds = %after_check709
  %473 = load i64, ptr %retparam706, align 8, !dbg !5053
  %add712 = add i64 %465, %473, !dbg !5050
  store i64 %add712, ptr %total_len, align 8, !dbg !5050
  br label %loop.inc, !dbg !5054

if.exit713:                                       ; preds = %switch.case688
  %474 = load ptr, ptr %self, align 8, !dbg !5055
  %ptradd714 = getelementptr inbounds i8, ptr %474, i64 16, !dbg !5055
  %ptradd715 = getelementptr inbounds i8, ptr %ptradd714, i64 4, !dbg !5055
  %475 = load i32, ptr %ptradd715, align 4, !dbg !5055
  %i2b716 = icmp ne i32 %475, 0, !dbg !5055
  br i1 %i2b716, label %if.then717, label %if.exit740, !dbg !5055

if.then717:                                       ; preds = %if.exit713
  call void @llvm.dbg.declare(metadata ptr %out_fn, metadata !5056, metadata !DIExpression()), !dbg !5058
  %476 = load ptr, ptr %self, align 8, !dbg !5059
  %ptradd718 = getelementptr inbounds i8, ptr %476, i64 8, !dbg !5059
  %477 = load ptr, ptr %ptradd718, align 8, !dbg !5059
  store ptr %477, ptr %out_fn, align 8, !dbg !5059
  %478 = load ptr, ptr %self, align 8, !dbg !5060
  %ptradd719 = getelementptr inbounds i8, ptr %478, i64 8, !dbg !5060
  store ptr @std.io.out_null_fn, ptr %ptradd719, align 8, !dbg !5061
  call void @llvm.dbg.declare(metadata ptr %len720, metadata !5062, metadata !DIExpression()), !dbg !5063
  %479 = load ptr, ptr %self, align 8
  %480 = load [2 x i64], ptr %current, align 8
  %481 = call i64 @std.io.Formatter.out_str(ptr %retparam722, ptr %479, [2 x i64] %480), !dbg !5064
  %not_err723 = icmp eq i64 %481, 0, !dbg !5064
  %482 = call i1 @llvm.expect.i1(i1 %not_err723, i1 true), !dbg !5064
  br i1 %482, label %after_check725, label %assign_optional724, !dbg !5064

assign_optional724:                               ; preds = %if.then717
  store i64 %481, ptr %error_var721, align 8, !dbg !5064
  br label %guard_block726, !dbg !5064

after_check725:                                   ; preds = %if.then717
  br label %noerr_block727, !dbg !5064

guard_block726:                                   ; preds = %assign_optional724
  %483 = load i64, ptr %error_var721, align 8, !dbg !5064
  ret i64 %483, !dbg !5064

noerr_block727:                                   ; preds = %after_check725
  %484 = load i64, ptr %retparam722, align 8, !dbg !5064
  store i64 %484, ptr %len720, align 8, !dbg !5064
  %485 = load ptr, ptr %self, align 8, !dbg !5065
  %ptradd728 = getelementptr inbounds i8, ptr %485, i64 8, !dbg !5065
  %486 = load ptr, ptr %out_fn, align 8, !dbg !5066
  store ptr %486, ptr %ptradd728, align 8, !dbg !5066
  %487 = load i64, ptr %total_len, align 8, !dbg !5067
  %488 = load ptr, ptr %self, align 8, !dbg !5068
  %ptradd730 = getelementptr inbounds i8, ptr %488, i64 16, !dbg !5068
  %ptradd731 = getelementptr inbounds i8, ptr %ptradd730, i64 4, !dbg !5068
  %489 = load i32, ptr %ptradd731, align 4, !dbg !5068
  %zext732 = zext i32 %489 to i64, !dbg !5068
  %490 = load i64, ptr %len720, align 8, !dbg !5069
  %491 = load ptr, ptr %self, align 8
  %492 = call i64 @std.io.Formatter.pad(ptr %retparam733, ptr %491, i8 32, i64 %zext732, i64 %490) #5, !dbg !5070
  %not_err734 = icmp eq i64 %492, 0, !dbg !5070
  %493 = call i1 @llvm.expect.i1(i1 %not_err734, i1 true), !dbg !5070
  br i1 %493, label %after_check736, label %assign_optional735, !dbg !5070

assign_optional735:                               ; preds = %noerr_block727
  store i64 %492, ptr %error_var729, align 8, !dbg !5070
  br label %guard_block737, !dbg !5070

after_check736:                                   ; preds = %noerr_block727
  br label %noerr_block738, !dbg !5070

guard_block737:                                   ; preds = %assign_optional735
  %494 = load i64, ptr %error_var729, align 8, !dbg !5070
  ret i64 %494, !dbg !5070

noerr_block738:                                   ; preds = %after_check736
  %495 = load i64, ptr %retparam733, align 8, !dbg !5070
  %add739 = add i64 %487, %495, !dbg !5067
  store i64 %add739, ptr %total_len, align 8, !dbg !5067
  br label %if.exit740, !dbg !5067

if.exit740:                                       ; preds = %noerr_block738, %if.exit713
  %496 = load i64, ptr %total_len, align 8, !dbg !5071
  %497 = load ptr, ptr %self, align 8
  %498 = load [2 x i64], ptr %current, align 8
  %499 = call i64 @std.io.Formatter.out_str(ptr %retparam742, ptr %497, [2 x i64] %498), !dbg !5072
  %not_err743 = icmp eq i64 %499, 0, !dbg !5072
  %500 = call i1 @llvm.expect.i1(i1 %not_err743, i1 true), !dbg !5072
  br i1 %500, label %after_check745, label %assign_optional744, !dbg !5072

assign_optional744:                               ; preds = %if.exit740
  store i64 %499, ptr %error_var741, align 8, !dbg !5072
  br label %guard_block746, !dbg !5072

after_check745:                                   ; preds = %if.exit740
  br label %noerr_block747, !dbg !5072

guard_block746:                                   ; preds = %assign_optional744
  %501 = load i64, ptr %error_var741, align 8, !dbg !5072
  ret i64 %501, !dbg !5072

noerr_block747:                                   ; preds = %after_check745
  %502 = load i64, ptr %retparam742, align 8, !dbg !5072
  %add748 = add i64 %496, %502, !dbg !5071
  store i64 %add748, ptr %total_len, align 8, !dbg !5071
  br label %loop.inc, !dbg !5073

switch.case749:                                   ; preds = %switch.entry223
  %503 = load ptr, ptr %self, align 8, !dbg !5074
  %ptradd750 = getelementptr inbounds i8, ptr %503, i64 16, !dbg !5074
  %504 = load i32, ptr %ptradd750, align 8, !dbg !5076
  %505 = and i32 %504, -2, !dbg !5076
  %506 = or i32 %505, 1, !dbg !5076
  store i32 %506, ptr %ptradd750, align 8, !dbg !5076
  %507 = load ptr, ptr %self, align 8, !dbg !5077
  %ptradd751 = getelementptr inbounds i8, ptr %507, i64 16, !dbg !5077
  %508 = load i32, ptr %ptradd751, align 8, !dbg !5078
  %509 = and i32 %508, -17, !dbg !5078
  %510 = or i32 %509, 16, !dbg !5078
  store i32 %510, ptr %ptradd751, align 8, !dbg !5078
  store i32 16, ptr %base, align 4, !dbg !5079
  br label %switch.exit775, !dbg !5079

switch.default752:                                ; preds = %switch.entry223
  %511 = load ptr, ptr %self, align 8
  store ptr %511, ptr %self753, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_FORMAT" to i64), ptr %f754, align 8
  %512 = load ptr, ptr %self753, align 8, !dbg !5080
  %ptradd756 = getelementptr inbounds i8, ptr %512, i64 16, !dbg !5080
  %ptradd757 = getelementptr inbounds i8, ptr %ptradd756, i64 24, !dbg !5080
  %513 = load i64, ptr %ptradd757, align 8, !dbg !5080
  %i2b758 = icmp ne i64 %513, 0, !dbg !5080
  br i1 %i2b758, label %if.then759, label %if.exit762, !dbg !5080

if.then759:                                       ; preds = %switch.default752
  %514 = load ptr, ptr %self753, align 8, !dbg !5084
  %ptradd760 = getelementptr inbounds i8, ptr %514, i64 16, !dbg !5084
  %ptradd761 = getelementptr inbounds i8, ptr %ptradd760, i64 24, !dbg !5084
  %515 = load i64, ptr %ptradd761, align 8, !dbg !5084
  store i64 %515, ptr %blockret755, align 8, !dbg !5084
  br label %expr_block.exit765, !dbg !5084

if.exit762:                                       ; preds = %switch.default752
  %516 = load ptr, ptr %self753, align 8, !dbg !5085
  %ptradd763 = getelementptr inbounds i8, ptr %516, i64 16, !dbg !5085
  %ptradd764 = getelementptr inbounds i8, ptr %ptradd763, i64 24, !dbg !5085
  %517 = load i64, ptr %f754, align 8, !dbg !5086
  store i64 %517, ptr %ptradd764, align 8, !dbg !5086
  %518 = load i64, ptr %f754, align 8, !dbg !5087
  store i64 %518, ptr %blockret755, align 8, !dbg !5087
  br label %expr_block.exit765, !dbg !5087

expr_block.exit765:                               ; preds = %if.exit762, %if.then759
  %519 = load i64, ptr %total_len, align 8, !dbg !5088
  %520 = load ptr, ptr %self, align 8
  store %"char[]" { ptr @.str.252, i64 12 }, ptr %taddr768, align 8
  %521 = load [2 x i64], ptr %taddr768, align 8
  %522 = call i64 @std.io.Formatter.out_substr(ptr %retparam767, ptr %520, [2 x i64] %521), !dbg !5089
  %not_err769 = icmp eq i64 %522, 0, !dbg !5089
  %523 = call i1 @llvm.expect.i1(i1 %not_err769, i1 true), !dbg !5089
  br i1 %523, label %after_check771, label %assign_optional770, !dbg !5089

assign_optional770:                               ; preds = %expr_block.exit765
  store i64 %522, ptr %error_var766, align 8, !dbg !5089
  br label %guard_block772, !dbg !5089

after_check771:                                   ; preds = %expr_block.exit765
  br label %noerr_block773, !dbg !5089

guard_block772:                                   ; preds = %assign_optional770
  %524 = load i64, ptr %error_var766, align 8, !dbg !5089
  ret i64 %524, !dbg !5089

noerr_block773:                                   ; preds = %after_check771
  %525 = load i64, ptr %retparam767, align 8, !dbg !5089
  %add774 = add i64 %519, %525, !dbg !5088
  store i64 %add774, ptr %total_len, align 8, !dbg !5088
  br label %loop.inc, !dbg !5090

switch.exit775:                                   ; preds = %switch.case749, %switch.case234, %switch.case231, %switch.case228, %switch.case224
  %526 = load i32, ptr %base, align 4, !dbg !5091
  %neq776 = icmp ne i32 10, %526, !dbg !5091
  br i1 %neq776, label %if.then777, label %if.exit780, !dbg !5091

if.then777:                                       ; preds = %switch.exit775
  %527 = load ptr, ptr %self, align 8, !dbg !5092
  %ptradd778 = getelementptr inbounds i8, ptr %527, i64 16, !dbg !5092
  %528 = load i32, ptr %ptradd778, align 8, !dbg !5094
  %529 = and i32 %528, -5, !dbg !5094
  store i32 %529, ptr %ptradd778, align 8, !dbg !5094
  %530 = load ptr, ptr %self, align 8, !dbg !5095
  %ptradd779 = getelementptr inbounds i8, ptr %530, i64 16, !dbg !5095
  %531 = load i32, ptr %ptradd779, align 8, !dbg !5096
  %532 = and i32 %531, -9, !dbg !5096
  store i32 %532, ptr %ptradd779, align 8, !dbg !5096
  br label %if.exit780, !dbg !5096

if.exit780:                                       ; preds = %if.then777, %switch.exit775
  %533 = load ptr, ptr %self, align 8, !dbg !5097
  %ptradd781 = getelementptr inbounds i8, ptr %533, i64 16, !dbg !5097
  %534 = load i32, ptr %ptradd781, align 8, !dbg !5097
  %lshrl782 = lshr i32 %534, 6, !dbg !5097
  %535 = and i32 1, %lshrl782, !dbg !5097
  %trunc783 = trunc i32 %535 to i8, !dbg !5097
  %536 = trunc i8 %trunc783 to i1, !dbg !5097
  br i1 %536, label %if.then784, label %if.exit786, !dbg !5097

if.then784:                                       ; preds = %if.exit780
  %537 = load ptr, ptr %self, align 8, !dbg !5098
  %ptradd785 = getelementptr inbounds i8, ptr %537, i64 16, !dbg !5098
  %538 = load i32, ptr %ptradd785, align 8, !dbg !5099
  %539 = and i32 %538, -2, !dbg !5099
  store i32 %539, ptr %ptradd785, align 8, !dbg !5099
  br label %if.exit786, !dbg !5099

if.exit786:                                       ; preds = %if.then784, %if.exit780
  call void @llvm.dbg.declare(metadata ptr %is_neg, metadata !5100, metadata !DIExpression()), !dbg !5101
  store i8 0, ptr %is_neg, align 1, !dbg !5101
  %540 = load i64, ptr %total_len, align 8, !dbg !5102
  %541 = load ptr, ptr %self, align 8
  store ptr %541, ptr %f788, align 8
  call void @llvm.dbg.declare(metadata ptr %len790, metadata !5103, metadata !DIExpression()), !dbg !5105
  %542 = load [2 x i64], ptr %current, align 8
  %543 = call i64 @std.io.int_from_any(ptr %retparam792, [2 x i64] %542, ptr %is_neg), !dbg !5107
  %not_err793 = icmp eq i64 %543, 0, !dbg !5107
  %544 = call i1 @llvm.expect.i1(i1 %not_err793, i1 true), !dbg !5107
  br i1 %544, label %after_check795, label %assign_optional794, !dbg !5107

assign_optional794:                               ; preds = %if.exit786
  store i64 %543, ptr %len.f791, align 8, !dbg !5107
  br label %after_assign800, !dbg !5107

after_check795:                                   ; preds = %if.exit786
  %545 = load ptr, ptr %self, align 8
  %546 = load i128, ptr %retparam792, align 16
  %547 = load i8, ptr %is_neg, align 1
  %548 = load i32, ptr %base, align 4
  %549 = call i64 @std.io.Formatter.ntoa(ptr %retparam796, ptr %545, i128 %546, i8 %547, i32 %548), !dbg !5108
  %not_err797 = icmp eq i64 %549, 0, !dbg !5108
  %550 = call i1 @llvm.expect.i1(i1 %not_err797, i1 true), !dbg !5108
  br i1 %550, label %after_check799, label %assign_optional798, !dbg !5108

assign_optional798:                               ; preds = %after_check795
  store i64 %549, ptr %len.f791, align 8, !dbg !5108
  br label %after_assign800, !dbg !5108

after_check799:                                   ; preds = %after_check795
  %551 = load i64, ptr %retparam796, align 8, !dbg !5108
  store i64 %551, ptr %len790, align 8, !dbg !5108
  store i64 0, ptr %len.f791, align 8, !dbg !5108
  br label %after_assign800, !dbg !5108

after_assign800:                                  ; preds = %after_check799, %assign_optional798, %assign_optional794
  call void @llvm.dbg.declare(metadata ptr %err801, metadata !5109, metadata !DIExpression()), !dbg !5110
  br label %testblock802, !dbg !5110

testblock802:                                     ; preds = %after_assign800
  %optval803 = load i64, ptr %len.f791, align 8, !dbg !5111
  %not_err804 = icmp eq i64 %optval803, 0, !dbg !5111
  %552 = call i1 @llvm.expect.i1(i1 %not_err804, i1 true), !dbg !5111
  br i1 %552, label %after_check806, label %assign_optional805, !dbg !5111

assign_optional805:                               ; preds = %testblock802
  store i64 %optval803, ptr %err801, align 8, !dbg !5111
  br label %end_block807, !dbg !5111

after_check806:                                   ; preds = %testblock802
  store i64 0, ptr %err801, align 8, !dbg !5111
  br label %end_block807, !dbg !5111

end_block807:                                     ; preds = %after_check806, %assign_optional805
  %553 = load i64, ptr %err801, align 8, !dbg !5111
  %neq808 = icmp ne i64 %553, 0, !dbg !5111
  br i1 %neq808, label %if.then809, label %if.exit853, !dbg !5111

if.then809:                                       ; preds = %end_block807
  store i64 %553, ptr %switch810, align 8
  br label %switch.entry811

switch.entry811:                                  ; preds = %if.then809
  %554 = load i64, ptr %switch810, align 8
  %eq812 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$BUFFER_EXCEEDED" to i64), %554, !dbg !5112
  br i1 %eq812, label %switch.case815, label %next_if813, !dbg !5112

next_if813:                                       ; preds = %switch.entry811
  %eq814 = icmp eq i64 ptrtoint (ptr @"std.io.PrintFault$INTERNAL_BUFFER_EXCEEDED" to i64), %554, !dbg !5113
  br i1 %eq814, label %switch.case815, label %next_if829, !dbg !5113

switch.case815:                                   ; preds = %next_if813, %switch.entry811
  %555 = load ptr, ptr %f788, align 8
  store ptr %555, ptr %self816, align 8
  %556 = load i64, ptr %err801, align 8
  store i64 %556, ptr %f817, align 8
  %557 = load ptr, ptr %self816, align 8, !dbg !5114
  %ptradd819 = getelementptr inbounds i8, ptr %557, i64 16, !dbg !5114
  %ptradd820 = getelementptr inbounds i8, ptr %ptradd819, i64 24, !dbg !5114
  %558 = load i64, ptr %ptradd820, align 8, !dbg !5114
  %i2b821 = icmp ne i64 %558, 0, !dbg !5114
  br i1 %i2b821, label %if.then822, label %if.exit825, !dbg !5114

if.then822:                                       ; preds = %switch.case815
  %559 = load ptr, ptr %self816, align 8, !dbg !5118
  %ptradd823 = getelementptr inbounds i8, ptr %559, i64 16, !dbg !5118
  %ptradd824 = getelementptr inbounds i8, ptr %ptradd823, i64 24, !dbg !5118
  %560 = load i64, ptr %ptradd824, align 8, !dbg !5118
  store i64 %560, ptr %blockret818, align 8, !dbg !5118
  br label %expr_block.exit828, !dbg !5118

if.exit825:                                       ; preds = %switch.case815
  %561 = load ptr, ptr %self816, align 8, !dbg !5119
  %ptradd826 = getelementptr inbounds i8, ptr %561, i64 16, !dbg !5119
  %ptradd827 = getelementptr inbounds i8, ptr %ptradd826, i64 24, !dbg !5119
  %562 = load i64, ptr %f817, align 8, !dbg !5120
  store i64 %562, ptr %ptradd827, align 8, !dbg !5120
  %563 = load i64, ptr %f817, align 8, !dbg !5121
  store i64 %563, ptr %blockret818, align 8, !dbg !5121
  br label %expr_block.exit828, !dbg !5121

expr_block.exit828:                               ; preds = %if.exit825, %if.then822
  %564 = load i64, ptr %blockret818, align 8, !dbg !5121
  store i64 %564, ptr %error_var787, align 8, !dbg !5121
  br label %guard_block854, !dbg !5121

next_if829:                                       ; preds = %next_if813
  br label %switch.default830, !dbg !5121

switch.default830:                                ; preds = %next_if829
  %565 = load ptr, ptr %f788, align 8
  store ptr %565, ptr %self831, align 8
  store i64 ptrtoint (ptr @"std.io.PrintFault$INVALID_ARGUMENT" to i64), ptr %f832, align 8
  %566 = load ptr, ptr %self831, align 8, !dbg !5122
  %ptradd834 = getelementptr inbounds i8, ptr %566, i64 16, !dbg !5122
  %ptradd835 = getelementptr inbounds i8, ptr %ptradd834, i64 24, !dbg !5122
  %567 = load i64, ptr %ptradd835, align 8, !dbg !5122
  %i2b836 = icmp ne i64 %567, 0, !dbg !5122
  br i1 %i2b836, label %if.then837, label %if.exit840, !dbg !5122

if.then837:                                       ; preds = %switch.default830
  %568 = load ptr, ptr %self831, align 8, !dbg !5126
  %ptradd838 = getelementptr inbounds i8, ptr %568, i64 16, !dbg !5126
  %ptradd839 = getelementptr inbounds i8, ptr %ptradd838, i64 24, !dbg !5126
  %569 = load i64, ptr %ptradd839, align 8, !dbg !5126
  store i64 %569, ptr %blockret833, align 8, !dbg !5126
  br label %expr_block.exit843, !dbg !5126

if.exit840:                                       ; preds = %switch.default830
  %570 = load ptr, ptr %self831, align 8, !dbg !5127
  %ptradd841 = getelementptr inbounds i8, ptr %570, i64 16, !dbg !5127
  %ptradd842 = getelementptr inbounds i8, ptr %ptradd841, i64 24, !dbg !5127
  %571 = load i64, ptr %f832, align 8, !dbg !5128
  store i64 %571, ptr %ptradd842, align 8, !dbg !5128
  %572 = load i64, ptr %f832, align 8, !dbg !5129
  store i64 %572, ptr %blockret833, align 8, !dbg !5129
  br label %expr_block.exit843, !dbg !5129

expr_block.exit843:                               ; preds = %if.exit840, %if.then837
  %573 = load i64, ptr %blockret833, align 8, !dbg !5129
  store i64 %573, ptr %err801, align 8, !dbg !5129
  %574 = load ptr, ptr %f788, align 8
  store %"char[]" { ptr @.str.253, i64 9 }, ptr %taddr846, align 8
  %575 = load [2 x i64], ptr %taddr846, align 8
  %576 = call i64 @std.io.Formatter.out_substr(ptr %retparam845, ptr %574, [2 x i64] %575), !dbg !5130
  %not_err847 = icmp eq i64 %576, 0, !dbg !5130
  %577 = call i1 @llvm.expect.i1(i1 %not_err847, i1 true), !dbg !5130
  br i1 %577, label %after_check849, label %assign_optional848, !dbg !5130

assign_optional848:                               ; preds = %expr_block.exit843
  store i64 %576, ptr %error_var844, align 8, !dbg !5130
  br label %guard_block850, !dbg !5130

after_check849:                                   ; preds = %expr_block.exit843
  br label %noerr_block851, !dbg !5130

guard_block850:                                   ; preds = %assign_optional848
  %578 = load i64, ptr %error_var844, align 8, !dbg !5130
  store i64 %578, ptr %error_var787, align 8, !dbg !5130
  br label %guard_block854, !dbg !5130

noerr_block851:                                   ; preds = %after_check849
  %579 = load i64, ptr %err801, align 8, !dbg !5131
  store i64 %579, ptr %error_var787, align 8, !dbg !5131
  br label %guard_block854, !dbg !5131

if.exit853:                                       ; preds = %end_block807
  br label %noerr_block855, !dbg !5132

guard_block854:                                   ; preds = %noerr_block851, %guard_block850, %expr_block.exit828
  %580 = load i64, ptr %error_var787, align 8, !dbg !5132
  ret i64 %580, !dbg !5132

noerr_block855:                                   ; preds = %if.exit853
  %581 = load i64, ptr %len790, align 8, !dbg !5132
  %add856 = add i64 %540, %581, !dbg !5102
  store i64 %add856, ptr %total_len, align 8, !dbg !5102
  br label %loop.inc, !dbg !5102

loop.inc:                                         ; preds = %noerr_block855, %noerr_block773, %noerr_block747, %noerr_block711, %noerr_block686, %noerr_block657, %noerr_block632, %noerr_block530, %noerr_block521, %noerr_block448, %noerr_block375, %noerr_block302, %noerr_block205, %noerr_block49, %noerr_block
  %582 = load i64, ptr %i, align 8, !dbg !5133
  %add857 = add i64 %582, 1, !dbg !5133
  store i64 %add857, ptr %i, align 8, !dbg !5133
  br label %loop.cond, !dbg !5133

loop.exit858:                                     ; preds = %loop.cond
  %583 = load ptr, ptr %self, align 8, !dbg !5134
  %ptradd859 = getelementptr inbounds i8, ptr %583, i64 16, !dbg !5134
  %ptradd860 = getelementptr inbounds i8, ptr %ptradd859, i64 24, !dbg !5134
  %584 = load i64, ptr %ptradd860, align 8, !dbg !5134
  %i2b861 = icmp ne i64 %584, 0, !dbg !5134
  br i1 %i2b861, label %if.then862, label %if.exit865, !dbg !5134

if.then862:                                       ; preds = %loop.exit858
  %585 = load ptr, ptr %self, align 8, !dbg !5135
  %ptradd863 = getelementptr inbounds i8, ptr %585, i64 16, !dbg !5135
  %ptradd864 = getelementptr inbounds i8, ptr %ptradd863, i64 24, !dbg !5135
  %586 = load i64, ptr %ptradd864, align 8, !dbg !5135
  ret i64 %586, !dbg !5135

if.exit865:                                       ; preds = %loop.exit858
  %587 = load i64, ptr %total_len, align 8, !dbg !5136
  store i64 %587, ptr %0, align 8, !dbg !5136
  ret i64 0, !dbg !5136

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %588 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %589 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr2, align 8
  %590 = load [2 x i64], ptr %taddr2, align 8
  %591 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %591([2 x i64] %588, [2 x i64] %589, [2 x i64] %590, i32 356), !dbg !4660
  unreachable, !dbg !4660

panic8:                                           ; preds = %loop.body
  store i64 %13, ptr %taddr9, align 8
  %592 = insertvalue %any undef, ptr %taddr9, 0
  %593 = insertvalue %any %592, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %15, ptr %taddr10, align 8
  %594 = insertvalue %any undef, ptr %taddr10, 0
  %595 = insertvalue %any %594, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr11, align 8
  %596 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr12, align 8
  %597 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr13, align 8
  %598 = load [2 x i64], ptr %taddr13, align 8
  store %any %593, ptr %varargslots, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %595, ptr %ptradd14, align 8
  %599 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %599, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %600 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %596, [2 x i64] %597, [2 x i64] %598, i32 370, [2 x i64] %600), !dbg !4689
  unreachable, !dbg !4689

panic30:                                          ; preds = %if.exit27
  store i64 %34, ptr %taddr31, align 8
  %601 = insertvalue %any undef, ptr %taddr31, 0
  %602 = insertvalue %any %601, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr32, align 8
  %603 = insertvalue %any undef, ptr %taddr32, 0
  %604 = insertvalue %any %603, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr33, align 8
  %605 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr34, align 8
  %606 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr35, align 8
  %607 = load [2 x i64], ptr %taddr35, align 8
  store %any %602, ptr %varargslots36, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %604, ptr %ptradd37, align 8
  %608 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %608, i64 2, 1
  store %"any[]" %"$$temp38", ptr %taddr39, align 8
  %609 = load [2 x i64], ptr %taddr39, align 8
  call void @std.core.builtin.panicf([2 x i64] %605, [2 x i64] %606, [2 x i64] %607, i32 379, [2 x i64] %609), !dbg !4703
  unreachable, !dbg !4703

panic76:                                          ; preds = %if.exit73
  store i64 %77, ptr %taddr77, align 8
  %610 = insertvalue %any undef, ptr %taddr77, 0
  %611 = insertvalue %any %610, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %79, ptr %taddr78, align 8
  %612 = insertvalue %any undef, ptr %taddr78, 0
  %613 = insertvalue %any %612, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr79, align 8
  %614 = load [2 x i64], ptr %taddr79, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr80, align 8
  %615 = load [2 x i64], ptr %taddr80, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr81, align 8
  %616 = load [2 x i64], ptr %taddr81, align 8
  store %any %611, ptr %varargslots82, align 8
  %ptradd83 = getelementptr inbounds i8, ptr %varargslots82, i64 16
  store %any %613, ptr %ptradd83, align 8
  %617 = insertvalue %"any[]" undef, ptr %varargslots82, 0
  %"$$temp84" = insertvalue %"any[]" %617, i64 2, 1
  store %"any[]" %"$$temp84", ptr %taddr85, align 8
  %618 = load [2 x i64], ptr %taddr85, align 8
  call void @std.core.builtin.panicf([2 x i64] %614, [2 x i64] %615, [2 x i64] %616, i32 399, [2 x i64] %618), !dbg !4739
  unreachable, !dbg !4739

panic108:                                         ; preds = %if.exit105
  store i64 %96, ptr %taddr109, align 8
  %619 = insertvalue %any undef, ptr %taddr109, 0
  %620 = insertvalue %any %619, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %98, ptr %taddr110, align 8
  %621 = insertvalue %any undef, ptr %taddr110, 0
  %622 = insertvalue %any %621, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr111, align 8
  %623 = load [2 x i64], ptr %taddr111, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr112, align 8
  %624 = load [2 x i64], ptr %taddr112, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr113, align 8
  %625 = load [2 x i64], ptr %taddr113, align 8
  store %any %620, ptr %varargslots114, align 8
  %ptradd115 = getelementptr inbounds i8, ptr %varargslots114, i64 16
  store %any %622, ptr %ptradd115, align 8
  %626 = insertvalue %"any[]" undef, ptr %varargslots114, 0
  %"$$temp116" = insertvalue %"any[]" %626, i64 2, 1
  store %"any[]" %"$$temp116", ptr %taddr117, align 8
  %627 = load [2 x i64], ptr %taddr117, align 8
  call void @std.core.builtin.panicf([2 x i64] %623, [2 x i64] %624, [2 x i64] %625, i32 404, [2 x i64] %627), !dbg !4751
  unreachable, !dbg !4751

panic171:                                         ; preds = %cond.phi
  store i64 %139, ptr %taddr172, align 8
  %628 = insertvalue %any undef, ptr %taddr172, 0
  %629 = insertvalue %any %628, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %141, ptr %taddr173, align 8
  %630 = insertvalue %any undef, ptr %taddr173, 0
  %631 = insertvalue %any %630, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr174, align 8
  %632 = load [2 x i64], ptr %taddr174, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr175, align 8
  %633 = load [2 x i64], ptr %taddr175, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr176, align 8
  %634 = load [2 x i64], ptr %taddr176, align 8
  store %any %629, ptr %varargslots177, align 8
  %ptradd178 = getelementptr inbounds i8, ptr %varargslots177, i64 16
  store %any %631, ptr %ptradd178, align 8
  %635 = insertvalue %"any[]" undef, ptr %varargslots177, 0
  %"$$temp179" = insertvalue %"any[]" %635, i64 2, 1
  store %"any[]" %"$$temp179", ptr %taddr180, align 8
  %636 = load [2 x i64], ptr %taddr180, align 8
  call void @std.core.builtin.panicf([2 x i64] %632, [2 x i64] %633, [2 x i64] %634, i32 420, [2 x i64] %636), !dbg !4787
  unreachable, !dbg !4787

panic211:                                         ; preds = %if.exit207
  store i64 %161, ptr %taddr212, align 8
  %637 = insertvalue %any undef, ptr %taddr212, 0
  %638 = insertvalue %any %637, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %163, ptr %taddr213, align 8
  %639 = insertvalue %any undef, ptr %taddr213, 0
  %640 = insertvalue %any %639, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr214, align 8
  %641 = load [2 x i64], ptr %taddr214, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr215, align 8
  %642 = load [2 x i64], ptr %taddr215, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr216, align 8
  %643 = load [2 x i64], ptr %taddr216, align 8
  store %any %638, ptr %varargslots217, align 8
  %ptradd218 = getelementptr inbounds i8, ptr %varargslots217, i64 16
  store %any %640, ptr %ptradd218, align 8
  %644 = insertvalue %"any[]" undef, ptr %varargslots217, 0
  %"$$temp219" = insertvalue %"any[]" %644, i64 2, 1
  store %"any[]" %"$$temp219", ptr %taddr220, align 8
  %645 = load [2 x i64], ptr %taddr220, align 8
  call void @std.core.builtin.panicf([2 x i64] %641, [2 x i64] %642, [2 x i64] %643, i32 431, [2 x i64] %645), !dbg !4807
  unreachable, !dbg !4807

panic542:                                         ; preds = %switch.case540
  store %"char[]" { ptr @.panic_msg.249, i64 48 }, ptr %taddr543, align 8
  %646 = load [2 x i64], ptr %taddr543, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr544, align 8
  %647 = load [2 x i64], ptr %taddr544, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr545, align 8
  %648 = load [2 x i64], ptr %taddr545, align 8
  %649 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %649([2 x i64] %646, [2 x i64] %647, [2 x i64] %648, i32 487), !dbg !4996
  unreachable, !dbg !4996

panic557:                                         ; preds = %switch.case554
  store %"char[]" { ptr @.panic_msg.250, i64 56 }, ptr %taddr558, align 8
  %650 = load [2 x i64], ptr %taddr558, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr559, align 8
  %651 = load [2 x i64], ptr %taddr559, align 8
  store %"char[]" { ptr @.func.238, i64 7 }, ptr %taddr560, align 8
  %652 = load [2 x i64], ptr %taddr560, align 8
  %653 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %653([2 x i64] %650, [2 x i64] %651, [2 x i64] %652, i32 489), !dbg !5007
  unreachable, !dbg !5007
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.Formatter.print(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !5137 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %str = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %3 = icmp eq ptr %1, null, !dbg !5138
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !5138
  br i1 %4, label %panic, label %checkok, !dbg !5138

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5139, metadata !DIExpression()), !dbg !5140
  store [2 x i64] %2, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !5141, metadata !DIExpression()), !dbg !5142
  %5 = load ptr, ptr %self, align 8, !dbg !5143
  %ptradd = getelementptr inbounds i8, ptr %5, i64 8, !dbg !5143
  %6 = load ptr, ptr %ptradd, align 8, !dbg !5143
  %i2nb = icmp eq ptr %6, null, !dbg !5143
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !5143

if.then:                                          ; preds = %checkok
  %7 = load ptr, ptr %self, align 8, !dbg !5144
  %ptradd3 = getelementptr inbounds i8, ptr %7, i64 8, !dbg !5144
  store ptr @std.io.out_null_fn, ptr %ptradd3, align 8, !dbg !5146
  br label %if.exit, !dbg !5146

if.exit:                                          ; preds = %if.then, %checkok
  %ptradd4 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !5147
  %8 = load i64, ptr %ptradd4, align 8, !dbg !5147
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !5149, metadata !DIExpression()), !dbg !5147
  store i64 0, ptr %.anon, align 8, !dbg !5147
  br label %loop.cond, !dbg !5147

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %9 = load i64, ptr %.anon, align 8, !dbg !5147
  %lt = icmp ult i64 %9, %8, !dbg !5147
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !5147

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !5150, metadata !DIExpression()), !dbg !5152
  %ptradd5 = getelementptr inbounds i8, ptr %str, i64 8, !dbg !5153
  %10 = load i64, ptr %ptradd5, align 8, !dbg !5153
  %11 = load ptr, ptr %str, align 8, !dbg !5153
  %12 = load i64, ptr %.anon, align 8, !dbg !5153
  %ge = icmp uge i64 %12, %10, !dbg !5153
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !5153
  br i1 %13, label %panic6, label %checkok14, !dbg !5153

checkok14:                                        ; preds = %loop.body
  %ptradd15 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !5153
  %14 = load i8, ptr %ptradd15, align 1, !dbg !5153
  store i8 %14, ptr %c, align 1, !dbg !5153
  %15 = load ptr, ptr %self, align 8
  %16 = load i8, ptr %c, align 1
  %17 = call i64 @std.io.Formatter.out(ptr %retparam, ptr %15, i8 %16), !dbg !5154
  %not_err = icmp eq i64 %17, 0, !dbg !5154
  %18 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5154
  br i1 %18, label %after_check, label %assign_optional, !dbg !5154

assign_optional:                                  ; preds = %checkok14
  store i64 %17, ptr %error_var, align 8, !dbg !5154
  br label %guard_block, !dbg !5154

after_check:                                      ; preds = %checkok14
  br label %noerr_block, !dbg !5154

guard_block:                                      ; preds = %assign_optional
  %19 = load i64, ptr %error_var, align 8, !dbg !5154
  ret i64 %19, !dbg !5154

noerr_block:                                      ; preds = %after_check
  %20 = load i64, ptr %.anon, align 8, !dbg !5147
  %addnuw = add nuw i64 %20, 1, !dbg !5147
  store i64 %addnuw, ptr %.anon, align 8, !dbg !5147
  br label %loop.cond, !dbg !5147

loop.exit:                                        ; preds = %loop.cond
  %21 = load ptr, ptr %self, align 8, !dbg !5155
  %ptradd16 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !5155
  %ptradd17 = getelementptr inbounds i8, ptr %ptradd16, i64 16, !dbg !5155
  %22 = load i64, ptr %ptradd17, align 8, !dbg !5155
  store i64 %22, ptr %0, align 8, !dbg !5155
  ret i64 0, !dbg !5155

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %23 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr1, align 8
  %24 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.254, i64 5 }, ptr %taddr2, align 8
  %25 = load [2 x i64], ptr %taddr2, align 8
  %26 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %26([2 x i64] %23, [2 x i64] %24, [2 x i64] %25, i32 559), !dbg !5140
  unreachable, !dbg !5140

panic6:                                           ; preds = %loop.body
  store i64 %10, ptr %taddr7, align 8
  %27 = insertvalue %any undef, ptr %taddr7, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr8, align 8
  %29 = insertvalue %any undef, ptr %taddr8, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.61, i64 59 }, ptr %taddr9, align 8
  %31 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file.184, i64 12 }, ptr %taddr10, align 8
  %32 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.254, i64 5 }, ptr %taddr11, align 8
  %33 = load [2 x i64], ptr %taddr11, align 8
  store %any %28, ptr %varargslots, align 8
  %ptradd12 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %30, ptr %ptradd12, align 8
  %34 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %35 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 566, [2 x i64] %35), !dbg !5153
  unreachable, !dbg !5153
}

; Function Attrs: nounwind ssp uwtable(sync)
define internal i64 @std.io.out_null_fn(ptr %0, i8 %1) #0 !dbg !5156 {
entry:
  %data = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %data, align 8
  call void @llvm.dbg.declare(metadata ptr %data, metadata !5157, metadata !DIExpression()), !dbg !5158
  store i8 %1, ptr %c, align 1
  call void @llvm.dbg.declare(metadata ptr %c, metadata !5159, metadata !DIExpression()), !dbg !5160
  ret i64 0
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.BitReader.init(ptr %0, [2 x i64] %1) #0 !dbg !5161 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %byte_reader = alloca %any, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %BitReader, align 8
  %2 = icmp eq ptr %0, null, !dbg !5170
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !5170
  br i1 %3, label %panic, label %checkok, !dbg !5170

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5171, metadata !DIExpression()), !dbg !5172
  store [2 x i64] %1, ptr %byte_reader, align 8
  call void @llvm.dbg.declare(metadata ptr %byte_reader, metadata !5173, metadata !DIExpression()), !dbg !5174
  %4 = load ptr, ptr %self, align 8, !dbg !5175
  %checknull = icmp eq ptr %4, null, !dbg !5175
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5175
  br i1 %5, label %panic3, label %checkok7, !dbg !5175

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_reader, i32 16, i1 false), !dbg !5176
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !5176
  ret void, !dbg !5176

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %7 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %8 = load [2 x i64], ptr %taddr2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 10), !dbg !5172
  unreachable, !dbg !5172

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %10 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr5, align 8
  %11 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %12 = load [2 x i64], ptr %taddr6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13([2 x i64] %10, [2 x i64] %11, [2 x i64] %12, i32 12), !dbg !5175
  unreachable, !dbg !5175
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.BitReader.clear(ptr %0) #0 !dbg !5177 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !5180
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !5180
  br i1 %2, label %panic, label %checkok, !dbg !5180

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5181, metadata !DIExpression()), !dbg !5182
  %3 = load ptr, ptr %self, align 8, !dbg !5183
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !5183
  store i32 0, ptr %ptradd, align 4, !dbg !5184
  ret void, !dbg !5184

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %5 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.256, i64 5 }, ptr %taddr2, align 8
  %6 = load [2 x i64], ptr %taddr2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 15), !dbg !5182
  unreachable, !dbg !5182
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.BitReader.read_bits(ptr %0, ptr %1, i32 %2) #0 !dbg !5185 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nbits = alloca i32, align 4
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %bits = alloca i32, align 4
  %c = alloca i8, align 1
  %error_var = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %retparam = alloca i8, align 1
  %mask = alloca i32, align 4
  %taddr25 = alloca i32, align 4
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr32 = alloca i32, align 4
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %varargslots36 = alloca [1 x %any], align 8
  %taddr38 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr45 = alloca i32, align 4
  %taddr46 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %taddr48 = alloca %"char[]", align 8
  %varargslots49 = alloca [1 x %any], align 8
  %taddr51 = alloca %"any[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !5188
  %3 = icmp eq ptr %1, null, !dbg !5188
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !5188
  br i1 %4, label %panic, label %checkok, !dbg !5188

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5189, metadata !DIExpression()), !dbg !5190
  store i32 %2, ptr %nbits, align 4
  call void @llvm.dbg.declare(metadata ptr %nbits, metadata !5191, metadata !DIExpression()), !dbg !5192
  %5 = load i32, ptr %nbits, align 4, !dbg !5193
  %ge = icmp uge i32 8, %5, !dbg !5193
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !5193

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.258, i64 31 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 21), !dbg !5193
  unreachable, !dbg !5193

assert_ok:                                        ; preds = %checkok
  %10 = load ptr, ptr %self, align 8, !dbg !5195
  %ptradd = getelementptr inbounds i8, ptr %10, i64 20, !dbg !5195
  %11 = load i32, ptr %ptradd, align 4, !dbg !5195
  %12 = load i32, ptr %nbits, align 4, !dbg !5196
  %add = add i32 %11, %12, !dbg !5195
  %zext = zext i32 %add to i64, !dbg !5195
  %ge6 = icmp uge i64 32, %zext, !dbg !5195
  br i1 %ge6, label %assert_ok11, label %assert_fail7, !dbg !5195

assert_fail7:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.259, i64 56 }, ptr %taddr8, align 8
  %13 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr9, align 8
  %14 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr10, align 8
  %15 = load [2 x i64], ptr %taddr10, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 22), !dbg !5195
  unreachable, !dbg !5195

assert_ok11:                                      ; preds = %assert_ok
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !5197, metadata !DIExpression()), !dbg !5198
  %17 = load ptr, ptr %self, align 8, !dbg !5199
  %ptradd12 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !5199
  %18 = load i32, ptr %ptradd12, align 8, !dbg !5199
  store i32 %18, ptr %bits, align 4, !dbg !5199
  %19 = load ptr, ptr %self, align 8, !dbg !5200
  %ptradd13 = getelementptr inbounds i8, ptr %19, i64 20, !dbg !5200
  %20 = load i32, ptr %ptradd13, align 4, !dbg !5200
  %21 = load i32, ptr %nbits, align 4, !dbg !5201
  %lt = icmp ult i32 %20, %21, !dbg !5200
  br i1 %lt, label %if.then, label %if.exit, !dbg !5200

if.then:                                          ; preds = %assert_ok11
  call void @llvm.dbg.declare(metadata ptr %c, metadata !5202, metadata !DIExpression()), !dbg !5204
  %22 = load ptr, ptr %self, align 8, !dbg !5205
  %ptradd14 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !5205
  %23 = load i64, ptr %ptradd14, align 8, !dbg !5205
  %24 = inttoptr i64 %23 to ptr, !dbg !5205
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !5188
  %25 = icmp eq ptr %24, %type, !dbg !5188
  br i1 %25, label %cache_hit, label %cache_miss, !dbg !5188

cache_miss:                                       ; preds = %if.then
  %ptradd15 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !5188
  %26 = load ptr, ptr %ptradd15, align 8, !dbg !5188
  %27 = call ptr @.dyn_search(ptr %26, ptr @"$sel.read_byte"), !dbg !5188
  store ptr %27, ptr %.inlinecache, align 8, !dbg !5188
  store ptr %24, ptr %.cachedtype, align 8, !dbg !5188
  br label %28, !dbg !5188

cache_hit:                                        ; preds = %if.then
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !5188
  br label %28, !dbg !5188

28:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %27, %cache_miss ], !dbg !5188
  %29 = icmp eq ptr %fn_phi, null, !dbg !5188
  br i1 %29, label %missing_function, label %match, !dbg !5188

missing_function:                                 ; preds = %28
  store %"char[]" { ptr @.panic_msg.44, i64 46 }, ptr %taddr16, align 8
  %30 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr17, align 8
  %31 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr18, align 8
  %32 = load [2 x i64], ptr %taddr18, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 30), !dbg !5205
  unreachable, !dbg !5205

match:                                            ; preds = %28
  %34 = load ptr, ptr %22, align 8
  %35 = call i64 %fn_phi(ptr %retparam, ptr %34), !dbg !5205
  %not_err = icmp eq i64 %35, 0, !dbg !5205
  %36 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5205
  br i1 %36, label %after_check, label %assign_optional, !dbg !5205

assign_optional:                                  ; preds = %match
  store i64 %35, ptr %error_var, align 8, !dbg !5205
  br label %guard_block, !dbg !5205

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !5205

guard_block:                                      ; preds = %assign_optional
  %37 = load i64, ptr %error_var, align 8, !dbg !5205
  ret i64 %37, !dbg !5205

noerr_block:                                      ; preds = %after_check
  %38 = load i8, ptr %retparam, align 1, !dbg !5205
  store i8 %38, ptr %c, align 1, !dbg !5205
  %39 = load i32, ptr %bits, align 4, !dbg !5206
  %shl = shl i32 %39, 8, !dbg !5206
  %40 = freeze i32 %shl, !dbg !5206
  store i32 %40, ptr %bits, align 4, !dbg !5206
  %41 = load i32, ptr %bits, align 4, !dbg !5207
  %42 = load i8, ptr %c, align 1, !dbg !5208
  %zext19 = zext i8 %42 to i32, !dbg !5208
  %or = or i32 %41, %zext19, !dbg !5207
  store i32 %or, ptr %bits, align 4, !dbg !5207
  %43 = load ptr, ptr %self, align 8, !dbg !5209
  %ptradd20 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !5209
  %44 = load i32, ptr %bits, align 4, !dbg !5210
  store i32 %44, ptr %ptradd20, align 8, !dbg !5210
  %45 = load ptr, ptr %self, align 8, !dbg !5211
  %ptradd21 = getelementptr inbounds i8, ptr %45, i64 20, !dbg !5211
  %46 = load i32, ptr %ptradd21, align 4, !dbg !5211
  %add22 = add i32 %46, 8, !dbg !5211
  store i32 %add22, ptr %ptradd21, align 4, !dbg !5211
  br label %if.exit, !dbg !5211

if.exit:                                          ; preds = %noerr_block, %assert_ok11
  %47 = load ptr, ptr %self, align 8, !dbg !5212
  %ptradd23 = getelementptr inbounds i8, ptr %47, i64 20, !dbg !5212
  %48 = load i32, ptr %ptradd23, align 4, !dbg !5212
  %49 = load i32, ptr %nbits, align 4, !dbg !5213
  %sub = sub i32 %48, %49, !dbg !5212
  store i32 %sub, ptr %ptradd23, align 4, !dbg !5212
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !5214, metadata !DIExpression()), !dbg !5215
  %50 = load i32, ptr %nbits, align 4, !dbg !5216
  %shift_underflow = icmp slt i32 %50, 0, !dbg !5217
  %51 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !5217
  br i1 %51, label %panic24, label %checkok30, !dbg !5217

checkok30:                                        ; preds = %if.exit
  %shift_exceeds = icmp sge i32 %50, 32, !dbg !5217
  %52 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !5217
  br i1 %52, label %panic31, label %checkok39, !dbg !5217

checkok39:                                        ; preds = %checkok30
  %shl40 = shl i32 1, %50, !dbg !5217
  %53 = freeze i32 %shl40, !dbg !5217
  %sub41 = sub i32 %53, 1, !dbg !5217
  store i32 %sub41, ptr %mask, align 4, !dbg !5217
  %54 = load i32, ptr %bits, align 4, !dbg !5218
  %55 = load ptr, ptr %self, align 8, !dbg !5219
  %ptradd42 = getelementptr inbounds i8, ptr %55, i64 20, !dbg !5219
  %56 = load i32, ptr %ptradd42, align 4, !dbg !5219
  %shift_exceeds43 = icmp uge i32 %56, 32, !dbg !5218
  %57 = call i1 @llvm.expect.i1(i1 %shift_exceeds43, i1 false), !dbg !5218
  br i1 %57, label %panic44, label %checkok52, !dbg !5218

checkok52:                                        ; preds = %checkok39
  %lshr = lshr i32 %54, %56, !dbg !5218
  %58 = freeze i32 %lshr, !dbg !5218
  %59 = load i32, ptr %mask, align 4, !dbg !5220
  %and = and i32 %58, %59, !dbg !5221
  %trunc = trunc i32 %and to i8, !dbg !5221
  store i8 %trunc, ptr %0, align 1, !dbg !5221
  ret i64 0, !dbg !5221

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %60 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %61 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr2, align 8
  %62 = load [2 x i64], ptr %taddr2, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 24), !dbg !5190
  unreachable, !dbg !5190

panic24:                                          ; preds = %if.exit
  store i32 %50, ptr %taddr25, align 4
  %64 = insertvalue %any undef, ptr %taddr25, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr26, align 8
  %66 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr27, align 8
  %67 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr28, align 8
  %68 = load [2 x i64], ptr %taddr28, align 8
  store %any %65, ptr %varargslots, align 8
  %69 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %69, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr29, align 8
  %70 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %66, [2 x i64] %67, [2 x i64] %68, i32 37, [2 x i64] %70), !dbg !5217
  unreachable, !dbg !5217

panic31:                                          ; preds = %checkok30
  store i32 %50, ptr %taddr32, align 4
  %71 = insertvalue %any undef, ptr %taddr32, 0
  %72 = insertvalue %any %71, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr33, align 8
  %73 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr34, align 8
  %74 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr35, align 8
  %75 = load [2 x i64], ptr %taddr35, align 8
  store %any %72, ptr %varargslots36, align 8
  %76 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp37" = insertvalue %"any[]" %76, i64 1, 1
  store %"any[]" %"$$temp37", ptr %taddr38, align 8
  %77 = load [2 x i64], ptr %taddr38, align 8
  call void @std.core.builtin.panicf([2 x i64] %73, [2 x i64] %74, [2 x i64] %75, i32 37, [2 x i64] %77), !dbg !5217
  unreachable, !dbg !5217

panic44:                                          ; preds = %checkok39
  store i32 %56, ptr %taddr45, align 4
  %78 = insertvalue %any undef, ptr %taddr45, 0
  %79 = insertvalue %any %78, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr46, align 8
  %80 = load [2 x i64], ptr %taddr46, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr47, align 8
  %81 = load [2 x i64], ptr %taddr47, align 8
  store %"char[]" { ptr @.func.257, i64 9 }, ptr %taddr48, align 8
  %82 = load [2 x i64], ptr %taddr48, align 8
  store %any %79, ptr %varargslots49, align 8
  %83 = insertvalue %"any[]" undef, ptr %varargslots49, 0
  %"$$temp50" = insertvalue %"any[]" %83, i64 1, 1
  store %"any[]" %"$$temp50", ptr %taddr51, align 8
  %84 = load [2 x i64], ptr %taddr51, align 8
  call void @std.core.builtin.panicf([2 x i64] %80, [2 x i64] %81, [2 x i64] %82, i32 38, [2 x i64] %84), !dbg !5218
  unreachable, !dbg !5218
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.io.BitWriter.init(ptr %0, [2 x i64] %1) #0 !dbg !5222 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %byte_writer = alloca %any, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %.assign_list = alloca %BitWriter, align 8
  %2 = icmp eq ptr %0, null, !dbg !5231
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !5231
  br i1 %3, label %panic, label %checkok, !dbg !5231

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5232, metadata !DIExpression()), !dbg !5233
  store [2 x i64] %1, ptr %byte_writer, align 8
  call void @llvm.dbg.declare(metadata ptr %byte_writer, metadata !5234, metadata !DIExpression()), !dbg !5235
  %4 = load ptr, ptr %self, align 8, !dbg !5236
  %checknull = icmp eq ptr %4, null, !dbg !5236
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5236
  br i1 %5, label %panic3, label %checkok7, !dbg !5236

checkok7:                                         ; preds = %checkok
  call void @llvm.memset.p0.i64(ptr align 8 %.assign_list, i8 0, i64 24, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %.assign_list, ptr align 8 %byte_writer, i32 16, i1 false), !dbg !5237
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %.assign_list, i32 24, i1 false), !dbg !5237
  ret void, !dbg !5237

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %7 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr2, align 8
  %8 = load [2 x i64], ptr %taddr2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 52), !dbg !5233
  unreachable, !dbg !5233

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 45 }, ptr %taddr4, align 8
  %10 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr5, align 8
  %11 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr6, align 8
  %12 = load [2 x i64], ptr %taddr6, align 8
  %13 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %13([2 x i64] %10, [2 x i64] %11, [2 x i64] %12, i32 54), !dbg !5236
  unreachable, !dbg !5236
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.BitWriter.flush(ptr %0) #0 !dbg !5238 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %padding = alloca i32, align 4
  %bits = alloca i32, align 4
  %taddr6 = alloca i32, align 4
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr10 = alloca %"any[]", align 8
  %n = alloca i32, align 4
  %buffer = alloca [4 x i8], align 1
  %x = alloca i32, align 4
  %bytes = alloca ptr, align 8
  %bytes16 = alloca ptr, align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %s = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %expr = alloca i32, align 4
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %stream = alloca %any, align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %buffer51 = alloca %"char[]", align 8
  %blockret = alloca i64, align 8
  %n56 = alloca i64, align 8
  %error_var57 = alloca i64, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %retparam = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !5241
  %1 = icmp eq ptr %0, null, !dbg !5241
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !5241
  br i1 %2, label %panic, label %checkok, !dbg !5241

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5242, metadata !DIExpression()), !dbg !5243
  %3 = load ptr, ptr %self, align 8, !dbg !5244
  %ptradd = getelementptr inbounds i8, ptr %3, i64 20, !dbg !5244
  %4 = load i32, ptr %ptradd, align 4, !dbg !5244
  %eq = icmp eq i32 0, %4, !dbg !5244
  br i1 %eq, label %if.then, label %if.exit, !dbg !5244

if.then:                                          ; preds = %checkok
  ret i64 0

if.exit:                                          ; preds = %checkok
  call void @llvm.dbg.declare(metadata ptr %padding, metadata !5245, metadata !DIExpression()), !dbg !5246
  %5 = load ptr, ptr %self, align 8, !dbg !5247
  %ptradd3 = getelementptr inbounds i8, ptr %5, i64 20, !dbg !5247
  %6 = load i32, ptr %ptradd3, align 4, !dbg !5247
  %zext = zext i32 %6 to i64, !dbg !5247
  %sub = sub i64 32, %zext, !dbg !5248
  %trunc = trunc i64 %sub to i32, !dbg !5248
  store i32 %trunc, ptr %padding, align 4, !dbg !5248
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !5249, metadata !DIExpression()), !dbg !5250
  %7 = load ptr, ptr %self, align 8, !dbg !5251
  %ptradd4 = getelementptr inbounds i8, ptr %7, i64 16, !dbg !5251
  %8 = load i32, ptr %ptradd4, align 8, !dbg !5251
  %9 = load i32, ptr %padding, align 4, !dbg !5252
  %shift_exceeds = icmp uge i32 %9, 32, !dbg !5251
  %10 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !5251
  br i1 %10, label %panic5, label %checkok11, !dbg !5251

checkok11:                                        ; preds = %if.exit
  %shl = shl i32 %8, %9, !dbg !5251
  %11 = freeze i32 %shl, !dbg !5251
  store i32 %11, ptr %bits, align 4, !dbg !5251
  call void @llvm.dbg.declare(metadata ptr %n, metadata !5253, metadata !DIExpression()), !dbg !5254
  %12 = load ptr, ptr %self, align 8, !dbg !5255
  %ptradd12 = getelementptr inbounds i8, ptr %12, i64 20, !dbg !5255
  %13 = load i32, ptr %ptradd12, align 4, !dbg !5255
  %add = add i32 %13, 7, !dbg !5255
  %sdiv = sdiv i32 %add, 8, !dbg !5255
  store i32 %sdiv, ptr %n, align 4, !dbg !5255
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !5256, metadata !DIExpression()), !dbg !5260
  store i8 0, ptr %buffer, align 1, !dbg !5260
  %ptradd13 = getelementptr inbounds i8, ptr %buffer, i64 1, !dbg !5260
  store i8 0, ptr %ptradd13, align 1, !dbg !5260
  %ptradd14 = getelementptr inbounds i8, ptr %buffer, i64 2, !dbg !5260
  store i8 0, ptr %ptradd14, align 1, !dbg !5260
  %ptradd15 = getelementptr inbounds i8, ptr %buffer, i64 3, !dbg !5260
  store i8 0, ptr %ptradd15, align 1, !dbg !5260
  %14 = load i32, ptr %bits, align 4
  store i32 %14, ptr %x, align 4
  store ptr %buffer, ptr %bytes, align 8
  %15 = load ptr, ptr %bytes, align 8
  store ptr %15, ptr %bytes16, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !5261

assert_fail:                                      ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.260, i64 117 }, ptr %taddr17, align 8
  %16 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.261, i64 11 }, ptr %taddr18, align 8
  %17 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr19, align 8
  %18 = load [2 x i64], ptr %taddr19, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 107), !dbg !5264
  unreachable, !dbg !5264

assert_ok:                                        ; preds = %checkok11
  call void @llvm.dbg.declare(metadata ptr %s, metadata !5268, metadata !DIExpression()), !dbg !5269
  call void @llvm.memset.p0.i64(ptr align 8 %s, i8 0, i64 16, i1 false), !dbg !5269
  %20 = load ptr, ptr %bytes, align 8, !dbg !5270
  %checknull = icmp eq ptr %20, null, !dbg !5270
  %21 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !5270
  br i1 %21, label %panic20, label %checkok24, !dbg !5270

checkok24:                                        ; preds = %assert_ok
  %22 = insertvalue %"char[]" undef, ptr %20, 0, !dbg !5270
  %23 = insertvalue %"char[]" %22, i64 4, 1, !dbg !5270
  store %"char[]" %23, ptr %s, align 8, !dbg !5270
  %24 = load ptr, ptr %s, align 8, !dbg !5271
  %checknull25 = icmp eq ptr %24, null, !dbg !5271
  %25 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !5271
  br i1 %25, label %panic26, label %checkok30, !dbg !5271

checkok30:                                        ; preds = %checkok24
  %26 = load i32, ptr %x, align 4
  store i32 %26, ptr %expr, align 4
  %checknull31 = icmp eq ptr %expr, null, !dbg !5272
  %27 = call i1 @llvm.expect.i1(i1 %checknull31, i1 false), !dbg !5272
  br i1 %27, label %panic32, label %checkok36, !dbg !5272

checkok36:                                        ; preds = %checkok30
  %28 = load i32, ptr %expr, align 4, !dbg !5275
  %29 = call i32 @llvm.bswap.i32(i32 %28), !dbg !5275
  store i32 %29, ptr %24, align 4, !dbg !5275
  %30 = load ptr, ptr %self, align 8, !dbg !5276
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %stream, ptr align 8 %30, i32 16, i1 false)
  %31 = load i32, ptr %n, align 4, !dbg !5277
  %zext37 = zext i32 %31 to i64, !dbg !5277
  %add38 = add i64 0, %zext37, !dbg !5277
  %lt = icmp ult i64 4, %add38, !dbg !5277
  %sub39 = sub i64 %add38, 1, !dbg !5277
  %32 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !5277
  br i1 %32, label %panic40, label %checkok50, !dbg !5277

checkok50:                                        ; preds = %checkok36
  %size = sub i64 %add38, 0, !dbg !5278
  %33 = insertvalue %"char[]" undef, ptr %buffer, 0, !dbg !5278
  %34 = insertvalue %"char[]" %33, i64 %size, 1, !dbg !5278
  store %"char[]" %34, ptr %buffer51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %buffer51, i64 8, !dbg !5279
  %35 = load i64, ptr %ptradd52, align 8, !dbg !5279
  %eq53 = icmp eq i64 0, %35, !dbg !5279
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !5279

if.then54:                                        ; preds = %checkok50
  store i64 0, ptr %blockret, align 8, !dbg !5282
  br label %expr_block.exit, !dbg !5282

if.exit55:                                        ; preds = %checkok50
  call void @llvm.dbg.declare(metadata ptr %n56, metadata !5283, metadata !DIExpression()), !dbg !5284
  %ptradd58 = getelementptr inbounds i8, ptr %stream, i64 8, !dbg !5285
  %36 = load i64, ptr %ptradd58, align 8, !dbg !5285
  %37 = inttoptr i64 %36 to ptr, !dbg !5285
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !5241
  %38 = icmp eq ptr %37, %type, !dbg !5241
  br i1 %38, label %cache_hit, label %cache_miss, !dbg !5241

cache_miss:                                       ; preds = %if.exit55
  %ptradd59 = getelementptr inbounds i8, ptr %37, i64 16, !dbg !5241
  %39 = load ptr, ptr %ptradd59, align 8, !dbg !5241
  %40 = call ptr @.dyn_search(ptr %39, ptr @"$sel.write"), !dbg !5241
  store ptr %40, ptr %.inlinecache, align 8, !dbg !5241
  store ptr %37, ptr %.cachedtype, align 8, !dbg !5241
  br label %41, !dbg !5241

cache_hit:                                        ; preds = %if.exit55
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !5241
  br label %41, !dbg !5241

41:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %40, %cache_miss ], !dbg !5241
  %42 = icmp eq ptr %fn_phi, null, !dbg !5241
  br i1 %42, label %missing_function, label %match, !dbg !5241

missing_function:                                 ; preds = %41
  store %"char[]" { ptr @.panic_msg.83, i64 42 }, ptr %taddr60, align 8
  %43 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.179, i64 9 }, ptr %taddr61, align 8
  %44 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr62, align 8
  %45 = load [2 x i64], ptr %taddr62, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 102), !dbg !5286
  unreachable, !dbg !5286

match:                                            ; preds = %41
  %47 = load ptr, ptr %stream, align 8
  %48 = load [2 x i64], ptr %buffer51, align 8
  %49 = call i64 %fn_phi(ptr %retparam, ptr %47, [2 x i64] %48), !dbg !5286
  %not_err = icmp eq i64 %49, 0, !dbg !5286
  %50 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5286
  br i1 %50, label %after_check, label %assign_optional, !dbg !5286

assign_optional:                                  ; preds = %match
  store i64 %49, ptr %error_var57, align 8, !dbg !5286
  br label %guard_block, !dbg !5286

after_check:                                      ; preds = %match
  br label %noerr_block, !dbg !5286

guard_block:                                      ; preds = %assign_optional
  %51 = load i64, ptr %error_var57, align 8, !dbg !5286
  store i64 %51, ptr %error_var, align 8, !dbg !5286
  br label %guard_block66, !dbg !5286

noerr_block:                                      ; preds = %after_check
  %52 = load i64, ptr %retparam, align 8, !dbg !5286
  store i64 %52, ptr %n56, align 8, !dbg !5286
  %53 = load i64, ptr %n56, align 8, !dbg !5287
  %ptradd63 = getelementptr inbounds i8, ptr %buffer51, i64 8, !dbg !5288
  %54 = load i64, ptr %ptradd63, align 8, !dbg !5288
  %neq = icmp ne i64 %53, %54, !dbg !5287
  br i1 %neq, label %if.then64, label %if.exit65, !dbg !5287

if.then64:                                        ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.io.IoError$INCOMPLETE_WRITE" to i64), ptr %error_var, align 8, !dbg !5289
  br label %guard_block66, !dbg !5289

if.exit65:                                        ; preds = %noerr_block
  %55 = load i64, ptr %n56, align 8, !dbg !5290
  store i64 %55, ptr %blockret, align 8, !dbg !5290
  br label %expr_block.exit, !dbg !5290

expr_block.exit:                                  ; preds = %if.exit65, %if.then54
  br label %noerr_block67, !dbg !5290

guard_block66:                                    ; preds = %if.then64, %guard_block
  %56 = load i64, ptr %error_var, align 8, !dbg !5290
  ret i64 %56, !dbg !5290

noerr_block67:                                    ; preds = %expr_block.exit
  %57 = load ptr, ptr %self, align 8, !dbg !5291
  %ptradd68 = getelementptr inbounds i8, ptr %57, i64 20, !dbg !5291
  store i32 0, ptr %ptradd68, align 4, !dbg !5292
  ret i64 0, !dbg !5292

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %58 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %59 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr2, align 8
  %60 = load [2 x i64], ptr %taddr2, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61([2 x i64] %58, [2 x i64] %59, [2 x i64] %60, i32 57), !dbg !5243
  unreachable, !dbg !5243

panic5:                                           ; preds = %if.exit
  store i32 %9, ptr %taddr6, align 4
  %62 = insertvalue %any undef, ptr %taddr6, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr7, align 8
  %64 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr8, align 8
  %65 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr9, align 8
  %66 = load [2 x i64], ptr %taddr9, align 8
  store %any %63, ptr %varargslots, align 8
  %67 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr10, align 8
  %68 = load [2 x i64], ptr %taddr10, align 8
  call void @std.core.builtin.panicf([2 x i64] %64, [2 x i64] %65, [2 x i64] %66, i32 62, [2 x i64] %68), !dbg !5251
  unreachable, !dbg !5251

panic20:                                          ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.262, i64 46 }, ptr %taddr21, align 8
  %69 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.file.261, i64 11 }, ptr %taddr22, align 8
  %70 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr23, align 8
  %71 = load [2 x i64], ptr %taddr23, align 8
  %72 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %72([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 115), !dbg !5270
  unreachable, !dbg !5270

panic26:                                          ; preds = %checkok24
  store %"char[]" { ptr @.panic_msg.263, i64 58 }, ptr %taddr27, align 8
  %73 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.261, i64 11 }, ptr %taddr28, align 8
  %74 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr29, align 8
  %75 = load [2 x i64], ptr %taddr29, align 8
  %76 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %76([2 x i64] %73, [2 x i64] %74, [2 x i64] %75, i32 119), !dbg !5293
  unreachable, !dbg !5293

panic32:                                          ; preds = %checkok30
  store %"char[]" { ptr @.panic_msg.144, i64 53 }, ptr %taddr33, align 8
  %77 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.108, i64 10 }, ptr %taddr34, align 8
  %78 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr35, align 8
  %79 = load [2 x i64], ptr %taddr35, align 8
  %80 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %80([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 213), !dbg !5275
  unreachable, !dbg !5275

panic40:                                          ; preds = %checkok36
  store i64 %sub39, ptr %taddr41, align 8
  %81 = insertvalue %any undef, ptr %taddr41, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr42, align 8
  %83 = insertvalue %any undef, ptr %taddr42, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.41, i64 60 }, ptr %taddr43, align 8
  %85 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr44, align 8
  %86 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.81, i64 5 }, ptr %taddr45, align 8
  %87 = load [2 x i64], ptr %taddr45, align 8
  store %any %82, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %84, ptr %ptradd47, align 8
  %88 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %88, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %89 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %85, [2 x i64] %86, [2 x i64] %87, i32 66, [2 x i64] %89), !dbg !5278
  unreachable, !dbg !5278
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.io.BitWriter.write_bits(ptr %0, i32 %1, i32 %2) #0 !dbg !5294 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bits = alloca i32, align 4
  %nbits = alloca i32, align 4
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %to_push = alloca i32, align 4
  %bits_to_push = alloca i32, align 4
  %taddr9 = alloca i32, align 4
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %taddr16 = alloca i32, align 4
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %varargslots20 = alloca [1 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %taddr26 = alloca i32, align 4
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %varargslots30 = alloca [1 x %any], align 8
  %taddr32 = alloca %"any[]", align 8
  %taddr38 = alloca i32, align 4
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %varargslots42 = alloca [1 x %any], align 8
  %taddr44 = alloca %"any[]", align 8
  %error_var = alloca i64, align 8
  %reterr53 = alloca i64, align 8
  %taddr58 = alloca i32, align 4
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %varargslots62 = alloca [1 x %any], align 8
  %taddr64 = alloca %"any[]", align 8
  %taddr70 = alloca i32, align 4
  %taddr71 = alloca %"char[]", align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %varargslots74 = alloca [1 x %any], align 8
  %taddr76 = alloca %"any[]", align 8
  %taddr80 = alloca i32, align 4
  %taddr81 = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %varargslots84 = alloca [1 x %any], align 8
  %taddr86 = alloca %"any[]", align 8
  %3 = icmp eq ptr %0, null, !dbg !5297
  %4 = call i1 @llvm.expect.i1(i1 %3, i1 false), !dbg !5297
  br i1 %4, label %panic, label %checkok, !dbg !5297

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !5298, metadata !DIExpression()), !dbg !5299
  store i32 %1, ptr %bits, align 4
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !5300, metadata !DIExpression()), !dbg !5301
  store i32 %2, ptr %nbits, align 4
  call void @llvm.dbg.declare(metadata ptr %nbits, metadata !5302, metadata !DIExpression()), !dbg !5303
  %5 = load i32, ptr %nbits, align 4, !dbg !5304
  %ge = icmp uge i32 32, %5, !dbg !5304
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !5304

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.265, i64 32 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr4, align 8
  %7 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr5, align 8
  %8 = load [2 x i64], ptr %taddr5, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 71), !dbg !5304
  unreachable, !dbg !5304

assert_ok:                                        ; preds = %checkok
  %10 = load i32, ptr %nbits, align 4, !dbg !5306
  %eq = icmp eq i32 0, %10, !dbg !5306
  br i1 %eq, label %if.then, label %if.exit, !dbg !5306

if.then:                                          ; preds = %assert_ok
  ret i64 0

if.exit:                                          ; preds = %assert_ok
  br label %loop.cond, !dbg !5307

loop.cond:                                        ; preds = %noerr_block, %if.exit
  %11 = load ptr, ptr %self, align 8, !dbg !5308
  %ptradd = getelementptr inbounds i8, ptr %11, i64 20, !dbg !5308
  %12 = load i32, ptr %ptradd, align 4, !dbg !5308
  %13 = load i32, ptr %nbits, align 4, !dbg !5310
  %add = add i32 %12, %13, !dbg !5308
  %lt = icmp ult i32 24, %add, !dbg !5308
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !5308

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %to_push, metadata !5311, metadata !DIExpression()), !dbg !5313
  %14 = load ptr, ptr %self, align 8, !dbg !5314
  %ptradd6 = getelementptr inbounds i8, ptr %14, i64 20, !dbg !5314
  %15 = load i32, ptr %ptradd6, align 4, !dbg !5314
  %sub = sub i32 24, %15, !dbg !5315
  store i32 %sub, ptr %to_push, align 4, !dbg !5315
  call void @llvm.dbg.declare(metadata ptr %bits_to_push, metadata !5316, metadata !DIExpression()), !dbg !5317
  %16 = load i32, ptr %bits, align 4, !dbg !5318
  %17 = load i32, ptr %nbits, align 4, !dbg !5319
  %18 = load i32, ptr %to_push, align 4, !dbg !5320
  %sub7 = sub i32 %17, %18, !dbg !5319
  %shift_exceeds = icmp uge i32 %sub7, 32, !dbg !5318
  %19 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !5318
  br i1 %19, label %panic8, label %checkok14, !dbg !5318

checkok14:                                        ; preds = %loop.body
  %lshr = lshr i32 %16, %sub7, !dbg !5318
  %20 = freeze i32 %lshr, !dbg !5318
  %21 = load i32, ptr %to_push, align 4, !dbg !5321
  %shift_underflow = icmp slt i32 %21, 0, !dbg !5322
  %22 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !5322
  br i1 %22, label %panic15, label %checkok23, !dbg !5322

checkok23:                                        ; preds = %checkok14
  %shift_exceeds24 = icmp sge i32 %21, 32, !dbg !5322
  %23 = call i1 @llvm.expect.i1(i1 %shift_exceeds24, i1 false), !dbg !5322
  br i1 %23, label %panic25, label %checkok33, !dbg !5322

checkok33:                                        ; preds = %checkok23
  %shl = shl i32 1, %21, !dbg !5322
  %24 = freeze i32 %shl, !dbg !5322
  %sub34 = sub i32 %24, 1, !dbg !5322
  %and = and i32 %20, %sub34, !dbg !5318
  store i32 %and, ptr %bits_to_push, align 4, !dbg !5318
  %25 = load ptr, ptr %self, align 8, !dbg !5323
  %ptradd35 = getelementptr inbounds i8, ptr %25, i64 16, !dbg !5323
  %26 = load i32, ptr %ptradd35, align 8, !dbg !5323
  %27 = load i32, ptr %to_push, align 4, !dbg !5324
  %shift_exceeds36 = icmp uge i32 %27, 32, !dbg !5323
  %28 = call i1 @llvm.expect.i1(i1 %shift_exceeds36, i1 false), !dbg !5323
  br i1 %28, label %panic37, label %checkok45, !dbg !5323

checkok45:                                        ; preds = %checkok33
  %shl46 = shl i32 %26, %27, !dbg !5323
  %29 = freeze i32 %shl46, !dbg !5323
  store i32 %29, ptr %ptradd35, align 8, !dbg !5323
  %30 = load ptr, ptr %self, align 8, !dbg !5325
  %ptradd47 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !5325
  %31 = load i32, ptr %ptradd47, align 8, !dbg !5325
  %32 = load i32, ptr %bits_to_push, align 4, !dbg !5326
  %or = or i32 %31, %32, !dbg !5325
  store i32 %or, ptr %ptradd47, align 8, !dbg !5325
  %33 = load ptr, ptr %self, align 8, !dbg !5327
  %ptradd48 = getelementptr inbounds i8, ptr %33, i64 20, !dbg !5327
  %34 = load i32, ptr %ptradd48, align 4, !dbg !5327
  %35 = load i32, ptr %to_push, align 4, !dbg !5328
  %add49 = add i32 %34, %35, !dbg !5327
  store i32 %add49, ptr %ptradd48, align 4, !dbg !5327
  %36 = load i32, ptr %nbits, align 4, !dbg !5329
  %37 = load i32, ptr %to_push, align 4, !dbg !5330
  %sub50 = sub i32 %36, %37, !dbg !5329
  store i32 %sub50, ptr %nbits, align 4, !dbg !5329
  %38 = load ptr, ptr %self, align 8, !dbg !5331
  %39 = call i64 @std.io.BitWriter.flush(ptr %38), !dbg !5331
  %not_err = icmp eq i64 %39, 0, !dbg !5331
  %40 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !5331
  br i1 %40, label %after_check, label %assign_optional, !dbg !5331

assign_optional:                                  ; preds = %checkok45
  store i64 %39, ptr %error_var, align 8, !dbg !5331
  br label %guard_block, !dbg !5331

after_check:                                      ; preds = %checkok45
  br label %noerr_block, !dbg !5331

guard_block:                                      ; preds = %assign_optional
  %41 = load i64, ptr %error_var, align 8, !dbg !5331
  ret i64 %41, !dbg !5331

noerr_block:                                      ; preds = %after_check
  br label %loop.cond, !dbg !5331

loop.exit:                                        ; preds = %loop.cond
  %42 = load i32, ptr %nbits, align 4, !dbg !5332
  %eq51 = icmp eq i32 0, %42, !dbg !5332
  br i1 %eq51, label %if.then52, label %if.exit54, !dbg !5332

if.then52:                                        ; preds = %loop.exit
  ret i64 0

if.exit54:                                        ; preds = %loop.exit
  %43 = load ptr, ptr %self, align 8, !dbg !5333
  %ptradd55 = getelementptr inbounds i8, ptr %43, i64 16, !dbg !5333
  %44 = load i32, ptr %ptradd55, align 8, !dbg !5333
  %45 = load i32, ptr %nbits, align 4, !dbg !5334
  %shift_exceeds56 = icmp uge i32 %45, 32, !dbg !5333
  %46 = call i1 @llvm.expect.i1(i1 %shift_exceeds56, i1 false), !dbg !5333
  br i1 %46, label %panic57, label %checkok65, !dbg !5333

checkok65:                                        ; preds = %if.exit54
  %shl66 = shl i32 %44, %45, !dbg !5333
  %47 = freeze i32 %shl66, !dbg !5333
  store i32 %47, ptr %ptradd55, align 8, !dbg !5333
  %48 = load ptr, ptr %self, align 8, !dbg !5335
  %ptradd67 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !5335
  %49 = load i32, ptr %ptradd67, align 8, !dbg !5335
  %50 = load i32, ptr %bits, align 4, !dbg !5336
  %51 = load i32, ptr %nbits, align 4, !dbg !5337
  %shift_underflow68 = icmp slt i32 %51, 0, !dbg !5338
  %52 = call i1 @llvm.expect.i1(i1 %shift_underflow68, i1 false), !dbg !5338
  br i1 %52, label %panic69, label %checkok77, !dbg !5338

checkok77:                                        ; preds = %checkok65
  %shift_exceeds78 = icmp sge i32 %51, 32, !dbg !5338
  %53 = call i1 @llvm.expect.i1(i1 %shift_exceeds78, i1 false), !dbg !5338
  br i1 %53, label %panic79, label %checkok87, !dbg !5338

checkok87:                                        ; preds = %checkok77
  %shl88 = shl i32 1, %51, !dbg !5338
  %54 = freeze i32 %shl88, !dbg !5338
  %sub89 = sub i32 %54, 1, !dbg !5338
  %and90 = and i32 %50, %sub89, !dbg !5336
  %or91 = or i32 %49, %and90, !dbg !5335
  store i32 %or91, ptr %ptradd67, align 8, !dbg !5335
  %55 = load ptr, ptr %self, align 8, !dbg !5339
  %ptradd92 = getelementptr inbounds i8, ptr %55, i64 20, !dbg !5339
  %56 = load i32, ptr %ptradd92, align 4, !dbg !5339
  %57 = load i32, ptr %nbits, align 4, !dbg !5340
  %add93 = add i32 %56, %57, !dbg !5339
  store i32 %add93, ptr %ptradd92, align 4, !dbg !5339
  ret i64 0, !dbg !5339

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg, i64 62 }, ptr %taddr, align 8
  %58 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr1, align 8
  %59 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr2, align 8
  %60 = load [2 x i64], ptr %taddr2, align 8
  %61 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %61([2 x i64] %58, [2 x i64] %59, [2 x i64] %60, i32 73), !dbg !5299
  unreachable, !dbg !5299

panic8:                                           ; preds = %loop.body
  store i32 %sub7, ptr %taddr9, align 4
  %62 = insertvalue %any undef, ptr %taddr9, 0
  %63 = insertvalue %any %62, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr10, align 8
  %64 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr11, align 8
  %65 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr12, align 8
  %66 = load [2 x i64], ptr %taddr12, align 8
  store %any %63, ptr %varargslots, align 8
  %67 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %67, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %68 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %64, [2 x i64] %65, [2 x i64] %66, i32 79, [2 x i64] %68), !dbg !5318
  unreachable, !dbg !5318

panic15:                                          ; preds = %checkok14
  store i32 %21, ptr %taddr16, align 4
  %69 = insertvalue %any undef, ptr %taddr16, 0
  %70 = insertvalue %any %69, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr17, align 8
  %71 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr18, align 8
  %72 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr19, align 8
  %73 = load [2 x i64], ptr %taddr19, align 8
  store %any %70, ptr %varargslots20, align 8
  %74 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp21" = insertvalue %"any[]" %74, i64 1, 1
  store %"any[]" %"$$temp21", ptr %taddr22, align 8
  %75 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %71, [2 x i64] %72, [2 x i64] %73, i32 79, [2 x i64] %75), !dbg !5322
  unreachable, !dbg !5322

panic25:                                          ; preds = %checkok23
  store i32 %21, ptr %taddr26, align 4
  %76 = insertvalue %any undef, ptr %taddr26, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr27, align 8
  %78 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr28, align 8
  %79 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr29, align 8
  %80 = load [2 x i64], ptr %taddr29, align 8
  store %any %77, ptr %varargslots30, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp31" = insertvalue %"any[]" %81, i64 1, 1
  store %"any[]" %"$$temp31", ptr %taddr32, align 8
  %82 = load [2 x i64], ptr %taddr32, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 79, [2 x i64] %82), !dbg !5322
  unreachable, !dbg !5322

panic37:                                          ; preds = %checkok33
  store i32 %27, ptr %taddr38, align 4
  %83 = insertvalue %any undef, ptr %taddr38, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr39, align 8
  %85 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr40, align 8
  %86 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr41, align 8
  %87 = load [2 x i64], ptr %taddr41, align 8
  store %any %84, ptr %varargslots42, align 8
  %88 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp43" = insertvalue %"any[]" %88, i64 1, 1
  store %"any[]" %"$$temp43", ptr %taddr44, align 8
  %89 = load [2 x i64], ptr %taddr44, align 8
  call void @std.core.builtin.panicf([2 x i64] %85, [2 x i64] %86, [2 x i64] %87, i32 81, [2 x i64] %89), !dbg !5323
  unreachable, !dbg !5323

panic57:                                          ; preds = %if.exit54
  store i32 %45, ptr %taddr58, align 4
  %90 = insertvalue %any undef, ptr %taddr58, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr59, align 8
  %92 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr60, align 8
  %93 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr61, align 8
  %94 = load [2 x i64], ptr %taddr61, align 8
  store %any %91, ptr %varargslots62, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp63" = insertvalue %"any[]" %95, i64 1, 1
  store %"any[]" %"$$temp63", ptr %taddr64, align 8
  %96 = load [2 x i64], ptr %taddr64, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 91, [2 x i64] %96), !dbg !5333
  unreachable, !dbg !5333

panic69:                                          ; preds = %checkok65
  store i32 %51, ptr %taddr70, align 4
  %97 = insertvalue %any undef, ptr %taddr70, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr71, align 8
  %99 = load [2 x i64], ptr %taddr71, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr72, align 8
  %100 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr73, align 8
  %101 = load [2 x i64], ptr %taddr73, align 8
  store %any %98, ptr %varargslots74, align 8
  %102 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp75" = insertvalue %"any[]" %102, i64 1, 1
  store %"any[]" %"$$temp75", ptr %taddr76, align 8
  %103 = load [2 x i64], ptr %taddr76, align 8
  call void @std.core.builtin.panicf([2 x i64] %99, [2 x i64] %100, [2 x i64] %101, i32 92, [2 x i64] %103), !dbg !5338
  unreachable, !dbg !5338

panic79:                                          ; preds = %checkok77
  store i32 %51, ptr %taddr80, align 4
  %104 = insertvalue %any undef, ptr %taddr80, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.154, i64 35 }, ptr %taddr81, align 8
  %106 = load [2 x i64], ptr %taddr81, align 8
  store %"char[]" { ptr @.file.255, i64 7 }, ptr %taddr82, align 8
  %107 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.func.264, i64 10 }, ptr %taddr83, align 8
  %108 = load [2 x i64], ptr %taddr83, align 8
  store %any %105, ptr %varargslots84, align 8
  %109 = insertvalue %"any[]" undef, ptr %varargslots84, 0
  %"$$temp85" = insertvalue %"any[]" %109, i64 1, 1
  store %"any[]" %"$$temp85", ptr %taddr86, align 8
  %110 = load [2 x i64], ptr %taddr86, align 8
  call void @std.core.builtin.panicf([2 x i64] %106, [2 x i64] %107, [2 x i64] %108, i32 92, [2 x i64] %110), !dbg !5338
  unreachable, !dbg !5338
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #4

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.builtin.panicf([2 x i64], [2 x i64], [2 x i64], i32, [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.String.index_of(ptr, [2 x i64], [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i8 @std.ascii.char.is_digit(i8) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i8 @std.core.types.TypeKind.is_int(i8) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8_codepoints([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak double @std.math._frexp(double, ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #2

; Function Attrs: nounwind ssp uwtable(sync)
declare i32 @putchar(i32) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.io.File.flush(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.io.File.write_byte(ptr, i8) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.io.file.from_handle(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.init(ptr, [2 x i64], [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.OnStackAllocator.free(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak [2 x i64] @std.core.string.ZString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak [2 x i64] @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.bswap.i32(i32) #2

define internal void @.c3_dynamic_retain() align 8 {
entry:
  %.retain_global = load volatile [40 x { ptr, ptr, i64 }], ptr @"$c3_dynamic", align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable(sync) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!36, !37, !38, !39, !40, !41}
!llvm.dbg.cu = !{!42}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "XDIGITS_H", linkageName: "std.io.XDIGITS_H", scope: !2, file: !2, line: 4, type: !3, isLocal: false, isDefinition: true, align: 1)
!2 = !DIFile(filename: "formatter_private.c3", directory: "/opt/homebrew/lib/c3/std/io")
!3 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, align: 8, elements: !5)
!4 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!5 = !{!6}
!6 = !DISubrange(count: 16, lowerBound: 0)
!7 = !DIGlobalVariableExpression(var: !8, expr: !DIExpression())
!8 = distinct !DIGlobalVariable(name: "XDIGITS_L", linkageName: "std.io.XDIGITS_L", scope: !2, file: !2, line: 5, type: !3, isLocal: false, isDefinition: true, align: 1)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "BUF_SIZE", linkageName: "floatformat.BUF_SIZE", scope: !2, file: !2, line: 216, type: !11, isLocal: true, isDefinition: true, align: 4)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "file", linkageName: "stdout.file", scope: !14, file: !14, line: 356, type: !15, isLocal: true, isDefinition: true, align: 8)
!14 = !DIFile(filename: "io.c3", directory: "/opt/homebrew/lib/c3/std/io")
!15 = !DICompositeType(tag: DW_TAG_structure_type, name: "File", scope: !14, file: !14, line: 4, size: 64, align: 64, elements: !16, identifier: "std.io.File")
!16 = !{!17}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !15, file: !14, line: 6, baseType: !18, size: 64, align: 64)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "CFile", scope: !14, file: !14, line: 356, baseType: !19, align: 8)
!19 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!20 = !DIGlobalVariableExpression(var: !21, expr: !DIExpression())
!21 = distinct !DIGlobalVariable(name: "file", linkageName: "stderr.file", scope: !14, file: !14, line: 368, type: !15, isLocal: true, isDefinition: true, align: 8)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "file", linkageName: "stdin.file", scope: !14, file: !14, line: 380, type: !15, isLocal: true, isDefinition: true, align: 8)
!24 = !DIGlobalVariableExpression(var: !25, expr: !DIExpression())
!25 = distinct !DIGlobalVariable(name: "MAX_VARS", linkageName: "std.io.MAX_VARS", scope: !26, file: !26, line: 211, type: !27, isLocal: true, isDefinition: true, align: 1)
!26 = !DIFile(filename: "stream.c3", directory: "/opt/homebrew/lib/c3/std/io")
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 72, align: 8, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 9, lowerBound: 0)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "PRINTF_NTOA_BUFFER_SIZE", linkageName: "std.io.PRINTF_NTOA_BUFFER_SIZE", scope: !32, file: !32, line: 5, type: !11, isLocal: false, isDefinition: true, align: 4)
!32 = !DIFile(filename: "formatter.c3", directory: "/opt/homebrew/lib/c3/std/io")
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "WRITER_BITS", linkageName: "std.io.WRITER_BITS", scope: !35, file: !35, line: 50, type: !11, isLocal: false, isDefinition: true, align: 4)
!35 = !DIFile(filename: "bits.c3", directory: "/opt/homebrew/lib/c3/std/io")
!36 = !{i32 2, !"Dwarf Version", i32 4}
!37 = !{i32 2, !"Debug Info Version", i32 3}
!38 = !{i32 2, !"wchar_size", i32 4}
!39 = !{i32 4, !"PIC Level", i32 2}
!40 = !{i32 1, !"uwtable", i32 1}
!41 = !{i32 2, !"frame-pointer", i32 1}
!42 = distinct !DICompileUnit(language: DW_LANG_C11, file: !43, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !44, globals: !80, splitDebugInlining: false)
!43 = !DIFile(filename: "file.c3", directory: "/opt/homebrew/lib/c3/std/io")
!44 = !{!45, !51, !57}
!45 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Seek", scope: !46, file: !46, line: 7, baseType: !11, size: 32, align: 32, elements: !47)
!46 = !DIFile(filename: "bytebuffer.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!47 = !{!48, !49, !50}
!48 = !DIEnumerator(name: "SET", value: 0)
!49 = !DIEnumerator(name: "CURSOR", value: 1)
!50 = !DIEnumerator(name: "END", value: 2)
!51 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "FloatFormatting", scope: !2, file: !2, line: 200, baseType: !11, size: 32, align: 32, elements: !52)
!52 = !{!53, !54, !55, !56}
!53 = !DIEnumerator(name: "FLOAT", value: 0)
!54 = !DIEnumerator(name: "EXPONENTIAL", value: 1)
!55 = !DIEnumerator(name: "ADAPTIVE", value: 2)
!56 = !DIEnumerator(name: "HEX", value: 3)
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "TypeKind", scope: !2, file: !2, line: 349, baseType: !4, size: 8, align: 8, elements: !58)
!58 = !{!59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79}
!59 = !DIEnumerator(name: "VOID", value: 0, isUnsigned: true)
!60 = !DIEnumerator(name: "BOOL", value: 1, isUnsigned: true)
!61 = !DIEnumerator(name: "SIGNED_INT", value: 2, isUnsigned: true)
!62 = !DIEnumerator(name: "UNSIGNED_INT", value: 3, isUnsigned: true)
!63 = !DIEnumerator(name: "FLOAT", value: 4, isUnsigned: true)
!64 = !DIEnumerator(name: "TYPEID", value: 5, isUnsigned: true)
!65 = !DIEnumerator(name: "ANYFAULT", value: 6, isUnsigned: true)
!66 = !DIEnumerator(name: "ANY", value: 7, isUnsigned: true)
!67 = !DIEnumerator(name: "ENUM", value: 8, isUnsigned: true)
!68 = !DIEnumerator(name: "FAULT", value: 9, isUnsigned: true)
!69 = !DIEnumerator(name: "STRUCT", value: 10, isUnsigned: true)
!70 = !DIEnumerator(name: "UNION", value: 11, isUnsigned: true)
!71 = !DIEnumerator(name: "BITSTRUCT", value: 12, isUnsigned: true)
!72 = !DIEnumerator(name: "FUNC", value: 13, isUnsigned: true)
!73 = !DIEnumerator(name: "OPTIONAL", value: 14, isUnsigned: true)
!74 = !DIEnumerator(name: "ARRAY", value: 15, isUnsigned: true)
!75 = !DIEnumerator(name: "SLICE", value: 16, isUnsigned: true)
!76 = !DIEnumerator(name: "VECTOR", value: 17, isUnsigned: true)
!77 = !DIEnumerator(name: "DISTINCT", value: 18, isUnsigned: true)
!78 = !DIEnumerator(name: "POINTER", value: 19, isUnsigned: true)
!79 = !DIEnumerator(name: "INTERFACE", value: 20, isUnsigned: true)
!80 = !{!0, !7, !9, !12, !20, !22, !24, !30, !33}
!81 = distinct !DISubprogram(name: "init", linkageName: "std.io.LimitReader.init", scope: !82, file: !82, line: 13, type: !83, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!82 = !DIFile(filename: "limitreader.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!83 = !DISubroutineType(types: !84)
!84 = !{!85, !85, !89, !96}
!85 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "LimitReader*", baseType: !86, size: 64, align: 64, dwarfAddressSpace: 0)
!86 = !DICompositeType(tag: DW_TAG_structure_type, name: "LimitReader", scope: !82, file: !82, line: 3, size: 192, align: 64, elements: !87, identifier: "std.io.LimitReader")
!87 = !{!88, !94}
!88 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !86, file: !82, line: 5, baseType: !89, size: 128, align: 64)
!89 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream", size: 128, align: 64, elements: !90, identifier: "InStream")
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !89, baseType: !19, size: 64, align: 64)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !89, baseType: !93, size: 64, align: 64, offset: 64)
!93 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !86, file: !82, line: 6, baseType: !95, size: 64, align: 64, offset: 128)
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !96)
!96 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!97 = !{}
!98 = !DILocation(line: 14, column: 1, scope: !81)
!99 = !DILocalVariable(name: "self", arg: 1, scope: !81, file: !82, line: 13, type: !85)
!100 = !DILocation(line: 13, column: 34, scope: !81)
!101 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !81, file: !82, line: 13, type: !89)
!102 = !DILocation(line: 13, column: 50, scope: !81)
!103 = !DILocalVariable(name: "limit", arg: 3, scope: !81, file: !82, line: 13, type: !95)
!104 = !DILocation(line: 13, column: 70, scope: !81)
!105 = !DILocation(line: 15, column: 3, scope: !81)
!106 = !DILocation(line: 15, column: 30, scope: !81)
!107 = !DILocation(line: 15, column: 55, scope: !81)
!108 = !DILocation(line: 16, column: 9, scope: !81)
!109 = distinct !DISubprogram(name: "close", linkageName: "std.io.LimitReader.close", scope: !82, file: !82, line: 19, type: !110, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!110 = !DISubroutineType(types: !111)
!111 = !{!112, !19, !85}
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !113)
!113 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!114 = !DILocation(line: 20, column: 1, scope: !109)
!115 = !DILocalVariable(name: "self", arg: 1, scope: !109, file: !82, line: 19, type: !85)
!116 = !DILocation(line: 19, column: 28, scope: !109)
!117 = !DILocation(line: 21, column: 7, scope: !109)
!118 = !DILocation(line: 21, column: 41, scope: !109)
!119 = distinct !DISubprogram(name: "read", linkageName: "std.io.LimitReader.read", scope: !82, file: !82, line: 25, type: !120, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!120 = !DISubroutineType(types: !121)
!121 = !{!112, !122, !85, !123}
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !95, size: 64, align: 64, dwarfAddressSpace: 0)
!123 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !124, identifier: "char[]")
!124 = !{!125, !127}
!125 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !123, baseType: !126, size: 64, align: 64)
!126 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !4, size: 64, align: 64, dwarfAddressSpace: 0)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !123, baseType: !95, size: 64, align: 64, offset: 64)
!128 = !DILocation(line: 26, column: 1, scope: !119)
!129 = !DILocalVariable(name: "self", arg: 1, scope: !119, file: !82, line: 25, type: !85)
!130 = !DILocation(line: 25, column: 26, scope: !119)
!131 = !DILocalVariable(name: "bytes", arg: 2, scope: !119, file: !82, line: 25, type: !123)
!132 = !DILocation(line: 25, column: 40, scope: !119)
!133 = !DILocation(line: 27, column: 6, scope: !119)
!134 = !DILocation(line: 27, column: 30, scope: !119)
!135 = !DILocalVariable(name: "m", scope: !119, file: !82, line: 28, type: !95, align: 8)
!136 = !DILocation(line: 28, column: 6, scope: !119)
!137 = !DILocation(line: 28, column: 14, scope: !119)
!138 = !DILocation(line: 28, column: 25, scope: !119)
!139 = !DILocation(line: 17, column: 10, scope: !140, inlinedAt: !142)
!140 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !141, file: !141, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!141 = !DIFile(filename: "builtin_comparison.c3", directory: "/opt/homebrew/lib/c3/std/core")
!142 = !DILocation(line: 100, column: 10, scope: !143, inlinedAt: !144)
!143 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !141, file: !141, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!144 = !DILocation(line: 28, column: 10, scope: !119)
!145 = !DILocation(line: 17, column: 14, scope: !140, inlinedAt: !142)
!146 = !DILocation(line: 100, column: 31, scope: !143, inlinedAt: !144)
!147 = !DILocation(line: 100, column: 35, scope: !143, inlinedAt: !144)
!148 = !DILocalVariable(name: "n", scope: !119, file: !82, line: 29, type: !95, align: 8)
!149 = !DILocation(line: 29, column: 6, scope: !119)
!150 = !DILocation(line: 29, column: 10, scope: !119)
!151 = !DILocation(line: 29, column: 35, scope: !119)
!152 = !DILocation(line: 29, column: 41, scope: !119)
!153 = !DILocation(line: 29, column: 42, scope: !119)
!154 = !DILocation(line: 30, column: 2, scope: !119)
!155 = !DILocation(line: 30, column: 16, scope: !119)
!156 = !DILocation(line: 31, column: 9, scope: !119)
!157 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.LimitReader.read_byte", scope: !82, file: !82, line: 34, type: !158, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!158 = !DISubroutineType(types: !159)
!159 = !{!112, !126, !85}
!160 = !DILocation(line: 35, column: 1, scope: !157)
!161 = !DILocalVariable(name: "self", arg: 1, scope: !157, file: !82, line: 34, type: !85)
!162 = !DILocation(line: 34, column: 32, scope: !157)
!163 = !DILocation(line: 36, column: 6, scope: !157)
!164 = !DILocation(line: 36, column: 30, scope: !157)
!165 = !DILocation(line: 38, column: 9, scope: !157)
!166 = !DILocation(line: 37, column: 12, scope: !167)
!167 = distinct !DILexicalBlock(scope: !157, file: !82, line: 37, column: 12)
!168 = distinct !DISubprogram(name: "available", linkageName: "std.io.LimitReader.available", scope: !82, file: !82, line: 41, type: !169, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!169 = !DISubroutineType(types: !170)
!170 = !{!112, !122, !85}
!171 = !DILocation(line: 42, column: 1, scope: !168)
!172 = !DILocalVariable(name: "self", arg: 1, scope: !168, file: !82, line: 41, type: !85)
!173 = !DILocation(line: 41, column: 31, scope: !168)
!174 = !DILocation(line: 43, column: 9, scope: !168)
!175 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteWriter.new_init", scope: !176, file: !176, line: 17, type: !177, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!176 = !DIFile(filename: "bytewriter.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!177 = !DISubroutineType(types: !178)
!178 = !{!179, !179, !185}
!179 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteWriter*", baseType: !180, size: 64, align: 64, dwarfAddressSpace: 0)
!180 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteWriter", scope: !176, file: !176, line: 4, size: 320, align: 64, elements: !181, identifier: "std.io.ByteWriter")
!181 = !{!182, !183, !184}
!182 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !180, file: !176, line: 6, baseType: !123, size: 128, align: 64)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !180, file: !176, line: 7, baseType: !95, size: 64, align: 64, offset: 128)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !180, file: !176, line: 8, baseType: !185, size: 128, align: 64, offset: 192)
!185 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !186, identifier: "Allocator")
!186 = !{!187, !188}
!187 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !185, baseType: !19, size: 64, align: 64)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !185, baseType: !93, size: 64, align: 64, offset: 64)
!189 = !DILocation(line: 18, column: 1, scope: !175)
!190 = !DILocalVariable(name: "self", arg: 1, scope: !175, file: !176, line: 17, type: !179)
!191 = !DILocation(line: 17, column: 36, scope: !175)
!192 = !DILocalVariable(name: "allocator", arg: 2, scope: !175, file: !176, line: 17, type: !185)
!193 = !DILocation(line: 17, column: 53, scope: !175)
!194 = !DILocation(line: 14, column: 11, scope: !195)
!195 = distinct !DILexicalBlock(scope: !175, file: !176, line: 18, column: 1)
!196 = !DILocation(line: 19, column: 3, scope: !175)
!197 = !DILocation(line: 19, column: 21, scope: !175)
!198 = !DILocation(line: 19, column: 38, scope: !175)
!199 = !DILocation(line: 20, column: 9, scope: !175)
!200 = !DILocation(line: 15, column: 11, scope: !175)
!201 = !DILocation(line: 15, column: 27, scope: !175)
!202 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteWriter.temp_init", scope: !176, file: !176, line: 28, type: !203, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!203 = !DISubroutineType(types: !204)
!204 = !{!179, !179}
!205 = !DILocation(line: 29, column: 1, scope: !202)
!206 = !DILocalVariable(name: "self", arg: 1, scope: !202, file: !176, line: 28, type: !179)
!207 = !DILocation(line: 28, column: 37, scope: !202)
!208 = !DILocation(line: 25, column: 11, scope: !209)
!209 = distinct !DILexicalBlock(scope: !202, file: !176, line: 29, column: 1)
!210 = !DILocation(line: 396, column: 6, scope: !211, inlinedAt: !213)
!211 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !212, file: !212, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!212 = !DIFile(filename: "mem_allocator.c3", directory: "/opt/homebrew/lib/c3/std/core")
!213 = !DILocation(line: 30, column: 23, scope: !202)
!214 = !DILocation(line: 398, column: 3, scope: !215, inlinedAt: !213)
!215 = distinct !DILexicalBlock(scope: !211, file: !212, line: 397, column: 2)
!216 = !DILocation(line: 400, column: 9, scope: !211, inlinedAt: !213)
!217 = !DILocation(line: 30, column: 9, scope: !202)
!218 = !DILocation(line: 26, column: 10, scope: !202)
!219 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteWriter.init_with_buffer", scope: !176, file: !176, line: 33, type: !220, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!220 = !DISubroutineType(types: !221)
!221 = !{!179, !179, !123}
!222 = !DILocation(line: 34, column: 1, scope: !219)
!223 = !DILocalVariable(name: "self", arg: 1, scope: !219, file: !176, line: 33, type: !179)
!224 = !DILocation(line: 33, column: 44, scope: !219)
!225 = !DILocalVariable(name: "data", arg: 2, scope: !219, file: !176, line: 33, type: !123)
!226 = !DILocation(line: 33, column: 58, scope: !219)
!227 = !DILocation(line: 35, column: 3, scope: !219)
!228 = !DILocation(line: 35, column: 21, scope: !219)
!229 = !DILocation(line: 35, column: 40, scope: !219)
!230 = !DILocation(line: 36, column: 9, scope: !219)
!231 = distinct !DISubprogram(name: "destroy", linkageName: "std.io.ByteWriter.destroy", scope: !176, file: !176, line: 39, type: !232, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!232 = !DISubroutineType(types: !233)
!233 = !{!112, !19, !179}
!234 = !DILocation(line: 40, column: 1, scope: !231)
!235 = !DILocalVariable(name: "self", arg: 1, scope: !231, file: !176, line: 39, type: !179)
!236 = !DILocation(line: 39, column: 29, scope: !231)
!237 = !DILocation(line: 41, column: 7, scope: !231)
!238 = !DILocalVariable(name: "ptr", scope: !231, file: !176, line: 42, type: !19, align: 8)
!239 = !DILocation(line: 42, column: 12, scope: !231)
!240 = !DILocation(line: 42, column: 18, scope: !231)
!241 = !DILocation(line: 42, column: 50, scope: !231)
!242 = !DILocation(line: 101, column: 6, scope: !243, inlinedAt: !244)
!243 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !212, file: !212, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!244 = !DILocation(line: 42, column: 34, scope: !231)
!245 = !DILocation(line: 101, column: 18, scope: !243, inlinedAt: !244)
!246 = !DILocation(line: 105, column: 25, scope: !243, inlinedAt: !244)
!247 = !DILocation(line: 105, column: 2, scope: !243, inlinedAt: !244)
!248 = !DILocation(line: 43, column: 3, scope: !231)
!249 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ByteWriter.str_view", scope: !176, file: !176, line: 46, type: !250, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!250 = !DISubroutineType(types: !251)
!251 = !{!252, !179}
!252 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !123)
!253 = !DILocation(line: 47, column: 1, scope: !249)
!254 = !DILocalVariable(name: "self", arg: 1, scope: !249, file: !176, line: 46, type: !179)
!255 = !DILocation(line: 46, column: 31, scope: !249)
!256 = !DILocation(line: 48, column: 17, scope: !249)
!257 = !DILocation(line: 48, column: 28, scope: !249)
!258 = !DILocation(line: 48, column: 29, scope: !249)
!259 = !DILocation(line: 48, column: 10, scope: !249)
!260 = distinct !DISubprogram(name: "ensure_capacity", linkageName: "std.io.ByteWriter.ensure_capacity", scope: !176, file: !176, line: 51, type: !261, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!261 = !DISubroutineType(types: !262)
!262 = !{!112, !19, !179, !96}
!263 = !DILocation(line: 52, column: 1, scope: !260)
!264 = !DILocalVariable(name: "self", arg: 1, scope: !260, file: !176, line: 51, type: !179)
!265 = !DILocation(line: 51, column: 37, scope: !260)
!266 = !DILocalVariable(name: "len", arg: 2, scope: !260, file: !176, line: 51, type: !95)
!267 = !DILocation(line: 51, column: 48, scope: !260)
!268 = !DILocation(line: 53, column: 6, scope: !260)
!269 = !DILocation(line: 53, column: 23, scope: !260)
!270 = !DILocation(line: 54, column: 7, scope: !260)
!271 = !DILocation(line: 54, column: 30, scope: !260)
!272 = !DILocation(line: 55, column: 6, scope: !260)
!273 = !DILocation(line: 55, column: 22, scope: !260)
!274 = !DILocalVariable(name: "new_capacity", scope: !260, file: !176, line: 56, type: !95, align: 8)
!275 = !DILocation(line: 56, column: 6, scope: !260)
!276 = !DILocalVariable(name: "y", scope: !277, file: !176, line: 1026, type: !95, align: 8)
!277 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !278, file: !278, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!278 = !DIFile(filename: "math.c3", directory: "/opt/homebrew/lib/c3/std/math")
!279 = !DILocation(line: 1026, column: 13, scope: !277, inlinedAt: !280)
!280 = !DILocation(line: 56, column: 21, scope: !260)
!281 = !DILocation(line: 1026, column: 17, scope: !277, inlinedAt: !280)
!282 = !DILocation(line: 1027, column: 2, scope: !277, inlinedAt: !280)
!283 = !DILocation(line: 1027, column: 9, scope: !284, inlinedAt: !280)
!284 = distinct !DILexicalBlock(scope: !277, file: !278, line: 1027, column: 2)
!285 = !DILocation(line: 1027, column: 13, scope: !284, inlinedAt: !280)
!286 = !DILocation(line: 1027, column: 16, scope: !284, inlinedAt: !280)
!287 = !DILocation(line: 1027, column: 21, scope: !284, inlinedAt: !280)
!288 = !DILocation(line: 1028, column: 9, scope: !277, inlinedAt: !280)
!289 = !DILocalVariable(name: "new_ptr", scope: !260, file: !176, line: 57, type: !126, align: 8)
!290 = !DILocation(line: 57, column: 8, scope: !260)
!291 = !DILocation(line: 57, column: 41, scope: !260)
!292 = !DILocation(line: 57, column: 57, scope: !260)
!293 = !DILocation(line: 90, column: 6, scope: !294, inlinedAt: !295)
!294 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !212, file: !212, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!295 = !DILocation(line: 57, column: 18, scope: !260)
!296 = !DILocation(line: 101, column: 6, scope: !297, inlinedAt: !298)
!297 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !212, file: !212, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!298 = !DILocation(line: 92, column: 3, scope: !299, inlinedAt: !295)
!299 = distinct !DILexicalBlock(scope: !294, file: !212, line: 91, column: 2)
!300 = !DILocation(line: 101, column: 18, scope: !297, inlinedAt: !298)
!301 = !DILocation(line: 105, column: 25, scope: !297, inlinedAt: !298)
!302 = !DILocation(line: 105, column: 2, scope: !297, inlinedAt: !298)
!303 = !DILocation(line: 93, column: 10, scope: !299, inlinedAt: !295)
!304 = !DILocation(line: 95, column: 6, scope: !294, inlinedAt: !295)
!305 = !DILocation(line: 28, column: 71, scope: !306, inlinedAt: !307)
!306 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !212, file: !212, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!307 = !DILocation(line: 95, column: 19, scope: !294, inlinedAt: !295)
!308 = !DILocation(line: 35, column: 60, scope: !309, inlinedAt: !310)
!309 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !212, file: !212, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!310 = !DILocation(line: 96, column: 9, scope: !294, inlinedAt: !295)
!311 = !DILocation(line: 58, column: 2, scope: !260)
!312 = !DILocation(line: 58, column: 15, scope: !260)
!313 = !DILocation(line: 58, column: 24, scope: !260)
!314 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteWriter.write", scope: !176, file: !176, line: 61, type: !315, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!315 = !DISubroutineType(types: !316)
!316 = !{!112, !122, !179, !123}
!317 = !DILocation(line: 62, column: 1, scope: !314)
!318 = !DILocalVariable(name: "self", arg: 1, scope: !314, file: !176, line: 61, type: !179)
!319 = !DILocation(line: 61, column: 26, scope: !314)
!320 = !DILocalVariable(name: "bytes", arg: 2, scope: !314, file: !176, line: 61, type: !123)
!321 = !DILocation(line: 61, column: 40, scope: !314)
!322 = !DILocation(line: 63, column: 23, scope: !314)
!323 = !DILocation(line: 63, column: 36, scope: !314)
!324 = !DILocation(line: 63, column: 2, scope: !314)
!325 = !DILocation(line: 64, column: 13, scope: !314)
!326 = !DILocation(line: 64, column: 24, scope: !314)
!327 = !DILocation(line: 64, column: 37, scope: !314)
!328 = !DILocation(line: 64, column: 48, scope: !314)
!329 = !DILocation(line: 324, column: 11, scope: !330, inlinedAt: !333)
!330 = distinct !DILexicalBlock(scope: !332, file: !331, line: 327, column: 1)
!331 = !DIFile(filename: "mem.c3", directory: "/opt/homebrew/lib/c3/std/core")
!332 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !331, file: !331, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!333 = !DILocation(line: 64, column: 2, scope: !314)
!334 = !DILocation(line: 324, column: 23, scope: !330, inlinedAt: !333)
!335 = !DILocation(line: 324, column: 29, scope: !330, inlinedAt: !333)
!336 = !DILocation(line: 324, column: 36, scope: !330, inlinedAt: !333)
!337 = !DILocation(line: 324, column: 43, scope: !330, inlinedAt: !333)
!338 = !DILocation(line: 324, column: 49, scope: !330, inlinedAt: !333)
!339 = !DILocation(line: 324, column: 56, scope: !330, inlinedAt: !333)
!340 = !DILocation(line: 328, column: 11, scope: !332, inlinedAt: !333)
!341 = !DILocation(line: 328, column: 16, scope: !332, inlinedAt: !333)
!342 = !DILocation(line: 328, column: 21, scope: !332, inlinedAt: !333)
!343 = !DILocation(line: 328, column: 26, scope: !332, inlinedAt: !333)
!344 = !DILocation(line: 65, column: 2, scope: !314)
!345 = !DILocation(line: 65, column: 16, scope: !314)
!346 = !DILocation(line: 66, column: 9, scope: !314)
!347 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteWriter.write_byte", scope: !176, file: !176, line: 69, type: !348, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!348 = !DISubroutineType(types: !349)
!349 = !{!112, !19, !179, !4}
!350 = !DILocation(line: 70, column: 1, scope: !347)
!351 = !DILocalVariable(name: "self", arg: 1, scope: !347, file: !176, line: 69, type: !179)
!352 = !DILocation(line: 69, column: 32, scope: !347)
!353 = !DILocalVariable(name: "c", arg: 2, scope: !347, file: !176, line: 69, type: !4)
!354 = !DILocation(line: 69, column: 44, scope: !347)
!355 = !DILocation(line: 71, column: 23, scope: !347)
!356 = !DILocation(line: 71, column: 2, scope: !347)
!357 = !DILocation(line: 72, column: 2, scope: !347)
!358 = !DILocation(line: 72, column: 13, scope: !347)
!359 = !DILocation(line: 72, column: 29, scope: !347)
!360 = distinct !DISubprogram(name: "read_from", linkageName: "std.io.ByteWriter.read_from", scope: !176, file: !176, line: 79, type: !361, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!361 = !DISubroutineType(types: !362)
!362 = !{!112, !122, !179, !89}
!363 = !DILocation(line: 80, column: 1, scope: !360)
!364 = !DILocalVariable(name: "self", arg: 1, scope: !360, file: !176, line: 79, type: !179)
!365 = !DILocation(line: 79, column: 30, scope: !360)
!366 = !DILocalVariable(name: "reader", arg: 2, scope: !360, file: !176, line: 79, type: !89)
!367 = !DILocation(line: 79, column: 46, scope: !360)
!368 = !DILocalVariable(name: "start_index", scope: !360, file: !176, line: 81, type: !95, align: 8)
!369 = !DILocation(line: 81, column: 6, scope: !360)
!370 = !DILocation(line: 81, column: 20, scope: !360)
!371 = !DILocation(line: 82, column: 7, scope: !360)
!372 = !DILocation(line: 84, column: 3, scope: !373)
!373 = distinct !DILexicalBlock(scope: !360, file: !176, line: 83, column: 2)
!374 = !DILocalVariable(name: "available", scope: !375, file: !176, line: 84, type: !95, align: 8)
!375 = distinct !DILexicalBlock(scope: !373, file: !176, line: 84, column: 3)
!376 = !DILocation(line: 84, column: 14, scope: !375)
!377 = !DILocation(line: 84, column: 26, scope: !375)
!378 = !DILocation(line: 86, column: 25, scope: !379)
!379 = distinct !DILexicalBlock(scope: !375, file: !176, line: 85, column: 3)
!380 = !DILocation(line: 86, column: 38, scope: !379)
!381 = !DILocation(line: 86, column: 4, scope: !379)
!382 = !DILocalVariable(name: "read", scope: !379, file: !176, line: 87, type: !95, align: 8)
!383 = !DILocation(line: 87, column: 8, scope: !379)
!384 = !DILocation(line: 87, column: 27, scope: !379)
!385 = !DILocation(line: 87, column: 38, scope: !379)
!386 = !DILocation(line: 87, column: 15, scope: !379)
!387 = !DILocation(line: 88, column: 4, scope: !379)
!388 = !DILocation(line: 88, column: 18, scope: !379)
!389 = !DILocation(line: 90, column: 10, scope: !373)
!390 = !DILocation(line: 90, column: 23, scope: !373)
!391 = !DILocation(line: 92, column: 6, scope: !360)
!392 = !DILocation(line: 94, column: 24, scope: !393)
!393 = distinct !DILexicalBlock(scope: !360, file: !176, line: 93, column: 2)
!394 = !DILocation(line: 94, column: 3, scope: !393)
!395 = !DILocation(line: 96, column: 2, scope: !360)
!396 = !DILocalVariable(name: "len_to_read", scope: !397, file: !176, line: 99, type: !95, align: 8)
!397 = distinct !DILexicalBlock(scope: !398, file: !176, line: 97, column: 2)
!398 = distinct !DILexicalBlock(scope: !360, file: !176, line: 96, column: 2)
!399 = !DILocation(line: 99, column: 7, scope: !397)
!400 = !DILocation(line: 99, column: 21, scope: !397)
!401 = !DILocation(line: 99, column: 38, scope: !397)
!402 = !DILocation(line: 101, column: 7, scope: !397)
!403 = !DILocation(line: 103, column: 25, scope: !404)
!404 = distinct !DILexicalBlock(scope: !397, file: !176, line: 102, column: 3)
!405 = !DILocation(line: 103, column: 4, scope: !404)
!406 = !DILocation(line: 104, column: 18, scope: !404)
!407 = !DILocation(line: 104, column: 35, scope: !404)
!408 = !DILocalVariable(name: "read", scope: !397, file: !176, line: 107, type: !95, align: 8)
!409 = !DILocation(line: 107, column: 7, scope: !397)
!410 = !DILocation(line: 107, column: 26, scope: !397)
!411 = !DILocation(line: 107, column: 37, scope: !397)
!412 = !DILocation(line: 107, column: 14, scope: !397)
!413 = !DILocation(line: 108, column: 3, scope: !397)
!414 = !DILocation(line: 108, column: 17, scope: !397)
!415 = !DILocation(line: 110, column: 7, scope: !397)
!416 = !DILocation(line: 110, column: 14, scope: !397)
!417 = !DILocation(line: 110, column: 34, scope: !397)
!418 = !DILocation(line: 110, column: 47, scope: !397)
!419 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.ByteBuffer.new_init", scope: !46, file: !46, line: 19, type: !420, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!420 = !DISubroutineType(types: !421)
!421 = !{!112, !422, !423, !96, !96, !185}
!422 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer**", baseType: !423, size: 64, align: 64, dwarfAddressSpace: 0)
!423 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteBuffer*", baseType: !424, size: 64, align: 64, dwarfAddressSpace: 0)
!424 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteBuffer", scope: !46, file: !46, line: 4, size: 512, align: 64, elements: !425, identifier: "std.io.ByteBuffer")
!425 = !{!426, !427, !428, !429, !430, !431}
!426 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !424, file: !46, line: 6, baseType: !185, size: 128, align: 64)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "max_read", scope: !424, file: !46, line: 7, baseType: !95, size: 64, align: 64, offset: 128)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !424, file: !46, line: 8, baseType: !123, size: 128, align: 64, offset: 192)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !424, file: !46, line: 9, baseType: !95, size: 64, align: 64, offset: 320)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !424, file: !46, line: 10, baseType: !95, size: 64, align: 64, offset: 384)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "has_last", scope: !424, file: !46, line: 11, baseType: !432, size: 8, align: 8, offset: 448)
!432 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!433 = !DILocation(line: 20, column: 1, scope: !419)
!434 = !DILocalVariable(name: "self", arg: 1, scope: !419, file: !46, line: 19, type: !423)
!435 = !DILocation(line: 19, column: 37, scope: !419)
!436 = !DILocalVariable(name: "max_read", arg: 2, scope: !419, file: !46, line: 19, type: !95)
!437 = !DILocation(line: 19, column: 48, scope: !419)
!438 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !419, file: !46, line: 19, type: !95)
!439 = !DILocation(line: 19, column: 62, scope: !419)
!440 = !DILocalVariable(name: "allocator", arg: 4, scope: !419, file: !46, line: 19, type: !185)
!441 = !DILocation(line: 19, column: 95, scope: !419)
!442 = !DILocation(line: 17, column: 11, scope: !443)
!443 = distinct !DILexicalBlock(scope: !419, file: !46, line: 20, column: 1)
!444 = !DILocation(line: 21, column: 3, scope: !419)
!445 = !DILocation(line: 21, column: 25, scope: !419)
!446 = !DILocation(line: 21, column: 48, scope: !419)
!447 = !DILocation(line: 47, column: 10, scope: !448, inlinedAt: !449)
!448 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !141, file: !141, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!449 = !DILocation(line: 116, column: 10, scope: !450, inlinedAt: !451)
!450 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !141, file: !141, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!451 = !DILocation(line: 22, column: 21, scope: !419)
!452 = !DILocation(line: 47, column: 14, scope: !448, inlinedAt: !449)
!453 = !DILocation(line: 116, column: 34, scope: !450, inlinedAt: !451)
!454 = !DILocation(line: 116, column: 38, scope: !450, inlinedAt: !451)
!455 = !DILocation(line: 23, column: 12, scope: !419)
!456 = !DILocation(line: 23, column: 2, scope: !419)
!457 = !DILocation(line: 24, column: 9, scope: !419)
!458 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.ByteBuffer.temp_init", scope: !46, file: !46, line: 27, type: !459, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!459 = !DISubroutineType(types: !460)
!460 = !{!112, !422, !423, !96, !96}
!461 = !DILocation(line: 28, column: 1, scope: !458)
!462 = !DILocalVariable(name: "self", arg: 1, scope: !458, file: !46, line: 27, type: !423)
!463 = !DILocation(line: 27, column: 38, scope: !458)
!464 = !DILocalVariable(name: "max_read", arg: 2, scope: !458, file: !46, line: 27, type: !95)
!465 = !DILocation(line: 27, column: 49, scope: !458)
!466 = !DILocalVariable(name: "initial_capacity", arg: 3, scope: !458, file: !46, line: 27, type: !95)
!467 = !DILocation(line: 27, column: 63, scope: !458)
!468 = !DILocation(line: 396, column: 6, scope: !469, inlinedAt: !470)
!469 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !212, file: !212, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!470 = !DILocation(line: 29, column: 51, scope: !458)
!471 = !DILocation(line: 398, column: 3, scope: !472, inlinedAt: !470)
!472 = distinct !DILexicalBlock(scope: !469, file: !212, line: 397, column: 2)
!473 = !DILocation(line: 400, column: 9, scope: !469, inlinedAt: !470)
!474 = !DILocation(line: 29, column: 9, scope: !458)
!475 = distinct !DISubprogram(name: "init_with_buffer", linkageName: "std.io.ByteBuffer.init_with_buffer", scope: !46, file: !46, line: 36, type: !476, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!476 = !DISubroutineType(types: !477)
!477 = !{!112, !422, !423, !123}
!478 = !DILocation(line: 37, column: 1, scope: !475)
!479 = !DILocalVariable(name: "self", arg: 1, scope: !475, file: !46, line: 36, type: !423)
!480 = !DILocation(line: 36, column: 45, scope: !475)
!481 = !DILocalVariable(name: "buf", arg: 2, scope: !475, file: !46, line: 36, type: !123)
!482 = !DILocation(line: 36, column: 59, scope: !475)
!483 = !DILocation(line: 33, column: 11, scope: !484)
!484 = distinct !DILexicalBlock(scope: !475, file: !46, line: 37, column: 1)
!485 = !DILocation(line: 34, column: 11, scope: !484)
!486 = !DILocation(line: 38, column: 3, scope: !475)
!487 = !DILocation(line: 38, column: 24, scope: !475)
!488 = !DILocation(line: 38, column: 42, scope: !475)
!489 = !DILocation(line: 39, column: 9, scope: !475)
!490 = distinct !DISubprogram(name: "free", linkageName: "std.io.ByteBuffer.free", scope: !46, file: !46, line: 42, type: !491, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!491 = !DISubroutineType(types: !492)
!492 = !{null, !423}
!493 = !DILocation(line: 43, column: 1, scope: !490)
!494 = !DILocalVariable(name: "self", arg: 1, scope: !490, file: !46, line: 42, type: !423)
!495 = !DILocation(line: 42, column: 25, scope: !490)
!496 = !DILocation(line: 44, column: 6, scope: !490)
!497 = !DILocation(line: 44, column: 38, scope: !490)
!498 = !DILocation(line: 44, column: 54, scope: !490)
!499 = !DILocation(line: 101, column: 6, scope: !500, inlinedAt: !501)
!500 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !212, file: !212, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!501 = !DILocation(line: 44, column: 22, scope: !490)
!502 = !DILocation(line: 101, column: 18, scope: !500, inlinedAt: !501)
!503 = !DILocation(line: 105, column: 25, scope: !500, inlinedAt: !501)
!504 = !DILocation(line: 105, column: 2, scope: !500, inlinedAt: !501)
!505 = !DILocation(line: 45, column: 3, scope: !490)
!506 = distinct !DISubprogram(name: "write", linkageName: "std.io.ByteBuffer.write", scope: !46, file: !46, line: 48, type: !507, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!507 = !DISubroutineType(types: !508)
!508 = !{!112, !122, !423, !123}
!509 = !DILocation(line: 49, column: 1, scope: !506)
!510 = !DILocalVariable(name: "self", arg: 1, scope: !506, file: !46, line: 48, type: !423)
!511 = !DILocation(line: 48, column: 26, scope: !506)
!512 = !DILocalVariable(name: "bytes", arg: 2, scope: !506, file: !46, line: 48, type: !123)
!513 = !DILocation(line: 48, column: 40, scope: !506)
!514 = !DILocalVariable(name: "cap", scope: !506, file: !46, line: 50, type: !95, align: 8)
!515 = !DILocation(line: 50, column: 6, scope: !506)
!516 = !DILocation(line: 50, column: 12, scope: !506)
!517 = !DILocation(line: 50, column: 29, scope: !506)
!518 = !DILocation(line: 51, column: 6, scope: !506)
!519 = !DILocation(line: 51, column: 12, scope: !506)
!520 = !DILocation(line: 51, column: 33, scope: !506)
!521 = !DILocation(line: 51, column: 23, scope: !506)
!522 = !DILocation(line: 52, column: 41, scope: !506)
!523 = !DILocation(line: 52, column: 47, scope: !506)
!524 = !DILocation(line: 52, column: 2, scope: !506)
!525 = !DILocation(line: 52, column: 13, scope: !506)
!526 = !DILocation(line: 52, column: 28, scope: !506)
!527 = !DILocation(line: 53, column: 2, scope: !506)
!528 = !DILocation(line: 53, column: 20, scope: !506)
!529 = !DILocation(line: 54, column: 9, scope: !506)
!530 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.ByteBuffer.write_byte", scope: !46, file: !46, line: 57, type: !531, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!531 = !DISubroutineType(types: !532)
!532 = !{!112, !19, !423, !4}
!533 = !DILocation(line: 58, column: 1, scope: !530)
!534 = !DILocalVariable(name: "self", arg: 1, scope: !530, file: !46, line: 57, type: !423)
!535 = !DILocation(line: 57, column: 32, scope: !530)
!536 = !DILocalVariable(name: "c", arg: 2, scope: !530, file: !46, line: 57, type: !4)
!537 = !DILocation(line: 57, column: 44, scope: !530)
!538 = !DILocalVariable(name: "cap", scope: !530, file: !46, line: 59, type: !95, align: 8)
!539 = !DILocation(line: 59, column: 6, scope: !530)
!540 = !DILocation(line: 59, column: 12, scope: !530)
!541 = !DILocation(line: 59, column: 29, scope: !530)
!542 = !DILocation(line: 60, column: 6, scope: !530)
!543 = !DILocation(line: 60, column: 26, scope: !530)
!544 = !DILocation(line: 60, column: 16, scope: !530)
!545 = !DILocation(line: 61, column: 2, scope: !530)
!546 = !DILocation(line: 61, column: 13, scope: !530)
!547 = !DILocation(line: 61, column: 31, scope: !530)
!548 = !DILocation(line: 62, column: 2, scope: !530)
!549 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteBuffer.read", scope: !46, file: !46, line: 65, type: !507, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!550 = !DILocation(line: 66, column: 1, scope: !549)
!551 = !DILocalVariable(name: "self", arg: 1, scope: !549, file: !46, line: 65, type: !423)
!552 = !DILocation(line: 65, column: 25, scope: !549)
!553 = !DILocalVariable(name: "bytes", arg: 2, scope: !549, file: !46, line: 65, type: !123)
!554 = !DILocation(line: 65, column: 39, scope: !549)
!555 = !DILocalVariable(name: "readable", scope: !549, file: !46, line: 67, type: !95, align: 8)
!556 = !DILocation(line: 67, column: 6, scope: !549)
!557 = !DILocation(line: 67, column: 17, scope: !549)
!558 = !DILocation(line: 67, column: 34, scope: !549)
!559 = !DILocation(line: 68, column: 6, scope: !549)
!560 = !DILocation(line: 70, column: 3, scope: !561)
!561 = distinct !DILexicalBlock(scope: !549, file: !46, line: 69, column: 2)
!562 = !DILocation(line: 70, column: 19, scope: !561)
!563 = !DILocation(line: 71, column: 10, scope: !561)
!564 = !DILocalVariable(name: "n", scope: !549, file: !46, line: 73, type: !95, align: 8)
!565 = !DILocation(line: 73, column: 6, scope: !549)
!566 = !DILocation(line: 73, column: 24, scope: !549)
!567 = !DILocation(line: 17, column: 10, scope: !568, inlinedAt: !569)
!568 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !141, file: !141, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!569 = !DILocation(line: 100, column: 10, scope: !570, inlinedAt: !571)
!570 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !141, file: !141, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!571 = !DILocation(line: 73, column: 10, scope: !549)
!572 = !DILocation(line: 17, column: 14, scope: !568, inlinedAt: !569)
!573 = !DILocation(line: 100, column: 31, scope: !570, inlinedAt: !571)
!574 = !DILocation(line: 100, column: 35, scope: !570, inlinedAt: !571)
!575 = !DILocation(line: 74, column: 14, scope: !549)
!576 = !DILocation(line: 74, column: 25, scope: !549)
!577 = !DILocation(line: 74, column: 39, scope: !549)
!578 = !DILocation(line: 74, column: 2, scope: !549)
!579 = !DILocation(line: 74, column: 8, scope: !549)
!580 = !DILocation(line: 74, column: 9, scope: !549)
!581 = !DILocation(line: 75, column: 2, scope: !549)
!582 = !DILocation(line: 75, column: 19, scope: !549)
!583 = !DILocation(line: 76, column: 2, scope: !549)
!584 = !DILocation(line: 76, column: 18, scope: !549)
!585 = !DILocation(line: 140, column: 6, scope: !586, inlinedAt: !587)
!586 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !46, file: !46, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!587 = !DILocation(line: 77, column: 2, scope: !549)
!588 = !DILocation(line: 140, column: 23, scope: !586, inlinedAt: !587)
!589 = !DILocalVariable(name: "readable", scope: !590, file: !46, line: 143, type: !95, align: 8)
!590 = distinct !DILexicalBlock(scope: !586, file: !46, line: 141, column: 2)
!591 = !DILocation(line: 143, column: 7, scope: !590, inlinedAt: !587)
!592 = !DILocation(line: 143, column: 18, scope: !590, inlinedAt: !587)
!593 = !DILocation(line: 143, column: 35, scope: !590, inlinedAt: !587)
!594 = !DILocation(line: 144, column: 31, scope: !590, inlinedAt: !587)
!595 = !DILocation(line: 144, column: 42, scope: !590, inlinedAt: !587)
!596 = !DILocation(line: 144, column: 64, scope: !590, inlinedAt: !587)
!597 = !DILocation(line: 144, column: 60, scope: !590, inlinedAt: !587)
!598 = !DILocation(line: 144, column: 3, scope: !590, inlinedAt: !587)
!599 = !DILocation(line: 144, column: 14, scope: !590, inlinedAt: !587)
!600 = !DILocation(line: 144, column: 19, scope: !590, inlinedAt: !587)
!601 = !DILocation(line: 144, column: 15, scope: !590, inlinedAt: !587)
!602 = !DILocation(line: 145, column: 3, scope: !590, inlinedAt: !587)
!603 = !DILocation(line: 145, column: 24, scope: !590, inlinedAt: !587)
!604 = !DILocation(line: 145, column: 20, scope: !590, inlinedAt: !587)
!605 = !DILocation(line: 146, column: 3, scope: !590, inlinedAt: !587)
!606 = !DILocation(line: 146, column: 19, scope: !590, inlinedAt: !587)
!607 = !DILocation(line: 78, column: 9, scope: !549)
!608 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteBuffer.read_byte", scope: !46, file: !46, line: 81, type: !609, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!609 = !DISubroutineType(types: !610)
!610 = !{!112, !126, !423}
!611 = !DILocation(line: 82, column: 1, scope: !608)
!612 = !DILocalVariable(name: "self", arg: 1, scope: !608, file: !46, line: 81, type: !423)
!613 = !DILocation(line: 81, column: 31, scope: !608)
!614 = !DILocalVariable(name: "readable", scope: !608, file: !46, line: 83, type: !95, align: 8)
!615 = !DILocation(line: 83, column: 6, scope: !608)
!616 = !DILocation(line: 83, column: 17, scope: !608)
!617 = !DILocation(line: 83, column: 34, scope: !608)
!618 = !DILocation(line: 84, column: 6, scope: !608)
!619 = !DILocation(line: 86, column: 3, scope: !620)
!620 = distinct !DILexicalBlock(scope: !608, file: !46, line: 85, column: 2)
!621 = !DILocation(line: 86, column: 19, scope: !620)
!622 = !DILocation(line: 87, column: 10, scope: !620)
!623 = !DILocalVariable(name: "c", scope: !608, file: !46, line: 89, type: !4, align: 1)
!624 = !DILocation(line: 89, column: 7, scope: !608)
!625 = !DILocation(line: 89, column: 11, scope: !608)
!626 = !DILocation(line: 89, column: 22, scope: !608)
!627 = !DILocation(line: 90, column: 2, scope: !608)
!628 = !DILocation(line: 91, column: 2, scope: !608)
!629 = !DILocation(line: 91, column: 18, scope: !608)
!630 = !DILocation(line: 140, column: 6, scope: !631, inlinedAt: !632)
!631 = distinct !DISubprogram(name: "shrink", linkageName: "shrink", scope: !46, file: !46, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!632 = !DILocation(line: 92, column: 2, scope: !608)
!633 = !DILocation(line: 140, column: 23, scope: !631, inlinedAt: !632)
!634 = !DILocalVariable(name: "readable", scope: !635, file: !46, line: 143, type: !95, align: 8)
!635 = distinct !DILexicalBlock(scope: !631, file: !46, line: 141, column: 2)
!636 = !DILocation(line: 143, column: 7, scope: !635, inlinedAt: !632)
!637 = !DILocation(line: 143, column: 18, scope: !635, inlinedAt: !632)
!638 = !DILocation(line: 143, column: 35, scope: !635, inlinedAt: !632)
!639 = !DILocation(line: 144, column: 31, scope: !635, inlinedAt: !632)
!640 = !DILocation(line: 144, column: 42, scope: !635, inlinedAt: !632)
!641 = !DILocation(line: 144, column: 64, scope: !635, inlinedAt: !632)
!642 = !DILocation(line: 144, column: 60, scope: !635, inlinedAt: !632)
!643 = !DILocation(line: 144, column: 3, scope: !635, inlinedAt: !632)
!644 = !DILocation(line: 144, column: 14, scope: !635, inlinedAt: !632)
!645 = !DILocation(line: 144, column: 19, scope: !635, inlinedAt: !632)
!646 = !DILocation(line: 144, column: 15, scope: !635, inlinedAt: !632)
!647 = !DILocation(line: 145, column: 3, scope: !635, inlinedAt: !632)
!648 = !DILocation(line: 145, column: 24, scope: !635, inlinedAt: !632)
!649 = !DILocation(line: 145, column: 20, scope: !635, inlinedAt: !632)
!650 = !DILocation(line: 146, column: 3, scope: !635, inlinedAt: !632)
!651 = !DILocation(line: 146, column: 19, scope: !635, inlinedAt: !632)
!652 = !DILocation(line: 93, column: 9, scope: !608)
!653 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteBuffer.pushback_byte", scope: !46, file: !46, line: 99, type: !654, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!654 = !DISubroutineType(types: !655)
!655 = !{!112, !19, !423}
!656 = !DILocation(line: 100, column: 1, scope: !653)
!657 = !DILocalVariable(name: "self", arg: 1, scope: !653, file: !46, line: 99, type: !423)
!658 = !DILocation(line: 99, column: 35, scope: !653)
!659 = !DILocation(line: 101, column: 7, scope: !653)
!660 = !DILocation(line: 101, column: 29, scope: !653)
!661 = !DILocation(line: 102, column: 9, scope: !653)
!662 = !DILocation(line: 103, column: 2, scope: !653)
!663 = !DILocation(line: 104, column: 2, scope: !653)
!664 = !DILocation(line: 104, column: 18, scope: !653)
!665 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteBuffer.seek", scope: !46, file: !46, line: 107, type: !666, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!666 = !DISubroutineType(types: !667)
!667 = !{!112, !122, !423, !113, !45}
!668 = !DILocation(line: 108, column: 1, scope: !665)
!669 = !DILocalVariable(name: "self", arg: 1, scope: !665, file: !46, line: 107, type: !423)
!670 = !DILocation(line: 107, column: 25, scope: !665)
!671 = !DILocalVariable(name: "offset", arg: 2, scope: !665, file: !46, line: 107, type: !672)
!672 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !113)
!673 = !DILocation(line: 107, column: 36, scope: !665)
!674 = !DILocalVariable(name: "seek", arg: 3, scope: !665, file: !46, line: 107, type: !45)
!675 = !DILocation(line: 107, column: 49, scope: !665)
!676 = !DILocation(line: 112, column: 8, scope: !677)
!677 = distinct !DILexicalBlock(scope: !678, file: !46, line: 112, column: 4)
!678 = distinct !DILexicalBlock(scope: !665, file: !46, line: 109, column: 2)
!679 = !DILocation(line: 112, column: 22, scope: !677)
!680 = !DILocation(line: 112, column: 31, scope: !677)
!681 = !DILocation(line: 112, column: 54, scope: !677)
!682 = !DILocation(line: 113, column: 4, scope: !677)
!683 = !DILocation(line: 113, column: 20, scope: !677)
!684 = !DILocation(line: 114, column: 11, scope: !677)
!685 = !DILocation(line: 116, column: 9, scope: !686)
!686 = distinct !DILexicalBlock(scope: !678, file: !46, line: 116, column: 4)
!687 = !DILocation(line: 116, column: 23, scope: !686)
!688 = !DILocation(line: 116, column: 40, scope: !686)
!689 = !DILocation(line: 117, column: 6, scope: !686)
!690 = !DILocation(line: 117, column: 20, scope: !686)
!691 = !DILocation(line: 117, column: 36, scope: !686)
!692 = !DILocation(line: 117, column: 45, scope: !686)
!693 = !DILocation(line: 117, column: 69, scope: !686)
!694 = !DILocation(line: 118, column: 4, scope: !686)
!695 = !DILocation(line: 118, column: 21, scope: !686)
!696 = !DILocation(line: 120, column: 8, scope: !697)
!697 = distinct !DILexicalBlock(scope: !678, file: !46, line: 120, column: 4)
!698 = !DILocation(line: 120, column: 22, scope: !697)
!699 = !DILocation(line: 120, column: 31, scope: !697)
!700 = !DILocation(line: 120, column: 54, scope: !697)
!701 = !DILocation(line: 121, column: 4, scope: !697)
!702 = !DILocation(line: 121, column: 20, scope: !697)
!703 = !DILocation(line: 121, column: 37, scope: !697)
!704 = !DILocation(line: 123, column: 9, scope: !665)
!705 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteBuffer.available", scope: !46, file: !46, line: 126, type: !706, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!706 = !DISubroutineType(types: !707)
!707 = !{!112, !122, !423}
!708 = !DILocation(line: 127, column: 1, scope: !705)
!709 = !DILocalVariable(name: "self", arg: 1, scope: !705, file: !46, line: 126, type: !423)
!710 = !DILocation(line: 126, column: 30, scope: !705)
!711 = !DILocation(line: 128, column: 9, scope: !705)
!712 = !DILocation(line: 128, column: 26, scope: !705)
!713 = distinct !DISubprogram(name: "grow", linkageName: "std.io.ByteBuffer.grow", scope: !46, file: !46, line: 131, type: !714, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!714 = !DISubroutineType(types: !715)
!715 = !{!112, !19, !423, !96}
!716 = !DILocation(line: 132, column: 1, scope: !713)
!717 = !DILocalVariable(name: "self", arg: 1, scope: !713, file: !46, line: 131, type: !423)
!718 = !DILocation(line: 131, column: 26, scope: !713)
!719 = !DILocalVariable(name: "n", arg: 2, scope: !713, file: !46, line: 131, type: !95)
!720 = !DILocation(line: 131, column: 37, scope: !713)
!721 = !DILocalVariable(name: "y", scope: !722, file: !46, line: 1026, type: !95, align: 8)
!722 = distinct !DISubprogram(name: "next_power_of_2", linkageName: "next_power_of_2", scope: !278, file: !278, line: 1024, scopeLine: 1024, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!723 = !DILocation(line: 1026, column: 13, scope: !722, inlinedAt: !724)
!724 = !DILocation(line: 133, column: 6, scope: !713)
!725 = !DILocation(line: 1026, column: 17, scope: !722, inlinedAt: !724)
!726 = !DILocation(line: 1027, column: 2, scope: !722, inlinedAt: !724)
!727 = !DILocation(line: 1027, column: 9, scope: !728, inlinedAt: !724)
!728 = distinct !DILexicalBlock(scope: !722, file: !278, line: 1027, column: 2)
!729 = !DILocation(line: 1027, column: 13, scope: !728, inlinedAt: !724)
!730 = !DILocation(line: 1027, column: 16, scope: !728, inlinedAt: !724)
!731 = !DILocation(line: 1027, column: 21, scope: !728, inlinedAt: !724)
!732 = !DILocation(line: 1028, column: 9, scope: !722, inlinedAt: !724)
!733 = !DILocalVariable(name: "p", scope: !713, file: !46, line: 134, type: !126, align: 8)
!734 = !DILocation(line: 134, column: 8, scope: !713)
!735 = !DILocation(line: 134, column: 39, scope: !713)
!736 = !DILocation(line: 134, column: 55, scope: !713)
!737 = !DILocation(line: 128, column: 6, scope: !738, inlinedAt: !739)
!738 = distinct !DISubprogram(name: "realloc_aligned", linkageName: "realloc_aligned", scope: !212, file: !212, line: 126, scopeLine: 126, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!739 = !DILocation(line: 134, column: 12, scope: !713)
!740 = !DILocation(line: 142, column: 6, scope: !741, inlinedAt: !742)
!741 = distinct !DISubprogram(name: "free_aligned", linkageName: "free_aligned", scope: !212, file: !212, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!742 = !DILocation(line: 130, column: 3, scope: !743, inlinedAt: !739)
!743 = distinct !DILexicalBlock(scope: !738, file: !212, line: 129, column: 2)
!744 = !DILocation(line: 142, column: 18, scope: !741, inlinedAt: !742)
!745 = !DILocation(line: 146, column: 34, scope: !741, inlinedAt: !742)
!746 = !DILocation(line: 146, column: 2, scope: !741, inlinedAt: !742)
!747 = !DILocation(line: 131, column: 10, scope: !743, inlinedAt: !739)
!748 = !DILocation(line: 133, column: 6, scope: !738, inlinedAt: !739)
!749 = !DILocation(line: 110, column: 6, scope: !750, inlinedAt: !751)
!750 = distinct !DISubprogram(name: "malloc_aligned", linkageName: "malloc_aligned", scope: !212, file: !212, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!751 = !DILocation(line: 135, column: 10, scope: !752, inlinedAt: !739)
!752 = distinct !DILexicalBlock(scope: !738, file: !212, line: 134, column: 2)
!753 = !DILocation(line: 110, column: 20, scope: !750, inlinedAt: !751)
!754 = !DILocation(line: 116, column: 43, scope: !750, inlinedAt: !751)
!755 = !DILocation(line: 116, column: 10, scope: !750, inlinedAt: !751)
!756 = !DILocation(line: 137, column: 41, scope: !738, inlinedAt: !739)
!757 = !DILocation(line: 137, column: 9, scope: !738, inlinedAt: !739)
!758 = !DILocation(line: 135, column: 2, scope: !713)
!759 = !DILocation(line: 135, column: 15, scope: !713)
!760 = !DILocation(line: 135, column: 18, scope: !713)
!761 = distinct !DISubprogram(name: "init", linkageName: "std.io.ReadBuffer.init", scope: !762, file: !762, line: 17, type: !763, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!762 = !DIFile(filename: "buffer.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!763 = !DISubroutineType(types: !764)
!764 = !{!765, !765, !89, !123}
!765 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReadBuffer*", baseType: !766, size: 64, align: 64, dwarfAddressSpace: 0)
!766 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReadBuffer", scope: !762, file: !762, line: 3, size: 384, align: 64, elements: !767, identifier: "std.io.ReadBuffer")
!767 = !{!768, !769, !770, !771}
!768 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !766, file: !762, line: 5, baseType: !89, size: 128, align: 64)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !766, file: !762, line: 6, baseType: !123, size: 128, align: 64, offset: 128)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !766, file: !762, line: 7, baseType: !95, size: 64, align: 64, offset: 256)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "write_idx", scope: !766, file: !762, line: 8, baseType: !95, size: 64, align: 64, offset: 320)
!772 = !DILocation(line: 18, column: 1, scope: !761)
!773 = !DILocalVariable(name: "self", arg: 1, scope: !761, file: !762, line: 17, type: !765)
!774 = !DILocation(line: 17, column: 32, scope: !761)
!775 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !761, file: !762, line: 17, type: !89)
!776 = !DILocation(line: 17, column: 48, scope: !761)
!777 = !DILocalVariable(name: "bytes", arg: 3, scope: !761, file: !762, line: 17, type: !123)
!778 = !DILocation(line: 17, column: 71, scope: !761)
!779 = !DILocation(line: 14, column: 11, scope: !780)
!780 = distinct !DILexicalBlock(scope: !761, file: !762, line: 18, column: 1)
!781 = !DILocation(line: 15, column: 11, scope: !780)
!782 = !DILocation(line: 19, column: 3, scope: !761)
!783 = !DILocation(line: 19, column: 30, scope: !761)
!784 = !DILocation(line: 19, column: 55, scope: !761)
!785 = !DILocation(line: 20, column: 9, scope: !761)
!786 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.ReadBuffer.str_view", scope: !762, file: !762, line: 22, type: !787, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!787 = !DISubroutineType(types: !788)
!788 = !{!252, !765}
!789 = !DILocation(line: 23, column: 1, scope: !786)
!790 = !DILocalVariable(name: "self", arg: 1, scope: !786, file: !762, line: 22, type: !765)
!791 = !DILocation(line: 22, column: 31, scope: !786)
!792 = !DILocation(line: 24, column: 17, scope: !786)
!793 = !DILocation(line: 24, column: 28, scope: !786)
!794 = !DILocation(line: 24, column: 42, scope: !786)
!795 = !DILocation(line: 24, column: 59, scope: !786)
!796 = !DILocation(line: 24, column: 10, scope: !786)
!797 = distinct !DISubprogram(name: "close", linkageName: "std.io.ReadBuffer.close", scope: !762, file: !762, line: 27, type: !798, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!798 = !DISubroutineType(types: !799)
!799 = !{!112, !19, !765}
!800 = !DILocation(line: 28, column: 1, scope: !797)
!801 = !DILocalVariable(name: "self", arg: 1, scope: !797, file: !762, line: 27, type: !765)
!802 = !DILocation(line: 27, column: 27, scope: !797)
!803 = !DILocation(line: 29, column: 7, scope: !797)
!804 = !DILocation(line: 29, column: 34, scope: !797)
!805 = distinct !DISubprogram(name: "read", linkageName: "std.io.ReadBuffer.read", scope: !762, file: !762, line: 32, type: !806, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!806 = !DISubroutineType(types: !807)
!807 = !{!112, !122, !765, !123}
!808 = !DILocation(line: 33, column: 1, scope: !805)
!809 = !DILocalVariable(name: "self", arg: 1, scope: !805, file: !762, line: 32, type: !765)
!810 = !DILocation(line: 32, column: 25, scope: !805)
!811 = !DILocalVariable(name: "bytes", arg: 2, scope: !805, file: !762, line: 32, type: !123)
!812 = !DILocation(line: 32, column: 39, scope: !805)
!813 = !DILocation(line: 34, column: 6, scope: !805)
!814 = !DILocation(line: 34, column: 23, scope: !805)
!815 = !DILocation(line: 36, column: 7, scope: !816)
!816 = distinct !DILexicalBlock(scope: !805, file: !762, line: 35, column: 2)
!817 = !DILocation(line: 36, column: 29, scope: !816)
!818 = !DILocation(line: 36, column: 42, scope: !816)
!819 = !DILocation(line: 39, column: 11, scope: !820)
!820 = distinct !DILexicalBlock(scope: !816, file: !762, line: 37, column: 3)
!821 = !DILocation(line: 39, column: 36, scope: !820)
!822 = !DILocation(line: 41, column: 3, scope: !816)
!823 = !DILocalVariable(name: "n", scope: !805, file: !762, line: 43, type: !95, align: 8)
!824 = !DILocation(line: 43, column: 6, scope: !805)
!825 = !DILocation(line: 43, column: 14, scope: !805)
!826 = !DILocation(line: 43, column: 31, scope: !805)
!827 = !DILocation(line: 43, column: 46, scope: !805)
!828 = !DILocation(line: 17, column: 10, scope: !829, inlinedAt: !830)
!829 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !141, file: !141, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!830 = !DILocation(line: 100, column: 10, scope: !831, inlinedAt: !832)
!831 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !141, file: !141, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!832 = !DILocation(line: 43, column: 10, scope: !805)
!833 = !DILocation(line: 17, column: 14, scope: !829, inlinedAt: !830)
!834 = !DILocation(line: 100, column: 31, scope: !831, inlinedAt: !832)
!835 = !DILocation(line: 100, column: 35, scope: !831, inlinedAt: !832)
!836 = !DILocation(line: 44, column: 14, scope: !805)
!837 = !DILocation(line: 44, column: 25, scope: !805)
!838 = !DILocation(line: 44, column: 39, scope: !805)
!839 = !DILocation(line: 44, column: 2, scope: !805)
!840 = !DILocation(line: 44, column: 8, scope: !805)
!841 = !DILocation(line: 44, column: 9, scope: !805)
!842 = !DILocation(line: 45, column: 2, scope: !805)
!843 = !DILocation(line: 45, column: 19, scope: !805)
!844 = !DILocation(line: 46, column: 9, scope: !805)
!845 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ReadBuffer.read_byte", scope: !762, file: !762, line: 49, type: !846, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!846 = !DISubroutineType(types: !847)
!847 = !{!112, !126, !765}
!848 = !DILocation(line: 50, column: 1, scope: !845)
!849 = !DILocalVariable(name: "self", arg: 1, scope: !845, file: !762, line: 49, type: !765)
!850 = !DILocation(line: 49, column: 31, scope: !845)
!851 = !DILocation(line: 51, column: 6, scope: !845)
!852 = !DILocation(line: 51, column: 23, scope: !845)
!853 = !DILocation(line: 51, column: 39, scope: !845)
!854 = !DILocation(line: 52, column: 6, scope: !845)
!855 = !DILocation(line: 52, column: 23, scope: !845)
!856 = !DILocation(line: 52, column: 46, scope: !845)
!857 = !DILocalVariable(name: "c", scope: !845, file: !762, line: 53, type: !4, align: 1)
!858 = !DILocation(line: 53, column: 7, scope: !845)
!859 = !DILocation(line: 53, column: 11, scope: !845)
!860 = !DILocation(line: 53, column: 22, scope: !845)
!861 = !DILocation(line: 54, column: 2, scope: !845)
!862 = !DILocation(line: 55, column: 9, scope: !845)
!863 = distinct !DISubprogram(name: "refill", linkageName: "std.io.ReadBuffer.refill", scope: !762, file: !762, line: 58, type: !798, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!864 = !DILocation(line: 59, column: 1, scope: !863)
!865 = !DILocalVariable(name: "self", arg: 1, scope: !863, file: !762, line: 58, type: !765)
!866 = !DILocation(line: 58, column: 28, scope: !863)
!867 = !DILocation(line: 60, column: 2, scope: !863)
!868 = !DILocation(line: 60, column: 18, scope: !863)
!869 = !DILocation(line: 61, column: 2, scope: !863)
!870 = !DILocation(line: 61, column: 19, scope: !863)
!871 = !DILocation(line: 61, column: 44, scope: !863)
!872 = distinct !DISubprogram(name: "init", linkageName: "std.io.WriteBuffer.init", scope: !762, file: !762, line: 77, type: !873, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!873 = !DISubroutineType(types: !874)
!874 = !{!875, !875, !879, !123}
!875 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WriteBuffer*", baseType: !876, size: 64, align: 64, dwarfAddressSpace: 0)
!876 = !DICompositeType(tag: DW_TAG_structure_type, name: "WriteBuffer", scope: !762, file: !762, line: 64, size: 320, align: 64, elements: !877, identifier: "std.io.WriteBuffer")
!877 = !{!878, !883, !884}
!878 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !876, file: !762, line: 66, baseType: !879, size: 128, align: 64)
!879 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream", size: 128, align: 64, elements: !880, identifier: "OutStream")
!880 = !{!881, !882}
!881 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !879, baseType: !19, size: 64, align: 64)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !879, baseType: !93, size: 64, align: 64, offset: 64)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !876, file: !762, line: 67, baseType: !123, size: 128, align: 64, offset: 128)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !876, file: !762, line: 68, baseType: !95, size: 64, align: 64, offset: 256)
!885 = !DILocation(line: 78, column: 1, scope: !872)
!886 = !DILocalVariable(name: "self", arg: 1, scope: !872, file: !762, line: 77, type: !875)
!887 = !DILocation(line: 77, column: 34, scope: !872)
!888 = !DILocalVariable(name: "wrapped_stream", arg: 2, scope: !872, file: !762, line: 77, type: !879)
!889 = !DILocation(line: 77, column: 51, scope: !872)
!890 = !DILocalVariable(name: "bytes", arg: 3, scope: !872, file: !762, line: 77, type: !123)
!891 = !DILocation(line: 77, column: 74, scope: !872)
!892 = !DILocation(line: 74, column: 11, scope: !893)
!893 = distinct !DILexicalBlock(scope: !872, file: !762, line: 78, column: 1)
!894 = !DILocation(line: 75, column: 11, scope: !893)
!895 = !DILocation(line: 79, column: 3, scope: !872)
!896 = !DILocation(line: 79, column: 30, scope: !872)
!897 = !DILocation(line: 79, column: 55, scope: !872)
!898 = !DILocation(line: 80, column: 9, scope: !872)
!899 = distinct !DISubprogram(name: "str_view", linkageName: "std.io.WriteBuffer.str_view", scope: !762, file: !762, line: 83, type: !900, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!900 = !DISubroutineType(types: !901)
!901 = !{!252, !875}
!902 = !DILocation(line: 84, column: 1, scope: !899)
!903 = !DILocalVariable(name: "self", arg: 1, scope: !899, file: !762, line: 83, type: !875)
!904 = !DILocation(line: 83, column: 32, scope: !899)
!905 = !DILocation(line: 85, column: 17, scope: !899)
!906 = !DILocation(line: 85, column: 28, scope: !899)
!907 = !DILocation(line: 85, column: 29, scope: !899)
!908 = !DILocation(line: 85, column: 10, scope: !899)
!909 = distinct !DISubprogram(name: "close", linkageName: "std.io.WriteBuffer.close", scope: !762, file: !762, line: 88, type: !910, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!910 = !DISubroutineType(types: !911)
!911 = !{!112, !19, !875}
!912 = !DILocation(line: 89, column: 1, scope: !909)
!913 = !DILocalVariable(name: "self", arg: 1, scope: !909, file: !762, line: 88, type: !875)
!914 = !DILocation(line: 88, column: 28, scope: !909)
!915 = !DILocation(line: 90, column: 7, scope: !909)
!916 = !DILocation(line: 90, column: 41, scope: !909)
!917 = distinct !DISubprogram(name: "flush", linkageName: "std.io.WriteBuffer.flush", scope: !762, file: !762, line: 93, type: !910, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!918 = !DILocation(line: 94, column: 1, scope: !917)
!919 = !DILocalVariable(name: "self", arg: 1, scope: !917, file: !762, line: 93, type: !875)
!920 = !DILocation(line: 93, column: 28, scope: !917)
!921 = !DILocation(line: 95, column: 2, scope: !917)
!922 = !DILocation(line: 96, column: 7, scope: !917)
!923 = !DILocation(line: 96, column: 34, scope: !917)
!924 = distinct !DISubprogram(name: "write", linkageName: "std.io.WriteBuffer.write", scope: !762, file: !762, line: 99, type: !925, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!925 = !DISubroutineType(types: !926)
!926 = !{!112, !122, !875, !123}
!927 = !DILocation(line: 100, column: 1, scope: !924)
!928 = !DILocalVariable(name: "self", arg: 1, scope: !924, file: !762, line: 99, type: !875)
!929 = !DILocation(line: 99, column: 27, scope: !924)
!930 = !DILocalVariable(name: "bytes", arg: 2, scope: !924, file: !762, line: 99, type: !123)
!931 = !DILocation(line: 99, column: 41, scope: !924)
!932 = !DILocalVariable(name: "n", scope: !924, file: !762, line: 101, type: !95, align: 8)
!933 = !DILocation(line: 101, column: 6, scope: !924)
!934 = !DILocation(line: 101, column: 10, scope: !924)
!935 = !DILocation(line: 101, column: 27, scope: !924)
!936 = !DILocation(line: 102, column: 6, scope: !924)
!937 = !DILocation(line: 102, column: 18, scope: !924)
!938 = !DILocation(line: 105, column: 38, scope: !939)
!939 = distinct !DILexicalBlock(scope: !924, file: !762, line: 103, column: 2)
!940 = !DILocation(line: 105, column: 44, scope: !939)
!941 = !DILocation(line: 105, column: 3, scope: !939)
!942 = !DILocation(line: 105, column: 14, scope: !939)
!943 = !DILocation(line: 105, column: 25, scope: !939)
!944 = !DILocation(line: 106, column: 3, scope: !939)
!945 = !DILocation(line: 106, column: 17, scope: !939)
!946 = !DILocation(line: 107, column: 10, scope: !939)
!947 = !DILocation(line: 109, column: 2, scope: !924)
!948 = !DILocation(line: 110, column: 6, scope: !924)
!949 = !DILocation(line: 110, column: 19, scope: !924)
!950 = !DILocation(line: 113, column: 10, scope: !951)
!951 = distinct !DILexicalBlock(scope: !924, file: !762, line: 111, column: 2)
!952 = !DILocation(line: 113, column: 36, scope: !951)
!953 = !DILocation(line: 116, column: 27, scope: !924)
!954 = !DILocation(line: 116, column: 33, scope: !924)
!955 = !DILocation(line: 116, column: 2, scope: !924)
!956 = !DILocation(line: 116, column: 13, scope: !924)
!957 = !DILocation(line: 116, column: 14, scope: !924)
!958 = !DILocation(line: 117, column: 2, scope: !924)
!959 = !DILocation(line: 117, column: 15, scope: !924)
!960 = !DILocation(line: 118, column: 9, scope: !924)
!961 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.WriteBuffer.write_byte", scope: !762, file: !762, line: 121, type: !962, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!962 = !DISubroutineType(types: !963)
!963 = !{!112, !19, !875, !4}
!964 = !DILocation(line: 122, column: 1, scope: !961)
!965 = !DILocalVariable(name: "self", arg: 1, scope: !961, file: !762, line: 121, type: !875)
!966 = !DILocation(line: 121, column: 33, scope: !961)
!967 = !DILocalVariable(name: "c", arg: 2, scope: !961, file: !762, line: 121, type: !4)
!968 = !DILocation(line: 121, column: 45, scope: !961)
!969 = !DILocalVariable(name: "n", scope: !961, file: !762, line: 123, type: !95, align: 8)
!970 = !DILocation(line: 123, column: 6, scope: !961)
!971 = !DILocation(line: 123, column: 10, scope: !961)
!972 = !DILocation(line: 123, column: 27, scope: !961)
!973 = !DILocation(line: 124, column: 6, scope: !961)
!974 = !DILocation(line: 126, column: 3, scope: !975)
!975 = distinct !DILexicalBlock(scope: !961, file: !762, line: 125, column: 2)
!976 = !DILocation(line: 128, column: 2, scope: !961)
!977 = !DILocation(line: 128, column: 13, scope: !961)
!978 = !DILocation(line: 128, column: 27, scope: !961)
!979 = !DILocation(line: 129, column: 2, scope: !961)
!980 = distinct !DISubprogram(name: "write_pending", linkageName: "std.io.WriteBuffer.write_pending", scope: !762, file: !762, line: 132, type: !910, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!981 = !DILocation(line: 133, column: 1, scope: !980)
!982 = !DILocalVariable(name: "self", arg: 1, scope: !980, file: !762, line: 132, type: !875)
!983 = !DILocation(line: 132, column: 36, scope: !980)
!984 = !DILocation(line: 134, column: 2, scope: !980)
!985 = !DILocation(line: 134, column: 16, scope: !980)
!986 = !DILocation(line: 134, column: 42, scope: !980)
!987 = !DILocation(line: 134, column: 53, scope: !980)
!988 = !DILocation(line: 134, column: 54, scope: !980)
!989 = !DILocation(line: 135, column: 6, scope: !980)
!990 = !DILocation(line: 135, column: 30, scope: !980)
!991 = distinct !DISubprogram(name: "len", linkageName: "std.io.ByteReader.len", scope: !992, file: !992, line: 9, type: !993, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!992 = !DIFile(filename: "bytereader.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!993 = !DISubroutineType(types: !994)
!994 = !{!95, !995}
!995 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ByteReader*", baseType: !996, size: 64, align: 64, dwarfAddressSpace: 0)
!996 = !DICompositeType(tag: DW_TAG_structure_type, name: "ByteReader", scope: !992, file: !992, line: 3, size: 192, align: 64, elements: !997, identifier: "std.io.ByteReader")
!997 = !{!998, !999}
!998 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !996, file: !992, line: 5, baseType: !123, size: 128, align: 64)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !996, file: !992, line: 6, baseType: !95, size: 64, align: 64, offset: 128)
!1000 = !DILocation(line: 10, column: 1, scope: !991)
!1001 = !DILocalVariable(name: "self", arg: 1, scope: !991, file: !992, line: 9, type: !995)
!1002 = !DILocation(line: 9, column: 23, scope: !991)
!1003 = !DILocation(line: 11, column: 9, scope: !991)
!1004 = distinct !DISubprogram(name: "init", linkageName: "std.io.ByteReader.init", scope: !992, file: !992, line: 14, type: !1005, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1005 = !DISubroutineType(types: !1006)
!1006 = !{!995, !995, !123}
!1007 = !DILocation(line: 15, column: 1, scope: !1004)
!1008 = !DILocalVariable(name: "self", arg: 1, scope: !1004, file: !992, line: 14, type: !995)
!1009 = !DILocation(line: 14, column: 32, scope: !1004)
!1010 = !DILocalVariable(name: "bytes", arg: 2, scope: !1004, file: !992, line: 14, type: !123)
!1011 = !DILocation(line: 14, column: 46, scope: !1004)
!1012 = !DILocation(line: 16, column: 3, scope: !1004)
!1013 = !DILocation(line: 16, column: 21, scope: !1004)
!1014 = !DILocation(line: 17, column: 9, scope: !1004)
!1015 = distinct !DISubprogram(name: "read", linkageName: "std.io.ByteReader.read", scope: !992, file: !992, line: 20, type: !1016, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1016 = !DISubroutineType(types: !1017)
!1017 = !{!112, !122, !995, !123}
!1018 = !DILocation(line: 21, column: 1, scope: !1015)
!1019 = !DILocalVariable(name: "self", arg: 1, scope: !1015, file: !992, line: 20, type: !995)
!1020 = !DILocation(line: 20, column: 25, scope: !1015)
!1021 = !DILocalVariable(name: "bytes", arg: 2, scope: !1015, file: !992, line: 20, type: !123)
!1022 = !DILocation(line: 20, column: 39, scope: !1015)
!1023 = !DILocation(line: 22, column: 6, scope: !1015)
!1024 = !DILocation(line: 22, column: 20, scope: !1015)
!1025 = !DILocation(line: 22, column: 43, scope: !1015)
!1026 = !DILocalVariable(name: "len", scope: !1015, file: !992, line: 23, type: !95, align: 8)
!1027 = !DILocation(line: 23, column: 6, scope: !1015)
!1028 = !DILocation(line: 23, column: 16, scope: !1015)
!1029 = !DILocation(line: 23, column: 33, scope: !1015)
!1030 = !DILocation(line: 23, column: 45, scope: !1015)
!1031 = !DILocation(line: 17, column: 10, scope: !1032, inlinedAt: !1033)
!1032 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !141, file: !141, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1033 = !DILocation(line: 100, column: 10, scope: !1034, inlinedAt: !1035)
!1034 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !141, file: !141, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1035 = !DILocation(line: 23, column: 12, scope: !1015)
!1036 = !DILocation(line: 17, column: 14, scope: !1032, inlinedAt: !1033)
!1037 = !DILocation(line: 100, column: 31, scope: !1034, inlinedAt: !1035)
!1038 = !DILocation(line: 100, column: 35, scope: !1034, inlinedAt: !1035)
!1039 = !DILocation(line: 24, column: 6, scope: !1015)
!1040 = !DILocation(line: 24, column: 23, scope: !1015)
!1041 = !DILocation(line: 25, column: 12, scope: !1015)
!1042 = !DILocation(line: 25, column: 24, scope: !1015)
!1043 = !DILocation(line: 25, column: 35, scope: !1015)
!1044 = !DILocation(line: 324, column: 11, scope: !1045, inlinedAt: !1047)
!1045 = distinct !DILexicalBlock(scope: !1046, file: !331, line: 327, column: 1)
!1046 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !331, file: !331, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1047 = !DILocation(line: 25, column: 2, scope: !1015)
!1048 = !DILocation(line: 324, column: 23, scope: !1045, inlinedAt: !1047)
!1049 = !DILocation(line: 324, column: 29, scope: !1045, inlinedAt: !1047)
!1050 = !DILocation(line: 324, column: 36, scope: !1045, inlinedAt: !1047)
!1051 = !DILocation(line: 324, column: 43, scope: !1045, inlinedAt: !1047)
!1052 = !DILocation(line: 324, column: 49, scope: !1045, inlinedAt: !1047)
!1053 = !DILocation(line: 324, column: 56, scope: !1045, inlinedAt: !1047)
!1054 = !DILocation(line: 328, column: 11, scope: !1046, inlinedAt: !1047)
!1055 = !DILocation(line: 328, column: 16, scope: !1046, inlinedAt: !1047)
!1056 = !DILocation(line: 328, column: 21, scope: !1046, inlinedAt: !1047)
!1057 = !DILocation(line: 328, column: 26, scope: !1046, inlinedAt: !1047)
!1058 = !DILocation(line: 26, column: 2, scope: !1015)
!1059 = !DILocation(line: 26, column: 16, scope: !1015)
!1060 = !DILocation(line: 27, column: 9, scope: !1015)
!1061 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.ByteReader.read_byte", scope: !992, file: !992, line: 30, type: !1062, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1062 = !DISubroutineType(types: !1063)
!1063 = !{!112, !126, !995}
!1064 = !DILocation(line: 31, column: 1, scope: !1061)
!1065 = !DILocalVariable(name: "self", arg: 1, scope: !1061, file: !992, line: 30, type: !995)
!1066 = !DILocation(line: 30, column: 31, scope: !1061)
!1067 = !DILocation(line: 32, column: 6, scope: !1061)
!1068 = !DILocation(line: 32, column: 20, scope: !1061)
!1069 = !DILocation(line: 32, column: 43, scope: !1061)
!1070 = !DILocation(line: 33, column: 9, scope: !1061)
!1071 = !DILocation(line: 33, column: 20, scope: !1061)
!1072 = distinct !DISubprogram(name: "pushback_byte", linkageName: "std.io.ByteReader.pushback_byte", scope: !992, file: !992, line: 36, type: !1073, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1073 = !DISubroutineType(types: !1074)
!1074 = !{!112, !19, !995}
!1075 = !DILocation(line: 37, column: 1, scope: !1072)
!1076 = !DILocalVariable(name: "self", arg: 1, scope: !1072, file: !992, line: 36, type: !995)
!1077 = !DILocation(line: 36, column: 35, scope: !1072)
!1078 = !DILocation(line: 38, column: 7, scope: !1072)
!1079 = !DILocation(line: 38, column: 26, scope: !1072)
!1080 = !DILocation(line: 39, column: 2, scope: !1072)
!1081 = distinct !DISubprogram(name: "seek", linkageName: "std.io.ByteReader.seek", scope: !992, file: !992, line: 42, type: !1082, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1082 = !DISubroutineType(types: !1083)
!1083 = !{!112, !122, !995, !113, !45}
!1084 = !DILocation(line: 43, column: 1, scope: !1081)
!1085 = !DILocalVariable(name: "self", arg: 1, scope: !1081, file: !992, line: 42, type: !995)
!1086 = !DILocation(line: 42, column: 25, scope: !1081)
!1087 = !DILocalVariable(name: "offset", arg: 2, scope: !1081, file: !992, line: 42, type: !672)
!1088 = !DILocation(line: 42, column: 36, scope: !1081)
!1089 = !DILocalVariable(name: "seek", arg: 3, scope: !1081, file: !992, line: 42, type: !45)
!1090 = !DILocation(line: 42, column: 49, scope: !1081)
!1091 = !DILocalVariable(name: "new_index", scope: !1081, file: !992, line: 44, type: !672, align: 8)
!1092 = !DILocation(line: 44, column: 6, scope: !1081)
!1093 = !DILocation(line: 47, column: 25, scope: !1094)
!1094 = distinct !DILexicalBlock(scope: !1095, file: !992, line: 47, column: 13)
!1095 = distinct !DILexicalBlock(scope: !1081, file: !992, line: 45, column: 2)
!1096 = !DILocation(line: 48, column: 28, scope: !1097)
!1097 = distinct !DILexicalBlock(scope: !1095, file: !992, line: 48, column: 16)
!1098 = !DILocation(line: 48, column: 41, scope: !1097)
!1099 = !DILocation(line: 49, column: 25, scope: !1100)
!1100 = distinct !DILexicalBlock(scope: !1095, file: !992, line: 49, column: 13)
!1101 = !DILocation(line: 49, column: 42, scope: !1100)
!1102 = !DILocation(line: 51, column: 6, scope: !1081)
!1103 = !DILocation(line: 51, column: 28, scope: !1081)
!1104 = !DILocation(line: 52, column: 2, scope: !1081)
!1105 = !DILocation(line: 52, column: 15, scope: !1081)
!1106 = !DILocation(line: 53, column: 9, scope: !1081)
!1107 = distinct !DISubprogram(name: "write_to", linkageName: "std.io.ByteReader.write_to", scope: !992, file: !992, line: 56, type: !1108, scopeLine: 56, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1108 = !DISubroutineType(types: !1109)
!1109 = !{!112, !122, !995, !879}
!1110 = !DILocation(line: 57, column: 1, scope: !1107)
!1111 = !DILocalVariable(name: "self", arg: 1, scope: !1107, file: !992, line: 56, type: !995)
!1112 = !DILocation(line: 56, column: 29, scope: !1107)
!1113 = !DILocalVariable(name: "writer", arg: 2, scope: !1107, file: !992, line: 56, type: !879)
!1114 = !DILocation(line: 56, column: 46, scope: !1107)
!1115 = !DILocation(line: 58, column: 6, scope: !1107)
!1116 = !DILocation(line: 58, column: 20, scope: !1107)
!1117 = !DILocation(line: 58, column: 43, scope: !1107)
!1118 = !DILocalVariable(name: "written", scope: !1107, file: !992, line: 59, type: !95, align: 8)
!1119 = !DILocation(line: 59, column: 6, scope: !1107)
!1120 = !DILocation(line: 59, column: 29, scope: !1107)
!1121 = !DILocation(line: 59, column: 40, scope: !1107)
!1122 = !DILocation(line: 59, column: 16, scope: !1107)
!1123 = !DILocation(line: 60, column: 2, scope: !1107)
!1124 = !DILocation(line: 60, column: 16, scope: !1107)
!1125 = !DILocation(line: 61, column: 9, scope: !1107)
!1126 = !DILocation(line: 61, column: 23, scope: !1107)
!1127 = !DILocation(line: 62, column: 9, scope: !1107)
!1128 = distinct !DISubprogram(name: "available", linkageName: "std.io.ByteReader.available", scope: !992, file: !992, line: 65, type: !1129, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1129 = !DISubroutineType(types: !1130)
!1130 = !{!112, !122, !995}
!1131 = !DILocation(line: 66, column: 1, scope: !1128)
!1132 = !DILocalVariable(name: "self", arg: 1, scope: !1128, file: !992, line: 65, type: !995)
!1133 = !DILocation(line: 65, column: 30, scope: !1128)
!1134 = !DILocation(line: 67, column: 16, scope: !1128)
!1135 = !DILocation(line: 67, column: 33, scope: !1128)
!1136 = !DILocation(line: 47, column: 10, scope: !1137, inlinedAt: !1138)
!1137 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !141, file: !141, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1138 = !DILocation(line: 116, column: 10, scope: !1139, inlinedAt: !1140)
!1139 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !141, file: !141, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1140 = !DILocation(line: 67, column: 9, scope: !1128)
!1141 = !DILocation(line: 47, column: 14, scope: !1137, inlinedAt: !1138)
!1142 = !DILocation(line: 116, column: 34, scope: !1139, inlinedAt: !1140)
!1143 = !DILocation(line: 116, column: 38, scope: !1139, inlinedAt: !1140)
!1144 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiReader.new_init", scope: !1145, file: !1145, line: 21, type: !1146, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1145 = !DIFile(filename: "multireader.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!1146 = !DISubroutineType(types: !1147)
!1147 = !{!1148, !1148, !1152, !185}
!1148 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiReader*", baseType: !1149, size: 64, align: 64, dwarfAddressSpace: 0)
!1149 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiReader", scope: !1145, file: !1145, line: 7, size: 320, align: 64, elements: !1150, identifier: "std.io.MultiReader")
!1150 = !{!1151, !1157, !1158}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "readers", scope: !1149, file: !1145, line: 9, baseType: !1152, size: 128, align: 64)
!1152 = !DICompositeType(tag: DW_TAG_structure_type, name: "InStream[]", size: 128, align: 64, elements: !1153, identifier: "InStream[]")
!1153 = !{!1154, !1156}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1152, baseType: !1155, size: 64, align: 64)
!1155 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "InStream*", baseType: !89, size: 64, align: 64, dwarfAddressSpace: 0)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1152, baseType: !95, size: 64, align: 64, offset: 64)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1149, file: !1145, line: 10, baseType: !95, size: 64, align: 64, offset: 128)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1149, file: !1145, line: 11, baseType: !185, size: 128, align: 64, offset: 192)
!1159 = !DILocation(line: 22, column: 1, scope: !1144)
!1160 = !DILocalVariable(name: "self", arg: 1, scope: !1144, file: !1145, line: 21, type: !1148)
!1161 = !DILocation(line: 21, column: 38, scope: !1144)
!1162 = !DILocalVariable(name: "readers", arg: 2, scope: !1144, file: !1145, line: 21, type: !1152)
!1163 = !DILocation(line: 21, column: 57, scope: !1144)
!1164 = !DILocalVariable(name: "allocator", arg: 3, scope: !1144, file: !1145, line: 21, type: !185)
!1165 = !DILocation(line: 21, column: 76, scope: !1144)
!1166 = !DILocation(line: 18, column: 11, scope: !1167)
!1167 = distinct !DILexicalBlock(scope: !1144, file: !1145, line: 22, column: 1)
!1168 = !DILocalVariable(name: "copy", scope: !1144, file: !1145, line: 23, type: !1152, align: 8)
!1169 = !DILocation(line: 23, column: 13, scope: !1144)
!1170 = !DILocation(line: 23, column: 62, scope: !1144)
!1171 = !DILocation(line: 252, column: 55, scope: !1172, inlinedAt: !1173)
!1172 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !212, file: !212, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1173 = !DILocation(line: 244, column: 9, scope: !1174, inlinedAt: !1175)
!1174 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !212, file: !212, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1175 = !DILocation(line: 23, column: 20, scope: !1144)
!1176 = !DILocation(line: 252, column: 40, scope: !1172, inlinedAt: !1173)
!1177 = !DILocation(line: 79, column: 6, scope: !1178, inlinedAt: !1179)
!1178 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !212, file: !212, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1179 = !DILocation(line: 252, column: 18, scope: !1172, inlinedAt: !1173)
!1180 = !DILocation(line: 79, column: 20, scope: !1178, inlinedAt: !1179)
!1181 = !DILocation(line: 28, column: 71, scope: !1182, inlinedAt: !1183)
!1182 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !212, file: !212, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1183 = !DILocation(line: 80, column: 9, scope: !1178, inlinedAt: !1179)
!1184 = !DILocation(line: 252, column: 67, scope: !1172, inlinedAt: !1173)
!1185 = !DILocation(line: 24, column: 13, scope: !1144)
!1186 = !DILocation(line: 24, column: 21, scope: !1144)
!1187 = !DILocation(line: 24, column: 2, scope: !1144)
!1188 = !DILocation(line: 24, column: 7, scope: !1144)
!1189 = !DILocation(line: 25, column: 3, scope: !1144)
!1190 = !DILocation(line: 25, column: 23, scope: !1144)
!1191 = !DILocation(line: 25, column: 42, scope: !1144)
!1192 = !DILocation(line: 26, column: 9, scope: !1144)
!1193 = !DILocation(line: 19, column: 10, scope: !1144)
!1194 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiReader.temp_init", scope: !1145, file: !1145, line: 34, type: !1195, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1195 = !DISubroutineType(types: !1196)
!1196 = !{!1148, !1148, !1152}
!1197 = !DILocation(line: 35, column: 1, scope: !1194)
!1198 = !DILocalVariable(name: "self", arg: 1, scope: !1194, file: !1145, line: 34, type: !1148)
!1199 = !DILocation(line: 34, column: 39, scope: !1194)
!1200 = !DILocalVariable(name: "readers", arg: 2, scope: !1194, file: !1145, line: 34, type: !1152)
!1201 = !DILocation(line: 34, column: 58, scope: !1194)
!1202 = !DILocation(line: 31, column: 11, scope: !1203)
!1203 = distinct !DILexicalBlock(scope: !1194, file: !1145, line: 35, column: 1)
!1204 = !DILocation(line: 396, column: 6, scope: !1205, inlinedAt: !1206)
!1205 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !212, file: !212, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1206 = !DILocation(line: 36, column: 46, scope: !1194)
!1207 = !DILocation(line: 398, column: 3, scope: !1208, inlinedAt: !1206)
!1208 = distinct !DILexicalBlock(scope: !1205, file: !212, line: 397, column: 2)
!1209 = !DILocation(line: 400, column: 9, scope: !1205, inlinedAt: !1206)
!1210 = !DILocation(line: 36, column: 9, scope: !1194)
!1211 = !DILocation(line: 32, column: 10, scope: !1194)
!1212 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiReader.free", scope: !1145, file: !1145, line: 39, type: !1213, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1213 = !DISubroutineType(types: !1214)
!1214 = !{null, !1148}
!1215 = !DILocation(line: 40, column: 1, scope: !1212)
!1216 = !DILocalVariable(name: "self", arg: 1, scope: !1212, file: !1145, line: 39, type: !1148)
!1217 = !DILocation(line: 39, column: 26, scope: !1212)
!1218 = !DILocation(line: 41, column: 7, scope: !1212)
!1219 = !DILocation(line: 41, column: 29, scope: !1212)
!1220 = !DILocation(line: 42, column: 18, scope: !1212)
!1221 = !DILocation(line: 42, column: 34, scope: !1212)
!1222 = !DILocation(line: 101, column: 6, scope: !1223, inlinedAt: !1224)
!1223 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !212, file: !212, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1224 = !DILocation(line: 42, column: 2, scope: !1212)
!1225 = !DILocation(line: 101, column: 18, scope: !1223, inlinedAt: !1224)
!1226 = !DILocation(line: 105, column: 25, scope: !1223, inlinedAt: !1224)
!1227 = !DILocation(line: 105, column: 2, scope: !1223, inlinedAt: !1224)
!1228 = !DILocation(line: 43, column: 3, scope: !1212)
!1229 = distinct !DISubprogram(name: "read", linkageName: "std.io.MultiReader.read", scope: !1145, file: !1145, line: 46, type: !1230, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!112, !122, !1148, !123}
!1232 = !DILocation(line: 47, column: 1, scope: !1229)
!1233 = !DILocalVariable(name: "self", arg: 1, scope: !1229, file: !1145, line: 46, type: !1148)
!1234 = !DILocation(line: 46, column: 26, scope: !1229)
!1235 = !DILocalVariable(name: "bytes", arg: 2, scope: !1229, file: !1145, line: 46, type: !123)
!1236 = !DILocation(line: 46, column: 40, scope: !1229)
!1237 = !DILocalVariable(name: "r", scope: !1229, file: !1145, line: 48, type: !89, align: 8)
!1238 = !DILocation(line: 48, column: 11, scope: !1229)
!1239 = !DILocation(line: 48, column: 15, scope: !1229)
!1240 = !DILocation(line: 48, column: 28, scope: !1229)
!1241 = !DILocalVariable(name: "n", scope: !1229, file: !1145, line: 49, type: !96, align: 8)
!1242 = !DILocation(line: 49, column: 7, scope: !1229)
!1243 = !DILocation(line: 49, column: 18, scope: !1229)
!1244 = !DILocation(line: 49, column: 11, scope: !1229)
!1245 = !DILocalVariable(name: "err", scope: !1229, file: !1145, line: 50, type: !112, align: 8)
!1246 = !DILocation(line: 50, column: 12, scope: !1229)
!1247 = !DILocation(line: 50, column: 18, scope: !1229)
!1248 = !DILocation(line: 52, column: 8, scope: !1229)
!1249 = !DILocation(line: 53, column: 4, scope: !1250)
!1250 = distinct !DILexicalBlock(scope: !1229, file: !1145, line: 53, column: 4)
!1251 = !DILocation(line: 54, column: 8, scope: !1250)
!1252 = !DILocation(line: 54, column: 22, scope: !1250)
!1253 = !DILocation(line: 56, column: 12, scope: !1254)
!1254 = distinct !DILexicalBlock(scope: !1250, file: !1145, line: 55, column: 4)
!1255 = !DILocation(line: 58, column: 11, scope: !1250)
!1256 = !DILocation(line: 60, column: 11, scope: !1257)
!1257 = distinct !DILexicalBlock(scope: !1229, file: !1145, line: 60, column: 4)
!1258 = !DILocation(line: 62, column: 9, scope: !1229)
!1259 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.MultiReader.read_byte", scope: !1145, file: !1145, line: 65, type: !1260, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1260 = !DISubroutineType(types: !1261)
!1261 = !{!112, !126, !1148}
!1262 = !DILocation(line: 66, column: 1, scope: !1259)
!1263 = !DILocalVariable(name: "self", arg: 1, scope: !1259, file: !1145, line: 65, type: !1148)
!1264 = !DILocation(line: 65, column: 32, scope: !1259)
!1265 = !DILocalVariable(name: "data", scope: !1259, file: !1145, line: 67, type: !1266, align: 1)
!1266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 8, align: 8, elements: !1267)
!1267 = !{!1268}
!1268 = !DISubrange(count: 1, lowerBound: 0)
!1269 = !DILocation(line: 67, column: 10, scope: !1259)
!1270 = !DILocation(line: 68, column: 12, scope: !1259)
!1271 = !DILocation(line: 68, column: 2, scope: !1259)
!1272 = !DILocation(line: 69, column: 14, scope: !1259)
!1273 = distinct !DISubprogram(name: "init", linkageName: "std.io.Scanner.init", scope: !1274, file: !1274, line: 19, type: !1275, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1274 = !DIFile(filename: "scanner.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!1275 = !DISubroutineType(types: !1276)
!1276 = !{null, !1277, !89, !123}
!1277 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Scanner*", baseType: !1278, size: 64, align: 64, dwarfAddressSpace: 0)
!1278 = !DICompositeType(tag: DW_TAG_structure_type, name: "Scanner", scope: !1274, file: !1274, line: 3, size: 384, align: 64, elements: !1279, identifier: "std.io.Scanner")
!1279 = !{!1280, !1281, !1282, !1283}
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "wrapped_stream", scope: !1278, file: !1274, line: 5, baseType: !89, size: 128, align: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1278, file: !1274, line: 6, baseType: !123, size: 128, align: 64, offset: 128)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "pattern_idx", scope: !1278, file: !1274, line: 7, baseType: !95, size: 64, align: 64, offset: 256)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "read_idx", scope: !1278, file: !1274, line: 8, baseType: !95, size: 64, align: 64, offset: 320)
!1284 = !DILocation(line: 20, column: 1, scope: !1273)
!1285 = !DILocalVariable(name: "self", arg: 1, scope: !1273, file: !1274, line: 19, type: !1277)
!1286 = !DILocation(line: 19, column: 22, scope: !1273)
!1287 = !DILocalVariable(name: "stream", arg: 2, scope: !1273, file: !1274, line: 19, type: !89)
!1288 = !DILocation(line: 19, column: 38, scope: !1273)
!1289 = !DILocalVariable(name: "buffer", arg: 3, scope: !1273, file: !1274, line: 19, type: !123)
!1290 = !DILocation(line: 19, column: 53, scope: !1273)
!1291 = !DILocation(line: 17, column: 11, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1273, file: !1274, line: 20, column: 1)
!1293 = !DILocation(line: 21, column: 3, scope: !1273)
!1294 = !DILocation(line: 21, column: 30, scope: !1273)
!1295 = !DILocation(line: 21, column: 45, scope: !1273)
!1296 = distinct !DISubprogram(name: "flush", linkageName: "std.io.Scanner.flush", scope: !1274, file: !1274, line: 28, type: !1297, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1297 = !DISubroutineType(types: !1298)
!1298 = !{!123, !1277}
!1299 = !DILocation(line: 29, column: 1, scope: !1296)
!1300 = !DILocalVariable(name: "self", arg: 1, scope: !1296, file: !1274, line: 28, type: !1277)
!1301 = !DILocation(line: 28, column: 25, scope: !1296)
!1302 = !DILocation(line: 30, column: 9, scope: !1296)
!1303 = !DILocation(line: 30, column: 26, scope: !1296)
!1304 = !DILocalVariable(name: "n", scope: !1296, file: !1274, line: 31, type: !95, align: 8)
!1305 = !DILocation(line: 31, column: 6, scope: !1296)
!1306 = !DILocation(line: 31, column: 10, scope: !1296)
!1307 = !DILocation(line: 31, column: 26, scope: !1296)
!1308 = !DILocalVariable(name: "buf", scope: !1296, file: !1274, line: 32, type: !123, align: 8)
!1309 = !DILocation(line: 32, column: 9, scope: !1296)
!1310 = !DILocation(line: 32, column: 15, scope: !1296)
!1311 = !DILocation(line: 32, column: 24, scope: !1296)
!1312 = !DILocation(line: 32, column: 41, scope: !1296)
!1313 = !DILocation(line: 33, column: 2, scope: !1296)
!1314 = !DILocation(line: 33, column: 21, scope: !1296)
!1315 = !DILocation(line: 34, column: 2, scope: !1296)
!1316 = !DILocation(line: 34, column: 18, scope: !1296)
!1317 = !DILocation(line: 35, column: 9, scope: !1296)
!1318 = distinct !DISubprogram(name: "close", linkageName: "std.io.Scanner.close", scope: !1274, file: !1274, line: 38, type: !1319, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1319 = !DISubroutineType(types: !1320)
!1320 = !{!112, !19, !1277}
!1321 = !DILocation(line: 39, column: 1, scope: !1318)
!1322 = !DILocalVariable(name: "self", arg: 1, scope: !1318, file: !1274, line: 38, type: !1277)
!1323 = !DILocation(line: 38, column: 24, scope: !1318)
!1324 = !DILocation(line: 40, column: 7, scope: !1318)
!1325 = !DILocation(line: 40, column: 41, scope: !1318)
!1326 = distinct !DISubprogram(name: "scan", linkageName: "std.io.Scanner.scan", scope: !1274, file: !1274, line: 48, type: !1327, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1327 = !DISubroutineType(types: !1328)
!1328 = !{!112, !1329, !1277, !252}
!1329 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char[]*", baseType: !123, size: 64, align: 64, dwarfAddressSpace: 0)
!1330 = !DILocation(line: 49, column: 1, scope: !1326)
!1331 = !DILocalVariable(name: "self", arg: 1, scope: !1326, file: !1274, line: 48, type: !1277)
!1332 = !DILocation(line: 48, column: 25, scope: !1326)
!1333 = !DILocalVariable(name: "pattern", arg: 2, scope: !1326, file: !1274, line: 48, type: !252)
!1334 = !DILocation(line: 48, column: 39, scope: !1326)
!1335 = !DILocation(line: 45, column: 11, scope: !1336)
!1336 = distinct !DILexicalBlock(scope: !1326, file: !1274, line: 49, column: 1)
!1337 = !DILocation(line: 46, column: 11, scope: !1336)
!1338 = !DILocation(line: 46, column: 26, scope: !1336)
!1339 = !DILocation(line: 50, column: 6, scope: !1326)
!1340 = !DILocation(line: 53, column: 3, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1326, file: !1274, line: 51, column: 2)
!1342 = !DILocation(line: 53, column: 31, scope: !1341)
!1343 = !DILocalVariable(name: "n", scope: !1344, file: !1274, line: 92, type: !96, align: 8)
!1344 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1274, file: !1274, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1345 = !DILocation(line: 92, column: 7, scope: !1344, inlinedAt: !1346)
!1346 = !DILocation(line: 53, column: 19, scope: !1341)
!1347 = !DILocation(line: 92, column: 11, scope: !1344, inlinedAt: !1346)
!1348 = !DILocation(line: 92, column: 36, scope: !1344, inlinedAt: !1346)
!1349 = !DILocalVariable(name: "err", scope: !1344, file: !1274, line: 93, type: !112, align: 8)
!1350 = !DILocation(line: 93, column: 12, scope: !1344, inlinedAt: !1346)
!1351 = !DILocation(line: 93, column: 18, scope: !1344, inlinedAt: !1346)
!1352 = !DILocation(line: 95, column: 8, scope: !1344, inlinedAt: !1346)
!1353 = !DILocation(line: 96, column: 11, scope: !1354, inlinedAt: !1346)
!1354 = distinct !DILexicalBlock(scope: !1344, file: !1274, line: 96, column: 4)
!1355 = !DILocation(line: 98, column: 11, scope: !1356, inlinedAt: !1346)
!1356 = distinct !DILexicalBlock(scope: !1344, file: !1274, line: 98, column: 4)
!1357 = !DILocation(line: 100, column: 9, scope: !1344, inlinedAt: !1346)
!1358 = !DILocation(line: 54, column: 3, scope: !1341)
!1359 = !DILocation(line: 54, column: 22, scope: !1341)
!1360 = !DILocation(line: 56, column: 9, scope: !1326)
!1361 = !DILocation(line: 56, column: 26, scope: !1326)
!1362 = !DILocalVariable(name: "n", scope: !1326, file: !1274, line: 57, type: !95, align: 8)
!1363 = !DILocation(line: 57, column: 6, scope: !1326)
!1364 = !DILocation(line: 57, column: 10, scope: !1326)
!1365 = !DILocation(line: 57, column: 26, scope: !1326)
!1366 = !DILocalVariable(name: "buf", scope: !1326, file: !1274, line: 58, type: !123, align: 8)
!1367 = !DILocation(line: 58, column: 9, scope: !1326)
!1368 = !DILocation(line: 58, column: 15, scope: !1326)
!1369 = !DILocation(line: 58, column: 24, scope: !1326)
!1370 = !DILocation(line: 58, column: 41, scope: !1326)
!1371 = !DILocalVariable(name: "i", scope: !1326, file: !1274, line: 59, type: !95, align: 8)
!1372 = !DILocation(line: 59, column: 10, scope: !1326)
!1373 = !DILocation(line: 87, column: 11, scope: !1374, inlinedAt: !1375)
!1374 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1274, file: !1274, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1375 = !DILocation(line: 59, column: 14, scope: !1326)
!1376 = !DILocation(line: 61, column: 3, scope: !1377)
!1377 = distinct !DILexicalBlock(scope: !1326, file: !1274, line: 60, column: 2)
!1378 = !DILocation(line: 61, column: 23, scope: !1377)
!1379 = !DILocation(line: 61, column: 27, scope: !1377)
!1380 = !DILocation(line: 62, column: 10, scope: !1377)
!1381 = !DILocation(line: 62, column: 14, scope: !1377)
!1382 = !DILocation(line: 62, column: 15, scope: !1377)
!1383 = !DILocation(line: 64, column: 6, scope: !1326)
!1384 = !DILocation(line: 64, column: 31, scope: !1326)
!1385 = !DILocation(line: 64, column: 47, scope: !1326)
!1386 = !DILocation(line: 68, column: 10, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1326, file: !1274, line: 65, column: 2)
!1388 = !DILocation(line: 71, column: 17, scope: !1326)
!1389 = !DILocation(line: 71, column: 21, scope: !1326)
!1390 = !DILocation(line: 71, column: 2, scope: !1326)
!1391 = !DILocation(line: 71, column: 11, scope: !1326)
!1392 = !DILocation(line: 71, column: 12, scope: !1326)
!1393 = !DILocation(line: 72, column: 2, scope: !1326)
!1394 = !DILocation(line: 72, column: 21, scope: !1326)
!1395 = !DILocation(line: 74, column: 8, scope: !1326)
!1396 = !DILocation(line: 74, column: 17, scope: !1326)
!1397 = !DILocalVariable(name: "p", scope: !1326, file: !1274, line: 75, type: !95, align: 8)
!1398 = !DILocation(line: 75, column: 6, scope: !1326)
!1399 = !DILocalVariable(name: "n", scope: !1400, file: !1274, line: 92, type: !96, align: 8)
!1400 = distinct !DISubprogram(name: "refill", linkageName: "refill", scope: !1274, file: !1274, line: 90, scopeLine: 90, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1401 = !DILocation(line: 92, column: 7, scope: !1400, inlinedAt: !1402)
!1402 = !DILocation(line: 75, column: 10, scope: !1326)
!1403 = !DILocation(line: 92, column: 11, scope: !1400, inlinedAt: !1402)
!1404 = !DILocation(line: 92, column: 36, scope: !1400, inlinedAt: !1402)
!1405 = !DILocalVariable(name: "err", scope: !1400, file: !1274, line: 93, type: !112, align: 8)
!1406 = !DILocation(line: 93, column: 12, scope: !1400, inlinedAt: !1402)
!1407 = !DILocation(line: 93, column: 18, scope: !1400, inlinedAt: !1402)
!1408 = !DILocation(line: 95, column: 8, scope: !1400, inlinedAt: !1402)
!1409 = !DILocation(line: 96, column: 11, scope: !1410, inlinedAt: !1402)
!1410 = distinct !DILexicalBlock(scope: !1400, file: !1274, line: 96, column: 4)
!1411 = !DILocation(line: 98, column: 11, scope: !1412, inlinedAt: !1402)
!1412 = distinct !DILexicalBlock(scope: !1400, file: !1274, line: 98, column: 4)
!1413 = !DILocation(line: 100, column: 9, scope: !1400, inlinedAt: !1402)
!1414 = !DILocation(line: 76, column: 2, scope: !1326)
!1415 = !DILocation(line: 76, column: 18, scope: !1326)
!1416 = !DILocation(line: 76, column: 22, scope: !1326)
!1417 = !DILocation(line: 78, column: 8, scope: !1326)
!1418 = !DILocation(line: 78, column: 12, scope: !1326)
!1419 = !DILocation(line: 78, column: 13, scope: !1326)
!1420 = !DILocalVariable(name: "i", scope: !1326, file: !1274, line: 79, type: !95, align: 8)
!1421 = !DILocation(line: 79, column: 6, scope: !1326)
!1422 = !DILocation(line: 87, column: 11, scope: !1423, inlinedAt: !1424)
!1423 = distinct !DISubprogram(name: "find", linkageName: "find", scope: !1274, file: !1274, line: 85, scopeLine: 85, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1424 = !DILocation(line: 79, column: 10, scope: !1326)
!1425 = !DILocation(line: 80, column: 2, scope: !1326)
!1426 = !DILocation(line: 80, column: 21, scope: !1326)
!1427 = !DILocation(line: 80, column: 25, scope: !1326)
!1428 = !DILocation(line: 80, column: 29, scope: !1326)
!1429 = !DILocation(line: 82, column: 9, scope: !1326)
!1430 = !DILocation(line: 82, column: 18, scope: !1326)
!1431 = !DILocation(line: 82, column: 19, scope: !1326)
!1432 = !DILocation(line: 82, column: 23, scope: !1326)
!1433 = distinct !DISubprogram(name: "read", linkageName: "std.io.Scanner.read", scope: !1274, file: !1274, line: 103, type: !1434, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1434 = !DISubroutineType(types: !1435)
!1435 = !{!112, !122, !1277, !123}
!1436 = !DILocation(line: 104, column: 1, scope: !1433)
!1437 = !DILocalVariable(name: "self", arg: 1, scope: !1433, file: !1274, line: 103, type: !1277)
!1438 = !DILocation(line: 103, column: 22, scope: !1433)
!1439 = !DILocalVariable(name: "bytes", arg: 2, scope: !1433, file: !1274, line: 103, type: !123)
!1440 = !DILocation(line: 103, column: 36, scope: !1433)
!1441 = !DILocalVariable(name: "n", scope: !1433, file: !1274, line: 105, type: !95, align: 8)
!1442 = !DILocation(line: 105, column: 6, scope: !1433)
!1443 = !DILocation(line: 106, column: 6, scope: !1433)
!1444 = !DILocation(line: 106, column: 25, scope: !1433)
!1445 = !DILocation(line: 108, column: 11, scope: !1446)
!1446 = distinct !DILexicalBlock(scope: !1433, file: !1274, line: 107, column: 2)
!1447 = !DILocation(line: 108, column: 22, scope: !1446)
!1448 = !DILocation(line: 108, column: 38, scope: !1446)
!1449 = !DILocation(line: 17, column: 10, scope: !1450, inlinedAt: !1451)
!1450 = distinct !DISubprogram(name: "less", linkageName: "less", scope: !141, file: !141, line: 9, scopeLine: 9, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1451 = !DILocation(line: 100, column: 10, scope: !1452, inlinedAt: !1453)
!1452 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !141, file: !141, line: 97, scopeLine: 97, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1453 = !DILocation(line: 108, column: 7, scope: !1446)
!1454 = !DILocation(line: 17, column: 14, scope: !1450, inlinedAt: !1451)
!1455 = !DILocation(line: 100, column: 31, scope: !1452, inlinedAt: !1453)
!1456 = !DILocation(line: 100, column: 35, scope: !1452, inlinedAt: !1453)
!1457 = !DILocation(line: 109, column: 15, scope: !1446)
!1458 = !DILocation(line: 109, column: 24, scope: !1446)
!1459 = !DILocation(line: 109, column: 41, scope: !1446)
!1460 = !DILocation(line: 109, column: 3, scope: !1446)
!1461 = !DILocation(line: 109, column: 9, scope: !1446)
!1462 = !DILocation(line: 109, column: 10, scope: !1446)
!1463 = !DILocation(line: 110, column: 3, scope: !1446)
!1464 = !DILocation(line: 110, column: 23, scope: !1446)
!1465 = !DILocation(line: 111, column: 11, scope: !1446)
!1466 = !DILocation(line: 111, column: 17, scope: !1446)
!1467 = !DILocation(line: 113, column: 2, scope: !1433)
!1468 = !DILocation(line: 113, column: 7, scope: !1433)
!1469 = !DILocation(line: 113, column: 32, scope: !1433)
!1470 = !DILocation(line: 114, column: 9, scope: !1433)
!1471 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.Scanner.read_byte", scope: !1274, file: !1274, line: 117, type: !1472, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1472 = !DISubroutineType(types: !1473)
!1473 = !{!112, !126, !1277}
!1474 = !DILocation(line: 118, column: 1, scope: !1471)
!1475 = !DILocalVariable(name: "self", arg: 1, scope: !1471, file: !1274, line: 117, type: !1277)
!1476 = !DILocation(line: 117, column: 28, scope: !1471)
!1477 = !DILocation(line: 119, column: 6, scope: !1471)
!1478 = !DILocation(line: 119, column: 25, scope: !1471)
!1479 = !DILocation(line: 121, column: 10, scope: !1480)
!1480 = distinct !DILexicalBlock(scope: !1471, file: !1274, line: 120, column: 2)
!1481 = !DILocation(line: 121, column: 19, scope: !1480)
!1482 = !DILocation(line: 123, column: 9, scope: !1471)
!1483 = distinct !DISubprogram(name: "new_init", linkageName: "std.io.MultiWriter.new_init", scope: !1484, file: !1484, line: 18, type: !1485, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1484 = !DIFile(filename: "multiwriter.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!1485 = !DISubroutineType(types: !1486)
!1486 = !{!1487, !1487, !1491, !185}
!1487 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "MultiWriter*", baseType: !1488, size: 64, align: 64, dwarfAddressSpace: 0)
!1488 = !DICompositeType(tag: DW_TAG_structure_type, name: "MultiWriter", scope: !1484, file: !1484, line: 6, size: 256, align: 64, elements: !1489, identifier: "std.io.MultiWriter")
!1489 = !{!1490, !1496}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "writers", scope: !1488, file: !1484, line: 8, baseType: !1491, size: 128, align: 64)
!1491 = !DICompositeType(tag: DW_TAG_structure_type, name: "OutStream[]", size: 128, align: 64, elements: !1492, identifier: "OutStream[]")
!1492 = !{!1493, !1495}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1491, baseType: !1494, size: 64, align: 64)
!1494 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutStream*", baseType: !879, size: 64, align: 64, dwarfAddressSpace: 0)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1491, baseType: !95, size: 64, align: 64, offset: 64)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "allocator", scope: !1488, file: !1484, line: 9, baseType: !185, size: 128, align: 64, offset: 128)
!1497 = !DILocation(line: 19, column: 1, scope: !1483)
!1498 = !DILocalVariable(name: "self", arg: 1, scope: !1483, file: !1484, line: 18, type: !1487)
!1499 = !DILocation(line: 18, column: 38, scope: !1483)
!1500 = !DILocalVariable(name: "writers", arg: 2, scope: !1483, file: !1484, line: 18, type: !1491)
!1501 = !DILocation(line: 18, column: 58, scope: !1483)
!1502 = !DILocalVariable(name: "allocator", arg: 3, scope: !1483, file: !1484, line: 18, type: !185)
!1503 = !DILocation(line: 18, column: 77, scope: !1483)
!1504 = !DILocation(line: 15, column: 11, scope: !1505)
!1505 = distinct !DILexicalBlock(scope: !1483, file: !1484, line: 19, column: 1)
!1506 = !DILocation(line: 16, column: 11, scope: !1505)
!1507 = !DILocalVariable(name: "copy", scope: !1483, file: !1484, line: 20, type: !1491, align: 8)
!1508 = !DILocation(line: 20, column: 14, scope: !1483)
!1509 = !DILocation(line: 20, column: 64, scope: !1483)
!1510 = !DILocation(line: 252, column: 55, scope: !1511, inlinedAt: !1512)
!1511 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !212, file: !212, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1512 = !DILocation(line: 244, column: 9, scope: !1513, inlinedAt: !1514)
!1513 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !212, file: !212, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1514 = !DILocation(line: 20, column: 21, scope: !1483)
!1515 = !DILocation(line: 252, column: 40, scope: !1511, inlinedAt: !1512)
!1516 = !DILocation(line: 79, column: 6, scope: !1517, inlinedAt: !1518)
!1517 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !212, file: !212, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1518 = !DILocation(line: 252, column: 18, scope: !1511, inlinedAt: !1512)
!1519 = !DILocation(line: 79, column: 20, scope: !1517, inlinedAt: !1518)
!1520 = !DILocation(line: 28, column: 71, scope: !1521, inlinedAt: !1522)
!1521 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !212, file: !212, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1522 = !DILocation(line: 80, column: 9, scope: !1517, inlinedAt: !1518)
!1523 = !DILocation(line: 252, column: 67, scope: !1511, inlinedAt: !1512)
!1524 = !DILocation(line: 21, column: 13, scope: !1483)
!1525 = !DILocation(line: 21, column: 21, scope: !1483)
!1526 = !DILocation(line: 21, column: 2, scope: !1483)
!1527 = !DILocation(line: 21, column: 7, scope: !1483)
!1528 = !DILocation(line: 22, column: 3, scope: !1483)
!1529 = !DILocation(line: 22, column: 23, scope: !1483)
!1530 = !DILocation(line: 22, column: 42, scope: !1483)
!1531 = !DILocation(line: 23, column: 9, scope: !1483)
!1532 = distinct !DISubprogram(name: "temp_init", linkageName: "std.io.MultiWriter.temp_init", scope: !1484, file: !1484, line: 31, type: !1533, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1533 = !DISubroutineType(types: !1534)
!1534 = !{!1487, !1487, !1491}
!1535 = !DILocation(line: 32, column: 1, scope: !1532)
!1536 = !DILocalVariable(name: "self", arg: 1, scope: !1532, file: !1484, line: 31, type: !1487)
!1537 = !DILocation(line: 31, column: 39, scope: !1532)
!1538 = !DILocalVariable(name: "writers", arg: 2, scope: !1532, file: !1484, line: 31, type: !1491)
!1539 = !DILocation(line: 31, column: 59, scope: !1532)
!1540 = !DILocation(line: 28, column: 11, scope: !1541)
!1541 = distinct !DILexicalBlock(scope: !1532, file: !1484, line: 32, column: 1)
!1542 = !DILocation(line: 29, column: 11, scope: !1541)
!1543 = !DILocation(line: 396, column: 6, scope: !1544, inlinedAt: !1545)
!1544 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !212, file: !212, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1545 = !DILocation(line: 33, column: 46, scope: !1532)
!1546 = !DILocation(line: 398, column: 3, scope: !1547, inlinedAt: !1545)
!1547 = distinct !DILexicalBlock(scope: !1544, file: !212, line: 397, column: 2)
!1548 = !DILocation(line: 400, column: 9, scope: !1544, inlinedAt: !1545)
!1549 = !DILocation(line: 33, column: 9, scope: !1532)
!1550 = distinct !DISubprogram(name: "free", linkageName: "std.io.MultiWriter.free", scope: !1484, file: !1484, line: 36, type: !1551, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1551 = !DISubroutineType(types: !1552)
!1552 = !{null, !1487}
!1553 = !DILocation(line: 37, column: 1, scope: !1550)
!1554 = !DILocalVariable(name: "self", arg: 1, scope: !1550, file: !1484, line: 36, type: !1487)
!1555 = !DILocation(line: 36, column: 26, scope: !1550)
!1556 = !DILocation(line: 38, column: 7, scope: !1550)
!1557 = !DILocation(line: 38, column: 29, scope: !1550)
!1558 = !DILocation(line: 39, column: 18, scope: !1550)
!1559 = !DILocation(line: 39, column: 34, scope: !1550)
!1560 = !DILocation(line: 101, column: 6, scope: !1561, inlinedAt: !1562)
!1561 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !212, file: !212, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1562 = !DILocation(line: 39, column: 2, scope: !1550)
!1563 = !DILocation(line: 101, column: 18, scope: !1561, inlinedAt: !1562)
!1564 = !DILocation(line: 105, column: 25, scope: !1561, inlinedAt: !1562)
!1565 = !DILocation(line: 105, column: 2, scope: !1561, inlinedAt: !1562)
!1566 = !DILocation(line: 40, column: 3, scope: !1550)
!1567 = distinct !DISubprogram(name: "write", linkageName: "std.io.MultiWriter.write", scope: !1484, file: !1484, line: 43, type: !1568, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1568 = !DISubroutineType(types: !1569)
!1569 = !{!112, !122, !1487, !123}
!1570 = !DILocation(line: 44, column: 1, scope: !1567)
!1571 = !DILocalVariable(name: "self", arg: 1, scope: !1567, file: !1484, line: 43, type: !1487)
!1572 = !DILocation(line: 43, column: 27, scope: !1567)
!1573 = !DILocalVariable(name: "bytes", arg: 2, scope: !1567, file: !1484, line: 43, type: !123)
!1574 = !DILocation(line: 43, column: 41, scope: !1567)
!1575 = !DILocalVariable(name: "n", scope: !1567, file: !1484, line: 45, type: !95, align: 8)
!1576 = !DILocation(line: 45, column: 6, scope: !1567)
!1577 = !DILocation(line: 46, column: 15, scope: !1578)
!1578 = distinct !DILexicalBlock(scope: !1567, file: !1484, line: 46, column: 2)
!1579 = !DILocalVariable(name: ".temp", scope: !1578, file: !1484, line: 46, type: !95, align: 8)
!1580 = !DILocalVariable(name: "w", scope: !1581, file: !1484, line: 46, type: !879, align: 8)
!1581 = distinct !DILexicalBlock(scope: !1578, file: !1484, line: 47, column: 2)
!1582 = !DILocation(line: 46, column: 11, scope: !1581)
!1583 = !DILocation(line: 46, column: 15, scope: !1581)
!1584 = !DILocation(line: 48, column: 15, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1581, file: !1484, line: 47, column: 2)
!1586 = !DILocation(line: 48, column: 7, scope: !1585)
!1587 = !DILocation(line: 49, column: 7, scope: !1585)
!1588 = !DILocation(line: 49, column: 12, scope: !1585)
!1589 = !DILocation(line: 49, column: 30, scope: !1585)
!1590 = !DILocation(line: 51, column: 9, scope: !1567)
!1591 = distinct !DISubprogram(name: "write_byte", linkageName: "std.io.MultiWriter.write_byte", scope: !1484, file: !1484, line: 54, type: !1592, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1592 = !DISubroutineType(types: !1593)
!1593 = !{!112, !19, !1487, !4}
!1594 = !DILocation(line: 55, column: 1, scope: !1591)
!1595 = !DILocalVariable(name: "self", arg: 1, scope: !1591, file: !1484, line: 54, type: !1487)
!1596 = !DILocation(line: 54, column: 33, scope: !1591)
!1597 = !DILocalVariable(name: "c", arg: 2, scope: !1591, file: !1484, line: 54, type: !4)
!1598 = !DILocation(line: 54, column: 45, scope: !1591)
!1599 = !DILocalVariable(name: "data", scope: !1591, file: !1484, line: 56, type: !1266, align: 1)
!1600 = !DILocation(line: 56, column: 10, scope: !1591)
!1601 = !DILocation(line: 57, column: 12, scope: !1591)
!1602 = !DILocation(line: 58, column: 13, scope: !1591)
!1603 = !DILocation(line: 58, column: 2, scope: !1591)
!1604 = distinct !DISubprogram(name: "init", linkageName: "std.io.TeeReader.init", scope: !1605, file: !1605, line: 22, type: !1606, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1605 = !DIFile(filename: "teereader.c3", directory: "/opt/homebrew/lib/c3/std/io/stream")
!1606 = !DISubroutineType(types: !1607)
!1607 = !{!1608, !1608, !89, !879}
!1608 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TeeReader*", baseType: !1609, size: 64, align: 64, dwarfAddressSpace: 0)
!1609 = !DICompositeType(tag: DW_TAG_structure_type, name: "TeeReader", scope: !1605, file: !1605, line: 3, size: 256, align: 64, elements: !1610, identifier: "std.io.TeeReader")
!1610 = !{!1611, !1612}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1609, file: !1605, line: 5, baseType: !89, size: 128, align: 64)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1609, file: !1605, line: 6, baseType: !879, size: 128, align: 64, offset: 128)
!1613 = !DILocation(line: 23, column: 1, scope: !1604)
!1614 = !DILocalVariable(name: "self", arg: 1, scope: !1604, file: !1605, line: 22, type: !1608)
!1615 = !DILocation(line: 22, column: 30, scope: !1604)
!1616 = !DILocalVariable(name: "r", arg: 2, scope: !1604, file: !1605, line: 22, type: !89)
!1617 = !DILocation(line: 22, column: 46, scope: !1604)
!1618 = !DILocalVariable(name: "w", arg: 3, scope: !1604, file: !1605, line: 22, type: !879)
!1619 = !DILocation(line: 22, column: 59, scope: !1604)
!1620 = !DILocation(line: 24, column: 3, scope: !1604)
!1621 = !DILocation(line: 15, column: 58, scope: !1622, inlinedAt: !1623)
!1622 = distinct !DISubprogram(name: "tee_reader", linkageName: "tee_reader", scope: !1605, file: !1605, line: 15, scopeLine: 15, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1623 = !DILocation(line: 24, column: 10, scope: !1604)
!1624 = !DILocation(line: 15, column: 61, scope: !1622, inlinedAt: !1623)
!1625 = !DILocation(line: 25, column: 9, scope: !1604)
!1626 = distinct !DISubprogram(name: "read", linkageName: "std.io.TeeReader.read", scope: !1605, file: !1605, line: 28, type: !1627, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1627 = !DISubroutineType(types: !1628)
!1628 = !{!112, !122, !1608, !123}
!1629 = !DILocation(line: 29, column: 1, scope: !1626)
!1630 = !DILocalVariable(name: "self", arg: 1, scope: !1626, file: !1605, line: 28, type: !1608)
!1631 = !DILocation(line: 28, column: 24, scope: !1626)
!1632 = !DILocalVariable(name: "bytes", arg: 2, scope: !1626, file: !1605, line: 28, type: !123)
!1633 = !DILocation(line: 28, column: 38, scope: !1626)
!1634 = !DILocalVariable(name: "nr", scope: !1626, file: !1605, line: 30, type: !95, align: 8)
!1635 = !DILocation(line: 30, column: 6, scope: !1626)
!1636 = !DILocalVariable(name: "nw", scope: !1626, file: !1605, line: 30, type: !95, align: 8)
!1637 = !DILocation(line: 30, column: 10, scope: !1626)
!1638 = !DILocation(line: 31, column: 7, scope: !1626)
!1639 = !DILocation(line: 31, column: 19, scope: !1626)
!1640 = !DILocation(line: 32, column: 7, scope: !1626)
!1641 = !DILocation(line: 32, column: 20, scope: !1626)
!1642 = !DILocation(line: 32, column: 26, scope: !1626)
!1643 = !DILocation(line: 32, column: 27, scope: !1626)
!1644 = !DILocation(line: 33, column: 6, scope: !1626)
!1645 = !DILocation(line: 33, column: 12, scope: !1626)
!1646 = !DILocation(line: 33, column: 23, scope: !1626)
!1647 = !DILocation(line: 34, column: 9, scope: !1626)
!1648 = distinct !DISubprogram(name: "read_byte", linkageName: "std.io.TeeReader.read_byte", scope: !1605, file: !1605, line: 37, type: !1649, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1649 = !DISubroutineType(types: !1650)
!1650 = !{!112, !126, !1608}
!1651 = !DILocation(line: 38, column: 1, scope: !1648)
!1652 = !DILocalVariable(name: "self", arg: 1, scope: !1648, file: !1605, line: 37, type: !1608)
!1653 = !DILocation(line: 37, column: 30, scope: !1648)
!1654 = !DILocalVariable(name: "data", scope: !1648, file: !1605, line: 39, type: !1266, align: 1)
!1655 = !DILocation(line: 39, column: 10, scope: !1648)
!1656 = !DILocation(line: 40, column: 12, scope: !1648)
!1657 = !DILocation(line: 40, column: 2, scope: !1648)
!1658 = !DILocation(line: 41, column: 14, scope: !1648)
!1659 = distinct !DISubprogram(name: "adjust", linkageName: "std.io.Formatter.adjust", scope: !2, file: !2, line: 35, type: !1660, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1660 = !DISubroutineType(types: !1661)
!1661 = !{!112, !122, !1662, !96}
!1662 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Formatter*", baseType: !1663, size: 64, align: 64, dwarfAddressSpace: 0)
!1663 = !DICompositeType(tag: DW_TAG_structure_type, name: "Formatter", scope: !2, file: !2, line: 71, size: 384, align: 64, elements: !1664, identifier: "std.io.Formatter")
!1664 = !{!1665, !1666, !1671}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1663, file: !2, line: 73, baseType: !19, size: 64, align: 64)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "out_fn", scope: !1663, file: !2, line: 74, baseType: !1667, size: 64, align: 64, offset: 64)
!1667 = !DIDerivedType(tag: DW_TAG_typedef, name: "OutputFn", scope: !2, file: !2, line: 23, baseType: !1668, align: 8)
!1668 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OutputFn", baseType: !1669, size: 64, align: 64, dwarfAddressSpace: 0)
!1669 = !DISubroutineType(types: !1670)
!1670 = !{!112, !19, !19, !4}
!1671 = !DIDerivedType(tag: DW_TAG_member, scope: !1663, file: !2, line: 75, baseType: !1672, size: 256, align: 64, offset: 128)
!1672 = !DICompositeType(tag: DW_TAG_structure_type, name: "$anon", scope: !1663, file: !2, line: 75, size: 256, align: 64, elements: !1673)
!1673 = !{!1674, !1676, !1677, !1678, !1679}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1672, file: !2, line: 77, baseType: !1675, size: 32, align: 32)
!1675 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1672, file: !2, line: 78, baseType: !1675, size: 32, align: 32, offset: 32)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "prec", scope: !1672, file: !2, line: 79, baseType: !1675, size: 32, align: 32, offset: 64)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !1672, file: !2, line: 80, baseType: !95, size: 64, align: 64, offset: 128)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "first_fault", scope: !1672, file: !2, line: 81, baseType: !112, size: 64, align: 64, offset: 192)
!1680 = !DILocation(line: 36, column: 1, scope: !1659)
!1681 = !DILocalVariable(name: "self", arg: 1, scope: !1659, file: !2, line: 35, type: !1662)
!1682 = !DILocation(line: 35, column: 26, scope: !1659)
!1683 = !DILocalVariable(name: "len", arg: 2, scope: !1659, file: !2, line: 35, type: !95)
!1684 = !DILocation(line: 35, column: 37, scope: !1659)
!1685 = !DILocation(line: 37, column: 7, scope: !1659)
!1686 = !DILocation(line: 37, column: 31, scope: !1659)
!1687 = !DILocation(line: 38, column: 23, scope: !1659)
!1688 = !DILocation(line: 38, column: 35, scope: !1659)
!1689 = !DILocation(line: 38, column: 9, scope: !1659)
!1690 = distinct !DISubprogram(name: "out_substr", linkageName: "std.io.Formatter.out_substr", scope: !2, file: !2, line: 161, type: !1691, scopeLine: 161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1691 = !DISubroutineType(types: !1692)
!1692 = !{!112, !122, !1662, !252}
!1693 = !DILocation(line: 162, column: 1, scope: !1690)
!1694 = !DILocalVariable(name: "self", arg: 1, scope: !1690, file: !2, line: 161, type: !1662)
!1695 = !DILocation(line: 161, column: 30, scope: !1690)
!1696 = !DILocalVariable(name: "str", arg: 2, scope: !1690, file: !2, line: 161, type: !252)
!1697 = !DILocation(line: 161, column: 44, scope: !1690)
!1698 = !DILocalVariable(name: "l", scope: !1690, file: !2, line: 163, type: !95, align: 8)
!1699 = !DILocation(line: 163, column: 6, scope: !1690)
!1700 = !DILocation(line: 163, column: 32, scope: !1690)
!1701 = !DILocation(line: 163, column: 10, scope: !1690)
!1702 = !DILocalVariable(name: "prec", scope: !1690, file: !2, line: 164, type: !1675, align: 4)
!1703 = !DILocation(line: 164, column: 7, scope: !1690)
!1704 = !DILocation(line: 164, column: 14, scope: !1690)
!1705 = !DILocation(line: 165, column: 6, scope: !1690)
!1706 = !DILocation(line: 165, column: 30, scope: !1690)
!1707 = !DILocation(line: 165, column: 34, scope: !1690)
!1708 = !DILocation(line: 165, column: 44, scope: !1690)
!1709 = !DILocalVariable(name: "index", scope: !1690, file: !2, line: 166, type: !95, align: 8)
!1710 = !DILocation(line: 166, column: 6, scope: !1690)
!1711 = !DILocation(line: 166, column: 14, scope: !1690)
!1712 = !DILocalVariable(name: "chars", scope: !1690, file: !2, line: 167, type: !95, align: 8)
!1713 = !DILocation(line: 167, column: 6, scope: !1690)
!1714 = !DILocation(line: 167, column: 14, scope: !1690)
!1715 = !DILocalVariable(name: "ptr", scope: !1690, file: !2, line: 168, type: !126, align: 8)
!1716 = !DILocation(line: 168, column: 8, scope: !1690)
!1717 = !DILocation(line: 168, column: 14, scope: !1690)
!1718 = !DILocation(line: 169, column: 2, scope: !1690)
!1719 = !DILocation(line: 169, column: 9, scope: !1720)
!1720 = distinct !DILexicalBlock(scope: !1690, file: !2, line: 169, column: 2)
!1721 = !DILocation(line: 169, column: 17, scope: !1720)
!1722 = !DILocalVariable(name: "c", scope: !1723, file: !2, line: 171, type: !4, align: 1)
!1723 = distinct !DILexicalBlock(scope: !1720, file: !2, line: 170, column: 2)
!1724 = !DILocation(line: 171, column: 8, scope: !1723)
!1725 = !DILocation(line: 171, column: 12, scope: !1723)
!1726 = !DILocation(line: 171, column: 16, scope: !1723)
!1727 = !DILocation(line: 173, column: 7, scope: !1723)
!1728 = !DILocation(line: 173, column: 27, scope: !1723)
!1729 = !DILocation(line: 173, column: 52, scope: !1723)
!1730 = !DILocation(line: 173, column: 60, scope: !1723)
!1731 = !DILocation(line: 174, column: 3, scope: !1723)
!1732 = !DILocation(line: 175, column: 3, scope: !1723)
!1733 = !DILocation(line: 177, column: 9, scope: !1690)
!1734 = distinct !DISubprogram(name: "pad", linkageName: "std.io.Formatter.pad", scope: !2, file: !2, line: 180, type: !1735, scopeLine: 180, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1735 = !DISubroutineType(types: !1736)
!1736 = !{!112, !122, !1662, !4, !113, !113}
!1737 = !DILocation(line: 181, column: 1, scope: !1734)
!1738 = !DILocalVariable(name: "self", arg: 1, scope: !1734, file: !2, line: 180, type: !1662)
!1739 = !DILocation(line: 180, column: 23, scope: !1734)
!1740 = !DILocalVariable(name: "c", arg: 2, scope: !1734, file: !2, line: 180, type: !4)
!1741 = !DILocation(line: 180, column: 35, scope: !1734)
!1742 = !DILocalVariable(name: "width", arg: 3, scope: !1734, file: !2, line: 180, type: !672)
!1743 = !DILocation(line: 180, column: 42, scope: !1734)
!1744 = !DILocalVariable(name: "len", arg: 4, scope: !1734, file: !2, line: 180, type: !672)
!1745 = !DILocation(line: 180, column: 53, scope: !1734)
!1746 = !DILocalVariable(name: "delta", scope: !1734, file: !2, line: 182, type: !672, align: 8)
!1747 = !DILocation(line: 182, column: 6, scope: !1734)
!1748 = !DILocation(line: 182, column: 14, scope: !1734)
!1749 = !DILocation(line: 182, column: 22, scope: !1734)
!1750 = !DILocalVariable(name: "i", scope: !1751, file: !2, line: 183, type: !672, align: 8)
!1751 = distinct !DILexicalBlock(scope: !1734, file: !2, line: 183, column: 2)
!1752 = !DILocation(line: 183, column: 11, scope: !1751)
!1753 = !DILocation(line: 183, column: 15, scope: !1751)
!1754 = !DILocation(line: 183, column: 18, scope: !1751)
!1755 = !DILocation(line: 183, column: 22, scope: !1751)
!1756 = !DILocation(line: 183, column: 34, scope: !1751)
!1757 = !DILocation(line: 183, column: 29, scope: !1751)
!1758 = !DILocation(line: 47, column: 10, scope: !1759, inlinedAt: !1760)
!1759 = distinct !DISubprogram(name: "greater", linkageName: "greater", scope: !141, file: !141, line: 39, scopeLine: 39, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1760 = !DILocation(line: 116, column: 10, scope: !1761, inlinedAt: !1762)
!1761 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !141, file: !141, line: 113, scopeLine: 113, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1762 = !DILocation(line: 184, column: 9, scope: !1734)
!1763 = !DILocation(line: 47, column: 14, scope: !1759, inlinedAt: !1760)
!1764 = !DILocation(line: 116, column: 34, scope: !1761, inlinedAt: !1762)
!1765 = !DILocation(line: 116, column: 38, scope: !1761, inlinedAt: !1762)
!1766 = distinct !DISubprogram(name: "out_chars", linkageName: "std.io.Formatter.out_chars", scope: !2, file: !2, line: 194, type: !1767, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1767 = !DISubroutineType(types: !1768)
!1768 = !{!112, !122, !1662, !123}
!1769 = !DILocation(line: 195, column: 1, scope: !1766)
!1770 = !DILocalVariable(name: "self", arg: 1, scope: !1766, file: !2, line: 194, type: !1662)
!1771 = !DILocation(line: 194, column: 29, scope: !1766)
!1772 = !DILocalVariable(name: "s", arg: 2, scope: !1766, file: !2, line: 194, type: !123)
!1773 = !DILocation(line: 194, column: 43, scope: !1766)
!1774 = !DILocation(line: 196, column: 15, scope: !1775)
!1775 = distinct !DILexicalBlock(scope: !1766, file: !2, line: 196, column: 2)
!1776 = !DILocalVariable(name: ".temp", scope: !1775, file: !2, line: 196, type: !95, align: 8)
!1777 = !DILocalVariable(name: "c", scope: !1778, file: !2, line: 196, type: !4, align: 1)
!1778 = distinct !DILexicalBlock(scope: !1775, file: !2, line: 196, column: 18)
!1779 = !DILocation(line: 196, column: 11, scope: !1778)
!1780 = !DILocation(line: 196, column: 15, scope: !1778)
!1781 = !DILocation(line: 196, column: 18, scope: !1778)
!1782 = !DILocation(line: 197, column: 9, scope: !1766)
!1783 = distinct !DISubprogram(name: "etoa", linkageName: "std.io.Formatter.etoa", scope: !2, file: !2, line: 208, type: !1784, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1784 = !DISubroutineType(types: !1785)
!1785 = !{!112, !122, !1662, !1786}
!1786 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1787 = !DILocation(line: 208, column: 44, scope: !1783)
!1788 = !DILocalVariable(name: "self", arg: 1, scope: !1783, file: !2, line: 208, type: !1662)
!1789 = !DILocation(line: 208, column: 24, scope: !1783)
!1790 = !DILocalVariable(name: "y", arg: 2, scope: !1783, file: !2, line: 208, type: !1786)
!1791 = !DILocation(line: 208, column: 38, scope: !1783)
!1792 = distinct !DISubprogram(name: "ftoa", linkageName: "std.io.Formatter.ftoa", scope: !2, file: !2, line: 209, type: !1784, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1793 = !DILocation(line: 209, column: 44, scope: !1792)
!1794 = !DILocalVariable(name: "self", arg: 1, scope: !1792, file: !2, line: 209, type: !1662)
!1795 = !DILocation(line: 209, column: 24, scope: !1792)
!1796 = !DILocalVariable(name: "y", arg: 2, scope: !1792, file: !2, line: 209, type: !1786)
!1797 = !DILocation(line: 209, column: 38, scope: !1792)
!1798 = distinct !DISubprogram(name: "gtoa", linkageName: "std.io.Formatter.gtoa", scope: !2, file: !2, line: 210, type: !1784, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1799 = !DILocation(line: 210, column: 44, scope: !1798)
!1800 = !DILocalVariable(name: "self", arg: 1, scope: !1798, file: !2, line: 210, type: !1662)
!1801 = !DILocation(line: 210, column: 24, scope: !1798)
!1802 = !DILocalVariable(name: "y", arg: 2, scope: !1798, file: !2, line: 210, type: !1786)
!1803 = !DILocation(line: 210, column: 38, scope: !1798)
!1804 = distinct !DISubprogram(name: "atoa", linkageName: "std.io.Formatter.atoa", scope: !2, file: !2, line: 211, type: !1784, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1805 = !DILocation(line: 211, column: 44, scope: !1804)
!1806 = !DILocalVariable(name: "self", arg: 1, scope: !1804, file: !2, line: 211, type: !1662)
!1807 = !DILocation(line: 211, column: 24, scope: !1804)
!1808 = !DILocalVariable(name: "y", arg: 2, scope: !1804, file: !2, line: 211, type: !1786)
!1809 = !DILocation(line: 211, column: 38, scope: !1804)
!1810 = distinct !DISubprogram(name: "floatformat", linkageName: "std.io.Formatter.floatformat", scope: !2, file: !2, line: 213, type: !1811, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!1811 = !DISubroutineType(types: !1812)
!1812 = !{!112, !122, !1662, !51, !1786}
!1813 = !DILocation(line: 214, column: 1, scope: !1810)
!1814 = !DILocalVariable(name: "self", arg: 1, scope: !1810, file: !2, line: 213, type: !1662)
!1815 = !DILocation(line: 213, column: 31, scope: !1810)
!1816 = !DILocalVariable(name: "formatting", arg: 2, scope: !1810, file: !2, line: 213, type: !51)
!1817 = !DILocation(line: 213, column: 54, scope: !1810)
!1818 = !DILocalVariable(name: "y", arg: 3, scope: !1810, file: !2, line: 213, type: !1786)
!1819 = !DILocation(line: 213, column: 73, scope: !1810)
!1820 = !DILocalVariable(name: "big", scope: !1810, file: !2, line: 218, type: !1821, align: 4)
!1821 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1675, size: 4032, align: 32, elements: !1822)
!1822 = !{!1823}
!1823 = !DISubrange(count: 126, lowerBound: 0)
!1824 = !DILocation(line: 218, column: 17, scope: !1810)
!1825 = !DILocalVariable(name: "is_neg", scope: !1810, file: !2, line: 219, type: !432, align: 1)
!1826 = !DILocation(line: 219, column: 7, scope: !1810)
!1827 = !DILocation(line: 219, column: 16, scope: !1810)
!1828 = !DILocation(line: 213, column: 20, scope: !1829, inlinedAt: !1831)
!1829 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !1830, file: !1830, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1830 = !DIFile(filename: "builtin.c3", directory: "/opt/homebrew/lib/c3/std/core")
!1831 = !DILocation(line: 480, column: 16, scope: !1832, inlinedAt: !1833)
!1832 = distinct !DISubprogram(name: "signbit", linkageName: "signbit", scope: !278, file: !278, line: 473, scopeLine: 473, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1833 = !DILocation(line: 220, column: 6, scope: !1810)
!1834 = !DILocation(line: 213, column: 12, scope: !1829, inlinedAt: !1831)
!1835 = !DILocation(line: 480, column: 11, scope: !1832, inlinedAt: !1833)
!1836 = !DILocation(line: 222, column: 12, scope: !1837)
!1837 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 221, column: 2)
!1838 = !DILocation(line: 223, column: 8, scope: !1837)
!1839 = !DILocalVariable(name: "pl", scope: !1810, file: !2, line: 225, type: !672, align: 8)
!1840 = !DILocation(line: 225, column: 6, scope: !1810)
!1841 = !DILocation(line: 225, column: 11, scope: !1810)
!1842 = !DILocation(line: 225, column: 21, scope: !1810)
!1843 = !DILocation(line: 225, column: 43, scope: !1810)
!1844 = !DILocation(line: 213, column: 20, scope: !1845, inlinedAt: !1846)
!1845 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !1830, file: !1830, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1846 = !DILocation(line: 565, column: 11, scope: !1847, inlinedAt: !1848)
!1847 = distinct !DISubprogram(name: "is_finite", linkageName: "is_finite", scope: !278, file: !278, line: 558, scopeLine: 558, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1848 = !DILocation(line: 227, column: 7, scope: !1810)
!1849 = !DILocation(line: 213, column: 12, scope: !1845, inlinedAt: !1846)
!1850 = !DILocalVariable(name: "len", scope: !1851, file: !2, line: 229, type: !95, align: 8)
!1851 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 228, column: 2)
!1852 = !DILocation(line: 229, column: 7, scope: !1851)
!1853 = !DILocation(line: 231, column: 8, scope: !1851)
!1854 = !DILocation(line: 231, column: 25, scope: !1851)
!1855 = !DILocation(line: 231, column: 46, scope: !1851)
!1856 = !DILocation(line: 231, column: 62, scope: !1851)
!1857 = !DILocation(line: 231, column: 58, scope: !1851)
!1858 = !DILocation(line: 231, column: 32, scope: !1851)
!1859 = !DILocalVariable(name: "s", scope: !1851, file: !2, line: 232, type: !252, align: 8)
!1860 = !DILocation(line: 232, column: 10, scope: !1851)
!1861 = !DILocation(line: 232, column: 14, scope: !1851)
!1862 = !DILocation(line: 232, column: 45, scope: !1851)
!1863 = !DILocation(line: 213, column: 20, scope: !1864, inlinedAt: !1865)
!1864 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !1830, file: !1830, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1865 = !DILocation(line: 579, column: 10, scope: !1866, inlinedAt: !1867)
!1866 = distinct !DISubprogram(name: "is_nan", linkageName: "is_nan", scope: !278, file: !278, line: 572, scopeLine: 572, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1867 = !DILocation(line: 233, column: 7, scope: !1851)
!1868 = !DILocation(line: 213, column: 12, scope: !1864, inlinedAt: !1865)
!1869 = !DILocation(line: 233, column: 28, scope: !1851)
!1870 = !DILocation(line: 233, column: 59, scope: !1851)
!1871 = !DILocation(line: 234, column: 7, scope: !1851)
!1872 = !DILocation(line: 234, column: 11, scope: !1851)
!1873 = !DILocation(line: 234, column: 27, scope: !1851)
!1874 = !DILocation(line: 234, column: 42, scope: !1851)
!1875 = !DILocation(line: 234, column: 18, scope: !1851)
!1876 = !DILocation(line: 235, column: 3, scope: !1851)
!1877 = !DILocation(line: 235, column: 10, scope: !1851)
!1878 = !DILocation(line: 236, column: 7, scope: !1851)
!1879 = !DILocation(line: 236, column: 24, scope: !1851)
!1880 = !DILocation(line: 236, column: 45, scope: !1851)
!1881 = !DILocation(line: 236, column: 61, scope: !1851)
!1882 = !DILocation(line: 236, column: 57, scope: !1851)
!1883 = !DILocation(line: 236, column: 31, scope: !1851)
!1884 = !DILocation(line: 237, column: 10, scope: !1851)
!1885 = !DILocalVariable(name: "e2", scope: !1810, file: !2, line: 240, type: !11, align: 4)
!1886 = !DILocation(line: 240, column: 6, scope: !1810)
!1887 = !DILocation(line: 466, column: 28, scope: !1888, inlinedAt: !1889)
!1888 = distinct !DISubprogram(name: "frexp", linkageName: "frexp", scope: !278, file: !278, line: 459, scopeLine: 459, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!1889 = !DILocation(line: 242, column: 6, scope: !1810)
!1890 = !DILocation(line: 466, column: 10, scope: !1888, inlinedAt: !1889)
!1891 = !DILocation(line: 243, column: 6, scope: !1810)
!1892 = !DILocation(line: 243, column: 9, scope: !1810)
!1893 = !DILocalVariable(name: "ebuf0", scope: !1810, file: !2, line: 244, type: !1894, align: 1)
!1894 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 96, align: 8, elements: !1895)
!1895 = !{!1896}
!1896 = !DISubrange(count: 12, lowerBound: 0)
!1897 = !DILocation(line: 244, column: 11, scope: !1810)
!1898 = !DILocalVariable(name: "ebuf", scope: !1810, file: !2, line: 245, type: !126, align: 8)
!1899 = !DILocation(line: 245, column: 8, scope: !1810)
!1900 = !DILocation(line: 245, column: 15, scope: !1810)
!1901 = !DILocalVariable(name: "buf_array", scope: !1810, file: !2, line: 246, type: !1902, align: 1)
!1902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 176, align: 8, elements: !1903)
!1903 = !{!1904}
!1904 = !DISubrange(count: 22, lowerBound: 0)
!1905 = !DILocation(line: 246, column: 38, scope: !1810)
!1906 = !DILocalVariable(name: "buf", scope: !1810, file: !2, line: 247, type: !126, align: 8)
!1907 = !DILocation(line: 247, column: 8, scope: !1810)
!1908 = !DILocation(line: 247, column: 15, scope: !1810)
!1909 = !DILocalVariable(name: "p", scope: !1810, file: !2, line: 248, type: !672, align: 8)
!1910 = !DILocation(line: 248, column: 6, scope: !1810)
!1911 = !DILocation(line: 248, column: 10, scope: !1810)
!1912 = !DILocation(line: 248, column: 33, scope: !1810)
!1913 = !DILocation(line: 248, column: 45, scope: !1810)
!1914 = !DILocation(line: 249, column: 6, scope: !1810)
!1915 = !DILocalVariable(name: "round", scope: !1916, file: !2, line: 251, type: !1786, align: 8)
!1916 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 250, column: 2)
!1917 = !DILocation(line: 251, column: 10, scope: !1916)
!1918 = !DILocation(line: 251, column: 18, scope: !1916)
!1919 = !DILocation(line: 253, column: 3, scope: !1916)
!1920 = !DILocation(line: 254, column: 7, scope: !1916)
!1921 = !DILocation(line: 254, column: 16, scope: !1916)
!1922 = !DILocalVariable(name: "re", scope: !1923, file: !2, line: 256, type: !11, align: 4)
!1923 = distinct !DILexicalBlock(scope: !1916, file: !2, line: 255, column: 3)
!1924 = !DILocation(line: 256, column: 8, scope: !1923)
!1925 = !DILocation(line: 256, column: 46, scope: !1923)
!1926 = !DILocation(line: 256, column: 13, scope: !1923)
!1927 = !DILocation(line: 257, column: 4, scope: !1923)
!1928 = !DILocation(line: 258, column: 4, scope: !1923)
!1929 = !DILocation(line: 258, column: 11, scope: !1930)
!1930 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 258, column: 4)
!1931 = !DILocation(line: 258, column: 17, scope: !1930)
!1932 = !DILocation(line: 259, column: 8, scope: !1923)
!1933 = !DILocation(line: 261, column: 10, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 260, column: 4)
!1935 = !DILocation(line: 262, column: 5, scope: !1934)
!1936 = !DILocation(line: 262, column: 10, scope: !1934)
!1937 = !DILocation(line: 263, column: 5, scope: !1934)
!1938 = !DILocation(line: 263, column: 10, scope: !1934)
!1939 = !DILocation(line: 264, column: 10, scope: !1934)
!1940 = !DILocation(line: 268, column: 5, scope: !1941)
!1941 = distinct !DILexicalBlock(scope: !1923, file: !2, line: 267, column: 4)
!1942 = !DILocation(line: 268, column: 10, scope: !1941)
!1943 = !DILocation(line: 269, column: 5, scope: !1941)
!1944 = !DILocation(line: 269, column: 10, scope: !1941)
!1945 = !DILocalVariable(name: "estr", scope: !1916, file: !2, line: 273, type: !126, align: 8)
!1946 = !DILocation(line: 273, column: 9, scope: !1916)
!1947 = !DILocation(line: 273, column: 22, scope: !1916)
!1948 = !DILocation(line: 273, column: 40, scope: !1916)
!1949 = !DILocation(line: 273, column: 46, scope: !1916)
!1950 = !DILocation(line: 273, column: 57, scope: !1916)
!1951 = !DILocation(line: 273, column: 16, scope: !1916)
!1952 = !DILocation(line: 274, column: 7, scope: !1916)
!1953 = !DILocation(line: 274, column: 15, scope: !1916)
!1954 = !DILocation(line: 274, column: 24, scope: !1916)
!1955 = !DILocation(line: 274, column: 31, scope: !1916)
!1956 = !DILocation(line: 275, column: 6, scope: !1916)
!1957 = !DILocation(line: 275, column: 14, scope: !1916)
!1958 = !DILocation(line: 275, column: 29, scope: !1916)
!1959 = !DILocation(line: 276, column: 6, scope: !1916)
!1960 = !DILocation(line: 276, column: 13, scope: !1916)
!1961 = !DILocation(line: 276, column: 42, scope: !1916)
!1962 = !DILocalVariable(name: "s", scope: !1916, file: !2, line: 277, type: !126, align: 8)
!1963 = !DILocation(line: 277, column: 9, scope: !1916)
!1964 = !DILocation(line: 277, column: 13, scope: !1916)
!1965 = !DILocalVariable(name: "xdigits", scope: !1916, file: !2, line: 278, type: !126, align: 8)
!1966 = !DILocation(line: 278, column: 9, scope: !1916)
!1967 = !DILocation(line: 278, column: 19, scope: !1916)
!1968 = !DILocation(line: 278, column: 55, scope: !1916)
!1969 = !DILocation(line: 279, column: 3, scope: !1916)
!1970 = !DILocation(line: 285, column: 12, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1916, file: !2, line: 279, column: 3)
!1972 = !DILocalVariable(name: "x", scope: !1973, file: !2, line: 281, type: !11, align: 4)
!1973 = distinct !DILexicalBlock(scope: !1971, file: !2, line: 280, column: 3)
!1974 = !DILocation(line: 281, column: 8, scope: !1973)
!1975 = !DILocation(line: 281, column: 13, scope: !1973)
!1976 = !DILocation(line: 282, column: 5, scope: !1973)
!1977 = !DILocation(line: 282, column: 11, scope: !1973)
!1978 = !DILocation(line: 282, column: 19, scope: !1973)
!1979 = !DILocation(line: 283, column: 14, scope: !1973)
!1980 = !DILocation(line: 283, column: 18, scope: !1973)
!1981 = !DILocation(line: 283, column: 8, scope: !1973)
!1982 = !DILocation(line: 284, column: 8, scope: !1973)
!1983 = !DILocation(line: 284, column: 12, scope: !1973)
!1984 = !DILocation(line: 284, column: 25, scope: !1973)
!1985 = !DILocation(line: 284, column: 30, scope: !1973)
!1986 = !DILocation(line: 284, column: 39, scope: !1973)
!1987 = !DILocation(line: 284, column: 58, scope: !1973)
!1988 = !DILocation(line: 284, column: 64, scope: !1973)
!1989 = !DILocalVariable(name: "outlen", scope: !1916, file: !2, line: 286, type: !672, align: 8)
!1990 = !DILocation(line: 286, column: 7, scope: !1916)
!1991 = !DILocation(line: 286, column: 16, scope: !1916)
!1992 = !DILocation(line: 286, column: 20, scope: !1916)
!1993 = !DILocalVariable(name: "explen", scope: !1916, file: !2, line: 287, type: !672, align: 8)
!1994 = !DILocation(line: 287, column: 7, scope: !1916)
!1995 = !DILocation(line: 287, column: 16, scope: !1916)
!1996 = !DILocation(line: 287, column: 23, scope: !1916)
!1997 = !DILocation(line: 288, column: 7, scope: !1916)
!1998 = !DILocation(line: 288, column: 25, scope: !1916)
!1999 = !DILocation(line: 288, column: 11, scope: !1916)
!2000 = !DILocation(line: 288, column: 34, scope: !1916)
!2001 = !DILocation(line: 288, column: 45, scope: !1916)
!2002 = !DILocalVariable(name: "len", scope: !1916, file: !2, line: 289, type: !95, align: 8)
!2003 = !DILocation(line: 289, column: 7, scope: !1916)
!2004 = !DILocalVariable(name: "l", scope: !1916, file: !2, line: 290, type: !95, align: 8)
!2005 = !DILocation(line: 290, column: 7, scope: !1916)
!2006 = !DILocation(line: 290, column: 11, scope: !1916)
!2007 = !DILocation(line: 290, column: 16, scope: !1916)
!2008 = !DILocation(line: 290, column: 29, scope: !1916)
!2009 = !DILocation(line: 291, column: 7, scope: !1916)
!2010 = !DILocation(line: 291, column: 15, scope: !1916)
!2011 = !DILocation(line: 292, column: 7, scope: !1916)
!2012 = !DILocation(line: 292, column: 16, scope: !1916)
!2013 = !DILocation(line: 293, column: 8, scope: !1916)
!2014 = !DILocation(line: 293, column: 28, scope: !1916)
!2015 = !DILocation(line: 293, column: 48, scope: !1916)
!2016 = !DILocation(line: 293, column: 69, scope: !1916)
!2017 = !DILocation(line: 293, column: 81, scope: !1916)
!2018 = !DILocation(line: 293, column: 86, scope: !1916)
!2019 = !DILocation(line: 293, column: 55, scope: !1916)
!2020 = !DILocation(line: 294, column: 7, scope: !1916)
!2021 = !DILocation(line: 294, column: 17, scope: !1916)
!2022 = !DILocation(line: 294, column: 34, scope: !1916)
!2023 = !DILocation(line: 294, column: 50, scope: !1916)
!2024 = !DILocation(line: 294, column: 65, scope: !1916)
!2025 = !DILocation(line: 294, column: 41, scope: !1916)
!2026 = !DILocation(line: 295, column: 3, scope: !1916)
!2027 = !DILocation(line: 295, column: 25, scope: !1916)
!2028 = !DILocation(line: 295, column: 55, scope: !1916)
!2029 = !DILocation(line: 295, column: 10, scope: !1916)
!2030 = !DILocation(line: 296, column: 7, scope: !1916)
!2031 = !DILocation(line: 296, column: 27, scope: !1916)
!2032 = !DILocation(line: 296, column: 48, scope: !1916)
!2033 = !DILocation(line: 296, column: 60, scope: !1916)
!2034 = !DILocation(line: 296, column: 65, scope: !1916)
!2035 = !DILocation(line: 296, column: 34, scope: !1916)
!2036 = !DILocation(line: 297, column: 3, scope: !1916)
!2037 = !DILocation(line: 297, column: 25, scope: !1916)
!2038 = !DILocation(line: 297, column: 30, scope: !1916)
!2039 = !DILocation(line: 297, column: 10, scope: !1916)
!2040 = !DILocation(line: 298, column: 3, scope: !1916)
!2041 = !DILocation(line: 298, column: 24, scope: !1916)
!2042 = !DILocation(line: 298, column: 28, scope: !1916)
!2043 = !DILocation(line: 298, column: 37, scope: !1916)
!2044 = !DILocation(line: 298, column: 10, scope: !1916)
!2045 = !DILocation(line: 299, column: 3, scope: !1916)
!2046 = !DILocation(line: 299, column: 25, scope: !1916)
!2047 = !DILocation(line: 299, column: 31, scope: !1916)
!2048 = !DILocation(line: 299, column: 10, scope: !1916)
!2049 = !DILocation(line: 300, column: 7, scope: !1916)
!2050 = !DILocation(line: 300, column: 24, scope: !1916)
!2051 = !DILocation(line: 300, column: 45, scope: !1916)
!2052 = !DILocation(line: 300, column: 57, scope: !1916)
!2053 = !DILocation(line: 300, column: 62, scope: !1916)
!2054 = !DILocation(line: 300, column: 31, scope: !1916)
!2055 = !DILocation(line: 301, column: 10, scope: !1916)
!2056 = !DILocation(line: 303, column: 6, scope: !1810)
!2057 = !DILocation(line: 303, column: 17, scope: !1810)
!2058 = !DILocation(line: 304, column: 6, scope: !1810)
!2059 = !DILocation(line: 306, column: 3, scope: !2060)
!2060 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 305, column: 2)
!2061 = !DILocation(line: 307, column: 3, scope: !2060)
!2062 = !DILocalVariable(name: "a", scope: !1810, file: !2, line: 310, type: !2063, align: 8)
!2063 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !1675, size: 64, align: 64, dwarfAddressSpace: 0)
!2064 = !DILocation(line: 310, column: 8, scope: !1810)
!2065 = !DILocalVariable(name: "z", scope: !1810, file: !2, line: 310, type: !2063, align: 8)
!2066 = !DILocation(line: 310, column: 11, scope: !1810)
!2067 = !DILocalVariable(name: "r", scope: !1810, file: !2, line: 310, type: !2063, align: 8)
!2068 = !DILocation(line: 310, column: 14, scope: !1810)
!2069 = !DILocation(line: 311, column: 6, scope: !1810)
!2070 = !DILocation(line: 313, column: 16, scope: !2071)
!2071 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 312, column: 2)
!2072 = !DILocation(line: 317, column: 16, scope: !2073)
!2073 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 316, column: 2)
!2074 = !DILocation(line: 320, column: 2, scope: !1810)
!2075 = !DILocation(line: 324, column: 11, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 320, column: 2)
!2077 = !DILocalVariable(name: "v", scope: !2078, file: !2, line: 322, type: !1675, align: 4)
!2078 = distinct !DILexicalBlock(scope: !2076, file: !2, line: 321, column: 2)
!2079 = !DILocation(line: 322, column: 8, scope: !2078)
!2080 = !DILocation(line: 322, column: 12, scope: !2078)
!2081 = !DILocation(line: 322, column: 22, scope: !2078)
!2082 = !DILocation(line: 323, column: 21, scope: !2078)
!2083 = !DILocation(line: 323, column: 25, scope: !2078)
!2084 = !DILocation(line: 323, column: 7, scope: !2078)
!2085 = !DILocation(line: 326, column: 2, scope: !1810)
!2086 = !DILocation(line: 326, column: 9, scope: !2087)
!2087 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 326, column: 2)
!2088 = !DILocalVariable(name: "carry", scope: !2089, file: !2, line: 328, type: !1675, align: 4)
!2089 = distinct !DILexicalBlock(scope: !2087, file: !2, line: 327, column: 2)
!2090 = !DILocation(line: 328, column: 8, scope: !2089)
!2091 = !DILocation(line: 328, column: 16, scope: !2089)
!2092 = !DILocalVariable(name: "sh", scope: !2089, file: !2, line: 329, type: !11, align: 4)
!2093 = !DILocation(line: 329, column: 7, scope: !2089)
!2094 = !DILocation(line: 422, column: 16, scope: !2095, inlinedAt: !2096)
!2095 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2096 = !DILocation(line: 329, column: 12, scope: !2089)
!2097 = !DILocation(line: 422, column: 19, scope: !2095, inlinedAt: !2096)
!2098 = !DILocalVariable(name: "d", scope: !2099, file: !2, line: 330, type: !2063, align: 8)
!2099 = distinct !DILexicalBlock(scope: !2089, file: !2, line: 330, column: 3)
!2100 = !DILocation(line: 330, column: 14, scope: !2099)
!2101 = !DILocation(line: 330, column: 18, scope: !2099)
!2102 = !DILocation(line: 330, column: 22, scope: !2099)
!2103 = !DILocation(line: 330, column: 25, scope: !2099)
!2104 = !DILocation(line: 330, column: 30, scope: !2099)
!2105 = !DILocalVariable(name: "x", scope: !2106, file: !2, line: 332, type: !96, align: 8)
!2106 = distinct !DILexicalBlock(scope: !2099, file: !2, line: 331, column: 3)
!2107 = !DILocation(line: 332, column: 10, scope: !2106)
!2108 = !DILocation(line: 332, column: 22, scope: !2106)
!2109 = !DILocation(line: 332, column: 27, scope: !2106)
!2110 = !DILocation(line: 332, column: 15, scope: !2106)
!2111 = !DILocation(line: 332, column: 32, scope: !2106)
!2112 = !DILocation(line: 333, column: 5, scope: !2106)
!2113 = !DILocation(line: 333, column: 16, scope: !2106)
!2114 = !DILocation(line: 333, column: 10, scope: !2106)
!2115 = !DILocation(line: 334, column: 19, scope: !2106)
!2116 = !DILocation(line: 334, column: 13, scope: !2106)
!2117 = !DILocation(line: 330, column: 33, scope: !2099)
!2118 = !DILocation(line: 336, column: 7, scope: !2089)
!2119 = !DILocation(line: 336, column: 17, scope: !2089)
!2120 = !DILocation(line: 336, column: 21, scope: !2089)
!2121 = !DILocation(line: 337, column: 3, scope: !2089)
!2122 = !DILocation(line: 337, column: 10, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2089, file: !2, line: 337, column: 3)
!2124 = !DILocation(line: 337, column: 14, scope: !2123)
!2125 = !DILocation(line: 337, column: 20, scope: !2123)
!2126 = !DILocation(line: 337, column: 22, scope: !2123)
!2127 = !DILocation(line: 337, column: 27, scope: !2123)
!2128 = !DILocation(line: 338, column: 3, scope: !2089)
!2129 = !DILocation(line: 338, column: 9, scope: !2089)
!2130 = !DILocation(line: 341, column: 2, scope: !1810)
!2131 = !DILocation(line: 341, column: 9, scope: !2132)
!2132 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 341, column: 2)
!2133 = !DILocalVariable(name: "carry", scope: !2134, file: !2, line: 343, type: !1675, align: 4)
!2134 = distinct !DILexicalBlock(scope: !2132, file: !2, line: 342, column: 2)
!2135 = !DILocation(line: 343, column: 8, scope: !2134)
!2136 = !DILocation(line: 343, column: 16, scope: !2134)
!2137 = !DILocalVariable(name: "b", scope: !2134, file: !2, line: 344, type: !2063, align: 8)
!2138 = !DILocation(line: 344, column: 9, scope: !2134)
!2139 = !DILocalVariable(name: "sh", scope: !2134, file: !2, line: 345, type: !11, align: 4)
!2140 = !DILocation(line: 345, column: 7, scope: !2134)
!2141 = !DILocation(line: 345, column: 26, scope: !2134)
!2142 = !DILocation(line: 422, column: 16, scope: !2143, inlinedAt: !2144)
!2143 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2144 = !DILocation(line: 345, column: 12, scope: !2134)
!2145 = !DILocation(line: 422, column: 19, scope: !2143, inlinedAt: !2144)
!2146 = !DILocalVariable(name: "need", scope: !2134, file: !2, line: 346, type: !11, align: 4)
!2147 = !DILocation(line: 346, column: 7, scope: !2134)
!2148 = !DILocation(line: 346, column: 25, scope: !2134)
!2149 = !DILocation(line: 346, column: 15, scope: !2134)
!2150 = !DILocalVariable(name: "d", scope: !2151, file: !2, line: 347, type: !2063, align: 8)
!2151 = distinct !DILexicalBlock(scope: !2134, file: !2, line: 347, column: 3)
!2152 = !DILocation(line: 347, column: 14, scope: !2151)
!2153 = !DILocation(line: 347, column: 18, scope: !2151)
!2154 = !DILocation(line: 347, column: 21, scope: !2151)
!2155 = !DILocation(line: 347, column: 25, scope: !2151)
!2156 = !DILocalVariable(name: "rm", scope: !2157, file: !2, line: 350, type: !1675, align: 4)
!2157 = distinct !DILexicalBlock(scope: !2151, file: !2, line: 348, column: 3)
!2158 = !DILocation(line: 350, column: 9, scope: !2157)
!2159 = !DILocation(line: 350, column: 15, scope: !2157)
!2160 = !DILocation(line: 350, column: 26, scope: !2157)
!2161 = !DILocation(line: 350, column: 21, scope: !2157)
!2162 = !DILocation(line: 350, column: 14, scope: !2157)
!2163 = !DILocation(line: 351, column: 5, scope: !2157)
!2164 = !DILocation(line: 351, column: 11, scope: !2157)
!2165 = !DILocation(line: 351, column: 16, scope: !2157)
!2166 = !DILocation(line: 351, column: 10, scope: !2157)
!2167 = !DILocation(line: 351, column: 22, scope: !2157)
!2168 = !DILocation(line: 352, column: 27, scope: !2157)
!2169 = !DILocation(line: 352, column: 13, scope: !2157)
!2170 = !DILocation(line: 352, column: 33, scope: !2157)
!2171 = !DILocation(line: 347, column: 28, scope: !2151)
!2172 = !DILocation(line: 354, column: 8, scope: !2134)
!2173 = !DILocation(line: 354, column: 10, scope: !2134)
!2174 = !DILocation(line: 354, column: 14, scope: !2134)
!2175 = !DILocation(line: 355, column: 7, scope: !2134)
!2176 = !DILocation(line: 355, column: 14, scope: !2134)
!2177 = !DILocation(line: 355, column: 23, scope: !2134)
!2178 = !DILocation(line: 357, column: 7, scope: !2134)
!2179 = !DILocation(line: 357, column: 29, scope: !2134)
!2180 = !DILocation(line: 357, column: 33, scope: !2134)
!2181 = !DILocation(line: 358, column: 7, scope: !2134)
!2182 = !DILocation(line: 358, column: 11, scope: !2134)
!2183 = !DILocation(line: 358, column: 15, scope: !2134)
!2184 = !DILocation(line: 358, column: 25, scope: !2134)
!2185 = !DILocation(line: 358, column: 29, scope: !2134)
!2186 = !DILocation(line: 359, column: 3, scope: !2134)
!2187 = !DILocation(line: 359, column: 9, scope: !2134)
!2188 = !DILocalVariable(name: "e", scope: !1810, file: !2, line: 362, type: !11, align: 4)
!2189 = !DILocation(line: 362, column: 6, scope: !1810)
!2190 = !DILocation(line: 363, column: 6, scope: !1810)
!2191 = !DILocation(line: 363, column: 10, scope: !1810)
!2192 = !DILocalVariable(name: "i", scope: !2193, file: !2, line: 365, type: !11, align: 4)
!2193 = distinct !DILexicalBlock(scope: !2194, file: !2, line: 365, column: 3)
!2194 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 364, column: 2)
!2195 = !DILocation(line: 365, column: 12, scope: !2193)
!2196 = !DILocation(line: 365, column: 16, scope: !2193)
!2197 = !DILocation(line: 365, column: 35, scope: !2193)
!2198 = !DILocation(line: 365, column: 39, scope: !2193)
!2199 = !DILocation(line: 365, column: 25, scope: !2193)
!2200 = !DILocation(line: 365, column: 45, scope: !2193)
!2201 = !DILocation(line: 365, column: 50, scope: !2193)
!2202 = !DILocation(line: 365, column: 44, scope: !2193)
!2203 = !DILocation(line: 365, column: 53, scope: !2193)
!2204 = !DILocation(line: 365, column: 62, scope: !2193)
!2205 = !DILocalVariable(name: "j", scope: !1810, file: !2, line: 369, type: !11, align: 4)
!2206 = !DILocation(line: 369, column: 6, scope: !1810)
!2207 = !DILocation(line: 369, column: 16, scope: !1810)
!2208 = !DILocation(line: 369, column: 26, scope: !1810)
!2209 = !DILocation(line: 369, column: 48, scope: !1810)
!2210 = !DILocation(line: 369, column: 52, scope: !1810)
!2211 = !DILocation(line: 369, column: 62, scope: !1810)
!2212 = !DILocation(line: 369, column: 88, scope: !1810)
!2213 = !DILocation(line: 369, column: 11, scope: !1810)
!2214 = !DILocation(line: 370, column: 6, scope: !1810)
!2215 = !DILocation(line: 370, column: 15, scope: !1810)
!2216 = !DILocation(line: 370, column: 19, scope: !1810)
!2217 = !DILocation(line: 370, column: 10, scope: !1810)
!2218 = !DILocalVariable(name: "x", scope: !2219, file: !2, line: 372, type: !1675, align: 4)
!2219 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 371, column: 2)
!2220 = !DILocation(line: 372, column: 8, scope: !2219)
!2221 = !DILocalVariable(name: "d", scope: !2219, file: !2, line: 374, type: !2063, align: 8)
!2222 = !DILocation(line: 374, column: 9, scope: !2219)
!2223 = !DILocation(line: 374, column: 13, scope: !2219)
!2224 = !DILocation(line: 374, column: 23, scope: !2219)
!2225 = !DILocation(line: 375, column: 3, scope: !2219)
!2226 = !DILocation(line: 376, column: 3, scope: !2219)
!2227 = !DILocalVariable(name: "i", scope: !2219, file: !2, line: 377, type: !11, align: 4)
!2228 = !DILocation(line: 377, column: 7, scope: !2219)
!2229 = !DILocation(line: 378, column: 12, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2219, file: !2, line: 378, column: 3)
!2231 = !DILocation(line: 378, column: 16, scope: !2230)
!2232 = !DILocation(line: 378, column: 21, scope: !2230)
!2233 = !DILocation(line: 378, column: 28, scope: !2230)
!2234 = !DILocation(line: 378, column: 37, scope: !2230)
!2235 = !DILocation(line: 379, column: 8, scope: !2219)
!2236 = !DILocation(line: 379, column: 12, scope: !2219)
!2237 = !DILocation(line: 379, column: 7, scope: !2219)
!2238 = !DILocation(line: 381, column: 7, scope: !2219)
!2239 = !DILocation(line: 381, column: 13, scope: !2219)
!2240 = !DILocation(line: 381, column: 17, scope: !2219)
!2241 = !DILocation(line: 381, column: 23, scope: !2219)
!2242 = !DILocalVariable(name: "round", scope: !2243, file: !2, line: 383, type: !1786, align: 8)
!2243 = distinct !DILexicalBlock(scope: !2219, file: !2, line: 382, column: 3)
!2244 = !DILocation(line: 383, column: 11, scope: !2243)
!2245 = !DILocation(line: 383, column: 19, scope: !2243)
!2246 = !DILocalVariable(name: "small", scope: !2243, file: !2, line: 384, type: !1786, align: 8)
!2247 = !DILocation(line: 384, column: 11, scope: !2243)
!2248 = !DILocation(line: 385, column: 11, scope: !2243)
!2249 = !DILocation(line: 385, column: 15, scope: !2243)
!2250 = !DILocation(line: 385, column: 10, scope: !2243)
!2251 = !DILocation(line: 385, column: 27, scope: !2243)
!2252 = !DILocation(line: 385, column: 46, scope: !2243)
!2253 = !DILocation(line: 385, column: 50, scope: !2243)
!2254 = !DILocation(line: 385, column: 56, scope: !2243)
!2255 = !DILocation(line: 385, column: 58, scope: !2243)
!2256 = !DILocation(line: 387, column: 5, scope: !2257)
!2257 = distinct !DILexicalBlock(scope: !2243, file: !2, line: 386, column: 4)
!2258 = !DILocation(line: 391, column: 10, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !2243, file: !2, line: 389, column: 4)
!2260 = !DILocation(line: 391, column: 14, scope: !2259)
!2261 = !DILocation(line: 392, column: 14, scope: !2262)
!2262 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 392, column: 6)
!2263 = !DILocation(line: 393, column: 10, scope: !2259)
!2264 = !DILocation(line: 393, column: 15, scope: !2259)
!2265 = !DILocation(line: 393, column: 24, scope: !2259)
!2266 = !DILocation(line: 393, column: 28, scope: !2259)
!2267 = !DILocation(line: 393, column: 33, scope: !2259)
!2268 = !DILocation(line: 394, column: 14, scope: !2269)
!2269 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 394, column: 6)
!2270 = !DILocation(line: 396, column: 14, scope: !2271)
!2271 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 396, column: 6)
!2272 = !DILocation(line: 398, column: 8, scope: !2243)
!2273 = !DILocation(line: 398, column: 14, scope: !2243)
!2274 = !DILocation(line: 400, column: 5, scope: !2275)
!2275 = distinct !DILexicalBlock(scope: !2243, file: !2, line: 399, column: 4)
!2276 = !DILocation(line: 401, column: 5, scope: !2275)
!2277 = !DILocation(line: 403, column: 5, scope: !2243)
!2278 = !DILocation(line: 403, column: 10, scope: !2243)
!2279 = !DILocation(line: 403, column: 4, scope: !2243)
!2280 = !DILocation(line: 405, column: 8, scope: !2243)
!2281 = !DILocation(line: 405, column: 16, scope: !2243)
!2282 = !DILocation(line: 405, column: 25, scope: !2243)
!2283 = !DILocation(line: 407, column: 6, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2243, file: !2, line: 406, column: 4)
!2285 = !DILocation(line: 407, column: 11, scope: !2284)
!2286 = !DILocation(line: 407, column: 15, scope: !2284)
!2287 = !DILocation(line: 407, column: 10, scope: !2284)
!2288 = !DILocation(line: 408, column: 5, scope: !2284)
!2289 = !DILocation(line: 408, column: 13, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2284, file: !2, line: 408, column: 5)
!2291 = !DILocation(line: 408, column: 12, scope: !2290)
!2292 = !DILocation(line: 410, column: 7, scope: !2293)
!2293 = distinct !DILexicalBlock(scope: !2290, file: !2, line: 409, column: 5)
!2294 = !DILocation(line: 410, column: 13, scope: !2293)
!2295 = !DILocation(line: 411, column: 10, scope: !2293)
!2296 = !DILocation(line: 411, column: 14, scope: !2293)
!2297 = !DILocation(line: 411, column: 20, scope: !2293)
!2298 = !DILocation(line: 411, column: 24, scope: !2293)
!2299 = !DILocation(line: 412, column: 8, scope: !2293)
!2300 = !DILocation(line: 412, column: 7, scope: !2293)
!2301 = !DILocation(line: 414, column: 14, scope: !2302)
!2302 = distinct !DILexicalBlock(scope: !2284, file: !2, line: 414, column: 5)
!2303 = !DILocation(line: 414, column: 33, scope: !2302)
!2304 = !DILocation(line: 414, column: 37, scope: !2302)
!2305 = !DILocation(line: 414, column: 23, scope: !2302)
!2306 = !DILocation(line: 414, column: 43, scope: !2302)
!2307 = !DILocation(line: 414, column: 48, scope: !2302)
!2308 = !DILocation(line: 414, column: 42, scope: !2302)
!2309 = !DILocation(line: 414, column: 51, scope: !2302)
!2310 = !DILocation(line: 414, column: 60, scope: !2302)
!2311 = !DILocation(line: 417, column: 7, scope: !2219)
!2312 = !DILocation(line: 417, column: 11, scope: !2219)
!2313 = !DILocation(line: 417, column: 15, scope: !2219)
!2314 = !DILocation(line: 417, column: 22, scope: !2219)
!2315 = !DILocation(line: 417, column: 26, scope: !2219)
!2316 = !DILocation(line: 419, column: 2, scope: !1810)
!2317 = !DILocation(line: 419, column: 9, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 419, column: 2)
!2319 = !DILocation(line: 419, column: 11, scope: !2318)
!2320 = !DILocation(line: 419, column: 17, scope: !2318)
!2321 = !DILocation(line: 419, column: 19, scope: !2318)
!2322 = !DILocation(line: 419, column: 24, scope: !2318)
!2323 = !DILocation(line: 421, column: 6, scope: !1810)
!2324 = !DILocation(line: 423, column: 7, scope: !2325)
!2325 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 422, column: 2)
!2326 = !DILocation(line: 423, column: 11, scope: !2325)
!2327 = !DILocation(line: 424, column: 7, scope: !2325)
!2328 = !DILocation(line: 424, column: 11, scope: !2325)
!2329 = !DILocation(line: 424, column: 16, scope: !2325)
!2330 = !DILocation(line: 426, column: 17, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2325, file: !2, line: 425, column: 3)
!2332 = !DILocation(line: 427, column: 4, scope: !2331)
!2333 = !DILocation(line: 427, column: 10, scope: !2331)
!2334 = !DILocation(line: 431, column: 17, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2325, file: !2, line: 430, column: 3)
!2336 = !DILocation(line: 432, column: 4, scope: !2335)
!2337 = !DILocation(line: 434, column: 8, scope: !2325)
!2338 = !DILocation(line: 437, column: 8, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2325, file: !2, line: 435, column: 3)
!2340 = !DILocation(line: 437, column: 12, scope: !2339)
!2341 = !DILocation(line: 437, column: 17, scope: !2339)
!2342 = !DILocation(line: 437, column: 19, scope: !2339)
!2343 = !DILocalVariable(name: "i", scope: !2344, file: !2, line: 439, type: !11, align: 4)
!2344 = distinct !DILexicalBlock(scope: !2345, file: !2, line: 439, column: 5)
!2345 = distinct !DILexicalBlock(scope: !2339, file: !2, line: 438, column: 4)
!2346 = !DILocation(line: 439, column: 14, scope: !2344)
!2347 = !DILocation(line: 439, column: 18, scope: !2344)
!2348 = !DILocation(line: 439, column: 26, scope: !2344)
!2349 = !DILocation(line: 439, column: 29, scope: !2344)
!2350 = !DILocation(line: 439, column: 31, scope: !2344)
!2351 = !DILocation(line: 439, column: 37, scope: !2344)
!2352 = !DILocation(line: 439, column: 45, scope: !2344)
!2353 = !DILocation(line: 439, column: 54, scope: !2344)
!2354 = !DILocation(line: 443, column: 9, scope: !2355)
!2355 = distinct !DILexicalBlock(scope: !2339, file: !2, line: 442, column: 4)
!2356 = !DILocation(line: 445, column: 8, scope: !2339)
!2357 = !DILocation(line: 447, column: 45, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2339, file: !2, line: 446, column: 4)
!2359 = !DILocation(line: 447, column: 49, scope: !2358)
!2360 = !DILocation(line: 447, column: 40, scope: !2358)
!2361 = !DILocation(line: 447, column: 58, scope: !2358)
!2362 = !DILocation(line: 405, column: 16, scope: !2363, inlinedAt: !2364)
!2363 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !278, file: !278, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2364 = !DILocation(line: 447, column: 22, scope: !2358)
!2365 = !DILocation(line: 405, column: 19, scope: !2363, inlinedAt: !2364)
!2366 = !DILocation(line: 422, column: 16, scope: !2367, inlinedAt: !2368)
!2367 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2368 = !DILocation(line: 447, column: 9, scope: !2358)
!2369 = !DILocation(line: 422, column: 19, scope: !2367, inlinedAt: !2368)
!2370 = !DILocation(line: 451, column: 45, scope: !2371)
!2371 = distinct !DILexicalBlock(scope: !2339, file: !2, line: 450, column: 4)
!2372 = !DILocation(line: 451, column: 49, scope: !2371)
!2373 = !DILocation(line: 451, column: 40, scope: !2371)
!2374 = !DILocation(line: 451, column: 58, scope: !2371)
!2375 = !DILocation(line: 451, column: 62, scope: !2371)
!2376 = !DILocation(line: 405, column: 16, scope: !2377, inlinedAt: !2378)
!2377 = distinct !DISubprogram(name: "max", linkageName: "max", scope: !278, file: !278, line: 402, scopeLine: 402, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2378 = !DILocation(line: 451, column: 22, scope: !2371)
!2379 = !DILocation(line: 405, column: 19, scope: !2377, inlinedAt: !2378)
!2380 = !DILocation(line: 422, column: 16, scope: !2381, inlinedAt: !2382)
!2381 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2382 = !DILocation(line: 451, column: 9, scope: !2371)
!2383 = !DILocation(line: 422, column: 19, scope: !2381, inlinedAt: !2382)
!2384 = !DILocation(line: 456, column: 6, scope: !1810)
!2385 = !DILocation(line: 456, column: 30, scope: !1810)
!2386 = !DILocation(line: 456, column: 35, scope: !1810)
!2387 = !DILocation(line: 456, column: 10, scope: !1810)
!2388 = !DILocation(line: 456, column: 60, scope: !1810)
!2389 = !DILocalVariable(name: "l", scope: !1810, file: !2, line: 457, type: !11, align: 4)
!2390 = !DILocation(line: 457, column: 6, scope: !1810)
!2391 = !DILocation(line: 457, column: 20, scope: !1810)
!2392 = !DILocation(line: 457, column: 16, scope: !1810)
!2393 = !DILocation(line: 457, column: 30, scope: !1810)
!2394 = !DILocation(line: 457, column: 35, scope: !1810)
!2395 = !DILocation(line: 457, column: 11, scope: !1810)
!2396 = !DILocalVariable(name: "estr", scope: !1810, file: !2, line: 458, type: !126, align: 8)
!2397 = !DILocation(line: 458, column: 8, scope: !1810)
!2398 = !DILocation(line: 459, column: 6, scope: !1810)
!2399 = !DILocation(line: 461, column: 7, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 460, column: 2)
!2401 = !DILocation(line: 461, column: 21, scope: !2400)
!2402 = !DILocation(line: 461, column: 11, scope: !2400)
!2403 = !DILocation(line: 461, column: 31, scope: !2400)
!2404 = !DILocation(line: 462, column: 7, scope: !2400)
!2405 = !DILocation(line: 462, column: 14, scope: !2400)
!2406 = !DILocation(line: 462, column: 19, scope: !2400)
!2407 = !DILocation(line: 466, column: 26, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 465, column: 2)
!2409 = !DILocation(line: 466, column: 35, scope: !2408)
!2410 = !DILocation(line: 466, column: 39, scope: !2408)
!2411 = !DILocation(line: 466, column: 43, scope: !2408)
!2412 = !DILocation(line: 466, column: 10, scope: !2408)
!2413 = !DILocation(line: 467, column: 3, scope: !2408)
!2414 = !DILocation(line: 467, column: 10, scope: !2415)
!2415 = distinct !DILexicalBlock(scope: !2408, file: !2, line: 467, column: 3)
!2416 = !DILocation(line: 467, column: 17, scope: !2415)
!2417 = !DILocation(line: 467, column: 30, scope: !2415)
!2418 = !DILocation(line: 467, column: 41, scope: !2415)
!2419 = !DILocation(line: 468, column: 6, scope: !2408)
!2420 = !DILocation(line: 468, column: 14, scope: !2408)
!2421 = !DILocation(line: 468, column: 28, scope: !2408)
!2422 = !DILocation(line: 469, column: 6, scope: !2408)
!2423 = !DILocation(line: 469, column: 13, scope: !2408)
!2424 = !DILocation(line: 469, column: 42, scope: !2408)
!2425 = !DILocation(line: 470, column: 7, scope: !2408)
!2426 = !DILocation(line: 470, column: 14, scope: !2408)
!2427 = !DILocation(line: 470, column: 36, scope: !2408)
!2428 = !DILocation(line: 470, column: 22, scope: !2408)
!2429 = !DILocation(line: 470, column: 46, scope: !2408)
!2430 = !DILocation(line: 471, column: 3, scope: !2408)
!2431 = !DILocation(line: 471, column: 14, scope: !2408)
!2432 = !DILocation(line: 471, column: 21, scope: !2408)
!2433 = !DILocation(line: 471, column: 9, scope: !2408)
!2434 = !DILocation(line: 473, column: 6, scope: !1810)
!2435 = !DILocation(line: 473, column: 20, scope: !1810)
!2436 = !DILocation(line: 473, column: 10, scope: !1810)
!2437 = !DILocation(line: 473, column: 31, scope: !1810)
!2438 = !DILocalVariable(name: "len", scope: !1810, file: !2, line: 474, type: !95, align: 8)
!2439 = !DILocation(line: 474, column: 6, scope: !1810)
!2440 = !DILocation(line: 475, column: 7, scope: !1810)
!2441 = !DILocation(line: 475, column: 27, scope: !1810)
!2442 = !DILocation(line: 475, column: 47, scope: !1810)
!2443 = !DILocation(line: 475, column: 68, scope: !1810)
!2444 = !DILocation(line: 475, column: 80, scope: !1810)
!2445 = !DILocation(line: 475, column: 85, scope: !1810)
!2446 = !DILocation(line: 475, column: 54, scope: !1810)
!2447 = !DILocation(line: 476, column: 6, scope: !1810)
!2448 = !DILocation(line: 476, column: 16, scope: !1810)
!2449 = !DILocation(line: 476, column: 33, scope: !1810)
!2450 = !DILocation(line: 476, column: 49, scope: !1810)
!2451 = !DILocation(line: 476, column: 64, scope: !1810)
!2452 = !DILocation(line: 476, column: 40, scope: !1810)
!2453 = !DILocation(line: 477, column: 6, scope: !1810)
!2454 = !DILocation(line: 477, column: 26, scope: !1810)
!2455 = !DILocation(line: 477, column: 47, scope: !1810)
!2456 = !DILocation(line: 477, column: 59, scope: !1810)
!2457 = !DILocation(line: 477, column: 64, scope: !1810)
!2458 = !DILocation(line: 477, column: 33, scope: !1810)
!2459 = !DILocation(line: 478, column: 6, scope: !1810)
!2460 = !DILocation(line: 480, column: 7, scope: !2461)
!2461 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 479, column: 2)
!2462 = !DILocation(line: 480, column: 11, scope: !2461)
!2463 = !DILocation(line: 480, column: 18, scope: !2461)
!2464 = !DILocalVariable(name: "d", scope: !2461, file: !2, line: 481, type: !2063, align: 8)
!2465 = !DILocation(line: 481, column: 9, scope: !2461)
!2466 = !DILocation(line: 481, column: 13, scope: !2461)
!2467 = !DILocation(line: 482, column: 3, scope: !2461)
!2468 = !DILocation(line: 482, column: 10, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2461, file: !2, line: 482, column: 3)
!2470 = !DILocation(line: 482, column: 15, scope: !2469)
!2471 = !DILocalVariable(name: "s", scope: !2472, file: !2, line: 484, type: !126, align: 8)
!2472 = distinct !DILexicalBlock(scope: !2469, file: !2, line: 483, column: 3)
!2473 = !DILocation(line: 484, column: 10, scope: !2472)
!2474 = !DILocation(line: 484, column: 21, scope: !2472)
!2475 = !DILocation(line: 484, column: 24, scope: !2472)
!2476 = !DILocation(line: 484, column: 30, scope: !2472)
!2477 = !DILocation(line: 484, column: 14, scope: !2472)
!2478 = !DILocation(line: 487, column: 10, scope: !2479)
!2479 = distinct !DILexicalBlock(scope: !2472, file: !2, line: 485, column: 4)
!2480 = !DILocation(line: 487, column: 15, scope: !2479)
!2481 = !DILocation(line: 488, column: 6, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2479, file: !2, line: 488, column: 6)
!2483 = !DILocation(line: 488, column: 13, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2482, file: !2, line: 488, column: 6)
!2485 = !DILocation(line: 488, column: 17, scope: !2484)
!2486 = !DILocation(line: 488, column: 25, scope: !2484)
!2487 = !DILocation(line: 488, column: 33, scope: !2484)
!2488 = !DILocation(line: 489, column: 10, scope: !2479)
!2489 = !DILocation(line: 489, column: 15, scope: !2479)
!2490 = !DILocation(line: 489, column: 21, scope: !2479)
!2491 = !DILocation(line: 490, column: 9, scope: !2492)
!2492 = distinct !DILexicalBlock(scope: !2479, file: !2, line: 490, column: 6)
!2493 = !DILocation(line: 490, column: 13, scope: !2492)
!2494 = !DILocation(line: 492, column: 4, scope: !2472)
!2495 = !DILocation(line: 492, column: 26, scope: !2472)
!2496 = !DILocation(line: 492, column: 29, scope: !2472)
!2497 = !DILocation(line: 492, column: 35, scope: !2472)
!2498 = !DILocation(line: 492, column: 39, scope: !2472)
!2499 = !DILocation(line: 492, column: 11, scope: !2472)
!2500 = !DILocation(line: 482, column: 18, scope: !2469)
!2501 = !DILocation(line: 494, column: 7, scope: !2461)
!2502 = !DILocation(line: 494, column: 12, scope: !2461)
!2503 = !DILocation(line: 494, column: 29, scope: !2461)
!2504 = !DILocation(line: 494, column: 36, scope: !2461)
!2505 = !DILocation(line: 495, column: 3, scope: !2461)
!2506 = !DILocation(line: 495, column: 10, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2461, file: !2, line: 495, column: 3)
!2508 = !DILocation(line: 495, column: 14, scope: !2507)
!2509 = !DILocation(line: 495, column: 19, scope: !2507)
!2510 = !DILocalVariable(name: "s", scope: !2511, file: !2, line: 497, type: !126, align: 8)
!2511 = distinct !DILexicalBlock(scope: !2507, file: !2, line: 496, column: 3)
!2512 = !DILocation(line: 497, column: 10, scope: !2511)
!2513 = !DILocation(line: 497, column: 21, scope: !2511)
!2514 = !DILocation(line: 497, column: 24, scope: !2511)
!2515 = !DILocation(line: 497, column: 30, scope: !2511)
!2516 = !DILocation(line: 497, column: 14, scope: !2511)
!2517 = !DILocation(line: 498, column: 4, scope: !2511)
!2518 = !DILocation(line: 498, column: 11, scope: !2519)
!2519 = distinct !DILexicalBlock(scope: !2511, file: !2, line: 498, column: 4)
!2520 = !DILocation(line: 498, column: 15, scope: !2519)
!2521 = !DILocation(line: 498, column: 23, scope: !2519)
!2522 = !DILocation(line: 498, column: 27, scope: !2519)
!2523 = !DILocation(line: 499, column: 4, scope: !2511)
!2524 = !DILocation(line: 499, column: 26, scope: !2511)
!2525 = !DILocation(line: 422, column: 16, scope: !2526, inlinedAt: !2527)
!2526 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2527 = !DILocation(line: 499, column: 29, scope: !2511)
!2528 = !DILocation(line: 422, column: 19, scope: !2526, inlinedAt: !2527)
!2529 = !DILocation(line: 499, column: 11, scope: !2511)
!2530 = !DILocation(line: 495, column: 26, scope: !2507)
!2531 = !DILocation(line: 495, column: 31, scope: !2507)
!2532 = !DILocation(line: 501, column: 3, scope: !2461)
!2533 = !DILocation(line: 501, column: 24, scope: !2461)
!2534 = !DILocation(line: 501, column: 10, scope: !2461)
!2535 = !DILocation(line: 505, column: 7, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 504, column: 2)
!2537 = !DILocation(line: 505, column: 12, scope: !2536)
!2538 = !DILocation(line: 505, column: 19, scope: !2536)
!2539 = !DILocation(line: 505, column: 23, scope: !2536)
!2540 = !DILocalVariable(name: "d", scope: !2541, file: !2, line: 506, type: !2063, align: 8)
!2541 = distinct !DILexicalBlock(scope: !2536, file: !2, line: 506, column: 3)
!2542 = !DILocation(line: 506, column: 14, scope: !2541)
!2543 = !DILocation(line: 506, column: 18, scope: !2541)
!2544 = !DILocation(line: 506, column: 21, scope: !2541)
!2545 = !DILocation(line: 506, column: 25, scope: !2541)
!2546 = !DILocation(line: 506, column: 30, scope: !2541)
!2547 = !DILocalVariable(name: "s", scope: !2548, file: !2, line: 508, type: !126, align: 8)
!2548 = distinct !DILexicalBlock(scope: !2541, file: !2, line: 507, column: 3)
!2549 = !DILocation(line: 508, column: 10, scope: !2548)
!2550 = !DILocation(line: 508, column: 21, scope: !2548)
!2551 = !DILocation(line: 508, column: 24, scope: !2548)
!2552 = !DILocation(line: 508, column: 30, scope: !2548)
!2553 = !DILocation(line: 508, column: 14, scope: !2548)
!2554 = !DILocation(line: 509, column: 8, scope: !2548)
!2555 = !DILocation(line: 509, column: 13, scope: !2548)
!2556 = !DILocation(line: 509, column: 19, scope: !2548)
!2557 = !DILocation(line: 509, column: 25, scope: !2548)
!2558 = !DILocation(line: 509, column: 33, scope: !2548)
!2559 = !DILocation(line: 510, column: 8, scope: !2548)
!2560 = !DILocation(line: 510, column: 13, scope: !2548)
!2561 = !DILocation(line: 512, column: 5, scope: !2562)
!2562 = distinct !DILexicalBlock(scope: !2548, file: !2, line: 511, column: 4)
!2563 = !DILocation(line: 512, column: 12, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2562, file: !2, line: 512, column: 5)
!2565 = !DILocation(line: 512, column: 16, scope: !2564)
!2566 = !DILocation(line: 512, column: 24, scope: !2564)
!2567 = !DILocation(line: 512, column: 32, scope: !2564)
!2568 = !DILocation(line: 516, column: 5, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2548, file: !2, line: 515, column: 4)
!2570 = !DILocation(line: 516, column: 21, scope: !2569)
!2571 = !DILocation(line: 516, column: 12, scope: !2569)
!2572 = !DILocation(line: 517, column: 9, scope: !2569)
!2573 = !DILocation(line: 517, column: 18, scope: !2569)
!2574 = !DILocation(line: 517, column: 35, scope: !2569)
!2575 = !DILocation(line: 517, column: 42, scope: !2569)
!2576 = !DILocation(line: 519, column: 4, scope: !2548)
!2577 = !DILocation(line: 519, column: 26, scope: !2548)
!2578 = !DILocation(line: 519, column: 39, scope: !2548)
!2579 = !DILocation(line: 519, column: 45, scope: !2548)
!2580 = !DILocation(line: 519, column: 49, scope: !2548)
!2581 = !DILocation(line: 422, column: 16, scope: !2582, inlinedAt: !2583)
!2582 = distinct !DISubprogram(name: "min", linkageName: "min", scope: !278, file: !278, line: 419, scopeLine: 419, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2583 = !DILocation(line: 519, column: 29, scope: !2548)
!2584 = !DILocation(line: 422, column: 19, scope: !2582, inlinedAt: !2583)
!2585 = !DILocation(line: 519, column: 11, scope: !2548)
!2586 = !DILocation(line: 520, column: 4, scope: !2548)
!2587 = !DILocation(line: 520, column: 9, scope: !2548)
!2588 = !DILocation(line: 520, column: 15, scope: !2548)
!2589 = !DILocation(line: 520, column: 19, scope: !2548)
!2590 = !DILocation(line: 506, column: 38, scope: !2541)
!2591 = !DILocation(line: 522, column: 3, scope: !2536)
!2592 = !DILocation(line: 522, column: 24, scope: !2536)
!2593 = !DILocation(line: 522, column: 10, scope: !2536)
!2594 = !DILocation(line: 523, column: 3, scope: !2536)
!2595 = !DILocation(line: 523, column: 25, scope: !2536)
!2596 = !DILocation(line: 523, column: 31, scope: !2536)
!2597 = !DILocation(line: 523, column: 38, scope: !2536)
!2598 = !DILocation(line: 523, column: 10, scope: !2536)
!2599 = !DILocation(line: 526, column: 6, scope: !1810)
!2600 = !DILocation(line: 526, column: 23, scope: !1810)
!2601 = !DILocation(line: 526, column: 44, scope: !1810)
!2602 = !DILocation(line: 526, column: 56, scope: !1810)
!2603 = !DILocation(line: 526, column: 61, scope: !1810)
!2604 = !DILocation(line: 526, column: 30, scope: !1810)
!2605 = !DILocation(line: 528, column: 9, scope: !1810)
!2606 = !DILocation(line: 274, column: 22, scope: !1916)
!2607 = !DILocation(line: 275, column: 4, scope: !1916)
!2608 = !DILocation(line: 276, column: 4, scope: !1916)
!2609 = !DILocation(line: 336, column: 15, scope: !2089)
!2610 = !DILocation(line: 411, column: 18, scope: !2293)
!2611 = !DILocation(line: 468, column: 4, scope: !2408)
!2612 = !DILocation(line: 469, column: 4, scope: !2408)
!2613 = !DILocation(line: 490, column: 7, scope: !2492)
!2614 = !DILocation(line: 498, column: 21, scope: !2519)
!2615 = distinct !DISubprogram(name: "ntoa", linkageName: "std.io.Formatter.ntoa", scope: !2, file: !2, line: 531, type: !2616, scopeLine: 531, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!2616 = !DISubroutineType(types: !2617)
!2617 = !{!112, !122, !1662, !2618, !432, !1675}
!2618 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!2619 = !DILocation(line: 532, column: 1, scope: !2615)
!2620 = !DILocalVariable(name: "self", arg: 1, scope: !2615, file: !2, line: 531, type: !1662)
!2621 = !DILocation(line: 531, column: 24, scope: !2615)
!2622 = !DILocalVariable(name: "value", arg: 2, scope: !2615, file: !2, line: 531, type: !2618)
!2623 = !DILocation(line: 531, column: 39, scope: !2615)
!2624 = !DILocalVariable(name: "negative", arg: 3, scope: !2615, file: !2, line: 531, type: !432)
!2625 = !DILocation(line: 531, column: 51, scope: !2615)
!2626 = !DILocalVariable(name: "base", arg: 4, scope: !2615, file: !2, line: 531, type: !1675)
!2627 = !DILocation(line: 531, column: 66, scope: !2615)
!2628 = !DILocalVariable(name: "buf", scope: !2615, file: !2, line: 533, type: !2629, align: 1)
!2629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 2048, align: 8, elements: !2630)
!2630 = !{!2631}
!2631 = !DISubrange(count: 256, lowerBound: 0)
!2632 = !DILocation(line: 533, column: 32, scope: !2615)
!2633 = !DILocalVariable(name: "len", scope: !2615, file: !2, line: 534, type: !95, align: 8)
!2634 = !DILocation(line: 534, column: 6, scope: !2615)
!2635 = !DILocation(line: 537, column: 6, scope: !2615)
!2636 = !DILocation(line: 537, column: 14, scope: !2615)
!2637 = !DILocation(line: 537, column: 32, scope: !2615)
!2638 = !DILocation(line: 540, column: 7, scope: !2615)
!2639 = !DILocation(line: 540, column: 31, scope: !2615)
!2640 = !DILocalVariable(name: "past_10", scope: !2641, file: !2, line: 542, type: !4, align: 1)
!2641 = distinct !DILexicalBlock(scope: !2615, file: !2, line: 541, column: 2)
!2642 = !DILocation(line: 542, column: 8, scope: !2641)
!2643 = !DILocation(line: 542, column: 19, scope: !2641)
!2644 = !DILocation(line: 542, column: 48, scope: !2641)
!2645 = !DILocation(line: 543, column: 3, scope: !2641)
!2646 = !DILocation(line: 550, column: 10, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2641, file: !2, line: 543, column: 3)
!2648 = !DILocation(line: 545, column: 8, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2647, file: !2, line: 544, column: 3)
!2650 = !DILocation(line: 545, column: 47, scope: !2649)
!2651 = !DILocalVariable(name: "digit", scope: !2649, file: !2, line: 546, type: !4, align: 1)
!2652 = !DILocation(line: 546, column: 9, scope: !2649)
!2653 = !DILocation(line: 546, column: 24, scope: !2649)
!2654 = !DILocation(line: 546, column: 32, scope: !2649)
!2655 = !DILocation(line: 546, column: 18, scope: !2649)
!2656 = !DILocation(line: 547, column: 8, scope: !2649)
!2657 = !DILocation(line: 547, column: 17, scope: !2649)
!2658 = !DILocation(line: 547, column: 26, scope: !2649)
!2659 = !DILocation(line: 547, column: 39, scope: !2649)
!2660 = !DILocation(line: 547, column: 45, scope: !2649)
!2661 = !DILocation(line: 548, column: 4, scope: !2649)
!2662 = !DILocation(line: 548, column: 13, scope: !2649)
!2663 = !DILocation(line: 552, column: 34, scope: !2615)
!2664 = !DILocation(line: 552, column: 9, scope: !2615)
!2665 = distinct !DISubprogram(name: "ntoa_format", linkageName: "std.io.Formatter.ntoa_format", scope: !2, file: !2, line: 555, type: !2666, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!2666 = !DISubroutineType(types: !2667)
!2667 = !{!112, !122, !1662, !252, !96, !432, !1675}
!2668 = !DILocation(line: 556, column: 1, scope: !2665)
!2669 = !DILocalVariable(name: "self", arg: 1, scope: !2665, file: !2, line: 555, type: !1662)
!2670 = !DILocation(line: 555, column: 31, scope: !2665)
!2671 = !DILocalVariable(name: "buf", arg: 2, scope: !2665, file: !2, line: 555, type: !252)
!2672 = !DILocation(line: 555, column: 45, scope: !2665)
!2673 = !DILocalVariable(name: "len", arg: 3, scope: !2665, file: !2, line: 555, type: !95)
!2674 = !DILocation(line: 555, column: 54, scope: !2665)
!2675 = !DILocalVariable(name: "negative", arg: 4, scope: !2665, file: !2, line: 555, type: !432)
!2676 = !DILocation(line: 555, column: 64, scope: !2665)
!2677 = !DILocalVariable(name: "base", arg: 5, scope: !2665, file: !2, line: 555, type: !1675)
!2678 = !DILocation(line: 555, column: 79, scope: !2665)
!2679 = !DILocation(line: 558, column: 7, scope: !2665)
!2680 = !DILocation(line: 560, column: 7, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2665, file: !2, line: 559, column: 2)
!2682 = !DILocation(line: 560, column: 21, scope: !2681)
!2683 = !DILocation(line: 560, column: 44, scope: !2681)
!2684 = !DILocation(line: 560, column: 56, scope: !2681)
!2685 = !DILocation(line: 560, column: 75, scope: !2681)
!2686 = !DILocation(line: 560, column: 94, scope: !2681)
!2687 = !DILocation(line: 561, column: 3, scope: !2681)
!2688 = !DILocation(line: 561, column: 10, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2681, file: !2, line: 561, column: 3)
!2690 = !DILocation(line: 561, column: 16, scope: !2689)
!2691 = !DILocation(line: 563, column: 8, scope: !2692)
!2692 = distinct !DILexicalBlock(scope: !2689, file: !2, line: 562, column: 3)
!2693 = !DILocation(line: 563, column: 15, scope: !2692)
!2694 = !DILocation(line: 563, column: 31, scope: !2692)
!2695 = !DILocation(line: 564, column: 4, scope: !2692)
!2696 = !DILocation(line: 564, column: 8, scope: !2692)
!2697 = !DILocation(line: 564, column: 17, scope: !2692)
!2698 = !DILocation(line: 566, column: 3, scope: !2681)
!2699 = !DILocation(line: 566, column: 10, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2681, file: !2, line: 566, column: 3)
!2701 = !DILocation(line: 566, column: 32, scope: !2700)
!2702 = !DILocation(line: 566, column: 38, scope: !2700)
!2703 = !DILocation(line: 568, column: 8, scope: !2704)
!2704 = distinct !DILexicalBlock(scope: !2700, file: !2, line: 567, column: 3)
!2705 = !DILocation(line: 568, column: 15, scope: !2704)
!2706 = !DILocation(line: 568, column: 31, scope: !2704)
!2707 = !DILocation(line: 569, column: 4, scope: !2704)
!2708 = !DILocation(line: 569, column: 8, scope: !2704)
!2709 = !DILocation(line: 569, column: 17, scope: !2704)
!2710 = !DILocation(line: 574, column: 6, scope: !2665)
!2711 = !DILocation(line: 574, column: 25, scope: !2665)
!2712 = !DILocation(line: 576, column: 8, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2665, file: !2, line: 575, column: 2)
!2714 = !DILocation(line: 576, column: 32, scope: !2713)
!2715 = !DILocation(line: 576, column: 39, scope: !2713)
!2716 = !DILocation(line: 576, column: 46, scope: !2713)
!2717 = !DILocation(line: 576, column: 59, scope: !2713)
!2718 = !DILocation(line: 576, column: 66, scope: !2713)
!2719 = !DILocation(line: 578, column: 4, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2713, file: !2, line: 577, column: 3)
!2721 = !DILocation(line: 579, column: 8, scope: !2720)
!2722 = !DILocation(line: 579, column: 13, scope: !2720)
!2723 = !DILocation(line: 581, column: 7, scope: !2713)
!2724 = !DILocation(line: 583, column: 8, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2713, file: !2, line: 582, column: 3)
!2726 = !DILocation(line: 583, column: 19, scope: !2725)
!2727 = !DILocation(line: 583, column: 35, scope: !2725)
!2728 = !DILocation(line: 587, column: 6, scope: !2729)
!2729 = distinct !DILexicalBlock(scope: !2730, file: !2, line: 587, column: 6)
!2730 = distinct !DILexicalBlock(scope: !2725, file: !2, line: 584, column: 4)
!2731 = !DILocation(line: 587, column: 10, scope: !2729)
!2732 = !DILocation(line: 587, column: 19, scope: !2729)
!2733 = !DILocation(line: 587, column: 48, scope: !2729)
!2734 = !DILocation(line: 589, column: 6, scope: !2735)
!2735 = distinct !DILexicalBlock(scope: !2730, file: !2, line: 589, column: 6)
!2736 = !DILocation(line: 589, column: 10, scope: !2735)
!2737 = !DILocation(line: 589, column: 19, scope: !2735)
!2738 = !DILocation(line: 589, column: 48, scope: !2735)
!2739 = !DILocation(line: 591, column: 6, scope: !2740)
!2740 = distinct !DILexicalBlock(scope: !2730, file: !2, line: 591, column: 6)
!2741 = !DILocation(line: 591, column: 10, scope: !2740)
!2742 = !DILocation(line: 591, column: 19, scope: !2740)
!2743 = !DILocation(line: 591, column: 48, scope: !2740)
!2744 = !DILocation(line: 165, column: 33, scope: !2745, inlinedAt: !2746)
!2745 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2746 = !DILocation(line: 593, column: 6, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2730, file: !2, line: 593, column: 6)
!2748 = !DILocation(line: 165, column: 2, scope: !2745, inlinedAt: !2746)
!2749 = !DILocation(line: 167, column: 2, scope: !2745, inlinedAt: !2746)
!2750 = !DILocation(line: 595, column: 4, scope: !2725)
!2751 = !DILocation(line: 595, column: 8, scope: !2725)
!2752 = !DILocation(line: 595, column: 17, scope: !2725)
!2753 = !DILocation(line: 601, column: 8, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2665, file: !2, line: 599, column: 2)
!2755 = !DILocation(line: 602, column: 8, scope: !2756)
!2756 = distinct !DILexicalBlock(scope: !2754, file: !2, line: 602, column: 4)
!2757 = !DILocation(line: 602, column: 15, scope: !2756)
!2758 = !DILocation(line: 602, column: 31, scope: !2756)
!2759 = !DILocation(line: 603, column: 4, scope: !2756)
!2760 = !DILocation(line: 603, column: 8, scope: !2756)
!2761 = !DILocation(line: 603, column: 17, scope: !2756)
!2762 = !DILocation(line: 604, column: 8, scope: !2754)
!2763 = !DILocation(line: 605, column: 8, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2754, file: !2, line: 605, column: 4)
!2765 = !DILocation(line: 605, column: 15, scope: !2764)
!2766 = !DILocation(line: 605, column: 31, scope: !2764)
!2767 = !DILocation(line: 606, column: 4, scope: !2764)
!2768 = !DILocation(line: 606, column: 8, scope: !2764)
!2769 = !DILocation(line: 606, column: 17, scope: !2764)
!2770 = !DILocation(line: 607, column: 8, scope: !2754)
!2771 = !DILocation(line: 608, column: 8, scope: !2772)
!2772 = distinct !DILexicalBlock(scope: !2754, file: !2, line: 608, column: 4)
!2773 = !DILocation(line: 608, column: 15, scope: !2772)
!2774 = !DILocation(line: 608, column: 31, scope: !2772)
!2775 = !DILocation(line: 609, column: 4, scope: !2772)
!2776 = !DILocation(line: 609, column: 8, scope: !2772)
!2777 = !DILocation(line: 609, column: 17, scope: !2772)
!2778 = !DILocation(line: 611, column: 6, scope: !2665)
!2779 = !DILocation(line: 611, column: 28, scope: !2665)
!2780 = !DILocation(line: 611, column: 32, scope: !2665)
!2781 = !DILocation(line: 611, column: 33, scope: !2665)
!2782 = !DILocation(line: 611, column: 11, scope: !2665)
!2783 = !DILocation(line: 612, column: 9, scope: !2665)
!2784 = distinct !DISubprogram(name: "ntoa_any", linkageName: "std.io.Formatter.ntoa_any", scope: !2, file: !2, line: 616, type: !2785, scopeLine: 616, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!2785 = !DISubroutineType(types: !2786)
!2786 = !{!112, !122, !1662, !2787, !1675}
!2787 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !2788, identifier: "any")
!2788 = !{!2789, !2790}
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2787, baseType: !19, size: 64, align: 64)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2787, baseType: !93, size: 64, align: 64, offset: 64)
!2791 = !DILocation(line: 617, column: 1, scope: !2784)
!2792 = !DILocalVariable(name: "self", arg: 1, scope: !2784, file: !2, line: 616, type: !1662)
!2793 = !DILocation(line: 616, column: 28, scope: !2784)
!2794 = !DILocalVariable(name: "arg", arg: 2, scope: !2784, file: !2, line: 616, type: !2787)
!2795 = !DILocation(line: 616, column: 39, scope: !2784)
!2796 = !DILocalVariable(name: "base", arg: 3, scope: !2784, file: !2, line: 616, type: !1675)
!2797 = !DILocation(line: 616, column: 49, scope: !2784)
!2798 = !DILocalVariable(name: "is_neg", scope: !2784, file: !2, line: 618, type: !432, align: 1)
!2799 = !DILocation(line: 618, column: 7, scope: !2784)
!2800 = !DILocation(line: 619, column: 19, scope: !2784)
!2801 = !DILocation(line: 619, column: 9, scope: !2784)
!2802 = distinct !DISubprogram(name: "out_char", linkageName: "std.io.Formatter.out_char", scope: !2, file: !2, line: 622, type: !2803, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!2803 = !DISubroutineType(types: !2804)
!2804 = !{!112, !122, !1662, !2787}
!2805 = !DILocation(line: 623, column: 1, scope: !2802)
!2806 = !DILocalVariable(name: "self", arg: 1, scope: !2802, file: !2, line: 622, type: !1662)
!2807 = !DILocation(line: 622, column: 28, scope: !2802)
!2808 = !DILocalVariable(name: "arg", arg: 2, scope: !2802, file: !2, line: 622, type: !2787)
!2809 = !DILocation(line: 622, column: 39, scope: !2802)
!2810 = !DILocation(line: 624, column: 7, scope: !2802)
!2811 = !DILocation(line: 626, column: 10, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2802, file: !2, line: 625, column: 2)
!2813 = !DILocalVariable(name: "len", scope: !2802, file: !2, line: 628, type: !95, align: 8)
!2814 = !DILocation(line: 628, column: 6, scope: !2802)
!2815 = !DILocation(line: 628, column: 12, scope: !2802)
!2816 = !DILocalVariable(name: "l", scope: !2802, file: !2, line: 629, type: !1675, align: 4)
!2817 = !DILocation(line: 629, column: 7, scope: !2802)
!2818 = !DILocation(line: 629, column: 11, scope: !2802)
!2819 = !DILocation(line: 631, column: 2, scope: !2802)
!2820 = !DILocation(line: 631, column: 21, scope: !2802)
!2821 = !DILocation(line: 631, column: 9, scope: !2802)
!2822 = !DILocalVariable(name: "c", scope: !2802, file: !2, line: 633, type: !2823, align: 4)
!2823 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 8, baseType: !1675, align: 4)
!2824 = !DILocation(line: 633, column: 9, scope: !2802)
!2825 = !DILocation(line: 22, column: 11, scope: !2826, inlinedAt: !2829)
!2826 = distinct !DILexicalBlock(scope: !2828, file: !2827, line: 26, column: 1)
!2827 = !DIFile(filename: "types.c3", directory: "/opt/homebrew/lib/c3/std/core")
!2828 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2827, file: !2827, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!2829 = !DILocation(line: 633, column: 13, scope: !2802)
!2830 = !DILocation(line: 23, column: 11, scope: !2826, inlinedAt: !2829)
!2831 = !DILocalVariable(name: "any_type", scope: !2828, file: !2, line: 27, type: !93, align: 8)
!2832 = !DILocation(line: 27, column: 9, scope: !2828, inlinedAt: !2829)
!2833 = !DILocation(line: 27, column: 20, scope: !2828, inlinedAt: !2829)
!2834 = !DILocalVariable(name: "kind", scope: !2828, file: !2, line: 28, type: !57, align: 1)
!2835 = !DILocation(line: 28, column: 11, scope: !2828, inlinedAt: !2829)
!2836 = !DILocation(line: 28, column: 18, scope: !2828, inlinedAt: !2829)
!2837 = !DILocalVariable(name: "is_mixed_signed", scope: !2828, file: !2, line: 29, type: !432, align: 1)
!2838 = !DILocation(line: 29, column: 7, scope: !2828, inlinedAt: !2829)
!2839 = !DILocation(line: 29, column: 41, scope: !2828, inlinedAt: !2829)
!2840 = !DILocation(line: 29, column: 25, scope: !2828, inlinedAt: !2829)
!2841 = !DILocalVariable(name: "max", scope: !2828, file: !2, line: 30, type: !1675, align: 4)
!2842 = !DILocation(line: 30, column: 8, scope: !2828, inlinedAt: !2829)
!2843 = !DILocation(line: 30, column: 14, scope: !2828, inlinedAt: !2829)
!2844 = !DILocalVariable(name: "min", scope: !2828, file: !2, line: 31, type: !1675, align: 4)
!2845 = !DILocation(line: 31, column: 8, scope: !2828, inlinedAt: !2829)
!2846 = !DILocation(line: 31, column: 14, scope: !2828, inlinedAt: !2829)
!2847 = !DILocation(line: 34, column: 8, scope: !2848, inlinedAt: !2829)
!2848 = distinct !DILexicalBlock(scope: !2828, file: !2827, line: 32, column: 2)
!2849 = !DILocalVariable(name: "c", scope: !2850, file: !2, line: 35, type: !2851, align: 1)
!2850 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 35, column: 4)
!2851 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!2852 = !DILocation(line: 35, column: 10, scope: !2850, inlinedAt: !2829)
!2853 = !DILocation(line: 35, column: 22, scope: !2850, inlinedAt: !2829)
!2854 = !DILocation(line: 35, column: 16, scope: !2850, inlinedAt: !2829)
!2855 = !DILocation(line: 36, column: 8, scope: !2850, inlinedAt: !2829)
!2856 = !DILocation(line: 36, column: 27, scope: !2850, inlinedAt: !2829)
!2857 = !DILocation(line: 36, column: 41, scope: !2850, inlinedAt: !2829)
!2858 = !DILocation(line: 37, column: 12, scope: !2850, inlinedAt: !2829)
!2859 = !DILocation(line: 38, column: 8, scope: !2848, inlinedAt: !2829)
!2860 = !DILocalVariable(name: "s", scope: !2861, file: !2, line: 39, type: !2862, align: 2)
!2861 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 39, column: 4)
!2862 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2863 = !DILocation(line: 39, column: 10, scope: !2861, inlinedAt: !2829)
!2864 = !DILocation(line: 39, column: 23, scope: !2861, inlinedAt: !2829)
!2865 = !DILocation(line: 39, column: 16, scope: !2861, inlinedAt: !2829)
!2866 = !DILocation(line: 40, column: 8, scope: !2861, inlinedAt: !2829)
!2867 = !DILocation(line: 40, column: 27, scope: !2861, inlinedAt: !2829)
!2868 = !DILocation(line: 40, column: 41, scope: !2861, inlinedAt: !2829)
!2869 = !DILocation(line: 41, column: 8, scope: !2861, inlinedAt: !2829)
!2870 = !DILocation(line: 41, column: 12, scope: !2861, inlinedAt: !2829)
!2871 = !DILocation(line: 41, column: 19, scope: !2861, inlinedAt: !2829)
!2872 = !DILocation(line: 41, column: 23, scope: !2861, inlinedAt: !2829)
!2873 = !DILocation(line: 41, column: 35, scope: !2861, inlinedAt: !2829)
!2874 = !DILocation(line: 42, column: 12, scope: !2861, inlinedAt: !2829)
!2875 = !DILocation(line: 43, column: 8, scope: !2848, inlinedAt: !2829)
!2876 = !DILocalVariable(name: "i", scope: !2877, file: !2, line: 44, type: !11, align: 4)
!2877 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 44, column: 4)
!2878 = !DILocation(line: 44, column: 8, scope: !2877, inlinedAt: !2829)
!2879 = !DILocation(line: 44, column: 19, scope: !2877, inlinedAt: !2829)
!2880 = !DILocation(line: 44, column: 14, scope: !2877, inlinedAt: !2829)
!2881 = !DILocation(line: 45, column: 8, scope: !2877, inlinedAt: !2829)
!2882 = !DILocation(line: 45, column: 27, scope: !2877, inlinedAt: !2829)
!2883 = !DILocation(line: 45, column: 41, scope: !2877, inlinedAt: !2829)
!2884 = !DILocation(line: 46, column: 8, scope: !2877, inlinedAt: !2829)
!2885 = !DILocation(line: 46, column: 12, scope: !2877, inlinedAt: !2829)
!2886 = !DILocation(line: 46, column: 19, scope: !2877, inlinedAt: !2829)
!2887 = !DILocation(line: 46, column: 23, scope: !2877, inlinedAt: !2829)
!2888 = !DILocation(line: 46, column: 35, scope: !2877, inlinedAt: !2829)
!2889 = !DILocation(line: 47, column: 12, scope: !2877, inlinedAt: !2829)
!2890 = !DILocation(line: 48, column: 8, scope: !2848, inlinedAt: !2829)
!2891 = !DILocalVariable(name: "l", scope: !2892, file: !2, line: 49, type: !113, align: 8)
!2892 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 49, column: 4)
!2893 = !DILocation(line: 49, column: 9, scope: !2892, inlinedAt: !2829)
!2894 = !DILocation(line: 49, column: 21, scope: !2892, inlinedAt: !2829)
!2895 = !DILocation(line: 49, column: 15, scope: !2892, inlinedAt: !2829)
!2896 = !DILocation(line: 50, column: 8, scope: !2892, inlinedAt: !2829)
!2897 = !DILocation(line: 50, column: 27, scope: !2892, inlinedAt: !2829)
!2898 = !DILocation(line: 50, column: 41, scope: !2892, inlinedAt: !2829)
!2899 = !DILocation(line: 51, column: 8, scope: !2892, inlinedAt: !2829)
!2900 = !DILocation(line: 51, column: 12, scope: !2892, inlinedAt: !2829)
!2901 = !DILocation(line: 51, column: 19, scope: !2892, inlinedAt: !2829)
!2902 = !DILocation(line: 51, column: 23, scope: !2892, inlinedAt: !2829)
!2903 = !DILocation(line: 51, column: 35, scope: !2892, inlinedAt: !2829)
!2904 = !DILocation(line: 52, column: 12, scope: !2892, inlinedAt: !2829)
!2905 = !DILocation(line: 53, column: 8, scope: !2848, inlinedAt: !2829)
!2906 = !DILocalVariable(name: "i", scope: !2907, file: !2, line: 54, type: !2908, align: 16)
!2907 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 54, column: 4)
!2908 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!2909 = !DILocation(line: 54, column: 11, scope: !2907, inlinedAt: !2829)
!2910 = !DILocation(line: 54, column: 25, scope: !2907, inlinedAt: !2829)
!2911 = !DILocation(line: 54, column: 17, scope: !2907, inlinedAt: !2829)
!2912 = !DILocation(line: 55, column: 8, scope: !2907, inlinedAt: !2829)
!2913 = !DILocation(line: 55, column: 27, scope: !2907, inlinedAt: !2829)
!2914 = !DILocation(line: 55, column: 41, scope: !2907, inlinedAt: !2829)
!2915 = !DILocation(line: 56, column: 8, scope: !2907, inlinedAt: !2829)
!2916 = !DILocation(line: 56, column: 12, scope: !2907, inlinedAt: !2829)
!2917 = !DILocation(line: 56, column: 19, scope: !2907, inlinedAt: !2829)
!2918 = !DILocation(line: 56, column: 23, scope: !2907, inlinedAt: !2829)
!2919 = !DILocation(line: 56, column: 35, scope: !2907, inlinedAt: !2829)
!2920 = !DILocation(line: 57, column: 12, scope: !2907, inlinedAt: !2829)
!2921 = !DILocation(line: 58, column: 8, scope: !2848, inlinedAt: !2829)
!2922 = !DILocalVariable(name: "c", scope: !2923, file: !2, line: 59, type: !4, align: 1)
!2923 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 59, column: 4)
!2924 = !DILocation(line: 59, column: 9, scope: !2923, inlinedAt: !2829)
!2925 = !DILocation(line: 59, column: 21, scope: !2923, inlinedAt: !2829)
!2926 = !DILocation(line: 59, column: 15, scope: !2923, inlinedAt: !2829)
!2927 = !DILocation(line: 60, column: 8, scope: !2923, inlinedAt: !2829)
!2928 = !DILocation(line: 60, column: 12, scope: !2923, inlinedAt: !2829)
!2929 = !DILocation(line: 60, column: 24, scope: !2923, inlinedAt: !2829)
!2930 = !DILocation(line: 61, column: 12, scope: !2923, inlinedAt: !2829)
!2931 = !DILocation(line: 62, column: 8, scope: !2848, inlinedAt: !2829)
!2932 = !DILocalVariable(name: "s", scope: !2933, file: !2, line: 63, type: !2934, align: 2)
!2933 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 63, column: 4)
!2934 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!2935 = !DILocation(line: 63, column: 11, scope: !2933, inlinedAt: !2829)
!2936 = !DILocation(line: 63, column: 25, scope: !2933, inlinedAt: !2829)
!2937 = !DILocation(line: 63, column: 17, scope: !2933, inlinedAt: !2829)
!2938 = !DILocation(line: 64, column: 8, scope: !2933, inlinedAt: !2829)
!2939 = !DILocation(line: 64, column: 12, scope: !2933, inlinedAt: !2829)
!2940 = !DILocation(line: 64, column: 19, scope: !2933, inlinedAt: !2829)
!2941 = !DILocation(line: 64, column: 23, scope: !2933, inlinedAt: !2829)
!2942 = !DILocation(line: 64, column: 35, scope: !2933, inlinedAt: !2829)
!2943 = !DILocation(line: 65, column: 12, scope: !2933, inlinedAt: !2829)
!2944 = !DILocation(line: 66, column: 8, scope: !2848, inlinedAt: !2829)
!2945 = !DILocalVariable(name: "i", scope: !2946, file: !2, line: 67, type: !1675, align: 4)
!2946 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 67, column: 4)
!2947 = !DILocation(line: 67, column: 9, scope: !2946, inlinedAt: !2829)
!2948 = !DILocation(line: 67, column: 21, scope: !2946, inlinedAt: !2829)
!2949 = !DILocation(line: 67, column: 15, scope: !2946, inlinedAt: !2829)
!2950 = !DILocation(line: 68, column: 8, scope: !2946, inlinedAt: !2829)
!2951 = !DILocation(line: 68, column: 12, scope: !2946, inlinedAt: !2829)
!2952 = !DILocation(line: 68, column: 19, scope: !2946, inlinedAt: !2829)
!2953 = !DILocation(line: 68, column: 23, scope: !2946, inlinedAt: !2829)
!2954 = !DILocation(line: 68, column: 35, scope: !2946, inlinedAt: !2829)
!2955 = !DILocation(line: 69, column: 12, scope: !2946, inlinedAt: !2829)
!2956 = !DILocation(line: 70, column: 8, scope: !2848, inlinedAt: !2829)
!2957 = !DILocalVariable(name: "l", scope: !2958, file: !2, line: 71, type: !96, align: 8)
!2958 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 71, column: 4)
!2959 = !DILocation(line: 71, column: 10, scope: !2958, inlinedAt: !2829)
!2960 = !DILocation(line: 71, column: 23, scope: !2958, inlinedAt: !2829)
!2961 = !DILocation(line: 71, column: 16, scope: !2958, inlinedAt: !2829)
!2962 = !DILocation(line: 72, column: 8, scope: !2958, inlinedAt: !2829)
!2963 = !DILocation(line: 72, column: 12, scope: !2958, inlinedAt: !2829)
!2964 = !DILocation(line: 72, column: 19, scope: !2958, inlinedAt: !2829)
!2965 = !DILocation(line: 72, column: 23, scope: !2958, inlinedAt: !2829)
!2966 = !DILocation(line: 72, column: 35, scope: !2958, inlinedAt: !2829)
!2967 = !DILocation(line: 73, column: 12, scope: !2958, inlinedAt: !2829)
!2968 = !DILocation(line: 74, column: 8, scope: !2848, inlinedAt: !2829)
!2969 = !DILocalVariable(name: "i", scope: !2970, file: !2, line: 75, type: !2618, align: 16)
!2970 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 75, column: 4)
!2971 = !DILocation(line: 75, column: 12, scope: !2970, inlinedAt: !2829)
!2972 = !DILocation(line: 75, column: 27, scope: !2970, inlinedAt: !2829)
!2973 = !DILocation(line: 75, column: 18, scope: !2970, inlinedAt: !2829)
!2974 = !DILocation(line: 76, column: 8, scope: !2970, inlinedAt: !2829)
!2975 = !DILocation(line: 76, column: 12, scope: !2970, inlinedAt: !2829)
!2976 = !DILocation(line: 76, column: 19, scope: !2970, inlinedAt: !2829)
!2977 = !DILocation(line: 76, column: 23, scope: !2970, inlinedAt: !2829)
!2978 = !DILocation(line: 76, column: 35, scope: !2970, inlinedAt: !2829)
!2979 = !DILocation(line: 77, column: 12, scope: !2970, inlinedAt: !2829)
!2980 = !DILocation(line: 165, column: 33, scope: !2981, inlinedAt: !2982)
!2981 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!2982 = !DILocation(line: 79, column: 4, scope: !2983, inlinedAt: !2829)
!2983 = distinct !DILexicalBlock(scope: !2848, file: !2827, line: 79, column: 4)
!2984 = !DILocation(line: 165, column: 2, scope: !2981, inlinedAt: !2982)
!2985 = !DILocation(line: 167, column: 2, scope: !2981, inlinedAt: !2982)
!2986 = !DILocation(line: 633, column: 45, scope: !2802)
!2987 = !DILocation(line: 636, column: 8, scope: !2988)
!2988 = distinct !DILexicalBlock(scope: !2802, file: !2, line: 634, column: 2)
!2989 = !DILocation(line: 637, column: 14, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2988, file: !2, line: 637, column: 4)
!2991 = !DILocation(line: 637, column: 4, scope: !2990)
!2992 = !DILocation(line: 638, column: 8, scope: !2988)
!2993 = !DILocation(line: 639, column: 27, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2988, file: !2, line: 639, column: 4)
!2995 = !DILocation(line: 639, column: 14, scope: !2994)
!2996 = !DILocation(line: 639, column: 4, scope: !2994)
!2997 = !DILocation(line: 640, column: 28, scope: !2994)
!2998 = !DILocation(line: 640, column: 14, scope: !2994)
!2999 = !DILocation(line: 640, column: 4, scope: !2994)
!3000 = !DILocation(line: 641, column: 8, scope: !2988)
!3001 = !DILocation(line: 642, column: 27, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2988, file: !2, line: 642, column: 4)
!3003 = !DILocation(line: 642, column: 14, scope: !3002)
!3004 = !DILocation(line: 642, column: 4, scope: !3002)
!3005 = !DILocation(line: 643, column: 28, scope: !3002)
!3006 = !DILocation(line: 643, column: 14, scope: !3002)
!3007 = !DILocation(line: 643, column: 4, scope: !3002)
!3008 = !DILocation(line: 644, column: 28, scope: !3002)
!3009 = !DILocation(line: 644, column: 14, scope: !3002)
!3010 = !DILocation(line: 644, column: 4, scope: !3002)
!3011 = !DILocation(line: 646, column: 27, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !2988, file: !2, line: 646, column: 4)
!3013 = !DILocation(line: 646, column: 14, scope: !3012)
!3014 = !DILocation(line: 646, column: 4, scope: !3012)
!3015 = !DILocation(line: 647, column: 28, scope: !3012)
!3016 = !DILocation(line: 647, column: 14, scope: !3012)
!3017 = !DILocation(line: 647, column: 4, scope: !3012)
!3018 = !DILocation(line: 648, column: 28, scope: !3012)
!3019 = !DILocation(line: 648, column: 14, scope: !3012)
!3020 = !DILocation(line: 648, column: 4, scope: !3012)
!3021 = !DILocation(line: 649, column: 28, scope: !3012)
!3022 = !DILocation(line: 649, column: 14, scope: !3012)
!3023 = !DILocation(line: 649, column: 4, scope: !3012)
!3024 = !DILocation(line: 651, column: 2, scope: !2802)
!3025 = !DILocation(line: 651, column: 21, scope: !2802)
!3026 = !DILocation(line: 651, column: 9, scope: !2802)
!3027 = !DILocation(line: 652, column: 9, scope: !2802)
!3028 = distinct !DISubprogram(name: "out_reverse", linkageName: "std.io.Formatter.out_reverse", scope: !2, file: !2, line: 656, type: !1767, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3029 = !DILocation(line: 657, column: 1, scope: !3028)
!3030 = !DILocalVariable(name: "self", arg: 1, scope: !3028, file: !2, line: 656, type: !1662)
!3031 = !DILocation(line: 656, column: 31, scope: !3028)
!3032 = !DILocalVariable(name: "buf", arg: 2, scope: !3028, file: !2, line: 656, type: !123)
!3033 = !DILocation(line: 656, column: 45, scope: !3028)
!3034 = !DILocalVariable(name: "n", scope: !3028, file: !2, line: 658, type: !95, align: 8)
!3035 = !DILocation(line: 658, column: 6, scope: !3028)
!3036 = !DILocalVariable(name: "buffer_start_idx", scope: !3028, file: !2, line: 659, type: !95, align: 8)
!3037 = !DILocation(line: 659, column: 6, scope: !3028)
!3038 = !DILocation(line: 659, column: 25, scope: !3028)
!3039 = !DILocalVariable(name: "len", scope: !3028, file: !2, line: 660, type: !95, align: 8)
!3040 = !DILocation(line: 660, column: 6, scope: !3028)
!3041 = !DILocation(line: 660, column: 12, scope: !3028)
!3042 = !DILocation(line: 662, column: 7, scope: !3028)
!3043 = !DILocation(line: 662, column: 30, scope: !3028)
!3044 = !DILocation(line: 664, column: 3, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3028, file: !2, line: 663, column: 2)
!3046 = !DILocation(line: 664, column: 22, scope: !3045)
!3047 = !DILocation(line: 664, column: 34, scope: !3045)
!3048 = !DILocation(line: 664, column: 8, scope: !3045)
!3049 = !DILocation(line: 667, column: 2, scope: !3028)
!3050 = !DILocation(line: 667, column: 9, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3028, file: !2, line: 667, column: 2)
!3052 = !DILocation(line: 667, column: 14, scope: !3051)
!3053 = !DILocation(line: 667, column: 28, scope: !3051)
!3054 = !DILocation(line: 667, column: 34, scope: !3051)
!3055 = !DILocation(line: 667, column: 32, scope: !3051)
!3056 = !DILocation(line: 667, column: 19, scope: !3051)
!3057 = !DILocation(line: 670, column: 2, scope: !3028)
!3058 = !DILocation(line: 670, column: 7, scope: !3028)
!3059 = !DILocation(line: 671, column: 9, scope: !3028)
!3060 = distinct !DISubprogram(name: "print_hex_chars", linkageName: "std.io.print_hex_chars", scope: !2, file: !2, line: 12, type: !3061, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3061 = !DISubroutineType(types: !3062)
!3062 = !{!112, !122, !1662, !123, !432}
!3063 = !DILocalVariable(name: "f", arg: 1, scope: !3060, file: !2, line: 12, type: !1662)
!3064 = !DILocation(line: 12, column: 36, scope: !3060)
!3065 = !DILocalVariable(name: "out", arg: 2, scope: !3060, file: !2, line: 12, type: !123)
!3066 = !DILocation(line: 12, column: 46, scope: !3060)
!3067 = !DILocalVariable(name: "uppercase", arg: 3, scope: !3060, file: !2, line: 12, type: !432)
!3068 = !DILocation(line: 12, column: 56, scope: !3060)
!3069 = !DILocalVariable(name: "past_10", scope: !3060, file: !2, line: 14, type: !4, align: 1)
!3070 = !DILocation(line: 14, column: 7, scope: !3060)
!3071 = !DILocation(line: 14, column: 18, scope: !3060)
!3072 = !DILocation(line: 14, column: 36, scope: !3060)
!3073 = !DILocalVariable(name: "len", scope: !3060, file: !2, line: 15, type: !95, align: 8)
!3074 = !DILocation(line: 15, column: 6, scope: !3060)
!3075 = !DILocation(line: 15, column: 12, scope: !3060)
!3076 = !DILocation(line: 16, column: 15, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3060, file: !2, line: 16, column: 2)
!3078 = !DILocalVariable(name: ".temp", scope: !3077, file: !2, line: 16, type: !95, align: 8)
!3079 = !DILocalVariable(name: "c", scope: !3080, file: !2, line: 16, type: !4, align: 1)
!3080 = distinct !DILexicalBlock(scope: !3077, file: !2, line: 17, column: 2)
!3081 = !DILocation(line: 16, column: 11, scope: !3080)
!3082 = !DILocation(line: 16, column: 15, scope: !3080)
!3083 = !DILocalVariable(name: "digit", scope: !3084, file: !2, line: 18, type: !4, align: 1)
!3084 = distinct !DILexicalBlock(scope: !3080, file: !2, line: 17, column: 2)
!3085 = !DILocation(line: 18, column: 8, scope: !3084)
!3086 = !DILocation(line: 18, column: 16, scope: !3084)
!3087 = !DILocation(line: 19, column: 9, scope: !3084)
!3088 = !DILocation(line: 19, column: 18, scope: !3084)
!3089 = !DILocation(line: 19, column: 31, scope: !3084)
!3090 = !DILocation(line: 19, column: 37, scope: !3084)
!3091 = !DILocation(line: 19, column: 3, scope: !3084)
!3092 = !DILocation(line: 20, column: 3, scope: !3084)
!3093 = !DILocation(line: 21, column: 11, scope: !3084)
!3094 = !DILocation(line: 22, column: 9, scope: !3084)
!3095 = !DILocation(line: 22, column: 18, scope: !3084)
!3096 = !DILocation(line: 22, column: 31, scope: !3084)
!3097 = !DILocation(line: 22, column: 37, scope: !3084)
!3098 = !DILocation(line: 22, column: 3, scope: !3084)
!3099 = !DILocation(line: 23, column: 3, scope: !3084)
!3100 = !DILocation(line: 25, column: 9, scope: !3060)
!3101 = distinct !DISubprogram(name: "int_from_any", linkageName: "std.io.int_from_any", scope: !2, file: !2, line: 41, type: !3102, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3102 = !DISubroutineType(types: !3103)
!3103 = !{!112, !3104, !2787, !3105}
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !2618, size: 64, align: 64, dwarfAddressSpace: 0)
!3105 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "bool*", baseType: !432, size: 64, align: 64, dwarfAddressSpace: 0)
!3106 = !DILocalVariable(name: "arg", arg: 1, scope: !3101, file: !2, line: 41, type: !2787)
!3107 = !DILocation(line: 41, column: 30, scope: !3101)
!3108 = !DILocalVariable(name: "is_neg", arg: 2, scope: !3101, file: !2, line: 41, type: !3105)
!3109 = !DILocation(line: 41, column: 41, scope: !3101)
!3110 = !DILocation(line: 43, column: 10, scope: !3111)
!3111 = distinct !DILexicalBlock(scope: !3101, file: !2, line: 43, column: 2)
!3112 = !DILocation(line: 46, column: 5, scope: !3113)
!3113 = distinct !DILexicalBlock(scope: !3111, file: !2, line: 46, column: 4)
!3114 = !DILocation(line: 46, column: 14, scope: !3113)
!3115 = !DILocation(line: 47, column: 35, scope: !3113)
!3116 = !DILocation(line: 47, column: 28, scope: !3113)
!3117 = !DILocation(line: 200, column: 20, scope: !3118, inlinedAt: !3119)
!3118 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !1830, file: !1830, line: 198, scopeLine: 198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3119 = !DILocation(line: 50, column: 24, scope: !3120)
!3120 = distinct !DILexicalBlock(scope: !3111, file: !2, line: 50, column: 4)
!3121 = !DILocation(line: 200, column: 30, scope: !3118, inlinedAt: !3119)
!3122 = !DILocation(line: 50, column: 11, scope: !3120)
!3123 = !DILocation(line: 52, column: 4, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3111, file: !2, line: 52, column: 4)
!3125 = !DILocation(line: 54, column: 3, scope: !3101)
!3126 = !DILocation(line: 54, column: 12, scope: !3101)
!3127 = !DILocation(line: 55, column: 10, scope: !3128)
!3128 = distinct !DILexicalBlock(scope: !3101, file: !2, line: 55, column: 2)
!3129 = !DILocation(line: 57, column: 8, scope: !3128)
!3130 = !DILocalVariable(name: "arg", scope: !3131, file: !2, line: 41, type: !3105, align: 8)
!3131 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 58, column: 4)
!3132 = !DILocation(line: 41, column: 30, scope: !3131)
!3133 = !DILocation(line: 58, column: 21, scope: !3131)
!3134 = !DILocation(line: 59, column: 8, scope: !3128)
!3135 = !DILocalVariable(name: "arg", scope: !3136, file: !2, line: 41, type: !3137, align: 8)
!3136 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 60, column: 4)
!3137 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !2851, size: 64, align: 64, dwarfAddressSpace: 0)
!3138 = !DILocation(line: 41, column: 30, scope: !3136)
!3139 = !DILocalVariable(name: "val", scope: !3136, file: !2, line: 60, type: !11, align: 4)
!3140 = !DILocation(line: 60, column: 8, scope: !3136)
!3141 = !DILocation(line: 60, column: 15, scope: !3136)
!3142 = !DILocation(line: 61, column: 13, scope: !3136)
!3143 = !DILocation(line: 61, column: 22, scope: !3136)
!3144 = !DILocation(line: 61, column: 36, scope: !3136)
!3145 = !DILocation(line: 61, column: 34, scope: !3136)
!3146 = !DILocation(line: 61, column: 56, scope: !3136)
!3147 = !DILocation(line: 62, column: 8, scope: !3128)
!3148 = !DILocalVariable(name: "arg", scope: !3149, file: !2, line: 41, type: !3150, align: 8)
!3149 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 63, column: 4)
!3150 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !2862, size: 64, align: 64, dwarfAddressSpace: 0)
!3151 = !DILocation(line: 41, column: 30, scope: !3149)
!3152 = !DILocalVariable(name: "val", scope: !3149, file: !2, line: 63, type: !11, align: 4)
!3153 = !DILocation(line: 63, column: 8, scope: !3149)
!3154 = !DILocation(line: 63, column: 15, scope: !3149)
!3155 = !DILocation(line: 64, column: 13, scope: !3149)
!3156 = !DILocation(line: 64, column: 22, scope: !3149)
!3157 = !DILocation(line: 64, column: 36, scope: !3149)
!3158 = !DILocation(line: 64, column: 34, scope: !3149)
!3159 = !DILocation(line: 64, column: 56, scope: !3149)
!3160 = !DILocation(line: 65, column: 8, scope: !3128)
!3161 = !DILocalVariable(name: "arg", scope: !3162, file: !2, line: 41, type: !3163, align: 8)
!3162 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 66, column: 4)
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !11, size: 64, align: 64, dwarfAddressSpace: 0)
!3164 = !DILocation(line: 41, column: 30, scope: !3162)
!3165 = !DILocalVariable(name: "val", scope: !3162, file: !2, line: 66, type: !11, align: 4)
!3166 = !DILocation(line: 66, column: 8, scope: !3162)
!3167 = !DILocation(line: 66, column: 15, scope: !3162)
!3168 = !DILocation(line: 67, column: 13, scope: !3162)
!3169 = !DILocation(line: 67, column: 22, scope: !3162)
!3170 = !DILocation(line: 67, column: 36, scope: !3162)
!3171 = !DILocation(line: 67, column: 34, scope: !3162)
!3172 = !DILocation(line: 67, column: 56, scope: !3162)
!3173 = !DILocation(line: 68, column: 8, scope: !3128)
!3174 = !DILocalVariable(name: "arg", scope: !3175, file: !2, line: 41, type: !3176, align: 8)
!3175 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 69, column: 4)
!3176 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !113, size: 64, align: 64, dwarfAddressSpace: 0)
!3177 = !DILocation(line: 41, column: 30, scope: !3175)
!3178 = !DILocalVariable(name: "val", scope: !3175, file: !2, line: 69, type: !113, align: 8)
!3179 = !DILocation(line: 69, column: 9, scope: !3175)
!3180 = !DILocation(line: 69, column: 16, scope: !3175)
!3181 = !DILocation(line: 70, column: 13, scope: !3175)
!3182 = !DILocation(line: 70, column: 22, scope: !3175)
!3183 = !DILocation(line: 70, column: 36, scope: !3175)
!3184 = !DILocation(line: 70, column: 34, scope: !3175)
!3185 = !DILocation(line: 70, column: 56, scope: !3175)
!3186 = !DILocation(line: 71, column: 8, scope: !3128)
!3187 = !DILocalVariable(name: "arg", scope: !3188, file: !2, line: 41, type: !3189, align: 8)
!3188 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 72, column: 4)
!3189 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !2908, size: 64, align: 64, dwarfAddressSpace: 0)
!3190 = !DILocation(line: 41, column: 30, scope: !3188)
!3191 = !DILocalVariable(name: "val", scope: !3188, file: !2, line: 72, type: !2908, align: 16)
!3192 = !DILocation(line: 72, column: 11, scope: !3188)
!3193 = !DILocation(line: 72, column: 18, scope: !3188)
!3194 = !DILocation(line: 73, column: 13, scope: !3188)
!3195 = !DILocation(line: 73, column: 22, scope: !3188)
!3196 = !DILocation(line: 73, column: 36, scope: !3188)
!3197 = !DILocation(line: 73, column: 34, scope: !3188)
!3198 = !DILocation(line: 73, column: 56, scope: !3188)
!3199 = !DILocation(line: 74, column: 8, scope: !3128)
!3200 = !DILocalVariable(name: "arg", scope: !3201, file: !2, line: 41, type: !126, align: 8)
!3201 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 75, column: 4)
!3202 = !DILocation(line: 41, column: 30, scope: !3201)
!3203 = !DILocation(line: 75, column: 12, scope: !3201)
!3204 = !DILocation(line: 76, column: 8, scope: !3128)
!3205 = !DILocalVariable(name: "arg", scope: !3206, file: !2, line: 41, type: !3207, align: 8)
!3206 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 77, column: 4)
!3207 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !2934, size: 64, align: 64, dwarfAddressSpace: 0)
!3208 = !DILocation(line: 41, column: 30, scope: !3206)
!3209 = !DILocation(line: 77, column: 12, scope: !3206)
!3210 = !DILocation(line: 78, column: 8, scope: !3128)
!3211 = !DILocalVariable(name: "arg", scope: !3212, file: !2, line: 41, type: !2063, align: 8)
!3212 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 79, column: 4)
!3213 = !DILocation(line: 41, column: 30, scope: !3212)
!3214 = !DILocation(line: 79, column: 12, scope: !3212)
!3215 = !DILocation(line: 80, column: 8, scope: !3128)
!3216 = !DILocalVariable(name: "arg", scope: !3217, file: !2, line: 41, type: !3218, align: 8)
!3217 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 81, column: 4)
!3218 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !96, size: 64, align: 64, dwarfAddressSpace: 0)
!3219 = !DILocation(line: 41, column: 30, scope: !3217)
!3220 = !DILocation(line: 81, column: 12, scope: !3217)
!3221 = !DILocation(line: 82, column: 8, scope: !3128)
!3222 = !DILocalVariable(name: "arg", scope: !3223, file: !2, line: 41, type: !3104, align: 8)
!3223 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 83, column: 4)
!3224 = !DILocation(line: 41, column: 30, scope: !3223)
!3225 = !DILocation(line: 83, column: 12, scope: !3223)
!3226 = !DILocation(line: 84, column: 8, scope: !3128)
!3227 = !DILocalVariable(name: "arg", scope: !3228, file: !2, line: 41, type: !3229, align: 8)
!3228 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 85, column: 4)
!3229 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3230, size: 64, align: 64, dwarfAddressSpace: 0)
!3230 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3231 = !DILocation(line: 41, column: 30, scope: !3228)
!3232 = !DILocalVariable(name: "f", scope: !3228, file: !2, line: 85, type: !3230, align: 4)
!3233 = !DILocation(line: 85, column: 10, scope: !3228)
!3234 = !DILocation(line: 85, column: 15, scope: !3228)
!3235 = !DILocation(line: 86, column: 23, scope: !3228)
!3236 = !DILocation(line: 86, column: 32, scope: !3228)
!3237 = !DILocation(line: 86, column: 42, scope: !3228)
!3238 = !DILocation(line: 86, column: 46, scope: !3228)
!3239 = !DILocation(line: 87, column: 8, scope: !3128)
!3240 = !DILocalVariable(name: "arg", scope: !3241, file: !2, line: 41, type: !3242, align: 8)
!3241 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 88, column: 4)
!3242 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !1786, size: 64, align: 64, dwarfAddressSpace: 0)
!3243 = !DILocation(line: 41, column: 30, scope: !3241)
!3244 = !DILocalVariable(name: "d", scope: !3241, file: !2, line: 88, type: !1786, align: 8)
!3245 = !DILocation(line: 88, column: 11, scope: !3241)
!3246 = !DILocation(line: 88, column: 16, scope: !3241)
!3247 = !DILocation(line: 89, column: 23, scope: !3241)
!3248 = !DILocation(line: 89, column: 32, scope: !3241)
!3249 = !DILocation(line: 89, column: 42, scope: !3241)
!3250 = !DILocation(line: 89, column: 46, scope: !3241)
!3251 = !DILocation(line: 91, column: 11, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3128, file: !2, line: 91, column: 4)
!3253 = distinct !DISubprogram(name: "float_from_any", linkageName: "std.io.float_from_any", scope: !2, file: !2, line: 95, type: !3254, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3254 = !DISubroutineType(types: !3255)
!3255 = !{!112, !3256, !2787}
!3256 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "FloatType*", baseType: !3257, size: 64, align: 64, dwarfAddressSpace: 0)
!3257 = !DIDerivedType(tag: DW_TAG_typedef, name: "FloatType", scope: !2, file: !2, line: 24, baseType: !1786, align: 8)
!3258 = !DILocalVariable(name: "arg", arg: 1, scope: !3253, file: !2, line: 95, type: !2787)
!3259 = !DILocation(line: 95, column: 34, scope: !3253)
!3260 = !DILocation(line: 100, column: 6, scope: !3253)
!3261 = !DILocation(line: 200, column: 20, scope: !3262, inlinedAt: !3263)
!3262 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !1830, file: !1830, line: 198, scopeLine: 198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3263 = !DILocation(line: 102, column: 25, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3253, file: !2, line: 101, column: 2)
!3265 = !DILocation(line: 200, column: 30, scope: !3262, inlinedAt: !3263)
!3266 = !DILocation(line: 102, column: 10, scope: !3264)
!3267 = !DILocation(line: 104, column: 10, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3253, file: !2, line: 104, column: 2)
!3269 = !DILocation(line: 106, column: 8, scope: !3268)
!3270 = !DILocalVariable(name: "arg", scope: !3271, file: !2, line: 95, type: !3105, align: 8)
!3271 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 107, column: 4)
!3272 = !DILocation(line: 95, column: 34, scope: !3271)
!3273 = !DILocation(line: 107, column: 23, scope: !3271)
!3274 = !DILocation(line: 108, column: 8, scope: !3268)
!3275 = !DILocalVariable(name: "arg", scope: !3276, file: !2, line: 95, type: !3137, align: 8)
!3276 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 109, column: 4)
!3277 = !DILocation(line: 95, column: 34, scope: !3276)
!3278 = !DILocation(line: 109, column: 12, scope: !3276)
!3279 = !DILocation(line: 110, column: 8, scope: !3268)
!3280 = !DILocalVariable(name: "arg", scope: !3281, file: !2, line: 95, type: !3150, align: 8)
!3281 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 111, column: 4)
!3282 = !DILocation(line: 95, column: 34, scope: !3281)
!3283 = !DILocation(line: 111, column: 12, scope: !3281)
!3284 = !DILocation(line: 112, column: 8, scope: !3268)
!3285 = !DILocalVariable(name: "arg", scope: !3286, file: !2, line: 95, type: !3163, align: 8)
!3286 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 113, column: 4)
!3287 = !DILocation(line: 95, column: 34, scope: !3286)
!3288 = !DILocation(line: 113, column: 12, scope: !3286)
!3289 = !DILocation(line: 114, column: 8, scope: !3268)
!3290 = !DILocalVariable(name: "arg", scope: !3291, file: !2, line: 95, type: !3176, align: 8)
!3291 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 115, column: 4)
!3292 = !DILocation(line: 95, column: 34, scope: !3291)
!3293 = !DILocation(line: 115, column: 12, scope: !3291)
!3294 = !DILocation(line: 116, column: 8, scope: !3268)
!3295 = !DILocalVariable(name: "arg", scope: !3296, file: !2, line: 95, type: !3189, align: 8)
!3296 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 117, column: 4)
!3297 = !DILocation(line: 95, column: 34, scope: !3296)
!3298 = !DILocation(line: 117, column: 12, scope: !3296)
!3299 = !DILocation(line: 118, column: 8, scope: !3268)
!3300 = !DILocalVariable(name: "arg", scope: !3301, file: !2, line: 95, type: !126, align: 8)
!3301 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 119, column: 4)
!3302 = !DILocation(line: 95, column: 34, scope: !3301)
!3303 = !DILocation(line: 119, column: 12, scope: !3301)
!3304 = !DILocation(line: 120, column: 8, scope: !3268)
!3305 = !DILocalVariable(name: "arg", scope: !3306, file: !2, line: 95, type: !3207, align: 8)
!3306 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 121, column: 4)
!3307 = !DILocation(line: 95, column: 34, scope: !3306)
!3308 = !DILocation(line: 121, column: 12, scope: !3306)
!3309 = !DILocation(line: 122, column: 8, scope: !3268)
!3310 = !DILocalVariable(name: "arg", scope: !3311, file: !2, line: 95, type: !2063, align: 8)
!3311 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 123, column: 4)
!3312 = !DILocation(line: 95, column: 34, scope: !3311)
!3313 = !DILocation(line: 123, column: 12, scope: !3311)
!3314 = !DILocation(line: 124, column: 8, scope: !3268)
!3315 = !DILocalVariable(name: "arg", scope: !3316, file: !2, line: 95, type: !3218, align: 8)
!3316 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 125, column: 4)
!3317 = !DILocation(line: 95, column: 34, scope: !3316)
!3318 = !DILocation(line: 125, column: 12, scope: !3316)
!3319 = !DILocation(line: 126, column: 8, scope: !3268)
!3320 = !DILocalVariable(name: "arg", scope: !3321, file: !2, line: 95, type: !3104, align: 8)
!3321 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 127, column: 4)
!3322 = !DILocation(line: 95, column: 34, scope: !3321)
!3323 = !DILocation(line: 127, column: 12, scope: !3321)
!3324 = !DILocation(line: 128, column: 8, scope: !3268)
!3325 = !DILocalVariable(name: "arg", scope: !3326, file: !2, line: 95, type: !3229, align: 8)
!3326 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 129, column: 4)
!3327 = !DILocation(line: 95, column: 34, scope: !3326)
!3328 = !DILocation(line: 129, column: 23, scope: !3326)
!3329 = !DILocation(line: 130, column: 8, scope: !3268)
!3330 = !DILocalVariable(name: "arg", scope: !3331, file: !2, line: 95, type: !3242, align: 8)
!3331 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 131, column: 4)
!3332 = !DILocation(line: 95, column: 34, scope: !3331)
!3333 = !DILocation(line: 131, column: 23, scope: !3331)
!3334 = !DILocation(line: 133, column: 11, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3268, file: !2, line: 133, column: 4)
!3336 = distinct !DISubprogram(name: "simple_atoi", linkageName: "std.io.simple_atoi", scope: !2, file: !2, line: 146, type: !3337, scopeLine: 146, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3337 = !DISubroutineType(types: !3338)
!3338 = !{!1675, !126, !96, !3218}
!3339 = !DILocalVariable(name: "buf", arg: 1, scope: !3336, file: !2, line: 146, type: !126)
!3340 = !DILocation(line: 146, column: 27, scope: !3336)
!3341 = !DILocalVariable(name: "maxlen", arg: 2, scope: !3336, file: !2, line: 146, type: !95)
!3342 = !DILocation(line: 146, column: 36, scope: !3336)
!3343 = !DILocalVariable(name: "len_ptr", arg: 3, scope: !3336, file: !2, line: 146, type: !122)
!3344 = !DILocation(line: 146, column: 49, scope: !3336)
!3345 = !DILocalVariable(name: "i", scope: !3336, file: !2, line: 148, type: !1675, align: 4)
!3346 = !DILocation(line: 148, column: 7, scope: !3336)
!3347 = !DILocation(line: 148, column: 11, scope: !3336)
!3348 = !DILocalVariable(name: "len", scope: !3336, file: !2, line: 149, type: !95, align: 8)
!3349 = !DILocation(line: 149, column: 6, scope: !3336)
!3350 = !DILocation(line: 149, column: 13, scope: !3336)
!3351 = !DILocation(line: 150, column: 2, scope: !3336)
!3352 = !DILocation(line: 150, column: 9, scope: !3353)
!3353 = distinct !DILexicalBlock(scope: !3336, file: !2, line: 150, column: 2)
!3354 = !DILocation(line: 150, column: 15, scope: !3353)
!3355 = !DILocalVariable(name: "c", scope: !3356, file: !2, line: 152, type: !4, align: 1)
!3356 = distinct !DILexicalBlock(scope: !3353, file: !2, line: 151, column: 2)
!3357 = !DILocation(line: 152, column: 8, scope: !3356)
!3358 = !DILocation(line: 152, column: 12, scope: !3356)
!3359 = !DILocation(line: 152, column: 16, scope: !3356)
!3360 = !DILocation(line: 153, column: 8, scope: !3356)
!3361 = !DILocation(line: 153, column: 22, scope: !3356)
!3362 = !DILocation(line: 154, column: 7, scope: !3356)
!3363 = !DILocation(line: 154, column: 16, scope: !3356)
!3364 = !DILocation(line: 155, column: 3, scope: !3356)
!3365 = !DILocation(line: 157, column: 3, scope: !3336)
!3366 = !DILocation(line: 157, column: 13, scope: !3336)
!3367 = !DILocation(line: 158, column: 9, scope: !3336)
!3368 = distinct !DISubprogram(name: "fmt_u", linkageName: "std.io.fmt_u", scope: !2, file: !2, line: 187, type: !3369, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3369 = !DISubroutineType(types: !3370)
!3370 = !{!126, !2618, !126}
!3371 = !DILocalVariable(name: "x", arg: 1, scope: !3368, file: !2, line: 187, type: !2618)
!3372 = !DILocation(line: 187, column: 24, scope: !3368)
!3373 = !DILocalVariable(name: "s", arg: 2, scope: !3368, file: !2, line: 187, type: !126)
!3374 = !DILocation(line: 187, column: 33, scope: !3368)
!3375 = !DILocation(line: 189, column: 2, scope: !3368)
!3376 = !DILocation(line: 189, column: 9, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3368, file: !2, line: 189, column: 2)
!3378 = !DILocation(line: 189, column: 36, scope: !3377)
!3379 = !DILocation(line: 189, column: 53, scope: !3377)
!3380 = !DILocation(line: 189, column: 47, scope: !3377)
!3381 = !DILocation(line: 189, column: 40, scope: !3377)
!3382 = !DILocation(line: 189, column: 24, scope: !3377)
!3383 = !DILocalVariable(name: "y", scope: !3384, file: !2, line: 190, type: !96, align: 8)
!3384 = distinct !DILexicalBlock(scope: !3368, file: !2, line: 190, column: 2)
!3385 = !DILocation(line: 190, column: 13, scope: !3384)
!3386 = !DILocation(line: 190, column: 18, scope: !3384)
!3387 = !DILocation(line: 190, column: 27, scope: !3384)
!3388 = !DILocation(line: 190, column: 42, scope: !3384)
!3389 = !DILocation(line: 190, column: 59, scope: !3384)
!3390 = !DILocation(line: 190, column: 53, scope: !3384)
!3391 = !DILocation(line: 190, column: 46, scope: !3384)
!3392 = !DILocation(line: 190, column: 30, scope: !3384)
!3393 = !DILocation(line: 191, column: 9, scope: !3368)
!3394 = !DILocation(line: 189, column: 34, scope: !3377)
!3395 = !DILocation(line: 190, column: 40, scope: !3384)
!3396 = distinct !DISubprogram(name: "printf_parse_format_field", linkageName: "std.io.printf_parse_format_field", scope: !2, file: !2, line: 675, type: !3397, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3397 = !DISubroutineType(types: !3398)
!3398 = !{!112, !3163, !3399, !96, !3218, !126, !96, !3218}
!3399 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !2787, size: 64, align: 64, dwarfAddressSpace: 0)
!3400 = !DILocalVariable(name: "args_ptr", arg: 1, scope: !3396, file: !2, line: 676, type: !3399)
!3401 = !DILocation(line: 676, column: 7, scope: !3396)
!3402 = !DILocalVariable(name: "args_len", arg: 2, scope: !3396, file: !2, line: 676, type: !95)
!3403 = !DILocation(line: 676, column: 21, scope: !3396)
!3404 = !DILocalVariable(name: "args_index_ptr", arg: 3, scope: !3396, file: !2, line: 676, type: !122)
!3405 = !DILocation(line: 676, column: 36, scope: !3396)
!3406 = !DILocalVariable(name: "format_ptr", arg: 4, scope: !3396, file: !2, line: 677, type: !126)
!3407 = !DILocation(line: 677, column: 8, scope: !3396)
!3408 = !DILocalVariable(name: "format_len", arg: 5, scope: !3396, file: !2, line: 677, type: !95)
!3409 = !DILocation(line: 677, column: 24, scope: !3396)
!3410 = !DILocalVariable(name: "index_ptr", arg: 6, scope: !3396, file: !2, line: 677, type: !122)
!3411 = !DILocation(line: 677, column: 41, scope: !3396)
!3412 = !DILocalVariable(name: "c", scope: !3396, file: !2, line: 679, type: !4, align: 1)
!3413 = !DILocation(line: 679, column: 7, scope: !3396)
!3414 = !DILocation(line: 679, column: 11, scope: !3396)
!3415 = !DILocation(line: 679, column: 23, scope: !3396)
!3416 = !DILocation(line: 680, column: 6, scope: !3396)
!3417 = !DILocation(line: 680, column: 63, scope: !3396)
!3418 = !DILocation(line: 680, column: 27, scope: !3396)
!3419 = !DILocation(line: 681, column: 6, scope: !3396)
!3420 = !DILocation(line: 681, column: 23, scope: !3396)
!3421 = !DILocalVariable(name: "len", scope: !3396, file: !2, line: 682, type: !95, align: 8)
!3422 = !DILocation(line: 682, column: 6, scope: !3396)
!3423 = !DILocation(line: 682, column: 16, scope: !3396)
!3424 = !DILocation(line: 682, column: 15, scope: !3396)
!3425 = !DILocation(line: 683, column: 6, scope: !3396)
!3426 = !DILocation(line: 683, column: 13, scope: !3396)
!3427 = !DILocation(line: 683, column: 32, scope: !3396)
!3428 = !DILocation(line: 684, column: 7, scope: !3396)
!3429 = !DILocation(line: 684, column: 25, scope: !3396)
!3430 = !DILocation(line: 684, column: 6, scope: !3396)
!3431 = !DILocation(line: 684, column: 42, scope: !3396)
!3432 = !DILocalVariable(name: "val", scope: !3396, file: !2, line: 685, type: !2787, align: 8)
!3433 = !DILocation(line: 685, column: 6, scope: !3396)
!3434 = !DILocation(line: 685, column: 12, scope: !3396)
!3435 = !DILocation(line: 685, column: 23, scope: !3396)
!3436 = !DILocation(line: 685, column: 22, scope: !3396)
!3437 = !DILocation(line: 686, column: 7, scope: !3396)
!3438 = !DILocation(line: 686, column: 40, scope: !3396)
!3439 = !DILocalVariable(name: "intval", scope: !3396, file: !2, line: 687, type: !1675, align: 4)
!3440 = !DILocation(line: 687, column: 8, scope: !3396)
!3441 = !DILocation(line: 22, column: 11, scope: !3442, inlinedAt: !3444)
!3442 = distinct !DILexicalBlock(scope: !3443, file: !2827, line: 26, column: 1)
!3443 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2827, file: !2827, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3444 = !DILocation(line: 687, column: 17, scope: !3396)
!3445 = !DILocation(line: 23, column: 11, scope: !3442, inlinedAt: !3444)
!3446 = !DILocalVariable(name: "any_type", scope: !3443, file: !2, line: 27, type: !93, align: 8)
!3447 = !DILocation(line: 27, column: 9, scope: !3443, inlinedAt: !3444)
!3448 = !DILocation(line: 27, column: 20, scope: !3443, inlinedAt: !3444)
!3449 = !DILocalVariable(name: "kind", scope: !3443, file: !2, line: 28, type: !57, align: 1)
!3450 = !DILocation(line: 28, column: 11, scope: !3443, inlinedAt: !3444)
!3451 = !DILocation(line: 28, column: 18, scope: !3443, inlinedAt: !3444)
!3452 = !DILocalVariable(name: "is_mixed_signed", scope: !3443, file: !2, line: 29, type: !432, align: 1)
!3453 = !DILocation(line: 29, column: 7, scope: !3443, inlinedAt: !3444)
!3454 = !DILocation(line: 29, column: 41, scope: !3443, inlinedAt: !3444)
!3455 = !DILocation(line: 29, column: 25, scope: !3443, inlinedAt: !3444)
!3456 = !DILocalVariable(name: "max", scope: !3443, file: !2, line: 30, type: !11, align: 4)
!3457 = !DILocation(line: 30, column: 8, scope: !3443, inlinedAt: !3444)
!3458 = !DILocation(line: 30, column: 14, scope: !3443, inlinedAt: !3444)
!3459 = !DILocalVariable(name: "min", scope: !3443, file: !2, line: 31, type: !11, align: 4)
!3460 = !DILocation(line: 31, column: 8, scope: !3443, inlinedAt: !3444)
!3461 = !DILocation(line: 31, column: 14, scope: !3443, inlinedAt: !3444)
!3462 = !DILocation(line: 34, column: 8, scope: !3463, inlinedAt: !3444)
!3463 = distinct !DILexicalBlock(scope: !3443, file: !2827, line: 32, column: 2)
!3464 = !DILocalVariable(name: "c", scope: !3465, file: !2, line: 35, type: !2851, align: 1)
!3465 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 35, column: 4)
!3466 = !DILocation(line: 35, column: 10, scope: !3465, inlinedAt: !3444)
!3467 = !DILocation(line: 35, column: 22, scope: !3465, inlinedAt: !3444)
!3468 = !DILocation(line: 35, column: 16, scope: !3465, inlinedAt: !3444)
!3469 = !DILocation(line: 36, column: 8, scope: !3465, inlinedAt: !3444)
!3470 = !DILocation(line: 36, column: 27, scope: !3465, inlinedAt: !3444)
!3471 = !DILocation(line: 36, column: 41, scope: !3465, inlinedAt: !3444)
!3472 = !DILocation(line: 37, column: 12, scope: !3465, inlinedAt: !3444)
!3473 = !DILocation(line: 38, column: 8, scope: !3463, inlinedAt: !3444)
!3474 = !DILocalVariable(name: "s", scope: !3475, file: !2, line: 39, type: !2862, align: 2)
!3475 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 39, column: 4)
!3476 = !DILocation(line: 39, column: 10, scope: !3475, inlinedAt: !3444)
!3477 = !DILocation(line: 39, column: 23, scope: !3475, inlinedAt: !3444)
!3478 = !DILocation(line: 39, column: 16, scope: !3475, inlinedAt: !3444)
!3479 = !DILocation(line: 40, column: 8, scope: !3475, inlinedAt: !3444)
!3480 = !DILocation(line: 40, column: 27, scope: !3475, inlinedAt: !3444)
!3481 = !DILocation(line: 40, column: 41, scope: !3475, inlinedAt: !3444)
!3482 = !DILocation(line: 41, column: 8, scope: !3475, inlinedAt: !3444)
!3483 = !DILocation(line: 41, column: 12, scope: !3475, inlinedAt: !3444)
!3484 = !DILocation(line: 41, column: 19, scope: !3475, inlinedAt: !3444)
!3485 = !DILocation(line: 41, column: 23, scope: !3475, inlinedAt: !3444)
!3486 = !DILocation(line: 41, column: 35, scope: !3475, inlinedAt: !3444)
!3487 = !DILocation(line: 42, column: 12, scope: !3475, inlinedAt: !3444)
!3488 = !DILocation(line: 43, column: 8, scope: !3463, inlinedAt: !3444)
!3489 = !DILocalVariable(name: "i", scope: !3490, file: !2, line: 44, type: !11, align: 4)
!3490 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 44, column: 4)
!3491 = !DILocation(line: 44, column: 8, scope: !3490, inlinedAt: !3444)
!3492 = !DILocation(line: 44, column: 19, scope: !3490, inlinedAt: !3444)
!3493 = !DILocation(line: 44, column: 14, scope: !3490, inlinedAt: !3444)
!3494 = !DILocation(line: 45, column: 8, scope: !3490, inlinedAt: !3444)
!3495 = !DILocation(line: 45, column: 27, scope: !3490, inlinedAt: !3444)
!3496 = !DILocation(line: 45, column: 41, scope: !3490, inlinedAt: !3444)
!3497 = !DILocation(line: 46, column: 8, scope: !3490, inlinedAt: !3444)
!3498 = !DILocation(line: 46, column: 12, scope: !3490, inlinedAt: !3444)
!3499 = !DILocation(line: 46, column: 19, scope: !3490, inlinedAt: !3444)
!3500 = !DILocation(line: 46, column: 23, scope: !3490, inlinedAt: !3444)
!3501 = !DILocation(line: 46, column: 35, scope: !3490, inlinedAt: !3444)
!3502 = !DILocation(line: 47, column: 12, scope: !3490, inlinedAt: !3444)
!3503 = !DILocation(line: 48, column: 8, scope: !3463, inlinedAt: !3444)
!3504 = !DILocalVariable(name: "l", scope: !3505, file: !2, line: 49, type: !113, align: 8)
!3505 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 49, column: 4)
!3506 = !DILocation(line: 49, column: 9, scope: !3505, inlinedAt: !3444)
!3507 = !DILocation(line: 49, column: 21, scope: !3505, inlinedAt: !3444)
!3508 = !DILocation(line: 49, column: 15, scope: !3505, inlinedAt: !3444)
!3509 = !DILocation(line: 50, column: 8, scope: !3505, inlinedAt: !3444)
!3510 = !DILocation(line: 50, column: 27, scope: !3505, inlinedAt: !3444)
!3511 = !DILocation(line: 50, column: 41, scope: !3505, inlinedAt: !3444)
!3512 = !DILocation(line: 51, column: 8, scope: !3505, inlinedAt: !3444)
!3513 = !DILocation(line: 51, column: 12, scope: !3505, inlinedAt: !3444)
!3514 = !DILocation(line: 51, column: 19, scope: !3505, inlinedAt: !3444)
!3515 = !DILocation(line: 51, column: 23, scope: !3505, inlinedAt: !3444)
!3516 = !DILocation(line: 51, column: 35, scope: !3505, inlinedAt: !3444)
!3517 = !DILocation(line: 52, column: 12, scope: !3505, inlinedAt: !3444)
!3518 = !DILocation(line: 53, column: 8, scope: !3463, inlinedAt: !3444)
!3519 = !DILocalVariable(name: "i", scope: !3520, file: !2, line: 54, type: !2908, align: 16)
!3520 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 54, column: 4)
!3521 = !DILocation(line: 54, column: 11, scope: !3520, inlinedAt: !3444)
!3522 = !DILocation(line: 54, column: 25, scope: !3520, inlinedAt: !3444)
!3523 = !DILocation(line: 54, column: 17, scope: !3520, inlinedAt: !3444)
!3524 = !DILocation(line: 55, column: 8, scope: !3520, inlinedAt: !3444)
!3525 = !DILocation(line: 55, column: 27, scope: !3520, inlinedAt: !3444)
!3526 = !DILocation(line: 55, column: 41, scope: !3520, inlinedAt: !3444)
!3527 = !DILocation(line: 56, column: 8, scope: !3520, inlinedAt: !3444)
!3528 = !DILocation(line: 56, column: 12, scope: !3520, inlinedAt: !3444)
!3529 = !DILocation(line: 56, column: 19, scope: !3520, inlinedAt: !3444)
!3530 = !DILocation(line: 56, column: 23, scope: !3520, inlinedAt: !3444)
!3531 = !DILocation(line: 56, column: 35, scope: !3520, inlinedAt: !3444)
!3532 = !DILocation(line: 57, column: 12, scope: !3520, inlinedAt: !3444)
!3533 = !DILocation(line: 58, column: 8, scope: !3463, inlinedAt: !3444)
!3534 = !DILocalVariable(name: "c", scope: !3535, file: !2, line: 59, type: !4, align: 1)
!3535 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 59, column: 4)
!3536 = !DILocation(line: 59, column: 9, scope: !3535, inlinedAt: !3444)
!3537 = !DILocation(line: 59, column: 21, scope: !3535, inlinedAt: !3444)
!3538 = !DILocation(line: 59, column: 15, scope: !3535, inlinedAt: !3444)
!3539 = !DILocation(line: 60, column: 8, scope: !3535, inlinedAt: !3444)
!3540 = !DILocation(line: 60, column: 12, scope: !3535, inlinedAt: !3444)
!3541 = !DILocation(line: 60, column: 24, scope: !3535, inlinedAt: !3444)
!3542 = !DILocation(line: 61, column: 12, scope: !3535, inlinedAt: !3444)
!3543 = !DILocation(line: 62, column: 8, scope: !3463, inlinedAt: !3444)
!3544 = !DILocalVariable(name: "s", scope: !3545, file: !2, line: 63, type: !2934, align: 2)
!3545 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 63, column: 4)
!3546 = !DILocation(line: 63, column: 11, scope: !3545, inlinedAt: !3444)
!3547 = !DILocation(line: 63, column: 25, scope: !3545, inlinedAt: !3444)
!3548 = !DILocation(line: 63, column: 17, scope: !3545, inlinedAt: !3444)
!3549 = !DILocation(line: 64, column: 8, scope: !3545, inlinedAt: !3444)
!3550 = !DILocation(line: 64, column: 12, scope: !3545, inlinedAt: !3444)
!3551 = !DILocation(line: 64, column: 19, scope: !3545, inlinedAt: !3444)
!3552 = !DILocation(line: 64, column: 23, scope: !3545, inlinedAt: !3444)
!3553 = !DILocation(line: 64, column: 35, scope: !3545, inlinedAt: !3444)
!3554 = !DILocation(line: 65, column: 12, scope: !3545, inlinedAt: !3444)
!3555 = !DILocation(line: 66, column: 8, scope: !3463, inlinedAt: !3444)
!3556 = !DILocalVariable(name: "i", scope: !3557, file: !2, line: 67, type: !1675, align: 4)
!3557 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 67, column: 4)
!3558 = !DILocation(line: 67, column: 9, scope: !3557, inlinedAt: !3444)
!3559 = !DILocation(line: 67, column: 21, scope: !3557, inlinedAt: !3444)
!3560 = !DILocation(line: 67, column: 15, scope: !3557, inlinedAt: !3444)
!3561 = !DILocation(line: 68, column: 8, scope: !3557, inlinedAt: !3444)
!3562 = !DILocation(line: 68, column: 12, scope: !3557, inlinedAt: !3444)
!3563 = !DILocation(line: 68, column: 19, scope: !3557, inlinedAt: !3444)
!3564 = !DILocation(line: 68, column: 23, scope: !3557, inlinedAt: !3444)
!3565 = !DILocation(line: 68, column: 35, scope: !3557, inlinedAt: !3444)
!3566 = !DILocation(line: 69, column: 12, scope: !3557, inlinedAt: !3444)
!3567 = !DILocation(line: 70, column: 8, scope: !3463, inlinedAt: !3444)
!3568 = !DILocalVariable(name: "l", scope: !3569, file: !2, line: 71, type: !96, align: 8)
!3569 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 71, column: 4)
!3570 = !DILocation(line: 71, column: 10, scope: !3569, inlinedAt: !3444)
!3571 = !DILocation(line: 71, column: 23, scope: !3569, inlinedAt: !3444)
!3572 = !DILocation(line: 71, column: 16, scope: !3569, inlinedAt: !3444)
!3573 = !DILocation(line: 72, column: 8, scope: !3569, inlinedAt: !3444)
!3574 = !DILocation(line: 72, column: 12, scope: !3569, inlinedAt: !3444)
!3575 = !DILocation(line: 72, column: 19, scope: !3569, inlinedAt: !3444)
!3576 = !DILocation(line: 72, column: 23, scope: !3569, inlinedAt: !3444)
!3577 = !DILocation(line: 72, column: 35, scope: !3569, inlinedAt: !3444)
!3578 = !DILocation(line: 73, column: 12, scope: !3569, inlinedAt: !3444)
!3579 = !DILocation(line: 74, column: 8, scope: !3463, inlinedAt: !3444)
!3580 = !DILocalVariable(name: "i", scope: !3581, file: !2, line: 75, type: !2618, align: 16)
!3581 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 75, column: 4)
!3582 = !DILocation(line: 75, column: 12, scope: !3581, inlinedAt: !3444)
!3583 = !DILocation(line: 75, column: 27, scope: !3581, inlinedAt: !3444)
!3584 = !DILocation(line: 75, column: 18, scope: !3581, inlinedAt: !3444)
!3585 = !DILocation(line: 76, column: 8, scope: !3581, inlinedAt: !3444)
!3586 = !DILocation(line: 76, column: 12, scope: !3581, inlinedAt: !3444)
!3587 = !DILocation(line: 76, column: 19, scope: !3581, inlinedAt: !3444)
!3588 = !DILocation(line: 76, column: 23, scope: !3581, inlinedAt: !3444)
!3589 = !DILocation(line: 76, column: 35, scope: !3581, inlinedAt: !3444)
!3590 = !DILocation(line: 77, column: 12, scope: !3581, inlinedAt: !3444)
!3591 = !DILocation(line: 165, column: 33, scope: !3592, inlinedAt: !3593)
!3592 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3593 = !DILocation(line: 79, column: 4, scope: !3594, inlinedAt: !3444)
!3594 = distinct !DILexicalBlock(scope: !3463, file: !2827, line: 79, column: 4)
!3595 = !DILocation(line: 165, column: 2, scope: !3592, inlinedAt: !3593)
!3596 = !DILocation(line: 167, column: 2, scope: !3592, inlinedAt: !3593)
!3597 = !DILocation(line: 688, column: 9, scope: !3396)
!3598 = !DILocation(line: 688, column: 19, scope: !3396)
!3599 = distinct !DISubprogram(name: "fprintf", linkageName: "std.io.fprintf", scope: !14, file: !14, line: 144, type: !3600, scopeLine: 144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3600 = !DISubroutineType(types: !3601)
!3601 = !{!112, !122, !879, !252, !3602}
!3602 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !3603, identifier: "any[]")
!3603 = !{!3604, !3605}
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3602, baseType: !3399, size: 64, align: 64)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3602, baseType: !95, size: 64, align: 64, offset: 64)
!3606 = !DILocalVariable(name: "out", arg: 1, scope: !3599, file: !14, line: 144, type: !879)
!3607 = !DILocation(line: 144, column: 27, scope: !3599)
!3608 = !DILocalVariable(name: "format", arg: 2, scope: !3599, file: !14, line: 144, type: !252)
!3609 = !DILocation(line: 144, column: 39, scope: !3599)
!3610 = !DILocalVariable(name: "args", arg: 3, scope: !3599, file: !14, line: 144, type: !3602)
!3611 = !DILocation(line: 144, column: 47, scope: !3599)
!3612 = !DILocalVariable(name: "formatter", scope: !3599, file: !14, line: 146, type: !1663, align: 8)
!3613 = !DILocation(line: 146, column: 12, scope: !3599)
!3614 = !DILocation(line: 147, column: 2, scope: !3599)
!3615 = !DILocation(line: 148, column: 9, scope: !3599)
!3616 = distinct !DISubprogram(name: "fprintfn", linkageName: "std.io.fprintfn", scope: !14, file: !14, line: 159, type: !3600, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3617 = !DILocalVariable(name: "out", arg: 1, scope: !3616, file: !14, line: 159, type: !879)
!3618 = !DILocation(line: 159, column: 28, scope: !3616)
!3619 = !DILocalVariable(name: "format", arg: 2, scope: !3616, file: !14, line: 159, type: !252)
!3620 = !DILocation(line: 159, column: 40, scope: !3616)
!3621 = !DILocalVariable(name: "args", arg: 3, scope: !3616, file: !14, line: 159, type: !3602)
!3622 = !DILocation(line: 159, column: 48, scope: !3616)
!3623 = !DILocalVariable(name: "formatter", scope: !3616, file: !14, line: 161, type: !1663, align: 8)
!3624 = !DILocation(line: 161, column: 12, scope: !3616)
!3625 = !DILocation(line: 162, column: 2, scope: !3616)
!3626 = !DILocalVariable(name: "len", scope: !3616, file: !14, line: 163, type: !95, align: 8)
!3627 = !DILocation(line: 163, column: 6, scope: !3616)
!3628 = !DILocation(line: 163, column: 12, scope: !3616)
!3629 = !DILocation(line: 164, column: 17, scope: !3616)
!3630 = !DILocation(line: 164, column: 2, scope: !3616)
!3631 = !DILocation(line: 165, column: 7, scope: !3616)
!3632 = !DILocation(line: 165, column: 18, scope: !3616)
!3633 = !DILocation(line: 166, column: 9, scope: !3616)
!3634 = distinct !DISubprogram(name: "out_putstream_fn", linkageName: "std.io.out_putstream_fn", scope: !14, file: !14, line: 222, type: !1669, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3635 = !DILocalVariable(name: "data", arg: 1, scope: !3634, file: !14, line: 222, type: !19)
!3636 = !DILocation(line: 222, column: 33, scope: !3634)
!3637 = !DILocalVariable(name: "c", arg: 2, scope: !3634, file: !14, line: 222, type: !4)
!3638 = !DILocation(line: 222, column: 44, scope: !3634)
!3639 = !DILocalVariable(name: "stream", scope: !3634, file: !14, line: 224, type: !1494, align: 8)
!3640 = !DILocation(line: 224, column: 13, scope: !3634)
!3641 = !DILocation(line: 224, column: 22, scope: !3634)
!3642 = !DILocation(line: 225, column: 11, scope: !3634)
!3643 = !DILocation(line: 225, column: 30, scope: !3634)
!3644 = !DILocation(line: 225, column: 10, scope: !3634)
!3645 = distinct !DISubprogram(name: "out_putchar_fn", linkageName: "std.io.out_putchar_fn", scope: !14, file: !14, line: 228, type: !1669, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3646 = !DILocalVariable(name: "data", arg: 1, scope: !3645, file: !14, line: 228, type: !19)
!3647 = !DILocation(line: 228, column: 31, scope: !3645)
!3648 = !DILocalVariable(name: "c", arg: 2, scope: !3645, file: !14, line: 228, type: !4)
!3649 = !DILocation(line: 228, column: 50, scope: !3645)
!3650 = !DILocation(line: 230, column: 16, scope: !3645)
!3651 = !DILocation(line: 230, column: 2, scope: !3645)
!3652 = distinct !DISubprogram(name: "printf", linkageName: "std.io.printf", scope: !14, file: !14, line: 247, type: !3653, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3653 = !DISubroutineType(types: !3654)
!3654 = !{!112, !122, !252, !3602}
!3655 = !DILocalVariable(name: "format", arg: 1, scope: !3652, file: !14, line: 247, type: !252)
!3656 = !DILocation(line: 247, column: 23, scope: !3652)
!3657 = !DILocalVariable(name: "args", arg: 2, scope: !3652, file: !14, line: 247, type: !3602)
!3658 = !DILocation(line: 247, column: 31, scope: !3652)
!3659 = !DILocalVariable(name: "formatter", scope: !3652, file: !14, line: 249, type: !1663, align: 8)
!3660 = !DILocation(line: 249, column: 12, scope: !3652)
!3661 = !DILocation(line: 250, column: 2, scope: !3652)
!3662 = !DILocation(line: 251, column: 9, scope: !3652)
!3663 = distinct !DISubprogram(name: "printfn", linkageName: "std.io.printfn", scope: !14, file: !14, line: 261, type: !3653, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3664 = !DILocalVariable(name: "format", arg: 1, scope: !3663, file: !14, line: 261, type: !252)
!3665 = !DILocation(line: 261, column: 24, scope: !3663)
!3666 = !DILocalVariable(name: "args", arg: 2, scope: !3663, file: !14, line: 261, type: !3602)
!3667 = !DILocation(line: 261, column: 32, scope: !3663)
!3668 = !DILocalVariable(name: "formatter", scope: !3663, file: !14, line: 263, type: !1663, align: 8)
!3669 = !DILocation(line: 263, column: 12, scope: !3663)
!3670 = !DILocation(line: 264, column: 2, scope: !3663)
!3671 = !DILocalVariable(name: "len", scope: !3663, file: !14, line: 265, type: !96, align: 8)
!3672 = !DILocation(line: 265, column: 7, scope: !3663)
!3673 = !DILocation(line: 265, column: 13, scope: !3663)
!3674 = !DILocation(line: 266, column: 2, scope: !3663)
!3675 = !DILocation(line: 267, column: 2, scope: !3663)
!3676 = !DILocation(line: 268, column: 9, scope: !3663)
!3677 = distinct !DISubprogram(name: "eprintf", linkageName: "std.io.eprintf", scope: !14, file: !14, line: 278, type: !3653, scopeLine: 278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3678 = !DILocalVariable(name: "format", arg: 1, scope: !3677, file: !14, line: 278, type: !252)
!3679 = !DILocation(line: 278, column: 24, scope: !3677)
!3680 = !DILocalVariable(name: "args", arg: 2, scope: !3677, file: !14, line: 278, type: !3602)
!3681 = !DILocation(line: 278, column: 32, scope: !3677)
!3682 = !DILocalVariable(name: "formatter", scope: !3677, file: !14, line: 280, type: !1663, align: 8)
!3683 = !DILocation(line: 280, column: 12, scope: !3677)
!3684 = !DILocalVariable(name: "stream", scope: !3677, file: !14, line: 281, type: !879, align: 8)
!3685 = !DILocation(line: 281, column: 12, scope: !3677)
!3686 = !DILocation(line: 281, column: 21, scope: !3677)
!3687 = !DILocation(line: 282, column: 2, scope: !3677)
!3688 = !DILocation(line: 283, column: 9, scope: !3677)
!3689 = distinct !DISubprogram(name: "eprintfn", linkageName: "std.io.eprintfn", scope: !14, file: !14, line: 294, type: !3653, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3690 = !DILocalVariable(name: "format", arg: 1, scope: !3689, file: !14, line: 294, type: !252)
!3691 = !DILocation(line: 294, column: 25, scope: !3689)
!3692 = !DILocalVariable(name: "args", arg: 2, scope: !3689, file: !14, line: 294, type: !3602)
!3693 = !DILocation(line: 294, column: 33, scope: !3689)
!3694 = !DILocalVariable(name: "formatter", scope: !3689, file: !14, line: 296, type: !1663, align: 8)
!3695 = !DILocation(line: 296, column: 12, scope: !3689)
!3696 = !DILocalVariable(name: "stream", scope: !3689, file: !14, line: 297, type: !879, align: 8)
!3697 = !DILocation(line: 297, column: 12, scope: !3689)
!3698 = !DILocation(line: 297, column: 21, scope: !3689)
!3699 = !DILocation(line: 298, column: 2, scope: !3689)
!3700 = !DILocalVariable(name: "len", scope: !3689, file: !14, line: 299, type: !96, align: 8)
!3701 = !DILocation(line: 299, column: 7, scope: !3689)
!3702 = !DILocation(line: 299, column: 13, scope: !3689)
!3703 = !DILocation(line: 300, column: 2, scope: !3689)
!3704 = !DILocation(line: 301, column: 2, scope: !3689)
!3705 = !DILocation(line: 302, column: 9, scope: !3689)
!3706 = distinct !DISubprogram(name: "bprintf", linkageName: "std.io.bprintf", scope: !14, file: !14, line: 313, type: !3707, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3707 = !DISubroutineType(types: !3708)
!3708 = !{!112, !1329, !123, !252, !3602}
!3709 = !DILocalVariable(name: "buffer", arg: 1, scope: !3706, file: !14, line: 313, type: !123)
!3710 = !DILocation(line: 313, column: 27, scope: !3706)
!3711 = !DILocalVariable(name: "format", arg: 2, scope: !3706, file: !14, line: 313, type: !252)
!3712 = !DILocation(line: 313, column: 42, scope: !3706)
!3713 = !DILocalVariable(name: "args", arg: 3, scope: !3706, file: !14, line: 313, type: !3602)
!3714 = !DILocation(line: 313, column: 50, scope: !3706)
!3715 = !DILocalVariable(name: "formatter", scope: !3706, file: !14, line: 315, type: !1663, align: 8)
!3716 = !DILocation(line: 315, column: 12, scope: !3706)
!3717 = !DILocalVariable(name: "data", scope: !3706, file: !14, line: 316, type: !3718, align: 8)
!3718 = !DICompositeType(tag: DW_TAG_structure_type, name: "BufferData", scope: !14, file: !14, line: 331, size: 192, align: 64, elements: !3719, identifier: "std.io.BufferData")
!3719 = !{!3720, !3721}
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !3718, file: !14, line: 333, baseType: !123, size: 128, align: 64)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !3718, file: !14, line: 334, baseType: !95, size: 64, align: 64, offset: 128)
!3722 = !DILocation(line: 316, column: 13, scope: !3706)
!3723 = !DILocation(line: 316, column: 32, scope: !3706)
!3724 = !DILocation(line: 317, column: 2, scope: !3706)
!3725 = !DILocalVariable(name: "size", scope: !3706, file: !14, line: 318, type: !95, align: 8)
!3726 = !DILocation(line: 318, column: 6, scope: !3706)
!3727 = !DILocation(line: 318, column: 13, scope: !3706)
!3728 = !DILocation(line: 319, column: 9, scope: !3706)
!3729 = !DILocation(line: 319, column: 16, scope: !3706)
!3730 = !DILocation(line: 319, column: 17, scope: !3706)
!3731 = distinct !DISubprogram(name: "out_buffer_fn", linkageName: "std.io.out_buffer_fn", scope: !14, file: !14, line: 323, type: !1669, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3732 = !DILocalVariable(name: "data", arg: 1, scope: !3731, file: !14, line: 323, type: !19)
!3733 = !DILocation(line: 323, column: 30, scope: !3731)
!3734 = !DILocalVariable(name: "c", arg: 2, scope: !3731, file: !14, line: 323, type: !4)
!3735 = !DILocation(line: 323, column: 41, scope: !3731)
!3736 = !DILocalVariable(name: "buffer_data", scope: !3731, file: !14, line: 325, type: !3737, align: 8)
!3737 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BufferData*", baseType: !3718, size: 64, align: 64, dwarfAddressSpace: 0)
!3738 = !DILocation(line: 325, column: 14, scope: !3731)
!3739 = !DILocation(line: 325, column: 28, scope: !3731)
!3740 = !DILocation(line: 326, column: 6, scope: !3731)
!3741 = !DILocation(line: 326, column: 29, scope: !3731)
!3742 = !DILocation(line: 326, column: 60, scope: !3731)
!3743 = !DILocation(line: 327, column: 2, scope: !3731)
!3744 = !DILocation(line: 327, column: 21, scope: !3731)
!3745 = !DILocation(line: 327, column: 46, scope: !3731)
!3746 = distinct !DISubprogram(name: "putchar", linkageName: "std.io.putchar", scope: !14, file: !14, line: 344, type: !3747, scopeLine: 344, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3747 = !DISubroutineType(types: !3748)
!3748 = !{null, !4}
!3749 = !DILocalVariable(name: "c", arg: 1, scope: !3746, file: !14, line: 344, type: !4)
!3750 = !DILocation(line: 344, column: 22, scope: !3746)
!3751 = !DILocation(line: 346, column: 16, scope: !3746)
!3752 = !DILocation(line: 346, column: 2, scope: !3746)
!3753 = distinct !DISubprogram(name: "stdout", linkageName: "std.io.stdout", scope: !14, file: !14, line: 354, type: !3754, scopeLine: 354, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!3754 = !DISubroutineType(types: !3755)
!3755 = !{!3756}
!3756 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "File*", baseType: !15, size: 64, align: 64, dwarfAddressSpace: 0)
!3757 = !DILocation(line: 357, column: 7, scope: !3753)
!3758 = !DILocation(line: 220, column: 25, scope: !3759, inlinedAt: !3761)
!3759 = distinct !DISubprogram(name: "stdout", linkageName: "stdout", scope: !3760, file: !3760, line: 220, scopeLine: 220, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3760 = !DIFile(filename: "libc.c3", directory: "/opt/homebrew/lib/c3/std/libc")
!3761 = !DILocation(line: 357, column: 43, scope: !3753)
!3762 = !DILocation(line: 357, column: 25, scope: !3753)
!3763 = !DILocation(line: 358, column: 9, scope: !3753)
!3764 = distinct !DISubprogram(name: "stderr", linkageName: "std.io.stderr", scope: !14, file: !14, line: 366, type: !3754, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!3765 = !DILocation(line: 369, column: 7, scope: !3764)
!3766 = !DILocation(line: 221, column: 25, scope: !3767, inlinedAt: !3768)
!3767 = distinct !DISubprogram(name: "stderr", linkageName: "stderr", scope: !3760, file: !3760, line: 221, scopeLine: 221, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3768 = !DILocation(line: 369, column: 43, scope: !3764)
!3769 = !DILocation(line: 369, column: 25, scope: !3764)
!3770 = !DILocation(line: 370, column: 9, scope: !3764)
!3771 = distinct !DISubprogram(name: "stdin", linkageName: "std.io.stdin", scope: !14, file: !14, line: 378, type: !3754, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42)
!3772 = !DILocation(line: 381, column: 7, scope: !3771)
!3773 = !DILocation(line: 219, column: 24, scope: !3774, inlinedAt: !3775)
!3774 = distinct !DISubprogram(name: "stdin", linkageName: "stdin", scope: !3760, file: !3760, line: 219, scopeLine: 219, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!3775 = !DILocation(line: 381, column: 43, scope: !3771)
!3776 = !DILocation(line: 381, column: 25, scope: !3771)
!3777 = !DILocation(line: 382, column: 9, scope: !3771)
!3778 = distinct !DISubprogram(name: "available", linkageName: "std.io.available", scope: !26, file: !26, line: 27, type: !3779, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3779 = !DISubroutineType(types: !3780)
!3780 = !{!112, !122, !89}
!3781 = !DILocalVariable(name: "s", arg: 1, scope: !3778, file: !26, line: 27, type: !89)
!3782 = !DILocation(line: 27, column: 28, scope: !3778)
!3783 = !DILocation(line: 29, column: 7, scope: !3778)
!3784 = !DILocation(line: 29, column: 27, scope: !3778)
!3785 = !DILocation(line: 30, column: 7, scope: !3778)
!3786 = !DILocalVariable(name: "curr", scope: !3787, file: !26, line: 32, type: !95, align: 8)
!3787 = distinct !DILexicalBlock(scope: !3778, file: !26, line: 31, column: 2)
!3788 = !DILocation(line: 32, column: 7, scope: !3787)
!3789 = !DILocation(line: 32, column: 24, scope: !3787)
!3790 = !DILocation(line: 32, column: 14, scope: !3787)
!3791 = !DILocalVariable(name: "len", scope: !3787, file: !26, line: 33, type: !95, align: 8)
!3792 = !DILocation(line: 33, column: 7, scope: !3787)
!3793 = !DILocation(line: 33, column: 23, scope: !3787)
!3794 = !DILocation(line: 33, column: 13, scope: !3787)
!3795 = !DILocation(line: 34, column: 10, scope: !3787)
!3796 = !DILocation(line: 34, column: 16, scope: !3787)
!3797 = !DILocation(line: 34, column: 3, scope: !3787)
!3798 = !DILocation(line: 35, column: 10, scope: !3787)
!3799 = !DILocation(line: 35, column: 16, scope: !3787)
!3800 = !DILocation(line: 37, column: 9, scope: !3778)
!3801 = distinct !DISubprogram(name: "copy_to", linkageName: "std.io.copy_to", scope: !26, file: !26, line: 177, type: !3802, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3802 = !DISubroutineType(types: !3803)
!3803 = !{!112, !122, !89, !879, !123}
!3804 = !DILocalVariable(name: "in", arg: 1, scope: !3801, file: !26, line: 177, type: !89)
!3805 = !DILocation(line: 177, column: 26, scope: !3801)
!3806 = !DILocalVariable(name: "dst", arg: 2, scope: !3801, file: !26, line: 177, type: !879)
!3807 = !DILocation(line: 177, column: 40, scope: !3801)
!3808 = !DILocalVariable(name: "buffer", arg: 3, scope: !3801, file: !26, line: 177, type: !123)
!3809 = !DILocation(line: 177, column: 52, scope: !3801)
!3810 = !DILocation(line: 179, column: 6, scope: !3801)
!3811 = !DILocalVariable(name: "total_copied", scope: !3812, file: !26, line: 195, type: !95, align: 8)
!3812 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !26, file: !26, line: 193, scopeLine: 193, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3813 = !DILocation(line: 195, column: 6, scope: !3812, inlinedAt: !3814)
!3814 = !DILocation(line: 179, column: 25, scope: !3801)
!3815 = !DILocation(line: 196, column: 2, scope: !3812, inlinedAt: !3814)
!3816 = !DILocalVariable(name: "len", scope: !3817, file: !26, line: 198, type: !96, align: 8)
!3817 = distinct !DILexicalBlock(scope: !3818, file: !26, line: 197, column: 2)
!3818 = distinct !DILexicalBlock(scope: !3812, file: !26, line: 196, column: 2)
!3819 = !DILocation(line: 198, column: 8, scope: !3817, inlinedAt: !3814)
!3820 = !DILocation(line: 198, column: 22, scope: !3817, inlinedAt: !3814)
!3821 = !DILocation(line: 198, column: 14, scope: !3817, inlinedAt: !3814)
!3822 = !DILocalVariable(name: "err", scope: !3817, file: !26, line: 199, type: !112, align: 8)
!3823 = !DILocation(line: 199, column: 13, scope: !3817, inlinedAt: !3814)
!3824 = !DILocation(line: 199, column: 19, scope: !3817, inlinedAt: !3814)
!3825 = !DILocation(line: 201, column: 9, scope: !3817, inlinedAt: !3814)
!3826 = !DILocation(line: 201, column: 29, scope: !3827, inlinedAt: !3814)
!3827 = distinct !DILexicalBlock(scope: !3817, file: !26, line: 201, column: 22)
!3828 = !DILocation(line: 202, column: 20, scope: !3829, inlinedAt: !3814)
!3829 = distinct !DILexicalBlock(scope: !3817, file: !26, line: 202, column: 13)
!3830 = !DILocation(line: 204, column: 7, scope: !3817, inlinedAt: !3814)
!3831 = !DILocation(line: 204, column: 20, scope: !3817, inlinedAt: !3814)
!3832 = !DILocalVariable(name: "written", scope: !3817, file: !26, line: 205, type: !95, align: 8)
!3833 = !DILocation(line: 205, column: 7, scope: !3817, inlinedAt: !3814)
!3834 = !DILocation(line: 205, column: 27, scope: !3817, inlinedAt: !3814)
!3835 = !DILocation(line: 205, column: 34, scope: !3817, inlinedAt: !3814)
!3836 = !DILocation(line: 205, column: 35, scope: !3817, inlinedAt: !3814)
!3837 = !DILocation(line: 205, column: 17, scope: !3817, inlinedAt: !3814)
!3838 = !DILocation(line: 206, column: 3, scope: !3817, inlinedAt: !3814)
!3839 = !DILocation(line: 206, column: 19, scope: !3817, inlinedAt: !3814)
!3840 = !DILocation(line: 207, column: 7, scope: !3817, inlinedAt: !3814)
!3841 = !DILocation(line: 207, column: 18, scope: !3817, inlinedAt: !3814)
!3842 = !DILocation(line: 207, column: 30, scope: !3817, inlinedAt: !3814)
!3843 = !DILocation(line: 180, column: 7, scope: !3801)
!3844 = !DILocation(line: 180, column: 39, scope: !3801)
!3845 = !DILocation(line: 180, column: 27, scope: !3801)
!3846 = !DILocation(line: 181, column: 7, scope: !3801)
!3847 = !DILocation(line: 181, column: 39, scope: !3801)
!3848 = !DILocation(line: 181, column: 27, scope: !3801)
!3849 = !DILocalVariable(name: "total_copied", scope: !3850, file: !26, line: 195, type: !95, align: 8)
!3850 = distinct !DISubprogram(name: "copy_through_buffer", linkageName: "copy_through_buffer", scope: !26, file: !26, line: 193, scopeLine: 193, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3851 = !DILocation(line: 195, column: 6, scope: !3850, inlinedAt: !3852)
!3852 = !DILocation(line: 184, column: 11, scope: !3801)
!3853 = !DILocation(line: 196, column: 2, scope: !3850, inlinedAt: !3852)
!3854 = !DILocalVariable(name: "len", scope: !3855, file: !26, line: 198, type: !96, align: 8)
!3855 = distinct !DILexicalBlock(scope: !3856, file: !26, line: 197, column: 2)
!3856 = distinct !DILexicalBlock(scope: !3850, file: !26, line: 196, column: 2)
!3857 = !DILocation(line: 198, column: 8, scope: !3855, inlinedAt: !3852)
!3858 = !DILocation(line: 198, column: 22, scope: !3855, inlinedAt: !3852)
!3859 = !DILocation(line: 198, column: 14, scope: !3855, inlinedAt: !3852)
!3860 = !DILocalVariable(name: "err", scope: !3855, file: !26, line: 199, type: !112, align: 8)
!3861 = !DILocation(line: 199, column: 13, scope: !3855, inlinedAt: !3852)
!3862 = !DILocation(line: 199, column: 19, scope: !3855, inlinedAt: !3852)
!3863 = !DILocation(line: 201, column: 9, scope: !3855, inlinedAt: !3852)
!3864 = !DILocation(line: 201, column: 29, scope: !3865, inlinedAt: !3852)
!3865 = distinct !DILexicalBlock(scope: !3855, file: !26, line: 201, column: 22)
!3866 = !DILocation(line: 202, column: 20, scope: !3867, inlinedAt: !3852)
!3867 = distinct !DILexicalBlock(scope: !3855, file: !26, line: 202, column: 13)
!3868 = !DILocation(line: 204, column: 7, scope: !3855, inlinedAt: !3852)
!3869 = !DILocation(line: 204, column: 20, scope: !3855, inlinedAt: !3852)
!3870 = !DILocalVariable(name: "written", scope: !3855, file: !26, line: 205, type: !95, align: 8)
!3871 = !DILocation(line: 205, column: 7, scope: !3855, inlinedAt: !3852)
!3872 = !DILocation(line: 205, column: 27, scope: !3855, inlinedAt: !3852)
!3873 = !DILocation(line: 205, column: 34, scope: !3855, inlinedAt: !3852)
!3874 = !DILocation(line: 205, column: 35, scope: !3855, inlinedAt: !3852)
!3875 = !DILocation(line: 205, column: 17, scope: !3855, inlinedAt: !3852)
!3876 = !DILocation(line: 206, column: 3, scope: !3855, inlinedAt: !3852)
!3877 = !DILocation(line: 206, column: 19, scope: !3855, inlinedAt: !3852)
!3878 = !DILocation(line: 207, column: 7, scope: !3855, inlinedAt: !3852)
!3879 = !DILocation(line: 207, column: 18, scope: !3855, inlinedAt: !3852)
!3880 = !DILocation(line: 207, column: 30, scope: !3855, inlinedAt: !3852)
!3881 = distinct !DISubprogram(name: "wrap_bytes", linkageName: "std.io.wrap_bytes", scope: !26, file: !26, line: 466, type: !3882, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3882 = !DISubroutineType(types: !3883)
!3883 = !{!996, !123}
!3884 = !DILocalVariable(name: "bytes", arg: 1, scope: !3881, file: !26, line: 466, type: !123)
!3885 = !DILocation(line: 466, column: 33, scope: !3881)
!3886 = !DILocation(line: 468, column: 11, scope: !3881)
!3887 = !DILocation(line: 468, column: 18, scope: !3881)
!3888 = distinct !DISubprogram(name: "to_format", linkageName: "std.core.ReflectedParam.to_format", scope: !32, file: !32, line: 61, type: !3889, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3889 = !DISubroutineType(types: !3890)
!3890 = !{!112, !122, !3891, !1662}
!3891 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ReflectedParam*", baseType: !3892, size: 64, align: 64, dwarfAddressSpace: 0)
!3892 = !DICompositeType(tag: DW_TAG_structure_type, name: "ReflectedParam", scope: !32, file: !32, line: 1, size: 192, align: 64, elements: !3893, identifier: "ReflectedParam")
!3893 = !{!3894, !3895}
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3892, file: !32, baseType: !252, size: 128, align: 64)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3892, file: !32, baseType: !93, size: 64, align: 64, offset: 128)
!3896 = !DILocation(line: 62, column: 1, scope: !3888)
!3897 = !DILocalVariable(name: "self", arg: 1, scope: !3888, file: !32, line: 61, type: !3891)
!3898 = !DILocation(line: 61, column: 34, scope: !3888)
!3899 = !DILocalVariable(name: "f", arg: 2, scope: !3888, file: !32, line: 61, type: !1662)
!3900 = !DILocation(line: 61, column: 52, scope: !3888)
!3901 = !DILocation(line: 63, column: 38, scope: !3888)
!3902 = !DILocation(line: 63, column: 9, scope: !3888)
!3903 = distinct !DISubprogram(name: "printf", linkageName: "std.io.Formatter.printf", scope: !32, file: !32, line: 66, type: !3904, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3904 = !DISubroutineType(types: !3905)
!3905 = !{!112, !122, !1662, !252, !3602}
!3906 = !DILocation(line: 67, column: 1, scope: !3903)
!3907 = !DILocalVariable(name: "self", arg: 1, scope: !3903, file: !32, line: 66, type: !1662)
!3908 = !DILocation(line: 66, column: 26, scope: !3903)
!3909 = !DILocalVariable(name: "format", arg: 2, scope: !3903, file: !32, line: 66, type: !252)
!3910 = !DILocation(line: 66, column: 40, scope: !3903)
!3911 = !DILocalVariable(name: "args", arg: 3, scope: !3903, file: !32, line: 66, type: !3602)
!3912 = !DILocation(line: 66, column: 48, scope: !3903)
!3913 = !DILocation(line: 68, column: 9, scope: !3903)
!3914 = distinct !DISubprogram(name: "init", linkageName: "std.io.Formatter.init", scope: !32, file: !32, line: 96, type: !3915, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3915 = !DISubroutineType(types: !3916)
!3916 = !{null, !1662, !1668, !19}
!3917 = !DILocation(line: 97, column: 1, scope: !3914)
!3918 = !DILocalVariable(name: "self", arg: 1, scope: !3914, file: !32, line: 96, type: !1662)
!3919 = !DILocation(line: 96, column: 24, scope: !3914)
!3920 = !DILocalVariable(name: "out_fn", arg: 2, scope: !3914, file: !32, line: 96, type: !1667)
!3921 = !DILocation(line: 96, column: 40, scope: !3914)
!3922 = !DILocalVariable(name: "data", arg: 3, scope: !3914, file: !32, line: 96, type: !19)
!3923 = !DILocation(line: 96, column: 54, scope: !3914)
!3924 = !DILocation(line: 98, column: 3, scope: !3914)
!3925 = !DILocation(line: 98, column: 20, scope: !3914)
!3926 = !DILocation(line: 98, column: 36, scope: !3914)
!3927 = distinct !DISubprogram(name: "out", linkageName: "std.io.Formatter.out", scope: !32, file: !32, line: 101, type: !3928, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3928 = !DISubroutineType(types: !3929)
!3929 = !{!112, !122, !1662, !4}
!3930 = !DILocation(line: 102, column: 1, scope: !3927)
!3931 = !DILocalVariable(name: "self", arg: 1, scope: !3927, file: !32, line: 101, type: !1662)
!3932 = !DILocation(line: 101, column: 23, scope: !3927)
!3933 = !DILocalVariable(name: "c", arg: 2, scope: !3927, file: !32, line: 101, type: !4)
!3934 = !DILocation(line: 101, column: 35, scope: !3927)
!3935 = !DILocalVariable(name: "err", scope: !3927, file: !32, line: 103, type: !112, align: 8)
!3936 = !DILocation(line: 103, column: 12, scope: !3927)
!3937 = !DILocation(line: 103, column: 18, scope: !3927)
!3938 = !DILocation(line: 103, column: 30, scope: !3927)
!3939 = !DILocation(line: 103, column: 41, scope: !3927)
!3940 = !DILocation(line: 105, column: 7, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3927, file: !32, line: 104, column: 2)
!3942 = !DILocation(line: 105, column: 32, scope: !3941)
!3943 = !DILocation(line: 106, column: 3, scope: !3941)
!3944 = !DILocation(line: 106, column: 22, scope: !3941)
!3945 = !DILocation(line: 107, column: 10, scope: !3941)
!3946 = !DILocation(line: 109, column: 9, scope: !3927)
!3947 = distinct !DISubprogram(name: "print_with_function", linkageName: "std.io.Formatter.print_with_function", scope: !32, file: !32, line: 112, type: !3948, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!3948 = !DISubroutineType(types: !3949)
!3949 = !{!112, !122, !1662, !3950}
!3950 = !DICompositeType(tag: DW_TAG_structure_type, name: "Printable", size: 128, align: 64, elements: !3951, identifier: "Printable")
!3951 = !{!3952, !3953}
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3950, baseType: !19, size: 64, align: 64)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3950, baseType: !93, size: 64, align: 64, offset: 64)
!3954 = !DILocation(line: 113, column: 1, scope: !3947)
!3955 = !DILocalVariable(name: "self", arg: 1, scope: !3947, file: !32, line: 112, type: !1662)
!3956 = !DILocation(line: 112, column: 39, scope: !3947)
!3957 = !DILocalVariable(name: "arg", arg: 2, scope: !3947, file: !32, line: 112, type: !3950)
!3958 = !DILocation(line: 112, column: 56, scope: !3947)
!3959 = !DILocation(line: 114, column: 7, scope: !3947)
!3960 = !DILocalVariable(name: "old", scope: !3961, file: !32, line: 116, type: !1675, align: 4)
!3961 = distinct !DILexicalBlock(scope: !3947, file: !32, line: 115, column: 2)
!3962 = !DILocation(line: 116, column: 14, scope: !3961)
!3963 = !DILocation(line: 116, column: 20, scope: !3961)
!3964 = !DILocalVariable(name: "old_width", scope: !3961, file: !32, line: 117, type: !1675, align: 4)
!3965 = !DILocation(line: 117, column: 8, scope: !3961)
!3966 = !DILocation(line: 117, column: 20, scope: !3961)
!3967 = !DILocalVariable(name: "old_prec", scope: !3961, file: !32, line: 118, type: !1675, align: 4)
!3968 = !DILocation(line: 118, column: 8, scope: !3961)
!3969 = !DILocation(line: 118, column: 19, scope: !3961)
!3970 = !DILocation(line: 125, column: 7, scope: !3961)
!3971 = !DILocation(line: 125, column: 20, scope: !3961)
!3972 = !DILocation(line: 121, column: 4, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3961, file: !32, line: 120, column: 3)
!3974 = !DILocation(line: 121, column: 17, scope: !3973)
!3975 = !DILocation(line: 122, column: 4, scope: !3973)
!3976 = !DILocation(line: 122, column: 17, scope: !3973)
!3977 = !DILocation(line: 123, column: 4, scope: !3973)
!3978 = !DILocation(line: 123, column: 16, scope: !3973)
!3979 = !DILocation(line: 121, column: 4, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3961, file: !32, line: 120, column: 3)
!3981 = !DILocation(line: 121, column: 17, scope: !3980)
!3982 = !DILocation(line: 122, column: 4, scope: !3980)
!3983 = !DILocation(line: 122, column: 17, scope: !3980)
!3984 = !DILocation(line: 123, column: 4, scope: !3980)
!3985 = !DILocation(line: 123, column: 16, scope: !3980)
!3986 = !DILocation(line: 126, column: 24, scope: !3961)
!3987 = !DILocation(line: 126, column: 10, scope: !3961)
!3988 = !DILocation(line: 121, column: 4, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3961, file: !32, line: 120, column: 3)
!3990 = !DILocation(line: 121, column: 17, scope: !3989)
!3991 = !DILocation(line: 122, column: 4, scope: !3989)
!3992 = !DILocation(line: 122, column: 17, scope: !3989)
!3993 = !DILocation(line: 123, column: 4, scope: !3989)
!3994 = !DILocation(line: 123, column: 16, scope: !3989)
!3995 = !DILocation(line: 121, column: 4, scope: !3996)
!3996 = distinct !DILexicalBlock(scope: !3961, file: !32, line: 120, column: 3)
!3997 = !DILocation(line: 121, column: 17, scope: !3996)
!3998 = !DILocation(line: 122, column: 4, scope: !3996)
!3999 = !DILocation(line: 122, column: 17, scope: !3996)
!4000 = !DILocation(line: 123, column: 4, scope: !3996)
!4001 = !DILocation(line: 123, column: 16, scope: !3996)
!4002 = !DILocation(line: 128, column: 7, scope: !3947)
!4003 = !DILocalVariable(name: "old", scope: !4004, file: !32, line: 130, type: !1675, align: 4)
!4004 = distinct !DILexicalBlock(scope: !3947, file: !32, line: 129, column: 2)
!4005 = !DILocation(line: 130, column: 14, scope: !4004)
!4006 = !DILocation(line: 130, column: 20, scope: !4004)
!4007 = !DILocalVariable(name: "old_width", scope: !4004, file: !32, line: 131, type: !1675, align: 4)
!4008 = !DILocation(line: 131, column: 8, scope: !4004)
!4009 = !DILocation(line: 131, column: 20, scope: !4004)
!4010 = !DILocalVariable(name: "old_prec", scope: !4004, file: !32, line: 132, type: !1675, align: 4)
!4011 = !DILocation(line: 132, column: 8, scope: !4004)
!4012 = !DILocation(line: 132, column: 19, scope: !4004)
!4013 = !DILocation(line: 139, column: 7, scope: !4004)
!4014 = !DILocation(line: 139, column: 20, scope: !4004)
!4015 = !DILocation(line: 135, column: 4, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !4004, file: !32, line: 134, column: 3)
!4017 = !DILocation(line: 135, column: 17, scope: !4016)
!4018 = !DILocation(line: 136, column: 4, scope: !4016)
!4019 = !DILocation(line: 136, column: 17, scope: !4016)
!4020 = !DILocation(line: 137, column: 4, scope: !4016)
!4021 = !DILocation(line: 137, column: 16, scope: !4016)
!4022 = !DILocation(line: 135, column: 4, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4004, file: !32, line: 134, column: 3)
!4024 = !DILocation(line: 135, column: 17, scope: !4023)
!4025 = !DILocation(line: 136, column: 4, scope: !4023)
!4026 = !DILocation(line: 136, column: 17, scope: !4023)
!4027 = !DILocation(line: 137, column: 4, scope: !4023)
!4028 = !DILocation(line: 137, column: 16, scope: !4023)
!4029 = !DILocalVariable(name: "buffer", scope: !4030, file: !32, line: 537, type: !4031, align: 1)
!4030 = distinct !DISubprogram(name: "@stack_mem", linkageName: "@stack_mem", scope: !331, file: !331, line: 535, scopeLine: 535, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4031 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 8192, align: 8, elements: !4032)
!4032 = !{!4033}
!4033 = !DISubrange(count: 1024, lowerBound: 0)
!4034 = !DILocation(line: 537, column: 14, scope: !4030, inlinedAt: !4035)
!4035 = !DILocation(line: 140, column: 3, scope: !4004)
!4036 = !DILocalVariable(name: "allocator", scope: !4030, file: !32, line: 538, type: !4037, align: 8)
!4037 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocator", scope: !32, file: !32, line: 3, size: 384, align: 64, elements: !4038, identifier: "std.core.mem.allocator.OnStackAllocator")
!4038 = !{!4039, !4040, !4041, !4042}
!4039 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !4037, file: !32, line: 5, baseType: !185, size: 128, align: 64)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4037, file: !32, line: 6, baseType: !123, size: 128, align: 64, offset: 128)
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !4037, file: !32, line: 7, baseType: !95, size: 64, align: 64, offset: 256)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !4037, file: !32, line: 8, baseType: !4043, size: 64, align: 64, offset: 320)
!4043 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "OnStackAllocatorExtraChunk*", baseType: !4044, size: 64, align: 64, dwarfAddressSpace: 0)
!4044 = !DICompositeType(tag: DW_TAG_structure_type, name: "OnStackAllocatorExtraChunk", scope: !32, file: !32, line: 12, size: 192, align: 64, elements: !4045, identifier: "std.core.mem.allocator.OnStackAllocatorExtraChunk")
!4045 = !{!4046, !4047, !4048}
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "is_aligned", scope: !4044, file: !32, line: 14, baseType: !432, size: 8, align: 8)
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !4044, file: !32, line: 15, baseType: !4043, size: 64, align: 64, offset: 64)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4044, file: !32, line: 16, baseType: !19, size: 64, align: 64, offset: 128)
!4049 = !DILocation(line: 538, column: 19, scope: !4030, inlinedAt: !4035)
!4050 = !DILocation(line: 539, column: 18, scope: !4030, inlinedAt: !4035)
!4051 = !DILocation(line: 539, column: 2, scope: !4030, inlinedAt: !4035)
!4052 = !DILocalVariable(name: "mem", scope: !4004, file: !32, line: 140, type: !185, align: 8)
!4053 = !DILocation(line: 140, column: 30, scope: !4004)
!4054 = !DILocation(line: 541, column: 8, scope: !4055, inlinedAt: !4035)
!4055 = distinct !DILexicalBlock(scope: !4030, file: !331, line: 541, column: 2)
!4056 = !DILocation(line: 142, column: 41, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4004, file: !32, line: 141, column: 3)
!4058 = !DILocation(line: 142, column: 27, scope: !4057)
!4059 = !DILocation(line: 142, column: 11, scope: !4057)
!4060 = !DILocation(line: 540, column: 8, scope: !4061, inlinedAt: !4035)
!4061 = distinct !DILexicalBlock(scope: !4030, file: !331, line: 540, column: 8)
!4062 = !DILocation(line: 135, column: 4, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4004, file: !32, line: 134, column: 3)
!4064 = !DILocation(line: 135, column: 17, scope: !4063)
!4065 = !DILocation(line: 136, column: 4, scope: !4063)
!4066 = !DILocation(line: 136, column: 17, scope: !4063)
!4067 = !DILocation(line: 137, column: 4, scope: !4063)
!4068 = !DILocation(line: 137, column: 16, scope: !4063)
!4069 = !DILocation(line: 540, column: 8, scope: !4070, inlinedAt: !4035)
!4070 = distinct !DILexicalBlock(scope: !4030, file: !331, line: 540, column: 8)
!4071 = !DILocation(line: 135, column: 4, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4004, file: !32, line: 134, column: 3)
!4073 = !DILocation(line: 135, column: 17, scope: !4072)
!4074 = !DILocation(line: 136, column: 4, scope: !4072)
!4075 = !DILocation(line: 136, column: 17, scope: !4072)
!4076 = !DILocation(line: 137, column: 4, scope: !4072)
!4077 = !DILocation(line: 137, column: 16, scope: !4072)
!4078 = !DILocation(line: 145, column: 9, scope: !3947)
!4079 = distinct !DISubprogram(name: "out_str", linkageName: "std.io.Formatter.out_str", scope: !32, file: !32, line: 149, type: !2803, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4080 = !DILocation(line: 150, column: 1, scope: !4079)
!4081 = !DILocalVariable(name: "self", arg: 1, scope: !4079, file: !32, line: 149, type: !1662)
!4082 = !DILocation(line: 149, column: 27, scope: !4079)
!4083 = !DILocalVariable(name: "arg", arg: 2, scope: !4079, file: !32, line: 149, type: !2787)
!4084 = !DILocation(line: 149, column: 38, scope: !4079)
!4085 = !DILocation(line: 151, column: 10, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4079, file: !32, line: 151, column: 2)
!4087 = !DILocation(line: 154, column: 11, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 154, column: 4)
!4089 = !DILocation(line: 156, column: 11, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 156, column: 4)
!4091 = !DILocation(line: 159, column: 40, scope: !4092)
!4092 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 159, column: 4)
!4093 = !DILocation(line: 159, column: 30, scope: !4092)
!4094 = !DILocation(line: 159, column: 11, scope: !4092)
!4095 = !DILocation(line: 162, column: 26, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 162, column: 4)
!4097 = !DILocation(line: 162, column: 11, scope: !4096)
!4098 = !DILocation(line: 165, column: 33, scope: !4099, inlinedAt: !4100)
!4099 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4100 = !DILocation(line: 164, column: 4, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 164, column: 4)
!4102 = !DILocation(line: 165, column: 2, scope: !4099, inlinedAt: !4100)
!4103 = !DILocation(line: 167, column: 2, scope: !4099, inlinedAt: !4100)
!4104 = !DILocalVariable(name: "flags", scope: !4105, file: !32, line: 167, type: !1675, align: 4)
!4105 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 167, column: 4)
!4106 = !DILocation(line: 167, column: 15, scope: !4105)
!4107 = !DILocation(line: 167, column: 23, scope: !4105)
!4108 = !DILocalVariable(name: "width", scope: !4105, file: !32, line: 168, type: !1675, align: 4)
!4109 = !DILocation(line: 168, column: 9, scope: !4105)
!4110 = !DILocation(line: 168, column: 17, scope: !4105)
!4111 = !DILocation(line: 174, column: 4, scope: !4105)
!4112 = !DILocation(line: 175, column: 4, scope: !4105)
!4113 = !DILocation(line: 175, column: 17, scope: !4105)
!4114 = !DILocation(line: 176, column: 11, scope: !4105)
!4115 = !DILocation(line: 176, column: 37, scope: !4105)
!4116 = !DILocation(line: 171, column: 5, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4105, file: !32, line: 170, column: 4)
!4118 = !DILocation(line: 171, column: 18, scope: !4117)
!4119 = !DILocation(line: 172, column: 5, scope: !4117)
!4120 = !DILocation(line: 172, column: 18, scope: !4117)
!4121 = !DILocation(line: 171, column: 5, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4105, file: !32, line: 170, column: 4)
!4123 = !DILocation(line: 171, column: 18, scope: !4122)
!4124 = !DILocation(line: 172, column: 5, scope: !4122)
!4125 = !DILocation(line: 172, column: 18, scope: !4122)
!4126 = !DILocalVariable(name: "flags", scope: !4127, file: !32, line: 178, type: !1675, align: 4)
!4127 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 178, column: 4)
!4128 = !DILocation(line: 178, column: 15, scope: !4127)
!4129 = !DILocation(line: 178, column: 23, scope: !4127)
!4130 = !DILocalVariable(name: "width", scope: !4127, file: !32, line: 179, type: !1675, align: 4)
!4131 = !DILocation(line: 179, column: 9, scope: !4127)
!4132 = !DILocation(line: 179, column: 17, scope: !4127)
!4133 = !DILocation(line: 185, column: 4, scope: !4127)
!4134 = !DILocation(line: 186, column: 4, scope: !4127)
!4135 = !DILocation(line: 186, column: 17, scope: !4127)
!4136 = !DILocation(line: 187, column: 21, scope: !4127)
!4137 = !DILocation(line: 187, column: 11, scope: !4127)
!4138 = !DILocation(line: 187, column: 45, scope: !4127)
!4139 = !DILocation(line: 182, column: 5, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4127, file: !32, line: 181, column: 4)
!4141 = !DILocation(line: 182, column: 18, scope: !4140)
!4142 = !DILocation(line: 183, column: 5, scope: !4140)
!4143 = !DILocation(line: 183, column: 18, scope: !4140)
!4144 = !DILocation(line: 182, column: 5, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4127, file: !32, line: 181, column: 4)
!4146 = !DILocation(line: 182, column: 18, scope: !4145)
!4147 = !DILocation(line: 183, column: 5, scope: !4145)
!4148 = !DILocation(line: 183, column: 18, scope: !4145)
!4149 = !DILocation(line: 189, column: 35, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4086, file: !32, line: 189, column: 4)
!4151 = !DILocation(line: 189, column: 29, scope: !4150)
!4152 = !DILocation(line: 189, column: 54, scope: !4150)
!4153 = !DILocation(line: 189, column: 11, scope: !4150)
!4154 = !DILocalVariable(name: "n", scope: !4079, file: !32, line: 192, type: !96, align: 8)
!4155 = !DILocation(line: 192, column: 7, scope: !4079)
!4156 = !DILocation(line: 192, column: 47, scope: !4079)
!4157 = !DILocation(line: 192, column: 11, scope: !4079)
!4158 = !DILocation(line: 193, column: 6, scope: !4079)
!4159 = !DILocation(line: 193, column: 20, scope: !4079)
!4160 = !DILocalVariable(name: "f", scope: !4161, file: !32, line: 354, type: !112, align: 8)
!4161 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !1830, file: !1830, line: 352, scopeLine: 352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4162 = !DILocation(line: 354, column: 12, scope: !4161, inlinedAt: !4163)
!4163 = !DILocation(line: 194, column: 6, scope: !4079)
!4164 = !DILocation(line: 354, column: 16, scope: !4161, inlinedAt: !4163)
!4165 = !DILocation(line: 354, column: 30, scope: !4161, inlinedAt: !4163)
!4166 = !DILocation(line: 355, column: 9, scope: !4161, inlinedAt: !4163)
!4167 = !DILocation(line: 194, column: 41, scope: !4079)
!4168 = !DILocation(line: 195, column: 10, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4079, file: !32, line: 195, column: 2)
!4170 = !DILocalVariable(name: "i", scope: !4171, file: !32, line: 198, type: !95, align: 8)
!4171 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 198, column: 4)
!4172 = !DILocation(line: 198, column: 8, scope: !4171)
!4173 = !DILocation(line: 13, column: 11, scope: !4174, inlinedAt: !4176)
!4174 = distinct !DILexicalBlock(scope: !4175, file: !2827, line: 17, column: 1)
!4175 = distinct !DISubprogram(name: "any_to_enum_ordinal", linkageName: "any_to_enum_ordinal", scope: !2827, file: !2827, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4176 = !DILocation(line: 198, column: 12, scope: !4171)
!4177 = !DILocation(line: 14, column: 11, scope: !4174, inlinedAt: !4176)
!4178 = !DILocation(line: 200, column: 20, scope: !4179, inlinedAt: !4180)
!4179 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !1830, file: !1830, line: 198, scopeLine: 198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4180 = !DILocation(line: 18, column: 20, scope: !4175, inlinedAt: !4176)
!4181 = !DILocation(line: 200, column: 30, scope: !4179, inlinedAt: !4180)
!4182 = !DILocation(line: 22, column: 11, scope: !4183, inlinedAt: !4185)
!4183 = distinct !DILexicalBlock(scope: !4184, file: !2827, line: 26, column: 1)
!4184 = distinct !DISubprogram(name: "any_to_int", linkageName: "any_to_int", scope: !2827, file: !2827, line: 25, scopeLine: 25, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4185 = !DILocation(line: 18, column: 9, scope: !4175, inlinedAt: !4176)
!4186 = !DILocation(line: 23, column: 11, scope: !4183, inlinedAt: !4185)
!4187 = !DILocalVariable(name: "any_type", scope: !4184, file: !32, line: 27, type: !93, align: 8)
!4188 = !DILocation(line: 27, column: 9, scope: !4184, inlinedAt: !4185)
!4189 = !DILocation(line: 27, column: 20, scope: !4184, inlinedAt: !4185)
!4190 = !DILocalVariable(name: "kind", scope: !4184, file: !32, line: 28, type: !57, align: 1)
!4191 = !DILocation(line: 28, column: 11, scope: !4184, inlinedAt: !4185)
!4192 = !DILocation(line: 28, column: 18, scope: !4184, inlinedAt: !4185)
!4193 = !DILocalVariable(name: "is_mixed_signed", scope: !4184, file: !32, line: 29, type: !432, align: 1)
!4194 = !DILocation(line: 29, column: 7, scope: !4184, inlinedAt: !4185)
!4195 = !DILocation(line: 29, column: 41, scope: !4184, inlinedAt: !4185)
!4196 = !DILocation(line: 29, column: 25, scope: !4184, inlinedAt: !4185)
!4197 = !DILocalVariable(name: "max", scope: !4184, file: !32, line: 30, type: !95, align: 8)
!4198 = !DILocation(line: 30, column: 8, scope: !4184, inlinedAt: !4185)
!4199 = !DILocation(line: 30, column: 14, scope: !4184, inlinedAt: !4185)
!4200 = !DILocalVariable(name: "min", scope: !4184, file: !32, line: 31, type: !95, align: 8)
!4201 = !DILocation(line: 31, column: 8, scope: !4184, inlinedAt: !4185)
!4202 = !DILocation(line: 31, column: 14, scope: !4184, inlinedAt: !4185)
!4203 = !DILocation(line: 34, column: 8, scope: !4204, inlinedAt: !4185)
!4204 = distinct !DILexicalBlock(scope: !4184, file: !2827, line: 32, column: 2)
!4205 = !DILocalVariable(name: "c", scope: !4206, file: !32, line: 35, type: !2851, align: 1)
!4206 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 35, column: 4)
!4207 = !DILocation(line: 35, column: 10, scope: !4206, inlinedAt: !4185)
!4208 = !DILocation(line: 35, column: 22, scope: !4206, inlinedAt: !4185)
!4209 = !DILocation(line: 35, column: 16, scope: !4206, inlinedAt: !4185)
!4210 = !DILocation(line: 36, column: 8, scope: !4206, inlinedAt: !4185)
!4211 = !DILocation(line: 36, column: 27, scope: !4206, inlinedAt: !4185)
!4212 = !DILocation(line: 36, column: 41, scope: !4206, inlinedAt: !4185)
!4213 = !DILocation(line: 37, column: 12, scope: !4206, inlinedAt: !4185)
!4214 = !DILocation(line: 38, column: 8, scope: !4204, inlinedAt: !4185)
!4215 = !DILocalVariable(name: "s", scope: !4216, file: !32, line: 39, type: !2862, align: 2)
!4216 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 39, column: 4)
!4217 = !DILocation(line: 39, column: 10, scope: !4216, inlinedAt: !4185)
!4218 = !DILocation(line: 39, column: 23, scope: !4216, inlinedAt: !4185)
!4219 = !DILocation(line: 39, column: 16, scope: !4216, inlinedAt: !4185)
!4220 = !DILocation(line: 40, column: 8, scope: !4216, inlinedAt: !4185)
!4221 = !DILocation(line: 40, column: 27, scope: !4216, inlinedAt: !4185)
!4222 = !DILocation(line: 40, column: 41, scope: !4216, inlinedAt: !4185)
!4223 = !DILocation(line: 41, column: 8, scope: !4216, inlinedAt: !4185)
!4224 = !DILocation(line: 41, column: 12, scope: !4216, inlinedAt: !4185)
!4225 = !DILocation(line: 41, column: 19, scope: !4216, inlinedAt: !4185)
!4226 = !DILocation(line: 41, column: 23, scope: !4216, inlinedAt: !4185)
!4227 = !DILocation(line: 41, column: 35, scope: !4216, inlinedAt: !4185)
!4228 = !DILocation(line: 42, column: 12, scope: !4216, inlinedAt: !4185)
!4229 = !DILocation(line: 43, column: 8, scope: !4204, inlinedAt: !4185)
!4230 = !DILocalVariable(name: "i", scope: !4231, file: !32, line: 44, type: !11, align: 4)
!4231 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 44, column: 4)
!4232 = !DILocation(line: 44, column: 8, scope: !4231, inlinedAt: !4185)
!4233 = !DILocation(line: 44, column: 19, scope: !4231, inlinedAt: !4185)
!4234 = !DILocation(line: 44, column: 14, scope: !4231, inlinedAt: !4185)
!4235 = !DILocation(line: 45, column: 8, scope: !4231, inlinedAt: !4185)
!4236 = !DILocation(line: 45, column: 27, scope: !4231, inlinedAt: !4185)
!4237 = !DILocation(line: 45, column: 41, scope: !4231, inlinedAt: !4185)
!4238 = !DILocation(line: 46, column: 8, scope: !4231, inlinedAt: !4185)
!4239 = !DILocation(line: 46, column: 12, scope: !4231, inlinedAt: !4185)
!4240 = !DILocation(line: 46, column: 19, scope: !4231, inlinedAt: !4185)
!4241 = !DILocation(line: 46, column: 23, scope: !4231, inlinedAt: !4185)
!4242 = !DILocation(line: 46, column: 35, scope: !4231, inlinedAt: !4185)
!4243 = !DILocation(line: 47, column: 12, scope: !4231, inlinedAt: !4185)
!4244 = !DILocation(line: 48, column: 8, scope: !4204, inlinedAt: !4185)
!4245 = !DILocalVariable(name: "l", scope: !4246, file: !32, line: 49, type: !113, align: 8)
!4246 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 49, column: 4)
!4247 = !DILocation(line: 49, column: 9, scope: !4246, inlinedAt: !4185)
!4248 = !DILocation(line: 49, column: 21, scope: !4246, inlinedAt: !4185)
!4249 = !DILocation(line: 49, column: 15, scope: !4246, inlinedAt: !4185)
!4250 = !DILocation(line: 50, column: 8, scope: !4246, inlinedAt: !4185)
!4251 = !DILocation(line: 50, column: 27, scope: !4246, inlinedAt: !4185)
!4252 = !DILocation(line: 50, column: 41, scope: !4246, inlinedAt: !4185)
!4253 = !DILocation(line: 51, column: 8, scope: !4246, inlinedAt: !4185)
!4254 = !DILocation(line: 51, column: 12, scope: !4246, inlinedAt: !4185)
!4255 = !DILocation(line: 51, column: 19, scope: !4246, inlinedAt: !4185)
!4256 = !DILocation(line: 51, column: 23, scope: !4246, inlinedAt: !4185)
!4257 = !DILocation(line: 51, column: 35, scope: !4246, inlinedAt: !4185)
!4258 = !DILocation(line: 52, column: 12, scope: !4246, inlinedAt: !4185)
!4259 = !DILocation(line: 53, column: 8, scope: !4204, inlinedAt: !4185)
!4260 = !DILocalVariable(name: "i", scope: !4261, file: !32, line: 54, type: !2908, align: 16)
!4261 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 54, column: 4)
!4262 = !DILocation(line: 54, column: 11, scope: !4261, inlinedAt: !4185)
!4263 = !DILocation(line: 54, column: 25, scope: !4261, inlinedAt: !4185)
!4264 = !DILocation(line: 54, column: 17, scope: !4261, inlinedAt: !4185)
!4265 = !DILocation(line: 55, column: 8, scope: !4261, inlinedAt: !4185)
!4266 = !DILocation(line: 55, column: 27, scope: !4261, inlinedAt: !4185)
!4267 = !DILocation(line: 55, column: 41, scope: !4261, inlinedAt: !4185)
!4268 = !DILocation(line: 56, column: 8, scope: !4261, inlinedAt: !4185)
!4269 = !DILocation(line: 56, column: 12, scope: !4261, inlinedAt: !4185)
!4270 = !DILocation(line: 56, column: 19, scope: !4261, inlinedAt: !4185)
!4271 = !DILocation(line: 56, column: 23, scope: !4261, inlinedAt: !4185)
!4272 = !DILocation(line: 56, column: 35, scope: !4261, inlinedAt: !4185)
!4273 = !DILocation(line: 57, column: 12, scope: !4261, inlinedAt: !4185)
!4274 = !DILocation(line: 58, column: 8, scope: !4204, inlinedAt: !4185)
!4275 = !DILocalVariable(name: "c", scope: !4276, file: !32, line: 59, type: !4, align: 1)
!4276 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 59, column: 4)
!4277 = !DILocation(line: 59, column: 9, scope: !4276, inlinedAt: !4185)
!4278 = !DILocation(line: 59, column: 21, scope: !4276, inlinedAt: !4185)
!4279 = !DILocation(line: 59, column: 15, scope: !4276, inlinedAt: !4185)
!4280 = !DILocation(line: 60, column: 8, scope: !4276, inlinedAt: !4185)
!4281 = !DILocation(line: 60, column: 12, scope: !4276, inlinedAt: !4185)
!4282 = !DILocation(line: 60, column: 24, scope: !4276, inlinedAt: !4185)
!4283 = !DILocation(line: 61, column: 12, scope: !4276, inlinedAt: !4185)
!4284 = !DILocation(line: 62, column: 8, scope: !4204, inlinedAt: !4185)
!4285 = !DILocalVariable(name: "s", scope: !4286, file: !32, line: 63, type: !2934, align: 2)
!4286 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 63, column: 4)
!4287 = !DILocation(line: 63, column: 11, scope: !4286, inlinedAt: !4185)
!4288 = !DILocation(line: 63, column: 25, scope: !4286, inlinedAt: !4185)
!4289 = !DILocation(line: 63, column: 17, scope: !4286, inlinedAt: !4185)
!4290 = !DILocation(line: 64, column: 8, scope: !4286, inlinedAt: !4185)
!4291 = !DILocation(line: 64, column: 12, scope: !4286, inlinedAt: !4185)
!4292 = !DILocation(line: 64, column: 19, scope: !4286, inlinedAt: !4185)
!4293 = !DILocation(line: 64, column: 23, scope: !4286, inlinedAt: !4185)
!4294 = !DILocation(line: 64, column: 35, scope: !4286, inlinedAt: !4185)
!4295 = !DILocation(line: 65, column: 12, scope: !4286, inlinedAt: !4185)
!4296 = !DILocation(line: 66, column: 8, scope: !4204, inlinedAt: !4185)
!4297 = !DILocalVariable(name: "i", scope: !4298, file: !32, line: 67, type: !1675, align: 4)
!4298 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 67, column: 4)
!4299 = !DILocation(line: 67, column: 9, scope: !4298, inlinedAt: !4185)
!4300 = !DILocation(line: 67, column: 21, scope: !4298, inlinedAt: !4185)
!4301 = !DILocation(line: 67, column: 15, scope: !4298, inlinedAt: !4185)
!4302 = !DILocation(line: 68, column: 8, scope: !4298, inlinedAt: !4185)
!4303 = !DILocation(line: 68, column: 12, scope: !4298, inlinedAt: !4185)
!4304 = !DILocation(line: 68, column: 19, scope: !4298, inlinedAt: !4185)
!4305 = !DILocation(line: 68, column: 23, scope: !4298, inlinedAt: !4185)
!4306 = !DILocation(line: 68, column: 35, scope: !4298, inlinedAt: !4185)
!4307 = !DILocation(line: 69, column: 12, scope: !4298, inlinedAt: !4185)
!4308 = !DILocation(line: 70, column: 8, scope: !4204, inlinedAt: !4185)
!4309 = !DILocalVariable(name: "l", scope: !4310, file: !32, line: 71, type: !96, align: 8)
!4310 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 71, column: 4)
!4311 = !DILocation(line: 71, column: 10, scope: !4310, inlinedAt: !4185)
!4312 = !DILocation(line: 71, column: 23, scope: !4310, inlinedAt: !4185)
!4313 = !DILocation(line: 71, column: 16, scope: !4310, inlinedAt: !4185)
!4314 = !DILocation(line: 72, column: 8, scope: !4310, inlinedAt: !4185)
!4315 = !DILocation(line: 72, column: 12, scope: !4310, inlinedAt: !4185)
!4316 = !DILocation(line: 72, column: 19, scope: !4310, inlinedAt: !4185)
!4317 = !DILocation(line: 72, column: 23, scope: !4310, inlinedAt: !4185)
!4318 = !DILocation(line: 72, column: 35, scope: !4310, inlinedAt: !4185)
!4319 = !DILocation(line: 73, column: 12, scope: !4310, inlinedAt: !4185)
!4320 = !DILocation(line: 74, column: 8, scope: !4204, inlinedAt: !4185)
!4321 = !DILocalVariable(name: "i", scope: !4322, file: !32, line: 75, type: !2618, align: 16)
!4322 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 75, column: 4)
!4323 = !DILocation(line: 75, column: 12, scope: !4322, inlinedAt: !4185)
!4324 = !DILocation(line: 75, column: 27, scope: !4322, inlinedAt: !4185)
!4325 = !DILocation(line: 75, column: 18, scope: !4322, inlinedAt: !4185)
!4326 = !DILocation(line: 76, column: 8, scope: !4322, inlinedAt: !4185)
!4327 = !DILocation(line: 76, column: 12, scope: !4322, inlinedAt: !4185)
!4328 = !DILocation(line: 76, column: 19, scope: !4322, inlinedAt: !4185)
!4329 = !DILocation(line: 76, column: 23, scope: !4322, inlinedAt: !4185)
!4330 = !DILocation(line: 76, column: 35, scope: !4322, inlinedAt: !4185)
!4331 = !DILocation(line: 77, column: 12, scope: !4322, inlinedAt: !4185)
!4332 = !DILocation(line: 165, column: 33, scope: !4333, inlinedAt: !4334)
!4333 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4334 = !DILocation(line: 79, column: 4, scope: !4335, inlinedAt: !4185)
!4335 = distinct !DILexicalBlock(scope: !4204, file: !2827, line: 79, column: 4)
!4336 = !DILocation(line: 165, column: 2, scope: !4333, inlinedAt: !4334)
!4337 = !DILocation(line: 167, column: 2, scope: !4333, inlinedAt: !4334)
!4338 = !DILocation(line: 199, column: 11, scope: !4171)
!4339 = !DILocation(line: 199, column: 15, scope: !4171)
!4340 = !DILocation(line: 199, column: 88, scope: !4171)
!4341 = !DILocation(line: 200, column: 27, scope: !4171)
!4342 = !DILocation(line: 200, column: 42, scope: !4171)
!4343 = !DILocation(line: 200, column: 11, scope: !4171)
!4344 = !DILocation(line: 202, column: 11, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 202, column: 4)
!4346 = !DILocation(line: 204, column: 11, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 204, column: 4)
!4348 = !DILocation(line: 206, column: 11, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 206, column: 4)
!4350 = !DILocation(line: 208, column: 11, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 208, column: 4)
!4352 = !DILocation(line: 210, column: 8, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 210, column: 4)
!4354 = !DILocation(line: 212, column: 30, scope: !4355)
!4355 = distinct !DILexicalBlock(scope: !4353, file: !32, line: 211, column: 4)
!4356 = !DILocation(line: 212, column: 12, scope: !4355)
!4357 = !DILocation(line: 214, column: 8, scope: !4353)
!4358 = !DILocation(line: 216, column: 30, scope: !4359)
!4359 = distinct !DILexicalBlock(scope: !4353, file: !32, line: 215, column: 4)
!4360 = !DILocation(line: 216, column: 47, scope: !4359)
!4361 = !DILocation(line: 216, column: 74, scope: !4359)
!4362 = !DILocation(line: 216, column: 12, scope: !4359)
!4363 = !DILocation(line: 218, column: 8, scope: !4353)
!4364 = !DILocation(line: 220, column: 30, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4353, file: !32, line: 219, column: 4)
!4366 = !DILocation(line: 220, column: 47, scope: !4365)
!4367 = !DILocation(line: 220, column: 74, scope: !4365)
!4368 = !DILocation(line: 220, column: 12, scope: !4365)
!4369 = !DILocation(line: 200, column: 20, scope: !4370, inlinedAt: !4371)
!4370 = distinct !DISubprogram(name: "as_inner", linkageName: "as_inner", scope: !1830, file: !1830, line: 198, scopeLine: 198, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4371 = !DILocation(line: 222, column: 24, scope: !4353)
!4372 = !DILocation(line: 200, column: 30, scope: !4370, inlinedAt: !4371)
!4373 = !DILocation(line: 222, column: 11, scope: !4353)
!4374 = !DILocalVariable(name: "inner", scope: !4375, file: !32, line: 224, type: !93, align: 8)
!4375 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 224, column: 4)
!4376 = !DILocation(line: 224, column: 11, scope: !4375)
!4377 = !DILocation(line: 224, column: 19, scope: !4375)
!4378 = !DILocalVariable(name: "pointer", scope: !4375, file: !32, line: 225, type: !4379, align: 8)
!4379 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void**", baseType: !19, size: 64, align: 64, dwarfAddressSpace: 0)
!4380 = !DILocation(line: 225, column: 11, scope: !4375)
!4381 = !DILocation(line: 225, column: 21, scope: !4375)
!4382 = !DILocation(line: 226, column: 8, scope: !4375)
!4383 = !DILocalVariable(name: "deref", scope: !4384, file: !32, line: 228, type: !2787, align: 8)
!4384 = distinct !DILexicalBlock(scope: !4375, file: !32, line: 227, column: 4)
!4385 = !DILocation(line: 228, column: 9, scope: !4384)
!4386 = !DILocation(line: 228, column: 27, scope: !4384)
!4387 = !DILocation(line: 190, column: 20, scope: !4388, inlinedAt: !4389)
!4388 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !1830, file: !1830, line: 188, scopeLine: 188, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4389 = !DILocation(line: 228, column: 17, scope: !4384)
!4390 = !DILocation(line: 190, column: 25, scope: !4388, inlinedAt: !4389)
!4391 = !DILocation(line: 229, column: 45, scope: !4384)
!4392 = !DILocation(line: 229, column: 9, scope: !4384)
!4393 = !DILocation(line: 230, column: 9, scope: !4384)
!4394 = !DILocation(line: 230, column: 23, scope: !4384)
!4395 = !DILocalVariable(name: "f", scope: !4396, file: !32, line: 354, type: !112, align: 8)
!4396 = distinct !DISubprogram(name: "@catch", linkageName: "@catch", scope: !1830, file: !1830, line: 352, scopeLine: 352, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4397 = !DILocation(line: 354, column: 12, scope: !4396, inlinedAt: !4398)
!4398 = !DILocation(line: 231, column: 9, scope: !4384)
!4399 = !DILocation(line: 354, column: 16, scope: !4396, inlinedAt: !4398)
!4400 = !DILocation(line: 354, column: 30, scope: !4396, inlinedAt: !4398)
!4401 = !DILocation(line: 355, column: 9, scope: !4396, inlinedAt: !4398)
!4402 = !DILocation(line: 231, column: 44, scope: !4384)
!4403 = !DILocalVariable(name: "flags", scope: !4375, file: !32, line: 233, type: !1675, align: 4)
!4404 = !DILocation(line: 233, column: 15, scope: !4375)
!4405 = !DILocation(line: 233, column: 23, scope: !4375)
!4406 = !DILocalVariable(name: "width", scope: !4375, file: !32, line: 234, type: !1675, align: 4)
!4407 = !DILocation(line: 234, column: 9, scope: !4375)
!4408 = !DILocation(line: 234, column: 17, scope: !4375)
!4409 = !DILocation(line: 240, column: 4, scope: !4375)
!4410 = !DILocation(line: 240, column: 17, scope: !4375)
!4411 = !DILocation(line: 241, column: 11, scope: !4375)
!4412 = !DILocation(line: 237, column: 5, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !4375, file: !32, line: 236, column: 4)
!4414 = !DILocation(line: 237, column: 18, scope: !4413)
!4415 = !DILocation(line: 238, column: 5, scope: !4413)
!4416 = !DILocation(line: 238, column: 18, scope: !4413)
!4417 = !DILocation(line: 241, column: 36, scope: !4375)
!4418 = !DILocation(line: 237, column: 5, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4375, file: !32, line: 236, column: 4)
!4420 = !DILocation(line: 237, column: 18, scope: !4419)
!4421 = !DILocation(line: 238, column: 5, scope: !4419)
!4422 = !DILocation(line: 238, column: 18, scope: !4419)
!4423 = !DILocation(line: 237, column: 5, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4375, file: !32, line: 236, column: 4)
!4425 = !DILocation(line: 237, column: 18, scope: !4424)
!4426 = !DILocation(line: 238, column: 5, scope: !4424)
!4427 = !DILocation(line: 238, column: 18, scope: !4424)
!4428 = !DILocalVariable(name: "flags", scope: !4429, file: !32, line: 244, type: !1675, align: 4)
!4429 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 244, column: 4)
!4430 = !DILocation(line: 244, column: 15, scope: !4429)
!4431 = !DILocation(line: 244, column: 23, scope: !4429)
!4432 = !DILocalVariable(name: "width", scope: !4429, file: !32, line: 245, type: !1675, align: 4)
!4433 = !DILocation(line: 245, column: 9, scope: !4429)
!4434 = !DILocation(line: 245, column: 17, scope: !4429)
!4435 = !DILocation(line: 251, column: 4, scope: !4429)
!4436 = !DILocation(line: 252, column: 4, scope: !4429)
!4437 = !DILocation(line: 252, column: 17, scope: !4429)
!4438 = !DILocalVariable(name: "inner", scope: !4429, file: !32, line: 253, type: !93, align: 8)
!4439 = !DILocation(line: 253, column: 11, scope: !4429)
!4440 = !DILocation(line: 253, column: 19, scope: !4429)
!4441 = !DILocalVariable(name: "size", scope: !4429, file: !32, line: 254, type: !95, align: 8)
!4442 = !DILocation(line: 254, column: 8, scope: !4429)
!4443 = !DILocation(line: 254, column: 15, scope: !4429)
!4444 = !DILocalVariable(name: "alen", scope: !4429, file: !32, line: 255, type: !95, align: 8)
!4445 = !DILocation(line: 255, column: 8, scope: !4429)
!4446 = !DILocation(line: 255, column: 15, scope: !4429)
!4447 = !DILocalVariable(name: "ptr", scope: !4429, file: !32, line: 257, type: !19, align: 8)
!4448 = !DILocation(line: 257, column: 10, scope: !4429)
!4449 = !DILocation(line: 257, column: 17, scope: !4429)
!4450 = !DILocalVariable(name: "len", scope: !4429, file: !32, line: 258, type: !95, align: 8)
!4451 = !DILocation(line: 258, column: 8, scope: !4429)
!4452 = !DILocation(line: 258, column: 14, scope: !4429)
!4453 = !DILocation(line: 248, column: 5, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 247, column: 4)
!4455 = !DILocation(line: 248, column: 18, scope: !4454)
!4456 = !DILocation(line: 249, column: 5, scope: !4454)
!4457 = !DILocation(line: 249, column: 18, scope: !4454)
!4458 = !DILocalVariable(name: "i", scope: !4459, file: !32, line: 259, type: !95, align: 8)
!4459 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 259, column: 4)
!4460 = !DILocation(line: 259, column: 13, scope: !4459)
!4461 = !DILocation(line: 259, column: 17, scope: !4459)
!4462 = !DILocation(line: 259, column: 20, scope: !4459)
!4463 = !DILocation(line: 259, column: 24, scope: !4459)
!4464 = !DILocation(line: 261, column: 9, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4459, file: !32, line: 260, column: 4)
!4466 = !DILocation(line: 261, column: 17, scope: !4465)
!4467 = !DILocation(line: 261, column: 24, scope: !4465)
!4468 = !DILocation(line: 248, column: 5, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 247, column: 4)
!4470 = !DILocation(line: 248, column: 18, scope: !4469)
!4471 = !DILocation(line: 249, column: 5, scope: !4469)
!4472 = !DILocation(line: 249, column: 18, scope: !4469)
!4473 = !DILocation(line: 262, column: 5, scope: !4465)
!4474 = !DILocation(line: 190, column: 20, scope: !4475, inlinedAt: !4476)
!4475 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !1830, file: !1830, line: 188, scopeLine: 188, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4476 = !DILocation(line: 262, column: 25, scope: !4465)
!4477 = !DILocation(line: 190, column: 25, scope: !4475, inlinedAt: !4476)
!4478 = !DILocation(line: 262, column: 12, scope: !4465)
!4479 = !DILocation(line: 248, column: 5, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 247, column: 4)
!4481 = !DILocation(line: 248, column: 18, scope: !4480)
!4482 = !DILocation(line: 249, column: 5, scope: !4480)
!4483 = !DILocation(line: 249, column: 18, scope: !4480)
!4484 = !DILocation(line: 263, column: 5, scope: !4465)
!4485 = !DILocation(line: 263, column: 12, scope: !4465)
!4486 = !DILocation(line: 259, column: 30, scope: !4459)
!4487 = !DILocation(line: 265, column: 4, scope: !4429)
!4488 = !DILocation(line: 265, column: 11, scope: !4429)
!4489 = !DILocation(line: 248, column: 5, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 247, column: 4)
!4491 = !DILocation(line: 248, column: 18, scope: !4490)
!4492 = !DILocation(line: 249, column: 5, scope: !4490)
!4493 = !DILocation(line: 249, column: 18, scope: !4490)
!4494 = !DILocation(line: 266, column: 11, scope: !4429)
!4495 = !DILocation(line: 248, column: 5, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4429, file: !32, line: 247, column: 4)
!4497 = !DILocation(line: 248, column: 18, scope: !4496)
!4498 = !DILocation(line: 249, column: 5, scope: !4496)
!4499 = !DILocation(line: 249, column: 18, scope: !4496)
!4500 = !DILocalVariable(name: "flags", scope: !4501, file: !32, line: 268, type: !1675, align: 4)
!4501 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 268, column: 4)
!4502 = !DILocation(line: 268, column: 15, scope: !4501)
!4503 = !DILocation(line: 268, column: 23, scope: !4501)
!4504 = !DILocalVariable(name: "width", scope: !4501, file: !32, line: 269, type: !1675, align: 4)
!4505 = !DILocation(line: 269, column: 9, scope: !4501)
!4506 = !DILocation(line: 269, column: 17, scope: !4501)
!4507 = !DILocation(line: 275, column: 4, scope: !4501)
!4508 = !DILocation(line: 276, column: 4, scope: !4501)
!4509 = !DILocation(line: 276, column: 17, scope: !4501)
!4510 = !DILocalVariable(name: "inner", scope: !4501, file: !32, line: 278, type: !93, align: 8)
!4511 = !DILocation(line: 278, column: 11, scope: !4501)
!4512 = !DILocation(line: 278, column: 19, scope: !4501)
!4513 = !DILocalVariable(name: "size", scope: !4501, file: !32, line: 279, type: !95, align: 8)
!4514 = !DILocation(line: 279, column: 8, scope: !4501)
!4515 = !DILocation(line: 279, column: 15, scope: !4501)
!4516 = !DILocalVariable(name: "vlen", scope: !4501, file: !32, line: 280, type: !95, align: 8)
!4517 = !DILocation(line: 280, column: 8, scope: !4501)
!4518 = !DILocation(line: 280, column: 15, scope: !4501)
!4519 = !DILocalVariable(name: "ptr", scope: !4501, file: !32, line: 282, type: !19, align: 8)
!4520 = !DILocation(line: 282, column: 10, scope: !4501)
!4521 = !DILocation(line: 282, column: 17, scope: !4501)
!4522 = !DILocalVariable(name: "len", scope: !4501, file: !32, line: 283, type: !95, align: 8)
!4523 = !DILocation(line: 283, column: 8, scope: !4501)
!4524 = !DILocation(line: 283, column: 14, scope: !4501)
!4525 = !DILocation(line: 272, column: 5, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 271, column: 4)
!4527 = !DILocation(line: 272, column: 18, scope: !4526)
!4528 = !DILocation(line: 273, column: 5, scope: !4526)
!4529 = !DILocation(line: 273, column: 18, scope: !4526)
!4530 = !DILocalVariable(name: "i", scope: !4531, file: !32, line: 284, type: !95, align: 8)
!4531 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 284, column: 4)
!4532 = !DILocation(line: 284, column: 13, scope: !4531)
!4533 = !DILocation(line: 284, column: 17, scope: !4531)
!4534 = !DILocation(line: 284, column: 20, scope: !4531)
!4535 = !DILocation(line: 284, column: 24, scope: !4531)
!4536 = !DILocation(line: 286, column: 9, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4531, file: !32, line: 285, column: 4)
!4538 = !DILocation(line: 286, column: 17, scope: !4537)
!4539 = !DILocation(line: 286, column: 24, scope: !4537)
!4540 = !DILocation(line: 272, column: 5, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 271, column: 4)
!4542 = !DILocation(line: 272, column: 18, scope: !4541)
!4543 = !DILocation(line: 273, column: 5, scope: !4541)
!4544 = !DILocation(line: 273, column: 18, scope: !4541)
!4545 = !DILocation(line: 287, column: 5, scope: !4537)
!4546 = !DILocation(line: 190, column: 20, scope: !4547, inlinedAt: !4548)
!4547 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !1830, file: !1830, line: 188, scopeLine: 188, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4548 = !DILocation(line: 287, column: 25, scope: !4537)
!4549 = !DILocation(line: 190, column: 25, scope: !4547, inlinedAt: !4548)
!4550 = !DILocation(line: 287, column: 12, scope: !4537)
!4551 = !DILocation(line: 272, column: 5, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 271, column: 4)
!4553 = !DILocation(line: 272, column: 18, scope: !4552)
!4554 = !DILocation(line: 273, column: 5, scope: !4552)
!4555 = !DILocation(line: 273, column: 18, scope: !4552)
!4556 = !DILocation(line: 288, column: 5, scope: !4537)
!4557 = !DILocation(line: 288, column: 12, scope: !4537)
!4558 = !DILocation(line: 284, column: 30, scope: !4531)
!4559 = !DILocation(line: 290, column: 4, scope: !4501)
!4560 = !DILocation(line: 290, column: 11, scope: !4501)
!4561 = !DILocation(line: 272, column: 5, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 271, column: 4)
!4563 = !DILocation(line: 272, column: 18, scope: !4562)
!4564 = !DILocation(line: 273, column: 5, scope: !4562)
!4565 = !DILocation(line: 273, column: 18, scope: !4562)
!4566 = !DILocation(line: 291, column: 11, scope: !4501)
!4567 = !DILocation(line: 272, column: 5, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4501, file: !32, line: 271, column: 4)
!4569 = !DILocation(line: 272, column: 18, scope: !4568)
!4570 = !DILocation(line: 273, column: 5, scope: !4568)
!4571 = !DILocation(line: 273, column: 18, scope: !4568)
!4572 = !DILocalVariable(name: "inner", scope: !4573, file: !32, line: 294, type: !93, align: 8)
!4573 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 294, column: 4)
!4574 = !DILocation(line: 294, column: 11, scope: !4573)
!4575 = !DILocation(line: 294, column: 19, scope: !4573)
!4576 = !DILocation(line: 295, column: 8, scope: !4573)
!4577 = !DILocation(line: 295, column: 38, scope: !4573)
!4578 = !DILocalVariable(name: "flags", scope: !4573, file: !32, line: 296, type: !1675, align: 4)
!4579 = !DILocation(line: 296, column: 15, scope: !4573)
!4580 = !DILocation(line: 296, column: 23, scope: !4573)
!4581 = !DILocalVariable(name: "width", scope: !4573, file: !32, line: 297, type: !1675, align: 4)
!4582 = !DILocation(line: 297, column: 9, scope: !4573)
!4583 = !DILocation(line: 297, column: 17, scope: !4573)
!4584 = !DILocation(line: 303, column: 4, scope: !4573)
!4585 = !DILocation(line: 304, column: 4, scope: !4573)
!4586 = !DILocation(line: 304, column: 17, scope: !4573)
!4587 = !DILocalVariable(name: "size", scope: !4573, file: !32, line: 305, type: !95, align: 8)
!4588 = !DILocation(line: 305, column: 8, scope: !4573)
!4589 = !DILocation(line: 305, column: 15, scope: !4573)
!4590 = !DILocalVariable(name: "temp", scope: !4573, file: !32, line: 307, type: !4591, align: 8)
!4591 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !252, size: 64, align: 64, dwarfAddressSpace: 0)
!4592 = !DILocation(line: 307, column: 12, scope: !4573)
!4593 = !DILocation(line: 307, column: 20, scope: !4573)
!4594 = !DILocalVariable(name: "ptr", scope: !4573, file: !32, line: 308, type: !19, align: 8)
!4595 = !DILocation(line: 308, column: 10, scope: !4573)
!4596 = !DILocation(line: 308, column: 23, scope: !4573)
!4597 = !DILocalVariable(name: "slen", scope: !4573, file: !32, line: 309, type: !95, align: 8)
!4598 = !DILocation(line: 309, column: 8, scope: !4573)
!4599 = !DILocation(line: 309, column: 15, scope: !4573)
!4600 = !DILocalVariable(name: "len", scope: !4573, file: !32, line: 310, type: !95, align: 8)
!4601 = !DILocation(line: 310, column: 8, scope: !4573)
!4602 = !DILocation(line: 310, column: 14, scope: !4573)
!4603 = !DILocation(line: 300, column: 5, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 299, column: 4)
!4605 = !DILocation(line: 300, column: 18, scope: !4604)
!4606 = !DILocation(line: 301, column: 5, scope: !4604)
!4607 = !DILocation(line: 301, column: 18, scope: !4604)
!4608 = !DILocalVariable(name: "i", scope: !4609, file: !32, line: 311, type: !95, align: 8)
!4609 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 311, column: 4)
!4610 = !DILocation(line: 311, column: 13, scope: !4609)
!4611 = !DILocation(line: 311, column: 17, scope: !4609)
!4612 = !DILocation(line: 311, column: 20, scope: !4609)
!4613 = !DILocation(line: 311, column: 24, scope: !4609)
!4614 = !DILocation(line: 313, column: 9, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4609, file: !32, line: 312, column: 4)
!4616 = !DILocation(line: 313, column: 17, scope: !4615)
!4617 = !DILocation(line: 313, column: 24, scope: !4615)
!4618 = !DILocation(line: 300, column: 5, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 299, column: 4)
!4620 = !DILocation(line: 300, column: 18, scope: !4619)
!4621 = !DILocation(line: 301, column: 5, scope: !4619)
!4622 = !DILocation(line: 301, column: 18, scope: !4619)
!4623 = !DILocation(line: 314, column: 5, scope: !4615)
!4624 = !DILocation(line: 190, column: 20, scope: !4625, inlinedAt: !4626)
!4625 = distinct !DISubprogram(name: "any_make", linkageName: "any_make", scope: !1830, file: !1830, line: 188, scopeLine: 188, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4626 = !DILocation(line: 314, column: 25, scope: !4615)
!4627 = !DILocation(line: 190, column: 25, scope: !4625, inlinedAt: !4626)
!4628 = !DILocation(line: 314, column: 12, scope: !4615)
!4629 = !DILocation(line: 300, column: 5, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 299, column: 4)
!4631 = !DILocation(line: 300, column: 18, scope: !4630)
!4632 = !DILocation(line: 301, column: 5, scope: !4630)
!4633 = !DILocation(line: 301, column: 18, scope: !4630)
!4634 = !DILocation(line: 315, column: 5, scope: !4615)
!4635 = !DILocation(line: 315, column: 12, scope: !4615)
!4636 = !DILocation(line: 311, column: 30, scope: !4609)
!4637 = !DILocation(line: 317, column: 4, scope: !4573)
!4638 = !DILocation(line: 317, column: 11, scope: !4573)
!4639 = !DILocation(line: 300, column: 5, scope: !4640)
!4640 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 299, column: 4)
!4641 = !DILocation(line: 300, column: 18, scope: !4640)
!4642 = !DILocation(line: 301, column: 5, scope: !4640)
!4643 = !DILocation(line: 301, column: 18, scope: !4640)
!4644 = !DILocation(line: 318, column: 11, scope: !4573)
!4645 = !DILocation(line: 300, column: 5, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4573, file: !32, line: 299, column: 4)
!4647 = !DILocation(line: 300, column: 18, scope: !4646)
!4648 = !DILocation(line: 301, column: 5, scope: !4646)
!4649 = !DILocation(line: 301, column: 18, scope: !4646)
!4650 = !DILocation(line: 165, column: 33, scope: !4651, inlinedAt: !4652)
!4651 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !1830, file: !1830, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4652 = !DILocation(line: 321, column: 4, scope: !4653)
!4653 = distinct !DILexicalBlock(scope: !4169, file: !32, line: 321, column: 4)
!4654 = !DILocation(line: 165, column: 2, scope: !4651, inlinedAt: !4652)
!4655 = !DILocation(line: 167, column: 2, scope: !4651, inlinedAt: !4652)
!4656 = !DILocation(line: 324, column: 9, scope: !4079)
!4657 = distinct !DISubprogram(name: "vprintf", linkageName: "std.io.Formatter.vprintf", scope: !32, file: !32, line: 356, type: !3904, scopeLine: 356, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4658 = !DILocation(line: 357, column: 1, scope: !4657)
!4659 = !DILocalVariable(name: "self", arg: 1, scope: !4657, file: !32, line: 356, type: !1662)
!4660 = !DILocation(line: 356, column: 27, scope: !4657)
!4661 = !DILocalVariable(name: "format", arg: 2, scope: !4657, file: !32, line: 356, type: !252)
!4662 = !DILocation(line: 356, column: 41, scope: !4657)
!4663 = !DILocalVariable(name: "anys", arg: 3, scope: !4657, file: !32, line: 356, type: !3602)
!4664 = !DILocation(line: 356, column: 55, scope: !4657)
!4665 = !DILocation(line: 358, column: 2, scope: !4657)
!4666 = !DILocation(line: 358, column: 21, scope: !4657)
!4667 = !DILocation(line: 359, column: 7, scope: !4657)
!4668 = !DILocation(line: 362, column: 3, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !4657, file: !32, line: 360, column: 2)
!4670 = !DILocation(line: 362, column: 18, scope: !4669)
!4671 = !DILocalVariable(name: "total_len", scope: !4657, file: !32, line: 364, type: !95, align: 8)
!4672 = !DILocation(line: 364, column: 6, scope: !4657)
!4673 = !DILocalVariable(name: "format_len", scope: !4657, file: !32, line: 365, type: !95, align: 8)
!4674 = !DILocation(line: 365, column: 6, scope: !4657)
!4675 = !DILocation(line: 365, column: 19, scope: !4657)
!4676 = !DILocalVariable(name: "variant_index", scope: !4657, file: !32, line: 366, type: !95, align: 8)
!4677 = !DILocation(line: 366, column: 6, scope: !4657)
!4678 = !DILocation(line: 366, column: 22, scope: !4657)
!4679 = !DILocalVariable(name: "i", scope: !4680, file: !32, line: 367, type: !95, align: 8)
!4680 = distinct !DILexicalBlock(scope: !4657, file: !32, line: 367, column: 2)
!4681 = !DILocation(line: 367, column: 11, scope: !4680)
!4682 = !DILocation(line: 367, column: 15, scope: !4680)
!4683 = !DILocation(line: 367, column: 18, scope: !4680)
!4684 = !DILocation(line: 367, column: 22, scope: !4680)
!4685 = !DILocalVariable(name: "c", scope: !4686, file: !32, line: 370, type: !4, align: 1)
!4686 = distinct !DILexicalBlock(scope: !4680, file: !32, line: 368, column: 2)
!4687 = !DILocation(line: 370, column: 8, scope: !4686)
!4688 = !DILocation(line: 370, column: 12, scope: !4686)
!4689 = !DILocation(line: 370, column: 19, scope: !4686)
!4690 = !DILocation(line: 371, column: 7, scope: !4686)
!4691 = !DILocation(line: 374, column: 4, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 372, column: 3)
!4693 = !DILocation(line: 374, column: 17, scope: !4692)
!4694 = !DILocation(line: 375, column: 4, scope: !4692)
!4695 = !DILocation(line: 377, column: 3, scope: !4686)
!4696 = !DILocation(line: 378, column: 7, scope: !4686)
!4697 = !DILocation(line: 378, column: 12, scope: !4686)
!4698 = !DILocation(line: 336, column: 3, scope: !4699, inlinedAt: !4700)
!4699 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4700 = !DILocation(line: 378, column: 31, scope: !4686)
!4701 = !DILocation(line: 337, column: 9, scope: !4699, inlinedAt: !4700)
!4702 = !DILocation(line: 379, column: 7, scope: !4686)
!4703 = !DILocation(line: 379, column: 14, scope: !4686)
!4704 = !DILocation(line: 380, column: 7, scope: !4686)
!4705 = !DILocation(line: 382, column: 4, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 381, column: 3)
!4707 = !DILocation(line: 382, column: 17, scope: !4706)
!4708 = !DILocation(line: 383, column: 4, scope: !4706)
!4709 = !DILocation(line: 386, column: 3, scope: !4686)
!4710 = !DILocation(line: 387, column: 3, scope: !4686)
!4711 = !DILocation(line: 391, column: 15, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 391, column: 15)
!4713 = distinct !DILexicalBlock(scope: !4714, file: !32, line: 389, column: 4)
!4714 = distinct !DILexicalBlock(scope: !4715, file: !32, line: 388, column: 3)
!4715 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 387, column: 3)
!4716 = !DILocation(line: 391, column: 36, scope: !4712)
!4717 = !DILocation(line: 392, column: 15, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 392, column: 15)
!4719 = !DILocation(line: 392, column: 33, scope: !4718)
!4720 = !DILocation(line: 393, column: 15, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 393, column: 15)
!4722 = !DILocation(line: 393, column: 33, scope: !4721)
!4723 = !DILocation(line: 394, column: 15, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 394, column: 15)
!4725 = !DILocation(line: 394, column: 34, scope: !4724)
!4726 = !DILocation(line: 395, column: 15, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 395, column: 15)
!4728 = !DILocation(line: 395, column: 33, scope: !4727)
!4729 = !DILocation(line: 396, column: 14, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4713, file: !32, line: 396, column: 14)
!4731 = !DILocation(line: 398, column: 10, scope: !4714)
!4732 = !DILocation(line: 398, column: 15, scope: !4714)
!4733 = !DILocation(line: 398, column: 8, scope: !4714)
!4734 = !DILocation(line: 336, column: 3, scope: !4735, inlinedAt: !4736)
!4735 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4736 = !DILocation(line: 398, column: 34, scope: !4714)
!4737 = !DILocation(line: 337, column: 9, scope: !4735, inlinedAt: !4736)
!4738 = !DILocation(line: 399, column: 8, scope: !4714)
!4739 = !DILocation(line: 399, column: 15, scope: !4714)
!4740 = !DILocalVariable(name: "w", scope: !4686, file: !32, line: 402, type: !11, align: 4)
!4741 = !DILocation(line: 402, column: 8, scope: !4686)
!4742 = !DILocation(line: 402, column: 48, scope: !4686)
!4743 = !DILocation(line: 402, column: 86, scope: !4686)
!4744 = !DILocation(line: 402, column: 12, scope: !4686)
!4745 = !DILocation(line: 403, column: 13, scope: !4686)
!4746 = !DILocation(line: 336, column: 3, scope: !4747, inlinedAt: !4748)
!4747 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4748 = !DILocation(line: 403, column: 23, scope: !4686)
!4749 = !DILocation(line: 337, column: 9, scope: !4747, inlinedAt: !4748)
!4750 = !DILocation(line: 404, column: 7, scope: !4686)
!4751 = !DILocation(line: 404, column: 14, scope: !4686)
!4752 = !DILocation(line: 405, column: 7, scope: !4686)
!4753 = !DILocation(line: 407, column: 4, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 406, column: 3)
!4755 = !DILocation(line: 407, column: 22, scope: !4754)
!4756 = !DILocation(line: 408, column: 9, scope: !4754)
!4757 = !DILocation(line: 410, column: 3, scope: !4686)
!4758 = !DILocation(line: 410, column: 16, scope: !4686)
!4759 = !DILocation(line: 412, column: 3, scope: !4686)
!4760 = !DILocation(line: 412, column: 15, scope: !4686)
!4761 = !DILocation(line: 413, column: 7, scope: !4686)
!4762 = !DILocation(line: 415, column: 4, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 414, column: 3)
!4764 = !DILocation(line: 415, column: 27, scope: !4763)
!4765 = !DILocation(line: 416, column: 10, scope: !4763)
!4766 = !DILocation(line: 416, column: 15, scope: !4763)
!4767 = !DILocation(line: 416, column: 8, scope: !4763)
!4768 = !DILocation(line: 336, column: 3, scope: !4769, inlinedAt: !4770)
!4769 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4770 = !DILocation(line: 416, column: 34, scope: !4763)
!4771 = !DILocation(line: 337, column: 9, scope: !4769, inlinedAt: !4770)
!4772 = !DILocalVariable(name: "prec", scope: !4763, file: !32, line: 417, type: !11, align: 4)
!4773 = !DILocation(line: 417, column: 9, scope: !4763)
!4774 = !DILocation(line: 417, column: 52, scope: !4763)
!4775 = !DILocation(line: 417, column: 90, scope: !4763)
!4776 = !DILocation(line: 417, column: 16, scope: !4763)
!4777 = !DILocation(line: 418, column: 14, scope: !4763)
!4778 = !DILocation(line: 336, column: 3, scope: !4779, inlinedAt: !4780)
!4779 = distinct !DISubprogram(name: "@report_fault", linkageName: "@report_fault", scope: !32, file: !32, line: 334, scopeLine: 334, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4780 = !DILocation(line: 418, column: 27, scope: !4763)
!4781 = !DILocation(line: 337, column: 9, scope: !4779, inlinedAt: !4780)
!4782 = !DILocation(line: 419, column: 4, scope: !4763)
!4783 = !DILocation(line: 419, column: 16, scope: !4763)
!4784 = !DILocation(line: 419, column: 27, scope: !4763)
!4785 = !DILocation(line: 419, column: 31, scope: !4763)
!4786 = !DILocation(line: 420, column: 8, scope: !4763)
!4787 = !DILocation(line: 420, column: 15, scope: !4763)
!4788 = !DILocalVariable(name: "base", scope: !4686, file: !32, line: 424, type: !1675, align: 4)
!4789 = !DILocation(line: 424, column: 8, scope: !4686)
!4790 = !DILocation(line: 424, column: 15, scope: !4686)
!4791 = !DILocation(line: 425, column: 7, scope: !4686)
!4792 = !DILocation(line: 425, column: 24, scope: !4686)
!4793 = !DILocation(line: 30, column: 6, scope: !4794, inlinedAt: !4795)
!4794 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4795 = !DILocation(line: 427, column: 4, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 426, column: 3)
!4797 = !DILocation(line: 30, column: 31, scope: !4794, inlinedAt: !4795)
!4798 = !DILocation(line: 31, column: 2, scope: !4794, inlinedAt: !4795)
!4799 = !DILocation(line: 31, column: 21, scope: !4794, inlinedAt: !4795)
!4800 = !DILocation(line: 32, column: 9, scope: !4794, inlinedAt: !4795)
!4801 = !DILocation(line: 428, column: 4, scope: !4796)
!4802 = !DILocation(line: 428, column: 17, scope: !4796)
!4803 = !DILocation(line: 429, column: 4, scope: !4796)
!4804 = !DILocalVariable(name: "current", scope: !4686, file: !32, line: 431, type: !2787, align: 8)
!4805 = !DILocation(line: 431, column: 7, scope: !4686)
!4806 = !DILocation(line: 431, column: 17, scope: !4686)
!4807 = !DILocation(line: 431, column: 22, scope: !4686)
!4808 = !DILocation(line: 435, column: 12, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 435, column: 5)
!4810 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 432, column: 3)
!4811 = !DILocation(line: 436, column: 5, scope: !4809)
!4812 = !DILocation(line: 436, column: 23, scope: !4809)
!4813 = !DILocation(line: 438, column: 5, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 438, column: 5)
!4815 = !DILocation(line: 438, column: 28, scope: !4814)
!4816 = !DILocation(line: 439, column: 5, scope: !4814)
!4817 = !DILocation(line: 441, column: 12, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 441, column: 5)
!4819 = !DILocation(line: 443, column: 5, scope: !4820)
!4820 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 443, column: 5)
!4821 = !DILocation(line: 443, column: 28, scope: !4820)
!4822 = !DILocation(line: 444, column: 5, scope: !4820)
!4823 = !DILocation(line: 446, column: 12, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 446, column: 5)
!4825 = !DILocation(line: 448, column: 5, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 448, column: 5)
!4827 = !DILocation(line: 448, column: 28, scope: !4826)
!4828 = !DILocation(line: 449, column: 5, scope: !4826)
!4829 = !DILocation(line: 451, column: 12, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 451, column: 5)
!4831 = !DILocation(line: 453, column: 5, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 453, column: 5)
!4833 = !DILocation(line: 453, column: 28, scope: !4832)
!4834 = !DILocation(line: 454, column: 5, scope: !4832)
!4835 = !DILocation(line: 456, column: 5, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 456, column: 5)
!4837 = !DILocalVariable(name: "len", scope: !4838, file: !32, line: 342, type: !96, align: 8)
!4838 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4839 = !DILocation(line: 342, column: 7, scope: !4838, inlinedAt: !4840)
!4840 = !DILocation(line: 456, column: 18, scope: !4836)
!4841 = !DILocation(line: 456, column: 44, scope: !4838, inlinedAt: !4840)
!4842 = !DILocation(line: 342, column: 13, scope: !4838, inlinedAt: !4840)
!4843 = !DILocalVariable(name: "err", scope: !4838, file: !32, line: 343, type: !112, align: 8)
!4844 = !DILocation(line: 343, column: 12, scope: !4838, inlinedAt: !4840)
!4845 = !DILocation(line: 343, column: 18, scope: !4838, inlinedAt: !4840)
!4846 = !DILocation(line: 345, column: 8, scope: !4838, inlinedAt: !4840)
!4847 = !DILocation(line: 346, column: 8, scope: !4838, inlinedAt: !4840)
!4848 = !DILocation(line: 30, column: 6, scope: !4849, inlinedAt: !4850)
!4849 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4850 = !DILocation(line: 347, column: 11, scope: !4851, inlinedAt: !4840)
!4851 = distinct !DILexicalBlock(scope: !4838, file: !32, line: 347, column: 4)
!4852 = !DILocation(line: 30, column: 31, scope: !4849, inlinedAt: !4850)
!4853 = !DILocation(line: 31, column: 2, scope: !4849, inlinedAt: !4850)
!4854 = !DILocation(line: 31, column: 21, scope: !4849, inlinedAt: !4850)
!4855 = !DILocation(line: 32, column: 9, scope: !4849, inlinedAt: !4850)
!4856 = !DILocation(line: 30, column: 6, scope: !4857, inlinedAt: !4858)
!4857 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4858 = !DILocation(line: 349, column: 10, scope: !4859, inlinedAt: !4840)
!4859 = distinct !DILexicalBlock(scope: !4838, file: !32, line: 349, column: 4)
!4860 = !DILocation(line: 30, column: 31, scope: !4857, inlinedAt: !4858)
!4861 = !DILocation(line: 31, column: 2, scope: !4857, inlinedAt: !4858)
!4862 = !DILocation(line: 31, column: 21, scope: !4857, inlinedAt: !4858)
!4863 = !DILocation(line: 32, column: 9, scope: !4857, inlinedAt: !4858)
!4864 = !DILocation(line: 350, column: 4, scope: !4859, inlinedAt: !4840)
!4865 = !DILocation(line: 351, column: 11, scope: !4859, inlinedAt: !4840)
!4866 = !DILocation(line: 353, column: 9, scope: !4838, inlinedAt: !4840)
!4867 = !DILocation(line: 457, column: 5, scope: !4836)
!4868 = !DILocation(line: 459, column: 5, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 459, column: 5)
!4870 = !DILocation(line: 459, column: 28, scope: !4869)
!4871 = !DILocation(line: 460, column: 5, scope: !4869)
!4872 = !DILocation(line: 462, column: 5, scope: !4873)
!4873 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 462, column: 5)
!4874 = !DILocalVariable(name: "len", scope: !4875, file: !32, line: 342, type: !96, align: 8)
!4875 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4876 = !DILocation(line: 342, column: 7, scope: !4875, inlinedAt: !4877)
!4877 = !DILocation(line: 462, column: 18, scope: !4873)
!4878 = !DILocation(line: 462, column: 44, scope: !4875, inlinedAt: !4877)
!4879 = !DILocation(line: 342, column: 13, scope: !4875, inlinedAt: !4877)
!4880 = !DILocalVariable(name: "err", scope: !4875, file: !32, line: 343, type: !112, align: 8)
!4881 = !DILocation(line: 343, column: 12, scope: !4875, inlinedAt: !4877)
!4882 = !DILocation(line: 343, column: 18, scope: !4875, inlinedAt: !4877)
!4883 = !DILocation(line: 345, column: 8, scope: !4875, inlinedAt: !4877)
!4884 = !DILocation(line: 346, column: 8, scope: !4875, inlinedAt: !4877)
!4885 = !DILocation(line: 30, column: 6, scope: !4886, inlinedAt: !4887)
!4886 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4887 = !DILocation(line: 347, column: 11, scope: !4888, inlinedAt: !4877)
!4888 = distinct !DILexicalBlock(scope: !4875, file: !32, line: 347, column: 4)
!4889 = !DILocation(line: 30, column: 31, scope: !4886, inlinedAt: !4887)
!4890 = !DILocation(line: 31, column: 2, scope: !4886, inlinedAt: !4887)
!4891 = !DILocation(line: 31, column: 21, scope: !4886, inlinedAt: !4887)
!4892 = !DILocation(line: 32, column: 9, scope: !4886, inlinedAt: !4887)
!4893 = !DILocation(line: 30, column: 6, scope: !4894, inlinedAt: !4895)
!4894 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4895 = !DILocation(line: 349, column: 10, scope: !4896, inlinedAt: !4877)
!4896 = distinct !DILexicalBlock(scope: !4875, file: !32, line: 349, column: 4)
!4897 = !DILocation(line: 30, column: 31, scope: !4894, inlinedAt: !4895)
!4898 = !DILocation(line: 31, column: 2, scope: !4894, inlinedAt: !4895)
!4899 = !DILocation(line: 31, column: 21, scope: !4894, inlinedAt: !4895)
!4900 = !DILocation(line: 32, column: 9, scope: !4894, inlinedAt: !4895)
!4901 = !DILocation(line: 350, column: 4, scope: !4896, inlinedAt: !4877)
!4902 = !DILocation(line: 351, column: 11, scope: !4896, inlinedAt: !4877)
!4903 = !DILocation(line: 353, column: 9, scope: !4875, inlinedAt: !4877)
!4904 = !DILocation(line: 463, column: 5, scope: !4873)
!4905 = !DILocation(line: 465, column: 5, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 465, column: 5)
!4907 = !DILocation(line: 465, column: 28, scope: !4906)
!4908 = !DILocation(line: 466, column: 5, scope: !4906)
!4909 = !DILocation(line: 468, column: 5, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 468, column: 5)
!4911 = !DILocalVariable(name: "len", scope: !4912, file: !32, line: 342, type: !96, align: 8)
!4912 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4913 = !DILocation(line: 342, column: 7, scope: !4912, inlinedAt: !4914)
!4914 = !DILocation(line: 468, column: 18, scope: !4910)
!4915 = !DILocation(line: 468, column: 44, scope: !4912, inlinedAt: !4914)
!4916 = !DILocation(line: 342, column: 13, scope: !4912, inlinedAt: !4914)
!4917 = !DILocalVariable(name: "err", scope: !4912, file: !32, line: 343, type: !112, align: 8)
!4918 = !DILocation(line: 343, column: 12, scope: !4912, inlinedAt: !4914)
!4919 = !DILocation(line: 343, column: 18, scope: !4912, inlinedAt: !4914)
!4920 = !DILocation(line: 345, column: 8, scope: !4912, inlinedAt: !4914)
!4921 = !DILocation(line: 346, column: 8, scope: !4912, inlinedAt: !4914)
!4922 = !DILocation(line: 30, column: 6, scope: !4923, inlinedAt: !4924)
!4923 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4924 = !DILocation(line: 347, column: 11, scope: !4925, inlinedAt: !4914)
!4925 = distinct !DILexicalBlock(scope: !4912, file: !32, line: 347, column: 4)
!4926 = !DILocation(line: 30, column: 31, scope: !4923, inlinedAt: !4924)
!4927 = !DILocation(line: 31, column: 2, scope: !4923, inlinedAt: !4924)
!4928 = !DILocation(line: 31, column: 21, scope: !4923, inlinedAt: !4924)
!4929 = !DILocation(line: 32, column: 9, scope: !4923, inlinedAt: !4924)
!4930 = !DILocation(line: 30, column: 6, scope: !4931, inlinedAt: !4932)
!4931 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4932 = !DILocation(line: 349, column: 10, scope: !4933, inlinedAt: !4914)
!4933 = distinct !DILexicalBlock(scope: !4912, file: !32, line: 349, column: 4)
!4934 = !DILocation(line: 30, column: 31, scope: !4931, inlinedAt: !4932)
!4935 = !DILocation(line: 31, column: 2, scope: !4931, inlinedAt: !4932)
!4936 = !DILocation(line: 31, column: 21, scope: !4931, inlinedAt: !4932)
!4937 = !DILocation(line: 32, column: 9, scope: !4931, inlinedAt: !4932)
!4938 = !DILocation(line: 350, column: 4, scope: !4933, inlinedAt: !4914)
!4939 = !DILocation(line: 351, column: 11, scope: !4933, inlinedAt: !4914)
!4940 = !DILocation(line: 353, column: 9, scope: !4912, inlinedAt: !4914)
!4941 = !DILocation(line: 469, column: 5, scope: !4910)
!4942 = !DILocation(line: 471, column: 5, scope: !4943)
!4943 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 471, column: 5)
!4944 = !DILocation(line: 471, column: 28, scope: !4943)
!4945 = !DILocation(line: 472, column: 5, scope: !4943)
!4946 = !DILocation(line: 474, column: 5, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 474, column: 5)
!4948 = !DILocalVariable(name: "len", scope: !4949, file: !32, line: 342, type: !96, align: 8)
!4949 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!4950 = !DILocation(line: 342, column: 7, scope: !4949, inlinedAt: !4951)
!4951 = !DILocation(line: 474, column: 18, scope: !4947)
!4952 = !DILocation(line: 474, column: 44, scope: !4949, inlinedAt: !4951)
!4953 = !DILocation(line: 342, column: 13, scope: !4949, inlinedAt: !4951)
!4954 = !DILocalVariable(name: "err", scope: !4949, file: !32, line: 343, type: !112, align: 8)
!4955 = !DILocation(line: 343, column: 12, scope: !4949, inlinedAt: !4951)
!4956 = !DILocation(line: 343, column: 18, scope: !4949, inlinedAt: !4951)
!4957 = !DILocation(line: 345, column: 8, scope: !4949, inlinedAt: !4951)
!4958 = !DILocation(line: 346, column: 8, scope: !4949, inlinedAt: !4951)
!4959 = !DILocation(line: 30, column: 6, scope: !4960, inlinedAt: !4961)
!4960 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4961 = !DILocation(line: 347, column: 11, scope: !4962, inlinedAt: !4951)
!4962 = distinct !DILexicalBlock(scope: !4949, file: !32, line: 347, column: 4)
!4963 = !DILocation(line: 30, column: 31, scope: !4960, inlinedAt: !4961)
!4964 = !DILocation(line: 31, column: 2, scope: !4960, inlinedAt: !4961)
!4965 = !DILocation(line: 31, column: 21, scope: !4960, inlinedAt: !4961)
!4966 = !DILocation(line: 32, column: 9, scope: !4960, inlinedAt: !4961)
!4967 = !DILocation(line: 30, column: 6, scope: !4968, inlinedAt: !4969)
!4968 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!4969 = !DILocation(line: 349, column: 10, scope: !4970, inlinedAt: !4951)
!4970 = distinct !DILexicalBlock(scope: !4949, file: !32, line: 349, column: 4)
!4971 = !DILocation(line: 30, column: 31, scope: !4968, inlinedAt: !4969)
!4972 = !DILocation(line: 31, column: 2, scope: !4968, inlinedAt: !4969)
!4973 = !DILocation(line: 31, column: 21, scope: !4968, inlinedAt: !4969)
!4974 = !DILocation(line: 32, column: 9, scope: !4968, inlinedAt: !4969)
!4975 = !DILocation(line: 350, column: 4, scope: !4970, inlinedAt: !4951)
!4976 = !DILocation(line: 351, column: 11, scope: !4970, inlinedAt: !4951)
!4977 = !DILocation(line: 353, column: 9, scope: !4949, inlinedAt: !4951)
!4978 = !DILocation(line: 475, column: 5, scope: !4947)
!4979 = !DILocation(line: 477, column: 5, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 477, column: 5)
!4981 = !DILocation(line: 477, column: 18, scope: !4980)
!4982 = !DILocation(line: 478, column: 5, scope: !4980)
!4983 = !DILocation(line: 480, column: 5, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 480, column: 5)
!4985 = !DILocation(line: 480, column: 28, scope: !4984)
!4986 = !DILocation(line: 481, column: 5, scope: !4984)
!4987 = !DILocalVariable(name: "out", scope: !4988, file: !32, line: 483, type: !123, align: 8)
!4988 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 483, column: 14)
!4989 = !DILocation(line: 483, column: 21, scope: !4988)
!4990 = !DILocation(line: 484, column: 13, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4988, file: !32, line: 484, column: 5)
!4992 = !DILocation(line: 486, column: 11, scope: !4991)
!4993 = !DILocalVariable(name: "current", scope: !4994, file: !32, line: 431, type: !1329, align: 8)
!4994 = distinct !DILexicalBlock(scope: !4991, file: !32, line: 487, column: 7)
!4995 = !DILocation(line: 431, column: 7, scope: !4994)
!4996 = !DILocation(line: 487, column: 14, scope: !4994)
!4997 = !DILocation(line: 488, column: 11, scope: !4991)
!4998 = !DILocalVariable(name: "current", scope: !4999, file: !32, line: 431, type: !5000, align: 8)
!4999 = distinct !DILexicalBlock(scope: !4991, file: !32, line: 489, column: 7)
!5000 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar[]*", baseType: !5001, size: 64, align: 64, dwarfAddressSpace: 0)
!5001 = !DICompositeType(tag: DW_TAG_structure_type, name: "ichar[]", size: 128, align: 64, elements: !5002, identifier: "ichar[]")
!5002 = !{!5003, !5004}
!5003 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !5001, baseType: !3137, size: 64, align: 64)
!5004 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !5001, baseType: !95, size: 64, align: 64, offset: 64)
!5005 = !DILocation(line: 431, column: 7, scope: !4999)
!5006 = !DILocation(line: 489, column: 23, scope: !4999)
!5007 = !DILocation(line: 489, column: 15, scope: !4999)
!5008 = !DILocation(line: 491, column: 11, scope: !5009)
!5009 = distinct !DILexicalBlock(scope: !4991, file: !32, line: 491, column: 7)
!5010 = !DILocation(line: 491, column: 44, scope: !5009)
!5011 = !DILocation(line: 491, column: 81, scope: !5009)
!5012 = !DILocation(line: 493, column: 22, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5009, file: !32, line: 492, column: 7)
!5014 = !DILocation(line: 493, column: 36, scope: !5013)
!5015 = !DILocation(line: 494, column: 8, scope: !5013)
!5016 = !DILocation(line: 496, column: 7, scope: !5009)
!5017 = !DILocation(line: 496, column: 20, scope: !5009)
!5018 = !DILocation(line: 497, column: 7, scope: !5009)
!5019 = !DILocation(line: 499, column: 9, scope: !4988)
!5020 = !DILocalVariable(name: "len", scope: !5021, file: !32, line: 501, type: !95, align: 8)
!5021 = distinct !DILexicalBlock(scope: !4988, file: !32, line: 500, column: 5)
!5022 = !DILocation(line: 501, column: 10, scope: !5021)
!5023 = !DILocation(line: 501, column: 43, scope: !5021)
!5024 = !DILocation(line: 501, column: 16, scope: !5021)
!5025 = !DILocation(line: 502, column: 6, scope: !5021)
!5026 = !DILocation(line: 502, column: 19, scope: !5021)
!5027 = !DILocation(line: 503, column: 6, scope: !5021)
!5028 = !DILocation(line: 503, column: 33, scope: !5021)
!5029 = !DILocation(line: 503, column: 45, scope: !5021)
!5030 = !DILocation(line: 503, column: 19, scope: !5021)
!5031 = !DILocation(line: 504, column: 6, scope: !5021)
!5032 = !DILocation(line: 506, column: 9, scope: !4988)
!5033 = !DILocation(line: 508, column: 6, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !4988, file: !32, line: 507, column: 5)
!5035 = !DILocation(line: 508, column: 33, scope: !5034)
!5036 = !DILocation(line: 508, column: 45, scope: !5034)
!5037 = !DILocation(line: 508, column: 19, scope: !5034)
!5038 = !DILocation(line: 510, column: 5, scope: !4988)
!5039 = !DILocation(line: 510, column: 45, scope: !4988)
!5040 = !DILocation(line: 510, column: 18, scope: !4988)
!5041 = !DILocation(line: 511, column: 5, scope: !4988)
!5042 = !DILocation(line: 513, column: 9, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 513, column: 5)
!5044 = !DILocalVariable(name: "len", scope: !5045, file: !32, line: 515, type: !95, align: 8)
!5045 = distinct !DILexicalBlock(scope: !5043, file: !32, line: 514, column: 5)
!5046 = !DILocation(line: 515, column: 10, scope: !5045)
!5047 = !DILocation(line: 515, column: 16, scope: !5045)
!5048 = !DILocation(line: 516, column: 6, scope: !5045)
!5049 = !DILocation(line: 516, column: 19, scope: !5045)
!5050 = !DILocation(line: 517, column: 6, scope: !5045)
!5051 = !DILocation(line: 517, column: 33, scope: !5045)
!5052 = !DILocation(line: 517, column: 45, scope: !5045)
!5053 = !DILocation(line: 517, column: 19, scope: !5045)
!5054 = !DILocation(line: 518, column: 6, scope: !5045)
!5055 = !DILocation(line: 520, column: 9, scope: !5043)
!5056 = !DILocalVariable(name: "out_fn", scope: !5057, file: !32, line: 522, type: !1667, align: 8)
!5057 = distinct !DILexicalBlock(scope: !5043, file: !32, line: 521, column: 5)
!5058 = !DILocation(line: 522, column: 15, scope: !5057)
!5059 = !DILocation(line: 522, column: 24, scope: !5057)
!5060 = !DILocation(line: 523, column: 6, scope: !5057)
!5061 = !DILocation(line: 523, column: 31, scope: !5057)
!5062 = !DILocalVariable(name: "len", scope: !5057, file: !32, line: 524, type: !95, align: 8)
!5063 = !DILocation(line: 524, column: 10, scope: !5057)
!5064 = !DILocation(line: 524, column: 16, scope: !5057)
!5065 = !DILocation(line: 525, column: 6, scope: !5057)
!5066 = !DILocation(line: 525, column: 20, scope: !5057)
!5067 = !DILocation(line: 526, column: 6, scope: !5057)
!5068 = !DILocation(line: 526, column: 33, scope: !5057)
!5069 = !DILocation(line: 526, column: 45, scope: !5057)
!5070 = !DILocation(line: 526, column: 19, scope: !5057)
!5071 = !DILocation(line: 528, column: 5, scope: !5043)
!5072 = !DILocation(line: 528, column: 18, scope: !5043)
!5073 = !DILocation(line: 529, column: 5, scope: !5043)
!5074 = !DILocation(line: 531, column: 5, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 531, column: 5)
!5076 = !DILocation(line: 531, column: 26, scope: !5075)
!5077 = !DILocation(line: 532, column: 5, scope: !5075)
!5078 = !DILocation(line: 532, column: 23, scope: !5075)
!5079 = !DILocation(line: 533, column: 12, scope: !5075)
!5080 = !DILocation(line: 30, column: 6, scope: !5081, inlinedAt: !5082)
!5081 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!5082 = !DILocation(line: 535, column: 5, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !4810, file: !32, line: 535, column: 5)
!5084 = !DILocation(line: 30, column: 31, scope: !5081, inlinedAt: !5082)
!5085 = !DILocation(line: 31, column: 2, scope: !5081, inlinedAt: !5082)
!5086 = !DILocation(line: 31, column: 21, scope: !5081, inlinedAt: !5082)
!5087 = !DILocation(line: 32, column: 9, scope: !5081, inlinedAt: !5082)
!5088 = !DILocation(line: 536, column: 5, scope: !5083)
!5089 = !DILocation(line: 536, column: 18, scope: !5083)
!5090 = !DILocation(line: 537, column: 5, scope: !5083)
!5091 = !DILocation(line: 539, column: 7, scope: !4686)
!5092 = !DILocation(line: 541, column: 4, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !4686, file: !32, line: 540, column: 3)
!5094 = !DILocation(line: 541, column: 22, scope: !5093)
!5095 = !DILocation(line: 542, column: 4, scope: !5093)
!5096 = !DILocation(line: 542, column: 23, scope: !5093)
!5097 = !DILocation(line: 545, column: 7, scope: !4686)
!5098 = !DILocation(line: 545, column: 29, scope: !4686)
!5099 = !DILocation(line: 545, column: 50, scope: !4686)
!5100 = !DILocalVariable(name: "is_neg", scope: !4686, file: !32, line: 547, type: !432, align: 1)
!5101 = !DILocation(line: 547, column: 8, scope: !4686)
!5102 = !DILocation(line: 548, column: 3, scope: !4686)
!5103 = !DILocalVariable(name: "len", scope: !5104, file: !32, line: 342, type: !96, align: 8)
!5104 = distinct !DISubprogram(name: "@wrap_bad", linkageName: "@wrap_bad", scope: !32, file: !32, line: 340, scopeLine: 340, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5105 = !DILocation(line: 342, column: 7, scope: !5104, inlinedAt: !5106)
!5106 = !DILocation(line: 548, column: 16, scope: !4686)
!5107 = !DILocation(line: 548, column: 42, scope: !5104, inlinedAt: !5106)
!5108 = !DILocation(line: 342, column: 13, scope: !5104, inlinedAt: !5106)
!5109 = !DILocalVariable(name: "err", scope: !5104, file: !32, line: 343, type: !112, align: 8)
!5110 = !DILocation(line: 343, column: 12, scope: !5104, inlinedAt: !5106)
!5111 = !DILocation(line: 343, column: 18, scope: !5104, inlinedAt: !5106)
!5112 = !DILocation(line: 345, column: 8, scope: !5104, inlinedAt: !5106)
!5113 = !DILocation(line: 346, column: 8, scope: !5104, inlinedAt: !5106)
!5114 = !DILocation(line: 30, column: 6, scope: !5115, inlinedAt: !5116)
!5115 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!5116 = !DILocation(line: 347, column: 11, scope: !5117, inlinedAt: !5106)
!5117 = distinct !DILexicalBlock(scope: !5104, file: !32, line: 347, column: 4)
!5118 = !DILocation(line: 30, column: 31, scope: !5115, inlinedAt: !5116)
!5119 = !DILocation(line: 31, column: 2, scope: !5115, inlinedAt: !5116)
!5120 = !DILocation(line: 31, column: 21, scope: !5115, inlinedAt: !5116)
!5121 = !DILocation(line: 32, column: 9, scope: !5115, inlinedAt: !5116)
!5122 = !DILocation(line: 30, column: 6, scope: !5123, inlinedAt: !5124)
!5123 = distinct !DISubprogram(name: "first_err", linkageName: "first_err", scope: !2, file: !2, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!5124 = !DILocation(line: 349, column: 10, scope: !5125, inlinedAt: !5106)
!5125 = distinct !DILexicalBlock(scope: !5104, file: !32, line: 349, column: 4)
!5126 = !DILocation(line: 30, column: 31, scope: !5123, inlinedAt: !5124)
!5127 = !DILocation(line: 31, column: 2, scope: !5123, inlinedAt: !5124)
!5128 = !DILocation(line: 31, column: 21, scope: !5123, inlinedAt: !5124)
!5129 = !DILocation(line: 32, column: 9, scope: !5123, inlinedAt: !5124)
!5130 = !DILocation(line: 350, column: 4, scope: !5125, inlinedAt: !5106)
!5131 = !DILocation(line: 351, column: 11, scope: !5125, inlinedAt: !5106)
!5132 = !DILocation(line: 353, column: 9, scope: !5104, inlinedAt: !5106)
!5133 = !DILocation(line: 367, column: 34, scope: !4680)
!5134 = !DILocation(line: 554, column: 6, scope: !4657)
!5135 = !DILocation(line: 554, column: 31, scope: !4657)
!5136 = !DILocation(line: 555, column: 9, scope: !4657)
!5137 = distinct !DISubprogram(name: "print", linkageName: "std.io.Formatter.print", scope: !32, file: !32, line: 559, type: !1691, scopeLine: 559, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5138 = !DILocation(line: 560, column: 1, scope: !5137)
!5139 = !DILocalVariable(name: "self", arg: 1, scope: !5137, file: !32, line: 559, type: !1662)
!5140 = !DILocation(line: 559, column: 25, scope: !5137)
!5141 = !DILocalVariable(name: "str", arg: 2, scope: !5137, file: !32, line: 559, type: !252)
!5142 = !DILocation(line: 559, column: 39, scope: !5137)
!5143 = !DILocation(line: 561, column: 7, scope: !5137)
!5144 = !DILocation(line: 564, column: 3, scope: !5145)
!5145 = distinct !DILexicalBlock(scope: !5137, file: !32, line: 562, column: 2)
!5146 = !DILocation(line: 564, column: 18, scope: !5145)
!5147 = !DILocation(line: 566, column: 15, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5137, file: !32, line: 566, column: 2)
!5149 = !DILocalVariable(name: ".temp", scope: !5148, file: !32, line: 566, type: !95, align: 8)
!5150 = !DILocalVariable(name: "c", scope: !5151, file: !32, line: 566, type: !4, align: 1)
!5151 = distinct !DILexicalBlock(scope: !5148, file: !32, line: 566, column: 20)
!5152 = !DILocation(line: 566, column: 11, scope: !5151)
!5153 = !DILocation(line: 566, column: 15, scope: !5151)
!5154 = !DILocation(line: 566, column: 20, scope: !5151)
!5155 = !DILocation(line: 567, column: 9, scope: !5137)
!5156 = distinct !DISubprogram(name: "out_null_fn", linkageName: "std.io.out_null_fn", scope: !32, file: !32, line: 330, type: !1669, scopeLine: 330, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5157 = !DILocalVariable(name: "data", arg: 1, scope: !5156, file: !32, line: 330, type: !19)
!5158 = !DILocation(line: 330, column: 28, scope: !5156)
!5159 = !DILocalVariable(name: "c", arg: 2, scope: !5156, file: !32, line: 330, type: !4)
!5160 = !DILocation(line: 330, column: 47, scope: !5156)
!5161 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitReader.init", scope: !35, file: !35, line: 10, type: !5162, scopeLine: 10, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5162 = !DISubroutineType(types: !5163)
!5163 = !{null, !5164, !89}
!5164 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitReader*", baseType: !5165, size: 64, align: 64, dwarfAddressSpace: 0)
!5165 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitReader", scope: !35, file: !35, line: 3, size: 192, align: 64, elements: !5166, identifier: "std.io.BitReader")
!5166 = !{!5167, !5168, !5169}
!5167 = !DIDerivedType(tag: DW_TAG_member, name: "reader", scope: !5165, file: !35, line: 5, baseType: !89, size: 128, align: 64)
!5168 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !5165, file: !35, line: 6, baseType: !1675, size: 32, align: 32, offset: 128)
!5169 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !5165, file: !35, line: 7, baseType: !1675, size: 32, align: 32, offset: 160)
!5170 = !DILocation(line: 11, column: 1, scope: !5161)
!5171 = !DILocalVariable(name: "self", arg: 1, scope: !5161, file: !35, line: 10, type: !5164)
!5172 = !DILocation(line: 10, column: 24, scope: !5161)
!5173 = !DILocalVariable(name: "byte_reader", arg: 2, scope: !5161, file: !35, line: 10, type: !89)
!5174 = !DILocation(line: 10, column: 40, scope: !5161)
!5175 = !DILocation(line: 12, column: 3, scope: !5161)
!5176 = !DILocation(line: 12, column: 22, scope: !5161)
!5177 = distinct !DISubprogram(name: "clear", linkageName: "std.io.BitReader.clear", scope: !35, file: !35, line: 15, type: !5178, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5178 = !DISubroutineType(types: !5179)
!5179 = !{null, !5164}
!5180 = !DILocation(line: 16, column: 1, scope: !5177)
!5181 = !DILocalVariable(name: "self", arg: 1, scope: !5177, file: !35, line: 15, type: !5164)
!5182 = !DILocation(line: 15, column: 25, scope: !5177)
!5183 = !DILocation(line: 17, column: 2, scope: !5177)
!5184 = !DILocation(line: 17, column: 13, scope: !5177)
!5185 = distinct !DISubprogram(name: "read_bits", linkageName: "std.io.BitReader.read_bits", scope: !35, file: !35, line: 24, type: !5186, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5186 = !DISubroutineType(types: !5187)
!5187 = !{!112, !126, !5164, !1675}
!5188 = !DILocation(line: 25, column: 1, scope: !5185)
!5189 = !DILocalVariable(name: "self", arg: 1, scope: !5185, file: !35, line: 24, type: !5164)
!5190 = !DILocation(line: 24, column: 30, scope: !5185)
!5191 = !DILocalVariable(name: "nbits", arg: 2, scope: !5185, file: !35, line: 24, type: !1675)
!5192 = !DILocation(line: 24, column: 42, scope: !5185)
!5193 = !DILocation(line: 21, column: 11, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5185, file: !35, line: 25, column: 1)
!5195 = !DILocation(line: 22, column: 11, scope: !5194)
!5196 = !DILocation(line: 22, column: 22, scope: !5194)
!5197 = !DILocalVariable(name: "bits", scope: !5185, file: !35, line: 26, type: !1675, align: 4)
!5198 = !DILocation(line: 26, column: 7, scope: !5185)
!5199 = !DILocation(line: 26, column: 14, scope: !5185)
!5200 = !DILocation(line: 27, column: 6, scope: !5185)
!5201 = !DILocation(line: 27, column: 17, scope: !5185)
!5202 = !DILocalVariable(name: "c", scope: !5203, file: !35, line: 30, type: !4, align: 1)
!5203 = distinct !DILexicalBlock(scope: !5185, file: !35, line: 28, column: 2)
!5204 = !DILocation(line: 30, column: 8, scope: !5203)
!5205 = !DILocation(line: 30, column: 12, scope: !5203)
!5206 = !DILocation(line: 31, column: 3, scope: !5203)
!5207 = !DILocation(line: 32, column: 3, scope: !5203)
!5208 = !DILocation(line: 32, column: 11, scope: !5203)
!5209 = !DILocation(line: 33, column: 3, scope: !5203)
!5210 = !DILocation(line: 33, column: 15, scope: !5203)
!5211 = !DILocation(line: 34, column: 3, scope: !5203)
!5212 = !DILocation(line: 36, column: 2, scope: !5185)
!5213 = !DILocation(line: 36, column: 14, scope: !5185)
!5214 = !DILocalVariable(name: "mask", scope: !5185, file: !35, line: 37, type: !1675, align: 4)
!5215 = !DILocation(line: 37, column: 7, scope: !5185)
!5216 = !DILocation(line: 37, column: 20, scope: !5185)
!5217 = !DILocation(line: 37, column: 15, scope: !5185)
!5218 = !DILocation(line: 38, column: 17, scope: !5185)
!5219 = !DILocation(line: 38, column: 25, scope: !5185)
!5220 = !DILocation(line: 38, column: 37, scope: !5185)
!5221 = !DILocation(line: 38, column: 10, scope: !5185)
!5222 = distinct !DISubprogram(name: "init", linkageName: "std.io.BitWriter.init", scope: !35, file: !35, line: 52, type: !5223, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5223 = !DISubroutineType(types: !5224)
!5224 = !{null, !5225, !879}
!5225 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "BitWriter*", baseType: !5226, size: 64, align: 64, dwarfAddressSpace: 0)
!5226 = !DICompositeType(tag: DW_TAG_structure_type, name: "BitWriter", scope: !35, file: !35, line: 41, size: 192, align: 64, elements: !5227, identifier: "std.io.BitWriter")
!5227 = !{!5228, !5229, !5230}
!5228 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !5226, file: !35, line: 43, baseType: !879, size: 128, align: 64)
!5229 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !5226, file: !35, line: 44, baseType: !1675, size: 32, align: 32, offset: 128)
!5230 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !5226, file: !35, line: 45, baseType: !1675, size: 32, align: 32, offset: 160)
!5231 = !DILocation(line: 53, column: 1, scope: !5222)
!5232 = !DILocalVariable(name: "self", arg: 1, scope: !5222, file: !35, line: 52, type: !5225)
!5233 = !DILocation(line: 52, column: 24, scope: !5222)
!5234 = !DILocalVariable(name: "byte_writer", arg: 2, scope: !5222, file: !35, line: 52, type: !879)
!5235 = !DILocation(line: 52, column: 41, scope: !5222)
!5236 = !DILocation(line: 54, column: 3, scope: !5222)
!5237 = !DILocation(line: 54, column: 22, scope: !5222)
!5238 = distinct !DISubprogram(name: "flush", linkageName: "std.io.BitWriter.flush", scope: !35, file: !35, line: 57, type: !5239, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5239 = !DISubroutineType(types: !5240)
!5240 = !{!112, !19, !5225}
!5241 = !DILocation(line: 58, column: 1, scope: !5238)
!5242 = !DILocalVariable(name: "self", arg: 1, scope: !5238, file: !35, line: 57, type: !5225)
!5243 = !DILocation(line: 57, column: 26, scope: !5238)
!5244 = !DILocation(line: 59, column: 6, scope: !5238)
!5245 = !DILocalVariable(name: "padding", scope: !5238, file: !35, line: 61, type: !11, align: 4)
!5246 = !DILocation(line: 61, column: 6, scope: !5238)
!5247 = !DILocation(line: 61, column: 42, scope: !5238)
!5248 = !DILocation(line: 61, column: 17, scope: !5238)
!5249 = !DILocalVariable(name: "bits", scope: !5238, file: !35, line: 62, type: !1675, align: 4)
!5250 = !DILocation(line: 62, column: 7, scope: !5238)
!5251 = !DILocation(line: 62, column: 14, scope: !5238)
!5252 = !DILocation(line: 62, column: 27, scope: !5238)
!5253 = !DILocalVariable(name: "n", scope: !5238, file: !35, line: 63, type: !1675, align: 4)
!5254 = !DILocation(line: 63, column: 7, scope: !5238)
!5255 = !DILocation(line: 63, column: 12, scope: !5238)
!5256 = !DILocalVariable(name: "buffer", scope: !5238, file: !35, line: 64, type: !5257, align: 1)
!5257 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 32, align: 8, elements: !5258)
!5258 = !{!5259}
!5259 = !DISubrange(count: 4, lowerBound: 0)
!5260 = !DILocation(line: 64, column: 10, scope: !5238)
!5261 = !DILocation(line: 172, column: 11, scope: !5262, inlinedAt: !5264)
!5262 = distinct !DISubprogram(name: "is_arrayptr_or_slice_of_char", linkageName: "is_arrayptr_or_slice_of_char", scope: !5263, file: !5263, line: 165, scopeLine: 165, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!5263 = !DIFile(filename: "bitorder.c3", directory: "/opt/homebrew/lib/c3/std/core")
!5264 = !DILocation(line: 107, column: 11, scope: !5265, inlinedAt: !5267)
!5265 = distinct !DILexicalBlock(scope: !5266, file: !5263, line: 111, column: 1)
!5266 = distinct !DISubprogram(name: "write", linkageName: "write", scope: !5263, file: !5263, line: 110, scopeLine: 110, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5267 = !DILocation(line: 65, column: 2, scope: !5238)
!5268 = !DILocalVariable(name: "s", scope: !5266, file: !35, line: 112, type: !123, align: 8)
!5269 = !DILocation(line: 112, column: 9, scope: !5266, inlinedAt: !5267)
!5270 = !DILocation(line: 115, column: 9, scope: !5266, inlinedAt: !5267)
!5271 = !DILocation(line: 119, column: 16, scope: !5266, inlinedAt: !5267)
!5272 = !DILocation(line: 213, column: 20, scope: !5273, inlinedAt: !5274)
!5273 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !1830, file: !1830, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42)
!5274 = !DILocation(line: 119, column: 24, scope: !5266, inlinedAt: !5267)
!5275 = !DILocation(line: 213, column: 12, scope: !5273, inlinedAt: !5274)
!5276 = !DILocation(line: 66, column: 16, scope: !5238)
!5277 = !DILocation(line: 66, column: 37, scope: !5238)
!5278 = !DILocation(line: 66, column: 29, scope: !5238)
!5279 = !DILocation(line: 101, column: 6, scope: !5280, inlinedAt: !5281)
!5280 = distinct !DISubprogram(name: "write_all", linkageName: "write_all", scope: !26, file: !26, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5281 = !DILocation(line: 66, column: 2, scope: !5238)
!5282 = !DILocation(line: 101, column: 30, scope: !5280, inlinedAt: !5281)
!5283 = !DILocalVariable(name: "n", scope: !5280, file: !35, line: 102, type: !95, align: 8)
!5284 = !DILocation(line: 102, column: 6, scope: !5280, inlinedAt: !5281)
!5285 = !DILocation(line: 102, column: 23, scope: !5280, inlinedAt: !5281)
!5286 = !DILocation(line: 102, column: 10, scope: !5280, inlinedAt: !5281)
!5287 = !DILocation(line: 103, column: 6, scope: !5280, inlinedAt: !5281)
!5288 = !DILocation(line: 103, column: 11, scope: !5280, inlinedAt: !5281)
!5289 = !DILocation(line: 103, column: 30, scope: !5280, inlinedAt: !5281)
!5290 = !DILocation(line: 104, column: 9, scope: !5280, inlinedAt: !5281)
!5291 = !DILocation(line: 67, column: 2, scope: !5238)
!5292 = !DILocation(line: 67, column: 13, scope: !5238)
!5293 = !DILocation(line: 119, column: 4, scope: !5266, inlinedAt: !5267)
!5294 = distinct !DISubprogram(name: "write_bits", linkageName: "std.io.BitWriter.write_bits", scope: !35, file: !35, line: 73, type: !5295, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !42, retainedNodes: !97)
!5295 = !DISubroutineType(types: !5296)
!5296 = !{!112, !19, !5225, !1675, !1675}
!5297 = !DILocation(line: 74, column: 1, scope: !5294)
!5298 = !DILocalVariable(name: "self", arg: 1, scope: !5294, file: !35, line: 73, type: !5225)
!5299 = !DILocation(line: 73, column: 31, scope: !5294)
!5300 = !DILocalVariable(name: "bits", arg: 2, scope: !5294, file: !35, line: 73, type: !1675)
!5301 = !DILocation(line: 73, column: 43, scope: !5294)
!5302 = !DILocalVariable(name: "nbits", arg: 3, scope: !5294, file: !35, line: 73, type: !1675)
!5303 = !DILocation(line: 73, column: 54, scope: !5294)
!5304 = !DILocation(line: 71, column: 11, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5294, file: !35, line: 74, column: 1)
!5306 = !DILocation(line: 75, column: 6, scope: !5294)
!5307 = !DILocation(line: 76, column: 2, scope: !5294)
!5308 = !DILocation(line: 76, column: 9, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5294, file: !35, line: 76, column: 2)
!5310 = !DILocation(line: 76, column: 20, scope: !5309)
!5311 = !DILocalVariable(name: "to_push", scope: !5312, file: !35, line: 78, type: !1675, align: 4)
!5312 = distinct !DILexicalBlock(scope: !5309, file: !35, line: 77, column: 2)
!5313 = !DILocation(line: 78, column: 8, scope: !5312)
!5314 = !DILocation(line: 78, column: 32, scope: !5312)
!5315 = !DILocation(line: 78, column: 18, scope: !5312)
!5316 = !DILocalVariable(name: "bits_to_push", scope: !5312, file: !35, line: 79, type: !1675, align: 4)
!5317 = !DILocation(line: 79, column: 8, scope: !5312)
!5318 = !DILocation(line: 79, column: 24, scope: !5312)
!5319 = !DILocation(line: 79, column: 33, scope: !5312)
!5320 = !DILocation(line: 79, column: 41, scope: !5312)
!5321 = !DILocation(line: 79, column: 60, scope: !5312)
!5322 = !DILocation(line: 79, column: 55, scope: !5312)
!5323 = !DILocation(line: 81, column: 3, scope: !5312)
!5324 = !DILocation(line: 81, column: 17, scope: !5312)
!5325 = !DILocation(line: 82, column: 3, scope: !5312)
!5326 = !DILocation(line: 82, column: 16, scope: !5312)
!5327 = !DILocation(line: 83, column: 3, scope: !5312)
!5328 = !DILocation(line: 83, column: 15, scope: !5312)
!5329 = !DILocation(line: 84, column: 3, scope: !5312)
!5330 = !DILocation(line: 84, column: 12, scope: !5312)
!5331 = !DILocation(line: 86, column: 3, scope: !5312)
!5332 = !DILocation(line: 89, column: 6, scope: !5294)
!5333 = !DILocation(line: 91, column: 2, scope: !5294)
!5334 = !DILocation(line: 91, column: 16, scope: !5294)
!5335 = !DILocation(line: 92, column: 2, scope: !5294)
!5336 = !DILocation(line: 92, column: 15, scope: !5294)
!5337 = !DILocation(line: 92, column: 29, scope: !5294)
!5338 = !DILocation(line: 92, column: 24, scope: !5294)
!5339 = !DILocation(line: 93, column: 2, scope: !5294)
!5340 = !DILocation(line: 93, column: 14, scope: !5294)
