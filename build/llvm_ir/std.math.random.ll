; ModuleID = 'std::math::random'
source_filename = "std::math::random"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-apple-macosx15.0"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%any = type { ptr, i64 }
%"char[]" = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"ulong[]" = type { ptr, i64 }

@"$ct.std.math.random.Pcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.uint128" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 16, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Pcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Pcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Pcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Sfc128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.a4$uint128" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.a4$uint128" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 64, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Sfc64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.a4$ulong" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.a4$ulong" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 32, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Sfc32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.a4$uint" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.a4$uint" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Sfc16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.a4$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.a4$ushort" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Sfc8Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.a4$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.a4$char" = linkonce global %.introspect { i8 15, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.char" to i64), i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.SimpleRandom" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Msws128Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 64, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Msws64Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 32, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Msws32Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 16, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Msws16Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 8, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Msws8Random" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 4, i64 0, i64 4, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Lcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Lcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Lcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Lcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Mcg128Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 16, i64 ptrtoint (ptr @"$ct.uint128" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Mcg64Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ulong" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Mcg32Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 4, i64 ptrtoint (ptr @"$ct.uint" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.math.random.Mcg16Random" = linkonce global %.introspect { i8 18, i64 0, ptr null, i64 2, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@std.math.random.default_random = weak thread_local global [4 x i64] zeroinitializer, align 8, !dbg !0
@std.math.random.default_random_initialized = weak thread_local local_unnamed_addr global i8 0, align 1, !dbg !9
@.panic_msg = internal constant [39 x i8] c"@require \22is_random(random)\22 violated.\00", align 1
@.file = internal constant [15 x i8] c"math_random.c3\00", align 1
@.func = internal constant [5 x i8] c"rand\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@.panic_msg.2 = internal constant [31 x i8] c"@require \22range > 0\22 violated.\00", align 1
@.panic_msg.3 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.4 = internal constant [32 x i8] c"@require \22max >= min\22 violated.\00", align 1
@.func.5 = internal constant [14 x i8] c"rand_in_range\00", align 1
@.func.6 = internal constant [4 x i8] c"rnd\00", align 1
@std.math.random.ODD_PHI64 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !12
@std.math.random.MUL_MCG64 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !15
@std.math.random.MUL_LCG64 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !17
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@.panic_msg.9 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.10 = internal constant [15 x i8] c"math.seeder.c3\00", align 1
@.func.11 = internal constant [7 x i8] c"seeder\00", align 1
@.panic_msg.12 = internal constant [11 x i8] c"% by zero.\00", align 1
@.panic_msg.13 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.14 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.panic_msg.15 = internal constant [64 x i8] c"Dereference of null pointer, 'char[8]*)&input[i * 8]' was null.\00", align 1
@.panic_msg.16 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.17 = internal constant [7 x i8] c"mem.c3\00", align 1
@.panic_msg.18 = internal constant [39 x i8] c"Slice copy length mismatch (%d != %d).\00", align 1
@entropy.random_int = internal unnamed_addr global i32 0, align 4, !dbg !19
@.str = private unnamed_addr constant [9 x i8] c"13:20:55\00", align 1
@.panic_msg.19 = internal constant [54 x i8] c"Dereference of null pointer, '$Type*)&expr' was null.\00", align 1
@.file.20 = internal constant [11 x i8] c"builtin.c3\00", align 1
@.func.21 = internal constant [8 x i8] c"entropy\00", align 1
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@std.math.random.ODD_PHI128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !22
@std.math.random.ODD_PHI64.29 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !26
@std.math.random.ODD_PHI32 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !28
@std.math.random.ODD_PHI16 = internal unnamed_addr constant i16 -25033, align 2, !dbg !30
@std.math.random.MUL_LCG128 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !33
@std.math.random.MUL_LCG64.30 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !35
@std.math.random.MUL_LCG32 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !37
@std.math.random.MUL_LCG16 = internal unnamed_addr constant i16 -28323, align 2, !dbg !39
@.panic_msg.31 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.file.32 = internal constant [12 x i8] c"math.pcg.c3\00", align 1
@.func.33 = internal constant [9 x i8] c"set_seed\00", align 1
@.panic_msg.34 = internal constant [46 x i8] c"Dereference of null pointer, 'self' was null.\00", align 1
@.func.35 = internal constant [10 x i8] c"next_long\00", align 1
@next_long.ROT_SHIFT = internal unnamed_addr constant i32 58, align 4, !dbg !41
@.panic_msg.36 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.37 = internal constant [11 x i8] c"next_bytes\00", align 1
@.panic_msg.38 = internal constant [35 x i8] c"@require \22bytes.len > 0\22 violated.\00", align 1
@.panic_msg.39 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@.str.40 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.41 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.42 = private unnamed_addr constant [24 x i8] c"Pcg128Random.next_bytes\00", align 1
@.func.43 = internal constant [12 x i8] c"next_int128\00", align 1
@.func.44 = internal constant [9 x i8] c"next_int\00", align 1
@.func.45 = internal constant [11 x i8] c"next_short\00", align 1
@.func.46 = internal constant [10 x i8] c"next_byte\00", align 1
@next_int.ROT_SHIFT = internal unnamed_addr constant i32 27, align 4, !dbg !44
@.str.47 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.48 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.49 = private unnamed_addr constant [23 x i8] c"Pcg64Random.next_bytes\00", align 1
@next_short.ROT_SHIFT = internal unnamed_addr constant i32 12, align 4, !dbg !46
@.str.50 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.51 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.52 = private unnamed_addr constant [23 x i8] c"Pcg32Random.next_bytes\00", align 1
@next_byte.ROT_SHIFT = internal unnamed_addr constant i32 5, align 4, !dbg !48
@.str.53 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"math.pcg.c3\00", align 1
@.str.55 = private unnamed_addr constant [23 x i8] c"Pcg16Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.60 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !50
@std.math.random.ODD_PHI64.61 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !52
@std.math.random.ODD_PHI32.62 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !54
@std.math.random.ODD_PHI16.63 = internal unnamed_addr constant i16 -25033, align 2, !dbg !56
@std.math.random.ODD_PHI8 = internal unnamed_addr constant i8 -97, align 1, !dbg !58
@.file.64 = internal constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.65 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.66 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.67 = private unnamed_addr constant [24 x i8] c"Sfc128Random.next_bytes\00", align 1
@.str.68 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.69 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.70 = private unnamed_addr constant [23 x i8] c"Sfc64Random.next_bytes\00", align 1
@.panic_msg.71 = internal constant [62 x i8] c"Reference parameter 'sfc' was passed a null pointer argument.\00", align 1
@.str.72 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.73 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.74 = private unnamed_addr constant [23 x i8] c"Sfc32Random.next_bytes\00", align 1
@.panic_msg.75 = internal constant [63 x i8] c"Reference parameter 'seed' was passed a null pointer argument.\00", align 1
@.str.76 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.77 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.78 = private unnamed_addr constant [23 x i8] c"Sfc16Random.next_bytes\00", align 1
@.str.79 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"math.sfc.c3\00", align 1
@.str.81 = private unnamed_addr constant [22 x i8] c"Sfc8Random.next_bytes\00", align 1
@std.math.random.SIMPLE_RANDOM_MULTIPLIER = internal unnamed_addr constant i64 25214903917, align 8, !dbg !61
@std.math.random.SIMPLE_RANDOM_ADDEND = internal unnamed_addr constant i64 11, align 8, !dbg !65
@std.math.random.SIMPLE_RANDOM_MASK = internal unnamed_addr constant i64 281474976710655, align 8, !dbg !67
@.file.84 = internal constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.85 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.86 = private unnamed_addr constant [22 x i8] c"math.simple_random.c3\00", align 1
@.str.87 = private unnamed_addr constant [24 x i8] c"SimpleRandom.next_bytes\00", align 1
@std.math.random.ODD_PHI128.92 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !69
@std.math.random.ODD_PHI64.93 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !72
@std.math.random.ODD_PHI32.94 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !74
@std.math.random.ODD_PHI16.95 = internal unnamed_addr constant i16 -25033, align 2, !dbg !76
@std.math.random.ODD_PHI8.96 = internal unnamed_addr constant i8 -97, align 1, !dbg !78
@.file.97 = internal constant [13 x i8] c"math.msws.c3\00", align 1
@.str.98 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.99 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.100 = private unnamed_addr constant [25 x i8] c"Msws128Random.next_bytes\00", align 1
@.str.101 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.102 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.103 = private unnamed_addr constant [24 x i8] c"Msws64Random.next_bytes\00", align 1
@.str.104 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.105 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.106 = private unnamed_addr constant [24 x i8] c"Msws32Random.next_bytes\00", align 1
@.str.107 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.108 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.109 = private unnamed_addr constant [24 x i8] c"Msws16Random.next_bytes\00", align 1
@.str.110 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.111 = private unnamed_addr constant [13 x i8] c"math.msws.c3\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"Msws8Random.next_bytes\00", align 1
@std.math.random.ODD_PHI128.120 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !80
@std.math.random.ODD_PHI64.121 = internal unnamed_addr constant i64 -7046029254386353131, align 8, !dbg !83
@std.math.random.ODD_PHI32.122 = internal unnamed_addr constant i32 -1640531527, align 4, !dbg !85
@std.math.random.ODD_PHI16.123 = internal unnamed_addr constant i16 -25033, align 2, !dbg !87
@std.math.random.MUL_LCG128.124 = internal unnamed_addr constant i128 -48899967401452674293065485854872568811, align 16, !dbg !89
@std.math.random.MUL_LCG64.125 = internal unnamed_addr constant i64 -3372029247567499371, align 8, !dbg !91
@std.math.random.MUL_LCG32.126 = internal unnamed_addr constant i32 -1856014347, align 4, !dbg !93
@std.math.random.MUL_LCG16.127 = internal unnamed_addr constant i16 -28323, align 2, !dbg !95
@.file.128 = internal constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.129 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.131 = private unnamed_addr constant [24 x i8] c"Lcg128Random.next_bytes\00", align 1
@.str.132 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.133 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.134 = private unnamed_addr constant [23 x i8] c"Lcg64Random.next_bytes\00", align 1
@.str.135 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.136 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.137 = private unnamed_addr constant [23 x i8] c"Lcg32Random.next_bytes\00", align 1
@.str.138 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.139 = private unnamed_addr constant [12 x i8] c"math.lcg.c3\00", align 1
@.str.140 = private unnamed_addr constant [23 x i8] c"Lcg16Random.next_bytes\00", align 1
@std.math.random.MUL_MCG128 = internal unnamed_addr constant i128 -129976298391535590297638237547755878347, align 16, !dbg !97
@std.math.random.MUL_MCG64.144 = internal unnamed_addr constant i64 -1065810590584100411, align 8, !dbg !100
@std.math.random.MUL_MCG32 = internal unnamed_addr constant i32 -1814600227, align 4, !dbg !102
@std.math.random.MUL_MCG16 = internal unnamed_addr constant i16 -27691, align 2, !dbg !104
@.file.145 = internal constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.146 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.147 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.148 = private unnamed_addr constant [24 x i8] c"Mcg128Random.next_bytes\00", align 1
@.str.149 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.150 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.151 = private unnamed_addr constant [23 x i8] c"Mcg64Random.next_bytes\00", align 1
@.str.152 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.153 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.154 = private unnamed_addr constant [23 x i8] c"Mcg32Random.next_bytes\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"Unreachable statement reached.\00", align 1
@.str.156 = private unnamed_addr constant [12 x i8] c"math.mcg.c3\00", align 1
@.str.157 = private unnamed_addr constant [23 x i8] c"Mcg16Random.next_bytes\00", align 1
@"$sel.set_seed" = linkonce_odr constant [9 x i8] c"set_seed\00", align 1
@"$sel.next_long" = linkonce_odr constant [10 x i8] c"next_long\00", align 1
@"$sel.next_bytes" = linkonce_odr constant [11 x i8] c"next_bytes\00", align 1
@"$sel.next_int128" = linkonce_odr constant [12 x i8] c"next_int128\00", align 1
@"$sel.next_int" = linkonce_odr constant [9 x i8] c"next_int\00", align 1
@"$sel.next_short" = linkonce_odr constant [11 x i8] c"next_short\00", align 1
@"$sel.next_byte" = linkonce_odr constant [10 x i8] c"next_byte\00", align 1
@"$c3_dynamic" = internal global [161 x { ptr, ptr, i64 }] [{ ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg128Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg64Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg32Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Pcg16Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Pcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc128Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc64Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc32Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc16Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Sfc8Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Sfc8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.SimpleRandom.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.SimpleRandom" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws128Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Msws128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws64Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Msws64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws32Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Msws32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws16Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Msws16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Msws8Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Msws8Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg128Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg64Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg32Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Lcg16Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Lcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg128Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg128Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg64Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg64Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg32Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg32Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.set_seed, ptr @"$sel.set_seed", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_byte, ptr @"$sel.next_byte", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_bytes, ptr @"$sel.next_bytes", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_int128, ptr @"$sel.next_int128", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_long, ptr @"$sel.next_long", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_int, ptr @"$sel.next_int", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }, { ptr, ptr, i64 } { ptr @std.math.random.Mcg16Random.next_short, ptr @"$sel.next_short", i64 ptrtoint (ptr @"$ct.std.math.random.Mcg16Random" to i64) }], section "__DATA,__c3_dynamic", align 8
@llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 1, ptr @.c3_dynamic_retain, ptr null }]

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.srand(i64 %0) #0 !dbg !114 {
entry:
  %seed = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr1 = alloca %"char[]", align 8
  store i64 %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !118, metadata !DIExpression()), !dbg !119
  store ptr %seed, ptr %taddr, align 8
  %1 = load ptr, ptr %taddr, align 8
  %2 = insertvalue %"char[]" undef, ptr %1, 0
  %3 = insertvalue %"char[]" %2, i64 8, 1
  store %"char[]" %3, ptr %taddr1, align 8
  %4 = load [2 x i64], ptr %taddr1, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr @std.math.random.default_random, [2 x i64] %4), !dbg !120
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !121
  ret void, !dbg !121
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.rand(i32 %0) #0 !dbg !122 {
entry:
  %range = alloca i32, align 4
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %taddr4 = alloca %"char[]", align 8
  %random5 = alloca ptr, align 8
  %range6 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random7 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr20 = alloca i32, align 4
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %range, align 4
  call void @llvm.dbg.declare(metadata ptr %range, metadata !125, metadata !DIExpression()), !dbg !126
  %1 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !127
  %2 = trunc i8 %1 to i1, !dbg !127
  %not = xor i1 %2, true, !dbg !127
  br i1 %not, label %if.then, label %if.exit, !dbg !127

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %3 = load ptr, ptr %random, align 8
  store ptr %3, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !130

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr2, align 8
  %5 = load [2 x i64], ptr %taddr2, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr3, align 8
  %6 = load [2 x i64], ptr %taddr3, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 24), !dbg !132
  unreachable, !dbg !132

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !137
  %8 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !137
  %9 = insertvalue %"char[]" %8, i64 32, 1, !dbg !137
  %10 = load ptr, ptr %random, align 8, !dbg !137
  store %"char[]" %9, ptr %taddr4, align 8
  %11 = load [2 x i64], ptr %taddr4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %10, [2 x i64] %11), !dbg !138
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !139
  br label %if.exit, !dbg !139

if.exit:                                          ; preds = %assert_ok, %entry
  store ptr @std.math.random.default_random, ptr %random5, align 8
  %12 = load i32, ptr %range, align 4, !dbg !140
  store i32 %12, ptr %range6, align 4
  %13 = load ptr, ptr %random5, align 8
  store ptr %13, ptr %random7, align 8
  br i1 true, label %assert_ok12, label %assert_fail8, !dbg !141

assert_fail8:                                     ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr9, align 8
  %14 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr10, align 8
  %15 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr11, align 8
  %16 = load [2 x i64], ptr %taddr11, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 34), !dbg !143
  unreachable, !dbg !143

assert_ok12:                                      ; preds = %if.exit
  %18 = load i32, ptr %range6, align 4, !dbg !147
  %lt = icmp ult i32 0, %18, !dbg !147
  br i1 %lt, label %assert_ok17, label %assert_fail13, !dbg !147

assert_fail13:                                    ; preds = %assert_ok12
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %taddr14, align 8
  %19 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr16, align 8
  %21 = load [2 x i64], ptr %taddr16, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 35), !dbg !147
  unreachable, !dbg !147

assert_ok17:                                      ; preds = %assert_ok12
  %23 = load i32, ptr %range6, align 4, !dbg !148
  %eq = icmp eq i32 1, %23, !dbg !148
  br i1 %eq, label %if.then18, label %if.exit19, !dbg !148

if.then18:                                        ; preds = %assert_ok17
  store i32 0, ptr %blockret, align 4, !dbg !149
  br label %expr_block.exit, !dbg !149

if.exit19:                                        ; preds = %assert_ok17
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !150, metadata !DIExpression()), !dbg !151
  store i32 -1, ptr %mask, align 4, !dbg !152
  %24 = load i32, ptr %range6, align 4, !dbg !153
  %sub = sub i32 %24, 1, !dbg !153
  store i32 %sub, ptr %range6, align 4, !dbg !153
  %25 = load i32, ptr %mask, align 4, !dbg !154
  %26 = load i32, ptr %range6, align 4
  store i32 %26, ptr %self, align 4
  %27 = load i32, ptr %self, align 4, !dbg !155
  %28 = call i32 @llvm.ctlz.i32(i32 %27, i1 false), !dbg !155
  %shift_exceeds = icmp uge i32 %28, 32, !dbg !154
  %29 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !154
  br i1 %29, label %panic, label %checkok, !dbg !154

checkok:                                          ; preds = %if.exit19
  %lshr = lshr i32 %25, %28, !dbg !154
  %30 = freeze i32 %lshr, !dbg !154
  store i32 %30, ptr %mask, align 4, !dbg !154
  call void @llvm.dbg.declare(metadata ptr %x, metadata !159, metadata !DIExpression()), !dbg !160
  br label %loop.body, !dbg !161

loop.cond:                                        ; preds = %loop.body
  %31 = load i32, ptr %x, align 4, !dbg !162
  %32 = load i32, ptr %range6, align 4, !dbg !164
  %gt = icmp ugt i32 %31, %32, !dbg !162
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !162

loop.body:                                        ; preds = %loop.cond, %checkok
  %33 = load ptr, ptr %random5, align 8, !dbg !165
  %34 = call i32 @std.math.random.Sfc64Random.next_int(ptr %33), !dbg !165
  %35 = load i32, ptr %mask, align 4, !dbg !167
  %and = and i32 %34, %35, !dbg !165
  store i32 %and, ptr %x, align 4, !dbg !165
  br label %loop.cond, !dbg !165

loop.exit:                                        ; preds = %loop.cond
  %36 = load i32, ptr %x, align 4, !dbg !168
  store i32 %36, ptr %blockret, align 4, !dbg !168
  br label %expr_block.exit, !dbg !168

expr_block.exit:                                  ; preds = %loop.exit, %if.then18
  %37 = load i32, ptr %blockret, align 4, !dbg !168
  ret i32 %37, !dbg !168

panic:                                            ; preds = %if.exit19
  store i32 %28, ptr %taddr20, align 4
  %38 = insertvalue %any undef, ptr %taddr20, 0
  %39 = insertvalue %any %38, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %taddr21, align 8
  %40 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr22, align 8
  %41 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.func, i64 4 }, ptr %taddr23, align 8
  %42 = load [2 x i64], ptr %taddr23, align 8
  store %any %39, ptr %varargslots, align 8
  %43 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %43, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr24, align 8
  %44 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %40, [2 x i64] %41, [2 x i64] %42, i32 42, [2 x i64] %44), !dbg !154
  unreachable, !dbg !154
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.rand_in_range(i32 %0, i32 %1) #0 !dbg !169 {
entry:
  %min = alloca i32, align 4
  %max = alloca i32, align 4
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %random = alloca ptr, align 8
  %random3 = alloca ptr, align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %taddr9 = alloca %"char[]", align 8
  %random10 = alloca ptr, align 8
  %min11 = alloca i32, align 4
  %max12 = alloca i32, align 4
  %random13 = alloca ptr, align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %taddr23 = alloca %"char[]", align 8
  %random25 = alloca ptr, align 8
  %range = alloca i32, align 4
  %blockret = alloca i32, align 4
  %random26 = alloca ptr, align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %mask = alloca i32, align 4
  %self = alloca i32, align 4
  %taddr40 = alloca i32, align 4
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr44 = alloca %"any[]", align 8
  %x = alloca i32, align 4
  store i32 %0, ptr %min, align 4
  call void @llvm.dbg.declare(metadata ptr %min, metadata !172, metadata !DIExpression()), !dbg !173
  store i32 %1, ptr %max, align 4
  call void @llvm.dbg.declare(metadata ptr %max, metadata !174, metadata !DIExpression()), !dbg !175
  %2 = load i32, ptr %max, align 4, !dbg !176
  %3 = load i32, ptr %min, align 4, !dbg !178
  %ge = icmp sge i32 %2, %3, !dbg !176
  br i1 %ge, label %assert_ok, label %assert_fail, !dbg !176

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr1, align 8
  %5 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr2, align 8
  %6 = load [2 x i64], ptr %taddr2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 88), !dbg !176
  unreachable, !dbg !176

assert_ok:                                        ; preds = %entry
  %8 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !179
  %9 = trunc i8 %8 to i1, !dbg !179
  %not = xor i1 %9, true, !dbg !179
  br i1 %not, label %if.then, label %if.exit, !dbg !179

if.then:                                          ; preds = %assert_ok
  store ptr @std.math.random.default_random, ptr %random, align 8
  %10 = load ptr, ptr %random, align 8
  store ptr %10, ptr %random3, align 8
  br i1 true, label %assert_ok8, label %assert_fail4, !dbg !182

assert_fail4:                                     ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr5, align 8
  %11 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr6, align 8
  %12 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr7, align 8
  %13 = load [2 x i64], ptr %taddr7, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 24), !dbg !184
  unreachable, !dbg !184

assert_ok8:                                       ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !189
  %15 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !189
  %16 = insertvalue %"char[]" %15, i64 32, 1, !dbg !189
  %17 = load ptr, ptr %random, align 8, !dbg !189
  store %"char[]" %16, ptr %taddr9, align 8
  %18 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %17, [2 x i64] %18), !dbg !190
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !191
  br label %if.exit, !dbg !191

if.exit:                                          ; preds = %assert_ok8, %assert_ok
  store ptr @std.math.random.default_random, ptr %random10, align 8
  %19 = load i32, ptr %min, align 4
  store i32 %19, ptr %min11, align 4
  %20 = load i32, ptr %max, align 4
  store i32 %20, ptr %max12, align 4
  %21 = load ptr, ptr %random10, align 8
  store ptr %21, ptr %random13, align 8
  br i1 true, label %assert_ok18, label %assert_fail14, !dbg !192

assert_fail14:                                    ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr15, align 8
  %22 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr16, align 8
  %23 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr17, align 8
  %24 = load [2 x i64], ptr %taddr17, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 55), !dbg !194
  unreachable, !dbg !194

assert_ok18:                                      ; preds = %if.exit
  %26 = load i32, ptr %max12, align 4, !dbg !198
  %27 = load i32, ptr %min11, align 4, !dbg !199
  %ge19 = icmp sge i32 %26, %27, !dbg !198
  br i1 %ge19, label %assert_ok24, label %assert_fail20, !dbg !198

assert_fail20:                                    ; preds = %assert_ok18
  store %"char[]" { ptr @.panic_msg.4, i64 31 }, ptr %taddr21, align 8
  %28 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr22, align 8
  %29 = load [2 x i64], ptr %taddr22, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr23, align 8
  %30 = load [2 x i64], ptr %taddr23, align 8
  %31 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %31([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 56), !dbg !198
  unreachable, !dbg !198

assert_ok24:                                      ; preds = %assert_ok18
  %32 = load ptr, ptr %random10, align 8
  store ptr %32, ptr %random25, align 8
  %33 = load i32, ptr %max12, align 4, !dbg !200
  %34 = load i32, ptr %min11, align 4, !dbg !201
  %sub = sub i32 %33, %34, !dbg !200
  %add = add i32 %sub, 1, !dbg !200
  store i32 %add, ptr %range, align 4
  %35 = load ptr, ptr %random25, align 8
  store ptr %35, ptr %random26, align 8
  br i1 true, label %assert_ok31, label %assert_fail27, !dbg !202

assert_fail27:                                    ; preds = %assert_ok24
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr28, align 8
  %36 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr29, align 8
  %37 = load [2 x i64], ptr %taddr29, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr30, align 8
  %38 = load [2 x i64], ptr %taddr30, align 8
  %39 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %39([2 x i64] %36, [2 x i64] %37, [2 x i64] %38, i32 34), !dbg !204
  unreachable, !dbg !204

assert_ok31:                                      ; preds = %assert_ok24
  %40 = load i32, ptr %range, align 4, !dbg !208
  %lt = icmp ult i32 0, %40, !dbg !208
  br i1 %lt, label %assert_ok36, label %assert_fail32, !dbg !208

assert_fail32:                                    ; preds = %assert_ok31
  store %"char[]" { ptr @.panic_msg.2, i64 30 }, ptr %taddr33, align 8
  %41 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr34, align 8
  %42 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr35, align 8
  %43 = load [2 x i64], ptr %taddr35, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 35), !dbg !208
  unreachable, !dbg !208

assert_ok36:                                      ; preds = %assert_ok31
  %45 = load i32, ptr %range, align 4, !dbg !209
  %eq = icmp eq i32 1, %45, !dbg !209
  br i1 %eq, label %if.then37, label %if.exit38, !dbg !209

if.then37:                                        ; preds = %assert_ok36
  store i32 0, ptr %blockret, align 4, !dbg !210
  br label %expr_block.exit, !dbg !210

if.exit38:                                        ; preds = %assert_ok36
  call void @llvm.dbg.declare(metadata ptr %mask, metadata !211, metadata !DIExpression()), !dbg !212
  store i32 -1, ptr %mask, align 4, !dbg !213
  %46 = load i32, ptr %range, align 4, !dbg !214
  %sub39 = sub i32 %46, 1, !dbg !214
  store i32 %sub39, ptr %range, align 4, !dbg !214
  %47 = load i32, ptr %mask, align 4, !dbg !215
  %48 = load i32, ptr %range, align 4
  store i32 %48, ptr %self, align 4
  %49 = load i32, ptr %self, align 4, !dbg !216
  %50 = call i32 @llvm.ctlz.i32(i32 %49, i1 false), !dbg !216
  %shift_exceeds = icmp uge i32 %50, 32, !dbg !215
  %51 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !215
  br i1 %51, label %panic, label %checkok, !dbg !215

checkok:                                          ; preds = %if.exit38
  %lshr = lshr i32 %47, %50, !dbg !215
  %52 = freeze i32 %lshr, !dbg !215
  store i32 %52, ptr %mask, align 4, !dbg !215
  call void @llvm.dbg.declare(metadata ptr %x, metadata !219, metadata !DIExpression()), !dbg !220
  br label %loop.body, !dbg !221

loop.cond:                                        ; preds = %loop.body
  %53 = load i32, ptr %x, align 4, !dbg !222
  %54 = load i32, ptr %range, align 4, !dbg !224
  %gt = icmp ugt i32 %53, %54, !dbg !222
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !222

loop.body:                                        ; preds = %loop.cond, %checkok
  %55 = load ptr, ptr %random25, align 8, !dbg !225
  %56 = call i32 @std.math.random.Sfc64Random.next_int(ptr %55), !dbg !225
  %57 = load i32, ptr %mask, align 4, !dbg !227
  %and = and i32 %56, %57, !dbg !225
  store i32 %and, ptr %x, align 4, !dbg !225
  br label %loop.cond, !dbg !225

loop.exit:                                        ; preds = %loop.cond
  %58 = load i32, ptr %x, align 4, !dbg !228
  store i32 %58, ptr %blockret, align 4, !dbg !228
  br label %expr_block.exit, !dbg !228

expr_block.exit:                                  ; preds = %loop.exit, %if.then37
  %59 = load i32, ptr %blockret, align 4, !dbg !228
  %60 = load i32, ptr %min11, align 4, !dbg !229
  %add45 = add i32 %59, %60, !dbg !207
  ret i32 %add45, !dbg !207

panic:                                            ; preds = %if.exit38
  store i32 %50, ptr %taddr40, align 4
  %61 = insertvalue %any undef, ptr %taddr40, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.3, i64 35 }, ptr %taddr41, align 8
  %63 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr42, align 8
  %64 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.func.5, i64 13 }, ptr %taddr43, align 8
  %65 = load [2 x i64], ptr %taddr43, align 8
  store %any %62, ptr %varargslots, align 8
  %66 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %66, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr44, align 8
  %67 = load [2 x i64], ptr %taddr44, align 8
  call void @std.core.builtin.panicf([2 x i64] %63, [2 x i64] %64, [2 x i64] %65, i32 42, [2 x i64] %67), !dbg !215
  unreachable, !dbg !215
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak double @std.math.random.rnd() #0 !dbg !230 {
entry:
  %random = alloca ptr, align 8
  %random1 = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %sretparam = alloca [32 x i8], align 1
  %taddr4 = alloca %"char[]", align 8
  %val = alloca i64, align 8
  %0 = load i8, ptr @std.math.random.default_random_initialized, align 1, !dbg !234
  %1 = trunc i8 %0 to i1, !dbg !234
  %not = xor i1 %1, true, !dbg !234
  br i1 %not, label %if.then, label %if.exit, !dbg !234

if.then:                                          ; preds = %entry
  store ptr @std.math.random.default_random, ptr %random, align 8
  %2 = load ptr, ptr %random, align 8
  store ptr %2, ptr %random1, align 8
  br i1 true, label %assert_ok, label %assert_fail, !dbg !237

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg, i64 38 }, ptr %taddr, align 8
  %3 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr2, align 8
  %4 = load [2 x i64], ptr %taddr2, align 8
  store %"char[]" { ptr @.func.6, i64 3 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  %6 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %6([2 x i64] %3, [2 x i64] %4, [2 x i64] %5, i32 24), !dbg !239
  unreachable, !dbg !239

assert_ok:                                        ; preds = %if.then
  call void @std.math.random.entropy(ptr sret([32 x i8]) align 1 %sretparam), !dbg !244
  %7 = insertvalue %"char[]" undef, ptr %sretparam, 0, !dbg !244
  %8 = insertvalue %"char[]" %7, i64 32, 1, !dbg !244
  %9 = load ptr, ptr %random, align 8, !dbg !244
  store %"char[]" %8, ptr %taddr4, align 8
  %10 = load [2 x i64], ptr %taddr4, align 8
  call void @std.math.random.Sfc64Random.set_seed(ptr %9, [2 x i64] %10), !dbg !245
  store i8 1, ptr @std.math.random.default_random_initialized, align 1, !dbg !246
  br label %if.exit, !dbg !246

if.exit:                                          ; preds = %assert_ok, %entry
  call void @llvm.dbg.declare(metadata ptr %val, metadata !247, metadata !DIExpression()), !dbg !248
  %11 = call i64 @std.math.random.Sfc64Random.next_long(ptr @std.math.random.default_random), !dbg !249
  %and = and i64 %11, 9007199254740991, !dbg !249
  store i64 %and, ptr %val, align 8, !dbg !249
  %12 = load i64, ptr %val, align 8, !dbg !250
  %uifp = uitofp i64 %12 to double, !dbg !250
  %fmul = fmul double %uifp, 0x3CA0000000000000, !dbg !250
  ret double %fmul, !dbg !250
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.seeder([2 x i64] %0, [2 x i64] %1) #0 !dbg !251 {
entry:
  %input = alloca %"char[]", align 8
  %out_buffer = alloca %"char[]", align 8
  %out_chars = alloca i64, align 8
  %current = alloca ptr, align 8
  %mark = alloca i64, align 8
  %words = alloca %"ulong[]", align 8
  %elements = alloca i64, align 8
  %taddr = alloca ptr, align 8
  %taddr3 = alloca i64, align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr9 = alloca %"any[]", align 8
  %words_len_2 = alloca i64, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 8
  %taddr32 = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %varargslots43 = alloca [1 x %any], align 8
  %taddr45 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 8
  %taddr57 = alloca %"any[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %taddr69 = alloca i64, align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca %"char[]", align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %varargslots74 = alloca [2 x %any], align 8
  %taddr77 = alloca %"any[]", align 8
  %taddr83 = alloca i64, align 8
  %taddr84 = alloca i64, align 8
  %taddr85 = alloca %"char[]", align 8
  %taddr86 = alloca %"char[]", align 8
  %taddr87 = alloca %"char[]", align 8
  %varargslots88 = alloca [2 x %any], align 8
  %taddr91 = alloca %"any[]", align 8
  %remaining = alloca i64, align 8
  %rest = alloca i64, align 8
  %dst = alloca ptr, align 8
  %taddr104 = alloca i64, align 8
  %taddr105 = alloca i64, align 8
  %taddr106 = alloca %"char[]", align 8
  %taddr107 = alloca %"char[]", align 8
  %taddr108 = alloca %"char[]", align 8
  %varargslots109 = alloca [2 x %any], align 8
  %taddr112 = alloca %"any[]", align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %taddr126 = alloca i64, align 8
  %taddr127 = alloca %"char[]", align 8
  %taddr128 = alloca %"char[]", align 8
  %taddr129 = alloca %"char[]", align 8
  %varargslots130 = alloca [1 x %any], align 8
  %taddr132 = alloca %"any[]", align 8
  %taddr136 = alloca i64, align 8
  %taddr137 = alloca i64, align 8
  %taddr138 = alloca %"char[]", align 8
  %taddr139 = alloca %"char[]", align 8
  %taddr140 = alloca %"char[]", align 8
  %varargslots141 = alloca [2 x %any], align 8
  %taddr144 = alloca %"any[]", align 8
  %taddr152 = alloca i64, align 8
  %taddr153 = alloca %"char[]", align 8
  %taddr154 = alloca %"char[]", align 8
  %taddr155 = alloca %"char[]", align 8
  %varargslots156 = alloca [1 x %any], align 8
  %taddr158 = alloca %"any[]", align 8
  %taddr162 = alloca i64, align 8
  %taddr163 = alloca i64, align 8
  %taddr164 = alloca %"char[]", align 8
  %taddr165 = alloca %"char[]", align 8
  %taddr166 = alloca %"char[]", align 8
  %varargslots167 = alloca [2 x %any], align 8
  %taddr170 = alloca %"any[]", align 8
  %taddr176 = alloca i64, align 8
  %taddr177 = alloca %"char[]", align 8
  %taddr178 = alloca %"char[]", align 8
  %taddr179 = alloca %"char[]", align 8
  %varargslots180 = alloca [1 x %any], align 8
  %taddr182 = alloca %"any[]", align 8
  %taddr186 = alloca i64, align 8
  %taddr187 = alloca i64, align 8
  %taddr188 = alloca %"char[]", align 8
  %taddr189 = alloca %"char[]", align 8
  %taddr190 = alloca %"char[]", align 8
  %varargslots191 = alloca [2 x %any], align 8
  %taddr194 = alloca %"any[]", align 8
  %i200 = alloca i64, align 8
  %j205 = alloca i64, align 8
  %taddr209 = alloca %"char[]", align 8
  %taddr210 = alloca %"char[]", align 8
  %taddr211 = alloca %"char[]", align 8
  %taddr216 = alloca i64, align 8
  %taddr217 = alloca %"char[]", align 8
  %taddr218 = alloca %"char[]", align 8
  %taddr219 = alloca %"char[]", align 8
  %varargslots220 = alloca [1 x %any], align 8
  %taddr222 = alloca %"any[]", align 8
  %taddr226 = alloca i64, align 8
  %taddr227 = alloca i64, align 8
  %taddr228 = alloca %"char[]", align 8
  %taddr229 = alloca %"char[]", align 8
  %taddr230 = alloca %"char[]", align 8
  %varargslots231 = alloca [2 x %any], align 8
  %taddr234 = alloca %"any[]", align 8
  %taddr242 = alloca %"char[]", align 8
  %taddr243 = alloca %"char[]", align 8
  %taddr244 = alloca %"char[]", align 8
  %taddr249 = alloca i64, align 8
  %taddr250 = alloca %"char[]", align 8
  %taddr251 = alloca %"char[]", align 8
  %taddr252 = alloca %"char[]", align 8
  %varargslots253 = alloca [1 x %any], align 8
  %taddr255 = alloca %"any[]", align 8
  %taddr259 = alloca i64, align 8
  %taddr260 = alloca i64, align 8
  %taddr261 = alloca %"char[]", align 8
  %taddr262 = alloca %"char[]", align 8
  %taddr263 = alloca %"char[]", align 8
  %varargslots264 = alloca [2 x %any], align 8
  %taddr267 = alloca %"any[]", align 8
  %taddr275 = alloca i64, align 8
  %taddr276 = alloca %"char[]", align 8
  %taddr277 = alloca %"char[]", align 8
  %taddr278 = alloca %"char[]", align 8
  %varargslots279 = alloca [1 x %any], align 8
  %taddr281 = alloca %"any[]", align 8
  %taddr285 = alloca i64, align 8
  %taddr286 = alloca i64, align 8
  %taddr287 = alloca %"char[]", align 8
  %taddr288 = alloca %"char[]", align 8
  %taddr289 = alloca %"char[]", align 8
  %varargslots290 = alloca [2 x %any], align 8
  %taddr293 = alloca %"any[]", align 8
  %taddr299 = alloca i64, align 8
  %taddr300 = alloca %"char[]", align 8
  %taddr301 = alloca %"char[]", align 8
  %taddr302 = alloca %"char[]", align 8
  %varargslots303 = alloca [1 x %any], align 8
  %taddr305 = alloca %"any[]", align 8
  %taddr309 = alloca i64, align 8
  %taddr310 = alloca i64, align 8
  %taddr311 = alloca %"char[]", align 8
  %taddr312 = alloca %"char[]", align 8
  %taddr313 = alloca %"char[]", align 8
  %varargslots314 = alloca [2 x %any], align 8
  %taddr317 = alloca %"any[]", align 8
  %i324 = alloca i64, align 8
  %j328 = alloca i64, align 8
  %taddr332 = alloca %"char[]", align 8
  %taddr333 = alloca %"char[]", align 8
  %taddr334 = alloca %"char[]", align 8
  %taddr340 = alloca i64, align 8
  %taddr341 = alloca i64, align 8
  %taddr342 = alloca %"char[]", align 8
  %taddr343 = alloca %"char[]", align 8
  %taddr344 = alloca %"char[]", align 8
  %varargslots345 = alloca [2 x %any], align 8
  %taddr348 = alloca %"any[]", align 8
  %taddr355 = alloca i64, align 8
  %taddr356 = alloca i64, align 8
  %taddr357 = alloca %"char[]", align 8
  %taddr358 = alloca %"char[]", align 8
  %taddr359 = alloca %"char[]", align 8
  %varargslots360 = alloca [2 x %any], align 8
  %taddr363 = alloca %"any[]", align 8
  %taddr369 = alloca i64, align 8
  %taddr370 = alloca i64, align 8
  %taddr371 = alloca %"char[]", align 8
  %taddr372 = alloca %"char[]", align 8
  %taddr373 = alloca %"char[]", align 8
  %varargslots374 = alloca [2 x %any], align 8
  %taddr377 = alloca %"any[]", align 8
  %taddr384 = alloca ptr, align 8
  %taddr389 = alloca i64, align 8
  %taddr390 = alloca i64, align 8
  %taddr391 = alloca %"char[]", align 8
  %taddr392 = alloca %"char[]", align 8
  %taddr393 = alloca %"char[]", align 8
  %varargslots394 = alloca [2 x %any], align 8
  %taddr397 = alloca %"any[]", align 8
  %taddr401 = alloca i64, align 8
  %taddr402 = alloca i64, align 8
  %taddr403 = alloca %"char[]", align 8
  %taddr404 = alloca %"char[]", align 8
  %taddr405 = alloca %"char[]", align 8
  %varargslots406 = alloca [2 x %any], align 8
  %taddr409 = alloca %"any[]", align 8
  store [2 x i64] %0, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !260, metadata !DIExpression()), !dbg !261
  store [2 x i64] %1, ptr %out_buffer, align 8
  call void @llvm.dbg.declare(metadata ptr %out_buffer, metadata !262, metadata !DIExpression()), !dbg !263
  call void @llvm.dbg.declare(metadata ptr %out_chars, metadata !264, metadata !DIExpression()), !dbg !265
  %ptradd = getelementptr inbounds i8, ptr %out_buffer, i64 8, !dbg !266
  %2 = load i64, ptr %ptradd, align 8, !dbg !266
  store i64 %2, ptr %out_chars, align 8, !dbg !266
  call void @llvm.dbg.declare(metadata ptr %current, metadata !267, metadata !DIExpression()), !dbg !296
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !298
  %i2nb = icmp eq ptr %3, null, !dbg !298
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !298

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !302
  br label %if.exit, !dbg !302

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !304
  store ptr %4, ptr %current, align 8, !dbg !304
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !305, metadata !DIExpression()), !dbg !306
  %5 = load ptr, ptr %current, align 8, !dbg !307
  %ptradd1 = getelementptr inbounds i8, ptr %5, i64 24, !dbg !307
  %6 = load i64, ptr %ptradd1, align 8, !dbg !307
  store i64 %6, ptr %mark, align 8, !dbg !307
  call void @llvm.dbg.declare(metadata ptr %words, metadata !308, metadata !DIExpression()), !dbg !315
  %7 = load i64, ptr %out_chars, align 8, !dbg !316
  %add = add i64 %7, 7, !dbg !316
  %sdiv = sdiv i64 %add, 8, !dbg !316
  store i64 %sdiv, ptr %elements, align 8
  %8 = load i64, ptr %elements, align 8, !dbg !317
  %mul = mul i64 8, %8, !dbg !320
  %9 = call ptr @std.core.mem.tmalloc(i64 %mul, i64 8) #5, !dbg !321
  store ptr %9, ptr %taddr, align 8
  %10 = load ptr, ptr %taddr, align 8
  %11 = load i64, ptr %elements, align 8, !dbg !322
  %add2 = add i64 0, %11, !dbg !322
  %size = sub i64 %add2, 0, !dbg !322
  %12 = insertvalue %"ulong[]" undef, ptr %10, 0, !dbg !322
  %13 = insertvalue %"ulong[]" %12, i64 %size, 1, !dbg !322
  store %"ulong[]" %13, ptr %words, align 8, !dbg !322
  %14 = load %"ulong[]", ptr %words, align 8, !dbg !323
  %15 = extractvalue %"ulong[]" %14, 0, !dbg !323
  %16 = extractvalue %"ulong[]" %14, 1, !dbg !324
  %gt = icmp ugt i64 0, %16, !dbg !324
  %17 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !324
  br i1 %17, label %panic, label %checkok, !dbg !324

checkok:                                          ; preds = %if.exit
  br label %cond, !dbg !323

cond:                                             ; preds = %assign, %checkok
  %18 = phi i64 [ 0, %checkok ], [ %add10, %assign ], !dbg !323
  %lt = icmp ult i64 %18, %16, !dbg !323
  br i1 %lt, label %assign, label %exit, !dbg !323

assign:                                           ; preds = %cond
  %ptroffset = getelementptr inbounds [8 x i8], ptr %15, i64 %18, !dbg !323
  store i64 -7046029254386353131, ptr %ptroffset, align 8, !dbg !323
  %add10 = add i64 %18, 1, !dbg !323
  br label %cond, !dbg !323

exit:                                             ; preds = %cond
  call void @llvm.dbg.declare(metadata ptr %words_len_2, metadata !325, metadata !DIExpression()), !dbg !326
  %ptradd11 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !327
  %19 = load i64, ptr %ptradd11, align 8, !dbg !327
  %mul12 = mul i64 %19, 2, !dbg !327
  store i64 %mul12, ptr %words_len_2, align 8, !dbg !327
  call void @llvm.dbg.declare(metadata ptr %i, metadata !328, metadata !DIExpression()), !dbg !330
  store i64 0, ptr %i, align 8, !dbg !331
  br label %loop.cond, !dbg !331

loop.cond:                                        ; preds = %checkok92, %exit
  %20 = load i64, ptr %i, align 8, !dbg !332
  %ptradd13 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !333
  %21 = load i64, ptr %ptradd13, align 8, !dbg !333
  %sdiv14 = sdiv i64 %21, 8, !dbg !333
  %gt15 = icmp sgt i64 %sdiv14, %20, !dbg !332
  %check = icmp sge i64 %20, 0, !dbg !332
  %siui-gt = and i1 %check, %gt15, !dbg !332
  br i1 %siui-gt, label %loop.body, label %loop.exit, !dbg !332

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %j, metadata !334, metadata !DIExpression()), !dbg !336
  %22 = load i64, ptr %i, align 8, !dbg !337
  %ptradd16 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !338
  %23 = load i64, ptr %ptradd16, align 8, !dbg !338
  %zero = icmp eq i64 %23, 0, !dbg !337
  %24 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !337
  br i1 %24, label %panic17, label %checkok21, !dbg !337

checkok21:                                        ; preds = %loop.body
  %umod = urem i64 %22, %23, !dbg !337
  store i64 %umod, ptr %j, align 8, !dbg !337
  %ptradd22 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !339
  %25 = load i64, ptr %ptradd22, align 8, !dbg !339
  %26 = load ptr, ptr %words, align 8, !dbg !339
  %27 = load i64, ptr %j, align 8, !dbg !340
  %ge = icmp uge i64 %27, %25, !dbg !340
  %28 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !340
  br i1 %28, label %panic23, label %checkok33, !dbg !340

checkok33:                                        ; preds = %checkok21
  %ptroffset34 = getelementptr inbounds [8 x i8], ptr %26, i64 %27, !dbg !340
  %29 = load i64, ptr %ptroffset34, align 8, !dbg !340
  %ptradd35 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !341
  %30 = load i64, ptr %ptradd35, align 8, !dbg !341
  %31 = load ptr, ptr %input, align 8, !dbg !341
  %32 = load i64, ptr %i, align 8, !dbg !342
  %mul36 = mul i64 %32, 8, !dbg !342
  %lt37 = icmp slt i64 %mul36, 0, !dbg !342
  %33 = call i1 @llvm.expect.i1(i1 %lt37, i1 false), !dbg !342
  br i1 %33, label %panic38, label %checkok46, !dbg !342

checkok46:                                        ; preds = %checkok33
  %ge47 = icmp sge i64 %mul36, %30, !dbg !342
  %34 = call i1 @llvm.expect.i1(i1 %ge47, i1 false), !dbg !342
  br i1 %34, label %panic48, label %checkok58, !dbg !342

checkok58:                                        ; preds = %checkok46
  %ptradd59 = getelementptr inbounds i8, ptr %31, i64 %mul36, !dbg !342
  %checknull = icmp eq ptr %ptradd59, null, !dbg !342
  %35 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !342
  br i1 %35, label %panic60, label %checkok64, !dbg !342

checkok64:                                        ; preds = %checkok58
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %ptradd59, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !343, metadata !DIExpression()), !dbg !346
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !348
  %36 = load i64, ptr %x, align 8, !dbg !349
  %mul65 = mul i64 %36, -3372029247567499371, !dbg !347
  %sub = sub i64 %29, %mul65, !dbg !339
  store i64 %sub, ptr %ptroffset34, align 8, !dbg !339
  %ptradd66 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !350
  %37 = load i64, ptr %ptradd66, align 8, !dbg !350
  %38 = load ptr, ptr %words, align 8, !dbg !350
  %39 = load i64, ptr %j, align 8, !dbg !351
  %ge67 = icmp uge i64 %39, %37, !dbg !351
  %40 = call i1 @llvm.expect.i1(i1 %ge67, i1 false), !dbg !351
  br i1 %40, label %panic68, label %checkok78, !dbg !351

checkok78:                                        ; preds = %checkok64
  %ptroffset79 = getelementptr inbounds [8 x i8], ptr %38, i64 %39, !dbg !351
  %41 = load i64, ptr %ptroffset79, align 8, !dbg !351
  %ptradd80 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !352
  %42 = load i64, ptr %ptradd80, align 8, !dbg !352
  %43 = load ptr, ptr %words, align 8, !dbg !352
  %44 = load i64, ptr %j, align 8, !dbg !353
  %ge81 = icmp uge i64 %44, %42, !dbg !353
  %45 = call i1 @llvm.expect.i1(i1 %ge81, i1 false), !dbg !353
  br i1 %45, label %panic82, label %checkok92, !dbg !353

checkok92:                                        ; preds = %checkok78
  %ptroffset93 = getelementptr inbounds [8 x i8], ptr %43, i64 %44, !dbg !353
  %46 = load i64, ptr %ptroffset93, align 8, !dbg !353
  %lshr = lshr i64 %46, 25, !dbg !352
  %47 = freeze i64 %lshr, !dbg !352
  %xor = xor i64 %41, %47, !dbg !350
  store i64 %xor, ptr %ptroffset79, align 8, !dbg !350
  %48 = load i64, ptr %i, align 8, !dbg !354
  %add94 = add i64 %48, 1, !dbg !354
  store i64 %add94, ptr %i, align 8, !dbg !354
  br label %loop.cond, !dbg !354

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !355, metadata !DIExpression()), !dbg !356
  %ptradd95 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !357
  %49 = load i64, ptr %ptradd95, align 8, !dbg !357
  %ptradd96 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !358
  %50 = load i64, ptr %ptradd96, align 8, !dbg !358
  %sdiv97 = sdiv i64 %50, 8, !dbg !358
  %mul98 = mul i64 %sdiv97, 8, !dbg !358
  %sub99 = sub i64 %49, %mul98, !dbg !357
  store i64 %sub99, ptr %remaining, align 8, !dbg !357
  %51 = load i64, ptr %remaining, align 8, !dbg !359
  %i2b = icmp ne i64 %51, 0, !dbg !359
  br i1 %i2b, label %if.then100, label %if.exit199, !dbg !359

if.then100:                                       ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %rest, metadata !360, metadata !DIExpression()), !dbg !362
  store i64 -1065810590584100411, ptr %rest, align 8, !dbg !363
  store ptr %rest, ptr %dst, align 8
  %ptradd101 = getelementptr inbounds i8, ptr %input, i64 8, !dbg !364
  %52 = load i64, ptr %ptradd101, align 8, !dbg !364
  %53 = load ptr, ptr %input, align 8, !dbg !364
  %54 = load i64, ptr %remaining, align 8, !dbg !365
  %55 = sub nuw i64 %52, %54, !dbg !365
  %ge102 = icmp uge i64 %55, %52, !dbg !365
  %56 = call i1 @llvm.expect.i1(i1 %ge102, i1 false), !dbg !365
  br i1 %56, label %panic103, label %checkok113, !dbg !365

checkok113:                                       ; preds = %if.then100
  %ptradd114 = getelementptr inbounds i8, ptr %53, i64 %55, !dbg !365
  store ptr %ptradd114, ptr %src, align 8
  %57 = load i64, ptr %remaining, align 8
  store i64 %57, ptr %len, align 8
  %58 = load i64, ptr %len, align 8, !dbg !366
  %eq = icmp eq i64 0, %58, !dbg !366
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !366

or.rhs:                                           ; preds = %checkok113
  %59 = load ptr, ptr %dst, align 8, !dbg !370
  %60 = load i64, ptr %len, align 8, !dbg !371
  %ptradd_any = getelementptr i8, ptr %59, i64 %60, !dbg !371
  %61 = load ptr, ptr %src, align 8, !dbg !372
  %le = icmp ule ptr %ptradd_any, %61, !dbg !370
  br label %or.phi, !dbg !370

or.phi:                                           ; preds = %or.rhs, %checkok113
  %val = phi i1 [ true, %checkok113 ], [ %le, %or.rhs ], !dbg !370
  br i1 %val, label %or.phi118, label %or.rhs115, !dbg !370

or.rhs115:                                        ; preds = %or.phi
  %62 = load ptr, ptr %src, align 8, !dbg !373
  %63 = load i64, ptr %len, align 8, !dbg !374
  %ptradd_any116 = getelementptr i8, ptr %62, i64 %63, !dbg !374
  %64 = load ptr, ptr %dst, align 8, !dbg !375
  %le117 = icmp ule ptr %ptradd_any116, %64, !dbg !373
  br label %or.phi118, !dbg !373

or.phi118:                                        ; preds = %or.rhs115, %or.phi
  %val119 = phi i1 [ true, %or.phi ], [ %le117, %or.rhs115 ], !dbg !373
  br i1 %val119, label %assert_ok, label %assert_fail, !dbg !373

assert_fail:                                      ; preds = %or.phi118
  store %"char[]" { ptr @.panic_msg.16, i64 95 }, ptr %taddr120, align 8
  %65 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.file.17, i64 6 }, ptr %taddr121, align 8
  %66 = load [2 x i64], ptr %taddr121, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr122, align 8
  %67 = load [2 x i64], ptr %taddr122, align 8
  %68 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %68([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 324), !dbg !366
  unreachable, !dbg !366

assert_ok:                                        ; preds = %or.phi118
  %69 = load ptr, ptr %dst, align 8, !dbg !376
  %70 = load ptr, ptr %src, align 8, !dbg !377
  %71 = load i64, ptr %len, align 8, !dbg !378
  call void @llvm.memcpy.p0.p0.i64(ptr %69, ptr %70, i64 %71, i1 false), !dbg !379
  %ptradd123 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !380
  %72 = load i64, ptr %ptradd123, align 8, !dbg !380
  %73 = load ptr, ptr %words, align 8, !dbg !380
  %74 = sub nuw i64 %72, 1, !dbg !381
  %lt124 = icmp slt i64 %74, 0, !dbg !381
  %75 = call i1 @llvm.expect.i1(i1 %lt124, i1 false), !dbg !381
  br i1 %75, label %panic125, label %checkok133, !dbg !381

checkok133:                                       ; preds = %assert_ok
  %ge134 = icmp sge i64 %74, %72, !dbg !381
  %76 = call i1 @llvm.expect.i1(i1 %ge134, i1 false), !dbg !381
  br i1 %76, label %panic135, label %checkok145, !dbg !381

checkok145:                                       ; preds = %checkok133
  %ptroffset146 = getelementptr inbounds [8 x i8], ptr %73, i64 %74, !dbg !381
  %77 = load i64, ptr %ptroffset146, align 8, !dbg !381
  %78 = load i64, ptr %rest, align 8, !dbg !382
  %mul147 = mul i64 %78, -3372029247567499371, !dbg !382
  %sub148 = sub i64 %77, %mul147, !dbg !380
  store i64 %sub148, ptr %ptroffset146, align 8, !dbg !380
  %ptradd149 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !383
  %79 = load i64, ptr %ptradd149, align 8, !dbg !383
  %80 = load ptr, ptr %words, align 8, !dbg !383
  %81 = sub nuw i64 %79, 1, !dbg !384
  %lt150 = icmp slt i64 %81, 0, !dbg !384
  %82 = call i1 @llvm.expect.i1(i1 %lt150, i1 false), !dbg !384
  br i1 %82, label %panic151, label %checkok159, !dbg !384

checkok159:                                       ; preds = %checkok145
  %ge160 = icmp sge i64 %81, %79, !dbg !384
  %83 = call i1 @llvm.expect.i1(i1 %ge160, i1 false), !dbg !384
  br i1 %83, label %panic161, label %checkok171, !dbg !384

checkok171:                                       ; preds = %checkok159
  %ptroffset172 = getelementptr inbounds [8 x i8], ptr %80, i64 %81, !dbg !384
  %84 = load i64, ptr %ptroffset172, align 8, !dbg !384
  %ptradd173 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !385
  %85 = load i64, ptr %ptradd173, align 8, !dbg !385
  %86 = load ptr, ptr %words, align 8, !dbg !385
  %87 = sub nuw i64 %85, 1, !dbg !386
  %lt174 = icmp slt i64 %87, 0, !dbg !386
  %88 = call i1 @llvm.expect.i1(i1 %lt174, i1 false), !dbg !386
  br i1 %88, label %panic175, label %checkok183, !dbg !386

checkok183:                                       ; preds = %checkok171
  %ge184 = icmp sge i64 %87, %85, !dbg !386
  %89 = call i1 @llvm.expect.i1(i1 %ge184, i1 false), !dbg !386
  br i1 %89, label %panic185, label %checkok195, !dbg !386

checkok195:                                       ; preds = %checkok183
  %ptroffset196 = getelementptr inbounds [8 x i8], ptr %86, i64 %87, !dbg !386
  %90 = load i64, ptr %ptroffset196, align 8, !dbg !386
  %lshr197 = lshr i64 %90, 25, !dbg !385
  %91 = freeze i64 %lshr197, !dbg !385
  %xor198 = xor i64 %84, %91, !dbg !383
  store i64 %xor198, ptr %ptroffset172, align 8, !dbg !383
  br label %if.exit199, !dbg !383

if.exit199:                                       ; preds = %checkok195, %loop.exit
  call void @llvm.dbg.declare(metadata ptr %i200, metadata !387, metadata !DIExpression()), !dbg !390
  %92 = load i64, ptr %words_len_2, align 8, !dbg !391
  %sub201 = sub i64 %92, 1, !dbg !391
  store i64 %sub201, ptr %i200, align 8, !dbg !391
  br label %loop.cond202, !dbg !391

loop.cond202:                                     ; preds = %checkok318, %if.exit199
  %93 = load i64, ptr %i200, align 8, !dbg !392
  %ge203 = icmp sge i64 %93, 0, !dbg !392
  br i1 %ge203, label %loop.body204, label %loop.exit323, !dbg !392

loop.body204:                                     ; preds = %loop.cond202
  call void @llvm.dbg.declare(metadata ptr %j205, metadata !393, metadata !DIExpression()), !dbg !395
  %94 = load i64, ptr %i200, align 8, !dbg !396
  %ptradd206 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !397
  %95 = load i64, ptr %ptradd206, align 8, !dbg !397
  %zero207 = icmp eq i64 %95, 0, !dbg !396
  %96 = call i1 @llvm.expect.i1(i1 %zero207, i1 false), !dbg !396
  br i1 %96, label %panic208, label %checkok212, !dbg !396

checkok212:                                       ; preds = %loop.body204
  %smod = srem i64 %94, %95, !dbg !396
  store i64 %smod, ptr %j205, align 8, !dbg !396
  %ptradd213 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !398
  %97 = load i64, ptr %ptradd213, align 8, !dbg !398
  %98 = load ptr, ptr %words, align 8, !dbg !398
  %99 = load i64, ptr %j205, align 8, !dbg !399
  %lt214 = icmp slt i64 %99, 0, !dbg !399
  %100 = call i1 @llvm.expect.i1(i1 %lt214, i1 false), !dbg !399
  br i1 %100, label %panic215, label %checkok223, !dbg !399

checkok223:                                       ; preds = %checkok212
  %ge224 = icmp sge i64 %99, %97, !dbg !399
  %101 = call i1 @llvm.expect.i1(i1 %ge224, i1 false), !dbg !399
  br i1 %101, label %panic225, label %checkok235, !dbg !399

checkok235:                                       ; preds = %checkok223
  %ptroffset236 = getelementptr inbounds [8 x i8], ptr %98, i64 %99, !dbg !399
  %102 = load i64, ptr %ptroffset236, align 8, !dbg !399
  %ptradd237 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !400
  %103 = load i64, ptr %ptradd237, align 8, !dbg !400
  %104 = load ptr, ptr %words, align 8, !dbg !400
  %105 = load i64, ptr %i200, align 8, !dbg !401
  %add238 = add i64 %105, 1, !dbg !401
  %ptradd239 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !402
  %106 = load i64, ptr %ptradd239, align 8, !dbg !402
  %zero240 = icmp eq i64 %106, 0, !dbg !401
  %107 = call i1 @llvm.expect.i1(i1 %zero240, i1 false), !dbg !401
  br i1 %107, label %panic241, label %checkok245, !dbg !401

checkok245:                                       ; preds = %checkok235
  %smod246 = srem i64 %add238, %106, !dbg !401
  %lt247 = icmp slt i64 %smod246, 0, !dbg !401
  %108 = call i1 @llvm.expect.i1(i1 %lt247, i1 false), !dbg !401
  br i1 %108, label %panic248, label %checkok256, !dbg !401

checkok256:                                       ; preds = %checkok245
  %ge257 = icmp sge i64 %smod246, %103, !dbg !401
  %109 = call i1 @llvm.expect.i1(i1 %ge257, i1 false), !dbg !401
  br i1 %109, label %panic258, label %checkok268, !dbg !401

checkok268:                                       ; preds = %checkok256
  %ptroffset269 = getelementptr inbounds [8 x i8], ptr %104, i64 %smod246, !dbg !401
  %110 = load i64, ptr %ptroffset269, align 8, !dbg !401
  %mul270 = mul i64 %110, -3372029247567499371, !dbg !400
  %sub271 = sub i64 %102, %mul270, !dbg !398
  store i64 %sub271, ptr %ptroffset236, align 8, !dbg !398
  %ptradd272 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !403
  %111 = load i64, ptr %ptradd272, align 8, !dbg !403
  %112 = load ptr, ptr %words, align 8, !dbg !403
  %113 = load i64, ptr %j205, align 8, !dbg !404
  %lt273 = icmp slt i64 %113, 0, !dbg !404
  %114 = call i1 @llvm.expect.i1(i1 %lt273, i1 false), !dbg !404
  br i1 %114, label %panic274, label %checkok282, !dbg !404

checkok282:                                       ; preds = %checkok268
  %ge283 = icmp sge i64 %113, %111, !dbg !404
  %115 = call i1 @llvm.expect.i1(i1 %ge283, i1 false), !dbg !404
  br i1 %115, label %panic284, label %checkok294, !dbg !404

checkok294:                                       ; preds = %checkok282
  %ptroffset295 = getelementptr inbounds [8 x i8], ptr %112, i64 %113, !dbg !404
  %116 = load i64, ptr %ptroffset295, align 8, !dbg !404
  %ptradd296 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !405
  %117 = load i64, ptr %ptradd296, align 8, !dbg !405
  %118 = load ptr, ptr %words, align 8, !dbg !405
  %119 = load i64, ptr %j205, align 8, !dbg !406
  %lt297 = icmp slt i64 %119, 0, !dbg !406
  %120 = call i1 @llvm.expect.i1(i1 %lt297, i1 false), !dbg !406
  br i1 %120, label %panic298, label %checkok306, !dbg !406

checkok306:                                       ; preds = %checkok294
  %ge307 = icmp sge i64 %119, %117, !dbg !406
  %121 = call i1 @llvm.expect.i1(i1 %ge307, i1 false), !dbg !406
  br i1 %121, label %panic308, label %checkok318, !dbg !406

checkok318:                                       ; preds = %checkok306
  %ptroffset319 = getelementptr inbounds [8 x i8], ptr %118, i64 %119, !dbg !406
  %122 = load i64, ptr %ptroffset319, align 8, !dbg !406
  %lshr320 = lshr i64 %122, 25, !dbg !405
  %123 = freeze i64 %lshr320, !dbg !405
  %xor321 = xor i64 %116, %123, !dbg !403
  store i64 %xor321, ptr %ptroffset295, align 8, !dbg !403
  %124 = load i64, ptr %i200, align 8, !dbg !407
  %sub322 = sub i64 %124, 1, !dbg !407
  store i64 %sub322, ptr %i200, align 8, !dbg !407
  br label %loop.cond202, !dbg !407

loop.exit323:                                     ; preds = %loop.cond202
  call void @llvm.dbg.declare(metadata ptr %i324, metadata !408, metadata !DIExpression()), !dbg !410
  store i64 0, ptr %i324, align 8, !dbg !411
  br label %loop.cond325, !dbg !411

loop.cond325:                                     ; preds = %checkok378, %loop.exit323
  %125 = load i64, ptr %i324, align 8, !dbg !412
  %126 = load i64, ptr %words_len_2, align 8, !dbg !413
  %lt326 = icmp ult i64 %125, %126, !dbg !412
  br i1 %lt326, label %loop.body327, label %loop.exit383, !dbg !412

loop.body327:                                     ; preds = %loop.cond325
  call void @llvm.dbg.declare(metadata ptr %j328, metadata !414, metadata !DIExpression()), !dbg !416
  %127 = load i64, ptr %i324, align 8, !dbg !417
  %ptradd329 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !418
  %128 = load i64, ptr %ptradd329, align 8, !dbg !418
  %zero330 = icmp eq i64 %128, 0, !dbg !417
  %129 = call i1 @llvm.expect.i1(i1 %zero330, i1 false), !dbg !417
  br i1 %129, label %panic331, label %checkok335, !dbg !417

checkok335:                                       ; preds = %loop.body327
  %umod336 = urem i64 %127, %128, !dbg !417
  store i64 %umod336, ptr %j328, align 8, !dbg !417
  %ptradd337 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !419
  %130 = load i64, ptr %ptradd337, align 8, !dbg !419
  %131 = load ptr, ptr %words, align 8, !dbg !419
  %132 = load i64, ptr %j328, align 8, !dbg !420
  %ge338 = icmp uge i64 %132, %130, !dbg !420
  %133 = call i1 @llvm.expect.i1(i1 %ge338, i1 false), !dbg !420
  br i1 %133, label %panic339, label %checkok349, !dbg !420

checkok349:                                       ; preds = %checkok335
  %ptroffset350 = getelementptr inbounds [8 x i8], ptr %131, i64 %132, !dbg !420
  %134 = load i64, ptr %ptroffset350, align 8, !dbg !420
  %mul351 = mul i64 %134, -1065810590584100411, !dbg !419
  store i64 %mul351, ptr %ptroffset350, align 8, !dbg !419
  %ptradd352 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !421
  %135 = load i64, ptr %ptradd352, align 8, !dbg !421
  %136 = load ptr, ptr %words, align 8, !dbg !421
  %137 = load i64, ptr %j328, align 8, !dbg !422
  %ge353 = icmp uge i64 %137, %135, !dbg !422
  %138 = call i1 @llvm.expect.i1(i1 %ge353, i1 false), !dbg !422
  br i1 %138, label %panic354, label %checkok364, !dbg !422

checkok364:                                       ; preds = %checkok349
  %ptroffset365 = getelementptr inbounds [8 x i8], ptr %136, i64 %137, !dbg !422
  %139 = load i64, ptr %ptroffset365, align 8, !dbg !422
  %ptradd366 = getelementptr inbounds i8, ptr %words, i64 8, !dbg !423
  %140 = load i64, ptr %ptradd366, align 8, !dbg !423
  %141 = load ptr, ptr %words, align 8, !dbg !423
  %142 = load i64, ptr %j328, align 8, !dbg !424
  %ge367 = icmp uge i64 %142, %140, !dbg !424
  %143 = call i1 @llvm.expect.i1(i1 %ge367, i1 false), !dbg !424
  br i1 %143, label %panic368, label %checkok378, !dbg !424

checkok378:                                       ; preds = %checkok364
  %ptroffset379 = getelementptr inbounds [8 x i8], ptr %141, i64 %142, !dbg !424
  %144 = load i64, ptr %ptroffset379, align 8, !dbg !424
  %lshr380 = lshr i64 %144, 25, !dbg !423
  %145 = freeze i64 %lshr380, !dbg !423
  %xor381 = xor i64 %139, %145, !dbg !421
  store i64 %xor381, ptr %ptroffset365, align 8, !dbg !421
  %146 = load i64, ptr %i324, align 8, !dbg !425
  %add382 = add i64 %146, 1, !dbg !425
  store i64 %add382, ptr %i324, align 8, !dbg !425
  br label %loop.cond325, !dbg !425

loop.exit383:                                     ; preds = %loop.cond325
  %147 = load ptr, ptr %words, align 8, !dbg !426
  store ptr %147, ptr %taddr384, align 8
  %148 = load ptr, ptr %taddr384, align 8
  %149 = load i64, ptr %out_chars, align 8, !dbg !427
  %add385 = add i64 0, %149, !dbg !427
  %size386 = sub i64 %add385, 0, !dbg !427
  %150 = insertvalue %"char[]" undef, ptr %148, 0, !dbg !427
  %151 = insertvalue %"char[]" %150, i64 %size386, 1, !dbg !427
  %152 = load %"char[]", ptr %out_buffer, align 8, !dbg !428
  %153 = extractvalue %"char[]" %152, 0, !dbg !428
  %154 = extractvalue %"char[]" %152, 1, !dbg !429
  %gt387 = icmp ugt i64 0, %154, !dbg !429
  %155 = call i1 @llvm.expect.i1(i1 %gt387, i1 false), !dbg !429
  br i1 %155, label %panic388, label %checkok398, !dbg !429

checkok398:                                       ; preds = %loop.exit383
  %size399 = sub i64 %154, 0, !dbg !428
  %156 = insertvalue %"char[]" undef, ptr %153, 0, !dbg !428
  %157 = insertvalue %"char[]" %156, i64 %size399, 1, !dbg !428
  %158 = extractvalue %"char[]" %157, 0, !dbg !428
  %159 = extractvalue %"char[]" %151, 0, !dbg !428
  %160 = extractvalue %"char[]" %151, 1, !dbg !428
  %161 = extractvalue %"char[]" %157, 1, !dbg !428
  %neq = icmp ne i64 %161, %160, !dbg !428
  %162 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !428
  br i1 %162, label %panic400, label %checkok410, !dbg !428

checkok410:                                       ; preds = %checkok398
  %163 = mul i64 %160, 1, !dbg !428
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %158, ptr align 1 %159, i64 %163, i1 false), !dbg !428
  %164 = load ptr, ptr %current, align 8, !dbg !430
  %165 = load i64, ptr %mark, align 8, !dbg !430
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %164, i64 %165), !dbg !432
  ret void, !dbg !433

panic:                                            ; preds = %if.exit
  store i64 %16, ptr %taddr3, align 8
  %166 = insertvalue %any undef, ptr %taddr3, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr4, align 8
  %168 = insertvalue %any undef, ptr %taddr4, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr5, align 8
  %170 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr6, align 8
  %171 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr7, align 8
  %172 = load [2 x i64], ptr %taddr7, align 8
  store %any %167, ptr %varargslots, align 8
  %ptradd8 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %169, ptr %ptradd8, align 8
  %173 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr9, align 8
  %174 = load [2 x i64], ptr %taddr9, align 8
  call void @std.core.builtin.panicf([2 x i64] %170, [2 x i64] %171, [2 x i64] %172, i32 30, [2 x i64] %174), !dbg !323
  unreachable, !dbg !323

panic17:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.12, i64 10 }, ptr %taddr18, align 8
  %175 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr19, align 8
  %176 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr20, align 8
  %177 = load [2 x i64], ptr %taddr20, align 8
  %178 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %178([2 x i64] %175, [2 x i64] %176, [2 x i64] %177, i32 36), !dbg !337
  unreachable, !dbg !337

panic23:                                          ; preds = %checkok21
  store i64 %25, ptr %taddr24, align 8
  %179 = insertvalue %any undef, ptr %taddr24, 0
  %180 = insertvalue %any %179, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %27, ptr %taddr25, align 8
  %181 = insertvalue %any undef, ptr %taddr25, 0
  %182 = insertvalue %any %181, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr26, align 8
  %183 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr27, align 8
  %184 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr28, align 8
  %185 = load [2 x i64], ptr %taddr28, align 8
  store %any %180, ptr %varargslots29, align 8
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %182, ptr %ptradd30, align 8
  %186 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %186, i64 2, 1
  store %"any[]" %"$$temp31", ptr %taddr32, align 8
  %187 = load [2 x i64], ptr %taddr32, align 8
  call void @std.core.builtin.panicf([2 x i64] %183, [2 x i64] %184, [2 x i64] %185, i32 37, [2 x i64] %187), !dbg !340
  unreachable, !dbg !340

panic38:                                          ; preds = %checkok33
  store i64 %mul36, ptr %taddr39, align 8
  %188 = insertvalue %any undef, ptr %taddr39, 0
  %189 = insertvalue %any %188, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr40, align 8
  %190 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr41, align 8
  %191 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr42, align 8
  %192 = load [2 x i64], ptr %taddr42, align 8
  store %any %189, ptr %varargslots43, align 8
  %193 = insertvalue %"any[]" undef, ptr %varargslots43, 0
  %"$$temp44" = insertvalue %"any[]" %193, i64 1, 1
  store %"any[]" %"$$temp44", ptr %taddr45, align 8
  %194 = load [2 x i64], ptr %taddr45, align 8
  call void @std.core.builtin.panicf([2 x i64] %190, [2 x i64] %191, [2 x i64] %192, i32 37, [2 x i64] %194), !dbg !342
  unreachable, !dbg !342

panic48:                                          ; preds = %checkok46
  store i64 %30, ptr %taddr49, align 8
  %195 = insertvalue %any undef, ptr %taddr49, 0
  %196 = insertvalue %any %195, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %mul36, ptr %taddr50, align 8
  %197 = insertvalue %any undef, ptr %taddr50, 0
  %198 = insertvalue %any %197, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr51, align 8
  %199 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr52, align 8
  %200 = load [2 x i64], ptr %taddr52, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr53, align 8
  %201 = load [2 x i64], ptr %taddr53, align 8
  store %any %196, ptr %varargslots54, align 8
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %198, ptr %ptradd55, align 8
  %202 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %202, i64 2, 1
  store %"any[]" %"$$temp56", ptr %taddr57, align 8
  %203 = load [2 x i64], ptr %taddr57, align 8
  call void @std.core.builtin.panicf([2 x i64] %199, [2 x i64] %200, [2 x i64] %201, i32 37, [2 x i64] %203), !dbg !342
  unreachable, !dbg !342

panic60:                                          ; preds = %checkok58
  store %"char[]" { ptr @.panic_msg.15, i64 63 }, ptr %taddr61, align 8
  %204 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr62, align 8
  %205 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr63, align 8
  %206 = load [2 x i64], ptr %taddr63, align 8
  %207 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %207([2 x i64] %204, [2 x i64] %205, [2 x i64] %206, i32 37), !dbg !434
  unreachable, !dbg !434

panic68:                                          ; preds = %checkok64
  store i64 %37, ptr %taddr69, align 8
  %208 = insertvalue %any undef, ptr %taddr69, 0
  %209 = insertvalue %any %208, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %39, ptr %taddr70, align 8
  %210 = insertvalue %any undef, ptr %taddr70, 0
  %211 = insertvalue %any %210, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr71, align 8
  %212 = load [2 x i64], ptr %taddr71, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr72, align 8
  %213 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr73, align 8
  %214 = load [2 x i64], ptr %taddr73, align 8
  store %any %209, ptr %varargslots74, align 8
  %ptradd75 = getelementptr inbounds i8, ptr %varargslots74, i64 16
  store %any %211, ptr %ptradd75, align 8
  %215 = insertvalue %"any[]" undef, ptr %varargslots74, 0
  %"$$temp76" = insertvalue %"any[]" %215, i64 2, 1
  store %"any[]" %"$$temp76", ptr %taddr77, align 8
  %216 = load [2 x i64], ptr %taddr77, align 8
  call void @std.core.builtin.panicf([2 x i64] %212, [2 x i64] %213, [2 x i64] %214, i32 38, [2 x i64] %216), !dbg !351
  unreachable, !dbg !351

panic82:                                          ; preds = %checkok78
  store i64 %42, ptr %taddr83, align 8
  %217 = insertvalue %any undef, ptr %taddr83, 0
  %218 = insertvalue %any %217, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr84, align 8
  %219 = insertvalue %any undef, ptr %taddr84, 0
  %220 = insertvalue %any %219, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr85, align 8
  %221 = load [2 x i64], ptr %taddr85, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr86, align 8
  %222 = load [2 x i64], ptr %taddr86, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr87, align 8
  %223 = load [2 x i64], ptr %taddr87, align 8
  store %any %218, ptr %varargslots88, align 8
  %ptradd89 = getelementptr inbounds i8, ptr %varargslots88, i64 16
  store %any %220, ptr %ptradd89, align 8
  %224 = insertvalue %"any[]" undef, ptr %varargslots88, 0
  %"$$temp90" = insertvalue %"any[]" %224, i64 2, 1
  store %"any[]" %"$$temp90", ptr %taddr91, align 8
  %225 = load [2 x i64], ptr %taddr91, align 8
  call void @std.core.builtin.panicf([2 x i64] %221, [2 x i64] %222, [2 x i64] %223, i32 38, [2 x i64] %225), !dbg !353
  unreachable, !dbg !353

panic103:                                         ; preds = %if.then100
  store i64 %52, ptr %taddr104, align 8
  %226 = insertvalue %any undef, ptr %taddr104, 0
  %227 = insertvalue %any %226, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %55, ptr %taddr105, align 8
  %228 = insertvalue %any undef, ptr %taddr105, 0
  %229 = insertvalue %any %228, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr106, align 8
  %230 = load [2 x i64], ptr %taddr106, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr107, align 8
  %231 = load [2 x i64], ptr %taddr107, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr108, align 8
  %232 = load [2 x i64], ptr %taddr108, align 8
  store %any %227, ptr %varargslots109, align 8
  %ptradd110 = getelementptr inbounds i8, ptr %varargslots109, i64 16
  store %any %229, ptr %ptradd110, align 8
  %233 = insertvalue %"any[]" undef, ptr %varargslots109, 0
  %"$$temp111" = insertvalue %"any[]" %233, i64 2, 1
  store %"any[]" %"$$temp111", ptr %taddr112, align 8
  %234 = load [2 x i64], ptr %taddr112, align 8
  call void @std.core.builtin.panicf([2 x i64] %230, [2 x i64] %231, [2 x i64] %232, i32 46, [2 x i64] %234), !dbg !365
  unreachable, !dbg !365

panic125:                                         ; preds = %assert_ok
  store i64 %74, ptr %taddr126, align 8
  %235 = insertvalue %any undef, ptr %taddr126, 0
  %236 = insertvalue %any %235, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr127, align 8
  %237 = load [2 x i64], ptr %taddr127, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr128, align 8
  %238 = load [2 x i64], ptr %taddr128, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr129, align 8
  %239 = load [2 x i64], ptr %taddr129, align 8
  store %any %236, ptr %varargslots130, align 8
  %240 = insertvalue %"any[]" undef, ptr %varargslots130, 0
  %"$$temp131" = insertvalue %"any[]" %240, i64 1, 1
  store %"any[]" %"$$temp131", ptr %taddr132, align 8
  %241 = load [2 x i64], ptr %taddr132, align 8
  call void @std.core.builtin.panicf([2 x i64] %237, [2 x i64] %238, [2 x i64] %239, i32 47, [2 x i64] %241), !dbg !381
  unreachable, !dbg !381

panic135:                                         ; preds = %checkok133
  store i64 %72, ptr %taddr136, align 8
  %242 = insertvalue %any undef, ptr %taddr136, 0
  %243 = insertvalue %any %242, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %74, ptr %taddr137, align 8
  %244 = insertvalue %any undef, ptr %taddr137, 0
  %245 = insertvalue %any %244, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr138, align 8
  %246 = load [2 x i64], ptr %taddr138, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr139, align 8
  %247 = load [2 x i64], ptr %taddr139, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr140, align 8
  %248 = load [2 x i64], ptr %taddr140, align 8
  store %any %243, ptr %varargslots141, align 8
  %ptradd142 = getelementptr inbounds i8, ptr %varargslots141, i64 16
  store %any %245, ptr %ptradd142, align 8
  %249 = insertvalue %"any[]" undef, ptr %varargslots141, 0
  %"$$temp143" = insertvalue %"any[]" %249, i64 2, 1
  store %"any[]" %"$$temp143", ptr %taddr144, align 8
  %250 = load [2 x i64], ptr %taddr144, align 8
  call void @std.core.builtin.panicf([2 x i64] %246, [2 x i64] %247, [2 x i64] %248, i32 47, [2 x i64] %250), !dbg !381
  unreachable, !dbg !381

panic151:                                         ; preds = %checkok145
  store i64 %81, ptr %taddr152, align 8
  %251 = insertvalue %any undef, ptr %taddr152, 0
  %252 = insertvalue %any %251, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr153, align 8
  %253 = load [2 x i64], ptr %taddr153, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr154, align 8
  %254 = load [2 x i64], ptr %taddr154, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr155, align 8
  %255 = load [2 x i64], ptr %taddr155, align 8
  store %any %252, ptr %varargslots156, align 8
  %256 = insertvalue %"any[]" undef, ptr %varargslots156, 0
  %"$$temp157" = insertvalue %"any[]" %256, i64 1, 1
  store %"any[]" %"$$temp157", ptr %taddr158, align 8
  %257 = load [2 x i64], ptr %taddr158, align 8
  call void @std.core.builtin.panicf([2 x i64] %253, [2 x i64] %254, [2 x i64] %255, i32 48, [2 x i64] %257), !dbg !384
  unreachable, !dbg !384

panic161:                                         ; preds = %checkok159
  store i64 %79, ptr %taddr162, align 8
  %258 = insertvalue %any undef, ptr %taddr162, 0
  %259 = insertvalue %any %258, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %81, ptr %taddr163, align 8
  %260 = insertvalue %any undef, ptr %taddr163, 0
  %261 = insertvalue %any %260, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr164, align 8
  %262 = load [2 x i64], ptr %taddr164, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr165, align 8
  %263 = load [2 x i64], ptr %taddr165, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr166, align 8
  %264 = load [2 x i64], ptr %taddr166, align 8
  store %any %259, ptr %varargslots167, align 8
  %ptradd168 = getelementptr inbounds i8, ptr %varargslots167, i64 16
  store %any %261, ptr %ptradd168, align 8
  %265 = insertvalue %"any[]" undef, ptr %varargslots167, 0
  %"$$temp169" = insertvalue %"any[]" %265, i64 2, 1
  store %"any[]" %"$$temp169", ptr %taddr170, align 8
  %266 = load [2 x i64], ptr %taddr170, align 8
  call void @std.core.builtin.panicf([2 x i64] %262, [2 x i64] %263, [2 x i64] %264, i32 48, [2 x i64] %266), !dbg !384
  unreachable, !dbg !384

panic175:                                         ; preds = %checkok171
  store i64 %87, ptr %taddr176, align 8
  %267 = insertvalue %any undef, ptr %taddr176, 0
  %268 = insertvalue %any %267, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr177, align 8
  %269 = load [2 x i64], ptr %taddr177, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr178, align 8
  %270 = load [2 x i64], ptr %taddr178, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr179, align 8
  %271 = load [2 x i64], ptr %taddr179, align 8
  store %any %268, ptr %varargslots180, align 8
  %272 = insertvalue %"any[]" undef, ptr %varargslots180, 0
  %"$$temp181" = insertvalue %"any[]" %272, i64 1, 1
  store %"any[]" %"$$temp181", ptr %taddr182, align 8
  %273 = load [2 x i64], ptr %taddr182, align 8
  call void @std.core.builtin.panicf([2 x i64] %269, [2 x i64] %270, [2 x i64] %271, i32 48, [2 x i64] %273), !dbg !386
  unreachable, !dbg !386

panic185:                                         ; preds = %checkok183
  store i64 %85, ptr %taddr186, align 8
  %274 = insertvalue %any undef, ptr %taddr186, 0
  %275 = insertvalue %any %274, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %87, ptr %taddr187, align 8
  %276 = insertvalue %any undef, ptr %taddr187, 0
  %277 = insertvalue %any %276, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr188, align 8
  %278 = load [2 x i64], ptr %taddr188, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr189, align 8
  %279 = load [2 x i64], ptr %taddr189, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr190, align 8
  %280 = load [2 x i64], ptr %taddr190, align 8
  store %any %275, ptr %varargslots191, align 8
  %ptradd192 = getelementptr inbounds i8, ptr %varargslots191, i64 16
  store %any %277, ptr %ptradd192, align 8
  %281 = insertvalue %"any[]" undef, ptr %varargslots191, 0
  %"$$temp193" = insertvalue %"any[]" %281, i64 2, 1
  store %"any[]" %"$$temp193", ptr %taddr194, align 8
  %282 = load [2 x i64], ptr %taddr194, align 8
  call void @std.core.builtin.panicf([2 x i64] %278, [2 x i64] %279, [2 x i64] %280, i32 48, [2 x i64] %282), !dbg !386
  unreachable, !dbg !386

panic208:                                         ; preds = %loop.body204
  store %"char[]" { ptr @.panic_msg.12, i64 10 }, ptr %taddr209, align 8
  %283 = load [2 x i64], ptr %taddr209, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr210, align 8
  %284 = load [2 x i64], ptr %taddr210, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr211, align 8
  %285 = load [2 x i64], ptr %taddr211, align 8
  %286 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %286([2 x i64] %283, [2 x i64] %284, [2 x i64] %285, i32 54), !dbg !396
  unreachable, !dbg !396

panic215:                                         ; preds = %checkok212
  store i64 %99, ptr %taddr216, align 8
  %287 = insertvalue %any undef, ptr %taddr216, 0
  %288 = insertvalue %any %287, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr217, align 8
  %289 = load [2 x i64], ptr %taddr217, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr218, align 8
  %290 = load [2 x i64], ptr %taddr218, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr219, align 8
  %291 = load [2 x i64], ptr %taddr219, align 8
  store %any %288, ptr %varargslots220, align 8
  %292 = insertvalue %"any[]" undef, ptr %varargslots220, 0
  %"$$temp221" = insertvalue %"any[]" %292, i64 1, 1
  store %"any[]" %"$$temp221", ptr %taddr222, align 8
  %293 = load [2 x i64], ptr %taddr222, align 8
  call void @std.core.builtin.panicf([2 x i64] %289, [2 x i64] %290, [2 x i64] %291, i32 55, [2 x i64] %293), !dbg !399
  unreachable, !dbg !399

panic225:                                         ; preds = %checkok223
  store i64 %97, ptr %taddr226, align 8
  %294 = insertvalue %any undef, ptr %taddr226, 0
  %295 = insertvalue %any %294, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %99, ptr %taddr227, align 8
  %296 = insertvalue %any undef, ptr %taddr227, 0
  %297 = insertvalue %any %296, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr228, align 8
  %298 = load [2 x i64], ptr %taddr228, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr229, align 8
  %299 = load [2 x i64], ptr %taddr229, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr230, align 8
  %300 = load [2 x i64], ptr %taddr230, align 8
  store %any %295, ptr %varargslots231, align 8
  %ptradd232 = getelementptr inbounds i8, ptr %varargslots231, i64 16
  store %any %297, ptr %ptradd232, align 8
  %301 = insertvalue %"any[]" undef, ptr %varargslots231, 0
  %"$$temp233" = insertvalue %"any[]" %301, i64 2, 1
  store %"any[]" %"$$temp233", ptr %taddr234, align 8
  %302 = load [2 x i64], ptr %taddr234, align 8
  call void @std.core.builtin.panicf([2 x i64] %298, [2 x i64] %299, [2 x i64] %300, i32 55, [2 x i64] %302), !dbg !399
  unreachable, !dbg !399

panic241:                                         ; preds = %checkok235
  store %"char[]" { ptr @.panic_msg.12, i64 10 }, ptr %taddr242, align 8
  %303 = load [2 x i64], ptr %taddr242, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr243, align 8
  %304 = load [2 x i64], ptr %taddr243, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr244, align 8
  %305 = load [2 x i64], ptr %taddr244, align 8
  %306 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %306([2 x i64] %303, [2 x i64] %304, [2 x i64] %305, i32 55), !dbg !401
  unreachable, !dbg !401

panic248:                                         ; preds = %checkok245
  store i64 %smod246, ptr %taddr249, align 8
  %307 = insertvalue %any undef, ptr %taddr249, 0
  %308 = insertvalue %any %307, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr250, align 8
  %309 = load [2 x i64], ptr %taddr250, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr251, align 8
  %310 = load [2 x i64], ptr %taddr251, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr252, align 8
  %311 = load [2 x i64], ptr %taddr252, align 8
  store %any %308, ptr %varargslots253, align 8
  %312 = insertvalue %"any[]" undef, ptr %varargslots253, 0
  %"$$temp254" = insertvalue %"any[]" %312, i64 1, 1
  store %"any[]" %"$$temp254", ptr %taddr255, align 8
  %313 = load [2 x i64], ptr %taddr255, align 8
  call void @std.core.builtin.panicf([2 x i64] %309, [2 x i64] %310, [2 x i64] %311, i32 55, [2 x i64] %313), !dbg !401
  unreachable, !dbg !401

panic258:                                         ; preds = %checkok256
  store i64 %103, ptr %taddr259, align 8
  %314 = insertvalue %any undef, ptr %taddr259, 0
  %315 = insertvalue %any %314, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod246, ptr %taddr260, align 8
  %316 = insertvalue %any undef, ptr %taddr260, 0
  %317 = insertvalue %any %316, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr261, align 8
  %318 = load [2 x i64], ptr %taddr261, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr262, align 8
  %319 = load [2 x i64], ptr %taddr262, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr263, align 8
  %320 = load [2 x i64], ptr %taddr263, align 8
  store %any %315, ptr %varargslots264, align 8
  %ptradd265 = getelementptr inbounds i8, ptr %varargslots264, i64 16
  store %any %317, ptr %ptradd265, align 8
  %321 = insertvalue %"any[]" undef, ptr %varargslots264, 0
  %"$$temp266" = insertvalue %"any[]" %321, i64 2, 1
  store %"any[]" %"$$temp266", ptr %taddr267, align 8
  %322 = load [2 x i64], ptr %taddr267, align 8
  call void @std.core.builtin.panicf([2 x i64] %318, [2 x i64] %319, [2 x i64] %320, i32 55, [2 x i64] %322), !dbg !401
  unreachable, !dbg !401

panic274:                                         ; preds = %checkok268
  store i64 %113, ptr %taddr275, align 8
  %323 = insertvalue %any undef, ptr %taddr275, 0
  %324 = insertvalue %any %323, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr276, align 8
  %325 = load [2 x i64], ptr %taddr276, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr277, align 8
  %326 = load [2 x i64], ptr %taddr277, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr278, align 8
  %327 = load [2 x i64], ptr %taddr278, align 8
  store %any %324, ptr %varargslots279, align 8
  %328 = insertvalue %"any[]" undef, ptr %varargslots279, 0
  %"$$temp280" = insertvalue %"any[]" %328, i64 1, 1
  store %"any[]" %"$$temp280", ptr %taddr281, align 8
  %329 = load [2 x i64], ptr %taddr281, align 8
  call void @std.core.builtin.panicf([2 x i64] %325, [2 x i64] %326, [2 x i64] %327, i32 56, [2 x i64] %329), !dbg !404
  unreachable, !dbg !404

panic284:                                         ; preds = %checkok282
  store i64 %111, ptr %taddr285, align 8
  %330 = insertvalue %any undef, ptr %taddr285, 0
  %331 = insertvalue %any %330, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %113, ptr %taddr286, align 8
  %332 = insertvalue %any undef, ptr %taddr286, 0
  %333 = insertvalue %any %332, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr287, align 8
  %334 = load [2 x i64], ptr %taddr287, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr288, align 8
  %335 = load [2 x i64], ptr %taddr288, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr289, align 8
  %336 = load [2 x i64], ptr %taddr289, align 8
  store %any %331, ptr %varargslots290, align 8
  %ptradd291 = getelementptr inbounds i8, ptr %varargslots290, i64 16
  store %any %333, ptr %ptradd291, align 8
  %337 = insertvalue %"any[]" undef, ptr %varargslots290, 0
  %"$$temp292" = insertvalue %"any[]" %337, i64 2, 1
  store %"any[]" %"$$temp292", ptr %taddr293, align 8
  %338 = load [2 x i64], ptr %taddr293, align 8
  call void @std.core.builtin.panicf([2 x i64] %334, [2 x i64] %335, [2 x i64] %336, i32 56, [2 x i64] %338), !dbg !404
  unreachable, !dbg !404

panic298:                                         ; preds = %checkok294
  store i64 %119, ptr %taddr299, align 8
  %339 = insertvalue %any undef, ptr %taddr299, 0
  %340 = insertvalue %any %339, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr300, align 8
  %341 = load [2 x i64], ptr %taddr300, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr301, align 8
  %342 = load [2 x i64], ptr %taddr301, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr302, align 8
  %343 = load [2 x i64], ptr %taddr302, align 8
  store %any %340, ptr %varargslots303, align 8
  %344 = insertvalue %"any[]" undef, ptr %varargslots303, 0
  %"$$temp304" = insertvalue %"any[]" %344, i64 1, 1
  store %"any[]" %"$$temp304", ptr %taddr305, align 8
  %345 = load [2 x i64], ptr %taddr305, align 8
  call void @std.core.builtin.panicf([2 x i64] %341, [2 x i64] %342, [2 x i64] %343, i32 56, [2 x i64] %345), !dbg !406
  unreachable, !dbg !406

panic308:                                         ; preds = %checkok306
  store i64 %117, ptr %taddr309, align 8
  %346 = insertvalue %any undef, ptr %taddr309, 0
  %347 = insertvalue %any %346, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %119, ptr %taddr310, align 8
  %348 = insertvalue %any undef, ptr %taddr310, 0
  %349 = insertvalue %any %348, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr311, align 8
  %350 = load [2 x i64], ptr %taddr311, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr312, align 8
  %351 = load [2 x i64], ptr %taddr312, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr313, align 8
  %352 = load [2 x i64], ptr %taddr313, align 8
  store %any %347, ptr %varargslots314, align 8
  %ptradd315 = getelementptr inbounds i8, ptr %varargslots314, i64 16
  store %any %349, ptr %ptradd315, align 8
  %353 = insertvalue %"any[]" undef, ptr %varargslots314, 0
  %"$$temp316" = insertvalue %"any[]" %353, i64 2, 1
  store %"any[]" %"$$temp316", ptr %taddr317, align 8
  %354 = load [2 x i64], ptr %taddr317, align 8
  call void @std.core.builtin.panicf([2 x i64] %350, [2 x i64] %351, [2 x i64] %352, i32 56, [2 x i64] %354), !dbg !406
  unreachable, !dbg !406

panic331:                                         ; preds = %loop.body327
  store %"char[]" { ptr @.panic_msg.12, i64 10 }, ptr %taddr332, align 8
  %355 = load [2 x i64], ptr %taddr332, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr333, align 8
  %356 = load [2 x i64], ptr %taddr333, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr334, align 8
  %357 = load [2 x i64], ptr %taddr334, align 8
  %358 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %358([2 x i64] %355, [2 x i64] %356, [2 x i64] %357, i32 62), !dbg !417
  unreachable, !dbg !417

panic339:                                         ; preds = %checkok335
  store i64 %130, ptr %taddr340, align 8
  %359 = insertvalue %any undef, ptr %taddr340, 0
  %360 = insertvalue %any %359, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %132, ptr %taddr341, align 8
  %361 = insertvalue %any undef, ptr %taddr341, 0
  %362 = insertvalue %any %361, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr342, align 8
  %363 = load [2 x i64], ptr %taddr342, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr343, align 8
  %364 = load [2 x i64], ptr %taddr343, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr344, align 8
  %365 = load [2 x i64], ptr %taddr344, align 8
  store %any %360, ptr %varargslots345, align 8
  %ptradd346 = getelementptr inbounds i8, ptr %varargslots345, i64 16
  store %any %362, ptr %ptradd346, align 8
  %366 = insertvalue %"any[]" undef, ptr %varargslots345, 0
  %"$$temp347" = insertvalue %"any[]" %366, i64 2, 1
  store %"any[]" %"$$temp347", ptr %taddr348, align 8
  %367 = load [2 x i64], ptr %taddr348, align 8
  call void @std.core.builtin.panicf([2 x i64] %363, [2 x i64] %364, [2 x i64] %365, i32 63, [2 x i64] %367), !dbg !420
  unreachable, !dbg !420

panic354:                                         ; preds = %checkok349
  store i64 %135, ptr %taddr355, align 8
  %368 = insertvalue %any undef, ptr %taddr355, 0
  %369 = insertvalue %any %368, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %137, ptr %taddr356, align 8
  %370 = insertvalue %any undef, ptr %taddr356, 0
  %371 = insertvalue %any %370, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr357, align 8
  %372 = load [2 x i64], ptr %taddr357, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr358, align 8
  %373 = load [2 x i64], ptr %taddr358, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr359, align 8
  %374 = load [2 x i64], ptr %taddr359, align 8
  store %any %369, ptr %varargslots360, align 8
  %ptradd361 = getelementptr inbounds i8, ptr %varargslots360, i64 16
  store %any %371, ptr %ptradd361, align 8
  %375 = insertvalue %"any[]" undef, ptr %varargslots360, 0
  %"$$temp362" = insertvalue %"any[]" %375, i64 2, 1
  store %"any[]" %"$$temp362", ptr %taddr363, align 8
  %376 = load [2 x i64], ptr %taddr363, align 8
  call void @std.core.builtin.panicf([2 x i64] %372, [2 x i64] %373, [2 x i64] %374, i32 64, [2 x i64] %376), !dbg !422
  unreachable, !dbg !422

panic368:                                         ; preds = %checkok364
  store i64 %140, ptr %taddr369, align 8
  %377 = insertvalue %any undef, ptr %taddr369, 0
  %378 = insertvalue %any %377, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %142, ptr %taddr370, align 8
  %379 = insertvalue %any undef, ptr %taddr370, 0
  %380 = insertvalue %any %379, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr371, align 8
  %381 = load [2 x i64], ptr %taddr371, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr372, align 8
  %382 = load [2 x i64], ptr %taddr372, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr373, align 8
  %383 = load [2 x i64], ptr %taddr373, align 8
  store %any %378, ptr %varargslots374, align 8
  %ptradd375 = getelementptr inbounds i8, ptr %varargslots374, i64 16
  store %any %380, ptr %ptradd375, align 8
  %384 = insertvalue %"any[]" undef, ptr %varargslots374, 0
  %"$$temp376" = insertvalue %"any[]" %384, i64 2, 1
  store %"any[]" %"$$temp376", ptr %taddr377, align 8
  %385 = load [2 x i64], ptr %taddr377, align 8
  call void @std.core.builtin.panicf([2 x i64] %381, [2 x i64] %382, [2 x i64] %383, i32 64, [2 x i64] %385), !dbg !424
  unreachable, !dbg !424

panic388:                                         ; preds = %loop.exit383
  store i64 %154, ptr %taddr389, align 8
  %386 = insertvalue %any undef, ptr %taddr389, 0
  %387 = insertvalue %any %386, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr390, align 8
  %388 = insertvalue %any undef, ptr %taddr390, 0
  %389 = insertvalue %any %388, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr391, align 8
  %390 = load [2 x i64], ptr %taddr391, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr392, align 8
  %391 = load [2 x i64], ptr %taddr392, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr393, align 8
  %392 = load [2 x i64], ptr %taddr393, align 8
  store %any %387, ptr %varargslots394, align 8
  %ptradd395 = getelementptr inbounds i8, ptr %varargslots394, i64 16
  store %any %389, ptr %ptradd395, align 8
  %393 = insertvalue %"any[]" undef, ptr %varargslots394, 0
  %"$$temp396" = insertvalue %"any[]" %393, i64 2, 1
  store %"any[]" %"$$temp396", ptr %taddr397, align 8
  %394 = load [2 x i64], ptr %taddr397, align 8
  call void @std.core.builtin.panicf([2 x i64] %390, [2 x i64] %391, [2 x i64] %392, i32 66, [2 x i64] %394), !dbg !428
  unreachable, !dbg !428

panic400:                                         ; preds = %checkok398
  store i64 %161, ptr %taddr401, align 8
  %395 = insertvalue %any undef, ptr %taddr401, 0
  %396 = insertvalue %any %395, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %160, ptr %taddr402, align 8
  %397 = insertvalue %any undef, ptr %taddr402, 0
  %398 = insertvalue %any %397, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr403, align 8
  %399 = load [2 x i64], ptr %taddr403, align 8
  store %"char[]" { ptr @.file.10, i64 14 }, ptr %taddr404, align 8
  %400 = load [2 x i64], ptr %taddr404, align 8
  store %"char[]" { ptr @.func.11, i64 6 }, ptr %taddr405, align 8
  %401 = load [2 x i64], ptr %taddr405, align 8
  store %any %396, ptr %varargslots406, align 8
  %ptradd407 = getelementptr inbounds i8, ptr %varargslots406, i64 16
  store %any %398, ptr %ptradd407, align 8
  %402 = insertvalue %"any[]" undef, ptr %varargslots406, 0
  %"$$temp408" = insertvalue %"any[]" %402, i64 2, 1
  store %"any[]" %"$$temp408", ptr %taddr409, align 8
  %403 = load [2 x i64], ptr %taddr409, align 8
  call void @std.core.builtin.panicf([2 x i64] %399, [2 x i64] %400, [2 x i64] %401, i32 66, [2 x i64] %403), !dbg !428
  unreachable, !dbg !428
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.entropy(ptr noalias sret([32 x i8]) align 1 %0) #0 !dbg !435 {
entry:
  %addr = alloca ptr, align 8
  %entropy_data = alloca [8 x i32], align 4
  %value = alloca %"char[]", align 8
  %expr = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %value4 = alloca ptr, align 8
  %expr5 = alloca ptr, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %value14 = alloca ptr, align 8
  %expr15 = alloca ptr, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %value24 = alloca ptr, align 8
  %expr25 = alloca ptr, align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %value35 = alloca i64, align 8
  %expr36 = alloca i64, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %value45 = alloca ptr, align 8
  %expr46 = alloca ptr, align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %value55 = alloca %any, align 8
  %expr56 = alloca %any, align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %expr64 = alloca [8 x i32], align 4
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  call void @llvm.dbg.declare(metadata ptr %addr, metadata !441, metadata !DIExpression()), !dbg !442
  %1 = call ptr @std.core.mem.malloc(i64 1) #5, !dbg !443
  store ptr %1, ptr %addr, align 8, !dbg !443
  %2 = load ptr, ptr %addr, align 8, !dbg !444
  call void @std.core.mem.free(ptr %2) #5, !dbg !445
  %3 = load i32, ptr @entropy.random_int, align 4, !dbg !446
  %add = add i32 %3, -302935722, !dbg !446
  store i32 %add, ptr @entropy.random_int, align 4, !dbg !446
  call void @llvm.dbg.declare(metadata ptr %entropy_data, metadata !447, metadata !DIExpression()), !dbg !451
  store %"char[]" { ptr @.str, i64 8 }, ptr %value, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %value, i32 16, i1 false)
  %checknull = icmp eq ptr %expr, null, !dbg !452
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !452
  br i1 %4, label %panic, label %checkok, !dbg !452

checkok:                                          ; preds = %entry
  %5 = insertvalue %"char[]" undef, ptr %expr, 0, !dbg !457
  %6 = insertvalue %"char[]" %5, i64 16, 1, !dbg !457
  store %"char[]" %6, ptr %taddr3, align 8
  %7 = load [2 x i64], ptr %taddr3, align 8
  %8 = call i32 @std.hash.fnv32a.encode([2 x i64] %7), !dbg !458
  store i32 %8, ptr %entropy_data, align 4, !dbg !458
  %ptradd = getelementptr inbounds i8, ptr %entropy_data, i64 4, !dbg !458
  %9 = load ptr, ptr %addr, align 8
  store ptr %9, ptr %value4, align 8
  %10 = load ptr, ptr %value4, align 8
  store ptr %10, ptr %expr5, align 8
  %checknull6 = icmp eq ptr %expr5, null, !dbg !459
  %11 = call i1 @llvm.expect.i1(i1 %checknull6, i1 false), !dbg !459
  br i1 %11, label %panic7, label %checkok11, !dbg !459

checkok11:                                        ; preds = %checkok
  %12 = insertvalue %"char[]" undef, ptr %expr5, 0, !dbg !464
  %13 = insertvalue %"char[]" %12, i64 8, 1, !dbg !464
  store %"char[]" %13, ptr %taddr12, align 8
  %14 = load [2 x i64], ptr %taddr12, align 8
  %15 = call i32 @std.hash.fnv32a.encode([2 x i64] %14), !dbg !465
  store i32 %15, ptr %ptradd, align 4, !dbg !465
  %ptradd13 = getelementptr inbounds i8, ptr %entropy_data, i64 8, !dbg !465
  store ptr %addr, ptr %value14, align 8
  %16 = load ptr, ptr %value14, align 8
  store ptr %16, ptr %expr15, align 8
  %checknull16 = icmp eq ptr %expr15, null, !dbg !466
  %17 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !466
  br i1 %17, label %panic17, label %checkok21, !dbg !466

checkok21:                                        ; preds = %checkok11
  %18 = insertvalue %"char[]" undef, ptr %expr15, 0, !dbg !471
  %19 = insertvalue %"char[]" %18, i64 8, 1, !dbg !471
  store %"char[]" %19, ptr %taddr22, align 8
  %20 = load [2 x i64], ptr %taddr22, align 8
  %21 = call i32 @std.hash.fnv32a.encode([2 x i64] %20), !dbg !472
  store i32 %21, ptr %ptradd13, align 4, !dbg !472
  %ptradd23 = getelementptr inbounds i8, ptr %entropy_data, i64 12, !dbg !472
  store ptr @std.math.random.entropy, ptr %value24, align 8
  %22 = load ptr, ptr %value24, align 8
  store ptr %22, ptr %expr25, align 8
  %checknull26 = icmp eq ptr %expr25, null, !dbg !473
  %23 = call i1 @llvm.expect.i1(i1 %checknull26, i1 false), !dbg !473
  br i1 %23, label %panic27, label %checkok31, !dbg !473

checkok31:                                        ; preds = %checkok21
  %24 = insertvalue %"char[]" undef, ptr %expr25, 0, !dbg !478
  %25 = insertvalue %"char[]" %24, i64 8, 1, !dbg !478
  store %"char[]" %25, ptr %taddr32, align 8
  %26 = load [2 x i64], ptr %taddr32, align 8
  %27 = call i32 @std.hash.fnv32a.encode([2 x i64] %26), !dbg !479
  store i32 %27, ptr %ptradd23, align 4, !dbg !479
  %ptradd33 = getelementptr inbounds i8, ptr %entropy_data, i64 16, !dbg !479
  %28 = load i32, ptr @entropy.random_int, align 4, !dbg !480
  store i32 %28, ptr %ptradd33, align 4, !dbg !480
  %ptradd34 = getelementptr inbounds i8, ptr %entropy_data, i64 20, !dbg !480
  %29 = call i64 @std.time.clock.now(), !dbg !481
  store i64 %29, ptr %value35, align 8
  %30 = load i64, ptr %value35, align 8
  store i64 %30, ptr %expr36, align 8
  %checknull37 = icmp eq ptr %expr36, null, !dbg !482
  %31 = call i1 @llvm.expect.i1(i1 %checknull37, i1 false), !dbg !482
  br i1 %31, label %panic38, label %checkok42, !dbg !482

checkok42:                                        ; preds = %checkok31
  %32 = insertvalue %"char[]" undef, ptr %expr36, 0, !dbg !487
  %33 = insertvalue %"char[]" %32, i64 8, 1, !dbg !487
  store %"char[]" %33, ptr %taddr43, align 8
  %34 = load [2 x i64], ptr %taddr43, align 8
  %35 = call i32 @std.hash.fnv32a.encode([2 x i64] %34), !dbg !488
  store i32 %35, ptr %ptradd34, align 4, !dbg !488
  %ptradd44 = getelementptr inbounds i8, ptr %entropy_data, i64 24, !dbg !488
  store ptr @std.core.dstring.DString.new_init, ptr %value45, align 8
  %36 = load ptr, ptr %value45, align 8
  store ptr %36, ptr %expr46, align 8
  %checknull47 = icmp eq ptr %expr46, null, !dbg !489
  %37 = call i1 @llvm.expect.i1(i1 %checknull47, i1 false), !dbg !489
  br i1 %37, label %panic48, label %checkok52, !dbg !489

checkok52:                                        ; preds = %checkok42
  %38 = insertvalue %"char[]" undef, ptr %expr46, 0, !dbg !494
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !494
  store %"char[]" %39, ptr %taddr53, align 8
  %40 = load [2 x i64], ptr %taddr53, align 8
  %41 = call i32 @std.hash.fnv32a.encode([2 x i64] %40), !dbg !495
  store i32 %41, ptr %ptradd44, align 4, !dbg !495
  %ptradd54 = getelementptr inbounds i8, ptr %entropy_data, i64 28, !dbg !495
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value55, ptr align 8 @std.core.mem.allocator.thread_allocator, i32 16, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr56, ptr align 8 %value55, i32 16, i1 false)
  %checknull57 = icmp eq ptr %expr56, null, !dbg !496
  %42 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !496
  br i1 %42, label %panic58, label %checkok62, !dbg !496

checkok62:                                        ; preds = %checkok52
  %43 = insertvalue %"char[]" undef, ptr %expr56, 0, !dbg !501
  %44 = insertvalue %"char[]" %43, i64 16, 1, !dbg !501
  store %"char[]" %44, ptr %taddr63, align 8
  %45 = load [2 x i64], ptr %taddr63, align 8
  %46 = call i32 @std.hash.fnv32a.encode([2 x i64] %45), !dbg !502
  store i32 %46, ptr %ptradd54, align 4, !dbg !502
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %expr64, ptr align 4 %entropy_data, i32 32, i1 false)
  %checknull65 = icmp eq ptr %expr64, null, !dbg !503
  %47 = call i1 @llvm.expect.i1(i1 %checknull65, i1 false), !dbg !503
  br i1 %47, label %panic66, label %checkok70, !dbg !503

checkok70:                                        ; preds = %checkok62
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %0, ptr align 1 %expr64, i32 32, i1 false), !dbg !506
  ret void, !dbg !506

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr, align 8
  %48 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr1, align 8
  %49 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr2, align 8
  %50 = load [2 x i64], ptr %taddr2, align 8
  %51 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %51([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 213), !dbg !457
  unreachable, !dbg !457

panic7:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr8, align 8
  %52 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr9, align 8
  %53 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr10, align 8
  %54 = load [2 x i64], ptr %taddr10, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 213), !dbg !464
  unreachable, !dbg !464

panic17:                                          ; preds = %checkok11
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr18, align 8
  %56 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr19, align 8
  %57 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr20, align 8
  %58 = load [2 x i64], ptr %taddr20, align 8
  %59 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %59([2 x i64] %56, [2 x i64] %57, [2 x i64] %58, i32 213), !dbg !471
  unreachable, !dbg !471

panic27:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr28, align 8
  %60 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr29, align 8
  %61 = load [2 x i64], ptr %taddr29, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr30, align 8
  %62 = load [2 x i64], ptr %taddr30, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 213), !dbg !478
  unreachable, !dbg !478

panic38:                                          ; preds = %checkok31
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr39, align 8
  %64 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr40, align 8
  %65 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr41, align 8
  %66 = load [2 x i64], ptr %taddr41, align 8
  %67 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %67([2 x i64] %64, [2 x i64] %65, [2 x i64] %66, i32 213), !dbg !487
  unreachable, !dbg !487

panic48:                                          ; preds = %checkok42
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr49, align 8
  %68 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr50, align 8
  %69 = load [2 x i64], ptr %taddr50, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr51, align 8
  %70 = load [2 x i64], ptr %taddr51, align 8
  %71 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %71([2 x i64] %68, [2 x i64] %69, [2 x i64] %70, i32 213), !dbg !494
  unreachable, !dbg !494

panic58:                                          ; preds = %checkok52
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr59, align 8
  %72 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr60, align 8
  %73 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr61, align 8
  %74 = load [2 x i64], ptr %taddr61, align 8
  %75 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %75([2 x i64] %72, [2 x i64] %73, [2 x i64] %74, i32 213), !dbg !501
  unreachable, !dbg !501

panic66:                                          ; preds = %checkok62
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr67, align 8
  %76 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr68, align 8
  %77 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.21, i64 7 }, ptr %taddr69, align 8
  %78 = load [2 x i64], ptr %taddr69, align 8
  %79 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %79([2 x i64] %76, [2 x i64] %77, [2 x i64] %78, i32 213), !dbg !506
  unreachable, !dbg !506
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg128Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !507 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !512
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !512
  br i1 %3, label %panic, label %checkok, !dbg !512

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !513, metadata !DIExpression()), !dbg !514
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !515, metadata !DIExpression()), !dbg !516
  %4 = load ptr, ptr %self, align 8, !dbg !517
  %checknull = icmp eq ptr %4, null, !dbg !517
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !517
  br i1 %5, label %panic3, label %checkok7, !dbg !517

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !518, metadata !DIExpression()), !dbg !520
  store i128 0, ptr %return_value, align 16, !dbg !520
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 16, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !522
  %11 = load i128, ptr %return_value, align 16, !dbg !523
  store i128 %11, ptr %4, align 16, !dbg !523
  ret void, !dbg !523

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 20), !dbg !514
  unreachable, !dbg !514

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 22), !dbg !517
  unreachable, !dbg !517
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Pcg128Random.next_long(ptr %0) #0 !dbg !524 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i128, align 16
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %self36 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !527
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !527
  br i1 %2, label %panic, label %checkok, !dbg !527

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !528, metadata !DIExpression()), !dbg !529
  call void @llvm.dbg.declare(metadata ptr %s, metadata !530, metadata !DIExpression()), !dbg !532
  %3 = load ptr, ptr %self, align 8, !dbg !533
  store ptr %3, ptr %s, align 8, !dbg !533
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !534, metadata !DIExpression()), !dbg !535
  %4 = load ptr, ptr %s, align 8, !dbg !536
  %checknull = icmp eq ptr %4, null, !dbg !536
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !536
  br i1 %5, label %panic3, label %checkok7, !dbg !536

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !536
  %7 = load ptr, ptr %s, align 8, !dbg !537
  %checknull8 = icmp eq ptr %7, null, !dbg !537
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !537
  br i1 %8, label %panic9, label %checkok13, !dbg !537

checkok13:                                        ; preds = %checkok7
  %9 = load i128, ptr %7, align 16, !dbg !537
  %lshr = lshr i128 %9, 35, !dbg !538
  %10 = freeze i128 %lshr, !dbg !538
  %xor14 = xor i128 %6, %10, !dbg !539
  store i128 %xor14, ptr %xor, align 16, !dbg !539
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !540, metadata !DIExpression()), !dbg !541
  %11 = load ptr, ptr %s, align 8, !dbg !542
  %checknull15 = icmp eq ptr %11, null, !dbg !542
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !542
  br i1 %12, label %panic16, label %checkok20, !dbg !542

checkok20:                                        ; preds = %checkok13
  %13 = load i128, ptr %11, align 16, !dbg !542
  %lshr21 = lshr i128 %13, 122, !dbg !543
  %14 = freeze i128 %lshr21, !dbg !543
  %trunc = trunc i128 %14 to i8, !dbg !543
  store i8 %trunc, ptr %rot, align 1, !dbg !543
  %15 = load ptr, ptr %s, align 8, !dbg !544
  %checknull22 = icmp eq ptr %15, null, !dbg !544
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !544
  br i1 %16, label %panic23, label %checkok27, !dbg !544

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !545
  %checknull28 = icmp eq ptr %17, null, !dbg !545
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !545
  br i1 %18, label %panic29, label %checkok33, !dbg !545

checkok33:                                        ; preds = %checkok27
  %19 = load i128, ptr %17, align 16, !dbg !545
  %mul = mul i128 %19, -48899967401452674293065485854872568811, !dbg !546
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !546
  store i128 %add, ptr %15, align 16, !dbg !546
  %20 = load i128, ptr %xor, align 16, !dbg !547
  %lshr34 = lshr i128 %20, 58, !dbg !548
  %21 = freeze i128 %lshr34, !dbg !548
  %trunc35 = trunc i128 %21 to i64, !dbg !548
  store i64 %trunc35, ptr %self36, align 8
  %22 = load i8, ptr %rot, align 1, !dbg !549
  %zext = zext i8 %22 to i64, !dbg !549
  store i64 %zext, ptr %shift, align 8
  %23 = load i64, ptr %self36, align 8, !dbg !550
  %24 = load i64, ptr %self36, align 8, !dbg !552
  %25 = load i64, ptr %shift, align 8, !dbg !553
  %26 = call i64 @llvm.fshr.i64(i64 %23, i64 %24, i64 %25), !dbg !553
  ret i64 %26, !dbg !553

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %27 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %28 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %29 = load [2 x i64], ptr %taddr2, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 26), !dbg !529
  unreachable, !dbg !529

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %31 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %32 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr6, align 8
  %33 = load [2 x i64], ptr %taddr6, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 30), !dbg !536
  unreachable, !dbg !536

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %35 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr11, align 8
  %36 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr12, align 8
  %37 = load [2 x i64], ptr %taddr12, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 30), !dbg !537
  unreachable, !dbg !537

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr17, align 8
  %39 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr18, align 8
  %40 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr19, align 8
  %41 = load [2 x i64], ptr %taddr19, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 31), !dbg !542
  unreachable, !dbg !542

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr24, align 8
  %43 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr25, align 8
  %44 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr26, align 8
  %45 = load [2 x i64], ptr %taddr26, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 32), !dbg !544
  unreachable, !dbg !544

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr30, align 8
  %47 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr31, align 8
  %48 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr32, align 8
  %49 = load [2 x i64], ptr %taddr32, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 32), !dbg !545
  unreachable, !dbg !545
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg128Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !554 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !555
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !555
  br i1 %3, label %panic, label %checkok, !dbg !555

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !556, metadata !DIExpression()), !dbg !557
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !558, metadata !DIExpression()), !dbg !559
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !560
  %4 = load i64, ptr %ptradd, align 8, !dbg !560
  %lt = icmp ult i64 0, %4, !dbg !560
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !560

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 37), !dbg !560
  unreachable, !dbg !560

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !562, metadata !DIExpression()), !dbg !564
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !565
  %9 = load i64, ptr %ptradd7, align 8, !dbg !565
  store i64 %9, ptr %len, align 8, !dbg !565
  br label %loop.cond, !dbg !566

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !567
  %lt8 = icmp ult i64 0, %10, !dbg !567
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !567

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !569, metadata !DIExpression()), !dbg !571
  %11 = load ptr, ptr %self, align 8, !dbg !572
  %12 = call i64 @std.math.random.Pcg128Random.next_long(ptr %11), !dbg !573
  store i64 %12, ptr %value, align 8, !dbg !573
  %13 = load i64, ptr %len, align 8, !dbg !574
  %le = icmp ule i64 %13, 8, !dbg !574
  br i1 %le, label %if.then, label %if.exit, !dbg !574

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !575
  %add = add i64 0, %15, !dbg !575
  %size = sub i64 %add, 0, !dbg !575
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !575
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !575
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !577
  %19 = extractvalue %"char[]" %18, 0, !dbg !577
  %20 = extractvalue %"char[]" %18, 1, !dbg !578
  %gt = icmp ugt i64 0, %20, !dbg !578
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !578
  br i1 %21, label %panic10, label %checkok18, !dbg !578

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !577
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !577
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !577
  %24 = extractvalue %"char[]" %23, 0, !dbg !577
  %25 = extractvalue %"char[]" %17, 0, !dbg !577
  %26 = extractvalue %"char[]" %17, 1, !dbg !577
  %27 = extractvalue %"char[]" %23, 1, !dbg !577
  %neq = icmp ne i64 %27, %26, !dbg !577
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !577
  br i1 %28, label %panic20, label %checkok30, !dbg !577

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !577
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !577
  br label %expr_block.exit, !dbg !579

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 8, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !580
  %34 = extractvalue %"char[]" %33, 0, !dbg !580
  %35 = extractvalue %"char[]" %33, 1, !dbg !580
  %gt32 = icmp sgt i64 0, %35, !dbg !580
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !580
  br i1 %36, label %panic33, label %checkok43, !dbg !580

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 8, !dbg !580
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !580
  br i1 %37, label %panic45, label %checkok55, !dbg !580

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !580
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !580
  %40 = extractvalue %"char[]" %39, 0, !dbg !580
  %41 = extractvalue %"char[]" %32, 0, !dbg !580
  %42 = extractvalue %"char[]" %32, 1, !dbg !580
  %43 = extractvalue %"char[]" %39, 1, !dbg !580
  %neq56 = icmp ne i64 %43, %42, !dbg !580
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !580
  br i1 %44, label %panic57, label %checkok67, !dbg !580

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !580
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !580
  %46 = load i64, ptr %len, align 8, !dbg !581
  %sub = sub i64 %46, 8, !dbg !581
  store i64 %sub, ptr %len, align 8, !dbg !581
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !582
  %48 = extractvalue %"char[]" %47, 0, !dbg !582
  %49 = extractvalue %"char[]" %47, 1, !dbg !583
  %gt68 = icmp ugt i64 8, %49, !dbg !583
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !583
  br i1 %50, label %panic69, label %checkok79, !dbg !583

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 8, !dbg !582
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !582
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !582
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !582
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !582
  br label %loop.cond, !dbg !582

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.40, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !584
  store %"char[]" { ptr @.str.41, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.42, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 39, [2 x i64] %56), !dbg !587
  unreachable, !dbg !588

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !588

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 39), !dbg !557
  unreachable, !dbg !557

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !577
  unreachable, !dbg !577

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !577
  unreachable, !dbg !577

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !580
  unreachable, !dbg !580

panic45:                                          ; preds = %checkok43
  store i64 7, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !580
  unreachable, !dbg !580

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !580
  unreachable, !dbg !580

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !582
  unreachable, !dbg !582
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Pcg128Random.next_int128(ptr %0) #0 !dbg !589 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !592
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !592
  br i1 %2, label %panic, label %checkok, !dbg !592

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !593, metadata !DIExpression()), !dbg !594
  %3 = load ptr, ptr %self, align 8, !dbg !595
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !597
  %zext = zext i64 %4 to i128, !dbg !597
  %shl = shl i128 %zext, 64, !dbg !597
  %5 = freeze i128 %shl, !dbg !597
  %6 = load ptr, ptr %self, align 8, !dbg !595
  %7 = call i64 @std.math.random.Pcg128Random.next_long(ptr %6), !dbg !598
  %zext3 = zext i64 %7 to i128, !dbg !598
  %add = add i128 %5, %zext3, !dbg !597
  ret i128 %add, !dbg !597

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 40), !dbg !594
  unreachable, !dbg !594
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Pcg128Random.next_int(ptr %0) #0 !dbg !599 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !602
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !602
  br i1 %2, label %panic, label %checkok, !dbg !602

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !603, metadata !DIExpression()), !dbg !604
  %3 = load ptr, ptr %self, align 8, !dbg !605
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !606
  %trunc = trunc i64 %4 to i32, !dbg !606
  ret i32 %trunc, !dbg !606

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 41), !dbg !604
  unreachable, !dbg !604
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Pcg128Random.next_short(ptr %0) #0 !dbg !607 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !610
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !610
  br i1 %2, label %panic, label %checkok, !dbg !610

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !611, metadata !DIExpression()), !dbg !612
  %3 = load ptr, ptr %self, align 8, !dbg !613
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !614
  %trunc = trunc i64 %4 to i16, !dbg !614
  ret i16 %trunc, !dbg !614

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 42), !dbg !612
  unreachable, !dbg !612
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Pcg128Random.next_byte(ptr %0) #0 !dbg !615 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !618
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !618
  br i1 %2, label %panic, label %checkok, !dbg !618

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !619, metadata !DIExpression()), !dbg !620
  %3 = load ptr, ptr %self, align 8, !dbg !621
  %4 = call i64 @std.math.random.Pcg128Random.next_long(ptr %3), !dbg !622
  %trunc = trunc i64 %4 to i8, !dbg !622
  ret i8 %trunc, !dbg !622

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 43), !dbg !620
  unreachable, !dbg !620
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg64Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !623 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !628
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !628
  br i1 %3, label %panic, label %checkok, !dbg !628

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !629, metadata !DIExpression()), !dbg !630
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !631, metadata !DIExpression()), !dbg !632
  %4 = load ptr, ptr %self, align 8, !dbg !633
  %checknull = icmp eq ptr %4, null, !dbg !633
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !633
  br i1 %5, label %panic3, label %checkok7, !dbg !633

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !634, metadata !DIExpression()), !dbg !636
  store i64 0, ptr %return_value, align 8, !dbg !636
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 8, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !638
  %11 = load i64, ptr %return_value, align 8, !dbg !639
  store i64 %11, ptr %4, align 8, !dbg !639
  ret void, !dbg !639

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 49), !dbg !630
  unreachable, !dbg !630

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 51), !dbg !633
  unreachable, !dbg !633
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Pcg64Random.next_int(ptr %0) #0 !dbg !640 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %self36 = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !643
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !643
  br i1 %2, label %panic, label %checkok, !dbg !643

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !644, metadata !DIExpression()), !dbg !645
  call void @llvm.dbg.declare(metadata ptr %s, metadata !646, metadata !DIExpression()), !dbg !647
  %3 = load ptr, ptr %self, align 8, !dbg !648
  store ptr %3, ptr %s, align 8, !dbg !648
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !649, metadata !DIExpression()), !dbg !650
  %4 = load ptr, ptr %s, align 8, !dbg !651
  %checknull = icmp eq ptr %4, null, !dbg !651
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !651
  br i1 %5, label %panic3, label %checkok7, !dbg !651

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !651
  %7 = load ptr, ptr %s, align 8, !dbg !652
  %checknull8 = icmp eq ptr %7, null, !dbg !652
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !652
  br i1 %8, label %panic9, label %checkok13, !dbg !652

checkok13:                                        ; preds = %checkok7
  %9 = load i64, ptr %7, align 8, !dbg !652
  %lshr = lshr i64 %9, 18, !dbg !653
  %10 = freeze i64 %lshr, !dbg !653
  %xor14 = xor i64 %6, %10, !dbg !654
  store i64 %xor14, ptr %xor, align 8, !dbg !654
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !655, metadata !DIExpression()), !dbg !656
  %11 = load ptr, ptr %s, align 8, !dbg !657
  %checknull15 = icmp eq ptr %11, null, !dbg !657
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !657
  br i1 %12, label %panic16, label %checkok20, !dbg !657

checkok20:                                        ; preds = %checkok13
  %13 = load i64, ptr %11, align 8, !dbg !657
  %lshr21 = lshr i64 %13, 59, !dbg !658
  %14 = freeze i64 %lshr21, !dbg !658
  %trunc = trunc i64 %14 to i8, !dbg !658
  store i8 %trunc, ptr %rot, align 1, !dbg !658
  %15 = load ptr, ptr %s, align 8, !dbg !659
  %checknull22 = icmp eq ptr %15, null, !dbg !659
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !659
  br i1 %16, label %panic23, label %checkok27, !dbg !659

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !660
  %checknull28 = icmp eq ptr %17, null, !dbg !660
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !660
  br i1 %18, label %panic29, label %checkok33, !dbg !660

checkok33:                                        ; preds = %checkok27
  %19 = load i64, ptr %17, align 8, !dbg !660
  %mul = mul i64 %19, -3372029247567499371, !dbg !661
  %add = add i64 %mul, -7046029254386353131, !dbg !661
  store i64 %add, ptr %15, align 8, !dbg !661
  %20 = load i64, ptr %xor, align 8, !dbg !662
  %lshr34 = lshr i64 %20, 27, !dbg !663
  %21 = freeze i64 %lshr34, !dbg !663
  %trunc35 = trunc i64 %21 to i32, !dbg !663
  store i32 %trunc35, ptr %self36, align 4
  %22 = load i8, ptr %rot, align 1, !dbg !664
  %zext = zext i8 %22 to i32, !dbg !664
  store i32 %zext, ptr %shift, align 4
  %23 = load i32, ptr %self36, align 4, !dbg !665
  %24 = load i32, ptr %self36, align 4, !dbg !667
  %25 = load i32, ptr %shift, align 4, !dbg !668
  %26 = call i32 @llvm.fshr.i32(i32 %23, i32 %24, i32 %25), !dbg !668
  ret i32 %26, !dbg !668

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %27 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %28 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %29 = load [2 x i64], ptr %taddr2, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 54), !dbg !645
  unreachable, !dbg !645

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %31 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %32 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr6, align 8
  %33 = load [2 x i64], ptr %taddr6, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 58), !dbg !651
  unreachable, !dbg !651

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %35 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr11, align 8
  %36 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr12, align 8
  %37 = load [2 x i64], ptr %taddr12, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 58), !dbg !652
  unreachable, !dbg !652

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr17, align 8
  %39 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr18, align 8
  %40 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr19, align 8
  %41 = load [2 x i64], ptr %taddr19, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 59), !dbg !657
  unreachable, !dbg !657

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr24, align 8
  %43 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr25, align 8
  %44 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr26, align 8
  %45 = load [2 x i64], ptr %taddr26, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 60), !dbg !659
  unreachable, !dbg !659

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr30, align 8
  %47 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr31, align 8
  %48 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr32, align 8
  %49 = load [2 x i64], ptr %taddr32, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 60), !dbg !660
  unreachable, !dbg !660
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg64Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !669 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !670
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !670
  br i1 %3, label %panic, label %checkok, !dbg !670

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !671, metadata !DIExpression()), !dbg !672
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !673, metadata !DIExpression()), !dbg !674
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !675
  %4 = load i64, ptr %ptradd, align 8, !dbg !675
  %lt = icmp ult i64 0, %4, !dbg !675
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !675

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 65), !dbg !675
  unreachable, !dbg !675

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !677, metadata !DIExpression()), !dbg !679
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !680
  %9 = load i64, ptr %ptradd7, align 8, !dbg !680
  store i64 %9, ptr %len, align 8, !dbg !680
  br label %loop.cond, !dbg !681

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !682
  %lt8 = icmp ult i64 0, %10, !dbg !682
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !682

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !684, metadata !DIExpression()), !dbg !686
  %11 = load ptr, ptr %self, align 8, !dbg !687
  %12 = call i32 @std.math.random.Pcg64Random.next_int(ptr %11), !dbg !688
  store i32 %12, ptr %value, align 4, !dbg !688
  %13 = load i64, ptr %len, align 8, !dbg !689
  %le = icmp ule i64 %13, 4, !dbg !689
  br i1 %le, label %if.then, label %if.exit, !dbg !689

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !690
  %add = add i64 0, %15, !dbg !690
  %size = sub i64 %add, 0, !dbg !690
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !690
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !690
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !692
  %19 = extractvalue %"char[]" %18, 0, !dbg !692
  %20 = extractvalue %"char[]" %18, 1, !dbg !693
  %gt = icmp ugt i64 0, %20, !dbg !693
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !693
  br i1 %21, label %panic10, label %checkok18, !dbg !693

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !692
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !692
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !692
  %24 = extractvalue %"char[]" %23, 0, !dbg !692
  %25 = extractvalue %"char[]" %17, 0, !dbg !692
  %26 = extractvalue %"char[]" %17, 1, !dbg !692
  %27 = extractvalue %"char[]" %23, 1, !dbg !692
  %neq = icmp ne i64 %27, %26, !dbg !692
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !692
  br i1 %28, label %panic20, label %checkok30, !dbg !692

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !692
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !692
  br label %expr_block.exit, !dbg !694

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !695
  %34 = extractvalue %"char[]" %33, 0, !dbg !695
  %35 = extractvalue %"char[]" %33, 1, !dbg !695
  %gt32 = icmp sgt i64 0, %35, !dbg !695
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !695
  br i1 %36, label %panic33, label %checkok43, !dbg !695

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !695
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !695
  br i1 %37, label %panic45, label %checkok55, !dbg !695

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !695
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !695
  %40 = extractvalue %"char[]" %39, 0, !dbg !695
  %41 = extractvalue %"char[]" %32, 0, !dbg !695
  %42 = extractvalue %"char[]" %32, 1, !dbg !695
  %43 = extractvalue %"char[]" %39, 1, !dbg !695
  %neq56 = icmp ne i64 %43, %42, !dbg !695
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !695
  br i1 %44, label %panic57, label %checkok67, !dbg !695

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !695
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !695
  %46 = load i64, ptr %len, align 8, !dbg !696
  %sub = sub i64 %46, 4, !dbg !696
  store i64 %sub, ptr %len, align 8, !dbg !696
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !697
  %48 = extractvalue %"char[]" %47, 0, !dbg !697
  %49 = extractvalue %"char[]" %47, 1, !dbg !698
  %gt68 = icmp ugt i64 4, %49, !dbg !698
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !698
  br i1 %50, label %panic69, label %checkok79, !dbg !698

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !697
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !697
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !697
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !697
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !697
  br label %loop.cond, !dbg !697

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.47, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !699
  store %"char[]" { ptr @.str.48, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.49, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 67, [2 x i64] %56), !dbg !702
  unreachable, !dbg !703

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !703

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 67), !dbg !672
  unreachable, !dbg !672

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !692
  unreachable, !dbg !692

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !692
  unreachable, !dbg !692

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !695
  unreachable, !dbg !695

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !695
  unreachable, !dbg !695

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !695
  unreachable, !dbg !695

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !697
  unreachable, !dbg !697
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Pcg64Random.next_int128(ptr %0) #0 !dbg !704 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !707
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !707
  br i1 %2, label %panic, label %checkok, !dbg !707

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !708, metadata !DIExpression()), !dbg !709
  %3 = load ptr, ptr %self, align 8, !dbg !710
  %4 = call i64 @std.math.random.Pcg64Random.next_long(ptr %3), !dbg !712
  %zext = zext i64 %4 to i128, !dbg !712
  %shl = shl i128 %zext, 64, !dbg !712
  %5 = freeze i128 %shl, !dbg !712
  %6 = load ptr, ptr %self, align 8, !dbg !710
  %7 = call i64 @std.math.random.Pcg64Random.next_long(ptr %6), !dbg !713
  %zext3 = zext i64 %7 to i128, !dbg !713
  %add = add i128 %5, %zext3, !dbg !712
  ret i128 %add, !dbg !712

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 68), !dbg !709
  unreachable, !dbg !709
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Pcg64Random.next_long(ptr %0) #0 !dbg !714 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !717
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !717
  br i1 %2, label %panic, label %checkok, !dbg !717

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !718, metadata !DIExpression()), !dbg !719
  %3 = load ptr, ptr %self, align 8, !dbg !720
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !722
  %zext = zext i32 %4 to i64, !dbg !722
  %shl = shl i64 %zext, 32, !dbg !722
  %5 = freeze i64 %shl, !dbg !722
  %6 = load ptr, ptr %self, align 8, !dbg !720
  %7 = call i32 @std.math.random.Pcg64Random.next_int(ptr %6), !dbg !723
  %zext3 = zext i32 %7 to i64, !dbg !723
  %add = add i64 %5, %zext3, !dbg !722
  ret i64 %add, !dbg !722

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 69), !dbg !719
  unreachable, !dbg !719
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Pcg64Random.next_short(ptr %0) #0 !dbg !724 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !727
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !727
  br i1 %2, label %panic, label %checkok, !dbg !727

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !728, metadata !DIExpression()), !dbg !729
  %3 = load ptr, ptr %self, align 8, !dbg !730
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !731
  %trunc = trunc i32 %4 to i16, !dbg !731
  ret i16 %trunc, !dbg !731

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 70), !dbg !729
  unreachable, !dbg !729
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Pcg64Random.next_byte(ptr %0) #0 !dbg !732 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !735
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !735
  br i1 %2, label %panic, label %checkok, !dbg !735

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !736, metadata !DIExpression()), !dbg !737
  %3 = load ptr, ptr %self, align 8, !dbg !738
  %4 = call i32 @std.math.random.Pcg64Random.next_int(ptr %3), !dbg !739
  %trunc = trunc i32 %4 to i8, !dbg !739
  ret i8 %trunc, !dbg !739

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 71), !dbg !737
  unreachable, !dbg !737
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg32Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !740 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !745
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !745
  br i1 %3, label %panic, label %checkok, !dbg !745

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !746, metadata !DIExpression()), !dbg !747
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !748, metadata !DIExpression()), !dbg !749
  %4 = load ptr, ptr %self, align 8, !dbg !750
  %checknull = icmp eq ptr %4, null, !dbg !750
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !750
  br i1 %5, label %panic3, label %checkok7, !dbg !750

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !751, metadata !DIExpression()), !dbg !753
  store i32 0, ptr %return_value, align 4, !dbg !753
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 4, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !755
  %11 = load i32, ptr %return_value, align 4, !dbg !756
  store i32 %11, ptr %4, align 4, !dbg !756
  ret void, !dbg !756

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 78), !dbg !747
  unreachable, !dbg !747

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 80), !dbg !750
  unreachable, !dbg !750
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Pcg32Random.next_short(ptr %0) #0 !dbg !757 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i32, align 4
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %self36 = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !760
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !760
  br i1 %2, label %panic, label %checkok, !dbg !760

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !761, metadata !DIExpression()), !dbg !762
  call void @llvm.dbg.declare(metadata ptr %s, metadata !763, metadata !DIExpression()), !dbg !765
  %3 = load ptr, ptr %self, align 8, !dbg !766
  store ptr %3, ptr %s, align 8, !dbg !766
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !767, metadata !DIExpression()), !dbg !768
  %4 = load ptr, ptr %s, align 8, !dbg !769
  %checknull = icmp eq ptr %4, null, !dbg !769
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !769
  br i1 %5, label %panic3, label %checkok7, !dbg !769

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !769
  %7 = load ptr, ptr %s, align 8, !dbg !770
  %checknull8 = icmp eq ptr %7, null, !dbg !770
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !770
  br i1 %8, label %panic9, label %checkok13, !dbg !770

checkok13:                                        ; preds = %checkok7
  %9 = load i32, ptr %7, align 4, !dbg !770
  %lshr = lshr i32 %9, 10, !dbg !771
  %10 = freeze i32 %lshr, !dbg !771
  %xor14 = xor i32 %6, %10, !dbg !772
  store i32 %xor14, ptr %xor, align 4, !dbg !772
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !773, metadata !DIExpression()), !dbg !774
  %11 = load ptr, ptr %s, align 8, !dbg !775
  %checknull15 = icmp eq ptr %11, null, !dbg !775
  %12 = call i1 @llvm.expect.i1(i1 %checknull15, i1 false), !dbg !775
  br i1 %12, label %panic16, label %checkok20, !dbg !775

checkok20:                                        ; preds = %checkok13
  %13 = load i32, ptr %11, align 4, !dbg !775
  %lshr21 = lshr i32 %13, 28, !dbg !776
  %14 = freeze i32 %lshr21, !dbg !776
  %trunc = trunc i32 %14 to i8, !dbg !776
  store i8 %trunc, ptr %rot, align 1, !dbg !776
  %15 = load ptr, ptr %s, align 8, !dbg !777
  %checknull22 = icmp eq ptr %15, null, !dbg !777
  %16 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !777
  br i1 %16, label %panic23, label %checkok27, !dbg !777

checkok27:                                        ; preds = %checkok20
  %17 = load ptr, ptr %s, align 8, !dbg !778
  %checknull28 = icmp eq ptr %17, null, !dbg !778
  %18 = call i1 @llvm.expect.i1(i1 %checknull28, i1 false), !dbg !778
  br i1 %18, label %panic29, label %checkok33, !dbg !778

checkok33:                                        ; preds = %checkok27
  %19 = load i32, ptr %17, align 4, !dbg !778
  %mul = mul i32 %19, -1856014347, !dbg !779
  %add = add i32 %mul, -1640531527, !dbg !779
  store i32 %add, ptr %15, align 4, !dbg !779
  %20 = load i32, ptr %xor, align 4, !dbg !780
  %lshr34 = lshr i32 %20, 12, !dbg !781
  %21 = freeze i32 %lshr34, !dbg !781
  %trunc35 = trunc i32 %21 to i16, !dbg !781
  store i16 %trunc35, ptr %self36, align 2
  %22 = load i8, ptr %rot, align 1, !dbg !782
  %zext = zext i8 %22 to i16, !dbg !782
  store i16 %zext, ptr %shift, align 2
  %23 = load i16, ptr %self36, align 2, !dbg !783
  %24 = load i16, ptr %self36, align 2, !dbg !785
  %25 = load i16, ptr %shift, align 2, !dbg !786
  %26 = call i16 @llvm.fshr.i16(i16 %23, i16 %24, i16 %25), !dbg !786
  ret i16 %26, !dbg !786

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %27 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %28 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %29 = load [2 x i64], ptr %taddr2, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 83), !dbg !762
  unreachable, !dbg !762

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %31 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %32 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr6, align 8
  %33 = load [2 x i64], ptr %taddr6, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 87), !dbg !769
  unreachable, !dbg !769

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %35 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr11, align 8
  %36 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr12, align 8
  %37 = load [2 x i64], ptr %taddr12, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 87), !dbg !770
  unreachable, !dbg !770

panic16:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr17, align 8
  %39 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr18, align 8
  %40 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr19, align 8
  %41 = load [2 x i64], ptr %taddr19, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 88), !dbg !775
  unreachable, !dbg !775

panic23:                                          ; preds = %checkok20
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr24, align 8
  %43 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr25, align 8
  %44 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr26, align 8
  %45 = load [2 x i64], ptr %taddr26, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 89), !dbg !777
  unreachable, !dbg !777

panic29:                                          ; preds = %checkok27
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr30, align 8
  %47 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr31, align 8
  %48 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr32, align 8
  %49 = load [2 x i64], ptr %taddr32, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 89), !dbg !778
  unreachable, !dbg !778
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg32Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !787 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !788
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !788
  br i1 %3, label %panic, label %checkok, !dbg !788

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !789, metadata !DIExpression()), !dbg !790
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !791, metadata !DIExpression()), !dbg !792
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !793
  %4 = load i64, ptr %ptradd, align 8, !dbg !793
  %lt = icmp ult i64 0, %4, !dbg !793
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !793

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 94), !dbg !793
  unreachable, !dbg !793

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !795, metadata !DIExpression()), !dbg !797
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !798
  %9 = load i64, ptr %ptradd7, align 8, !dbg !798
  store i64 %9, ptr %len, align 8, !dbg !798
  br label %loop.cond, !dbg !799

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !800
  %lt8 = icmp ult i64 0, %10, !dbg !800
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !800

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !802, metadata !DIExpression()), !dbg !804
  %11 = load ptr, ptr %self, align 8, !dbg !805
  %12 = call i16 @std.math.random.Pcg32Random.next_short(ptr %11), !dbg !806
  store i16 %12, ptr %value, align 2, !dbg !806
  %13 = load i64, ptr %len, align 8, !dbg !807
  %le = icmp ule i64 %13, 2, !dbg !807
  br i1 %le, label %if.then, label %if.exit, !dbg !807

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !808
  %add = add i64 0, %15, !dbg !808
  %size = sub i64 %add, 0, !dbg !808
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !808
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !808
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !810
  %19 = extractvalue %"char[]" %18, 0, !dbg !810
  %20 = extractvalue %"char[]" %18, 1, !dbg !811
  %gt = icmp ugt i64 0, %20, !dbg !811
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !811
  br i1 %21, label %panic10, label %checkok18, !dbg !811

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !810
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !810
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !810
  %24 = extractvalue %"char[]" %23, 0, !dbg !810
  %25 = extractvalue %"char[]" %17, 0, !dbg !810
  %26 = extractvalue %"char[]" %17, 1, !dbg !810
  %27 = extractvalue %"char[]" %23, 1, !dbg !810
  %neq = icmp ne i64 %27, %26, !dbg !810
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !810
  br i1 %28, label %panic20, label %checkok30, !dbg !810

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !810
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !810
  br label %expr_block.exit, !dbg !812

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 2, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !813
  %34 = extractvalue %"char[]" %33, 0, !dbg !813
  %35 = extractvalue %"char[]" %33, 1, !dbg !813
  %gt32 = icmp sgt i64 0, %35, !dbg !813
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !813
  br i1 %36, label %panic33, label %checkok43, !dbg !813

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 2, !dbg !813
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !813
  br i1 %37, label %panic45, label %checkok55, !dbg !813

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !813
  %39 = insertvalue %"char[]" %38, i64 2, 1, !dbg !813
  %40 = extractvalue %"char[]" %39, 0, !dbg !813
  %41 = extractvalue %"char[]" %32, 0, !dbg !813
  %42 = extractvalue %"char[]" %32, 1, !dbg !813
  %43 = extractvalue %"char[]" %39, 1, !dbg !813
  %neq56 = icmp ne i64 %43, %42, !dbg !813
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !813
  br i1 %44, label %panic57, label %checkok67, !dbg !813

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !813
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !813
  %46 = load i64, ptr %len, align 8, !dbg !814
  %sub = sub i64 %46, 2, !dbg !814
  store i64 %sub, ptr %len, align 8, !dbg !814
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !815
  %48 = extractvalue %"char[]" %47, 0, !dbg !815
  %49 = extractvalue %"char[]" %47, 1, !dbg !816
  %gt68 = icmp ugt i64 2, %49, !dbg !816
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !816
  br i1 %50, label %panic69, label %checkok79, !dbg !816

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 2, !dbg !815
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 2, !dbg !815
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !815
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !815
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !815
  br label %loop.cond, !dbg !815

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.50, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !817
  store %"char[]" { ptr @.str.51, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.52, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 96, [2 x i64] %56), !dbg !820
  unreachable, !dbg !821

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !821

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 96), !dbg !790
  unreachable, !dbg !790

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !810
  unreachable, !dbg !810

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !810
  unreachable, !dbg !810

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !813
  unreachable, !dbg !813

panic45:                                          ; preds = %checkok43
  store i64 1, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !813
  unreachable, !dbg !813

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !813
  unreachable, !dbg !813

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !815
  unreachable, !dbg !815
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Pcg32Random.next_int128(ptr %0) #0 !dbg !822 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !825
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !825
  br i1 %2, label %panic, label %checkok, !dbg !825

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !826, metadata !DIExpression()), !dbg !827
  %3 = load ptr, ptr %self, align 8, !dbg !828
  %4 = call i64 @std.math.random.Pcg32Random.next_long(ptr %3), !dbg !830
  %zext = zext i64 %4 to i128, !dbg !830
  %shl = shl i128 %zext, 64, !dbg !830
  %5 = freeze i128 %shl, !dbg !830
  %6 = load ptr, ptr %self, align 8, !dbg !828
  %7 = call i64 @std.math.random.Pcg32Random.next_long(ptr %6), !dbg !831
  %zext3 = zext i64 %7 to i128, !dbg !831
  %add = add i128 %5, %zext3, !dbg !830
  ret i128 %add, !dbg !830

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 97), !dbg !827
  unreachable, !dbg !827
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Pcg32Random.next_long(ptr %0) #0 !dbg !832 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !835
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !835
  br i1 %2, label %panic, label %checkok, !dbg !835

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !836, metadata !DIExpression()), !dbg !837
  %3 = load ptr, ptr %self, align 8, !dbg !838
  %4 = call i32 @std.math.random.Pcg32Random.next_int(ptr %3), !dbg !840
  %zext = zext i32 %4 to i64, !dbg !840
  %shl = shl i64 %zext, 32, !dbg !840
  %5 = freeze i64 %shl, !dbg !840
  %6 = load ptr, ptr %self, align 8, !dbg !838
  %7 = call i32 @std.math.random.Pcg32Random.next_int(ptr %6), !dbg !841
  %zext3 = zext i32 %7 to i64, !dbg !841
  %add = add i64 %5, %zext3, !dbg !840
  ret i64 %add, !dbg !840

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 98), !dbg !837
  unreachable, !dbg !837
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Pcg32Random.next_int(ptr %0) #0 !dbg !842 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !845
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !845
  br i1 %2, label %panic, label %checkok, !dbg !845

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !846, metadata !DIExpression()), !dbg !847
  %3 = load ptr, ptr %self, align 8, !dbg !848
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !850
  %zext = zext i16 %4 to i32, !dbg !850
  %shl = shl i32 %zext, 16, !dbg !850
  %5 = freeze i32 %shl, !dbg !850
  %6 = load ptr, ptr %self, align 8, !dbg !848
  %7 = call i16 @std.math.random.Pcg32Random.next_short(ptr %6), !dbg !851
  %zext3 = zext i16 %7 to i32, !dbg !851
  %add = add i32 %5, %zext3, !dbg !850
  ret i32 %add, !dbg !850

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 99), !dbg !847
  unreachable, !dbg !847
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Pcg32Random.next_byte(ptr %0) #0 !dbg !852 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !855
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !855
  br i1 %2, label %panic, label %checkok, !dbg !855

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !856, metadata !DIExpression()), !dbg !857
  %3 = load ptr, ptr %self, align 8, !dbg !858
  %4 = call i16 @std.math.random.Pcg32Random.next_short(ptr %3), !dbg !859
  %trunc = trunc i16 %4 to i8, !dbg !859
  ret i8 %trunc, !dbg !859

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 100), !dbg !857
  unreachable, !dbg !857
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg16Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !860 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !865
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !865
  br i1 %3, label %panic, label %checkok, !dbg !865

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !866, metadata !DIExpression()), !dbg !867
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !868, metadata !DIExpression()), !dbg !869
  %4 = load ptr, ptr %self, align 8, !dbg !870
  %checknull = icmp eq ptr %4, null, !dbg !870
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !870
  br i1 %5, label %panic3, label %checkok7, !dbg !870

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !871, metadata !DIExpression()), !dbg !873
  store i16 0, ptr %return_value, align 2, !dbg !873
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 2, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !875
  %11 = load i16, ptr %return_value, align 2, !dbg !876
  store i16 %11, ptr %4, align 2, !dbg !876
  ret void, !dbg !876

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 106), !dbg !867
  unreachable, !dbg !867

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 108), !dbg !870
  unreachable, !dbg !870
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Pcg16Random.next_byte(ptr %0) #0 !dbg !877 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %xor = alloca i16, align 2
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %rot = alloca i8, align 1
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %self42 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !880
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !880
  br i1 %2, label %panic, label %checkok, !dbg !880

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !881, metadata !DIExpression()), !dbg !882
  call void @llvm.dbg.declare(metadata ptr %s, metadata !883, metadata !DIExpression()), !dbg !885
  %3 = load ptr, ptr %self, align 8, !dbg !886
  store ptr %3, ptr %s, align 8, !dbg !886
  call void @llvm.dbg.declare(metadata ptr %xor, metadata !887, metadata !DIExpression()), !dbg !888
  %4 = load ptr, ptr %s, align 8, !dbg !889
  %checknull = icmp eq ptr %4, null, !dbg !889
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !889
  br i1 %5, label %panic3, label %checkok7, !dbg !889

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !889
  %zext = zext i16 %6 to i32, !dbg !889
  %7 = load ptr, ptr %s, align 8, !dbg !890
  %checknull8 = icmp eq ptr %7, null, !dbg !890
  %8 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !890
  br i1 %8, label %panic9, label %checkok13, !dbg !890

checkok13:                                        ; preds = %checkok7
  %9 = load i16, ptr %7, align 2, !dbg !890
  %zext14 = zext i16 %9 to i32, !dbg !890
  %lshr = lshr i32 %zext14, 5, !dbg !891
  %10 = freeze i32 %lshr, !dbg !891
  %xor15 = xor i32 %zext, %10, !dbg !892
  %trunc = trunc i32 %xor15 to i16, !dbg !892
  store i16 %trunc, ptr %xor, align 2, !dbg !892
  call void @llvm.dbg.declare(metadata ptr %rot, metadata !893, metadata !DIExpression()), !dbg !894
  %11 = load ptr, ptr %s, align 8, !dbg !895
  %checknull16 = icmp eq ptr %11, null, !dbg !895
  %12 = call i1 @llvm.expect.i1(i1 %checknull16, i1 false), !dbg !895
  br i1 %12, label %panic17, label %checkok21, !dbg !895

checkok21:                                        ; preds = %checkok13
  %13 = load i16, ptr %11, align 2, !dbg !895
  %zext22 = zext i16 %13 to i32, !dbg !895
  %lshr23 = lshr i32 %zext22, 13, !dbg !896
  %14 = freeze i32 %lshr23, !dbg !896
  %trunc24 = trunc i32 %14 to i8, !dbg !896
  store i8 %trunc24, ptr %rot, align 1, !dbg !896
  %15 = load ptr, ptr %s, align 8, !dbg !897
  %checknull25 = icmp eq ptr %15, null, !dbg !897
  %16 = call i1 @llvm.expect.i1(i1 %checknull25, i1 false), !dbg !897
  br i1 %16, label %panic26, label %checkok30, !dbg !897

checkok30:                                        ; preds = %checkok21
  %17 = load ptr, ptr %s, align 8, !dbg !898
  %checknull31 = icmp eq ptr %17, null, !dbg !898
  %18 = call i1 @llvm.expect.i1(i1 %checknull31, i1 false), !dbg !898
  br i1 %18, label %panic32, label %checkok36, !dbg !898

checkok36:                                        ; preds = %checkok30
  %19 = load i16, ptr %17, align 2, !dbg !898
  %zext37 = zext i16 %19 to i32, !dbg !898
  %mul = mul i32 %zext37, 37213, !dbg !899
  %add = add i32 %mul, 40503, !dbg !899
  %trunc38 = trunc i32 %add to i16, !dbg !899
  store i16 %trunc38, ptr %15, align 2, !dbg !899
  %20 = load i16, ptr %xor, align 2, !dbg !900
  %zext39 = zext i16 %20 to i32, !dbg !900
  %lshr40 = lshr i32 %zext39, 5, !dbg !901
  %21 = freeze i32 %lshr40, !dbg !901
  %trunc41 = trunc i32 %21 to i8, !dbg !901
  store i8 %trunc41, ptr %self42, align 1
  %22 = load i8, ptr %rot, align 1
  store i8 %22, ptr %shift, align 1
  %23 = load i8, ptr %self42, align 1, !dbg !902
  %24 = load i8, ptr %self42, align 1, !dbg !904
  %25 = load i8, ptr %shift, align 1, !dbg !905
  %26 = call i8 @llvm.fshr.i8(i8 %23, i8 %24, i8 %25), !dbg !905
  ret i8 %26, !dbg !905

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %27 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %28 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %29 = load [2 x i64], ptr %taddr2, align 8
  %30 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %30([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 111), !dbg !882
  unreachable, !dbg !882

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %31 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr5, align 8
  %32 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr6, align 8
  %33 = load [2 x i64], ptr %taddr6, align 8
  %34 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %34([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 115), !dbg !889
  unreachable, !dbg !889

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %35 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr11, align 8
  %36 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr12, align 8
  %37 = load [2 x i64], ptr %taddr12, align 8
  %38 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %38([2 x i64] %35, [2 x i64] %36, [2 x i64] %37, i32 115), !dbg !890
  unreachable, !dbg !890

panic17:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr18, align 8
  %39 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr19, align 8
  %40 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr20, align 8
  %41 = load [2 x i64], ptr %taddr20, align 8
  %42 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %42([2 x i64] %39, [2 x i64] %40, [2 x i64] %41, i32 116), !dbg !895
  unreachable, !dbg !895

panic26:                                          ; preds = %checkok21
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr27, align 8
  %43 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr28, align 8
  %44 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr29, align 8
  %45 = load [2 x i64], ptr %taddr29, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 117), !dbg !897
  unreachable, !dbg !897

panic32:                                          ; preds = %checkok30
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr33, align 8
  %47 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr34, align 8
  %48 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr35, align 8
  %49 = load [2 x i64], ptr %taddr35, align 8
  %50 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %50([2 x i64] %47, [2 x i64] %48, [2 x i64] %49, i32 117), !dbg !898
  unreachable, !dbg !898
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Pcg16Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !906 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !907
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !907
  br i1 %3, label %panic, label %checkok, !dbg !907

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !908, metadata !DIExpression()), !dbg !909
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !910, metadata !DIExpression()), !dbg !911
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !912, metadata !DIExpression()), !dbg !914
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !915
  %4 = load i64, ptr %ptradd, align 8, !dbg !915
  store i64 %4, ptr %len, align 8, !dbg !915
  br label %loop.cond, !dbg !916

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !917
  %lt = icmp ult i64 0, %5, !dbg !917
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !917

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !919, metadata !DIExpression()), !dbg !921
  %6 = load ptr, ptr %self, align 8, !dbg !922
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !923
  store i8 %7, ptr %value, align 1, !dbg !923
  %8 = load i64, ptr %len, align 8, !dbg !924
  %le = icmp ule i64 %8, 1, !dbg !924
  br i1 %le, label %if.then, label %if.exit, !dbg !924

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !925
  %add = add i64 0, %10, !dbg !925
  %size = sub i64 %add, 0, !dbg !925
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !925
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !925
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !927
  %14 = extractvalue %"char[]" %13, 0, !dbg !927
  %15 = extractvalue %"char[]" %13, 1, !dbg !928
  %gt = icmp ugt i64 0, %15, !dbg !928
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !928
  br i1 %16, label %panic5, label %checkok13, !dbg !928

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !927
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !927
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !927
  %19 = extractvalue %"char[]" %18, 0, !dbg !927
  %20 = extractvalue %"char[]" %12, 0, !dbg !927
  %21 = extractvalue %"char[]" %12, 1, !dbg !927
  %22 = extractvalue %"char[]" %18, 1, !dbg !927
  %neq = icmp ne i64 %22, %21, !dbg !927
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !927
  br i1 %23, label %panic15, label %checkok25, !dbg !927

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !927
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !927
  br label %expr_block.exit, !dbg !929

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !930
  %29 = extractvalue %"char[]" %28, 0, !dbg !930
  %30 = extractvalue %"char[]" %28, 1, !dbg !930
  %gt27 = icmp sgt i64 0, %30, !dbg !930
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !930
  br i1 %31, label %panic28, label %checkok38, !dbg !930

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 1, !dbg !930
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !930
  br i1 %32, label %panic40, label %checkok50, !dbg !930

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !930
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !930
  %35 = extractvalue %"char[]" %34, 0, !dbg !930
  %36 = extractvalue %"char[]" %27, 0, !dbg !930
  %37 = extractvalue %"char[]" %27, 1, !dbg !930
  %38 = extractvalue %"char[]" %34, 1, !dbg !930
  %neq51 = icmp ne i64 %38, %37, !dbg !930
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !930
  br i1 %39, label %panic52, label %checkok62, !dbg !930

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !930
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !930
  %41 = load i64, ptr %len, align 8, !dbg !931
  %sub = sub i64 %41, 1, !dbg !931
  store i64 %sub, ptr %len, align 8, !dbg !931
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !932
  %43 = extractvalue %"char[]" %42, 0, !dbg !932
  %44 = extractvalue %"char[]" %42, 1, !dbg !933
  %gt63 = icmp ugt i64 1, %44, !dbg !933
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !933
  br i1 %45, label %panic64, label %checkok74, !dbg !933

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 1, !dbg !932
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !932
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !932
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !932
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !932
  br label %loop.cond, !dbg !932

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.53, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !934
  store %"char[]" { ptr @.str.54, i64 11 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.55, i64 22 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 121, [2 x i64] %51), !dbg !937
  unreachable, !dbg !938

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !938

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 121), !dbg !909
  unreachable, !dbg !909

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !927
  unreachable, !dbg !927

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !927
  unreachable, !dbg !927

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !930
  unreachable, !dbg !930

panic40:                                          ; preds = %checkok38
  store i64 0, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !930
  unreachable, !dbg !930

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !930
  unreachable, !dbg !930

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !932
  unreachable, !dbg !932
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Pcg16Random.next_int128(ptr %0) #0 !dbg !939 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !942
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !942
  br i1 %2, label %panic, label %checkok, !dbg !942

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !943, metadata !DIExpression()), !dbg !944
  %3 = load ptr, ptr %self, align 8, !dbg !945
  %4 = call i64 @std.math.random.Pcg16Random.next_long(ptr %3), !dbg !947
  %zext = zext i64 %4 to i128, !dbg !947
  %shl = shl i128 %zext, 64, !dbg !947
  %5 = freeze i128 %shl, !dbg !947
  %6 = load ptr, ptr %self, align 8, !dbg !945
  %7 = call i64 @std.math.random.Pcg16Random.next_long(ptr %6), !dbg !948
  %zext3 = zext i64 %7 to i128, !dbg !948
  %add = add i128 %5, %zext3, !dbg !947
  ret i128 %add, !dbg !947

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 122), !dbg !944
  unreachable, !dbg !944
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Pcg16Random.next_long(ptr %0) #0 !dbg !949 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !952
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !952
  br i1 %2, label %panic, label %checkok, !dbg !952

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !953, metadata !DIExpression()), !dbg !954
  %3 = load ptr, ptr %self, align 8, !dbg !955
  %4 = call i32 @std.math.random.Pcg16Random.next_int(ptr %3), !dbg !957
  %zext = zext i32 %4 to i64, !dbg !957
  %shl = shl i64 %zext, 32, !dbg !957
  %5 = freeze i64 %shl, !dbg !957
  %6 = load ptr, ptr %self, align 8, !dbg !955
  %7 = call i32 @std.math.random.Pcg16Random.next_int(ptr %6), !dbg !958
  %zext3 = zext i32 %7 to i64, !dbg !958
  %add = add i64 %5, %zext3, !dbg !957
  ret i64 %add, !dbg !957

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 123), !dbg !954
  unreachable, !dbg !954
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Pcg16Random.next_int(ptr %0) #0 !dbg !959 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !962
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !962
  br i1 %2, label %panic, label %checkok, !dbg !962

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !963, metadata !DIExpression()), !dbg !964
  %3 = load ptr, ptr %self, align 8, !dbg !965
  %4 = call i16 @std.math.random.Pcg16Random.next_short(ptr %3), !dbg !967
  %zext = zext i16 %4 to i32, !dbg !967
  %shl = shl i32 %zext, 16, !dbg !967
  %5 = freeze i32 %shl, !dbg !967
  %6 = load ptr, ptr %self, align 8, !dbg !965
  %7 = call i16 @std.math.random.Pcg16Random.next_short(ptr %6), !dbg !968
  %zext3 = zext i16 %7 to i32, !dbg !968
  %add = add i32 %5, %zext3, !dbg !967
  ret i32 %add, !dbg !967

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 124), !dbg !964
  unreachable, !dbg !964
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Pcg16Random.next_short(ptr %0) #0 !dbg !969 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !972
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !972
  br i1 %2, label %panic, label %checkok, !dbg !972

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !973, metadata !DIExpression()), !dbg !974
  %3 = load ptr, ptr %self, align 8, !dbg !975
  %4 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %3), !dbg !977
  %zext = zext i8 %4 to i16, !dbg !977
  %zext3 = zext i16 %zext to i32, !dbg !977
  %shl = shl i32 %zext3, 8, !dbg !977
  %5 = freeze i32 %shl, !dbg !977
  %6 = load ptr, ptr %self, align 8, !dbg !975
  %7 = call i8 @std.math.random.Pcg16Random.next_byte(ptr %6), !dbg !978
  %zext4 = zext i8 %7 to i32, !dbg !978
  %add = add i32 %5, %zext4, !dbg !977
  %trunc = trunc i32 %add to i16, !dbg !977
  ret i16 %trunc, !dbg !977

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.32, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 125), !dbg !974
  unreachable, !dbg !974
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc128Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !979 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !985
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !985
  br i1 %3, label %panic, label %checkok, !dbg !985

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !986, metadata !DIExpression()), !dbg !987
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !988, metadata !DIExpression()), !dbg !989
  %4 = load ptr, ptr %self, align 8, !dbg !990
  %checknull = icmp eq ptr %4, null, !dbg !990
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !990
  br i1 %5, label %panic3, label %checkok7, !dbg !990

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !991, metadata !DIExpression()), !dbg !993
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !993
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 64, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !995
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %return_value, i32 64, i1 false), !dbg !996
  ret void, !dbg !996

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 15), !dbg !987
  unreachable, !dbg !987

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 17), !dbg !990
  unreachable, !dbg !990
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Sfc128Random.next_int128(ptr %0) #0 !dbg !997 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i128, align 16
  %self13 = alloca i128, align 16
  %shift = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1000
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1000
  br i1 %2, label %panic, label %checkok, !dbg !1000

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1001, metadata !DIExpression()), !dbg !1002
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1003, metadata !DIExpression()), !dbg !1004
  %3 = load ptr, ptr %self, align 8, !dbg !1005
  store ptr %3, ptr %s, align 8, !dbg !1005
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1006, metadata !DIExpression()), !dbg !1007
  %4 = load ptr, ptr %s, align 8, !dbg !1008
  %5 = load i128, ptr %4, align 16, !dbg !1009
  %6 = load ptr, ptr %s, align 8, !dbg !1010
  %ptradd = getelementptr inbounds i8, ptr %6, i64 16, !dbg !1011
  %7 = load i128, ptr %ptradd, align 16, !dbg !1011
  %add = add i128 %5, %7, !dbg !1008
  %8 = load ptr, ptr %s, align 8, !dbg !1012
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 48, !dbg !1013
  %9 = load i128, ptr %ptradd3, align 16, !dbg !1013
  %add4 = add i128 %add, %9, !dbg !1008
  store i128 %add4, ptr %result, align 16, !dbg !1008
  %10 = load ptr, ptr %s, align 8, !dbg !1014
  %11 = load ptr, ptr %s, align 8, !dbg !1015
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 16, !dbg !1016
  %12 = load i128, ptr %ptradd5, align 16, !dbg !1016
  %13 = load ptr, ptr %s, align 8, !dbg !1017
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 16, !dbg !1018
  %14 = load i128, ptr %ptradd6, align 16, !dbg !1018
  %lshr = lshr i128 %14, 11, !dbg !1017
  %15 = freeze i128 %lshr, !dbg !1017
  %xor = xor i128 %12, %15, !dbg !1015
  store i128 %xor, ptr %10, align 16, !dbg !1015
  %16 = load ptr, ptr %s, align 8, !dbg !1019
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 16, !dbg !1020
  %17 = load ptr, ptr %s, align 8, !dbg !1021
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 32, !dbg !1022
  %18 = load i128, ptr %ptradd8, align 16, !dbg !1022
  %19 = load ptr, ptr %s, align 8, !dbg !1023
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1024
  %20 = load i128, ptr %ptradd9, align 16, !dbg !1024
  %shl = shl i128 %20, 3, !dbg !1023
  %21 = freeze i128 %shl, !dbg !1023
  %add10 = add i128 %18, %21, !dbg !1021
  store i128 %add10, ptr %ptradd7, align 16, !dbg !1021
  %22 = load ptr, ptr %s, align 8, !dbg !1025
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 32, !dbg !1026
  %23 = load ptr, ptr %s, align 8, !dbg !1027
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 32, !dbg !1028
  %24 = load i128, ptr %ptradd12, align 16
  store i128 %24, ptr %self13, align 16
  store i128 40, ptr %shift, align 16
  %25 = load i128, ptr %self13, align 16, !dbg !1029
  %26 = load i128, ptr %self13, align 16, !dbg !1031
  %27 = load i128, ptr %shift, align 16, !dbg !1032
  %28 = call i128 @llvm.fshr.i128(i128 %25, i128 %26, i128 %27), !dbg !1032
  %29 = load i128, ptr %result, align 16, !dbg !1033
  %add14 = add i128 %28, %29, !dbg !1027
  store i128 %add14, ptr %ptradd11, align 16, !dbg !1027
  %30 = load ptr, ptr %s, align 8, !dbg !1034
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 48, !dbg !1035
  %31 = load i128, ptr %ptradd15, align 16, !dbg !1035
  %add16 = add i128 %31, -129976298391535590297638237547755878347, !dbg !1034
  store i128 %add16, ptr %ptradd15, align 16, !dbg !1034
  %32 = load i128, ptr %result, align 16, !dbg !1036
  ret i128 %32, !dbg !1036

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %33 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %34 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %35 = load [2 x i64], ptr %taddr2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 20), !dbg !1002
  unreachable, !dbg !1002
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc128Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1037 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1038
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1038
  br i1 %3, label %panic, label %checkok, !dbg !1038

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1039, metadata !DIExpression()), !dbg !1040
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1041, metadata !DIExpression()), !dbg !1042
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1043
  %4 = load i64, ptr %ptradd, align 8, !dbg !1043
  %lt = icmp ult i64 0, %4, !dbg !1043
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1043

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 32), !dbg !1043
  unreachable, !dbg !1043

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1045, metadata !DIExpression()), !dbg !1047
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1048
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1048
  store i64 %9, ptr %len, align 8, !dbg !1048
  br label %loop.cond, !dbg !1049

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1050
  %lt8 = icmp ult i64 0, %10, !dbg !1050
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1050

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1052, metadata !DIExpression()), !dbg !1054
  %11 = load ptr, ptr %self, align 8, !dbg !1055
  %12 = call i128 @std.math.random.Sfc128Random.next_int128(ptr %11), !dbg !1056
  store i128 %12, ptr %value, align 16, !dbg !1056
  %13 = load i64, ptr %len, align 8, !dbg !1057
  %le = icmp ule i64 %13, 16, !dbg !1057
  br i1 %le, label %if.then, label %if.exit, !dbg !1057

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1058
  %add = add i64 0, %15, !dbg !1058
  %size = sub i64 %add, 0, !dbg !1058
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1058
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1058
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1060
  %19 = extractvalue %"char[]" %18, 0, !dbg !1060
  %20 = extractvalue %"char[]" %18, 1, !dbg !1061
  %gt = icmp ugt i64 0, %20, !dbg !1061
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1061
  br i1 %21, label %panic10, label %checkok18, !dbg !1061

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1060
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1060
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1060
  %24 = extractvalue %"char[]" %23, 0, !dbg !1060
  %25 = extractvalue %"char[]" %17, 0, !dbg !1060
  %26 = extractvalue %"char[]" %17, 1, !dbg !1060
  %27 = extractvalue %"char[]" %23, 1, !dbg !1060
  %neq = icmp ne i64 %27, %26, !dbg !1060
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1060
  br i1 %28, label %panic20, label %checkok30, !dbg !1060

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1060
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1060
  br label %expr_block.exit, !dbg !1062

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 16, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1063
  %34 = extractvalue %"char[]" %33, 0, !dbg !1063
  %35 = extractvalue %"char[]" %33, 1, !dbg !1063
  %gt32 = icmp sgt i64 0, %35, !dbg !1063
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1063
  br i1 %36, label %panic33, label %checkok43, !dbg !1063

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 16, !dbg !1063
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1063
  br i1 %37, label %panic45, label %checkok55, !dbg !1063

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1063
  %39 = insertvalue %"char[]" %38, i64 16, 1, !dbg !1063
  %40 = extractvalue %"char[]" %39, 0, !dbg !1063
  %41 = extractvalue %"char[]" %32, 0, !dbg !1063
  %42 = extractvalue %"char[]" %32, 1, !dbg !1063
  %43 = extractvalue %"char[]" %39, 1, !dbg !1063
  %neq56 = icmp ne i64 %43, %42, !dbg !1063
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1063
  br i1 %44, label %panic57, label %checkok67, !dbg !1063

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1063
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1063
  %46 = load i64, ptr %len, align 8, !dbg !1064
  %sub = sub i64 %46, 16, !dbg !1064
  store i64 %sub, ptr %len, align 8, !dbg !1064
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1065
  %48 = extractvalue %"char[]" %47, 0, !dbg !1065
  %49 = extractvalue %"char[]" %47, 1, !dbg !1066
  %gt68 = icmp ugt i64 16, %49, !dbg !1066
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1066
  br i1 %50, label %panic69, label %checkok79, !dbg !1066

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 16, !dbg !1065
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1065
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1065
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1065
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1065
  br label %loop.cond, !dbg !1065

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.65, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1067
  store %"char[]" { ptr @.str.66, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.67, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 34, [2 x i64] %56), !dbg !1070
  unreachable, !dbg !1071

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1071

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 34), !dbg !1040
  unreachable, !dbg !1040

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1060
  unreachable, !dbg !1060

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1060
  unreachable, !dbg !1060

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1063
  unreachable, !dbg !1063

panic45:                                          ; preds = %checkok43
  store i64 15, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1063
  unreachable, !dbg !1063

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1063
  unreachable, !dbg !1063

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1065
  unreachable, !dbg !1065
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Sfc128Random.next_long(ptr %0) #0 !dbg !1072 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1075
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1075
  br i1 %2, label %panic, label %checkok, !dbg !1075

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1076, metadata !DIExpression()), !dbg !1077
  %3 = load ptr, ptr %self, align 8, !dbg !1078
  %4 = call i128 @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1079
  %trunc = trunc i128 %4 to i32, !dbg !1079
  %zext = zext i32 %trunc to i64, !dbg !1079
  ret i64 %zext, !dbg !1079

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 35), !dbg !1077
  unreachable, !dbg !1077
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Sfc128Random.next_int(ptr %0) #0 !dbg !1080 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1083
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1083
  br i1 %2, label %panic, label %checkok, !dbg !1083

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1084, metadata !DIExpression()), !dbg !1085
  %3 = load ptr, ptr %self, align 8, !dbg !1086
  %4 = call i128 @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1087
  %trunc = trunc i128 %4 to i32, !dbg !1087
  ret i32 %trunc, !dbg !1087

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 36), !dbg !1085
  unreachable, !dbg !1085
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Sfc128Random.next_short(ptr %0) #0 !dbg !1088 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1091
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1091
  br i1 %2, label %panic, label %checkok, !dbg !1091

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1092, metadata !DIExpression()), !dbg !1093
  %3 = load ptr, ptr %self, align 8, !dbg !1094
  %4 = call i128 @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1095
  %trunc = trunc i128 %4 to i16, !dbg !1095
  ret i16 %trunc, !dbg !1095

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 37), !dbg !1093
  unreachable, !dbg !1093
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Sfc128Random.next_byte(ptr %0) #0 !dbg !1096 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1099
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1099
  br i1 %2, label %panic, label %checkok, !dbg !1099

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1100, metadata !DIExpression()), !dbg !1101
  %3 = load ptr, ptr %self, align 8, !dbg !1102
  %4 = call i128 @std.math.random.Sfc128Random.next_int128(ptr %3), !dbg !1103
  %trunc = trunc i128 %4 to i8, !dbg !1103
  ret i8 %trunc, !dbg !1103

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 38), !dbg !1101
  unreachable, !dbg !1101
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc64Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1104 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 8
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1108
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1108
  br i1 %3, label %panic, label %checkok, !dbg !1108

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1109, metadata !DIExpression()), !dbg !1110
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1111, metadata !DIExpression()), !dbg !1112
  %4 = load ptr, ptr %self, align 8, !dbg !1113
  %checknull = icmp eq ptr %4, null, !dbg !1113
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1113
  br i1 %5, label %panic3, label %checkok7, !dbg !1113

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1114, metadata !DIExpression()), !dbg !1116
  call void @llvm.memset.p0.i64(ptr align 8 %return_value, i8 0, i64 32, i1 false), !dbg !1116
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 32, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1118
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %return_value, i32 32, i1 false), !dbg !1119
  ret void, !dbg !1119

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 45), !dbg !1110
  unreachable, !dbg !1110

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 47), !dbg !1113
  unreachable, !dbg !1113
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Sfc64Random.next_long(ptr %0) #0 !dbg !1120 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %self13 = alloca i64, align 8
  %shift = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1123
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1123
  br i1 %2, label %panic, label %checkok, !dbg !1123

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1124, metadata !DIExpression()), !dbg !1125
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1126, metadata !DIExpression()), !dbg !1127
  %3 = load ptr, ptr %self, align 8, !dbg !1128
  store ptr %3, ptr %s, align 8, !dbg !1128
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1129, metadata !DIExpression()), !dbg !1130
  %4 = load ptr, ptr %s, align 8, !dbg !1131
  %5 = load i64, ptr %4, align 8, !dbg !1132
  %6 = load ptr, ptr %s, align 8, !dbg !1133
  %ptradd = getelementptr inbounds i8, ptr %6, i64 8, !dbg !1134
  %7 = load i64, ptr %ptradd, align 8, !dbg !1134
  %add = add i64 %5, %7, !dbg !1131
  %8 = load ptr, ptr %s, align 8, !dbg !1135
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 24, !dbg !1136
  %9 = load i64, ptr %ptradd3, align 8, !dbg !1136
  %add4 = add i64 %add, %9, !dbg !1131
  store i64 %add4, ptr %result, align 8, !dbg !1131
  %10 = load ptr, ptr %s, align 8, !dbg !1137
  %11 = load ptr, ptr %s, align 8, !dbg !1138
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 8, !dbg !1139
  %12 = load i64, ptr %ptradd5, align 8, !dbg !1139
  %13 = load ptr, ptr %s, align 8, !dbg !1140
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 8, !dbg !1141
  %14 = load i64, ptr %ptradd6, align 8, !dbg !1141
  %lshr = lshr i64 %14, 11, !dbg !1140
  %15 = freeze i64 %lshr, !dbg !1140
  %xor = xor i64 %12, %15, !dbg !1138
  store i64 %xor, ptr %10, align 8, !dbg !1138
  %16 = load ptr, ptr %s, align 8, !dbg !1142
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 8, !dbg !1143
  %17 = load ptr, ptr %s, align 8, !dbg !1144
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 16, !dbg !1145
  %18 = load i64, ptr %ptradd8, align 8, !dbg !1145
  %19 = load ptr, ptr %s, align 8, !dbg !1146
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1147
  %20 = load i64, ptr %ptradd9, align 8, !dbg !1147
  %shl = shl i64 %20, 3, !dbg !1146
  %21 = freeze i64 %shl, !dbg !1146
  %add10 = add i64 %18, %21, !dbg !1144
  store i64 %add10, ptr %ptradd7, align 8, !dbg !1144
  %22 = load ptr, ptr %s, align 8, !dbg !1148
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1149
  %23 = load ptr, ptr %s, align 8, !dbg !1150
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 16, !dbg !1151
  %24 = load i64, ptr %ptradd12, align 8
  store i64 %24, ptr %self13, align 8
  store i64 40, ptr %shift, align 8
  %25 = load i64, ptr %self13, align 8, !dbg !1152
  %26 = load i64, ptr %self13, align 8, !dbg !1154
  %27 = load i64, ptr %shift, align 8, !dbg !1155
  %28 = call i64 @llvm.fshr.i64(i64 %25, i64 %26, i64 %27), !dbg !1155
  %29 = load i64, ptr %result, align 8, !dbg !1156
  %add14 = add i64 %28, %29, !dbg !1150
  store i64 %add14, ptr %ptradd11, align 8, !dbg !1150
  %30 = load ptr, ptr %s, align 8, !dbg !1157
  %ptradd15 = getelementptr inbounds i8, ptr %30, i64 24, !dbg !1158
  %31 = load i64, ptr %ptradd15, align 8, !dbg !1158
  %add16 = add i64 %31, -7046029254386353131, !dbg !1157
  store i64 %add16, ptr %ptradd15, align 8, !dbg !1157
  %32 = load i64, ptr %result, align 8, !dbg !1159
  ret i64 %32, !dbg !1159

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %33 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %34 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %35 = load [2 x i64], ptr %taddr2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 50), !dbg !1125
  unreachable, !dbg !1125
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc64Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1160 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1161
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1161
  br i1 %3, label %panic, label %checkok, !dbg !1161

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1162, metadata !DIExpression()), !dbg !1163
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1164, metadata !DIExpression()), !dbg !1165
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1166
  %4 = load i64, ptr %ptradd, align 8, !dbg !1166
  %lt = icmp ult i64 0, %4, !dbg !1166
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1166

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 62), !dbg !1166
  unreachable, !dbg !1166

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1168, metadata !DIExpression()), !dbg !1170
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1171
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1171
  store i64 %9, ptr %len, align 8, !dbg !1171
  br label %loop.cond, !dbg !1172

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1173
  %lt8 = icmp ult i64 0, %10, !dbg !1173
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1173

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1175, metadata !DIExpression()), !dbg !1177
  %11 = load ptr, ptr %self, align 8, !dbg !1178
  %12 = call i64 @std.math.random.Sfc64Random.next_long(ptr %11), !dbg !1179
  store i64 %12, ptr %value, align 8, !dbg !1179
  %13 = load i64, ptr %len, align 8, !dbg !1180
  %le = icmp ule i64 %13, 8, !dbg !1180
  br i1 %le, label %if.then, label %if.exit, !dbg !1180

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1181
  %add = add i64 0, %15, !dbg !1181
  %size = sub i64 %add, 0, !dbg !1181
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1181
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1181
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1183
  %19 = extractvalue %"char[]" %18, 0, !dbg !1183
  %20 = extractvalue %"char[]" %18, 1, !dbg !1184
  %gt = icmp ugt i64 0, %20, !dbg !1184
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1184
  br i1 %21, label %panic10, label %checkok18, !dbg !1184

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1183
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1183
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1183
  %24 = extractvalue %"char[]" %23, 0, !dbg !1183
  %25 = extractvalue %"char[]" %17, 0, !dbg !1183
  %26 = extractvalue %"char[]" %17, 1, !dbg !1183
  %27 = extractvalue %"char[]" %23, 1, !dbg !1183
  %neq = icmp ne i64 %27, %26, !dbg !1183
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1183
  br i1 %28, label %panic20, label %checkok30, !dbg !1183

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1183
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1183
  br label %expr_block.exit, !dbg !1185

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 8, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1186
  %34 = extractvalue %"char[]" %33, 0, !dbg !1186
  %35 = extractvalue %"char[]" %33, 1, !dbg !1186
  %gt32 = icmp sgt i64 0, %35, !dbg !1186
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1186
  br i1 %36, label %panic33, label %checkok43, !dbg !1186

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 8, !dbg !1186
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1186
  br i1 %37, label %panic45, label %checkok55, !dbg !1186

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1186
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !1186
  %40 = extractvalue %"char[]" %39, 0, !dbg !1186
  %41 = extractvalue %"char[]" %32, 0, !dbg !1186
  %42 = extractvalue %"char[]" %32, 1, !dbg !1186
  %43 = extractvalue %"char[]" %39, 1, !dbg !1186
  %neq56 = icmp ne i64 %43, %42, !dbg !1186
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1186
  br i1 %44, label %panic57, label %checkok67, !dbg !1186

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1186
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1186
  %46 = load i64, ptr %len, align 8, !dbg !1187
  %sub = sub i64 %46, 8, !dbg !1187
  store i64 %sub, ptr %len, align 8, !dbg !1187
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1188
  %48 = extractvalue %"char[]" %47, 0, !dbg !1188
  %49 = extractvalue %"char[]" %47, 1, !dbg !1189
  %gt68 = icmp ugt i64 8, %49, !dbg !1189
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1189
  br i1 %50, label %panic69, label %checkok79, !dbg !1189

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 8, !dbg !1188
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !1188
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1188
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1188
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1188
  br label %loop.cond, !dbg !1188

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.68, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1190
  store %"char[]" { ptr @.str.69, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.70, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 64, [2 x i64] %56), !dbg !1193
  unreachable, !dbg !1194

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1194

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 64), !dbg !1163
  unreachable, !dbg !1163

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1183
  unreachable, !dbg !1183

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1183
  unreachable, !dbg !1183

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1186
  unreachable, !dbg !1186

panic45:                                          ; preds = %checkok43
  store i64 7, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1186
  unreachable, !dbg !1186

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1186
  unreachable, !dbg !1186

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1188
  unreachable, !dbg !1188
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Sfc64Random.next_int128(ptr %0) #0 !dbg !1195 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1198
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1198
  br i1 %2, label %panic, label %checkok, !dbg !1198

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1199, metadata !DIExpression()), !dbg !1200
  %3 = load ptr, ptr %self, align 8, !dbg !1201
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1203
  %zext = zext i64 %4 to i128, !dbg !1203
  %shl = shl i128 %zext, 64, !dbg !1203
  %5 = freeze i128 %shl, !dbg !1203
  %6 = load ptr, ptr %self, align 8, !dbg !1201
  %7 = call i64 @std.math.random.Sfc64Random.next_long(ptr %6), !dbg !1204
  %zext3 = zext i64 %7 to i128, !dbg !1204
  %add = add i128 %5, %zext3, !dbg !1203
  ret i128 %add, !dbg !1203

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 65), !dbg !1200
  unreachable, !dbg !1200
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Sfc64Random.next_int(ptr %0) #0 !dbg !1205 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1208
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1208
  br i1 %2, label %panic, label %checkok, !dbg !1208

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1209, metadata !DIExpression()), !dbg !1210
  %3 = load ptr, ptr %self, align 8, !dbg !1211
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1212
  %trunc = trunc i64 %4 to i32, !dbg !1212
  ret i32 %trunc, !dbg !1212

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 66), !dbg !1210
  unreachable, !dbg !1210
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Sfc64Random.next_short(ptr %0) #0 !dbg !1213 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1216
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1216
  br i1 %2, label %panic, label %checkok, !dbg !1216

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1217, metadata !DIExpression()), !dbg !1218
  %3 = load ptr, ptr %self, align 8, !dbg !1219
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1220
  %trunc = trunc i64 %4 to i16, !dbg !1220
  ret i16 %trunc, !dbg !1220

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 67), !dbg !1218
  unreachable, !dbg !1218
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Sfc64Random.next_byte(ptr %0) #0 !dbg !1221 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1224
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1224
  br i1 %2, label %panic, label %checkok, !dbg !1224

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1225, metadata !DIExpression()), !dbg !1226
  %3 = load ptr, ptr %self, align 8, !dbg !1227
  %4 = call i64 @std.math.random.Sfc64Random.next_long(ptr %3), !dbg !1228
  %trunc = trunc i64 %4 to i8, !dbg !1228
  ret i8 %trunc, !dbg !1228

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 68), !dbg !1226
  unreachable, !dbg !1226
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc32Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1229 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 4
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1235
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1235
  br i1 %3, label %panic, label %checkok, !dbg !1235

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1236, metadata !DIExpression()), !dbg !1237
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1238, metadata !DIExpression()), !dbg !1239
  %4 = load ptr, ptr %self, align 8, !dbg !1240
  %checknull = icmp eq ptr %4, null, !dbg !1240
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1240
  br i1 %5, label %panic3, label %checkok7, !dbg !1240

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1241, metadata !DIExpression()), !dbg !1243
  store i32 0, ptr %return_value, align 4, !dbg !1243
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1243
  store i32 0, ptr %ptradd, align 4, !dbg !1243
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !1243
  store i32 0, ptr %ptradd9, align 4, !dbg !1243
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !1243
  store i32 0, ptr %ptradd10, align 4, !dbg !1243
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 16, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1245
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 4 %return_value, i32 16, i1 false), !dbg !1246
  ret void, !dbg !1246

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 74), !dbg !1237
  unreachable, !dbg !1237

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 76), !dbg !1240
  unreachable, !dbg !1240
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Sfc32Random.next_int(ptr %0) #0 !dbg !1247 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %sfc = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %self = alloca i32, align 4
  %shift = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !1250
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1250
  br i1 %2, label %panic, label %checkok, !dbg !1250

checkok:                                          ; preds = %entry
  store ptr %0, ptr %sfc, align 8
  call void @llvm.dbg.declare(metadata ptr %sfc, metadata !1251, metadata !DIExpression()), !dbg !1252
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1253, metadata !DIExpression()), !dbg !1254
  %3 = load ptr, ptr %sfc, align 8, !dbg !1255
  store ptr %3, ptr %s, align 8, !dbg !1255
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1256, metadata !DIExpression()), !dbg !1257
  %4 = load ptr, ptr %s, align 8, !dbg !1258
  %5 = load i32, ptr %4, align 4, !dbg !1259
  %6 = load ptr, ptr %s, align 8, !dbg !1260
  %ptradd = getelementptr inbounds i8, ptr %6, i64 4, !dbg !1261
  %7 = load i32, ptr %ptradd, align 4, !dbg !1261
  %add = add i32 %5, %7, !dbg !1258
  %8 = load ptr, ptr %s, align 8, !dbg !1262
  %ptradd3 = getelementptr inbounds i8, ptr %8, i64 12, !dbg !1263
  %9 = load i32, ptr %ptradd3, align 4, !dbg !1263
  %add4 = add i32 %add, %9, !dbg !1258
  store i32 %add4, ptr %result, align 4, !dbg !1258
  %10 = load ptr, ptr %s, align 8, !dbg !1264
  %11 = load ptr, ptr %s, align 8, !dbg !1265
  %ptradd5 = getelementptr inbounds i8, ptr %11, i64 4, !dbg !1266
  %12 = load i32, ptr %ptradd5, align 4, !dbg !1266
  %13 = load ptr, ptr %s, align 8, !dbg !1267
  %ptradd6 = getelementptr inbounds i8, ptr %13, i64 4, !dbg !1268
  %14 = load i32, ptr %ptradd6, align 4, !dbg !1268
  %lshr = lshr i32 %14, 9, !dbg !1267
  %15 = freeze i32 %lshr, !dbg !1267
  %xor = xor i32 %12, %15, !dbg !1265
  store i32 %xor, ptr %10, align 4, !dbg !1265
  %16 = load ptr, ptr %s, align 8, !dbg !1269
  %ptradd7 = getelementptr inbounds i8, ptr %16, i64 4, !dbg !1270
  %17 = load ptr, ptr %s, align 8, !dbg !1271
  %ptradd8 = getelementptr inbounds i8, ptr %17, i64 8, !dbg !1272
  %18 = load i32, ptr %ptradd8, align 4, !dbg !1272
  %19 = load ptr, ptr %s, align 8, !dbg !1273
  %ptradd9 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !1274
  %20 = load i32, ptr %ptradd9, align 4, !dbg !1274
  %shl = shl i32 %20, 3, !dbg !1273
  %21 = freeze i32 %shl, !dbg !1273
  %add10 = add i32 %18, %21, !dbg !1271
  store i32 %add10, ptr %ptradd7, align 4, !dbg !1271
  %22 = load ptr, ptr %s, align 8, !dbg !1275
  %ptradd11 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1276
  %23 = load ptr, ptr %s, align 8, !dbg !1277
  %ptradd12 = getelementptr inbounds i8, ptr %23, i64 8, !dbg !1278
  %24 = load i32, ptr %ptradd12, align 4
  store i32 %24, ptr %self, align 4
  store i32 11, ptr %shift, align 4
  %25 = load i32, ptr %self, align 4, !dbg !1279
  %26 = load i32, ptr %self, align 4, !dbg !1281
  %27 = load i32, ptr %shift, align 4, !dbg !1282
  %28 = call i32 @llvm.fshr.i32(i32 %25, i32 %26, i32 %27), !dbg !1282
  %29 = load i32, ptr %result, align 4, !dbg !1283
  %add13 = add i32 %28, %29, !dbg !1277
  store i32 %add13, ptr %ptradd11, align 4, !dbg !1277
  %30 = load ptr, ptr %s, align 8, !dbg !1284
  %ptradd14 = getelementptr inbounds i8, ptr %30, i64 12, !dbg !1285
  %31 = load i32, ptr %ptradd14, align 4, !dbg !1285
  %add15 = add i32 %31, -1640531527, !dbg !1284
  store i32 %add15, ptr %ptradd14, align 4, !dbg !1284
  %32 = load i32, ptr %result, align 4, !dbg !1286
  ret i32 %32, !dbg !1286

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.71, i64 61 }, ptr %taddr, align 8
  %33 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %34 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %35 = load [2 x i64], ptr %taddr2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 79), !dbg !1252
  unreachable, !dbg !1252
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc32Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1287 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1288
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1288
  br i1 %3, label %panic, label %checkok, !dbg !1288

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1289, metadata !DIExpression()), !dbg !1290
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1291, metadata !DIExpression()), !dbg !1292
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1293
  %4 = load i64, ptr %ptradd, align 8, !dbg !1293
  %lt = icmp ult i64 0, %4, !dbg !1293
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1293

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 91), !dbg !1293
  unreachable, !dbg !1293

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1295, metadata !DIExpression()), !dbg !1297
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1298
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1298
  store i64 %9, ptr %len, align 8, !dbg !1298
  br label %loop.cond, !dbg !1299

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1300
  %lt8 = icmp ult i64 0, %10, !dbg !1300
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1300

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1302, metadata !DIExpression()), !dbg !1304
  %11 = load ptr, ptr %self, align 8, !dbg !1305
  %12 = call i32 @std.math.random.Sfc32Random.next_int(ptr %11), !dbg !1306
  store i32 %12, ptr %value, align 4, !dbg !1306
  %13 = load i64, ptr %len, align 8, !dbg !1307
  %le = icmp ule i64 %13, 4, !dbg !1307
  br i1 %le, label %if.then, label %if.exit, !dbg !1307

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1308
  %add = add i64 0, %15, !dbg !1308
  %size = sub i64 %add, 0, !dbg !1308
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1308
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1308
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1310
  %19 = extractvalue %"char[]" %18, 0, !dbg !1310
  %20 = extractvalue %"char[]" %18, 1, !dbg !1311
  %gt = icmp ugt i64 0, %20, !dbg !1311
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1311
  br i1 %21, label %panic10, label %checkok18, !dbg !1311

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1310
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1310
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1310
  %24 = extractvalue %"char[]" %23, 0, !dbg !1310
  %25 = extractvalue %"char[]" %17, 0, !dbg !1310
  %26 = extractvalue %"char[]" %17, 1, !dbg !1310
  %27 = extractvalue %"char[]" %23, 1, !dbg !1310
  %neq = icmp ne i64 %27, %26, !dbg !1310
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1310
  br i1 %28, label %panic20, label %checkok30, !dbg !1310

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1310
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1310
  br label %expr_block.exit, !dbg !1312

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1313
  %34 = extractvalue %"char[]" %33, 0, !dbg !1313
  %35 = extractvalue %"char[]" %33, 1, !dbg !1313
  %gt32 = icmp sgt i64 0, %35, !dbg !1313
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1313
  br i1 %36, label %panic33, label %checkok43, !dbg !1313

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !1313
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1313
  br i1 %37, label %panic45, label %checkok55, !dbg !1313

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1313
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !1313
  %40 = extractvalue %"char[]" %39, 0, !dbg !1313
  %41 = extractvalue %"char[]" %32, 0, !dbg !1313
  %42 = extractvalue %"char[]" %32, 1, !dbg !1313
  %43 = extractvalue %"char[]" %39, 1, !dbg !1313
  %neq56 = icmp ne i64 %43, %42, !dbg !1313
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1313
  br i1 %44, label %panic57, label %checkok67, !dbg !1313

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1313
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1313
  %46 = load i64, ptr %len, align 8, !dbg !1314
  %sub = sub i64 %46, 4, !dbg !1314
  store i64 %sub, ptr %len, align 8, !dbg !1314
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1315
  %48 = extractvalue %"char[]" %47, 0, !dbg !1315
  %49 = extractvalue %"char[]" %47, 1, !dbg !1316
  %gt68 = icmp ugt i64 4, %49, !dbg !1316
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1316
  br i1 %50, label %panic69, label %checkok79, !dbg !1316

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !1315
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !1315
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1315
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1315
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1315
  br label %loop.cond, !dbg !1315

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.72, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1317
  store %"char[]" { ptr @.str.73, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.74, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 93, [2 x i64] %56), !dbg !1320
  unreachable, !dbg !1321

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1321

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 93), !dbg !1290
  unreachable, !dbg !1290

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1310
  unreachable, !dbg !1310

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1310
  unreachable, !dbg !1310

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1313
  unreachable, !dbg !1313

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1313
  unreachable, !dbg !1313

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1313
  unreachable, !dbg !1313

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1315
  unreachable, !dbg !1315
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Sfc32Random.next_int128(ptr %0) #0 !dbg !1322 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1325
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1325
  br i1 %2, label %panic, label %checkok, !dbg !1325

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1326, metadata !DIExpression()), !dbg !1327
  %3 = load ptr, ptr %self, align 8, !dbg !1328
  %4 = call i64 @std.math.random.Sfc32Random.next_long(ptr %3), !dbg !1330
  %zext = zext i64 %4 to i128, !dbg !1330
  %shl = shl i128 %zext, 64, !dbg !1330
  %5 = freeze i128 %shl, !dbg !1330
  %6 = load ptr, ptr %self, align 8, !dbg !1328
  %7 = call i64 @std.math.random.Sfc32Random.next_long(ptr %6), !dbg !1331
  %zext3 = zext i64 %7 to i128, !dbg !1331
  %add = add i128 %5, %zext3, !dbg !1330
  ret i128 %add, !dbg !1330

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 94), !dbg !1327
  unreachable, !dbg !1327
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Sfc32Random.next_long(ptr %0) #0 !dbg !1332 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1335
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1335
  br i1 %2, label %panic, label %checkok, !dbg !1335

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1336, metadata !DIExpression()), !dbg !1337
  %3 = load ptr, ptr %self, align 8, !dbg !1338
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1340
  %zext = zext i32 %4 to i64, !dbg !1340
  %shl = shl i64 %zext, 32, !dbg !1340
  %5 = freeze i64 %shl, !dbg !1340
  %6 = load ptr, ptr %self, align 8, !dbg !1338
  %7 = call i32 @std.math.random.Sfc32Random.next_int(ptr %6), !dbg !1341
  %zext3 = zext i32 %7 to i64, !dbg !1341
  %add = add i64 %5, %zext3, !dbg !1340
  ret i64 %add, !dbg !1340

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 95), !dbg !1337
  unreachable, !dbg !1337
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Sfc32Random.next_short(ptr %0) #0 !dbg !1342 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1345
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1345
  br i1 %2, label %panic, label %checkok, !dbg !1345

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1346, metadata !DIExpression()), !dbg !1347
  %3 = load ptr, ptr %self, align 8, !dbg !1348
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1349
  %trunc = trunc i32 %4 to i16, !dbg !1349
  ret i16 %trunc, !dbg !1349

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 96), !dbg !1347
  unreachable, !dbg !1347
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Sfc32Random.next_byte(ptr %0) #0 !dbg !1350 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1353
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1353
  br i1 %2, label %panic, label %checkok, !dbg !1353

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1354, metadata !DIExpression()), !dbg !1355
  %3 = load ptr, ptr %self, align 8, !dbg !1356
  %4 = call i32 @std.math.random.Sfc32Random.next_int(ptr %3), !dbg !1357
  %trunc = trunc i32 %4 to i8, !dbg !1357
  ret i8 %trunc, !dbg !1357

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 97), !dbg !1355
  unreachable, !dbg !1355
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc16Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1358 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1364
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1364
  br i1 %3, label %panic, label %checkok, !dbg !1364

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1365, metadata !DIExpression()), !dbg !1366
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1367, metadata !DIExpression()), !dbg !1368
  %4 = load ptr, ptr %self, align 8, !dbg !1369
  %checknull = icmp eq ptr %4, null, !dbg !1369
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1369
  br i1 %5, label %panic3, label %checkok7, !dbg !1369

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1370, metadata !DIExpression()), !dbg !1372
  store i16 0, ptr %return_value, align 2, !dbg !1372
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1372
  store i16 0, ptr %ptradd, align 2, !dbg !1372
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !1372
  store i16 0, ptr %ptradd9, align 2, !dbg !1372
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !1372
  store i16 0, ptr %ptradd10, align 2, !dbg !1372
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 8, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1374
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %return_value, i32 8, i1 false), !dbg !1375
  ret void, !dbg !1375

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 103), !dbg !1366
  unreachable, !dbg !1366

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 105), !dbg !1369
  unreachable, !dbg !1369
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Sfc16Random.next_short(ptr %0) #0 !dbg !1376 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %seed = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %self = alloca i16, align 2
  %shift = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !1379
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1379
  br i1 %2, label %panic, label %checkok, !dbg !1379

checkok:                                          ; preds = %entry
  store ptr %0, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !1380, metadata !DIExpression()), !dbg !1381
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1382, metadata !DIExpression()), !dbg !1383
  %3 = load ptr, ptr %seed, align 8, !dbg !1384
  store ptr %3, ptr %s, align 8, !dbg !1384
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1385, metadata !DIExpression()), !dbg !1386
  %4 = load ptr, ptr %s, align 8, !dbg !1387
  %5 = load i16, ptr %4, align 2, !dbg !1388
  %zext = zext i16 %5 to i32, !dbg !1388
  %6 = load ptr, ptr %s, align 8, !dbg !1389
  %ptradd = getelementptr inbounds i8, ptr %6, i64 2, !dbg !1390
  %7 = load i16, ptr %ptradd, align 2, !dbg !1390
  %zext3 = zext i16 %7 to i32, !dbg !1390
  %add = add i32 %zext, %zext3, !dbg !1387
  %8 = load ptr, ptr %s, align 8, !dbg !1391
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 6, !dbg !1392
  %9 = load i16, ptr %ptradd4, align 2, !dbg !1392
  %zext5 = zext i16 %9 to i32, !dbg !1392
  %add6 = add i32 %add, %zext5, !dbg !1387
  %trunc = trunc i32 %add6 to i16, !dbg !1387
  store i16 %trunc, ptr %result, align 2, !dbg !1387
  %10 = load ptr, ptr %s, align 8, !dbg !1393
  %11 = load ptr, ptr %s, align 8, !dbg !1394
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 2, !dbg !1395
  %12 = load i16, ptr %ptradd7, align 2, !dbg !1395
  %zext8 = zext i16 %12 to i32, !dbg !1395
  %13 = load ptr, ptr %s, align 8, !dbg !1396
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 2, !dbg !1397
  %14 = load i16, ptr %ptradd9, align 2, !dbg !1397
  %zext10 = zext i16 %14 to i32, !dbg !1397
  %lshr = lshr i32 %zext10, 2, !dbg !1396
  %15 = freeze i32 %lshr, !dbg !1396
  %xor = xor i32 %zext8, %15, !dbg !1394
  %trunc11 = trunc i32 %xor to i16, !dbg !1394
  store i16 %trunc11, ptr %10, align 2, !dbg !1394
  %16 = load ptr, ptr %s, align 8, !dbg !1398
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 2, !dbg !1399
  %17 = load ptr, ptr %s, align 8, !dbg !1400
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 4, !dbg !1401
  %18 = load i16, ptr %ptradd13, align 2, !dbg !1401
  %zext14 = zext i16 %18 to i32, !dbg !1401
  %19 = load ptr, ptr %s, align 8, !dbg !1402
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !1403
  %20 = load i16, ptr %ptradd15, align 2, !dbg !1403
  %zext16 = zext i16 %20 to i32, !dbg !1403
  %shl = shl i32 %zext16, 3, !dbg !1402
  %21 = freeze i32 %shl, !dbg !1402
  %add17 = add i32 %zext14, %21, !dbg !1400
  %trunc18 = trunc i32 %add17 to i16, !dbg !1400
  store i16 %trunc18, ptr %ptradd12, align 2, !dbg !1400
  %22 = load ptr, ptr %s, align 8, !dbg !1404
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !1405
  %23 = load ptr, ptr %s, align 8, !dbg !1406
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 4, !dbg !1407
  %24 = load i16, ptr %ptradd20, align 2
  store i16 %24, ptr %self, align 2
  store i16 12, ptr %shift, align 2
  %25 = load i16, ptr %self, align 2, !dbg !1408
  %26 = load i16, ptr %self, align 2, !dbg !1410
  %27 = load i16, ptr %shift, align 2, !dbg !1411
  %28 = call i16 @llvm.fshr.i16(i16 %25, i16 %26, i16 %27), !dbg !1411
  %zext21 = zext i16 %28 to i32, !dbg !1411
  %29 = load i16, ptr %result, align 2, !dbg !1412
  %zext22 = zext i16 %29 to i32, !dbg !1412
  %add23 = add i32 %zext21, %zext22, !dbg !1406
  %trunc24 = trunc i32 %add23 to i16, !dbg !1406
  store i16 %trunc24, ptr %ptradd19, align 2, !dbg !1406
  %30 = load ptr, ptr %s, align 8, !dbg !1413
  %ptradd25 = getelementptr inbounds i8, ptr %30, i64 6, !dbg !1414
  %31 = load i16, ptr %ptradd25, align 2, !dbg !1414
  %add26 = add i16 %31, -25033, !dbg !1413
  store i16 %add26, ptr %ptradd25, align 2, !dbg !1413
  %32 = load i16, ptr %result, align 2, !dbg !1415
  ret i16 %32, !dbg !1415

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.75, i64 62 }, ptr %taddr, align 8
  %33 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %34 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %35 = load [2 x i64], ptr %taddr2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 109), !dbg !1381
  unreachable, !dbg !1381
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc16Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1416 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1417
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1417
  br i1 %3, label %panic, label %checkok, !dbg !1417

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1418, metadata !DIExpression()), !dbg !1419
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1420, metadata !DIExpression()), !dbg !1421
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1422
  %4 = load i64, ptr %ptradd, align 8, !dbg !1422
  %lt = icmp ult i64 0, %4, !dbg !1422
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1422

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 121), !dbg !1422
  unreachable, !dbg !1422

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1424, metadata !DIExpression()), !dbg !1426
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1427
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1427
  store i64 %9, ptr %len, align 8, !dbg !1427
  br label %loop.cond, !dbg !1428

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1429
  %lt8 = icmp ult i64 0, %10, !dbg !1429
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1429

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1431, metadata !DIExpression()), !dbg !1433
  %11 = load ptr, ptr %self, align 8, !dbg !1434
  %12 = call i16 @std.math.random.Sfc16Random.next_short(ptr %11), !dbg !1435
  store i16 %12, ptr %value, align 2, !dbg !1435
  %13 = load i64, ptr %len, align 8, !dbg !1436
  %le = icmp ule i64 %13, 2, !dbg !1436
  br i1 %le, label %if.then, label %if.exit, !dbg !1436

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1437
  %add = add i64 0, %15, !dbg !1437
  %size = sub i64 %add, 0, !dbg !1437
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1437
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1437
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1439
  %19 = extractvalue %"char[]" %18, 0, !dbg !1439
  %20 = extractvalue %"char[]" %18, 1, !dbg !1440
  %gt = icmp ugt i64 0, %20, !dbg !1440
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1440
  br i1 %21, label %panic10, label %checkok18, !dbg !1440

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1439
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1439
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1439
  %24 = extractvalue %"char[]" %23, 0, !dbg !1439
  %25 = extractvalue %"char[]" %17, 0, !dbg !1439
  %26 = extractvalue %"char[]" %17, 1, !dbg !1439
  %27 = extractvalue %"char[]" %23, 1, !dbg !1439
  %neq = icmp ne i64 %27, %26, !dbg !1439
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1439
  br i1 %28, label %panic20, label %checkok30, !dbg !1439

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1439
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1439
  br label %expr_block.exit, !dbg !1441

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 2, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1442
  %34 = extractvalue %"char[]" %33, 0, !dbg !1442
  %35 = extractvalue %"char[]" %33, 1, !dbg !1442
  %gt32 = icmp sgt i64 0, %35, !dbg !1442
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1442
  br i1 %36, label %panic33, label %checkok43, !dbg !1442

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 2, !dbg !1442
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1442
  br i1 %37, label %panic45, label %checkok55, !dbg !1442

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1442
  %39 = insertvalue %"char[]" %38, i64 2, 1, !dbg !1442
  %40 = extractvalue %"char[]" %39, 0, !dbg !1442
  %41 = extractvalue %"char[]" %32, 0, !dbg !1442
  %42 = extractvalue %"char[]" %32, 1, !dbg !1442
  %43 = extractvalue %"char[]" %39, 1, !dbg !1442
  %neq56 = icmp ne i64 %43, %42, !dbg !1442
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1442
  br i1 %44, label %panic57, label %checkok67, !dbg !1442

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1442
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1442
  %46 = load i64, ptr %len, align 8, !dbg !1443
  %sub = sub i64 %46, 2, !dbg !1443
  store i64 %sub, ptr %len, align 8, !dbg !1443
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1444
  %48 = extractvalue %"char[]" %47, 0, !dbg !1444
  %49 = extractvalue %"char[]" %47, 1, !dbg !1445
  %gt68 = icmp ugt i64 2, %49, !dbg !1445
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1445
  br i1 %50, label %panic69, label %checkok79, !dbg !1445

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 2, !dbg !1444
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 2, !dbg !1444
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1444
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1444
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1444
  br label %loop.cond, !dbg !1444

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.76, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1446
  store %"char[]" { ptr @.str.77, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.78, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 123, [2 x i64] %56), !dbg !1449
  unreachable, !dbg !1450

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1450

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 123), !dbg !1419
  unreachable, !dbg !1419

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1439
  unreachable, !dbg !1439

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1439
  unreachable, !dbg !1439

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1442
  unreachable, !dbg !1442

panic45:                                          ; preds = %checkok43
  store i64 1, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1442
  unreachable, !dbg !1442

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1442
  unreachable, !dbg !1442

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1444
  unreachable, !dbg !1444
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Sfc16Random.next_int128(ptr %0) #0 !dbg !1451 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1454
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1454
  br i1 %2, label %panic, label %checkok, !dbg !1454

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1455, metadata !DIExpression()), !dbg !1456
  %3 = load ptr, ptr %self, align 8, !dbg !1457
  %4 = call i64 @std.math.random.Sfc16Random.next_long(ptr %3), !dbg !1459
  %zext = zext i64 %4 to i128, !dbg !1459
  %shl = shl i128 %zext, 64, !dbg !1459
  %5 = freeze i128 %shl, !dbg !1459
  %6 = load ptr, ptr %self, align 8, !dbg !1457
  %7 = call i64 @std.math.random.Sfc16Random.next_long(ptr %6), !dbg !1460
  %zext3 = zext i64 %7 to i128, !dbg !1460
  %add = add i128 %5, %zext3, !dbg !1459
  ret i128 %add, !dbg !1459

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 124), !dbg !1456
  unreachable, !dbg !1456
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Sfc16Random.next_long(ptr %0) #0 !dbg !1461 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1464
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1464
  br i1 %2, label %panic, label %checkok, !dbg !1464

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1465, metadata !DIExpression()), !dbg !1466
  %3 = load ptr, ptr %self, align 8, !dbg !1467
  %4 = call i32 @std.math.random.Sfc16Random.next_int(ptr %3), !dbg !1469
  %zext = zext i32 %4 to i64, !dbg !1469
  %shl = shl i64 %zext, 32, !dbg !1469
  %5 = freeze i64 %shl, !dbg !1469
  %6 = load ptr, ptr %self, align 8, !dbg !1467
  %7 = call i32 @std.math.random.Sfc16Random.next_int(ptr %6), !dbg !1470
  %zext3 = zext i32 %7 to i64, !dbg !1470
  %add = add i64 %5, %zext3, !dbg !1469
  ret i64 %add, !dbg !1469

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 125), !dbg !1466
  unreachable, !dbg !1466
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Sfc16Random.next_int(ptr %0) #0 !dbg !1471 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1474
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1474
  br i1 %2, label %panic, label %checkok, !dbg !1474

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1475, metadata !DIExpression()), !dbg !1476
  %3 = load ptr, ptr %self, align 8, !dbg !1477
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1479
  %zext = zext i16 %4 to i32, !dbg !1479
  %shl = shl i32 %zext, 16, !dbg !1479
  %5 = freeze i32 %shl, !dbg !1479
  %6 = load ptr, ptr %self, align 8, !dbg !1477
  %7 = call i16 @std.math.random.Sfc16Random.next_short(ptr %6), !dbg !1480
  %zext3 = zext i16 %7 to i32, !dbg !1480
  %add = add i32 %5, %zext3, !dbg !1479
  ret i32 %add, !dbg !1479

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 126), !dbg !1476
  unreachable, !dbg !1476
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Sfc16Random.next_byte(ptr %0) #0 !dbg !1481 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1484
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1484
  br i1 %2, label %panic, label %checkok, !dbg !1484

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1485, metadata !DIExpression()), !dbg !1486
  %3 = load ptr, ptr %self, align 8, !dbg !1487
  %4 = call i16 @std.math.random.Sfc16Random.next_short(ptr %3), !dbg !1488
  %trunc = trunc i16 %4 to i8, !dbg !1488
  ret i8 %trunc, !dbg !1488

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 127), !dbg !1486
  unreachable, !dbg !1486
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc8Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1489 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1495
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1495
  br i1 %3, label %panic, label %checkok, !dbg !1495

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1496, metadata !DIExpression()), !dbg !1497
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1498, metadata !DIExpression()), !dbg !1499
  %4 = load ptr, ptr %self, align 8, !dbg !1500
  %checknull = icmp eq ptr %4, null, !dbg !1500
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1500
  br i1 %5, label %panic3, label %checkok7, !dbg !1500

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1501, metadata !DIExpression()), !dbg !1503
  store i8 0, ptr %return_value, align 1, !dbg !1503
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !1503
  store i8 0, ptr %ptradd, align 1, !dbg !1503
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !1503
  store i8 0, ptr %ptradd9, align 1, !dbg !1503
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !1503
  store i8 0, ptr %ptradd10, align 1, !dbg !1503
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 4, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1505
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %return_value, i32 4, i1 false), !dbg !1506
  ret void, !dbg !1506

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 134), !dbg !1497
  unreachable, !dbg !1497

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 136), !dbg !1500
  unreachable, !dbg !1500
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Sfc8Random.next_byte(ptr %0) #0 !dbg !1507 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %self21 = alloca i8, align 1
  %shift = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !1510
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1510
  br i1 %2, label %panic, label %checkok, !dbg !1510

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1511, metadata !DIExpression()), !dbg !1512
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1513, metadata !DIExpression()), !dbg !1514
  %3 = load ptr, ptr %self, align 8, !dbg !1515
  store ptr %3, ptr %s, align 8, !dbg !1515
  call void @llvm.dbg.declare(metadata ptr %result, metadata !1516, metadata !DIExpression()), !dbg !1517
  %4 = load ptr, ptr %s, align 8, !dbg !1518
  %5 = load i8, ptr %4, align 1, !dbg !1519
  %zext = zext i8 %5 to i32, !dbg !1519
  %6 = load ptr, ptr %s, align 8, !dbg !1520
  %ptradd = getelementptr inbounds i8, ptr %6, i64 1, !dbg !1521
  %7 = load i8, ptr %ptradd, align 1, !dbg !1521
  %zext3 = zext i8 %7 to i32, !dbg !1521
  %add = add i32 %zext, %zext3, !dbg !1518
  %8 = load ptr, ptr %s, align 8, !dbg !1522
  %ptradd4 = getelementptr inbounds i8, ptr %8, i64 3, !dbg !1523
  %9 = load i8, ptr %ptradd4, align 1, !dbg !1523
  %zext5 = zext i8 %9 to i32, !dbg !1523
  %add6 = add i32 %add, %zext5, !dbg !1518
  %trunc = trunc i32 %add6 to i8, !dbg !1518
  store i8 %trunc, ptr %result, align 1, !dbg !1518
  %10 = load ptr, ptr %s, align 8, !dbg !1524
  %11 = load ptr, ptr %s, align 8, !dbg !1525
  %ptradd7 = getelementptr inbounds i8, ptr %11, i64 1, !dbg !1526
  %12 = load i8, ptr %ptradd7, align 1, !dbg !1526
  %zext8 = zext i8 %12 to i32, !dbg !1526
  %13 = load ptr, ptr %s, align 8, !dbg !1527
  %ptradd9 = getelementptr inbounds i8, ptr %13, i64 1, !dbg !1528
  %14 = load i8, ptr %ptradd9, align 1, !dbg !1528
  %zext10 = zext i8 %14 to i32, !dbg !1528
  %lshr = lshr i32 %zext10, 1, !dbg !1527
  %15 = freeze i32 %lshr, !dbg !1527
  %xor = xor i32 %zext8, %15, !dbg !1525
  %trunc11 = trunc i32 %xor to i8, !dbg !1525
  store i8 %trunc11, ptr %10, align 1, !dbg !1525
  %16 = load ptr, ptr %s, align 8, !dbg !1529
  %ptradd12 = getelementptr inbounds i8, ptr %16, i64 1, !dbg !1530
  %17 = load ptr, ptr %s, align 8, !dbg !1531
  %ptradd13 = getelementptr inbounds i8, ptr %17, i64 2, !dbg !1532
  %18 = load i8, ptr %ptradd13, align 1, !dbg !1532
  %zext14 = zext i8 %18 to i32, !dbg !1532
  %19 = load ptr, ptr %s, align 8, !dbg !1533
  %ptradd15 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !1534
  %20 = load i8, ptr %ptradd15, align 1, !dbg !1534
  %zext16 = zext i8 %20 to i32, !dbg !1534
  %shl = shl i32 %zext16, 2, !dbg !1533
  %21 = freeze i32 %shl, !dbg !1533
  %add17 = add i32 %zext14, %21, !dbg !1531
  %trunc18 = trunc i32 %add17 to i8, !dbg !1531
  store i8 %trunc18, ptr %ptradd12, align 1, !dbg !1531
  %22 = load ptr, ptr %s, align 8, !dbg !1535
  %ptradd19 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !1536
  %23 = load ptr, ptr %s, align 8, !dbg !1537
  %ptradd20 = getelementptr inbounds i8, ptr %23, i64 2, !dbg !1538
  %24 = load i8, ptr %ptradd20, align 1
  store i8 %24, ptr %self21, align 1
  store i8 3, ptr %shift, align 1
  %25 = load i8, ptr %self21, align 1, !dbg !1539
  %26 = load i8, ptr %self21, align 1, !dbg !1541
  %27 = load i8, ptr %shift, align 1, !dbg !1542
  %28 = call i8 @llvm.fshr.i8(i8 %25, i8 %26, i8 %27), !dbg !1542
  %zext22 = zext i8 %28 to i32, !dbg !1542
  %29 = load i8, ptr %result, align 1, !dbg !1543
  %zext23 = zext i8 %29 to i32, !dbg !1543
  %add24 = add i32 %zext22, %zext23, !dbg !1537
  %trunc25 = trunc i32 %add24 to i8, !dbg !1537
  store i8 %trunc25, ptr %ptradd19, align 1, !dbg !1537
  %30 = load ptr, ptr %s, align 8, !dbg !1544
  %ptradd26 = getelementptr inbounds i8, ptr %30, i64 3, !dbg !1545
  %31 = load i8, ptr %ptradd26, align 1, !dbg !1545
  %add27 = add i8 %31, -97, !dbg !1544
  store i8 %add27, ptr %ptradd26, align 1, !dbg !1544
  %32 = load i8, ptr %result, align 1, !dbg !1546
  ret i8 %32, !dbg !1546

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %33 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %34 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %35 = load [2 x i64], ptr %taddr2, align 8
  %36 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %36([2 x i64] %33, [2 x i64] %34, [2 x i64] %35, i32 139), !dbg !1512
  unreachable, !dbg !1512
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Sfc8Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1547 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1548
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1548
  br i1 %3, label %panic, label %checkok, !dbg !1548

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1549, metadata !DIExpression()), !dbg !1550
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1551, metadata !DIExpression()), !dbg !1552
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1553, metadata !DIExpression()), !dbg !1555
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !1556
  %4 = load i64, ptr %ptradd, align 8, !dbg !1556
  store i64 %4, ptr %len, align 8, !dbg !1556
  br label %loop.cond, !dbg !1557

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !1558
  %lt = icmp ult i64 0, %5, !dbg !1558
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1558

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1560, metadata !DIExpression()), !dbg !1562
  %6 = load ptr, ptr %self, align 8, !dbg !1563
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !1564
  store i8 %7, ptr %value, align 1, !dbg !1564
  %8 = load i64, ptr %len, align 8, !dbg !1565
  %le = icmp ule i64 %8, 1, !dbg !1565
  br i1 %le, label %if.then, label %if.exit, !dbg !1565

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !1566
  %add = add i64 0, %10, !dbg !1566
  %size = sub i64 %add, 0, !dbg !1566
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !1566
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !1566
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !1568
  %14 = extractvalue %"char[]" %13, 0, !dbg !1568
  %15 = extractvalue %"char[]" %13, 1, !dbg !1569
  %gt = icmp ugt i64 0, %15, !dbg !1569
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1569
  br i1 %16, label %panic5, label %checkok13, !dbg !1569

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !1568
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1568
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !1568
  %19 = extractvalue %"char[]" %18, 0, !dbg !1568
  %20 = extractvalue %"char[]" %12, 0, !dbg !1568
  %21 = extractvalue %"char[]" %12, 1, !dbg !1568
  %22 = extractvalue %"char[]" %18, 1, !dbg !1568
  %neq = icmp ne i64 %22, %21, !dbg !1568
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1568
  br i1 %23, label %panic15, label %checkok25, !dbg !1568

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !1568
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !1568
  br label %expr_block.exit, !dbg !1570

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !1571
  %29 = extractvalue %"char[]" %28, 0, !dbg !1571
  %30 = extractvalue %"char[]" %28, 1, !dbg !1571
  %gt27 = icmp sgt i64 0, %30, !dbg !1571
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !1571
  br i1 %31, label %panic28, label %checkok38, !dbg !1571

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 1, !dbg !1571
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !1571
  br i1 %32, label %panic40, label %checkok50, !dbg !1571

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !1571
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !1571
  %35 = extractvalue %"char[]" %34, 0, !dbg !1571
  %36 = extractvalue %"char[]" %27, 0, !dbg !1571
  %37 = extractvalue %"char[]" %27, 1, !dbg !1571
  %38 = extractvalue %"char[]" %34, 1, !dbg !1571
  %neq51 = icmp ne i64 %38, %37, !dbg !1571
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !1571
  br i1 %39, label %panic52, label %checkok62, !dbg !1571

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !1571
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !1571
  %41 = load i64, ptr %len, align 8, !dbg !1572
  %sub = sub i64 %41, 1, !dbg !1572
  store i64 %sub, ptr %len, align 8, !dbg !1572
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !1573
  %43 = extractvalue %"char[]" %42, 0, !dbg !1573
  %44 = extractvalue %"char[]" %42, 1, !dbg !1574
  %gt63 = icmp ugt i64 1, %44, !dbg !1574
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !1574
  br i1 %45, label %panic64, label %checkok74, !dbg !1574

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 1, !dbg !1573
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !1573
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !1573
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !1573
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !1573
  br label %loop.cond, !dbg !1573

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.79, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !1575
  store %"char[]" { ptr @.str.80, i64 11 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.81, i64 21 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 150, [2 x i64] %51), !dbg !1578
  unreachable, !dbg !1579

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !1579

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 150), !dbg !1550
  unreachable, !dbg !1550

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !1568
  unreachable, !dbg !1568

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !1568
  unreachable, !dbg !1568

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !1571
  unreachable, !dbg !1571

panic40:                                          ; preds = %checkok38
  store i64 0, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !1571
  unreachable, !dbg !1571

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !1571
  unreachable, !dbg !1571

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !1573
  unreachable, !dbg !1573
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Sfc8Random.next_int128(ptr %0) #0 !dbg !1580 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1583
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1583
  br i1 %2, label %panic, label %checkok, !dbg !1583

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1584, metadata !DIExpression()), !dbg !1585
  %3 = load ptr, ptr %self, align 8, !dbg !1586
  %4 = call i64 @std.math.random.Sfc8Random.next_long(ptr %3), !dbg !1588
  %zext = zext i64 %4 to i128, !dbg !1588
  %shl = shl i128 %zext, 64, !dbg !1588
  %5 = freeze i128 %shl, !dbg !1588
  %6 = load ptr, ptr %self, align 8, !dbg !1586
  %7 = call i64 @std.math.random.Sfc8Random.next_long(ptr %6), !dbg !1589
  %zext3 = zext i64 %7 to i128, !dbg !1589
  %add = add i128 %5, %zext3, !dbg !1588
  ret i128 %add, !dbg !1588

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 151), !dbg !1585
  unreachable, !dbg !1585
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Sfc8Random.next_long(ptr %0) #0 !dbg !1590 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1593
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1593
  br i1 %2, label %panic, label %checkok, !dbg !1593

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1594, metadata !DIExpression()), !dbg !1595
  %3 = load ptr, ptr %self, align 8, !dbg !1596
  %4 = call i32 @std.math.random.Sfc8Random.next_int(ptr %3), !dbg !1598
  %zext = zext i32 %4 to i64, !dbg !1598
  %shl = shl i64 %zext, 32, !dbg !1598
  %5 = freeze i64 %shl, !dbg !1598
  %6 = load ptr, ptr %self, align 8, !dbg !1596
  %7 = call i32 @std.math.random.Sfc8Random.next_int(ptr %6), !dbg !1599
  %zext3 = zext i32 %7 to i64, !dbg !1599
  %add = add i64 %5, %zext3, !dbg !1598
  ret i64 %add, !dbg !1598

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 152), !dbg !1595
  unreachable, !dbg !1595
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Sfc8Random.next_int(ptr %0) #0 !dbg !1600 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1603
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1603
  br i1 %2, label %panic, label %checkok, !dbg !1603

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1604, metadata !DIExpression()), !dbg !1605
  %3 = load ptr, ptr %self, align 8, !dbg !1606
  %4 = call i16 @std.math.random.Sfc8Random.next_short(ptr %3), !dbg !1608
  %zext = zext i16 %4 to i32, !dbg !1608
  %shl = shl i32 %zext, 16, !dbg !1608
  %5 = freeze i32 %shl, !dbg !1608
  %6 = load ptr, ptr %self, align 8, !dbg !1606
  %7 = call i16 @std.math.random.Sfc8Random.next_short(ptr %6), !dbg !1609
  %zext3 = zext i16 %7 to i32, !dbg !1609
  %add = add i32 %5, %zext3, !dbg !1608
  ret i32 %add, !dbg !1608

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 153), !dbg !1605
  unreachable, !dbg !1605
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Sfc8Random.next_short(ptr %0) #0 !dbg !1610 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1613
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1613
  br i1 %2, label %panic, label %checkok, !dbg !1613

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1614, metadata !DIExpression()), !dbg !1615
  %3 = load ptr, ptr %self, align 8, !dbg !1616
  %4 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %3), !dbg !1618
  %zext = zext i8 %4 to i16, !dbg !1618
  %zext3 = zext i16 %zext to i32, !dbg !1618
  %shl = shl i32 %zext3, 8, !dbg !1618
  %5 = freeze i32 %shl, !dbg !1618
  %6 = load ptr, ptr %self, align 8, !dbg !1616
  %7 = call i8 @std.math.random.Sfc8Random.next_byte(ptr %6), !dbg !1619
  %zext4 = zext i8 %7 to i32, !dbg !1619
  %add = add i32 %5, %zext4, !dbg !1618
  %trunc = trunc i32 %add to i16, !dbg !1618
  ret i16 %trunc, !dbg !1618

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.64, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 154), !dbg !1615
  unreachable, !dbg !1615
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.SimpleRandom.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1620 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %full = alloca [8 x i8], align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca i64, align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr18 = alloca %"any[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %varargslots27 = alloca [1 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr33 = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca %"char[]", align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %varargslots38 = alloca [2 x %any], align 8
  %taddr41 = alloca %"any[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr46 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %expr = alloca [8 x i8], align 1
  %x = alloca i64, align 8
  %2 = icmp eq ptr %0, null, !dbg !1625
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1625
  br i1 %3, label %panic, label %checkok, !dbg !1625

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1626, metadata !DIExpression()), !dbg !1627
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !1628, metadata !DIExpression()), !dbg !1629
  call void @llvm.dbg.declare(metadata ptr %full, metadata !1630, metadata !DIExpression()), !dbg !1632
  store i8 0, ptr %full, align 1, !dbg !1632
  %ptradd = getelementptr inbounds i8, ptr %full, i64 1, !dbg !1632
  store i8 0, ptr %ptradd, align 1, !dbg !1632
  %ptradd3 = getelementptr inbounds i8, ptr %full, i64 2, !dbg !1632
  store i8 0, ptr %ptradd3, align 1, !dbg !1632
  %ptradd4 = getelementptr inbounds i8, ptr %full, i64 3, !dbg !1632
  store i8 0, ptr %ptradd4, align 1, !dbg !1632
  %ptradd5 = getelementptr inbounds i8, ptr %full, i64 4, !dbg !1632
  store i8 0, ptr %ptradd5, align 1, !dbg !1632
  %ptradd6 = getelementptr inbounds i8, ptr %full, i64 5, !dbg !1632
  store i8 0, ptr %ptradd6, align 1, !dbg !1632
  %ptradd7 = getelementptr inbounds i8, ptr %full, i64 6, !dbg !1632
  store i8 0, ptr %ptradd7, align 1, !dbg !1632
  %ptradd8 = getelementptr inbounds i8, ptr %full, i64 7, !dbg !1632
  store i8 0, ptr %ptradd8, align 1, !dbg !1632
  %ptradd9 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !1633
  %4 = load i64, ptr %ptradd9, align 8, !dbg !1633
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1635, metadata !DIExpression()), !dbg !1636
  store i64 0, ptr %.anon, align 8, !dbg !1636
  br label %loop.cond, !dbg !1636

loop.cond:                                        ; preds = %checkok42, %checkok
  %5 = load i64, ptr %.anon, align 8, !dbg !1636
  %lt = icmp ult i64 %5, %4, !dbg !1636
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1636

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !1637, metadata !DIExpression()), !dbg !1639
  %6 = load i64, ptr %.anon, align 8, !dbg !1639
  store i64 %6, ptr %i, align 8, !dbg !1639
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1640, metadata !DIExpression()), !dbg !1641
  %ptradd10 = getelementptr inbounds i8, ptr %seed, i64 8, !dbg !1642
  %7 = load i64, ptr %ptradd10, align 8, !dbg !1642
  %8 = load ptr, ptr %seed, align 8, !dbg !1642
  %9 = load i64, ptr %.anon, align 8, !dbg !1639
  %ge = icmp uge i64 %9, %7, !dbg !1639
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1639
  br i1 %10, label %panic11, label %checkok19, !dbg !1639

checkok19:                                        ; preds = %loop.body
  %ptradd20 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !1639
  %11 = load i8, ptr %ptradd20, align 1, !dbg !1639
  store i8 %11, ptr %c, align 1, !dbg !1639
  %12 = load i64, ptr %i, align 8, !dbg !1643
  %smod = srem i64 %12, 8, !dbg !1643
  %lt21 = icmp slt i64 %smod, 0, !dbg !1643
  %13 = call i1 @llvm.expect.i1(i1 %lt21, i1 false), !dbg !1643
  br i1 %13, label %panic22, label %checkok30, !dbg !1643

checkok30:                                        ; preds = %checkok19
  %ge31 = icmp sge i64 %smod, 8, !dbg !1643
  %14 = call i1 @llvm.expect.i1(i1 %ge31, i1 false), !dbg !1643
  br i1 %14, label %panic32, label %checkok42, !dbg !1643

checkok42:                                        ; preds = %checkok30
  %ptradd43 = getelementptr inbounds i8, ptr %full, i64 %smod, !dbg !1643
  %15 = load i8, ptr %ptradd43, align 1, !dbg !1643
  %16 = load i8, ptr %c, align 1, !dbg !1645
  %xor = xor i8 %15, %16, !dbg !1646
  store i8 %xor, ptr %ptradd43, align 1, !dbg !1646
  %17 = load i64, ptr %.anon, align 8, !dbg !1636
  %addnuw = add nuw i64 %17, 1, !dbg !1636
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1636
  br label %loop.cond, !dbg !1636

loop.exit:                                        ; preds = %loop.cond
  %18 = load ptr, ptr %self, align 8, !dbg !1647
  %checknull = icmp eq ptr %18, null, !dbg !1647
  %19 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1647
  br i1 %19, label %panic44, label %checkok48, !dbg !1647

checkok48:                                        ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %full, i32 8, i1 false)
  call void @llvm.dbg.declare(metadata ptr %x, metadata !1648, metadata !DIExpression()), !dbg !1650
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %x, ptr align 1 %expr, i64 8, i1 false), !dbg !1652
  %20 = load i64, ptr %x, align 8, !dbg !1653
  %xor49 = xor i64 %20, 25214903917, !dbg !1654
  %and = and i64 %xor49, 281474976710655, !dbg !1654
  store i64 %and, ptr %18, align 8, !dbg !1654
  ret void, !dbg !1654

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %21 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %22 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %23 = load [2 x i64], ptr %taddr2, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 6), !dbg !1627
  unreachable, !dbg !1627

panic11:                                          ; preds = %loop.body
  store i64 %7, ptr %taddr12, align 8
  %25 = insertvalue %any undef, ptr %taddr12, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr13, align 8
  %27 = insertvalue %any undef, ptr %taddr13, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr14, align 8
  %29 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr15, align 8
  %30 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr16, align 8
  %31 = load [2 x i64], ptr %taddr16, align 8
  store %any %26, ptr %varargslots, align 8
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %28, ptr %ptradd17, align 8
  %32 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %32, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr18, align 8
  %33 = load [2 x i64], ptr %taddr18, align 8
  call void @std.core.builtin.panicf([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 9, [2 x i64] %33), !dbg !1639
  unreachable, !dbg !1639

panic22:                                          ; preds = %checkok19
  store i64 %smod, ptr %taddr23, align 8
  %34 = insertvalue %any undef, ptr %taddr23, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.14, i64 38 }, ptr %taddr24, align 8
  %36 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr25, align 8
  %37 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr26, align 8
  %38 = load [2 x i64], ptr %taddr26, align 8
  store %any %35, ptr %varargslots27, align 8
  %39 = insertvalue %"any[]" undef, ptr %varargslots27, 0
  %"$$temp28" = insertvalue %"any[]" %39, i64 1, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %40 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %36, [2 x i64] %37, [2 x i64] %38, i32 11, [2 x i64] %40), !dbg !1643
  unreachable, !dbg !1643

panic32:                                          ; preds = %checkok30
  store i64 8, ptr %taddr33, align 8
  %41 = insertvalue %any undef, ptr %taddr33, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %smod, ptr %taddr34, align 8
  %43 = insertvalue %any undef, ptr %taddr34, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.13, i64 59 }, ptr %taddr35, align 8
  %45 = load [2 x i64], ptr %taddr35, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr36, align 8
  %46 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr37, align 8
  %47 = load [2 x i64], ptr %taddr37, align 8
  store %any %42, ptr %varargslots38, align 8
  %ptradd39 = getelementptr inbounds i8, ptr %varargslots38, i64 16
  store %any %44, ptr %ptradd39, align 8
  %48 = insertvalue %"any[]" undef, ptr %varargslots38, 0
  %"$$temp40" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp40", ptr %taddr41, align 8
  %49 = load [2 x i64], ptr %taddr41, align 8
  call void @std.core.builtin.panicf([2 x i64] %45, [2 x i64] %46, [2 x i64] %47, i32 11, [2 x i64] %49), !dbg !1643
  unreachable, !dbg !1643

panic44:                                          ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr45, align 8
  %50 = load [2 x i64], ptr %taddr45, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr46, align 8
  %51 = load [2 x i64], ptr %taddr46, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr47, align 8
  %52 = load [2 x i64], ptr %taddr47, align 8
  %53 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %53([2 x i64] %50, [2 x i64] %51, [2 x i64] %52, i32 13), !dbg !1647
  unreachable, !dbg !1647
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.SimpleRandom.next_int(ptr %0) #0 !dbg !1655 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %nextseed = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !1658
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1658
  br i1 %2, label %panic, label %checkok, !dbg !1658

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1659, metadata !DIExpression()), !dbg !1660
  call void @llvm.dbg.declare(metadata ptr %nextseed, metadata !1661, metadata !DIExpression()), !dbg !1662
  %3 = load ptr, ptr %self, align 8, !dbg !1663
  %checknull = icmp eq ptr %3, null, !dbg !1663
  %4 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1663
  br i1 %4, label %panic3, label %checkok7, !dbg !1663

checkok7:                                         ; preds = %checkok
  %5 = load i64, ptr %3, align 8, !dbg !1663
  %mul = mul i64 %5, 25214903917, !dbg !1664
  %add = add i64 %mul, 11, !dbg !1664
  %and = and i64 %add, 281474976710655, !dbg !1664
  store i64 %and, ptr %nextseed, align 8, !dbg !1664
  %6 = load ptr, ptr %self, align 8, !dbg !1665
  %checknull8 = icmp eq ptr %6, null, !dbg !1665
  %7 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !1665
  br i1 %7, label %panic9, label %checkok13, !dbg !1665

checkok13:                                        ; preds = %checkok7
  %8 = load i64, ptr %nextseed, align 8, !dbg !1666
  store i64 %8, ptr %6, align 8, !dbg !1666
  %9 = load i64, ptr %nextseed, align 8, !dbg !1667
  %lshr = lshr i64 %9, 16, !dbg !1668
  %10 = freeze i64 %lshr, !dbg !1668
  %trunc = trunc i64 %10 to i32, !dbg !1668
  ret i32 %trunc, !dbg !1668

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %12 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %13 = load [2 x i64], ptr %taddr2, align 8
  %14 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %14([2 x i64] %11, [2 x i64] %12, [2 x i64] %13, i32 16), !dbg !1660
  unreachable, !dbg !1660

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %15 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr5, align 8
  %16 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 18), !dbg !1663
  unreachable, !dbg !1663

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr10, align 8
  %19 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr11, align 8
  %20 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr12, align 8
  %21 = load [2 x i64], ptr %taddr12, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 19), !dbg !1665
  unreachable, !dbg !1665
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.SimpleRandom.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1669 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1670
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1670
  br i1 %3, label %panic, label %checkok, !dbg !1670

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1671, metadata !DIExpression()), !dbg !1672
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1673, metadata !DIExpression()), !dbg !1674
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1675
  %4 = load i64, ptr %ptradd, align 8, !dbg !1675
  %lt = icmp ult i64 0, %4, !dbg !1675
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1675

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 24), !dbg !1675
  unreachable, !dbg !1675

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1677, metadata !DIExpression()), !dbg !1679
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1680
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1680
  store i64 %9, ptr %len, align 8, !dbg !1680
  br label %loop.cond, !dbg !1681

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1682
  %lt8 = icmp ult i64 0, %10, !dbg !1682
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1682

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1684, metadata !DIExpression()), !dbg !1686
  %11 = load ptr, ptr %self, align 8, !dbg !1687
  %12 = call i32 @std.math.random.SimpleRandom.next_int(ptr %11), !dbg !1688
  store i32 %12, ptr %value, align 4, !dbg !1688
  %13 = load i64, ptr %len, align 8, !dbg !1689
  %le = icmp ule i64 %13, 4, !dbg !1689
  br i1 %le, label %if.then, label %if.exit, !dbg !1689

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1690
  %add = add i64 0, %15, !dbg !1690
  %size = sub i64 %add, 0, !dbg !1690
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1690
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1690
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1692
  %19 = extractvalue %"char[]" %18, 0, !dbg !1692
  %20 = extractvalue %"char[]" %18, 1, !dbg !1693
  %gt = icmp ugt i64 0, %20, !dbg !1693
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1693
  br i1 %21, label %panic10, label %checkok18, !dbg !1693

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1692
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1692
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1692
  %24 = extractvalue %"char[]" %23, 0, !dbg !1692
  %25 = extractvalue %"char[]" %17, 0, !dbg !1692
  %26 = extractvalue %"char[]" %17, 1, !dbg !1692
  %27 = extractvalue %"char[]" %23, 1, !dbg !1692
  %neq = icmp ne i64 %27, %26, !dbg !1692
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1692
  br i1 %28, label %panic20, label %checkok30, !dbg !1692

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1692
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1692
  br label %expr_block.exit, !dbg !1694

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1695
  %34 = extractvalue %"char[]" %33, 0, !dbg !1695
  %35 = extractvalue %"char[]" %33, 1, !dbg !1695
  %gt32 = icmp sgt i64 0, %35, !dbg !1695
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1695
  br i1 %36, label %panic33, label %checkok43, !dbg !1695

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !1695
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1695
  br i1 %37, label %panic45, label %checkok55, !dbg !1695

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1695
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !1695
  %40 = extractvalue %"char[]" %39, 0, !dbg !1695
  %41 = extractvalue %"char[]" %32, 0, !dbg !1695
  %42 = extractvalue %"char[]" %32, 1, !dbg !1695
  %43 = extractvalue %"char[]" %39, 1, !dbg !1695
  %neq56 = icmp ne i64 %43, %42, !dbg !1695
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1695
  br i1 %44, label %panic57, label %checkok67, !dbg !1695

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1695
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1695
  %46 = load i64, ptr %len, align 8, !dbg !1696
  %sub = sub i64 %46, 4, !dbg !1696
  store i64 %sub, ptr %len, align 8, !dbg !1696
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1697
  %48 = extractvalue %"char[]" %47, 0, !dbg !1697
  %49 = extractvalue %"char[]" %47, 1, !dbg !1698
  %gt68 = icmp ugt i64 4, %49, !dbg !1698
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1698
  br i1 %50, label %panic69, label %checkok79, !dbg !1698

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !1697
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !1697
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1697
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1697
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1697
  br label %loop.cond, !dbg !1697

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.85, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1699
  store %"char[]" { ptr @.str.86, i64 21 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.87, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 26, [2 x i64] %56), !dbg !1702
  unreachable, !dbg !1703

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1703

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 26), !dbg !1672
  unreachable, !dbg !1672

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1692
  unreachable, !dbg !1692

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1692
  unreachable, !dbg !1692

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1695
  unreachable, !dbg !1695

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1695
  unreachable, !dbg !1695

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1695
  unreachable, !dbg !1695

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1697
  unreachable, !dbg !1697
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.SimpleRandom.next_int128(ptr %0) #0 !dbg !1704 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1707
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1707
  br i1 %2, label %panic, label %checkok, !dbg !1707

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1708, metadata !DIExpression()), !dbg !1709
  %3 = load ptr, ptr %self, align 8, !dbg !1710
  %4 = call i64 @std.math.random.SimpleRandom.next_long(ptr %3), !dbg !1712
  %zext = zext i64 %4 to i128, !dbg !1712
  %shl = shl i128 %zext, 64, !dbg !1712
  %5 = freeze i128 %shl, !dbg !1712
  %6 = load ptr, ptr %self, align 8, !dbg !1710
  %7 = call i64 @std.math.random.SimpleRandom.next_long(ptr %6), !dbg !1713
  %zext3 = zext i64 %7 to i128, !dbg !1713
  %add = add i128 %5, %zext3, !dbg !1712
  ret i128 %add, !dbg !1712

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 27), !dbg !1709
  unreachable, !dbg !1709
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.SimpleRandom.next_long(ptr %0) #0 !dbg !1714 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1717
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1717
  br i1 %2, label %panic, label %checkok, !dbg !1717

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1718, metadata !DIExpression()), !dbg !1719
  %3 = load ptr, ptr %self, align 8, !dbg !1720
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1722
  %zext = zext i32 %4 to i64, !dbg !1722
  %shl = shl i64 %zext, 32, !dbg !1722
  %5 = freeze i64 %shl, !dbg !1722
  %6 = load ptr, ptr %self, align 8, !dbg !1720
  %7 = call i32 @std.math.random.SimpleRandom.next_int(ptr %6), !dbg !1723
  %zext3 = zext i32 %7 to i64, !dbg !1723
  %add = add i64 %5, %zext3, !dbg !1722
  ret i64 %add, !dbg !1722

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 28), !dbg !1719
  unreachable, !dbg !1719
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.SimpleRandom.next_short(ptr %0) #0 !dbg !1724 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1727
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1727
  br i1 %2, label %panic, label %checkok, !dbg !1727

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1728, metadata !DIExpression()), !dbg !1729
  %3 = load ptr, ptr %self, align 8, !dbg !1730
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1731
  %trunc = trunc i32 %4 to i16, !dbg !1731
  ret i16 %trunc, !dbg !1731

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 29), !dbg !1729
  unreachable, !dbg !1729
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.SimpleRandom.next_byte(ptr %0) #0 !dbg !1732 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1735
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1735
  br i1 %2, label %panic, label %checkok, !dbg !1735

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1736, metadata !DIExpression()), !dbg !1737
  %3 = load ptr, ptr %self, align 8, !dbg !1738
  %4 = call i32 @std.math.random.SimpleRandom.next_int(ptr %3), !dbg !1739
  %trunc = trunc i32 %4 to i8, !dbg !1739
  ret i8 %trunc, !dbg !1739

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.84, i64 21 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 30), !dbg !1737
  unreachable, !dbg !1737
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws128Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1740 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i128], align 16
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %expr = alloca [4 x i128], align 16
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1750
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1750
  br i1 %3, label %panic, label %checkok, !dbg !1750

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1751, metadata !DIExpression()), !dbg !1752
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1753, metadata !DIExpression()), !dbg !1754
  %4 = load ptr, ptr %self, align 8, !dbg !1755
  %checknull = icmp eq ptr %4, null, !dbg !1755
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1755
  br i1 %5, label %panic3, label %checkok7, !dbg !1755

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1756, metadata !DIExpression()), !dbg !1758
  call void @llvm.memset.p0.i64(ptr align 16 %return_value, i8 0, i64 64, i1 false), !dbg !1758
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 64, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1760
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %expr, ptr align 16 %return_value, i32 64, i1 false)
  %checknull11 = icmp eq ptr %expr, null, !dbg !1761
  %11 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !1761
  br i1 %11, label %panic12, label %checkok16, !dbg !1761

checkok16:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 16 %4, ptr align 16 %expr, i32 64, i1 false), !dbg !1764
  ret void, !dbg !1764

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 17), !dbg !1752
  unreachable, !dbg !1752

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 19), !dbg !1755
  unreachable, !dbg !1755

panic12:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr13, align 8
  %20 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr14, align 8
  %21 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr15, align 8
  %22 = load [2 x i64], ptr %taddr15, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 213), !dbg !1764
  unreachable, !dbg !1764
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Msws128Random.next_int128(ptr %0) #0 !dbg !1765 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i128, align 16
  %self3 = alloca i128, align 16
  %shift = alloca i128, align 16
  %s1 = alloca i128, align 16
  %self15 = alloca i128, align 16
  %shift16 = alloca i128, align 16
  %1 = icmp eq ptr %0, null, !dbg !1768
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1768
  br i1 %2, label %panic, label %checkok, !dbg !1768

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1769, metadata !DIExpression()), !dbg !1770
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1771, metadata !DIExpression()), !dbg !1772
  %3 = load ptr, ptr %self, align 8, !dbg !1773
  %4 = load i128, ptr %3, align 16, !dbg !1773
  store i128 %4, ptr %s0, align 16, !dbg !1773
  %5 = load ptr, ptr %self, align 8, !dbg !1774
  %6 = load ptr, ptr %self, align 8, !dbg !1775
  %7 = load i128, ptr %6, align 16, !dbg !1775
  %8 = load ptr, ptr %self, align 8, !dbg !1776
  %9 = load i128, ptr %8, align 16, !dbg !1776
  %mul = mul i128 %7, %9, !dbg !1775
  %10 = load ptr, ptr %self, align 8, !dbg !1777
  %ptradd = getelementptr inbounds i8, ptr %10, i64 32, !dbg !1777
  %11 = load i128, ptr %ptradd, align 16, !dbg !1777
  %add = add i128 %mul, %11, !dbg !1775
  store i128 %add, ptr %5, align 16, !dbg !1775
  %12 = load ptr, ptr %self, align 8, !dbg !1778
  %13 = load ptr, ptr %self, align 8, !dbg !1779
  %14 = load i128, ptr %13, align 16
  store i128 %14, ptr %self3, align 16
  store i128 64, ptr %shift, align 16
  %15 = load i128, ptr %self3, align 16, !dbg !1780
  %16 = load i128, ptr %self3, align 16, !dbg !1782
  %17 = load i128, ptr %shift, align 16, !dbg !1783
  %18 = call i128 @llvm.fshr.i128(i128 %15, i128 %16, i128 %17), !dbg !1783
  store i128 %18, ptr %12, align 16, !dbg !1783
  %19 = load ptr, ptr %self, align 8, !dbg !1784
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 32, !dbg !1784
  %20 = load i128, ptr %ptradd4, align 16, !dbg !1784
  %add5 = add i128 %20, -129976298391535590297638237547755878347, !dbg !1784
  store i128 %add5, ptr %ptradd4, align 16, !dbg !1784
  %21 = load ptr, ptr %self, align 8, !dbg !1785
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 16, !dbg !1785
  %22 = load ptr, ptr %self, align 8, !dbg !1786
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 16, !dbg !1786
  %23 = load i128, ptr %ptradd7, align 16, !dbg !1786
  %24 = load ptr, ptr %self, align 8, !dbg !1787
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 16, !dbg !1787
  %25 = load i128, ptr %ptradd8, align 16, !dbg !1787
  %mul9 = mul i128 %23, %25, !dbg !1786
  %26 = load ptr, ptr %self, align 8, !dbg !1788
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 48, !dbg !1788
  %27 = load i128, ptr %ptradd10, align 16, !dbg !1788
  %add11 = add i128 %mul9, %27, !dbg !1786
  store i128 %add11, ptr %ptradd6, align 16, !dbg !1786
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1789, metadata !DIExpression()), !dbg !1790
  %28 = load ptr, ptr %self, align 8, !dbg !1791
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 16, !dbg !1791
  %29 = load i128, ptr %ptradd12, align 16, !dbg !1791
  store i128 %29, ptr %s1, align 16, !dbg !1791
  %30 = load ptr, ptr %self, align 8, !dbg !1792
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 16, !dbg !1792
  %31 = load ptr, ptr %self, align 8, !dbg !1793
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 16, !dbg !1793
  %32 = load i128, ptr %ptradd14, align 16
  store i128 %32, ptr %self15, align 16
  store i128 64, ptr %shift16, align 16
  %33 = load i128, ptr %self15, align 16, !dbg !1794
  %34 = load i128, ptr %self15, align 16, !dbg !1796
  %35 = load i128, ptr %shift16, align 16, !dbg !1797
  %36 = call i128 @llvm.fshr.i128(i128 %33, i128 %34, i128 %35), !dbg !1797
  store i128 %36, ptr %ptradd13, align 16, !dbg !1797
  %37 = load ptr, ptr %self, align 8, !dbg !1798
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 48, !dbg !1798
  %38 = load i128, ptr %ptradd17, align 16, !dbg !1798
  %sub = sub i128 %38, -129976298391535590297638237547755878347, !dbg !1798
  store i128 %sub, ptr %ptradd17, align 16, !dbg !1798
  %39 = load i128, ptr %s0, align 16, !dbg !1799
  %40 = load i128, ptr %s1, align 16, !dbg !1800
  %add18 = add i128 %39, %40, !dbg !1799
  ret i128 %add18, !dbg !1799

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %41 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %42 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %43 = load [2 x i64], ptr %taddr2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 23), !dbg !1770
  unreachable, !dbg !1770
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws128Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1801 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i128, align 16
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1802
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1802
  br i1 %3, label %panic, label %checkok, !dbg !1802

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1803, metadata !DIExpression()), !dbg !1804
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1805, metadata !DIExpression()), !dbg !1806
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1807
  %4 = load i64, ptr %ptradd, align 8, !dbg !1807
  %lt = icmp ult i64 0, %4, !dbg !1807
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1807

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 39), !dbg !1807
  unreachable, !dbg !1807

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1809, metadata !DIExpression()), !dbg !1811
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1812
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1812
  store i64 %9, ptr %len, align 8, !dbg !1812
  br label %loop.cond, !dbg !1813

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1814
  %lt8 = icmp ult i64 0, %10, !dbg !1814
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1814

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1816, metadata !DIExpression()), !dbg !1818
  %11 = load ptr, ptr %self, align 8, !dbg !1819
  %12 = call i128 @std.math.random.Msws128Random.next_int128(ptr %11), !dbg !1820
  store i128 %12, ptr %value, align 16, !dbg !1820
  %13 = load i64, ptr %len, align 8, !dbg !1821
  %le = icmp ule i64 %13, 16, !dbg !1821
  br i1 %le, label %if.then, label %if.exit, !dbg !1821

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1822
  %add = add i64 0, %15, !dbg !1822
  %size = sub i64 %add, 0, !dbg !1822
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1822
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1822
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1824
  %19 = extractvalue %"char[]" %18, 0, !dbg !1824
  %20 = extractvalue %"char[]" %18, 1, !dbg !1825
  %gt = icmp ugt i64 0, %20, !dbg !1825
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1825
  br i1 %21, label %panic10, label %checkok18, !dbg !1825

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1824
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1824
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1824
  %24 = extractvalue %"char[]" %23, 0, !dbg !1824
  %25 = extractvalue %"char[]" %17, 0, !dbg !1824
  %26 = extractvalue %"char[]" %17, 1, !dbg !1824
  %27 = extractvalue %"char[]" %23, 1, !dbg !1824
  %neq = icmp ne i64 %27, %26, !dbg !1824
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1824
  br i1 %28, label %panic20, label %checkok30, !dbg !1824

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1824
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1824
  br label %expr_block.exit, !dbg !1826

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 16, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1827
  %34 = extractvalue %"char[]" %33, 0, !dbg !1827
  %35 = extractvalue %"char[]" %33, 1, !dbg !1827
  %gt32 = icmp sgt i64 0, %35, !dbg !1827
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1827
  br i1 %36, label %panic33, label %checkok43, !dbg !1827

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 16, !dbg !1827
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1827
  br i1 %37, label %panic45, label %checkok55, !dbg !1827

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1827
  %39 = insertvalue %"char[]" %38, i64 16, 1, !dbg !1827
  %40 = extractvalue %"char[]" %39, 0, !dbg !1827
  %41 = extractvalue %"char[]" %32, 0, !dbg !1827
  %42 = extractvalue %"char[]" %32, 1, !dbg !1827
  %43 = extractvalue %"char[]" %39, 1, !dbg !1827
  %neq56 = icmp ne i64 %43, %42, !dbg !1827
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1827
  br i1 %44, label %panic57, label %checkok67, !dbg !1827

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1827
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1827
  %46 = load i64, ptr %len, align 8, !dbg !1828
  %sub = sub i64 %46, 16, !dbg !1828
  store i64 %sub, ptr %len, align 8, !dbg !1828
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1829
  %48 = extractvalue %"char[]" %47, 0, !dbg !1829
  %49 = extractvalue %"char[]" %47, 1, !dbg !1830
  %gt68 = icmp ugt i64 16, %49, !dbg !1830
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1830
  br i1 %50, label %panic69, label %checkok79, !dbg !1830

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 16, !dbg !1829
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 16, !dbg !1829
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1829
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1829
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1829
  br label %loop.cond, !dbg !1829

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.98, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1831
  store %"char[]" { ptr @.str.99, i64 12 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.100, i64 24 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 41, [2 x i64] %56), !dbg !1834
  unreachable, !dbg !1835

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1835

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 41), !dbg !1804
  unreachable, !dbg !1804

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1824
  unreachable, !dbg !1824

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1824
  unreachable, !dbg !1824

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1827
  unreachable, !dbg !1827

panic45:                                          ; preds = %checkok43
  store i64 15, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1827
  unreachable, !dbg !1827

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1827
  unreachable, !dbg !1827

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 16, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1829
  unreachable, !dbg !1829
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Msws128Random.next_long(ptr %0) #0 !dbg !1836 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1839
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1839
  br i1 %2, label %panic, label %checkok, !dbg !1839

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1840, metadata !DIExpression()), !dbg !1841
  %3 = load ptr, ptr %self, align 8, !dbg !1842
  %4 = call i128 @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1843
  %trunc = trunc i128 %4 to i64, !dbg !1843
  ret i64 %trunc, !dbg !1843

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 42), !dbg !1841
  unreachable, !dbg !1841
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Msws128Random.next_int(ptr %0) #0 !dbg !1844 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1847
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1847
  br i1 %2, label %panic, label %checkok, !dbg !1847

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1848, metadata !DIExpression()), !dbg !1849
  %3 = load ptr, ptr %self, align 8, !dbg !1850
  %4 = call i128 @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1851
  %trunc = trunc i128 %4 to i32, !dbg !1851
  ret i32 %trunc, !dbg !1851

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 43), !dbg !1849
  unreachable, !dbg !1849
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Msws128Random.next_short(ptr %0) #0 !dbg !1852 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1855
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1855
  br i1 %2, label %panic, label %checkok, !dbg !1855

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1856, metadata !DIExpression()), !dbg !1857
  %3 = load ptr, ptr %self, align 8, !dbg !1858
  %4 = call i128 @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1859
  %trunc = trunc i128 %4 to i16, !dbg !1859
  ret i16 %trunc, !dbg !1859

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 44), !dbg !1857
  unreachable, !dbg !1857
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Msws128Random.next_byte(ptr %0) #0 !dbg !1860 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1863
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1863
  br i1 %2, label %panic, label %checkok, !dbg !1863

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1864, metadata !DIExpression()), !dbg !1865
  %3 = load ptr, ptr %self, align 8, !dbg !1866
  %4 = call i128 @std.math.random.Msws128Random.next_int128(ptr %3), !dbg !1867
  %trunc = trunc i128 %4 to i8, !dbg !1867
  ret i8 %trunc, !dbg !1867

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 45), !dbg !1865
  unreachable, !dbg !1865
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws64Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1868 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i64], align 8
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %expr = alloca [4 x i64], align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1878
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1878
  br i1 %3, label %panic, label %checkok, !dbg !1878

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1879, metadata !DIExpression()), !dbg !1880
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !1881, metadata !DIExpression()), !dbg !1882
  %4 = load ptr, ptr %self, align 8, !dbg !1883
  %checknull = icmp eq ptr %4, null, !dbg !1883
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1883
  br i1 %5, label %panic3, label %checkok7, !dbg !1883

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !1884, metadata !DIExpression()), !dbg !1886
  call void @llvm.memset.p0.i64(ptr align 8 %return_value, i8 0, i64 32, i1 false), !dbg !1886
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 32, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !1888
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %expr, ptr align 8 %return_value, i32 32, i1 false)
  %checknull11 = icmp eq ptr %expr, null, !dbg !1889
  %11 = call i1 @llvm.expect.i1(i1 %checknull11, i1 false), !dbg !1889
  br i1 %11, label %panic12, label %checkok16, !dbg !1889

checkok16:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %4, ptr align 8 %expr, i32 32, i1 false), !dbg !1892
  ret void, !dbg !1892

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 55), !dbg !1880
  unreachable, !dbg !1880

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 57), !dbg !1883
  unreachable, !dbg !1883

panic12:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr13, align 8
  %20 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr14, align 8
  %21 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr15, align 8
  %22 = load [2 x i64], ptr %taddr15, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 213), !dbg !1892
  unreachable, !dbg !1892
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Msws64Random.next_long(ptr %0) #0 !dbg !1893 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i64, align 8
  %self3 = alloca i64, align 8
  %shift = alloca i64, align 8
  %s1 = alloca i64, align 8
  %self15 = alloca i64, align 8
  %shift16 = alloca i64, align 8
  %1 = icmp eq ptr %0, null, !dbg !1896
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1896
  br i1 %2, label %panic, label %checkok, !dbg !1896

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1897, metadata !DIExpression()), !dbg !1898
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !1899, metadata !DIExpression()), !dbg !1900
  %3 = load ptr, ptr %self, align 8, !dbg !1901
  %4 = load i64, ptr %3, align 8, !dbg !1901
  store i64 %4, ptr %s0, align 8, !dbg !1901
  %5 = load ptr, ptr %self, align 8, !dbg !1902
  %6 = load ptr, ptr %self, align 8, !dbg !1903
  %7 = load i64, ptr %6, align 8, !dbg !1903
  %8 = load ptr, ptr %self, align 8, !dbg !1904
  %9 = load i64, ptr %8, align 8, !dbg !1904
  %mul = mul i64 %7, %9, !dbg !1903
  %10 = load ptr, ptr %self, align 8, !dbg !1905
  %ptradd = getelementptr inbounds i8, ptr %10, i64 16, !dbg !1905
  %11 = load i64, ptr %ptradd, align 8, !dbg !1905
  %add = add i64 %mul, %11, !dbg !1903
  store i64 %add, ptr %5, align 8, !dbg !1903
  %12 = load ptr, ptr %self, align 8, !dbg !1906
  %13 = load ptr, ptr %self, align 8, !dbg !1907
  %14 = load i64, ptr %13, align 8
  store i64 %14, ptr %self3, align 8
  store i64 32, ptr %shift, align 8
  %15 = load i64, ptr %self3, align 8, !dbg !1908
  %16 = load i64, ptr %self3, align 8, !dbg !1910
  %17 = load i64, ptr %shift, align 8, !dbg !1911
  %18 = call i64 @llvm.fshr.i64(i64 %15, i64 %16, i64 %17), !dbg !1911
  store i64 %18, ptr %12, align 8, !dbg !1911
  %19 = load ptr, ptr %self, align 8, !dbg !1912
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 16, !dbg !1912
  %20 = load i64, ptr %ptradd4, align 8, !dbg !1912
  %add5 = add i64 %20, -7046029254386353131, !dbg !1912
  store i64 %add5, ptr %ptradd4, align 8, !dbg !1912
  %21 = load ptr, ptr %self, align 8, !dbg !1913
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 8, !dbg !1913
  %22 = load ptr, ptr %self, align 8, !dbg !1914
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 8, !dbg !1914
  %23 = load i64, ptr %ptradd7, align 8, !dbg !1914
  %24 = load ptr, ptr %self, align 8, !dbg !1915
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 8, !dbg !1915
  %25 = load i64, ptr %ptradd8, align 8, !dbg !1915
  %mul9 = mul i64 %23, %25, !dbg !1914
  %26 = load ptr, ptr %self, align 8, !dbg !1916
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 24, !dbg !1916
  %27 = load i64, ptr %ptradd10, align 8, !dbg !1916
  %add11 = add i64 %mul9, %27, !dbg !1914
  store i64 %add11, ptr %ptradd6, align 8, !dbg !1914
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !1917, metadata !DIExpression()), !dbg !1918
  %28 = load ptr, ptr %self, align 8, !dbg !1919
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 8, !dbg !1919
  %29 = load i64, ptr %ptradd12, align 8, !dbg !1919
  store i64 %29, ptr %s1, align 8, !dbg !1919
  %30 = load ptr, ptr %self, align 8, !dbg !1920
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 8, !dbg !1920
  %31 = load ptr, ptr %self, align 8, !dbg !1921
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 8, !dbg !1921
  %32 = load i64, ptr %ptradd14, align 8
  store i64 %32, ptr %self15, align 8
  store i64 32, ptr %shift16, align 8
  %33 = load i64, ptr %self15, align 8, !dbg !1922
  %34 = load i64, ptr %self15, align 8, !dbg !1924
  %35 = load i64, ptr %shift16, align 8, !dbg !1925
  %36 = call i64 @llvm.fshr.i64(i64 %33, i64 %34, i64 %35), !dbg !1925
  store i64 %36, ptr %ptradd13, align 8, !dbg !1925
  %37 = load ptr, ptr %self, align 8, !dbg !1926
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 24, !dbg !1926
  %38 = load i64, ptr %ptradd17, align 8, !dbg !1926
  %sub = sub i64 %38, -7046029254386353131, !dbg !1926
  store i64 %sub, ptr %ptradd17, align 8, !dbg !1926
  %39 = load i64, ptr %s0, align 8, !dbg !1927
  %40 = load i64, ptr %s1, align 8, !dbg !1928
  %add18 = add i64 %39, %40, !dbg !1927
  ret i64 %add18, !dbg !1927

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %41 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %42 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %43 = load [2 x i64], ptr %taddr2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 60), !dbg !1898
  unreachable, !dbg !1898
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws64Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !1929 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !1930
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !1930
  br i1 %3, label %panic, label %checkok, !dbg !1930

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1931, metadata !DIExpression()), !dbg !1932
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !1933, metadata !DIExpression()), !dbg !1934
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !1935
  %4 = load i64, ptr %ptradd, align 8, !dbg !1935
  %lt = icmp ult i64 0, %4, !dbg !1935
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !1935

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 76), !dbg !1935
  unreachable, !dbg !1935

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1937, metadata !DIExpression()), !dbg !1939
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !1940
  %9 = load i64, ptr %ptradd7, align 8, !dbg !1940
  store i64 %9, ptr %len, align 8, !dbg !1940
  br label %loop.cond, !dbg !1941

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !1942
  %lt8 = icmp ult i64 0, %10, !dbg !1942
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !1942

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1944, metadata !DIExpression()), !dbg !1946
  %11 = load ptr, ptr %self, align 8, !dbg !1947
  %12 = call i64 @std.math.random.Msws64Random.next_long(ptr %11), !dbg !1948
  store i64 %12, ptr %value, align 8, !dbg !1948
  %13 = load i64, ptr %len, align 8, !dbg !1949
  %le = icmp ule i64 %13, 8, !dbg !1949
  br i1 %le, label %if.then, label %if.exit, !dbg !1949

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !1950
  %add = add i64 0, %15, !dbg !1950
  %size = sub i64 %add, 0, !dbg !1950
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !1950
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !1950
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !1952
  %19 = extractvalue %"char[]" %18, 0, !dbg !1952
  %20 = extractvalue %"char[]" %18, 1, !dbg !1953
  %gt = icmp ugt i64 0, %20, !dbg !1953
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !1953
  br i1 %21, label %panic10, label %checkok18, !dbg !1953

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !1952
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !1952
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !1952
  %24 = extractvalue %"char[]" %23, 0, !dbg !1952
  %25 = extractvalue %"char[]" %17, 0, !dbg !1952
  %26 = extractvalue %"char[]" %17, 1, !dbg !1952
  %27 = extractvalue %"char[]" %23, 1, !dbg !1952
  %neq = icmp ne i64 %27, %26, !dbg !1952
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !1952
  br i1 %28, label %panic20, label %checkok30, !dbg !1952

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !1952
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !1952
  br label %expr_block.exit, !dbg !1954

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 8, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !1955
  %34 = extractvalue %"char[]" %33, 0, !dbg !1955
  %35 = extractvalue %"char[]" %33, 1, !dbg !1955
  %gt32 = icmp sgt i64 0, %35, !dbg !1955
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !1955
  br i1 %36, label %panic33, label %checkok43, !dbg !1955

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 8, !dbg !1955
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !1955
  br i1 %37, label %panic45, label %checkok55, !dbg !1955

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !1955
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !1955
  %40 = extractvalue %"char[]" %39, 0, !dbg !1955
  %41 = extractvalue %"char[]" %32, 0, !dbg !1955
  %42 = extractvalue %"char[]" %32, 1, !dbg !1955
  %43 = extractvalue %"char[]" %39, 1, !dbg !1955
  %neq56 = icmp ne i64 %43, %42, !dbg !1955
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !1955
  br i1 %44, label %panic57, label %checkok67, !dbg !1955

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !1955
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !1955
  %46 = load i64, ptr %len, align 8, !dbg !1956
  %sub = sub i64 %46, 8, !dbg !1956
  store i64 %sub, ptr %len, align 8, !dbg !1956
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !1957
  %48 = extractvalue %"char[]" %47, 0, !dbg !1957
  %49 = extractvalue %"char[]" %47, 1, !dbg !1958
  %gt68 = icmp ugt i64 8, %49, !dbg !1958
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !1958
  br i1 %50, label %panic69, label %checkok79, !dbg !1958

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 8, !dbg !1957
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !1957
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !1957
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !1957
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !1957
  br label %loop.cond, !dbg !1957

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.101, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !1959
  store %"char[]" { ptr @.str.102, i64 12 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.103, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 78, [2 x i64] %56), !dbg !1962
  unreachable, !dbg !1963

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !1963

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 78), !dbg !1932
  unreachable, !dbg !1932

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !1952
  unreachable, !dbg !1952

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !1952
  unreachable, !dbg !1952

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !1955
  unreachable, !dbg !1955

panic45:                                          ; preds = %checkok43
  store i64 7, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !1955
  unreachable, !dbg !1955

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !1955
  unreachable, !dbg !1955

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !1957
  unreachable, !dbg !1957
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Msws64Random.next_int128(ptr %0) #0 !dbg !1964 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1967
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1967
  br i1 %2, label %panic, label %checkok, !dbg !1967

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1968, metadata !DIExpression()), !dbg !1969
  %3 = load ptr, ptr %self, align 8, !dbg !1970
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1972
  %zext = zext i64 %4 to i128, !dbg !1972
  %shl = shl i128 %zext, 64, !dbg !1972
  %5 = freeze i128 %shl, !dbg !1972
  %6 = load ptr, ptr %self, align 8, !dbg !1970
  %7 = call i64 @std.math.random.Msws64Random.next_long(ptr %6), !dbg !1973
  %zext3 = zext i64 %7 to i128, !dbg !1973
  %add = add i128 %5, %zext3, !dbg !1972
  ret i128 %add, !dbg !1972

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 79), !dbg !1969
  unreachable, !dbg !1969
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Msws64Random.next_int(ptr %0) #0 !dbg !1974 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1977
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1977
  br i1 %2, label %panic, label %checkok, !dbg !1977

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1978, metadata !DIExpression()), !dbg !1979
  %3 = load ptr, ptr %self, align 8, !dbg !1980
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1981
  %trunc = trunc i64 %4 to i32, !dbg !1981
  ret i32 %trunc, !dbg !1981

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 80), !dbg !1979
  unreachable, !dbg !1979
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Msws64Random.next_short(ptr %0) #0 !dbg !1982 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1985
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1985
  br i1 %2, label %panic, label %checkok, !dbg !1985

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1986, metadata !DIExpression()), !dbg !1987
  %3 = load ptr, ptr %self, align 8, !dbg !1988
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1989
  %trunc = trunc i64 %4 to i16, !dbg !1989
  ret i16 %trunc, !dbg !1989

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 81), !dbg !1987
  unreachable, !dbg !1987
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Msws64Random.next_byte(ptr %0) #0 !dbg !1990 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !1993
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !1993
  br i1 %2, label %panic, label %checkok, !dbg !1993

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !1994, metadata !DIExpression()), !dbg !1995
  %3 = load ptr, ptr %self, align 8, !dbg !1996
  %4 = call i64 @std.math.random.Msws64Random.next_long(ptr %3), !dbg !1997
  %trunc = trunc i64 %4 to i8, !dbg !1997
  ret i8 %trunc, !dbg !1997

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 82), !dbg !1995
  unreachable, !dbg !1995
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws32Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !1998 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i32], align 4
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %expr = alloca [4 x i32], align 4
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2008
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2008
  br i1 %3, label %panic, label %checkok, !dbg !2008

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2009, metadata !DIExpression()), !dbg !2010
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2011, metadata !DIExpression()), !dbg !2012
  %4 = load ptr, ptr %self, align 8, !dbg !2013
  %checknull = icmp eq ptr %4, null, !dbg !2013
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2013
  br i1 %5, label %panic3, label %checkok7, !dbg !2013

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2014, metadata !DIExpression()), !dbg !2016
  store i32 0, ptr %return_value, align 4, !dbg !2016
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2016
  store i32 0, ptr %ptradd, align 4, !dbg !2016
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 8, !dbg !2016
  store i32 0, ptr %ptradd9, align 4, !dbg !2016
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 12, !dbg !2016
  store i32 0, ptr %ptradd10, align 4, !dbg !2016
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 16, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2018
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %expr, ptr align 4 %return_value, i32 16, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2019
  %11 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2019
  br i1 %11, label %panic14, label %checkok18, !dbg !2019

checkok18:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 4 %4, ptr align 4 %expr, i32 16, i1 false), !dbg !2022
  ret void, !dbg !2022

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 91), !dbg !2010
  unreachable, !dbg !2010

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 93), !dbg !2013
  unreachable, !dbg !2013

panic14:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr16, align 8
  %21 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr17, align 8
  %22 = load [2 x i64], ptr %taddr17, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 213), !dbg !2022
  unreachable, !dbg !2022
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Msws32Random.next_int(ptr %0) #0 !dbg !2023 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i32, align 4
  %self3 = alloca i32, align 4
  %shift = alloca i32, align 4
  %s1 = alloca i32, align 4
  %self15 = alloca i32, align 4
  %shift16 = alloca i32, align 4
  %1 = icmp eq ptr %0, null, !dbg !2026
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2026
  br i1 %2, label %panic, label %checkok, !dbg !2026

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2027, metadata !DIExpression()), !dbg !2028
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !2029, metadata !DIExpression()), !dbg !2030
  %3 = load ptr, ptr %self, align 8, !dbg !2031
  %4 = load i32, ptr %3, align 4, !dbg !2031
  store i32 %4, ptr %s0, align 4, !dbg !2031
  %5 = load ptr, ptr %self, align 8, !dbg !2032
  %6 = load ptr, ptr %self, align 8, !dbg !2033
  %7 = load i32, ptr %6, align 4, !dbg !2033
  %8 = load ptr, ptr %self, align 8, !dbg !2034
  %9 = load i32, ptr %8, align 4, !dbg !2034
  %mul = mul i32 %7, %9, !dbg !2033
  %10 = load ptr, ptr %self, align 8, !dbg !2035
  %ptradd = getelementptr inbounds i8, ptr %10, i64 8, !dbg !2035
  %11 = load i32, ptr %ptradd, align 4, !dbg !2035
  %add = add i32 %mul, %11, !dbg !2033
  store i32 %add, ptr %5, align 4, !dbg !2033
  %12 = load ptr, ptr %self, align 8, !dbg !2036
  %13 = load ptr, ptr %self, align 8, !dbg !2037
  %14 = load i32, ptr %13, align 4
  store i32 %14, ptr %self3, align 4
  store i32 16, ptr %shift, align 4
  %15 = load i32, ptr %self3, align 4, !dbg !2038
  %16 = load i32, ptr %self3, align 4, !dbg !2040
  %17 = load i32, ptr %shift, align 4, !dbg !2041
  %18 = call i32 @llvm.fshr.i32(i32 %15, i32 %16, i32 %17), !dbg !2041
  store i32 %18, ptr %12, align 4, !dbg !2041
  %19 = load ptr, ptr %self, align 8, !dbg !2042
  %ptradd4 = getelementptr inbounds i8, ptr %19, i64 8, !dbg !2042
  %20 = load i32, ptr %ptradd4, align 4, !dbg !2042
  %add5 = add i32 %20, -1640531527, !dbg !2042
  store i32 %add5, ptr %ptradd4, align 4, !dbg !2042
  %21 = load ptr, ptr %self, align 8, !dbg !2043
  %ptradd6 = getelementptr inbounds i8, ptr %21, i64 4, !dbg !2043
  %22 = load ptr, ptr %self, align 8, !dbg !2044
  %ptradd7 = getelementptr inbounds i8, ptr %22, i64 4, !dbg !2044
  %23 = load i32, ptr %ptradd7, align 4, !dbg !2044
  %24 = load ptr, ptr %self, align 8, !dbg !2045
  %ptradd8 = getelementptr inbounds i8, ptr %24, i64 4, !dbg !2045
  %25 = load i32, ptr %ptradd8, align 4, !dbg !2045
  %mul9 = mul i32 %23, %25, !dbg !2044
  %26 = load ptr, ptr %self, align 8, !dbg !2046
  %ptradd10 = getelementptr inbounds i8, ptr %26, i64 12, !dbg !2046
  %27 = load i32, ptr %ptradd10, align 4, !dbg !2046
  %add11 = add i32 %mul9, %27, !dbg !2044
  store i32 %add11, ptr %ptradd6, align 4, !dbg !2044
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !2047, metadata !DIExpression()), !dbg !2048
  %28 = load ptr, ptr %self, align 8, !dbg !2049
  %ptradd12 = getelementptr inbounds i8, ptr %28, i64 4, !dbg !2049
  %29 = load i32, ptr %ptradd12, align 4, !dbg !2049
  store i32 %29, ptr %s1, align 4, !dbg !2049
  %30 = load ptr, ptr %self, align 8, !dbg !2050
  %ptradd13 = getelementptr inbounds i8, ptr %30, i64 4, !dbg !2050
  %31 = load ptr, ptr %self, align 8, !dbg !2051
  %ptradd14 = getelementptr inbounds i8, ptr %31, i64 4, !dbg !2051
  %32 = load i32, ptr %ptradd14, align 4
  store i32 %32, ptr %self15, align 4
  store i32 16, ptr %shift16, align 4
  %33 = load i32, ptr %self15, align 4, !dbg !2052
  %34 = load i32, ptr %self15, align 4, !dbg !2054
  %35 = load i32, ptr %shift16, align 4, !dbg !2055
  %36 = call i32 @llvm.fshr.i32(i32 %33, i32 %34, i32 %35), !dbg !2055
  store i32 %36, ptr %ptradd13, align 4, !dbg !2055
  %37 = load ptr, ptr %self, align 8, !dbg !2056
  %ptradd17 = getelementptr inbounds i8, ptr %37, i64 12, !dbg !2056
  %38 = load i32, ptr %ptradd17, align 4, !dbg !2056
  %sub = sub i32 %38, -1640531527, !dbg !2056
  store i32 %sub, ptr %ptradd17, align 4, !dbg !2056
  %39 = load i32, ptr %s0, align 4, !dbg !2057
  %40 = load i32, ptr %s1, align 4, !dbg !2058
  %add18 = add i32 %39, %40, !dbg !2057
  ret i32 %add18, !dbg !2057

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %41 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %42 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %43 = load [2 x i64], ptr %taddr2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 97), !dbg !2028
  unreachable, !dbg !2028
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws32Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2059 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2060
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2060
  br i1 %3, label %panic, label %checkok, !dbg !2060

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2061, metadata !DIExpression()), !dbg !2062
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2063, metadata !DIExpression()), !dbg !2064
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2065
  %4 = load i64, ptr %ptradd, align 8, !dbg !2065
  %lt = icmp ult i64 0, %4, !dbg !2065
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2065

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 113), !dbg !2065
  unreachable, !dbg !2065

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2067, metadata !DIExpression()), !dbg !2069
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2070
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2070
  store i64 %9, ptr %len, align 8, !dbg !2070
  br label %loop.cond, !dbg !2071

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2072
  %lt8 = icmp ult i64 0, %10, !dbg !2072
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2072

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2074, metadata !DIExpression()), !dbg !2076
  %11 = load ptr, ptr %self, align 8, !dbg !2077
  %12 = call i32 @std.math.random.Msws32Random.next_int(ptr %11), !dbg !2078
  store i32 %12, ptr %value, align 4, !dbg !2078
  %13 = load i64, ptr %len, align 8, !dbg !2079
  %le = icmp ule i64 %13, 4, !dbg !2079
  br i1 %le, label %if.then, label %if.exit, !dbg !2079

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2080
  %add = add i64 0, %15, !dbg !2080
  %size = sub i64 %add, 0, !dbg !2080
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2080
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2080
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2082
  %19 = extractvalue %"char[]" %18, 0, !dbg !2082
  %20 = extractvalue %"char[]" %18, 1, !dbg !2083
  %gt = icmp ugt i64 0, %20, !dbg !2083
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2083
  br i1 %21, label %panic10, label %checkok18, !dbg !2083

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2082
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2082
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2082
  %24 = extractvalue %"char[]" %23, 0, !dbg !2082
  %25 = extractvalue %"char[]" %17, 0, !dbg !2082
  %26 = extractvalue %"char[]" %17, 1, !dbg !2082
  %27 = extractvalue %"char[]" %23, 1, !dbg !2082
  %neq = icmp ne i64 %27, %26, !dbg !2082
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2082
  br i1 %28, label %panic20, label %checkok30, !dbg !2082

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2082
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2082
  br label %expr_block.exit, !dbg !2084

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2085
  %34 = extractvalue %"char[]" %33, 0, !dbg !2085
  %35 = extractvalue %"char[]" %33, 1, !dbg !2085
  %gt32 = icmp sgt i64 0, %35, !dbg !2085
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2085
  br i1 %36, label %panic33, label %checkok43, !dbg !2085

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !2085
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2085
  br i1 %37, label %panic45, label %checkok55, !dbg !2085

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2085
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !2085
  %40 = extractvalue %"char[]" %39, 0, !dbg !2085
  %41 = extractvalue %"char[]" %32, 0, !dbg !2085
  %42 = extractvalue %"char[]" %32, 1, !dbg !2085
  %43 = extractvalue %"char[]" %39, 1, !dbg !2085
  %neq56 = icmp ne i64 %43, %42, !dbg !2085
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2085
  br i1 %44, label %panic57, label %checkok67, !dbg !2085

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2085
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2085
  %46 = load i64, ptr %len, align 8, !dbg !2086
  %sub = sub i64 %46, 4, !dbg !2086
  store i64 %sub, ptr %len, align 8, !dbg !2086
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2087
  %48 = extractvalue %"char[]" %47, 0, !dbg !2087
  %49 = extractvalue %"char[]" %47, 1, !dbg !2088
  %gt68 = icmp ugt i64 4, %49, !dbg !2088
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2088
  br i1 %50, label %panic69, label %checkok79, !dbg !2088

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !2087
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !2087
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2087
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2087
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2087
  br label %loop.cond, !dbg !2087

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.104, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2089
  store %"char[]" { ptr @.str.105, i64 12 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.106, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 115, [2 x i64] %56), !dbg !2092
  unreachable, !dbg !2093

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2093

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 115), !dbg !2062
  unreachable, !dbg !2062

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2082
  unreachable, !dbg !2082

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2082
  unreachable, !dbg !2082

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2085
  unreachable, !dbg !2085

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2085
  unreachable, !dbg !2085

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2085
  unreachable, !dbg !2085

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2087
  unreachable, !dbg !2087
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Msws32Random.next_int128(ptr %0) #0 !dbg !2094 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2097
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2097
  br i1 %2, label %panic, label %checkok, !dbg !2097

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2098, metadata !DIExpression()), !dbg !2099
  %3 = load ptr, ptr %self, align 8, !dbg !2100
  %4 = call i64 @std.math.random.Msws32Random.next_long(ptr %3), !dbg !2102
  %zext = zext i64 %4 to i128, !dbg !2102
  %shl = shl i128 %zext, 64, !dbg !2102
  %5 = freeze i128 %shl, !dbg !2102
  %6 = load ptr, ptr %self, align 8, !dbg !2100
  %7 = call i64 @std.math.random.Msws32Random.next_long(ptr %6), !dbg !2103
  %zext3 = zext i64 %7 to i128, !dbg !2103
  %add = add i128 %5, %zext3, !dbg !2102
  ret i128 %add, !dbg !2102

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 116), !dbg !2099
  unreachable, !dbg !2099
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Msws32Random.next_long(ptr %0) #0 !dbg !2104 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2107
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2107
  br i1 %2, label %panic, label %checkok, !dbg !2107

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2108, metadata !DIExpression()), !dbg !2109
  %3 = load ptr, ptr %self, align 8, !dbg !2110
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2112
  %zext = zext i32 %4 to i64, !dbg !2112
  %shl = shl i64 %zext, 32, !dbg !2112
  %5 = freeze i64 %shl, !dbg !2112
  %6 = load ptr, ptr %self, align 8, !dbg !2110
  %7 = call i32 @std.math.random.Msws32Random.next_int(ptr %6), !dbg !2113
  %zext3 = zext i32 %7 to i64, !dbg !2113
  %add = add i64 %5, %zext3, !dbg !2112
  ret i64 %add, !dbg !2112

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 117), !dbg !2109
  unreachable, !dbg !2109
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Msws32Random.next_short(ptr %0) #0 !dbg !2114 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2117
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2117
  br i1 %2, label %panic, label %checkok, !dbg !2117

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2118, metadata !DIExpression()), !dbg !2119
  %3 = load ptr, ptr %self, align 8, !dbg !2120
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2121
  %trunc = trunc i32 %4 to i16, !dbg !2121
  ret i16 %trunc, !dbg !2121

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 118), !dbg !2119
  unreachable, !dbg !2119
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Msws32Random.next_byte(ptr %0) #0 !dbg !2122 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2125
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2125
  br i1 %2, label %panic, label %checkok, !dbg !2125

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2126, metadata !DIExpression()), !dbg !2127
  %3 = load ptr, ptr %self, align 8, !dbg !2128
  %4 = call i32 @std.math.random.Msws32Random.next_int(ptr %3), !dbg !2129
  %trunc = trunc i32 %4 to i8, !dbg !2129
  ret i8 %trunc, !dbg !2129

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 119), !dbg !2127
  unreachable, !dbg !2127
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws16Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2130 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i16], align 2
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %expr = alloca [4 x i16], align 2
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2140
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2140
  br i1 %3, label %panic, label %checkok, !dbg !2140

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2141, metadata !DIExpression()), !dbg !2142
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2143, metadata !DIExpression()), !dbg !2144
  %4 = load ptr, ptr %self, align 8, !dbg !2145
  %checknull = icmp eq ptr %4, null, !dbg !2145
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2145
  br i1 %5, label %panic3, label %checkok7, !dbg !2145

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2146, metadata !DIExpression()), !dbg !2148
  store i16 0, ptr %return_value, align 2, !dbg !2148
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2148
  store i16 0, ptr %ptradd, align 2, !dbg !2148
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 4, !dbg !2148
  store i16 0, ptr %ptradd9, align 2, !dbg !2148
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 6, !dbg !2148
  store i16 0, ptr %ptradd10, align 2, !dbg !2148
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 8, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2150
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %expr, ptr align 2 %return_value, i32 8, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2151
  %11 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2151
  br i1 %11, label %panic14, label %checkok18, !dbg !2151

checkok18:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 2 %4, ptr align 2 %expr, i32 8, i1 false), !dbg !2154
  ret void, !dbg !2154

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 129), !dbg !2142
  unreachable, !dbg !2142

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 131), !dbg !2145
  unreachable, !dbg !2145

panic14:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr16, align 8
  %21 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr17, align 8
  %22 = load [2 x i64], ptr %taddr17, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 213), !dbg !2154
  unreachable, !dbg !2154
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Msws16Random.next_short(ptr %0) #0 !dbg !2155 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i16, align 2
  %self5 = alloca i16, align 2
  %shift = alloca i16, align 2
  %s1 = alloca i16, align 2
  %self21 = alloca i16, align 2
  %shift22 = alloca i16, align 2
  %1 = icmp eq ptr %0, null, !dbg !2158
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2158
  br i1 %2, label %panic, label %checkok, !dbg !2158

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2159, metadata !DIExpression()), !dbg !2160
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !2161, metadata !DIExpression()), !dbg !2162
  %3 = load ptr, ptr %self, align 8, !dbg !2163
  %4 = load i16, ptr %3, align 2, !dbg !2163
  store i16 %4, ptr %s0, align 2, !dbg !2163
  %5 = load ptr, ptr %self, align 8, !dbg !2164
  %6 = load ptr, ptr %self, align 8, !dbg !2165
  %7 = load i16, ptr %6, align 2, !dbg !2165
  %zext = zext i16 %7 to i32, !dbg !2165
  %8 = load ptr, ptr %self, align 8, !dbg !2166
  %9 = load i16, ptr %8, align 2, !dbg !2166
  %zext3 = zext i16 %9 to i32, !dbg !2166
  %mul = mul i32 %zext, %zext3, !dbg !2165
  %10 = load ptr, ptr %self, align 8, !dbg !2167
  %ptradd = getelementptr inbounds i8, ptr %10, i64 4, !dbg !2167
  %11 = load i16, ptr %ptradd, align 2, !dbg !2167
  %zext4 = zext i16 %11 to i32, !dbg !2167
  %add = add i32 %mul, %zext4, !dbg !2165
  %trunc = trunc i32 %add to i16, !dbg !2165
  store i16 %trunc, ptr %5, align 2, !dbg !2165
  %12 = load ptr, ptr %self, align 8, !dbg !2168
  %13 = load ptr, ptr %self, align 8, !dbg !2169
  %14 = load i16, ptr %13, align 2
  store i16 %14, ptr %self5, align 2
  store i16 8, ptr %shift, align 2
  %15 = load i16, ptr %self5, align 2, !dbg !2170
  %16 = load i16, ptr %self5, align 2, !dbg !2172
  %17 = load i16, ptr %shift, align 2, !dbg !2173
  %18 = call i16 @llvm.fshr.i16(i16 %15, i16 %16, i16 %17), !dbg !2173
  store i16 %18, ptr %12, align 2, !dbg !2173
  %19 = load ptr, ptr %self, align 8, !dbg !2174
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 4, !dbg !2174
  %20 = load i16, ptr %ptradd6, align 2, !dbg !2174
  %add7 = add i16 %20, -25033, !dbg !2174
  store i16 %add7, ptr %ptradd6, align 2, !dbg !2174
  %21 = load ptr, ptr %self, align 8, !dbg !2175
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 2, !dbg !2175
  %22 = load ptr, ptr %self, align 8, !dbg !2176
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 2, !dbg !2176
  %23 = load i16, ptr %ptradd9, align 2, !dbg !2176
  %zext10 = zext i16 %23 to i32, !dbg !2176
  %24 = load ptr, ptr %self, align 8, !dbg !2177
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 2, !dbg !2177
  %25 = load i16, ptr %ptradd11, align 2, !dbg !2177
  %zext12 = zext i16 %25 to i32, !dbg !2177
  %mul13 = mul i32 %zext10, %zext12, !dbg !2176
  %26 = load ptr, ptr %self, align 8, !dbg !2178
  %ptradd14 = getelementptr inbounds i8, ptr %26, i64 6, !dbg !2178
  %27 = load i16, ptr %ptradd14, align 2, !dbg !2178
  %zext15 = zext i16 %27 to i32, !dbg !2178
  %add16 = add i32 %mul13, %zext15, !dbg !2176
  %trunc17 = trunc i32 %add16 to i16, !dbg !2176
  store i16 %trunc17, ptr %ptradd8, align 2, !dbg !2176
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !2179, metadata !DIExpression()), !dbg !2180
  %28 = load ptr, ptr %self, align 8, !dbg !2181
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 2, !dbg !2181
  %29 = load i16, ptr %ptradd18, align 2, !dbg !2181
  store i16 %29, ptr %s1, align 2, !dbg !2181
  %30 = load ptr, ptr %self, align 8, !dbg !2182
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 2, !dbg !2182
  %31 = load ptr, ptr %self, align 8, !dbg !2183
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 2, !dbg !2183
  %32 = load i16, ptr %ptradd20, align 2
  store i16 %32, ptr %self21, align 2
  store i16 8, ptr %shift22, align 2
  %33 = load i16, ptr %self21, align 2, !dbg !2184
  %34 = load i16, ptr %self21, align 2, !dbg !2186
  %35 = load i16, ptr %shift22, align 2, !dbg !2187
  %36 = call i16 @llvm.fshr.i16(i16 %33, i16 %34, i16 %35), !dbg !2187
  store i16 %36, ptr %ptradd19, align 2, !dbg !2187
  %37 = load ptr, ptr %self, align 8, !dbg !2188
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 6, !dbg !2188
  %38 = load i16, ptr %ptradd23, align 2, !dbg !2188
  %sub = sub i16 %38, -25033, !dbg !2188
  store i16 %sub, ptr %ptradd23, align 2, !dbg !2188
  %39 = load i16, ptr %s0, align 2, !dbg !2189
  %zext24 = zext i16 %39 to i32, !dbg !2189
  %40 = load i16, ptr %s1, align 2, !dbg !2190
  %zext25 = zext i16 %40 to i32, !dbg !2190
  %add26 = add i32 %zext24, %zext25, !dbg !2189
  %trunc27 = trunc i32 %add26 to i16, !dbg !2189
  ret i16 %trunc27, !dbg !2189

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %41 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %42 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %43 = load [2 x i64], ptr %taddr2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 135), !dbg !2160
  unreachable, !dbg !2160
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws16Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2191 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2192
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2192
  br i1 %3, label %panic, label %checkok, !dbg !2192

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2193, metadata !DIExpression()), !dbg !2194
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2195, metadata !DIExpression()), !dbg !2196
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2197
  %4 = load i64, ptr %ptradd, align 8, !dbg !2197
  %lt = icmp ult i64 0, %4, !dbg !2197
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2197

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 151), !dbg !2197
  unreachable, !dbg !2197

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2199, metadata !DIExpression()), !dbg !2201
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2202
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2202
  store i64 %9, ptr %len, align 8, !dbg !2202
  br label %loop.cond, !dbg !2203

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2204
  %lt8 = icmp ult i64 0, %10, !dbg !2204
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2204

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2206, metadata !DIExpression()), !dbg !2208
  %11 = load ptr, ptr %self, align 8, !dbg !2209
  %12 = call i16 @std.math.random.Msws16Random.next_short(ptr %11), !dbg !2210
  store i16 %12, ptr %value, align 2, !dbg !2210
  %13 = load i64, ptr %len, align 8, !dbg !2211
  %le = icmp ule i64 %13, 2, !dbg !2211
  br i1 %le, label %if.then, label %if.exit, !dbg !2211

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2212
  %add = add i64 0, %15, !dbg !2212
  %size = sub i64 %add, 0, !dbg !2212
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2212
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2212
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2214
  %19 = extractvalue %"char[]" %18, 0, !dbg !2214
  %20 = extractvalue %"char[]" %18, 1, !dbg !2215
  %gt = icmp ugt i64 0, %20, !dbg !2215
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2215
  br i1 %21, label %panic10, label %checkok18, !dbg !2215

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2214
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2214
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2214
  %24 = extractvalue %"char[]" %23, 0, !dbg !2214
  %25 = extractvalue %"char[]" %17, 0, !dbg !2214
  %26 = extractvalue %"char[]" %17, 1, !dbg !2214
  %27 = extractvalue %"char[]" %23, 1, !dbg !2214
  %neq = icmp ne i64 %27, %26, !dbg !2214
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2214
  br i1 %28, label %panic20, label %checkok30, !dbg !2214

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2214
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2214
  br label %expr_block.exit, !dbg !2216

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 2, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2217
  %34 = extractvalue %"char[]" %33, 0, !dbg !2217
  %35 = extractvalue %"char[]" %33, 1, !dbg !2217
  %gt32 = icmp sgt i64 0, %35, !dbg !2217
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2217
  br i1 %36, label %panic33, label %checkok43, !dbg !2217

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 2, !dbg !2217
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2217
  br i1 %37, label %panic45, label %checkok55, !dbg !2217

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2217
  %39 = insertvalue %"char[]" %38, i64 2, 1, !dbg !2217
  %40 = extractvalue %"char[]" %39, 0, !dbg !2217
  %41 = extractvalue %"char[]" %32, 0, !dbg !2217
  %42 = extractvalue %"char[]" %32, 1, !dbg !2217
  %43 = extractvalue %"char[]" %39, 1, !dbg !2217
  %neq56 = icmp ne i64 %43, %42, !dbg !2217
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2217
  br i1 %44, label %panic57, label %checkok67, !dbg !2217

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2217
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2217
  %46 = load i64, ptr %len, align 8, !dbg !2218
  %sub = sub i64 %46, 2, !dbg !2218
  store i64 %sub, ptr %len, align 8, !dbg !2218
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2219
  %48 = extractvalue %"char[]" %47, 0, !dbg !2219
  %49 = extractvalue %"char[]" %47, 1, !dbg !2220
  %gt68 = icmp ugt i64 2, %49, !dbg !2220
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2220
  br i1 %50, label %panic69, label %checkok79, !dbg !2220

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 2, !dbg !2219
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 2, !dbg !2219
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2219
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2219
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2219
  br label %loop.cond, !dbg !2219

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.107, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2221
  store %"char[]" { ptr @.str.108, i64 12 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.109, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 153, [2 x i64] %56), !dbg !2224
  unreachable, !dbg !2225

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2225

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 153), !dbg !2194
  unreachable, !dbg !2194

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2214
  unreachable, !dbg !2214

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2214
  unreachable, !dbg !2214

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2217
  unreachable, !dbg !2217

panic45:                                          ; preds = %checkok43
  store i64 1, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2217
  unreachable, !dbg !2217

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2217
  unreachable, !dbg !2217

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2219
  unreachable, !dbg !2219
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Msws16Random.next_int128(ptr %0) #0 !dbg !2226 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2229
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2229
  br i1 %2, label %panic, label %checkok, !dbg !2229

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2230, metadata !DIExpression()), !dbg !2231
  %3 = load ptr, ptr %self, align 8, !dbg !2232
  %4 = call i64 @std.math.random.Msws16Random.next_long(ptr %3), !dbg !2234
  %zext = zext i64 %4 to i128, !dbg !2234
  %shl = shl i128 %zext, 64, !dbg !2234
  %5 = freeze i128 %shl, !dbg !2234
  %6 = load ptr, ptr %self, align 8, !dbg !2232
  %7 = call i64 @std.math.random.Msws16Random.next_long(ptr %6), !dbg !2235
  %zext3 = zext i64 %7 to i128, !dbg !2235
  %add = add i128 %5, %zext3, !dbg !2234
  ret i128 %add, !dbg !2234

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 154), !dbg !2231
  unreachable, !dbg !2231
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Msws16Random.next_long(ptr %0) #0 !dbg !2236 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2239
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2239
  br i1 %2, label %panic, label %checkok, !dbg !2239

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2240, metadata !DIExpression()), !dbg !2241
  %3 = load ptr, ptr %self, align 8, !dbg !2242
  %4 = call i32 @std.math.random.Msws16Random.next_int(ptr %3), !dbg !2244
  %zext = zext i32 %4 to i64, !dbg !2244
  %shl = shl i64 %zext, 32, !dbg !2244
  %5 = freeze i64 %shl, !dbg !2244
  %6 = load ptr, ptr %self, align 8, !dbg !2242
  %7 = call i32 @std.math.random.Msws16Random.next_int(ptr %6), !dbg !2245
  %zext3 = zext i32 %7 to i64, !dbg !2245
  %add = add i64 %5, %zext3, !dbg !2244
  ret i64 %add, !dbg !2244

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 155), !dbg !2241
  unreachable, !dbg !2241
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Msws16Random.next_int(ptr %0) #0 !dbg !2246 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2249
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2249
  br i1 %2, label %panic, label %checkok, !dbg !2249

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2250, metadata !DIExpression()), !dbg !2251
  %3 = load ptr, ptr %self, align 8, !dbg !2252
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !2254
  %zext = zext i16 %4 to i32, !dbg !2254
  %shl = shl i32 %zext, 16, !dbg !2254
  %5 = freeze i32 %shl, !dbg !2254
  %6 = load ptr, ptr %self, align 8, !dbg !2252
  %7 = call i16 @std.math.random.Msws16Random.next_short(ptr %6), !dbg !2255
  %zext3 = zext i16 %7 to i32, !dbg !2255
  %add = add i32 %5, %zext3, !dbg !2254
  ret i32 %add, !dbg !2254

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 156), !dbg !2251
  unreachable, !dbg !2251
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Msws16Random.next_byte(ptr %0) #0 !dbg !2256 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2259
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2259
  br i1 %2, label %panic, label %checkok, !dbg !2259

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2260, metadata !DIExpression()), !dbg !2261
  %3 = load ptr, ptr %self, align 8, !dbg !2262
  %4 = call i16 @std.math.random.Msws16Random.next_short(ptr %3), !dbg !2263
  %trunc = trunc i16 %4 to i8, !dbg !2263
  ret i8 %trunc, !dbg !2263

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 157), !dbg !2261
  unreachable, !dbg !2261
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws8Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2264 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca [4 x i8], align 1
  %taddr11 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %expr = alloca [4 x i8], align 1
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2274
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2274
  br i1 %3, label %panic, label %checkok, !dbg !2274

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2275, metadata !DIExpression()), !dbg !2276
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2277, metadata !DIExpression()), !dbg !2278
  %4 = load ptr, ptr %self, align 8, !dbg !2279
  %checknull = icmp eq ptr %4, null, !dbg !2279
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2279
  br i1 %5, label %panic3, label %checkok7, !dbg !2279

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2280, metadata !DIExpression()), !dbg !2282
  store i8 0, ptr %return_value, align 1, !dbg !2282
  %ptradd = getelementptr inbounds i8, ptr %return_value, i64 1, !dbg !2282
  store i8 0, ptr %ptradd, align 1, !dbg !2282
  %ptradd9 = getelementptr inbounds i8, ptr %return_value, i64 2, !dbg !2282
  store i8 0, ptr %ptradd9, align 1, !dbg !2282
  %ptradd10 = getelementptr inbounds i8, ptr %return_value, i64 3, !dbg !2282
  store i8 0, ptr %ptradd10, align 1, !dbg !2282
  store ptr %return_value, ptr %taddr11, align 8
  %6 = load ptr, ptr %taddr11, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 4, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr12, align 8
  %10 = load [2 x i64], ptr %taddr12, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2284
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %expr, ptr align 1 %return_value, i32 4, i1 false)
  %checknull13 = icmp eq ptr %expr, null, !dbg !2285
  %11 = call i1 @llvm.expect.i1(i1 %checknull13, i1 false), !dbg !2285
  br i1 %11, label %panic14, label %checkok18, !dbg !2285

checkok18:                                        ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 1 %4, ptr align 1 %expr, i32 4, i1 false), !dbg !2288
  ret void, !dbg !2288

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 166), !dbg !2276
  unreachable, !dbg !2276

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 168), !dbg !2279
  unreachable, !dbg !2279

panic14:                                          ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.19, i64 53 }, ptr %taddr15, align 8
  %20 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.file.20, i64 10 }, ptr %taddr16, align 8
  %21 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr17, align 8
  %22 = load [2 x i64], ptr %taddr17, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 213), !dbg !2288
  unreachable, !dbg !2288
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Msws8Random.next_byte(ptr %0) #0 !dbg !2289 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s0 = alloca i8, align 1
  %self5 = alloca i8, align 1
  %shift = alloca i8, align 1
  %s1 = alloca i8, align 1
  %self21 = alloca i8, align 1
  %shift22 = alloca i8, align 1
  %1 = icmp eq ptr %0, null, !dbg !2292
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2292
  br i1 %2, label %panic, label %checkok, !dbg !2292

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2293, metadata !DIExpression()), !dbg !2294
  call void @llvm.dbg.declare(metadata ptr %s0, metadata !2295, metadata !DIExpression()), !dbg !2296
  %3 = load ptr, ptr %self, align 8, !dbg !2297
  %4 = load i8, ptr %3, align 1, !dbg !2297
  store i8 %4, ptr %s0, align 1, !dbg !2297
  %5 = load ptr, ptr %self, align 8, !dbg !2298
  %6 = load ptr, ptr %self, align 8, !dbg !2299
  %7 = load i8, ptr %6, align 1, !dbg !2299
  %zext = zext i8 %7 to i32, !dbg !2299
  %8 = load ptr, ptr %self, align 8, !dbg !2300
  %9 = load i8, ptr %8, align 1, !dbg !2300
  %zext3 = zext i8 %9 to i32, !dbg !2300
  %mul = mul i32 %zext, %zext3, !dbg !2299
  %10 = load ptr, ptr %self, align 8, !dbg !2301
  %ptradd = getelementptr inbounds i8, ptr %10, i64 2, !dbg !2301
  %11 = load i8, ptr %ptradd, align 1, !dbg !2301
  %zext4 = zext i8 %11 to i32, !dbg !2301
  %add = add i32 %mul, %zext4, !dbg !2299
  %trunc = trunc i32 %add to i8, !dbg !2299
  store i8 %trunc, ptr %5, align 1, !dbg !2299
  %12 = load ptr, ptr %self, align 8, !dbg !2302
  %13 = load ptr, ptr %self, align 8, !dbg !2303
  %14 = load i8, ptr %13, align 1
  store i8 %14, ptr %self5, align 1
  store i8 4, ptr %shift, align 1
  %15 = load i8, ptr %self5, align 1, !dbg !2304
  %16 = load i8, ptr %self5, align 1, !dbg !2306
  %17 = load i8, ptr %shift, align 1, !dbg !2307
  %18 = call i8 @llvm.fshr.i8(i8 %15, i8 %16, i8 %17), !dbg !2307
  store i8 %18, ptr %12, align 1, !dbg !2307
  %19 = load ptr, ptr %self, align 8, !dbg !2308
  %ptradd6 = getelementptr inbounds i8, ptr %19, i64 2, !dbg !2308
  %20 = load i8, ptr %ptradd6, align 1, !dbg !2308
  %add7 = add i8 %20, -97, !dbg !2308
  store i8 %add7, ptr %ptradd6, align 1, !dbg !2308
  %21 = load ptr, ptr %self, align 8, !dbg !2309
  %ptradd8 = getelementptr inbounds i8, ptr %21, i64 1, !dbg !2309
  %22 = load ptr, ptr %self, align 8, !dbg !2310
  %ptradd9 = getelementptr inbounds i8, ptr %22, i64 1, !dbg !2310
  %23 = load i8, ptr %ptradd9, align 1, !dbg !2310
  %zext10 = zext i8 %23 to i32, !dbg !2310
  %24 = load ptr, ptr %self, align 8, !dbg !2311
  %ptradd11 = getelementptr inbounds i8, ptr %24, i64 1, !dbg !2311
  %25 = load i8, ptr %ptradd11, align 1, !dbg !2311
  %zext12 = zext i8 %25 to i32, !dbg !2311
  %mul13 = mul i32 %zext10, %zext12, !dbg !2310
  %26 = load ptr, ptr %self, align 8, !dbg !2312
  %ptradd14 = getelementptr inbounds i8, ptr %26, i64 3, !dbg !2312
  %27 = load i8, ptr %ptradd14, align 1, !dbg !2312
  %zext15 = zext i8 %27 to i32, !dbg !2312
  %add16 = add i32 %mul13, %zext15, !dbg !2310
  %trunc17 = trunc i32 %add16 to i8, !dbg !2310
  store i8 %trunc17, ptr %ptradd8, align 1, !dbg !2310
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !2313, metadata !DIExpression()), !dbg !2314
  %28 = load ptr, ptr %self, align 8, !dbg !2315
  %ptradd18 = getelementptr inbounds i8, ptr %28, i64 1, !dbg !2315
  %29 = load i8, ptr %ptradd18, align 1, !dbg !2315
  store i8 %29, ptr %s1, align 1, !dbg !2315
  %30 = load ptr, ptr %self, align 8, !dbg !2316
  %ptradd19 = getelementptr inbounds i8, ptr %30, i64 1, !dbg !2316
  %31 = load ptr, ptr %self, align 8, !dbg !2317
  %ptradd20 = getelementptr inbounds i8, ptr %31, i64 1, !dbg !2317
  %32 = load i8, ptr %ptradd20, align 1
  store i8 %32, ptr %self21, align 1
  store i8 4, ptr %shift22, align 1
  %33 = load i8, ptr %self21, align 1, !dbg !2318
  %34 = load i8, ptr %self21, align 1, !dbg !2320
  %35 = load i8, ptr %shift22, align 1, !dbg !2321
  %36 = call i8 @llvm.fshr.i8(i8 %33, i8 %34, i8 %35), !dbg !2321
  store i8 %36, ptr %ptradd19, align 1, !dbg !2321
  %37 = load ptr, ptr %self, align 8, !dbg !2322
  %ptradd23 = getelementptr inbounds i8, ptr %37, i64 3, !dbg !2322
  %38 = load i8, ptr %ptradd23, align 1, !dbg !2322
  %sub = sub i8 %38, -97, !dbg !2322
  store i8 %sub, ptr %ptradd23, align 1, !dbg !2322
  %39 = load i8, ptr %s0, align 1, !dbg !2323
  %zext24 = zext i8 %39 to i32, !dbg !2323
  %40 = load i8, ptr %s1, align 1, !dbg !2324
  %zext25 = zext i8 %40 to i32, !dbg !2324
  %add26 = add i32 %zext24, %zext25, !dbg !2323
  %trunc27 = trunc i32 %add26 to i8, !dbg !2323
  ret i8 %trunc27, !dbg !2323

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %41 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %42 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %43 = load [2 x i64], ptr %taddr2, align 8
  %44 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %44([2 x i64] %41, [2 x i64] %42, [2 x i64] %43, i32 171), !dbg !2294
  unreachable, !dbg !2294
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Msws8Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2325 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2326
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2326
  br i1 %3, label %panic, label %checkok, !dbg !2326

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2327, metadata !DIExpression()), !dbg !2328
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2329, metadata !DIExpression()), !dbg !2330
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2331, metadata !DIExpression()), !dbg !2333
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !2334
  %4 = load i64, ptr %ptradd, align 8, !dbg !2334
  store i64 %4, ptr %len, align 8, !dbg !2334
  br label %loop.cond, !dbg !2335

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2336
  %lt = icmp ult i64 0, %5, !dbg !2336
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2336

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2338, metadata !DIExpression()), !dbg !2340
  %6 = load ptr, ptr %self, align 8, !dbg !2341
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !2342
  store i8 %7, ptr %value, align 1, !dbg !2342
  %8 = load i64, ptr %len, align 8, !dbg !2343
  %le = icmp ule i64 %8, 1, !dbg !2343
  br i1 %le, label %if.then, label %if.exit, !dbg !2343

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2344
  %add = add i64 0, %10, !dbg !2344
  %size = sub i64 %add, 0, !dbg !2344
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2344
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2344
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !2346
  %14 = extractvalue %"char[]" %13, 0, !dbg !2346
  %15 = extractvalue %"char[]" %13, 1, !dbg !2347
  %gt = icmp ugt i64 0, %15, !dbg !2347
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2347
  br i1 %16, label %panic5, label %checkok13, !dbg !2347

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !2346
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2346
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !2346
  %19 = extractvalue %"char[]" %18, 0, !dbg !2346
  %20 = extractvalue %"char[]" %12, 0, !dbg !2346
  %21 = extractvalue %"char[]" %12, 1, !dbg !2346
  %22 = extractvalue %"char[]" %18, 1, !dbg !2346
  %neq = icmp ne i64 %22, %21, !dbg !2346
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2346
  br i1 %23, label %panic15, label %checkok25, !dbg !2346

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !2346
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !2346
  br label %expr_block.exit, !dbg !2348

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !2349
  %29 = extractvalue %"char[]" %28, 0, !dbg !2349
  %30 = extractvalue %"char[]" %28, 1, !dbg !2349
  %gt27 = icmp sgt i64 0, %30, !dbg !2349
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2349
  br i1 %31, label %panic28, label %checkok38, !dbg !2349

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 1, !dbg !2349
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !2349
  br i1 %32, label %panic40, label %checkok50, !dbg !2349

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !2349
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !2349
  %35 = extractvalue %"char[]" %34, 0, !dbg !2349
  %36 = extractvalue %"char[]" %27, 0, !dbg !2349
  %37 = extractvalue %"char[]" %27, 1, !dbg !2349
  %38 = extractvalue %"char[]" %34, 1, !dbg !2349
  %neq51 = icmp ne i64 %38, %37, !dbg !2349
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !2349
  br i1 %39, label %panic52, label %checkok62, !dbg !2349

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !2349
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !2349
  %41 = load i64, ptr %len, align 8, !dbg !2350
  %sub = sub i64 %41, 1, !dbg !2350
  store i64 %sub, ptr %len, align 8, !dbg !2350
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !2351
  %43 = extractvalue %"char[]" %42, 0, !dbg !2351
  %44 = extractvalue %"char[]" %42, 1, !dbg !2352
  %gt63 = icmp ugt i64 1, %44, !dbg !2352
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !2352
  br i1 %45, label %panic64, label %checkok74, !dbg !2352

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 1, !dbg !2351
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !2351
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !2351
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !2351
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !2351
  br label %loop.cond, !dbg !2351

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.110, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !2353
  store %"char[]" { ptr @.str.111, i64 12 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.112, i64 22 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 186, [2 x i64] %51), !dbg !2356
  unreachable, !dbg !2357

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2357

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 186), !dbg !2328
  unreachable, !dbg !2328

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !2346
  unreachable, !dbg !2346

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !2346
  unreachable, !dbg !2346

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !2349
  unreachable, !dbg !2349

panic40:                                          ; preds = %checkok38
  store i64 0, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !2349
  unreachable, !dbg !2349

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !2349
  unreachable, !dbg !2349

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !2351
  unreachable, !dbg !2351
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Msws8Random.next_int128(ptr %0) #0 !dbg !2358 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2361
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2361
  br i1 %2, label %panic, label %checkok, !dbg !2361

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2362, metadata !DIExpression()), !dbg !2363
  %3 = load ptr, ptr %self, align 8, !dbg !2364
  %4 = call i64 @std.math.random.Msws8Random.next_long(ptr %3), !dbg !2366
  %zext = zext i64 %4 to i128, !dbg !2366
  %shl = shl i128 %zext, 64, !dbg !2366
  %5 = freeze i128 %shl, !dbg !2366
  %6 = load ptr, ptr %self, align 8, !dbg !2364
  %7 = call i64 @std.math.random.Msws8Random.next_long(ptr %6), !dbg !2367
  %zext3 = zext i64 %7 to i128, !dbg !2367
  %add = add i128 %5, %zext3, !dbg !2366
  ret i128 %add, !dbg !2366

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 187), !dbg !2363
  unreachable, !dbg !2363
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Msws8Random.next_long(ptr %0) #0 !dbg !2368 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2371
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2371
  br i1 %2, label %panic, label %checkok, !dbg !2371

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2372, metadata !DIExpression()), !dbg !2373
  %3 = load ptr, ptr %self, align 8, !dbg !2374
  %4 = call i32 @std.math.random.Msws8Random.next_int(ptr %3), !dbg !2376
  %zext = zext i32 %4 to i64, !dbg !2376
  %shl = shl i64 %zext, 32, !dbg !2376
  %5 = freeze i64 %shl, !dbg !2376
  %6 = load ptr, ptr %self, align 8, !dbg !2374
  %7 = call i32 @std.math.random.Msws8Random.next_int(ptr %6), !dbg !2377
  %zext3 = zext i32 %7 to i64, !dbg !2377
  %add = add i64 %5, %zext3, !dbg !2376
  ret i64 %add, !dbg !2376

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 188), !dbg !2373
  unreachable, !dbg !2373
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Msws8Random.next_int(ptr %0) #0 !dbg !2378 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2381
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2381
  br i1 %2, label %panic, label %checkok, !dbg !2381

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2382, metadata !DIExpression()), !dbg !2383
  %3 = load ptr, ptr %self, align 8, !dbg !2384
  %4 = call i16 @std.math.random.Msws8Random.next_short(ptr %3), !dbg !2386
  %zext = zext i16 %4 to i32, !dbg !2386
  %shl = shl i32 %zext, 16, !dbg !2386
  %5 = freeze i32 %shl, !dbg !2386
  %6 = load ptr, ptr %self, align 8, !dbg !2384
  %7 = call i16 @std.math.random.Msws8Random.next_short(ptr %6), !dbg !2387
  %zext3 = zext i16 %7 to i32, !dbg !2387
  %add = add i32 %5, %zext3, !dbg !2386
  ret i32 %add, !dbg !2386

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 189), !dbg !2383
  unreachable, !dbg !2383
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Msws8Random.next_short(ptr %0) #0 !dbg !2388 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2391
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2391
  br i1 %2, label %panic, label %checkok, !dbg !2391

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2392, metadata !DIExpression()), !dbg !2393
  %3 = load ptr, ptr %self, align 8, !dbg !2394
  %4 = call i8 @std.math.random.Msws8Random.next_byte(ptr %3), !dbg !2396
  %zext = zext i8 %4 to i16, !dbg !2396
  %zext3 = zext i16 %zext to i32, !dbg !2396
  %shl = shl i32 %zext3, 8, !dbg !2396
  %5 = freeze i32 %shl, !dbg !2396
  %6 = load ptr, ptr %self, align 8, !dbg !2394
  %7 = call i8 @std.math.random.Msws8Random.next_byte(ptr %6), !dbg !2397
  %zext4 = zext i8 %7 to i32, !dbg !2397
  %add = add i32 %5, %zext4, !dbg !2396
  %trunc = trunc i32 %add to i16, !dbg !2396
  ret i16 %trunc, !dbg !2396

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.97, i64 12 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 190), !dbg !2393
  unreachable, !dbg !2393
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg128Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2398 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %input = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input8 = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr9 = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2403
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2403
  br i1 %3, label %panic, label %checkok, !dbg !2403

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2404, metadata !DIExpression()), !dbg !2405
  store [2 x i64] %1, ptr %input, align 8
  call void @llvm.dbg.declare(metadata ptr %input, metadata !2406, metadata !DIExpression()), !dbg !2407
  %4 = load ptr, ptr %self, align 8, !dbg !2408
  %checknull = icmp eq ptr %4, null, !dbg !2408
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2408
  br i1 %5, label %panic3, label %checkok7, !dbg !2408

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input8, ptr align 8 %input, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2409, metadata !DIExpression()), !dbg !2411
  store i128 0, ptr %return_value, align 16, !dbg !2411
  store ptr %return_value, ptr %taddr9, align 8
  %6 = load ptr, ptr %taddr9, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 16, 1
  %9 = load [2 x i64], ptr %input8, align 8
  store %"char[]" %8, ptr %taddr10, align 8
  %10 = load [2 x i64], ptr %taddr10, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2413
  %11 = load i128, ptr %return_value, align 16, !dbg !2414
  store i128 %11, ptr %4, align 16, !dbg !2414
  ret void, !dbg !2414

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 18), !dbg !2405
  unreachable, !dbg !2405

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 20), !dbg !2408
  unreachable, !dbg !2408
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Lcg128Random.next_long(ptr %0) #0 !dbg !2415 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2418
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2418
  br i1 %2, label %panic, label %checkok, !dbg !2418

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2419, metadata !DIExpression()), !dbg !2420
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2421, metadata !DIExpression()), !dbg !2422
  %3 = load ptr, ptr %self, align 8, !dbg !2423
  store ptr %3, ptr %s, align 8, !dbg !2423
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2424, metadata !DIExpression()), !dbg !2425
  %4 = load ptr, ptr %s, align 8, !dbg !2426
  %checknull = icmp eq ptr %4, null, !dbg !2426
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2426
  br i1 %5, label %panic3, label %checkok7, !dbg !2426

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !2426
  %lshr = lshr i128 %6, 64, !dbg !2427
  %7 = freeze i128 %lshr, !dbg !2427
  %trunc = trunc i128 %7 to i64, !dbg !2427
  store i64 %trunc, ptr %result, align 8, !dbg !2427
  %8 = load ptr, ptr %s, align 8, !dbg !2428
  %checknull8 = icmp eq ptr %8, null, !dbg !2428
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2428
  br i1 %9, label %panic9, label %checkok13, !dbg !2428

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !2429
  %checknull14 = icmp eq ptr %10, null, !dbg !2429
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2429
  br i1 %11, label %panic15, label %checkok19, !dbg !2429

checkok19:                                        ; preds = %checkok13
  %12 = load i128, ptr %10, align 16, !dbg !2429
  %mul = mul i128 %12, -48899967401452674293065485854872568811, !dbg !2430
  %add = add i128 %mul, -129976298391535590297638237547755878347, !dbg !2430
  store i128 %add, ptr %8, align 16, !dbg !2430
  %13 = load i64, ptr %result, align 8, !dbg !2431
  ret i64 %13, !dbg !2431

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 24), !dbg !2420
  unreachable, !dbg !2420

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %18 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %19 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr6, align 8
  %20 = load [2 x i64], ptr %taddr6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 27), !dbg !2426
  unreachable, !dbg !2426

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr11, align 8
  %23 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr12, align 8
  %24 = load [2 x i64], ptr %taddr12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 28), !dbg !2428
  unreachable, !dbg !2428

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr16, align 8
  %26 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr17, align 8
  %27 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr18, align 8
  %28 = load [2 x i64], ptr %taddr18, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 28), !dbg !2429
  unreachable, !dbg !2429
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg128Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2432 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2433
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2433
  br i1 %3, label %panic, label %checkok, !dbg !2433

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2434, metadata !DIExpression()), !dbg !2435
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2436, metadata !DIExpression()), !dbg !2437
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2438
  %4 = load i64, ptr %ptradd, align 8, !dbg !2438
  %lt = icmp ult i64 0, %4, !dbg !2438
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2438

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 33), !dbg !2438
  unreachable, !dbg !2438

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2440, metadata !DIExpression()), !dbg !2442
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2443
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2443
  store i64 %9, ptr %len, align 8, !dbg !2443
  br label %loop.cond, !dbg !2444

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2445
  %lt8 = icmp ult i64 0, %10, !dbg !2445
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2445

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2447, metadata !DIExpression()), !dbg !2449
  %11 = load ptr, ptr %self, align 8, !dbg !2450
  %12 = call i64 @std.math.random.Lcg128Random.next_long(ptr %11), !dbg !2451
  store i64 %12, ptr %value, align 8, !dbg !2451
  %13 = load i64, ptr %len, align 8, !dbg !2452
  %le = icmp ule i64 %13, 8, !dbg !2452
  br i1 %le, label %if.then, label %if.exit, !dbg !2452

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2453
  %add = add i64 0, %15, !dbg !2453
  %size = sub i64 %add, 0, !dbg !2453
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2453
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2453
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2455
  %19 = extractvalue %"char[]" %18, 0, !dbg !2455
  %20 = extractvalue %"char[]" %18, 1, !dbg !2456
  %gt = icmp ugt i64 0, %20, !dbg !2456
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2456
  br i1 %21, label %panic10, label %checkok18, !dbg !2456

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2455
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2455
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2455
  %24 = extractvalue %"char[]" %23, 0, !dbg !2455
  %25 = extractvalue %"char[]" %17, 0, !dbg !2455
  %26 = extractvalue %"char[]" %17, 1, !dbg !2455
  %27 = extractvalue %"char[]" %23, 1, !dbg !2455
  %neq = icmp ne i64 %27, %26, !dbg !2455
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2455
  br i1 %28, label %panic20, label %checkok30, !dbg !2455

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2455
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2455
  br label %expr_block.exit, !dbg !2457

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 8, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2458
  %34 = extractvalue %"char[]" %33, 0, !dbg !2458
  %35 = extractvalue %"char[]" %33, 1, !dbg !2458
  %gt32 = icmp sgt i64 0, %35, !dbg !2458
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2458
  br i1 %36, label %panic33, label %checkok43, !dbg !2458

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 8, !dbg !2458
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2458
  br i1 %37, label %panic45, label %checkok55, !dbg !2458

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2458
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !2458
  %40 = extractvalue %"char[]" %39, 0, !dbg !2458
  %41 = extractvalue %"char[]" %32, 0, !dbg !2458
  %42 = extractvalue %"char[]" %32, 1, !dbg !2458
  %43 = extractvalue %"char[]" %39, 1, !dbg !2458
  %neq56 = icmp ne i64 %43, %42, !dbg !2458
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2458
  br i1 %44, label %panic57, label %checkok67, !dbg !2458

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2458
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2458
  %46 = load i64, ptr %len, align 8, !dbg !2459
  %sub = sub i64 %46, 8, !dbg !2459
  store i64 %sub, ptr %len, align 8, !dbg !2459
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2460
  %48 = extractvalue %"char[]" %47, 0, !dbg !2460
  %49 = extractvalue %"char[]" %47, 1, !dbg !2461
  %gt68 = icmp ugt i64 8, %49, !dbg !2461
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2461
  br i1 %50, label %panic69, label %checkok79, !dbg !2461

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 8, !dbg !2460
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !2460
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2460
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2460
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2460
  br label %loop.cond, !dbg !2460

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.129, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2462
  store %"char[]" { ptr @.str.130, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.131, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 35, [2 x i64] %56), !dbg !2465
  unreachable, !dbg !2466

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2466

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 35), !dbg !2435
  unreachable, !dbg !2435

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2455
  unreachable, !dbg !2455

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2455
  unreachable, !dbg !2455

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2458
  unreachable, !dbg !2458

panic45:                                          ; preds = %checkok43
  store i64 7, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2458
  unreachable, !dbg !2458

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2458
  unreachable, !dbg !2458

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2460
  unreachable, !dbg !2460
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Lcg128Random.next_int128(ptr %0) #0 !dbg !2467 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2470
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2470
  br i1 %2, label %panic, label %checkok, !dbg !2470

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2471, metadata !DIExpression()), !dbg !2472
  %3 = load ptr, ptr %self, align 8, !dbg !2473
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !2475
  %zext = zext i64 %4 to i128, !dbg !2475
  %shl = shl i128 %zext, 64, !dbg !2475
  %5 = freeze i128 %shl, !dbg !2475
  %6 = load ptr, ptr %self, align 8, !dbg !2473
  %7 = call i64 @std.math.random.Lcg128Random.next_long(ptr %6), !dbg !2476
  %zext3 = zext i64 %7 to i128, !dbg !2476
  %add = add i128 %5, %zext3, !dbg !2475
  ret i128 %add, !dbg !2475

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 36), !dbg !2472
  unreachable, !dbg !2472
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Lcg128Random.next_int(ptr %0) #0 !dbg !2477 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2480
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2480
  br i1 %2, label %panic, label %checkok, !dbg !2480

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2481, metadata !DIExpression()), !dbg !2482
  %3 = load ptr, ptr %self, align 8, !dbg !2483
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !2484
  %trunc = trunc i64 %4 to i32, !dbg !2484
  ret i32 %trunc, !dbg !2484

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 37), !dbg !2482
  unreachable, !dbg !2482
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Lcg128Random.next_short(ptr %0) #0 !dbg !2485 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2488
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2488
  br i1 %2, label %panic, label %checkok, !dbg !2488

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2489, metadata !DIExpression()), !dbg !2490
  %3 = load ptr, ptr %self, align 8, !dbg !2491
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !2492
  %trunc = trunc i64 %4 to i16, !dbg !2492
  ret i16 %trunc, !dbg !2492

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 38), !dbg !2490
  unreachable, !dbg !2490
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Lcg128Random.next_byte(ptr %0) #0 !dbg !2493 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2496
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2496
  br i1 %2, label %panic, label %checkok, !dbg !2496

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2497, metadata !DIExpression()), !dbg !2498
  %3 = load ptr, ptr %self, align 8, !dbg !2499
  %4 = call i64 @std.math.random.Lcg128Random.next_long(ptr %3), !dbg !2500
  %trunc = trunc i64 %4 to i8, !dbg !2500
  ret i8 %trunc, !dbg !2500

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 39), !dbg !2498
  unreachable, !dbg !2498
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg64Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2501 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2506
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2506
  br i1 %3, label %panic, label %checkok, !dbg !2506

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2507, metadata !DIExpression()), !dbg !2508
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2509, metadata !DIExpression()), !dbg !2510
  %4 = load ptr, ptr %self, align 8, !dbg !2511
  %checknull = icmp eq ptr %4, null, !dbg !2511
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2511
  br i1 %5, label %panic3, label %checkok7, !dbg !2511

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2512, metadata !DIExpression()), !dbg !2514
  store i64 0, ptr %return_value, align 8, !dbg !2514
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 8, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2516
  %11 = load i64, ptr %return_value, align 8, !dbg !2517
  store i64 %11, ptr %4, align 8, !dbg !2517
  ret void, !dbg !2517

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 45), !dbg !2508
  unreachable, !dbg !2508

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 47), !dbg !2511
  unreachable, !dbg !2511
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Lcg64Random.next_int(ptr %0) #0 !dbg !2518 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2521
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2521
  br i1 %2, label %panic, label %checkok, !dbg !2521

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2522, metadata !DIExpression()), !dbg !2523
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2524, metadata !DIExpression()), !dbg !2525
  %3 = load ptr, ptr %self, align 8, !dbg !2526
  store ptr %3, ptr %s, align 8, !dbg !2526
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2527, metadata !DIExpression()), !dbg !2528
  %4 = load ptr, ptr %s, align 8, !dbg !2529
  %checknull = icmp eq ptr %4, null, !dbg !2529
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2529
  br i1 %5, label %panic3, label %checkok7, !dbg !2529

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !2529
  %lshr = lshr i64 %6, 32, !dbg !2530
  %7 = freeze i64 %lshr, !dbg !2530
  %trunc = trunc i64 %7 to i32, !dbg !2530
  store i32 %trunc, ptr %result, align 4, !dbg !2530
  %8 = load ptr, ptr %s, align 8, !dbg !2531
  %checknull8 = icmp eq ptr %8, null, !dbg !2531
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2531
  br i1 %9, label %panic9, label %checkok13, !dbg !2531

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !2532
  %checknull14 = icmp eq ptr %10, null, !dbg !2532
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2532
  br i1 %11, label %panic15, label %checkok19, !dbg !2532

checkok19:                                        ; preds = %checkok13
  %12 = load i64, ptr %10, align 8, !dbg !2532
  %mul = mul i64 %12, -3372029247567499371, !dbg !2533
  %add = add i64 %mul, -7046029254386353131, !dbg !2533
  store i64 %add, ptr %8, align 8, !dbg !2533
  %13 = load i32, ptr %result, align 4, !dbg !2534
  ret i32 %13, !dbg !2534

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 51), !dbg !2523
  unreachable, !dbg !2523

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %18 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %19 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr6, align 8
  %20 = load [2 x i64], ptr %taddr6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 54), !dbg !2529
  unreachable, !dbg !2529

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr11, align 8
  %23 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr12, align 8
  %24 = load [2 x i64], ptr %taddr12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 55), !dbg !2531
  unreachable, !dbg !2531

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr16, align 8
  %26 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr17, align 8
  %27 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr18, align 8
  %28 = load [2 x i64], ptr %taddr18, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 55), !dbg !2532
  unreachable, !dbg !2532
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg64Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2535 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2536
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2536
  br i1 %3, label %panic, label %checkok, !dbg !2536

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2537, metadata !DIExpression()), !dbg !2538
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2539, metadata !DIExpression()), !dbg !2540
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2541
  %4 = load i64, ptr %ptradd, align 8, !dbg !2541
  %lt = icmp ult i64 0, %4, !dbg !2541
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2541

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 60), !dbg !2541
  unreachable, !dbg !2541

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2543, metadata !DIExpression()), !dbg !2545
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2546
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2546
  store i64 %9, ptr %len, align 8, !dbg !2546
  br label %loop.cond, !dbg !2547

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2548
  %lt8 = icmp ult i64 0, %10, !dbg !2548
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2548

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2550, metadata !DIExpression()), !dbg !2552
  %11 = load ptr, ptr %self, align 8, !dbg !2553
  %12 = call i32 @std.math.random.Lcg64Random.next_int(ptr %11), !dbg !2554
  store i32 %12, ptr %value, align 4, !dbg !2554
  %13 = load i64, ptr %len, align 8, !dbg !2555
  %le = icmp ule i64 %13, 4, !dbg !2555
  br i1 %le, label %if.then, label %if.exit, !dbg !2555

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2556
  %add = add i64 0, %15, !dbg !2556
  %size = sub i64 %add, 0, !dbg !2556
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2556
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2556
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2558
  %19 = extractvalue %"char[]" %18, 0, !dbg !2558
  %20 = extractvalue %"char[]" %18, 1, !dbg !2559
  %gt = icmp ugt i64 0, %20, !dbg !2559
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2559
  br i1 %21, label %panic10, label %checkok18, !dbg !2559

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2558
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2558
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2558
  %24 = extractvalue %"char[]" %23, 0, !dbg !2558
  %25 = extractvalue %"char[]" %17, 0, !dbg !2558
  %26 = extractvalue %"char[]" %17, 1, !dbg !2558
  %27 = extractvalue %"char[]" %23, 1, !dbg !2558
  %neq = icmp ne i64 %27, %26, !dbg !2558
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2558
  br i1 %28, label %panic20, label %checkok30, !dbg !2558

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2558
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2558
  br label %expr_block.exit, !dbg !2560

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2561
  %34 = extractvalue %"char[]" %33, 0, !dbg !2561
  %35 = extractvalue %"char[]" %33, 1, !dbg !2561
  %gt32 = icmp sgt i64 0, %35, !dbg !2561
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2561
  br i1 %36, label %panic33, label %checkok43, !dbg !2561

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !2561
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2561
  br i1 %37, label %panic45, label %checkok55, !dbg !2561

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2561
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !2561
  %40 = extractvalue %"char[]" %39, 0, !dbg !2561
  %41 = extractvalue %"char[]" %32, 0, !dbg !2561
  %42 = extractvalue %"char[]" %32, 1, !dbg !2561
  %43 = extractvalue %"char[]" %39, 1, !dbg !2561
  %neq56 = icmp ne i64 %43, %42, !dbg !2561
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2561
  br i1 %44, label %panic57, label %checkok67, !dbg !2561

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2561
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2561
  %46 = load i64, ptr %len, align 8, !dbg !2562
  %sub = sub i64 %46, 4, !dbg !2562
  store i64 %sub, ptr %len, align 8, !dbg !2562
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2563
  %48 = extractvalue %"char[]" %47, 0, !dbg !2563
  %49 = extractvalue %"char[]" %47, 1, !dbg !2564
  %gt68 = icmp ugt i64 4, %49, !dbg !2564
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2564
  br i1 %50, label %panic69, label %checkok79, !dbg !2564

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !2563
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !2563
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2563
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2563
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2563
  br label %loop.cond, !dbg !2563

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.132, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2565
  store %"char[]" { ptr @.str.133, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.134, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 62, [2 x i64] %56), !dbg !2568
  unreachable, !dbg !2569

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2569

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 62), !dbg !2538
  unreachable, !dbg !2538

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2558
  unreachable, !dbg !2558

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2558
  unreachable, !dbg !2558

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2561
  unreachable, !dbg !2561

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2561
  unreachable, !dbg !2561

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2561
  unreachable, !dbg !2561

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2563
  unreachable, !dbg !2563
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Lcg64Random.next_int128(ptr %0) #0 !dbg !2570 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2573
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2573
  br i1 %2, label %panic, label %checkok, !dbg !2573

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2574, metadata !DIExpression()), !dbg !2575
  %3 = load ptr, ptr %self, align 8, !dbg !2576
  %4 = call i64 @std.math.random.Lcg64Random.next_long(ptr %3), !dbg !2578
  %zext = zext i64 %4 to i128, !dbg !2578
  %shl = shl i128 %zext, 64, !dbg !2578
  %5 = freeze i128 %shl, !dbg !2578
  %6 = load ptr, ptr %self, align 8, !dbg !2576
  %7 = call i64 @std.math.random.Lcg64Random.next_long(ptr %6), !dbg !2579
  %zext3 = zext i64 %7 to i128, !dbg !2579
  %add = add i128 %5, %zext3, !dbg !2578
  ret i128 %add, !dbg !2578

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 63), !dbg !2575
  unreachable, !dbg !2575
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Lcg64Random.next_long(ptr %0) #0 !dbg !2580 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2583
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2583
  br i1 %2, label %panic, label %checkok, !dbg !2583

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2584, metadata !DIExpression()), !dbg !2585
  %3 = load ptr, ptr %self, align 8, !dbg !2586
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !2588
  %zext = zext i32 %4 to i64, !dbg !2588
  %shl = shl i64 %zext, 32, !dbg !2588
  %5 = freeze i64 %shl, !dbg !2588
  %6 = load ptr, ptr %self, align 8, !dbg !2586
  %7 = call i32 @std.math.random.Lcg64Random.next_int(ptr %6), !dbg !2589
  %zext3 = zext i32 %7 to i64, !dbg !2589
  %add = add i64 %5, %zext3, !dbg !2588
  ret i64 %add, !dbg !2588

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 64), !dbg !2585
  unreachable, !dbg !2585
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Lcg64Random.next_short(ptr %0) #0 !dbg !2590 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2593
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2593
  br i1 %2, label %panic, label %checkok, !dbg !2593

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2594, metadata !DIExpression()), !dbg !2595
  %3 = load ptr, ptr %self, align 8, !dbg !2596
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !2597
  %trunc = trunc i32 %4 to i16, !dbg !2597
  ret i16 %trunc, !dbg !2597

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 65), !dbg !2595
  unreachable, !dbg !2595
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Lcg64Random.next_byte(ptr %0) #0 !dbg !2598 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2601
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2601
  br i1 %2, label %panic, label %checkok, !dbg !2601

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2602, metadata !DIExpression()), !dbg !2603
  %3 = load ptr, ptr %self, align 8, !dbg !2604
  %4 = call i32 @std.math.random.Lcg64Random.next_int(ptr %3), !dbg !2605
  %trunc = trunc i32 %4 to i8, !dbg !2605
  ret i8 %trunc, !dbg !2605

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 66), !dbg !2603
  unreachable, !dbg !2603
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg32Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2606 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2611
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2611
  br i1 %3, label %panic, label %checkok, !dbg !2611

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2612, metadata !DIExpression()), !dbg !2613
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2614, metadata !DIExpression()), !dbg !2615
  %4 = load ptr, ptr %self, align 8, !dbg !2616
  %checknull = icmp eq ptr %4, null, !dbg !2616
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2616
  br i1 %5, label %panic3, label %checkok7, !dbg !2616

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2617, metadata !DIExpression()), !dbg !2619
  store i32 0, ptr %return_value, align 4, !dbg !2619
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 4, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2621
  %11 = load i32, ptr %return_value, align 4, !dbg !2622
  store i32 %11, ptr %4, align 4, !dbg !2622
  ret void, !dbg !2622

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 72), !dbg !2613
  unreachable, !dbg !2613

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 74), !dbg !2616
  unreachable, !dbg !2616
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Lcg32Random.next_short(ptr %0) #0 !dbg !2623 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2626
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2626
  br i1 %2, label %panic, label %checkok, !dbg !2626

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2627, metadata !DIExpression()), !dbg !2628
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2629, metadata !DIExpression()), !dbg !2630
  %3 = load ptr, ptr %self, align 8, !dbg !2631
  store ptr %3, ptr %s, align 8, !dbg !2631
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2632, metadata !DIExpression()), !dbg !2633
  %4 = load ptr, ptr %s, align 8, !dbg !2634
  %checknull = icmp eq ptr %4, null, !dbg !2634
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2634
  br i1 %5, label %panic3, label %checkok7, !dbg !2634

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !2634
  %lshr = lshr i32 %6, 16, !dbg !2635
  %7 = freeze i32 %lshr, !dbg !2635
  %trunc = trunc i32 %7 to i16, !dbg !2635
  store i16 %trunc, ptr %result, align 2, !dbg !2635
  %8 = load ptr, ptr %s, align 8, !dbg !2636
  %checknull8 = icmp eq ptr %8, null, !dbg !2636
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2636
  br i1 %9, label %panic9, label %checkok13, !dbg !2636

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !2637
  %checknull14 = icmp eq ptr %10, null, !dbg !2637
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2637
  br i1 %11, label %panic15, label %checkok19, !dbg !2637

checkok19:                                        ; preds = %checkok13
  %12 = load i32, ptr %10, align 4, !dbg !2637
  %mul = mul i32 %12, -1856014347, !dbg !2638
  %add = add i32 %mul, -1640531527, !dbg !2638
  store i32 %add, ptr %8, align 4, !dbg !2638
  %13 = load i16, ptr %result, align 2, !dbg !2639
  ret i16 %13, !dbg !2639

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 77), !dbg !2628
  unreachable, !dbg !2628

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %18 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %19 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr6, align 8
  %20 = load [2 x i64], ptr %taddr6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 80), !dbg !2634
  unreachable, !dbg !2634

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr11, align 8
  %23 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr12, align 8
  %24 = load [2 x i64], ptr %taddr12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 81), !dbg !2636
  unreachable, !dbg !2636

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr16, align 8
  %26 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr17, align 8
  %27 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr18, align 8
  %28 = load [2 x i64], ptr %taddr18, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 81), !dbg !2637
  unreachable, !dbg !2637
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg32Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2640 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2641
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2641
  br i1 %3, label %panic, label %checkok, !dbg !2641

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2642, metadata !DIExpression()), !dbg !2643
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2644, metadata !DIExpression()), !dbg !2645
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2646, metadata !DIExpression()), !dbg !2648
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !2649
  %4 = load i64, ptr %ptradd, align 8, !dbg !2649
  store i64 %4, ptr %len, align 8, !dbg !2649
  br label %loop.cond, !dbg !2650

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2651
  %lt = icmp ult i64 0, %5, !dbg !2651
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2651

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2653, metadata !DIExpression()), !dbg !2655
  %6 = load ptr, ptr %self, align 8, !dbg !2656
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !2657
  store i16 %7, ptr %value, align 2, !dbg !2657
  %8 = load i64, ptr %len, align 8, !dbg !2658
  %le = icmp ule i64 %8, 2, !dbg !2658
  br i1 %le, label %if.then, label %if.exit, !dbg !2658

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2659
  %add = add i64 0, %10, !dbg !2659
  %size = sub i64 %add, 0, !dbg !2659
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2659
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2659
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !2661
  %14 = extractvalue %"char[]" %13, 0, !dbg !2661
  %15 = extractvalue %"char[]" %13, 1, !dbg !2662
  %gt = icmp ugt i64 0, %15, !dbg !2662
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2662
  br i1 %16, label %panic5, label %checkok13, !dbg !2662

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !2661
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2661
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !2661
  %19 = extractvalue %"char[]" %18, 0, !dbg !2661
  %20 = extractvalue %"char[]" %12, 0, !dbg !2661
  %21 = extractvalue %"char[]" %12, 1, !dbg !2661
  %22 = extractvalue %"char[]" %18, 1, !dbg !2661
  %neq = icmp ne i64 %22, %21, !dbg !2661
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2661
  br i1 %23, label %panic15, label %checkok25, !dbg !2661

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !2661
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !2661
  br label %expr_block.exit, !dbg !2663

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 2, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !2664
  %29 = extractvalue %"char[]" %28, 0, !dbg !2664
  %30 = extractvalue %"char[]" %28, 1, !dbg !2664
  %gt27 = icmp sgt i64 0, %30, !dbg !2664
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2664
  br i1 %31, label %panic28, label %checkok38, !dbg !2664

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 2, !dbg !2664
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !2664
  br i1 %32, label %panic40, label %checkok50, !dbg !2664

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !2664
  %34 = insertvalue %"char[]" %33, i64 2, 1, !dbg !2664
  %35 = extractvalue %"char[]" %34, 0, !dbg !2664
  %36 = extractvalue %"char[]" %27, 0, !dbg !2664
  %37 = extractvalue %"char[]" %27, 1, !dbg !2664
  %38 = extractvalue %"char[]" %34, 1, !dbg !2664
  %neq51 = icmp ne i64 %38, %37, !dbg !2664
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !2664
  br i1 %39, label %panic52, label %checkok62, !dbg !2664

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !2664
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !2664
  %41 = load i64, ptr %len, align 8, !dbg !2665
  %sub = sub i64 %41, 2, !dbg !2665
  store i64 %sub, ptr %len, align 8, !dbg !2665
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !2666
  %43 = extractvalue %"char[]" %42, 0, !dbg !2666
  %44 = extractvalue %"char[]" %42, 1, !dbg !2667
  %gt63 = icmp ugt i64 2, %44, !dbg !2667
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !2667
  br i1 %45, label %panic64, label %checkok74, !dbg !2667

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 2, !dbg !2666
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 2, !dbg !2666
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !2666
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !2666
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !2666
  br label %loop.cond, !dbg !2666

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.135, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !2668
  store %"char[]" { ptr @.str.136, i64 11 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.137, i64 22 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 85, [2 x i64] %51), !dbg !2671
  unreachable, !dbg !2672

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2672

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 85), !dbg !2643
  unreachable, !dbg !2643

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !2661
  unreachable, !dbg !2661

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !2661
  unreachable, !dbg !2661

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !2664
  unreachable, !dbg !2664

panic40:                                          ; preds = %checkok38
  store i64 1, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !2664
  unreachable, !dbg !2664

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !2664
  unreachable, !dbg !2664

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !2666
  unreachable, !dbg !2666
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Lcg32Random.next_int128(ptr %0) #0 !dbg !2673 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2676
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2676
  br i1 %2, label %panic, label %checkok, !dbg !2676

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2677, metadata !DIExpression()), !dbg !2678
  %3 = load ptr, ptr %self, align 8, !dbg !2679
  %4 = call i64 @std.math.random.Lcg32Random.next_long(ptr %3), !dbg !2681
  %zext = zext i64 %4 to i128, !dbg !2681
  %shl = shl i128 %zext, 64, !dbg !2681
  %5 = freeze i128 %shl, !dbg !2681
  %6 = load ptr, ptr %self, align 8, !dbg !2679
  %7 = call i64 @std.math.random.Lcg32Random.next_long(ptr %6), !dbg !2682
  %zext3 = zext i64 %7 to i128, !dbg !2682
  %add = add i128 %5, %zext3, !dbg !2681
  ret i128 %add, !dbg !2681

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 86), !dbg !2678
  unreachable, !dbg !2678
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Lcg32Random.next_long(ptr %0) #0 !dbg !2683 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2686
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2686
  br i1 %2, label %panic, label %checkok, !dbg !2686

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2687, metadata !DIExpression()), !dbg !2688
  %3 = load ptr, ptr %self, align 8, !dbg !2689
  %4 = call i32 @std.math.random.Lcg32Random.next_int(ptr %3), !dbg !2691
  %zext = zext i32 %4 to i64, !dbg !2691
  %shl = shl i64 %zext, 32, !dbg !2691
  %5 = freeze i64 %shl, !dbg !2691
  %6 = load ptr, ptr %self, align 8, !dbg !2689
  %7 = call i32 @std.math.random.Lcg32Random.next_int(ptr %6), !dbg !2692
  %zext3 = zext i32 %7 to i64, !dbg !2692
  %add = add i64 %5, %zext3, !dbg !2691
  ret i64 %add, !dbg !2691

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 87), !dbg !2688
  unreachable, !dbg !2688
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Lcg32Random.next_int(ptr %0) #0 !dbg !2693 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2696
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2696
  br i1 %2, label %panic, label %checkok, !dbg !2696

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2697, metadata !DIExpression()), !dbg !2698
  %3 = load ptr, ptr %self, align 8, !dbg !2699
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !2701
  %zext = zext i16 %4 to i32, !dbg !2701
  %shl = shl i32 %zext, 16, !dbg !2701
  %5 = freeze i32 %shl, !dbg !2701
  %6 = load ptr, ptr %self, align 8, !dbg !2699
  %7 = call i16 @std.math.random.Lcg32Random.next_short(ptr %6), !dbg !2702
  %zext3 = zext i16 %7 to i32, !dbg !2702
  %add = add i32 %5, %zext3, !dbg !2701
  ret i32 %add, !dbg !2701

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 88), !dbg !2698
  unreachable, !dbg !2698
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Lcg32Random.next_byte(ptr %0) #0 !dbg !2703 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2706
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2706
  br i1 %2, label %panic, label %checkok, !dbg !2706

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2707, metadata !DIExpression()), !dbg !2708
  %3 = load ptr, ptr %self, align 8, !dbg !2709
  %4 = call i16 @std.math.random.Lcg32Random.next_short(ptr %3), !dbg !2710
  %trunc = trunc i16 %4 to i8, !dbg !2710
  ret i8 %trunc, !dbg !2710

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 89), !dbg !2708
  unreachable, !dbg !2708
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg16Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2711 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2716
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2716
  br i1 %3, label %panic, label %checkok, !dbg !2716

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2717, metadata !DIExpression()), !dbg !2718
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2719, metadata !DIExpression()), !dbg !2720
  %4 = load ptr, ptr %self, align 8, !dbg !2721
  %checknull = icmp eq ptr %4, null, !dbg !2721
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2721
  br i1 %5, label %panic3, label %checkok7, !dbg !2721

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2722, metadata !DIExpression()), !dbg !2724
  store i16 0, ptr %return_value, align 2, !dbg !2724
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 2, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2726
  %11 = load i16, ptr %return_value, align 2, !dbg !2727
  store i16 %11, ptr %4, align 2, !dbg !2727
  ret void, !dbg !2727

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 95), !dbg !2718
  unreachable, !dbg !2718

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 97), !dbg !2721
  unreachable, !dbg !2721
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Lcg16Random.next_byte(ptr %0) #0 !dbg !2728 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2731
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2731
  br i1 %2, label %panic, label %checkok, !dbg !2731

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2732, metadata !DIExpression()), !dbg !2733
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2734, metadata !DIExpression()), !dbg !2735
  %3 = load ptr, ptr %self, align 8, !dbg !2736
  store ptr %3, ptr %s, align 8, !dbg !2736
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2737, metadata !DIExpression()), !dbg !2738
  %4 = load ptr, ptr %s, align 8, !dbg !2739
  %checknull = icmp eq ptr %4, null, !dbg !2739
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2739
  br i1 %5, label %panic3, label %checkok7, !dbg !2739

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !2739
  %zext = zext i16 %6 to i32, !dbg !2739
  %lshr = lshr i32 %zext, 8, !dbg !2740
  %7 = freeze i32 %lshr, !dbg !2740
  %trunc = trunc i32 %7 to i8, !dbg !2740
  store i8 %trunc, ptr %result, align 1, !dbg !2740
  %8 = load ptr, ptr %s, align 8, !dbg !2741
  %checknull8 = icmp eq ptr %8, null, !dbg !2741
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2741
  br i1 %9, label %panic9, label %checkok13, !dbg !2741

checkok13:                                        ; preds = %checkok7
  %10 = load ptr, ptr %s, align 8, !dbg !2742
  %checknull14 = icmp eq ptr %10, null, !dbg !2742
  %11 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !2742
  br i1 %11, label %panic15, label %checkok19, !dbg !2742

checkok19:                                        ; preds = %checkok13
  %12 = load i16, ptr %10, align 2, !dbg !2742
  %zext20 = zext i16 %12 to i32, !dbg !2742
  %mul = mul i32 %zext20, 37213, !dbg !2743
  %add = add i32 %mul, 40503, !dbg !2743
  %trunc21 = trunc i32 %add to i16, !dbg !2743
  store i16 %trunc21, ptr %8, align 2, !dbg !2743
  %13 = load i8, ptr %result, align 1, !dbg !2744
  ret i8 %13, !dbg !2744

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %15 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %16 = load [2 x i64], ptr %taddr2, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 100), !dbg !2733
  unreachable, !dbg !2733

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %18 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr5, align 8
  %19 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr6, align 8
  %20 = load [2 x i64], ptr %taddr6, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 103), !dbg !2739
  unreachable, !dbg !2739

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr11, align 8
  %23 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr12, align 8
  %24 = load [2 x i64], ptr %taddr12, align 8
  %25 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %25([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 104), !dbg !2741
  unreachable, !dbg !2741

panic15:                                          ; preds = %checkok13
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr16, align 8
  %26 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr17, align 8
  %27 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr18, align 8
  %28 = load [2 x i64], ptr %taddr18, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 104), !dbg !2742
  unreachable, !dbg !2742
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Lcg16Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2745 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2746
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2746
  br i1 %3, label %panic, label %checkok, !dbg !2746

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2747, metadata !DIExpression()), !dbg !2748
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2749, metadata !DIExpression()), !dbg !2750
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2751, metadata !DIExpression()), !dbg !2753
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !2754
  %4 = load i64, ptr %ptradd, align 8, !dbg !2754
  store i64 %4, ptr %len, align 8, !dbg !2754
  br label %loop.cond, !dbg !2755

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !2756
  %lt = icmp ult i64 0, %5, !dbg !2756
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !2756

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2758, metadata !DIExpression()), !dbg !2760
  %6 = load ptr, ptr %self, align 8, !dbg !2761
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !2762
  store i8 %7, ptr %value, align 1, !dbg !2762
  %8 = load i64, ptr %len, align 8, !dbg !2763
  %le = icmp ule i64 %8, 1, !dbg !2763
  br i1 %le, label %if.then, label %if.exit, !dbg !2763

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !2764
  %add = add i64 0, %10, !dbg !2764
  %size = sub i64 %add, 0, !dbg !2764
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !2764
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2764
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !2766
  %14 = extractvalue %"char[]" %13, 0, !dbg !2766
  %15 = extractvalue %"char[]" %13, 1, !dbg !2767
  %gt = icmp ugt i64 0, %15, !dbg !2767
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2767
  br i1 %16, label %panic5, label %checkok13, !dbg !2767

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !2766
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2766
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !2766
  %19 = extractvalue %"char[]" %18, 0, !dbg !2766
  %20 = extractvalue %"char[]" %12, 0, !dbg !2766
  %21 = extractvalue %"char[]" %12, 1, !dbg !2766
  %22 = extractvalue %"char[]" %18, 1, !dbg !2766
  %neq = icmp ne i64 %22, %21, !dbg !2766
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2766
  br i1 %23, label %panic15, label %checkok25, !dbg !2766

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !2766
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !2766
  br label %expr_block.exit, !dbg !2768

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !2769
  %29 = extractvalue %"char[]" %28, 0, !dbg !2769
  %30 = extractvalue %"char[]" %28, 1, !dbg !2769
  %gt27 = icmp sgt i64 0, %30, !dbg !2769
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !2769
  br i1 %31, label %panic28, label %checkok38, !dbg !2769

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 1, !dbg !2769
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !2769
  br i1 %32, label %panic40, label %checkok50, !dbg !2769

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !2769
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !2769
  %35 = extractvalue %"char[]" %34, 0, !dbg !2769
  %36 = extractvalue %"char[]" %27, 0, !dbg !2769
  %37 = extractvalue %"char[]" %27, 1, !dbg !2769
  %38 = extractvalue %"char[]" %34, 1, !dbg !2769
  %neq51 = icmp ne i64 %38, %37, !dbg !2769
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !2769
  br i1 %39, label %panic52, label %checkok62, !dbg !2769

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !2769
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !2769
  %41 = load i64, ptr %len, align 8, !dbg !2770
  %sub = sub i64 %41, 1, !dbg !2770
  store i64 %sub, ptr %len, align 8, !dbg !2770
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !2771
  %43 = extractvalue %"char[]" %42, 0, !dbg !2771
  %44 = extractvalue %"char[]" %42, 1, !dbg !2772
  %gt63 = icmp ugt i64 1, %44, !dbg !2772
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !2772
  br i1 %45, label %panic64, label %checkok74, !dbg !2772

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 1, !dbg !2771
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !2771
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !2771
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !2771
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !2771
  br label %loop.cond, !dbg !2771

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.138, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !2773
  store %"char[]" { ptr @.str.139, i64 11 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.140, i64 22 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 108, [2 x i64] %51), !dbg !2776
  unreachable, !dbg !2777

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !2777

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 108), !dbg !2748
  unreachable, !dbg !2748

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !2766
  unreachable, !dbg !2766

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !2766
  unreachable, !dbg !2766

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !2769
  unreachable, !dbg !2769

panic40:                                          ; preds = %checkok38
  store i64 0, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !2769
  unreachable, !dbg !2769

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !2769
  unreachable, !dbg !2769

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !2771
  unreachable, !dbg !2771
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Lcg16Random.next_int128(ptr %0) #0 !dbg !2778 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2781
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2781
  br i1 %2, label %panic, label %checkok, !dbg !2781

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2782, metadata !DIExpression()), !dbg !2783
  %3 = load ptr, ptr %self, align 8, !dbg !2784
  %4 = call i64 @std.math.random.Lcg16Random.next_long(ptr %3), !dbg !2786
  %zext = zext i64 %4 to i128, !dbg !2786
  %shl = shl i128 %zext, 64, !dbg !2786
  %5 = freeze i128 %shl, !dbg !2786
  %6 = load ptr, ptr %self, align 8, !dbg !2784
  %7 = call i64 @std.math.random.Lcg16Random.next_long(ptr %6), !dbg !2787
  %zext3 = zext i64 %7 to i128, !dbg !2787
  %add = add i128 %5, %zext3, !dbg !2786
  ret i128 %add, !dbg !2786

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 109), !dbg !2783
  unreachable, !dbg !2783
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Lcg16Random.next_long(ptr %0) #0 !dbg !2788 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2791
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2791
  br i1 %2, label %panic, label %checkok, !dbg !2791

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2792, metadata !DIExpression()), !dbg !2793
  %3 = load ptr, ptr %self, align 8, !dbg !2794
  %4 = call i32 @std.math.random.Lcg16Random.next_int(ptr %3), !dbg !2796
  %zext = zext i32 %4 to i64, !dbg !2796
  %shl = shl i64 %zext, 32, !dbg !2796
  %5 = freeze i64 %shl, !dbg !2796
  %6 = load ptr, ptr %self, align 8, !dbg !2794
  %7 = call i32 @std.math.random.Lcg16Random.next_int(ptr %6), !dbg !2797
  %zext3 = zext i32 %7 to i64, !dbg !2797
  %add = add i64 %5, %zext3, !dbg !2796
  ret i64 %add, !dbg !2796

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 110), !dbg !2793
  unreachable, !dbg !2793
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Lcg16Random.next_int(ptr %0) #0 !dbg !2798 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2801
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2801
  br i1 %2, label %panic, label %checkok, !dbg !2801

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2802, metadata !DIExpression()), !dbg !2803
  %3 = load ptr, ptr %self, align 8, !dbg !2804
  %4 = call i16 @std.math.random.Lcg16Random.next_short(ptr %3), !dbg !2806
  %zext = zext i16 %4 to i32, !dbg !2806
  %shl = shl i32 %zext, 16, !dbg !2806
  %5 = freeze i32 %shl, !dbg !2806
  %6 = load ptr, ptr %self, align 8, !dbg !2804
  %7 = call i16 @std.math.random.Lcg16Random.next_short(ptr %6), !dbg !2807
  %zext3 = zext i16 %7 to i32, !dbg !2807
  %add = add i32 %5, %zext3, !dbg !2806
  ret i32 %add, !dbg !2806

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 111), !dbg !2803
  unreachable, !dbg !2803
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Lcg16Random.next_short(ptr %0) #0 !dbg !2808 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2811
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2811
  br i1 %2, label %panic, label %checkok, !dbg !2811

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2812, metadata !DIExpression()), !dbg !2813
  %3 = load ptr, ptr %self, align 8, !dbg !2814
  %4 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %3), !dbg !2816
  %zext = zext i8 %4 to i16, !dbg !2816
  %zext3 = zext i16 %zext to i32, !dbg !2816
  %shl = shl i32 %zext3, 8, !dbg !2816
  %5 = freeze i32 %shl, !dbg !2816
  %6 = load ptr, ptr %self, align 8, !dbg !2814
  %7 = call i8 @std.math.random.Lcg16Random.next_byte(ptr %6), !dbg !2817
  %zext4 = zext i8 %7 to i32, !dbg !2817
  %add = add i32 %5, %zext4, !dbg !2816
  %trunc = trunc i32 %add to i16, !dbg !2816
  ret i16 %trunc, !dbg !2816

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.128, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 112), !dbg !2813
  unreachable, !dbg !2813
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg128Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2818 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i128, align 16
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2823
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2823
  br i1 %3, label %panic, label %checkok, !dbg !2823

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2824, metadata !DIExpression()), !dbg !2825
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2826, metadata !DIExpression()), !dbg !2827
  %4 = load ptr, ptr %self, align 8, !dbg !2828
  %checknull = icmp eq ptr %4, null, !dbg !2828
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2828
  br i1 %5, label %panic3, label %checkok7, !dbg !2828

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2829, metadata !DIExpression()), !dbg !2831
  store i128 0, ptr %return_value, align 16, !dbg !2831
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 16, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2833
  %11 = load i128, ptr %return_value, align 16, !dbg !2834
  %or = or i128 %11, 1, !dbg !2835
  store i128 %or, ptr %4, align 16, !dbg !2835
  ret void, !dbg !2835

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 12), !dbg !2825
  unreachable, !dbg !2825

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 14), !dbg !2828
  unreachable, !dbg !2828
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg128Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2836 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i64, align 8
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2837
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2837
  br i1 %3, label %panic, label %checkok, !dbg !2837

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2838, metadata !DIExpression()), !dbg !2839
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2840, metadata !DIExpression()), !dbg !2841
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2842
  %4 = load i64, ptr %ptradd, align 8, !dbg !2842
  %lt = icmp ult i64 0, %4, !dbg !2842
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2842

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 18), !dbg !2842
  unreachable, !dbg !2842

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2844, metadata !DIExpression()), !dbg !2846
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2848
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2848
  store i64 %9, ptr %len, align 8, !dbg !2848
  br label %loop.cond, !dbg !2849

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2850
  %lt8 = icmp ult i64 0, %10, !dbg !2850
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2850

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2852, metadata !DIExpression()), !dbg !2854
  %11 = load ptr, ptr %self, align 8, !dbg !2855
  %12 = call i64 @std.math.random.Mcg128Random.next_long(ptr %11), !dbg !2856
  store i64 %12, ptr %value, align 8, !dbg !2856
  %13 = load i64, ptr %len, align 8, !dbg !2857
  %le = icmp ule i64 %13, 8, !dbg !2857
  br i1 %le, label %if.then, label %if.exit, !dbg !2857

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2858
  %add = add i64 0, %15, !dbg !2858
  %size = sub i64 %add, 0, !dbg !2858
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2858
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2858
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2860
  %19 = extractvalue %"char[]" %18, 0, !dbg !2860
  %20 = extractvalue %"char[]" %18, 1, !dbg !2861
  %gt = icmp ugt i64 0, %20, !dbg !2861
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2861
  br i1 %21, label %panic10, label %checkok18, !dbg !2861

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2860
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2860
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2860
  %24 = extractvalue %"char[]" %23, 0, !dbg !2860
  %25 = extractvalue %"char[]" %17, 0, !dbg !2860
  %26 = extractvalue %"char[]" %17, 1, !dbg !2860
  %27 = extractvalue %"char[]" %23, 1, !dbg !2860
  %neq = icmp ne i64 %27, %26, !dbg !2860
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2860
  br i1 %28, label %panic20, label %checkok30, !dbg !2860

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2860
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2860
  br label %expr_block.exit, !dbg !2862

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 8, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2863
  %34 = extractvalue %"char[]" %33, 0, !dbg !2863
  %35 = extractvalue %"char[]" %33, 1, !dbg !2863
  %gt32 = icmp sgt i64 0, %35, !dbg !2863
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2863
  br i1 %36, label %panic33, label %checkok43, !dbg !2863

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 8, !dbg !2863
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2863
  br i1 %37, label %panic45, label %checkok55, !dbg !2863

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2863
  %39 = insertvalue %"char[]" %38, i64 8, 1, !dbg !2863
  %40 = extractvalue %"char[]" %39, 0, !dbg !2863
  %41 = extractvalue %"char[]" %32, 0, !dbg !2863
  %42 = extractvalue %"char[]" %32, 1, !dbg !2863
  %43 = extractvalue %"char[]" %39, 1, !dbg !2863
  %neq56 = icmp ne i64 %43, %42, !dbg !2863
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2863
  br i1 %44, label %panic57, label %checkok67, !dbg !2863

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2863
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2863
  %46 = load i64, ptr %len, align 8, !dbg !2864
  %sub = sub i64 %46, 8, !dbg !2864
  store i64 %sub, ptr %len, align 8, !dbg !2864
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2865
  %48 = extractvalue %"char[]" %47, 0, !dbg !2865
  %49 = extractvalue %"char[]" %47, 1, !dbg !2866
  %gt68 = icmp ugt i64 8, %49, !dbg !2866
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2866
  br i1 %50, label %panic69, label %checkok79, !dbg !2866

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 8, !dbg !2865
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 8, !dbg !2865
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2865
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2865
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2865
  br label %loop.cond, !dbg !2865

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.146, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2867
  store %"char[]" { ptr @.str.147, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.148, i64 23 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 22, [2 x i64] %56), !dbg !2870
  unreachable, !dbg !2871

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2871

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 20), !dbg !2839
  unreachable, !dbg !2839

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2860
  unreachable, !dbg !2860

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2860
  unreachable, !dbg !2860

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2863
  unreachable, !dbg !2863

panic45:                                          ; preds = %checkok43
  store i64 7, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2863
  unreachable, !dbg !2863

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2863
  unreachable, !dbg !2863

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 8, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2865
  unreachable, !dbg !2865
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Mcg128Random.next_long(ptr %0) #0 !dbg !2872 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i64, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2875
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2875
  br i1 %2, label %panic, label %checkok, !dbg !2875

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2876, metadata !DIExpression()), !dbg !2877
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2878, metadata !DIExpression()), !dbg !2879
  %3 = load ptr, ptr %self, align 8, !dbg !2880
  store ptr %3, ptr %s, align 8, !dbg !2880
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2881, metadata !DIExpression()), !dbg !2882
  %4 = load ptr, ptr %s, align 8, !dbg !2883
  %checknull = icmp eq ptr %4, null, !dbg !2883
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2883
  br i1 %5, label %panic3, label %checkok7, !dbg !2883

checkok7:                                         ; preds = %checkok
  %6 = load i128, ptr %4, align 16, !dbg !2883
  %lshr = lshr i128 %6, 64, !dbg !2884
  %7 = freeze i128 %lshr, !dbg !2884
  %trunc = trunc i128 %7 to i64, !dbg !2884
  store i64 %trunc, ptr %result, align 8, !dbg !2884
  %8 = load ptr, ptr %s, align 8, !dbg !2885
  %checknull8 = icmp eq ptr %8, null, !dbg !2885
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2885
  br i1 %9, label %panic9, label %checkok13, !dbg !2885

checkok13:                                        ; preds = %checkok7
  %10 = load i128, ptr %8, align 16, !dbg !2885
  %mul = mul i128 %10, -129976298391535590297638237547755878347, !dbg !2886
  store i128 %mul, ptr %8, align 16, !dbg !2886
  %11 = load i64, ptr %result, align 8, !dbg !2887
  ret i64 %11, !dbg !2887

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 25), !dbg !2877
  unreachable, !dbg !2877

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 28), !dbg !2883
  unreachable, !dbg !2883

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %20 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr11, align 8
  %21 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 29), !dbg !2885
  unreachable, !dbg !2885
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Mcg128Random.next_int128(ptr %0) #0 !dbg !2888 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2891
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2891
  br i1 %2, label %panic, label %checkok, !dbg !2891

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2892, metadata !DIExpression()), !dbg !2893
  %3 = load ptr, ptr %self, align 8, !dbg !2894
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2896
  %zext = zext i64 %4 to i128, !dbg !2896
  %shl = shl i128 %zext, 64, !dbg !2896
  %5 = freeze i128 %shl, !dbg !2896
  %6 = load ptr, ptr %self, align 8, !dbg !2894
  %7 = call i64 @std.math.random.Mcg128Random.next_long(ptr %6), !dbg !2897
  %zext3 = zext i64 %7 to i128, !dbg !2897
  %add = add i128 %5, %zext3, !dbg !2896
  ret i128 %add, !dbg !2896

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 33), !dbg !2893
  unreachable, !dbg !2893
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Mcg128Random.next_int(ptr %0) #0 !dbg !2898 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2901
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2901
  br i1 %2, label %panic, label %checkok, !dbg !2901

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2902, metadata !DIExpression()), !dbg !2903
  %3 = load ptr, ptr %self, align 8, !dbg !2904
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2905
  %trunc = trunc i64 %4 to i32, !dbg !2905
  ret i32 %trunc, !dbg !2905

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 34), !dbg !2903
  unreachable, !dbg !2903
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Mcg128Random.next_short(ptr %0) #0 !dbg !2906 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2909
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2909
  br i1 %2, label %panic, label %checkok, !dbg !2909

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2910, metadata !DIExpression()), !dbg !2911
  %3 = load ptr, ptr %self, align 8, !dbg !2912
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2913
  %trunc = trunc i64 %4 to i16, !dbg !2913
  ret i16 %trunc, !dbg !2913

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 35), !dbg !2911
  unreachable, !dbg !2911
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Mcg128Random.next_byte(ptr %0) #0 !dbg !2914 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2917
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2917
  br i1 %2, label %panic, label %checkok, !dbg !2917

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2918, metadata !DIExpression()), !dbg !2919
  %3 = load ptr, ptr %self, align 8, !dbg !2920
  %4 = call i64 @std.math.random.Mcg128Random.next_long(ptr %3), !dbg !2921
  %trunc = trunc i64 %4 to i8, !dbg !2921
  ret i8 %trunc, !dbg !2921

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 36), !dbg !2919
  unreachable, !dbg !2919
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg64Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !2922 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i64, align 8
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2927
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2927
  br i1 %3, label %panic, label %checkok, !dbg !2927

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2928, metadata !DIExpression()), !dbg !2929
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !2930, metadata !DIExpression()), !dbg !2931
  %4 = load ptr, ptr %self, align 8, !dbg !2932
  %checknull = icmp eq ptr %4, null, !dbg !2932
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2932
  br i1 %5, label %panic3, label %checkok7, !dbg !2932

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !2933, metadata !DIExpression()), !dbg !2935
  store i64 0, ptr %return_value, align 8, !dbg !2935
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 8, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !2937
  %11 = load i64, ptr %return_value, align 8, !dbg !2938
  %or = or i64 %11, 1, !dbg !2936
  store i64 %or, ptr %4, align 8, !dbg !2936
  ret void, !dbg !2936

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 45), !dbg !2929
  unreachable, !dbg !2929

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 47), !dbg !2932
  unreachable, !dbg !2932
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg64Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !2939 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i32, align 4
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !2940
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !2940
  br i1 %3, label %panic, label %checkok, !dbg !2940

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2941, metadata !DIExpression()), !dbg !2942
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !2943, metadata !DIExpression()), !dbg !2944
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !2945
  %4 = load i64, ptr %ptradd, align 8, !dbg !2945
  %lt = icmp ult i64 0, %4, !dbg !2945
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !2945

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 51), !dbg !2945
  unreachable, !dbg !2945

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2947, metadata !DIExpression()), !dbg !2949
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !2951
  %9 = load i64, ptr %ptradd7, align 8, !dbg !2951
  store i64 %9, ptr %len, align 8, !dbg !2951
  br label %loop.cond, !dbg !2952

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !2953
  %lt8 = icmp ult i64 0, %10, !dbg !2953
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !2953

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2955, metadata !DIExpression()), !dbg !2957
  %11 = load ptr, ptr %self, align 8, !dbg !2958
  %12 = call i32 @std.math.random.Mcg64Random.next_int(ptr %11), !dbg !2959
  store i32 %12, ptr %value, align 4, !dbg !2959
  %13 = load i64, ptr %len, align 8, !dbg !2960
  %le = icmp ule i64 %13, 4, !dbg !2960
  br i1 %le, label %if.then, label %if.exit, !dbg !2960

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !2961
  %add = add i64 0, %15, !dbg !2961
  %size = sub i64 %add, 0, !dbg !2961
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !2961
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !2961
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !2963
  %19 = extractvalue %"char[]" %18, 0, !dbg !2963
  %20 = extractvalue %"char[]" %18, 1, !dbg !2964
  %gt = icmp ugt i64 0, %20, !dbg !2964
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2964
  br i1 %21, label %panic10, label %checkok18, !dbg !2964

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !2963
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !2963
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !2963
  %24 = extractvalue %"char[]" %23, 0, !dbg !2963
  %25 = extractvalue %"char[]" %17, 0, !dbg !2963
  %26 = extractvalue %"char[]" %17, 1, !dbg !2963
  %27 = extractvalue %"char[]" %23, 1, !dbg !2963
  %neq = icmp ne i64 %27, %26, !dbg !2963
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !2963
  br i1 %28, label %panic20, label %checkok30, !dbg !2963

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !2963
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !2963
  br label %expr_block.exit, !dbg !2965

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 4, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !2966
  %34 = extractvalue %"char[]" %33, 0, !dbg !2966
  %35 = extractvalue %"char[]" %33, 1, !dbg !2966
  %gt32 = icmp sgt i64 0, %35, !dbg !2966
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !2966
  br i1 %36, label %panic33, label %checkok43, !dbg !2966

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 4, !dbg !2966
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !2966
  br i1 %37, label %panic45, label %checkok55, !dbg !2966

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !2966
  %39 = insertvalue %"char[]" %38, i64 4, 1, !dbg !2966
  %40 = extractvalue %"char[]" %39, 0, !dbg !2966
  %41 = extractvalue %"char[]" %32, 0, !dbg !2966
  %42 = extractvalue %"char[]" %32, 1, !dbg !2966
  %43 = extractvalue %"char[]" %39, 1, !dbg !2966
  %neq56 = icmp ne i64 %43, %42, !dbg !2966
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !2966
  br i1 %44, label %panic57, label %checkok67, !dbg !2966

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !2966
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !2966
  %46 = load i64, ptr %len, align 8, !dbg !2967
  %sub = sub i64 %46, 4, !dbg !2967
  store i64 %sub, ptr %len, align 8, !dbg !2967
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !2968
  %48 = extractvalue %"char[]" %47, 0, !dbg !2968
  %49 = extractvalue %"char[]" %47, 1, !dbg !2969
  %gt68 = icmp ugt i64 4, %49, !dbg !2969
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !2969
  br i1 %50, label %panic69, label %checkok79, !dbg !2969

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 4, !dbg !2968
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 4, !dbg !2968
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !2968
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !2968
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !2968
  br label %loop.cond, !dbg !2968

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.149, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !2970
  store %"char[]" { ptr @.str.150, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.151, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 55, [2 x i64] %56), !dbg !2973
  unreachable, !dbg !2974

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !2974

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 53), !dbg !2942
  unreachable, !dbg !2942

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !2963
  unreachable, !dbg !2963

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !2963
  unreachable, !dbg !2963

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !2966
  unreachable, !dbg !2966

panic45:                                          ; preds = %checkok43
  store i64 3, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !2966
  unreachable, !dbg !2966

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !2966
  unreachable, !dbg !2966

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 4, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !2968
  unreachable, !dbg !2968
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Mcg64Random.next_int(ptr %0) #0 !dbg !2975 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i32, align 4
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !2978
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2978
  br i1 %2, label %panic, label %checkok, !dbg !2978

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2979, metadata !DIExpression()), !dbg !2980
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2981, metadata !DIExpression()), !dbg !2982
  %3 = load ptr, ptr %self, align 8, !dbg !2983
  store ptr %3, ptr %s, align 8, !dbg !2983
  call void @llvm.dbg.declare(metadata ptr %result, metadata !2984, metadata !DIExpression()), !dbg !2985
  %4 = load ptr, ptr %s, align 8, !dbg !2986
  %checknull = icmp eq ptr %4, null, !dbg !2986
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !2986
  br i1 %5, label %panic3, label %checkok7, !dbg !2986

checkok7:                                         ; preds = %checkok
  %6 = load i64, ptr %4, align 8, !dbg !2986
  %lshr = lshr i64 %6, 32, !dbg !2987
  %7 = freeze i64 %lshr, !dbg !2987
  %trunc = trunc i64 %7 to i32, !dbg !2987
  store i32 %trunc, ptr %result, align 4, !dbg !2987
  %8 = load ptr, ptr %s, align 8, !dbg !2988
  %checknull8 = icmp eq ptr %8, null, !dbg !2988
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !2988
  br i1 %9, label %panic9, label %checkok13, !dbg !2988

checkok13:                                        ; preds = %checkok7
  %10 = load i64, ptr %8, align 8, !dbg !2988
  %mul = mul i64 %10, -1065810590584100411, !dbg !2989
  store i64 %mul, ptr %8, align 8, !dbg !2989
  %11 = load i32, ptr %result, align 4, !dbg !2990
  ret i32 %11, !dbg !2990

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 58), !dbg !2980
  unreachable, !dbg !2980

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 61), !dbg !2986
  unreachable, !dbg !2986

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %20 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr11, align 8
  %21 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 62), !dbg !2988
  unreachable, !dbg !2988
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Mcg64Random.next_int128(ptr %0) #0 !dbg !2991 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !2994
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !2994
  br i1 %2, label %panic, label %checkok, !dbg !2994

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !2995, metadata !DIExpression()), !dbg !2996
  %3 = load ptr, ptr %self, align 8, !dbg !2997
  %4 = call i64 @std.math.random.Mcg64Random.next_long(ptr %3), !dbg !2999
  %zext = zext i64 %4 to i128, !dbg !2999
  %shl = shl i128 %zext, 64, !dbg !2999
  %5 = freeze i128 %shl, !dbg !2999
  %6 = load ptr, ptr %self, align 8, !dbg !2997
  %7 = call i64 @std.math.random.Mcg64Random.next_long(ptr %6), !dbg !3000
  %zext3 = zext i64 %7 to i128, !dbg !3000
  %add = add i128 %5, %zext3, !dbg !2999
  ret i128 %add, !dbg !2999

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 66), !dbg !2996
  unreachable, !dbg !2996
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Mcg64Random.next_long(ptr %0) #0 !dbg !3001 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3004
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3004
  br i1 %2, label %panic, label %checkok, !dbg !3004

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3005, metadata !DIExpression()), !dbg !3006
  %3 = load ptr, ptr %self, align 8, !dbg !3007
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !3009
  %zext = zext i32 %4 to i64, !dbg !3009
  %shl = shl i64 %zext, 32, !dbg !3009
  %5 = freeze i64 %shl, !dbg !3009
  %6 = load ptr, ptr %self, align 8, !dbg !3007
  %7 = call i32 @std.math.random.Mcg64Random.next_int(ptr %6), !dbg !3010
  %zext3 = zext i32 %7 to i64, !dbg !3010
  %add = add i64 %5, %zext3, !dbg !3009
  ret i64 %add, !dbg !3009

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 67), !dbg !3006
  unreachable, !dbg !3006
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Mcg64Random.next_short(ptr %0) #0 !dbg !3011 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3014
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3014
  br i1 %2, label %panic, label %checkok, !dbg !3014

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3015, metadata !DIExpression()), !dbg !3016
  %3 = load ptr, ptr %self, align 8, !dbg !3017
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !3018
  %trunc = trunc i32 %4 to i16, !dbg !3018
  ret i16 %trunc, !dbg !3018

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 68), !dbg !3016
  unreachable, !dbg !3016
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Mcg64Random.next_byte(ptr %0) #0 !dbg !3019 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3022
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3022
  br i1 %2, label %panic, label %checkok, !dbg !3022

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3023, metadata !DIExpression()), !dbg !3024
  %3 = load ptr, ptr %self, align 8, !dbg !3025
  %4 = call i32 @std.math.random.Mcg64Random.next_int(ptr %3), !dbg !3026
  %trunc = trunc i32 %4 to i8, !dbg !3026
  ret i8 %trunc, !dbg !3026

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 69), !dbg !3024
  unreachable, !dbg !3024
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg32Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !3027 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i32, align 4
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3032
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3032
  br i1 %3, label %panic, label %checkok, !dbg !3032

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3033, metadata !DIExpression()), !dbg !3034
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !3035, metadata !DIExpression()), !dbg !3036
  %4 = load ptr, ptr %self, align 8, !dbg !3037
  %checknull = icmp eq ptr %4, null, !dbg !3037
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3037
  br i1 %5, label %panic3, label %checkok7, !dbg !3037

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !3038, metadata !DIExpression()), !dbg !3040
  store i32 0, ptr %return_value, align 4, !dbg !3040
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 4, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !3042
  %11 = load i32, ptr %return_value, align 4, !dbg !3043
  %or = or i32 %11, 1, !dbg !3041
  store i32 %or, ptr %4, align 4, !dbg !3041
  ret void, !dbg !3041

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 76), !dbg !3034
  unreachable, !dbg !3034

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 78), !dbg !3037
  unreachable, !dbg !3037
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Mcg32Random.next_short(ptr %0) #0 !dbg !3044 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i16, align 2
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3047
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3047
  br i1 %2, label %panic, label %checkok, !dbg !3047

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3048, metadata !DIExpression()), !dbg !3049
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3050, metadata !DIExpression()), !dbg !3051
  %3 = load ptr, ptr %self, align 8, !dbg !3052
  store ptr %3, ptr %s, align 8, !dbg !3052
  call void @llvm.dbg.declare(metadata ptr %result, metadata !3053, metadata !DIExpression()), !dbg !3054
  %4 = load ptr, ptr %s, align 8, !dbg !3055
  %checknull = icmp eq ptr %4, null, !dbg !3055
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3055
  br i1 %5, label %panic3, label %checkok7, !dbg !3055

checkok7:                                         ; preds = %checkok
  %6 = load i32, ptr %4, align 4, !dbg !3055
  %lshr = lshr i32 %6, 16, !dbg !3056
  %7 = freeze i32 %lshr, !dbg !3056
  %trunc = trunc i32 %7 to i16, !dbg !3056
  store i16 %trunc, ptr %result, align 2, !dbg !3056
  %8 = load ptr, ptr %s, align 8, !dbg !3057
  %checknull8 = icmp eq ptr %8, null, !dbg !3057
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3057
  br i1 %9, label %panic9, label %checkok13, !dbg !3057

checkok13:                                        ; preds = %checkok7
  %10 = load i32, ptr %8, align 4, !dbg !3057
  %mul = mul i32 %10, -1814600227, !dbg !3058
  store i32 %mul, ptr %8, align 4, !dbg !3058
  %11 = load i16, ptr %result, align 2, !dbg !3059
  ret i16 %11, !dbg !3059

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 81), !dbg !3049
  unreachable, !dbg !3049

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 84), !dbg !3055
  unreachable, !dbg !3055

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %20 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr11, align 8
  %21 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 85), !dbg !3057
  unreachable, !dbg !3057
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg32Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !3060 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %bytes6 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i16, align 2
  %taddr9 = alloca ptr, align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr21 = alloca i64, align 8
  %taddr22 = alloca i64, align 8
  %taddr23 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %varargslots26 = alloca [2 x %any], align 8
  %taddr29 = alloca %"any[]", align 8
  %taddr31 = alloca ptr, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %taddr70 = alloca i64, align 8
  %taddr71 = alloca i64, align 8
  %taddr72 = alloca %"char[]", align 8
  %taddr73 = alloca %"char[]", align 8
  %taddr74 = alloca %"char[]", align 8
  %varargslots75 = alloca [2 x %any], align 8
  %taddr78 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3061
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3061
  br i1 %3, label %panic, label %checkok, !dbg !3061

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3062, metadata !DIExpression()), !dbg !3063
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3064, metadata !DIExpression()), !dbg !3065
  %ptradd = getelementptr inbounds i8, ptr %bytes, i64 8, !dbg !3066
  %4 = load i64, ptr %ptradd, align 8, !dbg !3066
  %lt = icmp ult i64 0, %4, !dbg !3066
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !3066

assert_fail:                                      ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.38, i64 34 }, ptr %taddr3, align 8
  %5 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr4, align 8
  %6 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr5, align 8
  %7 = load [2 x i64], ptr %taddr5, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 90), !dbg !3066
  unreachable, !dbg !3066

assert_ok:                                        ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes6, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3068, metadata !DIExpression()), !dbg !3070
  %ptradd7 = getelementptr inbounds i8, ptr %bytes6, i64 8, !dbg !3071
  %9 = load i64, ptr %ptradd7, align 8, !dbg !3071
  store i64 %9, ptr %len, align 8, !dbg !3071
  br label %loop.cond, !dbg !3072

loop.cond:                                        ; preds = %checkok79, %assert_ok
  %10 = load i64, ptr %len, align 8, !dbg !3073
  %lt8 = icmp ult i64 0, %10, !dbg !3073
  br i1 %lt8, label %loop.body, label %loop.exit, !dbg !3073

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3075, metadata !DIExpression()), !dbg !3077
  %11 = load ptr, ptr %self, align 8, !dbg !3078
  %12 = call i16 @std.math.random.Mcg32Random.next_short(ptr %11), !dbg !3079
  store i16 %12, ptr %value, align 2, !dbg !3079
  %13 = load i64, ptr %len, align 8, !dbg !3080
  %le = icmp ule i64 %13, 2, !dbg !3080
  br i1 %le, label %if.then, label %if.exit, !dbg !3080

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr9, align 8
  %14 = load ptr, ptr %taddr9, align 8
  %15 = load i64, ptr %len, align 8, !dbg !3081
  %add = add i64 0, %15, !dbg !3081
  %size = sub i64 %add, 0, !dbg !3081
  %16 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !3081
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !3081
  %18 = load %"char[]", ptr %bytes6, align 8, !dbg !3083
  %19 = extractvalue %"char[]" %18, 0, !dbg !3083
  %20 = extractvalue %"char[]" %18, 1, !dbg !3084
  %gt = icmp ugt i64 0, %20, !dbg !3084
  %21 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3084
  br i1 %21, label %panic10, label %checkok18, !dbg !3084

checkok18:                                        ; preds = %if.then
  %size19 = sub i64 %20, 0, !dbg !3083
  %22 = insertvalue %"char[]" undef, ptr %19, 0, !dbg !3083
  %23 = insertvalue %"char[]" %22, i64 %size19, 1, !dbg !3083
  %24 = extractvalue %"char[]" %23, 0, !dbg !3083
  %25 = extractvalue %"char[]" %17, 0, !dbg !3083
  %26 = extractvalue %"char[]" %17, 1, !dbg !3083
  %27 = extractvalue %"char[]" %23, 1, !dbg !3083
  %neq = icmp ne i64 %27, %26, !dbg !3083
  %28 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3083
  br i1 %28, label %panic20, label %checkok30, !dbg !3083

checkok30:                                        ; preds = %checkok18
  %29 = mul i64 %26, 1, !dbg !3083
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %24, ptr align 1 %25, i64 %29, i1 false), !dbg !3083
  br label %expr_block.exit, !dbg !3085

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr31, align 8
  %30 = load ptr, ptr %taddr31, align 8
  %31 = insertvalue %"char[]" undef, ptr %30, 0
  %32 = insertvalue %"char[]" %31, i64 2, 1
  %33 = load %"char[]", ptr %bytes6, align 8, !dbg !3086
  %34 = extractvalue %"char[]" %33, 0, !dbg !3086
  %35 = extractvalue %"char[]" %33, 1, !dbg !3086
  %gt32 = icmp sgt i64 0, %35, !dbg !3086
  %36 = call i1 @llvm.expect.i1(i1 %gt32, i1 false), !dbg !3086
  br i1 %36, label %panic33, label %checkok43, !dbg !3086

checkok43:                                        ; preds = %if.exit
  %lt44 = icmp slt i64 %35, 2, !dbg !3086
  %37 = call i1 @llvm.expect.i1(i1 %lt44, i1 false), !dbg !3086
  br i1 %37, label %panic45, label %checkok55, !dbg !3086

checkok55:                                        ; preds = %checkok43
  %38 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !3086
  %39 = insertvalue %"char[]" %38, i64 2, 1, !dbg !3086
  %40 = extractvalue %"char[]" %39, 0, !dbg !3086
  %41 = extractvalue %"char[]" %32, 0, !dbg !3086
  %42 = extractvalue %"char[]" %32, 1, !dbg !3086
  %43 = extractvalue %"char[]" %39, 1, !dbg !3086
  %neq56 = icmp ne i64 %43, %42, !dbg !3086
  %44 = call i1 @llvm.expect.i1(i1 %neq56, i1 false), !dbg !3086
  br i1 %44, label %panic57, label %checkok67, !dbg !3086

checkok67:                                        ; preds = %checkok55
  %45 = mul i64 %42, 1, !dbg !3086
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %40, ptr align 1 %41, i64 %45, i1 false), !dbg !3086
  %46 = load i64, ptr %len, align 8, !dbg !3087
  %sub = sub i64 %46, 2, !dbg !3087
  store i64 %sub, ptr %len, align 8, !dbg !3087
  %47 = load %"char[]", ptr %bytes6, align 8, !dbg !3088
  %48 = extractvalue %"char[]" %47, 0, !dbg !3088
  %49 = extractvalue %"char[]" %47, 1, !dbg !3089
  %gt68 = icmp ugt i64 2, %49, !dbg !3089
  %50 = call i1 @llvm.expect.i1(i1 %gt68, i1 false), !dbg !3089
  br i1 %50, label %panic69, label %checkok79, !dbg !3089

checkok79:                                        ; preds = %checkok67
  %size80 = sub i64 %49, 2, !dbg !3088
  %ptradd81 = getelementptr inbounds i8, ptr %48, i64 2, !dbg !3088
  %51 = insertvalue %"char[]" undef, ptr %ptradd81, 0, !dbg !3088
  %52 = insertvalue %"char[]" %51, i64 %size80, 1, !dbg !3088
  store %"char[]" %52, ptr %bytes6, align 8, !dbg !3088
  br label %loop.cond, !dbg !3088

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.152, i64 30 }, ptr %string, align 8
  %53 = load [2 x i64], ptr %string, align 8, !dbg !3090
  store %"char[]" { ptr @.str.153, i64 11 }, ptr %taddr82, align 8
  %54 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.str.154, i64 22 }, ptr %taddr83, align 8
  %55 = load [2 x i64], ptr %taddr83, align 8
  store %"any[]" zeroinitializer, ptr %taddr84, align 8
  %56 = load [2 x i64], ptr %taddr84, align 8
  call void @std.core.builtin.panicf([2 x i64] %53, [2 x i64] %54, [2 x i64] %55, i32 92, [2 x i64] %56), !dbg !3093
  unreachable, !dbg !3094

expr_block.exit:                                  ; preds = %checkok30
  ret void, !dbg !3094

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %57 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %58 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %59 = load [2 x i64], ptr %taddr2, align 8
  %60 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %60([2 x i64] %57, [2 x i64] %58, [2 x i64] %59, i32 92), !dbg !3063
  unreachable, !dbg !3063

panic10:                                          ; preds = %if.then
  store i64 %20, ptr %taddr11, align 8
  %61 = insertvalue %any undef, ptr %taddr11, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr12, align 8
  %63 = insertvalue %any undef, ptr %taddr12, 0
  %64 = insertvalue %any %63, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr13, align 8
  %65 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr14, align 8
  %66 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr15, align 8
  %67 = load [2 x i64], ptr %taddr15, align 8
  store %any %62, ptr %varargslots, align 8
  %ptradd16 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %64, ptr %ptradd16, align 8
  %68 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %68, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %69 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %65, [2 x i64] %66, [2 x i64] %67, i32 153, [2 x i64] %69), !dbg !3083
  unreachable, !dbg !3083

panic20:                                          ; preds = %checkok18
  store i64 %27, ptr %taddr21, align 8
  %70 = insertvalue %any undef, ptr %taddr21, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %26, ptr %taddr22, align 8
  %72 = insertvalue %any undef, ptr %taddr22, 0
  %73 = insertvalue %any %72, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr23, align 8
  %74 = load [2 x i64], ptr %taddr23, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr24, align 8
  %75 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr25, align 8
  %76 = load [2 x i64], ptr %taddr25, align 8
  store %any %71, ptr %varargslots26, align 8
  %ptradd27 = getelementptr inbounds i8, ptr %varargslots26, i64 16
  store %any %73, ptr %ptradd27, align 8
  %77 = insertvalue %"any[]" undef, ptr %varargslots26, 0
  %"$$temp28" = insertvalue %"any[]" %77, i64 2, 1
  store %"any[]" %"$$temp28", ptr %taddr29, align 8
  %78 = load [2 x i64], ptr %taddr29, align 8
  call void @std.core.builtin.panicf([2 x i64] %74, [2 x i64] %75, [2 x i64] %76, i32 153, [2 x i64] %78), !dbg !3083
  unreachable, !dbg !3083

panic33:                                          ; preds = %if.exit
  store i64 %35, ptr %taddr34, align 8
  %79 = insertvalue %any undef, ptr %taddr34, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr35, align 8
  %81 = insertvalue %any undef, ptr %taddr35, 0
  %82 = insertvalue %any %81, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr36, align 8
  %83 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr37, align 8
  %84 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr38, align 8
  %85 = load [2 x i64], ptr %taddr38, align 8
  store %any %80, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %82, ptr %ptradd40, align 8
  %86 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %86, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %87 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %83, [2 x i64] %84, [2 x i64] %85, i32 156, [2 x i64] %87), !dbg !3086
  unreachable, !dbg !3086

panic45:                                          ; preds = %checkok43
  store i64 1, ptr %taddr46, align 8
  %88 = insertvalue %any undef, ptr %taddr46, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %35, ptr %taddr47, align 8
  %90 = insertvalue %any undef, ptr %taddr47, 0
  %91 = insertvalue %any %90, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr48, align 8
  %92 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr49, align 8
  %93 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr50, align 8
  %94 = load [2 x i64], ptr %taddr50, align 8
  store %any %89, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %91, ptr %ptradd52, align 8
  %95 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %95, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %96 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %92, [2 x i64] %93, [2 x i64] %94, i32 156, [2 x i64] %96), !dbg !3086
  unreachable, !dbg !3086

panic57:                                          ; preds = %checkok55
  store i64 %43, ptr %taddr58, align 8
  %97 = insertvalue %any undef, ptr %taddr58, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr59, align 8
  %99 = insertvalue %any undef, ptr %taddr59, 0
  %100 = insertvalue %any %99, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr60, align 8
  %101 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr61, align 8
  %102 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr62, align 8
  %103 = load [2 x i64], ptr %taddr62, align 8
  store %any %98, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %100, ptr %ptradd64, align 8
  %104 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %104, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %105 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %101, [2 x i64] %102, [2 x i64] %103, i32 156, [2 x i64] %105), !dbg !3086
  unreachable, !dbg !3086

panic69:                                          ; preds = %checkok67
  store i64 %49, ptr %taddr70, align 8
  %106 = insertvalue %any undef, ptr %taddr70, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 2, ptr %taddr71, align 8
  %108 = insertvalue %any undef, ptr %taddr71, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr72, align 8
  %110 = load [2 x i64], ptr %taddr72, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr73, align 8
  %111 = load [2 x i64], ptr %taddr73, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr74, align 8
  %112 = load [2 x i64], ptr %taddr74, align 8
  store %any %107, ptr %varargslots75, align 8
  %ptradd76 = getelementptr inbounds i8, ptr %varargslots75, i64 16
  store %any %109, ptr %ptradd76, align 8
  %113 = insertvalue %"any[]" undef, ptr %varargslots75, 0
  %"$$temp77" = insertvalue %"any[]" %113, i64 2, 1
  store %"any[]" %"$$temp77", ptr %taddr78, align 8
  %114 = load [2 x i64], ptr %taddr78, align 8
  call void @std.core.builtin.panicf([2 x i64] %110, [2 x i64] %111, [2 x i64] %112, i32 158, [2 x i64] %114), !dbg !3088
  unreachable, !dbg !3088
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Mcg32Random.next_int128(ptr %0) #0 !dbg !3095 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3098
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3098
  br i1 %2, label %panic, label %checkok, !dbg !3098

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3099, metadata !DIExpression()), !dbg !3100
  %3 = load ptr, ptr %self, align 8, !dbg !3101
  %4 = call i64 @std.math.random.Mcg32Random.next_long(ptr %3), !dbg !3103
  %zext = zext i64 %4 to i128, !dbg !3103
  %shl = shl i128 %zext, 64, !dbg !3103
  %5 = freeze i128 %shl, !dbg !3103
  %6 = load ptr, ptr %self, align 8, !dbg !3101
  %7 = call i64 @std.math.random.Mcg32Random.next_long(ptr %6), !dbg !3104
  %zext3 = zext i64 %7 to i128, !dbg !3104
  %add = add i128 %5, %zext3, !dbg !3103
  ret i128 %add, !dbg !3103

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 93), !dbg !3100
  unreachable, !dbg !3100
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Mcg32Random.next_long(ptr %0) #0 !dbg !3105 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3108
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3108
  br i1 %2, label %panic, label %checkok, !dbg !3108

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3109, metadata !DIExpression()), !dbg !3110
  %3 = load ptr, ptr %self, align 8, !dbg !3111
  %4 = call i32 @std.math.random.Mcg32Random.next_int(ptr %3), !dbg !3113
  %zext = zext i32 %4 to i64, !dbg !3113
  %shl = shl i64 %zext, 32, !dbg !3113
  %5 = freeze i64 %shl, !dbg !3113
  %6 = load ptr, ptr %self, align 8, !dbg !3111
  %7 = call i32 @std.math.random.Mcg32Random.next_int(ptr %6), !dbg !3114
  %zext3 = zext i32 %7 to i64, !dbg !3114
  %add = add i64 %5, %zext3, !dbg !3113
  ret i64 %add, !dbg !3113

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 94), !dbg !3110
  unreachable, !dbg !3110
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Mcg32Random.next_int(ptr %0) #0 !dbg !3115 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3118
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3118
  br i1 %2, label %panic, label %checkok, !dbg !3118

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3119, metadata !DIExpression()), !dbg !3120
  %3 = load ptr, ptr %self, align 8, !dbg !3121
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !3123
  %zext = zext i16 %4 to i32, !dbg !3123
  %shl = shl i32 %zext, 16, !dbg !3123
  %5 = freeze i32 %shl, !dbg !3123
  %6 = load ptr, ptr %self, align 8, !dbg !3121
  %7 = call i16 @std.math.random.Mcg32Random.next_short(ptr %6), !dbg !3124
  %zext3 = zext i16 %7 to i32, !dbg !3124
  %add = add i32 %5, %zext3, !dbg !3123
  ret i32 %add, !dbg !3123

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 95), !dbg !3120
  unreachable, !dbg !3120
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Mcg32Random.next_byte(ptr %0) #0 !dbg !3125 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3128
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3128
  br i1 %2, label %panic, label %checkok, !dbg !3128

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3129, metadata !DIExpression()), !dbg !3130
  %3 = load ptr, ptr %self, align 8, !dbg !3131
  %4 = call i16 @std.math.random.Mcg32Random.next_short(ptr %3), !dbg !3132
  %trunc = trunc i16 %4 to i8, !dbg !3132
  ret i8 %trunc, !dbg !3132

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 96), !dbg !3130
  unreachable, !dbg !3130
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg16Random.set_seed(ptr %0, [2 x i64] %1) #0 !dbg !3133 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %seed = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %input = alloca %"char[]", align 8
  %return_value = alloca i16, align 2
  %taddr8 = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3138
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3138
  br i1 %3, label %panic, label %checkok, !dbg !3138

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3139, metadata !DIExpression()), !dbg !3140
  store [2 x i64] %1, ptr %seed, align 8
  call void @llvm.dbg.declare(metadata ptr %seed, metadata !3141, metadata !DIExpression()), !dbg !3142
  %4 = load ptr, ptr %self, align 8, !dbg !3143
  %checknull = icmp eq ptr %4, null, !dbg !3143
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3143
  br i1 %5, label %panic3, label %checkok7, !dbg !3143

checkok7:                                         ; preds = %checkok
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %input, ptr align 8 %seed, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %return_value, metadata !3144, metadata !DIExpression()), !dbg !3146
  store i16 0, ptr %return_value, align 2, !dbg !3146
  store ptr %return_value, ptr %taddr8, align 8
  %6 = load ptr, ptr %taddr8, align 8
  %7 = insertvalue %"char[]" undef, ptr %6, 0
  %8 = insertvalue %"char[]" %7, i64 2, 1
  %9 = load [2 x i64], ptr %input, align 8
  store %"char[]" %8, ptr %taddr9, align 8
  %10 = load [2 x i64], ptr %taddr9, align 8
  call void @std.math.random.seeder([2 x i64] %9, [2 x i64] %10), !dbg !3148
  %11 = load i16, ptr %return_value, align 2, !dbg !3149
  %or = or i16 %11, 1, !dbg !3147
  store i16 %or, ptr %4, align 2, !dbg !3147
  ret void, !dbg !3147

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 102), !dbg !3140
  unreachable, !dbg !3140

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.34, i64 45 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.33, i64 8 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 104), !dbg !3143
  unreachable, !dbg !3143
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.math.random.Mcg16Random.next_byte(ptr %0) #0 !dbg !3150 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %s = alloca ptr, align 8
  %result = alloca i8, align 1
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %1 = icmp eq ptr %0, null, !dbg !3153
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3153
  br i1 %2, label %panic, label %checkok, !dbg !3153

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3154, metadata !DIExpression()), !dbg !3155
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3156, metadata !DIExpression()), !dbg !3157
  %3 = load ptr, ptr %self, align 8, !dbg !3158
  store ptr %3, ptr %s, align 8, !dbg !3158
  call void @llvm.dbg.declare(metadata ptr %result, metadata !3159, metadata !DIExpression()), !dbg !3160
  %4 = load ptr, ptr %s, align 8, !dbg !3161
  %checknull = icmp eq ptr %4, null, !dbg !3161
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !3161
  br i1 %5, label %panic3, label %checkok7, !dbg !3161

checkok7:                                         ; preds = %checkok
  %6 = load i16, ptr %4, align 2, !dbg !3161
  %zext = zext i16 %6 to i32, !dbg !3161
  %lshr = lshr i32 %zext, 8, !dbg !3162
  %7 = freeze i32 %lshr, !dbg !3162
  %trunc = trunc i32 %7 to i8, !dbg !3162
  store i8 %trunc, ptr %result, align 1, !dbg !3162
  %8 = load ptr, ptr %s, align 8, !dbg !3163
  %checknull8 = icmp eq ptr %8, null, !dbg !3163
  %9 = call i1 @llvm.expect.i1(i1 %checknull8, i1 false), !dbg !3163
  br i1 %9, label %panic9, label %checkok13, !dbg !3163

checkok13:                                        ; preds = %checkok7
  %10 = load i16, ptr %8, align 2, !dbg !3163
  %mul = mul i16 %10, -27691, !dbg !3164
  store i16 %mul, ptr %8, align 2, !dbg !3164
  %11 = load i8, ptr %result, align 1, !dbg !3165
  ret i8 %11, !dbg !3165

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %12 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %13 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr2, align 8
  %14 = load [2 x i64], ptr %taddr2, align 8
  %15 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %15([2 x i64] %12, [2 x i64] %13, [2 x i64] %14, i32 107), !dbg !3155
  unreachable, !dbg !3155

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr6, align 8
  %18 = load [2 x i64], ptr %taddr6, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 110), !dbg !3161
  unreachable, !dbg !3161

panic9:                                           ; preds = %checkok7
  store %"char[]" { ptr @.panic_msg.36, i64 42 }, ptr %taddr10, align 8
  %20 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr11, align 8
  %21 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.46, i64 9 }, ptr %taddr12, align 8
  %22 = load [2 x i64], ptr %taddr12, align 8
  %23 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %23([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 111), !dbg !3163
  unreachable, !dbg !3163
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.math.random.Mcg16Random.next_bytes(ptr %0, [2 x i64] %1) #0 !dbg !3166 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %bytes = alloca %"char[]", align 8
  %bytes3 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %value = alloca i8, align 1
  %taddr4 = alloca ptr, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr26 = alloca ptr, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca i64, align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %taddr33 = alloca %"char[]", align 8
  %varargslots34 = alloca [2 x %any], align 8
  %taddr37 = alloca %"any[]", align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca i64, align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %taddr45 = alloca %"char[]", align 8
  %varargslots46 = alloca [2 x %any], align 8
  %taddr49 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr65 = alloca i64, align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca %"char[]", align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %varargslots70 = alloca [2 x %any], align 8
  %taddr73 = alloca %"any[]", align 8
  %string = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"any[]", align 8
  %2 = icmp eq ptr %0, null, !dbg !3167
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !3167
  br i1 %3, label %panic, label %checkok, !dbg !3167

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3168, metadata !DIExpression()), !dbg !3169
  store [2 x i64] %1, ptr %bytes, align 8
  call void @llvm.dbg.declare(metadata ptr %bytes, metadata !3170, metadata !DIExpression()), !dbg !3171
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %bytes3, ptr align 8 %bytes, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3172, metadata !DIExpression()), !dbg !3174
  %ptradd = getelementptr inbounds i8, ptr %bytes3, i64 8, !dbg !3175
  %4 = load i64, ptr %ptradd, align 8, !dbg !3175
  store i64 %4, ptr %len, align 8, !dbg !3175
  br label %loop.cond, !dbg !3176

loop.cond:                                        ; preds = %checkok74, %checkok
  %5 = load i64, ptr %len, align 8, !dbg !3177
  %lt = icmp ult i64 0, %5, !dbg !3177
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !3177

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %value, metadata !3179, metadata !DIExpression()), !dbg !3181
  %6 = load ptr, ptr %self, align 8, !dbg !3182
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !3183
  store i8 %7, ptr %value, align 1, !dbg !3183
  %8 = load i64, ptr %len, align 8, !dbg !3184
  %le = icmp ule i64 %8, 1, !dbg !3184
  br i1 %le, label %if.then, label %if.exit, !dbg !3184

if.then:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr4, align 8
  %9 = load ptr, ptr %taddr4, align 8
  %10 = load i64, ptr %len, align 8, !dbg !3185
  %add = add i64 0, %10, !dbg !3185
  %size = sub i64 %add, 0, !dbg !3185
  %11 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !3185
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !3185
  %13 = load %"char[]", ptr %bytes3, align 8, !dbg !3187
  %14 = extractvalue %"char[]" %13, 0, !dbg !3187
  %15 = extractvalue %"char[]" %13, 1, !dbg !3188
  %gt = icmp ugt i64 0, %15, !dbg !3188
  %16 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3188
  br i1 %16, label %panic5, label %checkok13, !dbg !3188

checkok13:                                        ; preds = %if.then
  %size14 = sub i64 %15, 0, !dbg !3187
  %17 = insertvalue %"char[]" undef, ptr %14, 0, !dbg !3187
  %18 = insertvalue %"char[]" %17, i64 %size14, 1, !dbg !3187
  %19 = extractvalue %"char[]" %18, 0, !dbg !3187
  %20 = extractvalue %"char[]" %12, 0, !dbg !3187
  %21 = extractvalue %"char[]" %12, 1, !dbg !3187
  %22 = extractvalue %"char[]" %18, 1, !dbg !3187
  %neq = icmp ne i64 %22, %21, !dbg !3187
  %23 = call i1 @llvm.expect.i1(i1 %neq, i1 false), !dbg !3187
  br i1 %23, label %panic15, label %checkok25, !dbg !3187

checkok25:                                        ; preds = %checkok13
  %24 = mul i64 %21, 1, !dbg !3187
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %19, ptr align 1 %20, i64 %24, i1 false), !dbg !3187
  br label %expr_block.exit, !dbg !3189

if.exit:                                          ; preds = %loop.body
  store ptr %value, ptr %taddr26, align 8
  %25 = load ptr, ptr %taddr26, align 8
  %26 = insertvalue %"char[]" undef, ptr %25, 0
  %27 = insertvalue %"char[]" %26, i64 1, 1
  %28 = load %"char[]", ptr %bytes3, align 8, !dbg !3190
  %29 = extractvalue %"char[]" %28, 0, !dbg !3190
  %30 = extractvalue %"char[]" %28, 1, !dbg !3190
  %gt27 = icmp sgt i64 0, %30, !dbg !3190
  %31 = call i1 @llvm.expect.i1(i1 %gt27, i1 false), !dbg !3190
  br i1 %31, label %panic28, label %checkok38, !dbg !3190

checkok38:                                        ; preds = %if.exit
  %lt39 = icmp slt i64 %30, 1, !dbg !3190
  %32 = call i1 @llvm.expect.i1(i1 %lt39, i1 false), !dbg !3190
  br i1 %32, label %panic40, label %checkok50, !dbg !3190

checkok50:                                        ; preds = %checkok38
  %33 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !3190
  %34 = insertvalue %"char[]" %33, i64 1, 1, !dbg !3190
  %35 = extractvalue %"char[]" %34, 0, !dbg !3190
  %36 = extractvalue %"char[]" %27, 0, !dbg !3190
  %37 = extractvalue %"char[]" %27, 1, !dbg !3190
  %38 = extractvalue %"char[]" %34, 1, !dbg !3190
  %neq51 = icmp ne i64 %38, %37, !dbg !3190
  %39 = call i1 @llvm.expect.i1(i1 %neq51, i1 false), !dbg !3190
  br i1 %39, label %panic52, label %checkok62, !dbg !3190

checkok62:                                        ; preds = %checkok50
  %40 = mul i64 %37, 1, !dbg !3190
  call void @llvm.memmove.p0.p0.i64(ptr align 1 %35, ptr align 1 %36, i64 %40, i1 false), !dbg !3190
  %41 = load i64, ptr %len, align 8, !dbg !3191
  %sub = sub i64 %41, 1, !dbg !3191
  store i64 %sub, ptr %len, align 8, !dbg !3191
  %42 = load %"char[]", ptr %bytes3, align 8, !dbg !3192
  %43 = extractvalue %"char[]" %42, 0, !dbg !3192
  %44 = extractvalue %"char[]" %42, 1, !dbg !3193
  %gt63 = icmp ugt i64 1, %44, !dbg !3193
  %45 = call i1 @llvm.expect.i1(i1 %gt63, i1 false), !dbg !3193
  br i1 %45, label %panic64, label %checkok74, !dbg !3193

checkok74:                                        ; preds = %checkok62
  %size75 = sub i64 %44, 1, !dbg !3192
  %ptradd76 = getelementptr inbounds i8, ptr %43, i64 1, !dbg !3192
  %46 = insertvalue %"char[]" undef, ptr %ptradd76, 0, !dbg !3192
  %47 = insertvalue %"char[]" %46, i64 %size75, 1, !dbg !3192
  store %"char[]" %47, ptr %bytes3, align 8, !dbg !3192
  br label %loop.cond, !dbg !3192

loop.exit:                                        ; preds = %loop.cond
  store %"char[]" { ptr @.str.155, i64 30 }, ptr %string, align 8
  %48 = load [2 x i64], ptr %string, align 8, !dbg !3194
  store %"char[]" { ptr @.str.156, i64 11 }, ptr %taddr77, align 8
  %49 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.str.157, i64 22 }, ptr %taddr78, align 8
  %50 = load [2 x i64], ptr %taddr78, align 8
  store %"any[]" zeroinitializer, ptr %taddr79, align 8
  %51 = load [2 x i64], ptr %taddr79, align 8
  call void @std.core.builtin.panicf([2 x i64] %48, [2 x i64] %49, [2 x i64] %50, i32 115, [2 x i64] %51), !dbg !3197
  unreachable, !dbg !3198

expr_block.exit:                                  ; preds = %checkok25
  ret void, !dbg !3198

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %52 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %53 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr2, align 8
  %54 = load [2 x i64], ptr %taddr2, align 8
  %55 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %55([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 115), !dbg !3169
  unreachable, !dbg !3169

panic5:                                           ; preds = %if.then
  store i64 %15, ptr %taddr6, align 8
  %56 = insertvalue %any undef, ptr %taddr6, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr7, align 8
  %58 = insertvalue %any undef, ptr %taddr7, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr8, align 8
  %60 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr9, align 8
  %61 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr10, align 8
  %62 = load [2 x i64], ptr %taddr10, align 8
  store %any %57, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %59, ptr %ptradd11, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %64 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 153, [2 x i64] %64), !dbg !3187
  unreachable, !dbg !3187

panic15:                                          ; preds = %checkok13
  store i64 %22, ptr %taddr16, align 8
  %65 = insertvalue %any undef, ptr %taddr16, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %21, ptr %taddr17, align 8
  %67 = insertvalue %any undef, ptr %taddr17, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr18, align 8
  %69 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr19, align 8
  %70 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr20, align 8
  %71 = load [2 x i64], ptr %taddr20, align 8
  store %any %66, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %68, ptr %ptradd22, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %73 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 153, [2 x i64] %73), !dbg !3187
  unreachable, !dbg !3187

panic28:                                          ; preds = %if.exit
  store i64 %30, ptr %taddr29, align 8
  %74 = insertvalue %any undef, ptr %taddr29, 0
  %75 = insertvalue %any %74, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr30, align 8
  %76 = insertvalue %any undef, ptr %taddr30, 0
  %77 = insertvalue %any %76, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr31, align 8
  %78 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr32, align 8
  %79 = load [2 x i64], ptr %taddr32, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr33, align 8
  %80 = load [2 x i64], ptr %taddr33, align 8
  store %any %75, ptr %varargslots34, align 8
  %ptradd35 = getelementptr inbounds i8, ptr %varargslots34, i64 16
  store %any %77, ptr %ptradd35, align 8
  %81 = insertvalue %"any[]" undef, ptr %varargslots34, 0
  %"$$temp36" = insertvalue %"any[]" %81, i64 2, 1
  store %"any[]" %"$$temp36", ptr %taddr37, align 8
  %82 = load [2 x i64], ptr %taddr37, align 8
  call void @std.core.builtin.panicf([2 x i64] %78, [2 x i64] %79, [2 x i64] %80, i32 156, [2 x i64] %82), !dbg !3190
  unreachable, !dbg !3190

panic40:                                          ; preds = %checkok38
  store i64 0, ptr %taddr41, align 8
  %83 = insertvalue %any undef, ptr %taddr41, 0
  %84 = insertvalue %any %83, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %30, ptr %taddr42, align 8
  %85 = insertvalue %any undef, ptr %taddr42, 0
  %86 = insertvalue %any %85, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.39, i64 60 }, ptr %taddr43, align 8
  %87 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr44, align 8
  %88 = load [2 x i64], ptr %taddr44, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr45, align 8
  %89 = load [2 x i64], ptr %taddr45, align 8
  store %any %84, ptr %varargslots46, align 8
  %ptradd47 = getelementptr inbounds i8, ptr %varargslots46, i64 16
  store %any %86, ptr %ptradd47, align 8
  %90 = insertvalue %"any[]" undef, ptr %varargslots46, 0
  %"$$temp48" = insertvalue %"any[]" %90, i64 2, 1
  store %"any[]" %"$$temp48", ptr %taddr49, align 8
  %91 = load [2 x i64], ptr %taddr49, align 8
  call void @std.core.builtin.panicf([2 x i64] %87, [2 x i64] %88, [2 x i64] %89, i32 156, [2 x i64] %91), !dbg !3190
  unreachable, !dbg !3190

panic52:                                          ; preds = %checkok50
  store i64 %38, ptr %taddr53, align 8
  %92 = insertvalue %any undef, ptr %taddr53, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %37, ptr %taddr54, align 8
  %94 = insertvalue %any undef, ptr %taddr54, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.18, i64 38 }, ptr %taddr55, align 8
  %96 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr56, align 8
  %97 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr57, align 8
  %98 = load [2 x i64], ptr %taddr57, align 8
  store %any %93, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %95, ptr %ptradd59, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %100 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 156, [2 x i64] %100), !dbg !3190
  unreachable, !dbg !3190

panic64:                                          ; preds = %checkok62
  store i64 %44, ptr %taddr65, align 8
  %101 = insertvalue %any undef, ptr %taddr65, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 1, ptr %taddr66, align 8
  %103 = insertvalue %any undef, ptr %taddr66, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.9, i64 61 }, ptr %taddr67, align 8
  %105 = load [2 x i64], ptr %taddr67, align 8
  store %"char[]" { ptr @.file, i64 14 }, ptr %taddr68, align 8
  %106 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.func.37, i64 10 }, ptr %taddr69, align 8
  %107 = load [2 x i64], ptr %taddr69, align 8
  store %any %102, ptr %varargslots70, align 8
  %ptradd71 = getelementptr inbounds i8, ptr %varargslots70, i64 16
  store %any %104, ptr %ptradd71, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots70, 0
  %"$$temp72" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp72", ptr %taddr73, align 8
  %109 = load [2 x i64], ptr %taddr73, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 158, [2 x i64] %109), !dbg !3192
  unreachable, !dbg !3192
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i128 @std.math.random.Mcg16Random.next_int128(ptr %0) #0 !dbg !3199 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3202
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3202
  br i1 %2, label %panic, label %checkok, !dbg !3202

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3203, metadata !DIExpression()), !dbg !3204
  %3 = load ptr, ptr %self, align 8, !dbg !3205
  %4 = call i64 @std.math.random.Mcg16Random.next_long(ptr %3), !dbg !3207
  %zext = zext i64 %4 to i128, !dbg !3207
  %shl = shl i128 %zext, 64, !dbg !3207
  %5 = freeze i128 %shl, !dbg !3207
  %6 = load ptr, ptr %self, align 8, !dbg !3205
  %7 = call i64 @std.math.random.Mcg16Random.next_long(ptr %6), !dbg !3208
  %zext3 = zext i64 %7 to i128, !dbg !3208
  %add = add i128 %5, %zext3, !dbg !3207
  ret i128 %add, !dbg !3207

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.43, i64 11 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 116), !dbg !3204
  unreachable, !dbg !3204
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.math.random.Mcg16Random.next_long(ptr %0) #0 !dbg !3209 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3212
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3212
  br i1 %2, label %panic, label %checkok, !dbg !3212

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3213, metadata !DIExpression()), !dbg !3214
  %3 = load ptr, ptr %self, align 8, !dbg !3215
  %4 = call i32 @std.math.random.Mcg16Random.next_int(ptr %3), !dbg !3217
  %zext = zext i32 %4 to i64, !dbg !3217
  %shl = shl i64 %zext, 32, !dbg !3217
  %5 = freeze i64 %shl, !dbg !3217
  %6 = load ptr, ptr %self, align 8, !dbg !3215
  %7 = call i32 @std.math.random.Mcg16Random.next_int(ptr %6), !dbg !3218
  %zext3 = zext i32 %7 to i64, !dbg !3218
  %add = add i64 %5, %zext3, !dbg !3217
  ret i64 %add, !dbg !3217

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.35, i64 9 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 117), !dbg !3214
  unreachable, !dbg !3214
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i32 @std.math.random.Mcg16Random.next_int(ptr %0) #0 !dbg !3219 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3222
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3222
  br i1 %2, label %panic, label %checkok, !dbg !3222

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3223, metadata !DIExpression()), !dbg !3224
  %3 = load ptr, ptr %self, align 8, !dbg !3225
  %4 = call i16 @std.math.random.Mcg16Random.next_short(ptr %3), !dbg !3227
  %zext = zext i16 %4 to i32, !dbg !3227
  %shl = shl i32 %zext, 16, !dbg !3227
  %5 = freeze i32 %shl, !dbg !3227
  %6 = load ptr, ptr %self, align 8, !dbg !3225
  %7 = call i16 @std.math.random.Mcg16Random.next_short(ptr %6), !dbg !3228
  %zext3 = zext i16 %7 to i32, !dbg !3228
  %add = add i32 %5, %zext3, !dbg !3227
  ret i32 %add, !dbg !3227

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.44, i64 8 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 118), !dbg !3224
  unreachable, !dbg !3224
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i16 @std.math.random.Mcg16Random.next_short(ptr %0) #0 !dbg !3229 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !3232
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !3232
  br i1 %2, label %panic, label %checkok, !dbg !3232

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3233, metadata !DIExpression()), !dbg !3234
  %3 = load ptr, ptr %self, align 8, !dbg !3235
  %4 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %3), !dbg !3237
  %zext = zext i8 %4 to i16, !dbg !3237
  %zext3 = zext i16 %zext to i32, !dbg !3237
  %shl = shl i32 %zext3, 8, !dbg !3237
  %5 = freeze i32 %shl, !dbg !3237
  %6 = load ptr, ptr %self, align 8, !dbg !3235
  %7 = call i8 @std.math.random.Mcg16Random.next_byte(ptr %6), !dbg !3238
  %zext4 = zext i8 %7 to i32, !dbg !3238
  %add = add i32 %5, %zext4, !dbg !3237
  %trunc = trunc i32 %add to i16, !dbg !3237
  ret i16 %trunc, !dbg !3237

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.31, i64 62 }, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.145, i64 11 }, ptr %taddr1, align 8
  %9 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.45, i64 10 }, ptr %taddr2, align 8
  %10 = load [2 x i64], ptr %taddr2, align 8
  %11 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %11([2 x i64] %8, [2 x i64] %9, [2 x i64] %10, i32 119), !dbg !3234
  unreachable, !dbg !3234
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.builtin.panicf([2 x i64], [2 x i64], [2 x i64], i32, [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.mem.tmalloc(i64, i64) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memmove.p0.p0.i64(ptr nocapture writeonly, ptr nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.mem.malloc(i64) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.free(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i32 @std.hash.fnv32a.encode([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.time.clock.now() #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.dstring.DString.new_init(ptr, i64, [2 x i64]) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.fshr.i64(i64, i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshr.i32(i32, i32, i32) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i16 @llvm.fshr.i16(i16, i16, i16) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i8 @llvm.fshr.i8(i8, i8, i8) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i128 @llvm.fshr.i128(i128, i128, i128) #1

define internal void @.c3_dynamic_retain() align 8 {
entry:
  %.retain_global = load volatile [161 x { ptr, ptr, i64 }], ptr @"$c3_dynamic", align 8
  ret void
}

attributes #0 = { nounwind ssp uwtable(sync) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!106, !107, !108, !109, !110, !111}
!llvm.dbg.cu = !{!112}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "default_random", linkageName: "std.math.random.default_random", scope: !2, file: !2, line: 65, type: !3, isLocal: false, isDefinition: true, align: 8)
!2 = !DIFile(filename: "math_random.c3", directory: "/opt/homebrew/lib/c3/std/math")
!3 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc64Random", scope: !4, file: !4, line: 43, baseType: !5, align: 8)
!4 = !DIFile(filename: "math.sfc.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!5 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 256, align: 64, elements: !7)
!6 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!7 = !{!8}
!8 = !DISubrange(count: 4, lowerBound: 0)
!9 = !DIGlobalVariableExpression(var: !10, expr: !DIExpression())
!10 = distinct !DIGlobalVariable(name: "default_random_initialized", linkageName: "std.math.random.default_random_initialized", scope: !2, file: !2, line: 66, type: !11, isLocal: false, isDefinition: true, align: 1)
!11 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !14, file: !14, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!14 = !DIFile(filename: "math.seeder.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!15 = !DIGlobalVariableExpression(var: !16, expr: !DIExpression())
!16 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !14, file: !14, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !14, file: !14, line: 6, type: !6, isLocal: true, isDefinition: true, align: 8)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "random_int", linkageName: "entropy.random_int", scope: !14, file: !14, line: 80, type: !21, isLocal: true, isDefinition: true, align: 4)
!21 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!22 = !DIGlobalVariableExpression(var: !23, expr: !DIExpression())
!23 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !24, file: !24, line: 4, type: !25, isLocal: true, isDefinition: true, align: 16)
!24 = !DIFile(filename: "math.pcg.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!25 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !24, file: !24, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !24, file: !24, line: 6, type: !21, isLocal: true, isDefinition: true, align: 4)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !24, file: !24, line: 7, type: !32, isLocal: true, isDefinition: true, align: 2)
!32 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !24, file: !24, line: 9, type: !25, isLocal: true, isDefinition: true, align: 16)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !24, file: !24, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !24, file: !24, line: 11, type: !21, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !24, file: !24, line: 12, type: !32, isLocal: true, isDefinition: true, align: 2)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_long.ROT_SHIFT", scope: !24, file: !24, line: 28, type: !43, isLocal: true, isDefinition: true, align: 4)
!43 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_int.ROT_SHIFT", scope: !24, file: !24, line: 56, type: !43, isLocal: true, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_short.ROT_SHIFT", scope: !24, file: !24, line: 85, type: !43, isLocal: true, isDefinition: true, align: 4)
!48 = !DIGlobalVariableExpression(var: !49, expr: !DIExpression())
!49 = distinct !DIGlobalVariable(name: "ROT_SHIFT", linkageName: "next_byte.ROT_SHIFT", scope: !24, file: !24, line: 113, type: !43, isLocal: true, isDefinition: true, align: 4)
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !4, file: !4, line: 4, type: !25, isLocal: true, isDefinition: true, align: 16)
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !4, file: !4, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !4, file: !4, line: 6, type: !21, isLocal: true, isDefinition: true, align: 4)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !4, file: !4, line: 7, type: !32, isLocal: true, isDefinition: true, align: 2)
!58 = !DIGlobalVariableExpression(var: !59, expr: !DIExpression())
!59 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !4, file: !4, line: 8, type: !60, isLocal: true, isDefinition: true, align: 1)
!60 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!61 = !DIGlobalVariableExpression(var: !62, expr: !DIExpression())
!62 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MULTIPLIER", linkageName: "std.math.random.SIMPLE_RANDOM_MULTIPLIER", scope: !63, file: !63, line: 32, type: !64, isLocal: true, isDefinition: true, align: 8)
!63 = !DIFile(filename: "math.simple_random.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!64 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!65 = !DIGlobalVariableExpression(var: !66, expr: !DIExpression())
!66 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_ADDEND", linkageName: "std.math.random.SIMPLE_RANDOM_ADDEND", scope: !63, file: !63, line: 33, type: !64, isLocal: true, isDefinition: true, align: 8)
!67 = !DIGlobalVariableExpression(var: !68, expr: !DIExpression())
!68 = distinct !DIGlobalVariable(name: "SIMPLE_RANDOM_MASK", linkageName: "std.math.random.SIMPLE_RANDOM_MASK", scope: !63, file: !63, line: 34, type: !64, isLocal: true, isDefinition: true, align: 8)
!69 = !DIGlobalVariableExpression(var: !70, expr: !DIExpression())
!70 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !71, file: !71, line: 4, type: !25, isLocal: true, isDefinition: true, align: 16)
!71 = !DIFile(filename: "math.msws.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!72 = !DIGlobalVariableExpression(var: !73, expr: !DIExpression())
!73 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !71, file: !71, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!74 = !DIGlobalVariableExpression(var: !75, expr: !DIExpression())
!75 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !71, file: !71, line: 6, type: !21, isLocal: true, isDefinition: true, align: 4)
!76 = !DIGlobalVariableExpression(var: !77, expr: !DIExpression())
!77 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !71, file: !71, line: 7, type: !32, isLocal: true, isDefinition: true, align: 2)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "ODD_PHI8", linkageName: "std.math.random.ODD_PHI8", scope: !71, file: !71, line: 8, type: !60, isLocal: true, isDefinition: true, align: 1)
!80 = !DIGlobalVariableExpression(var: !81, expr: !DIExpression())
!81 = distinct !DIGlobalVariable(name: "ODD_PHI128", linkageName: "std.math.random.ODD_PHI128", scope: !82, file: !82, line: 4, type: !25, isLocal: true, isDefinition: true, align: 16)
!82 = !DIFile(filename: "math.lcg.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!83 = !DIGlobalVariableExpression(var: !84, expr: !DIExpression())
!84 = distinct !DIGlobalVariable(name: "ODD_PHI64", linkageName: "std.math.random.ODD_PHI64", scope: !82, file: !82, line: 5, type: !6, isLocal: true, isDefinition: true, align: 8)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "ODD_PHI32", linkageName: "std.math.random.ODD_PHI32", scope: !82, file: !82, line: 6, type: !21, isLocal: true, isDefinition: true, align: 4)
!87 = !DIGlobalVariableExpression(var: !88, expr: !DIExpression())
!88 = distinct !DIGlobalVariable(name: "ODD_PHI16", linkageName: "std.math.random.ODD_PHI16", scope: !82, file: !82, line: 7, type: !32, isLocal: true, isDefinition: true, align: 2)
!89 = !DIGlobalVariableExpression(var: !90, expr: !DIExpression())
!90 = distinct !DIGlobalVariable(name: "MUL_LCG128", linkageName: "std.math.random.MUL_LCG128", scope: !82, file: !82, line: 9, type: !25, isLocal: true, isDefinition: true, align: 16)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "MUL_LCG64", linkageName: "std.math.random.MUL_LCG64", scope: !82, file: !82, line: 10, type: !6, isLocal: true, isDefinition: true, align: 8)
!93 = !DIGlobalVariableExpression(var: !94, expr: !DIExpression())
!94 = distinct !DIGlobalVariable(name: "MUL_LCG32", linkageName: "std.math.random.MUL_LCG32", scope: !82, file: !82, line: 11, type: !21, isLocal: true, isDefinition: true, align: 4)
!95 = !DIGlobalVariableExpression(var: !96, expr: !DIExpression())
!96 = distinct !DIGlobalVariable(name: "MUL_LCG16", linkageName: "std.math.random.MUL_LCG16", scope: !82, file: !82, line: 12, type: !32, isLocal: true, isDefinition: true, align: 2)
!97 = !DIGlobalVariableExpression(var: !98, expr: !DIExpression())
!98 = distinct !DIGlobalVariable(name: "MUL_MCG128", linkageName: "std.math.random.MUL_MCG128", scope: !99, file: !99, line: 3, type: !25, isLocal: true, isDefinition: true, align: 16)
!99 = !DIFile(filename: "math.mcg.c3", directory: "/opt/homebrew/lib/c3/std/math/random")
!100 = !DIGlobalVariableExpression(var: !101, expr: !DIExpression())
!101 = distinct !DIGlobalVariable(name: "MUL_MCG64", linkageName: "std.math.random.MUL_MCG64", scope: !99, file: !99, line: 4, type: !6, isLocal: true, isDefinition: true, align: 8)
!102 = !DIGlobalVariableExpression(var: !103, expr: !DIExpression())
!103 = distinct !DIGlobalVariable(name: "MUL_MCG32", linkageName: "std.math.random.MUL_MCG32", scope: !99, file: !99, line: 5, type: !21, isLocal: true, isDefinition: true, align: 4)
!104 = !DIGlobalVariableExpression(var: !105, expr: !DIExpression())
!105 = distinct !DIGlobalVariable(name: "MUL_MCG16", linkageName: "std.math.random.MUL_MCG16", scope: !99, file: !99, line: 6, type: !32, isLocal: true, isDefinition: true, align: 2)
!106 = !{i32 2, !"Dwarf Version", i32 4}
!107 = !{i32 2, !"Debug Info Version", i32 3}
!108 = !{i32 2, !"wchar_size", i32 4}
!109 = !{i32 4, !"PIC Level", i32 2}
!110 = !{i32 1, !"uwtable", i32 1}
!111 = !{i32 2, !"frame-pointer", i32 1}
!112 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !113, splitDebugInlining: false)
!113 = !{!0, !9, !12, !15, !17, !19, !22, !26, !28, !30, !33, !35, !37, !39, !41, !44, !46, !48, !50, !52, !54, !56, !58, !61, !65, !67, !69, !72, !74, !76, !78, !80, !83, !85, !87, !89, !91, !93, !95, !97, !100, !102, !104}
!114 = distinct !DISubprogram(name: "srand", linkageName: "std.math.random.srand", scope: !2, file: !2, line: 71, type: !115, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!115 = !DISubroutineType(types: !116)
!116 = !{null, !6}
!117 = !{}
!118 = !DILocalVariable(name: "seed", arg: 1, scope: !114, file: !2, line: 71, type: !6)
!119 = !DILocation(line: 71, column: 21, scope: !114)
!120 = !DILocation(line: 73, column: 2, scope: !114)
!121 = !DILocation(line: 74, column: 31, scope: !114)
!122 = distinct !DISubprogram(name: "rand", linkageName: "std.math.random.rand", scope: !2, file: !2, line: 80, type: !123, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!123 = !DISubroutineType(types: !124)
!124 = !{!43, !43}
!125 = !DILocalVariable(name: "range", arg: 1, scope: !122, file: !2, line: 80, type: !43)
!126 = !DILocation(line: 80, column: 17, scope: !122)
!127 = !DILocation(line: 179, column: 7, scope: !128, inlinedAt: !129)
!128 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!129 = !DILocation(line: 82, column: 2, scope: !122)
!130 = !DILocation(line: 136, column: 33, scope: !131, inlinedAt: !132)
!131 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!132 = !DILocation(line: 24, column: 11, scope: !133, inlinedAt: !135)
!133 = distinct !DILexicalBlock(scope: !134, file: !2, line: 27, column: 1)
!134 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!135 = !DILocation(line: 181, column: 3, scope: !136, inlinedAt: !129)
!136 = distinct !DILexicalBlock(scope: !128, file: !2, line: 180, column: 2)
!137 = !DILocation(line: 28, column: 20, scope: !134, inlinedAt: !135)
!138 = !DILocation(line: 28, column: 2, scope: !134, inlinedAt: !135)
!139 = !DILocation(line: 182, column: 32, scope: !136, inlinedAt: !129)
!140 = !DILocation(line: 83, column: 31, scope: !122)
!141 = !DILocation(line: 136, column: 33, scope: !142, inlinedAt: !143)
!142 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!143 = !DILocation(line: 34, column: 11, scope: !144, inlinedAt: !146)
!144 = distinct !DILexicalBlock(scope: !145, file: !2, line: 38, column: 1)
!145 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!146 = !DILocation(line: 83, column: 9, scope: !122)
!147 = !DILocation(line: 35, column: 11, scope: !144, inlinedAt: !146)
!148 = !DILocation(line: 39, column: 6, scope: !145, inlinedAt: !146)
!149 = !DILocation(line: 39, column: 25, scope: !145, inlinedAt: !146)
!150 = !DILocalVariable(name: "mask", scope: !145, file: !2, line: 40, type: !21, align: 4)
!151 = !DILocation(line: 40, column: 7, scope: !145, inlinedAt: !146)
!152 = !DILocation(line: 40, column: 14, scope: !145, inlinedAt: !146)
!153 = !DILocation(line: 41, column: 2, scope: !145, inlinedAt: !146)
!154 = !DILocation(line: 42, column: 2, scope: !145, inlinedAt: !146)
!155 = !DILocation(line: 95, column: 31, scope: !156, inlinedAt: !158)
!156 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!157 = !DIFile(filename: "bits.c3", directory: "/opt/homebrew/lib/c3/std")
!158 = !DILocation(line: 42, column: 11, scope: !145, inlinedAt: !146)
!159 = !DILocalVariable(name: "x", scope: !145, file: !2, line: 43, type: !21, align: 4)
!160 = !DILocation(line: 43, column: 7, scope: !145, inlinedAt: !146)
!161 = !DILocation(line: 44, column: 2, scope: !145, inlinedAt: !146)
!162 = !DILocation(line: 48, column: 9, scope: !163, inlinedAt: !146)
!163 = distinct !DILexicalBlock(scope: !145, file: !2, line: 44, column: 2)
!164 = !DILocation(line: 48, column: 13, scope: !163, inlinedAt: !146)
!165 = !DILocation(line: 46, column: 7, scope: !166, inlinedAt: !146)
!166 = distinct !DILexicalBlock(scope: !163, file: !2, line: 45, column: 2)
!167 = !DILocation(line: 46, column: 27, scope: !166, inlinedAt: !146)
!168 = !DILocation(line: 49, column: 9, scope: !145, inlinedAt: !146)
!169 = distinct !DISubprogram(name: "rand_in_range", linkageName: "std.math.random.rand_in_range", scope: !2, file: !2, line: 90, type: !170, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!170 = !DISubroutineType(types: !171)
!171 = !{!43, !43, !43}
!172 = !DILocalVariable(name: "min", arg: 1, scope: !169, file: !2, line: 90, type: !43)
!173 = !DILocation(line: 90, column: 26, scope: !169)
!174 = !DILocalVariable(name: "max", arg: 2, scope: !169, file: !2, line: 90, type: !43)
!175 = !DILocation(line: 90, column: 35, scope: !169)
!176 = !DILocation(line: 88, column: 11, scope: !177)
!177 = distinct !DILexicalBlock(scope: !169, file: !2, line: 91, column: 1)
!178 = !DILocation(line: 88, column: 18, scope: !177)
!179 = !DILocation(line: 179, column: 7, scope: !180, inlinedAt: !181)
!180 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!181 = !DILocation(line: 92, column: 2, scope: !169)
!182 = !DILocation(line: 136, column: 33, scope: !183, inlinedAt: !184)
!183 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!184 = !DILocation(line: 24, column: 11, scope: !185, inlinedAt: !187)
!185 = distinct !DILexicalBlock(scope: !186, file: !2, line: 27, column: 1)
!186 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!187 = !DILocation(line: 181, column: 3, scope: !188, inlinedAt: !181)
!188 = distinct !DILexicalBlock(scope: !180, file: !2, line: 180, column: 2)
!189 = !DILocation(line: 28, column: 20, scope: !186, inlinedAt: !187)
!190 = !DILocation(line: 28, column: 2, scope: !186, inlinedAt: !187)
!191 = !DILocation(line: 182, column: 32, scope: !188, inlinedAt: !181)
!192 = !DILocation(line: 136, column: 33, scope: !193, inlinedAt: !194)
!193 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!194 = !DILocation(line: 55, column: 11, scope: !195, inlinedAt: !197)
!195 = distinct !DILexicalBlock(scope: !196, file: !2, line: 59, column: 1)
!196 = distinct !DISubprogram(name: "next_in_range", linkageName: "next_in_range", scope: !2, file: !2, line: 58, scopeLine: 58, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!197 = !DILocation(line: 93, column: 9, scope: !169)
!198 = !DILocation(line: 56, column: 11, scope: !195, inlinedAt: !197)
!199 = !DILocation(line: 56, column: 18, scope: !195, inlinedAt: !197)
!200 = !DILocation(line: 60, column: 22, scope: !196, inlinedAt: !197)
!201 = !DILocation(line: 60, column: 28, scope: !196, inlinedAt: !197)
!202 = !DILocation(line: 136, column: 33, scope: !203, inlinedAt: !204)
!203 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!204 = !DILocation(line: 34, column: 11, scope: !205, inlinedAt: !207)
!205 = distinct !DILexicalBlock(scope: !206, file: !2, line: 38, column: 1)
!206 = distinct !DISubprogram(name: "next", linkageName: "next", scope: !2, file: !2, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!207 = !DILocation(line: 60, column: 9, scope: !196, inlinedAt: !197)
!208 = !DILocation(line: 35, column: 11, scope: !205, inlinedAt: !207)
!209 = !DILocation(line: 39, column: 6, scope: !206, inlinedAt: !207)
!210 = !DILocation(line: 39, column: 25, scope: !206, inlinedAt: !207)
!211 = !DILocalVariable(name: "mask", scope: !206, file: !2, line: 40, type: !21, align: 4)
!212 = !DILocation(line: 40, column: 7, scope: !206, inlinedAt: !207)
!213 = !DILocation(line: 40, column: 14, scope: !206, inlinedAt: !207)
!214 = !DILocation(line: 41, column: 2, scope: !206, inlinedAt: !207)
!215 = !DILocation(line: 42, column: 2, scope: !206, inlinedAt: !207)
!216 = !DILocation(line: 95, column: 31, scope: !217, inlinedAt: !218)
!217 = distinct !DISubprogram(name: "clz", linkageName: "clz", scope: !157, file: !157, line: 95, scopeLine: 95, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!218 = !DILocation(line: 42, column: 11, scope: !206, inlinedAt: !207)
!219 = !DILocalVariable(name: "x", scope: !206, file: !2, line: 43, type: !21, align: 4)
!220 = !DILocation(line: 43, column: 7, scope: !206, inlinedAt: !207)
!221 = !DILocation(line: 44, column: 2, scope: !206, inlinedAt: !207)
!222 = !DILocation(line: 48, column: 9, scope: !223, inlinedAt: !207)
!223 = distinct !DILexicalBlock(scope: !206, file: !2, line: 44, column: 2)
!224 = !DILocation(line: 48, column: 13, scope: !223, inlinedAt: !207)
!225 = !DILocation(line: 46, column: 7, scope: !226, inlinedAt: !207)
!226 = distinct !DILexicalBlock(scope: !223, file: !2, line: 45, column: 2)
!227 = !DILocation(line: 46, column: 27, scope: !226, inlinedAt: !207)
!228 = !DILocation(line: 49, column: 9, scope: !206, inlinedAt: !207)
!229 = !DILocation(line: 60, column: 39, scope: !196, inlinedAt: !197)
!230 = distinct !DISubprogram(name: "rnd", linkageName: "std.math.random.rnd", scope: !2, file: !2, line: 96, type: !231, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!231 = !DISubroutineType(types: !232)
!232 = !{!233}
!233 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!234 = !DILocation(line: 179, column: 7, scope: !235, inlinedAt: !236)
!235 = distinct !DISubprogram(name: "init_default_random", linkageName: "init_default_random", scope: !2, file: !2, line: 177, scopeLine: 177, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!236 = !DILocation(line: 98, column: 2, scope: !230)
!237 = !DILocation(line: 136, column: 33, scope: !238, inlinedAt: !239)
!238 = distinct !DISubprogram(name: "is_random", linkageName: "is_random", scope: !2, file: !2, line: 136, scopeLine: 136, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!239 = !DILocation(line: 24, column: 11, scope: !240, inlinedAt: !242)
!240 = distinct !DILexicalBlock(scope: !241, file: !2, line: 27, column: 1)
!241 = distinct !DISubprogram(name: "seed_entropy", linkageName: "seed_entropy", scope: !2, file: !2, line: 26, scopeLine: 26, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!242 = !DILocation(line: 181, column: 3, scope: !243, inlinedAt: !236)
!243 = distinct !DILexicalBlock(scope: !235, file: !2, line: 180, column: 2)
!244 = !DILocation(line: 28, column: 20, scope: !241, inlinedAt: !242)
!245 = !DILocation(line: 28, column: 2, scope: !241, inlinedAt: !242)
!246 = !DILocation(line: 182, column: 32, scope: !243, inlinedAt: !236)
!247 = !DILocalVariable(name: "val", scope: !230, file: !2, line: 99, type: !6, align: 8)
!248 = !DILocation(line: 99, column: 8, scope: !230)
!249 = !DILocation(line: 99, column: 14, scope: !230)
!250 = !DILocation(line: 100, column: 9, scope: !230)
!251 = distinct !DISubprogram(name: "seeder", linkageName: "std.math.random.seeder", scope: !14, file: !14, line: 20, type: !252, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!252 = !DISubroutineType(types: !253)
!253 = !{null, !254, !254}
!254 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !255, identifier: "char[]")
!255 = !{!256, !258}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !254, baseType: !257, size: 64, align: 64)
!257 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !60, size: 64, align: 64, dwarfAddressSpace: 0)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !254, baseType: !259, size: 64, align: 64, offset: 64)
!259 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !6)
!260 = !DILocalVariable(name: "input", arg: 1, scope: !251, file: !14, line: 20, type: !254)
!261 = !DILocation(line: 20, column: 23, scope: !251)
!262 = !DILocalVariable(name: "out_buffer", arg: 2, scope: !251, file: !14, line: 20, type: !254)
!263 = !DILocation(line: 20, column: 37, scope: !251)
!264 = !DILocalVariable(name: "out_chars", scope: !251, file: !14, line: 26, type: !259, align: 8)
!265 = !DILocation(line: 26, column: 6, scope: !251)
!266 = !DILocation(line: 26, column: 18, scope: !251)
!267 = !DILocalVariable(name: "current", scope: !268, file: !14, line: 592, type: !270, align: 8)
!268 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !269, file: !269, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!269 = !DIFile(filename: "mem.c3", directory: "/opt/homebrew/lib/c3/std/core")
!270 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !271, size: 64, align: 64, dwarfAddressSpace: 0)
!271 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !14, file: !14, line: 10, size: 320, align: 64, elements: !272, identifier: "std.core.mem.allocator.TempAllocator")
!272 = !{!273, !280, !293, !294, !295}
!273 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !271, file: !14, line: 12, baseType: !274, size: 128, align: 64)
!274 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !275, identifier: "Allocator")
!275 = !{!276, !278}
!276 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !274, baseType: !277, size: 64, align: 64)
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !274, baseType: !279, size: 64, align: 64, offset: 64)
!279 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !271, file: !14, line: 13, baseType: !281, size: 64, align: 64, offset: 128)
!281 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !282, size: 64, align: 64, dwarfAddressSpace: 0)
!282 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !14, file: !14, line: 22, size: 320, align: 64, elements: !283, identifier: "std.core.mem.allocator.TempAllocatorPage")
!283 = !{!284, !285, !286, !287, !288, !289}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !282, file: !14, line: 24, baseType: !281, size: 64, align: 64)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !282, file: !14, line: 25, baseType: !277, size: 64, align: 64, offset: 64)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !282, file: !14, line: 26, baseType: !259, size: 64, align: 64, offset: 128)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !282, file: !14, line: 27, baseType: !259, size: 64, align: 64, offset: 192)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !282, file: !14, line: 28, baseType: !259, size: 64, align: 64, offset: 256)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !282, file: !14, line: 29, baseType: !290, align: 8, offset: 320)
!290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, align: 8, elements: !291)
!291 = !{!292}
!292 = !DISubrange(count: 0, lowerBound: 0)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !271, file: !14, line: 14, baseType: !259, size: 64, align: 64, offset: 192)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !271, file: !14, line: 15, baseType: !259, size: 64, align: 64, offset: 256)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !271, file: !14, line: 16, baseType: !290, align: 8, offset: 320)
!296 = !DILocation(line: 592, column: 17, scope: !268, inlinedAt: !297)
!297 = !DILocation(line: 27, column: 2, scope: !251)
!298 = !DILocation(line: 396, column: 6, scope: !299, inlinedAt: !301)
!299 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !300, file: !300, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!300 = !DIFile(filename: "mem_allocator.c3", directory: "/opt/homebrew/lib/c3/std/core")
!301 = !DILocation(line: 592, column: 27, scope: !268, inlinedAt: !297)
!302 = !DILocation(line: 398, column: 3, scope: !303, inlinedAt: !301)
!303 = distinct !DILexicalBlock(scope: !299, file: !300, line: 397, column: 2)
!304 = !DILocation(line: 400, column: 9, scope: !299, inlinedAt: !301)
!305 = !DILocalVariable(name: "mark", scope: !268, file: !14, line: 597, type: !259, align: 8)
!306 = !DILocation(line: 597, column: 6, scope: !268, inlinedAt: !297)
!307 = !DILocation(line: 597, column: 13, scope: !268, inlinedAt: !297)
!308 = !DILocalVariable(name: "words", scope: !309, file: !14, line: 29, type: !310, align: 8)
!309 = distinct !DILexicalBlock(scope: !251, file: !14, line: 28, column: 2)
!310 = !DICompositeType(tag: DW_TAG_structure_type, name: "ulong[]", size: 128, align: 64, elements: !311, identifier: "ulong[]")
!311 = !{!312, !314}
!312 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !310, baseType: !313, size: 64, align: 64)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !6, size: 64, align: 64, dwarfAddressSpace: 0)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !310, baseType: !259, size: 64, align: 64, offset: 64)
!315 = !DILocation(line: 29, column: 11, scope: !309)
!316 = !DILocation(line: 29, column: 49, scope: !309)
!317 = !DILocation(line: 777, column: 41, scope: !318, inlinedAt: !319)
!318 = distinct !DISubprogram(name: "temp_alloc_array", linkageName: "temp_alloc_array", scope: !269, file: !269, line: 775, scopeLine: 775, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!319 = !DILocation(line: 29, column: 19, scope: !309)
!320 = !DILocation(line: 777, column: 26, scope: !318, inlinedAt: !319)
!321 = !DILocation(line: 777, column: 18, scope: !318, inlinedAt: !319)
!322 = !DILocation(line: 777, column: 68, scope: !318, inlinedAt: !319)
!323 = !DILocation(line: 30, column: 3, scope: !309)
!324 = !DILocation(line: 30, column: 9, scope: !309)
!325 = !DILocalVariable(name: "words_len_2", scope: !309, file: !14, line: 31, type: !259, align: 8)
!326 = !DILocation(line: 31, column: 7, scope: !309)
!327 = !DILocation(line: 31, column: 21, scope: !309)
!328 = !DILocalVariable(name: "i", scope: !329, file: !14, line: 34, type: !259, align: 8)
!329 = distinct !DILexicalBlock(scope: !309, file: !14, line: 34, column: 3)
!330 = !DILocation(line: 34, column: 12, scope: !329)
!331 = !DILocation(line: 34, column: 16, scope: !329)
!332 = !DILocation(line: 34, column: 19, scope: !329)
!333 = !DILocation(line: 34, column: 23, scope: !329)
!334 = !DILocalVariable(name: "j", scope: !335, file: !14, line: 36, type: !259, align: 8)
!335 = distinct !DILexicalBlock(scope: !329, file: !14, line: 35, column: 3)
!336 = !DILocation(line: 36, column: 8, scope: !335)
!337 = !DILocation(line: 36, column: 12, scope: !335)
!338 = !DILocation(line: 36, column: 16, scope: !335)
!339 = !DILocation(line: 37, column: 4, scope: !335)
!340 = !DILocation(line: 37, column: 10, scope: !335)
!341 = !DILocation(line: 37, column: 36, scope: !335)
!342 = !DILocation(line: 37, column: 42, scope: !335)
!343 = !DILocalVariable(name: "x", scope: !344, file: !14, line: 215, type: !6, align: 8)
!344 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!345 = !DIFile(filename: "builtin.c3", directory: "/opt/homebrew/lib/c3/std/core")
!346 = !DILocation(line: 215, column: 9, scope: !344, inlinedAt: !347)
!347 = !DILocation(line: 37, column: 16, scope: !335)
!348 = !DILocation(line: 216, column: 38, scope: !344, inlinedAt: !347)
!349 = !DILocation(line: 217, column: 10, scope: !344, inlinedAt: !347)
!350 = !DILocation(line: 38, column: 4, scope: !335)
!351 = !DILocation(line: 38, column: 10, scope: !335)
!352 = !DILocation(line: 38, column: 16, scope: !335)
!353 = !DILocation(line: 38, column: 22, scope: !335)
!354 = !DILocation(line: 34, column: 38, scope: !329)
!355 = !DILocalVariable(name: "remaining", scope: !309, file: !14, line: 42, type: !259, align: 8)
!356 = !DILocation(line: 42, column: 7, scope: !309)
!357 = !DILocation(line: 42, column: 19, scope: !309)
!358 = !DILocation(line: 42, column: 31, scope: !309)
!359 = !DILocation(line: 43, column: 7, scope: !309)
!360 = !DILocalVariable(name: "rest", scope: !361, file: !14, line: 45, type: !6, align: 8)
!361 = distinct !DILexicalBlock(scope: !309, file: !14, line: 44, column: 3)
!362 = !DILocation(line: 45, column: 10, scope: !361)
!363 = !DILocation(line: 45, column: 17, scope: !361)
!364 = !DILocation(line: 46, column: 22, scope: !361)
!365 = !DILocation(line: 46, column: 29, scope: !361)
!366 = !DILocation(line: 324, column: 11, scope: !367, inlinedAt: !369)
!367 = distinct !DILexicalBlock(scope: !368, file: !269, line: 327, column: 1)
!368 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !269, file: !269, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!369 = !DILocation(line: 46, column: 4, scope: !361)
!370 = !DILocation(line: 324, column: 23, scope: !367, inlinedAt: !369)
!371 = !DILocation(line: 324, column: 29, scope: !367, inlinedAt: !369)
!372 = !DILocation(line: 324, column: 36, scope: !367, inlinedAt: !369)
!373 = !DILocation(line: 324, column: 43, scope: !367, inlinedAt: !369)
!374 = !DILocation(line: 324, column: 49, scope: !367, inlinedAt: !369)
!375 = !DILocation(line: 324, column: 56, scope: !367, inlinedAt: !369)
!376 = !DILocation(line: 328, column: 11, scope: !368, inlinedAt: !369)
!377 = !DILocation(line: 328, column: 16, scope: !368, inlinedAt: !369)
!378 = !DILocation(line: 328, column: 21, scope: !368, inlinedAt: !369)
!379 = !DILocation(line: 328, column: 26, scope: !368, inlinedAt: !369)
!380 = !DILocation(line: 47, column: 4, scope: !361)
!381 = !DILocation(line: 47, column: 11, scope: !361)
!382 = !DILocation(line: 47, column: 17, scope: !361)
!383 = !DILocation(line: 48, column: 4, scope: !361)
!384 = !DILocation(line: 48, column: 11, scope: !361)
!385 = !DILocation(line: 48, column: 17, scope: !361)
!386 = !DILocation(line: 48, column: 24, scope: !361)
!387 = !DILocalVariable(name: "i", scope: !388, file: !14, line: 52, type: !389, align: 8)
!388 = distinct !DILexicalBlock(scope: !309, file: !14, line: 52, column: 3)
!389 = !DIDerivedType(tag: DW_TAG_typedef, name: "isz", baseType: !64)
!390 = !DILocation(line: 52, column: 12, scope: !388)
!391 = !DILocation(line: 52, column: 16, scope: !388)
!392 = !DILocation(line: 52, column: 33, scope: !388)
!393 = !DILocalVariable(name: "j", scope: !394, file: !14, line: 54, type: !389, align: 8)
!394 = distinct !DILexicalBlock(scope: !388, file: !14, line: 53, column: 3)
!395 = !DILocation(line: 54, column: 8, scope: !394)
!396 = !DILocation(line: 54, column: 12, scope: !394)
!397 = !DILocation(line: 54, column: 16, scope: !394)
!398 = !DILocation(line: 55, column: 4, scope: !394)
!399 = !DILocation(line: 55, column: 10, scope: !394)
!400 = !DILocation(line: 55, column: 16, scope: !394)
!401 = !DILocation(line: 55, column: 23, scope: !394)
!402 = !DILocation(line: 55, column: 32, scope: !394)
!403 = !DILocation(line: 56, column: 4, scope: !394)
!404 = !DILocation(line: 56, column: 10, scope: !394)
!405 = !DILocation(line: 56, column: 16, scope: !394)
!406 = !DILocation(line: 56, column: 22, scope: !394)
!407 = !DILocation(line: 52, column: 41, scope: !388)
!408 = !DILocalVariable(name: "i", scope: !409, file: !14, line: 60, type: !259, align: 8)
!409 = distinct !DILexicalBlock(scope: !309, file: !14, line: 60, column: 3)
!410 = !DILocation(line: 60, column: 12, scope: !409)
!411 = !DILocation(line: 60, column: 16, scope: !409)
!412 = !DILocation(line: 60, column: 19, scope: !409)
!413 = !DILocation(line: 60, column: 23, scope: !409)
!414 = !DILocalVariable(name: "j", scope: !415, file: !14, line: 62, type: !259, align: 8)
!415 = distinct !DILexicalBlock(scope: !409, file: !14, line: 61, column: 3)
!416 = !DILocation(line: 62, column: 8, scope: !415)
!417 = !DILocation(line: 62, column: 12, scope: !415)
!418 = !DILocation(line: 62, column: 16, scope: !415)
!419 = !DILocation(line: 63, column: 4, scope: !415)
!420 = !DILocation(line: 63, column: 10, scope: !415)
!421 = !DILocation(line: 64, column: 4, scope: !415)
!422 = !DILocation(line: 64, column: 10, scope: !415)
!423 = !DILocation(line: 64, column: 16, scope: !415)
!424 = !DILocation(line: 64, column: 22, scope: !415)
!425 = !DILocation(line: 60, column: 36, scope: !409)
!426 = !DILocation(line: 66, column: 28, scope: !309)
!427 = !DILocation(line: 66, column: 40, scope: !309)
!428 = !DILocation(line: 66, column: 3, scope: !309)
!429 = !DILocation(line: 66, column: 14, scope: !309)
!430 = !DILocation(line: 600, column: 17, scope: !431, inlinedAt: !297)
!431 = distinct !DILexicalBlock(scope: !268, file: !269, line: 599, column: 2)
!432 = !DILocation(line: 600, column: 3, scope: !431, inlinedAt: !297)
!433 = !DILocation(line: 603, column: 9, scope: !431, inlinedAt: !297)
!434 = !DILocation(line: 37, column: 26, scope: !335)
!435 = distinct !DISubprogram(name: "entropy", linkageName: "std.math.random.entropy", scope: !14, file: !14, line: 75, type: !436, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!436 = !DISubroutineType(types: !437)
!437 = !{!438}
!438 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 256, align: 8, elements: !439)
!439 = !{!440}
!440 = !DISubrange(count: 32, lowerBound: 0)
!441 = !DILocalVariable(name: "addr", scope: !435, file: !14, line: 78, type: !277, align: 8)
!442 = !DILocation(line: 78, column: 8, scope: !435)
!443 = !DILocation(line: 78, column: 15, scope: !435)
!444 = !DILocation(line: 79, column: 7, scope: !435)
!445 = !DILocation(line: 79, column: 2, scope: !435)
!446 = !DILocation(line: 81, column: 2, scope: !435)
!447 = !DILocalVariable(name: "entropy_data", scope: !435, file: !14, line: 82, type: !448, align: 4)
!448 = !DICompositeType(tag: DW_TAG_array_type, baseType: !21, size: 256, align: 32, elements: !449)
!449 = !{!450}
!450 = !DISubrange(count: 8, lowerBound: 0)
!451 = !DILocation(line: 82, column: 10, scope: !435)
!452 = !DILocation(line: 213, column: 20, scope: !453, inlinedAt: !454)
!453 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!454 = !DILocation(line: 72, column: 26, scope: !455, inlinedAt: !456)
!455 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!456 = !DILocation(line: 83, column: 3, scope: !435)
!457 = !DILocation(line: 213, column: 12, scope: !453, inlinedAt: !454)
!458 = !DILocation(line: 72, column: 9, scope: !455, inlinedAt: !456)
!459 = !DILocation(line: 213, column: 20, scope: !460, inlinedAt: !461)
!460 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!461 = !DILocation(line: 72, column: 26, scope: !462, inlinedAt: !463)
!462 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!463 = !DILocation(line: 84, column: 3, scope: !435)
!464 = !DILocation(line: 213, column: 12, scope: !460, inlinedAt: !461)
!465 = !DILocation(line: 72, column: 9, scope: !462, inlinedAt: !463)
!466 = !DILocation(line: 213, column: 20, scope: !467, inlinedAt: !468)
!467 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!468 = !DILocation(line: 72, column: 26, scope: !469, inlinedAt: !470)
!469 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!470 = !DILocation(line: 85, column: 3, scope: !435)
!471 = !DILocation(line: 213, column: 12, scope: !467, inlinedAt: !468)
!472 = !DILocation(line: 72, column: 9, scope: !469, inlinedAt: !470)
!473 = !DILocation(line: 213, column: 20, scope: !474, inlinedAt: !475)
!474 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!475 = !DILocation(line: 72, column: 26, scope: !476, inlinedAt: !477)
!476 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!477 = !DILocation(line: 86, column: 3, scope: !435)
!478 = !DILocation(line: 213, column: 12, scope: !474, inlinedAt: !475)
!479 = !DILocation(line: 72, column: 9, scope: !476, inlinedAt: !477)
!480 = !DILocation(line: 87, column: 3, scope: !435)
!481 = !DILocation(line: 88, column: 8, scope: !435)
!482 = !DILocation(line: 213, column: 20, scope: !483, inlinedAt: !484)
!483 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!484 = !DILocation(line: 72, column: 26, scope: !485, inlinedAt: !486)
!485 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!486 = !DILocation(line: 88, column: 3, scope: !435)
!487 = !DILocation(line: 213, column: 12, scope: !483, inlinedAt: !484)
!488 = !DILocation(line: 72, column: 9, scope: !485, inlinedAt: !486)
!489 = !DILocation(line: 213, column: 20, scope: !490, inlinedAt: !491)
!490 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!491 = !DILocation(line: 72, column: 26, scope: !492, inlinedAt: !493)
!492 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!493 = !DILocation(line: 89, column: 3, scope: !435)
!494 = !DILocation(line: 213, column: 12, scope: !490, inlinedAt: !491)
!495 = !DILocation(line: 72, column: 9, scope: !492, inlinedAt: !493)
!496 = !DILocation(line: 213, column: 20, scope: !497, inlinedAt: !498)
!497 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!498 = !DILocation(line: 72, column: 26, scope: !499, inlinedAt: !500)
!499 = distinct !DISubprogram(name: "hash", linkageName: "hash", scope: !14, file: !14, line: 70, scopeLine: 70, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!500 = !DILocation(line: 90, column: 3, scope: !435)
!501 = !DILocation(line: 213, column: 12, scope: !497, inlinedAt: !498)
!502 = !DILocation(line: 72, column: 9, scope: !499, inlinedAt: !500)
!503 = !DILocation(line: 213, column: 20, scope: !504, inlinedAt: !505)
!504 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!505 = !DILocation(line: 92, column: 9, scope: !435)
!506 = !DILocation(line: 213, column: 12, scope: !504, inlinedAt: !505)
!507 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg128Random.set_seed", scope: !24, file: !24, line: 20, type: !508, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!508 = !DISubroutineType(types: !509)
!509 = !{null, !510, !254}
!510 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg128Random*", baseType: !511, size: 64, align: 64, dwarfAddressSpace: 0)
!511 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg128Random", scope: !24, file: !24, line: 18, baseType: !25, align: 16)
!512 = !DILocation(line: 21, column: 1, scope: !507)
!513 = !DILocalVariable(name: "self", arg: 1, scope: !507, file: !24, line: 20, type: !510)
!514 = !DILocation(line: 20, column: 32, scope: !507)
!515 = !DILocalVariable(name: "input", arg: 2, scope: !507, file: !24, line: 20, type: !254)
!516 = !DILocation(line: 20, column: 46, scope: !507)
!517 = !DILocation(line: 22, column: 3, scope: !507)
!518 = !DILocalVariable(name: "return_value", scope: !519, file: !24, line: 10, type: !25, align: 16)
!519 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!520 = !DILocation(line: 10, column: 8, scope: !519, inlinedAt: !521)
!521 = !DILocation(line: 22, column: 11, scope: !507)
!522 = !DILocation(line: 11, column: 2, scope: !519, inlinedAt: !521)
!523 = !DILocation(line: 12, column: 9, scope: !519, inlinedAt: !521)
!524 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg128Random.next_long", scope: !24, file: !24, line: 26, type: !525, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!525 = !DISubroutineType(types: !526)
!526 = !{!6, !510}
!527 = !DILocation(line: 27, column: 1, scope: !524)
!528 = !DILocalVariable(name: "self", arg: 1, scope: !524, file: !24, line: 26, type: !510)
!529 = !DILocation(line: 26, column: 33, scope: !524)
!530 = !DILocalVariable(name: "s", scope: !524, file: !24, line: 29, type: !531, align: 8)
!531 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !25, size: 64, align: 64, dwarfAddressSpace: 0)
!532 = !DILocation(line: 29, column: 11, scope: !524)
!533 = !DILocation(line: 29, column: 25, scope: !524)
!534 = !DILocalVariable(name: "xor", scope: !524, file: !24, line: 30, type: !25, align: 16)
!535 = !DILocation(line: 30, column: 10, scope: !524)
!536 = !DILocation(line: 30, column: 17, scope: !524)
!537 = !DILocation(line: 30, column: 22, scope: !524)
!538 = !DILocation(line: 30, column: 21, scope: !524)
!539 = !DILocation(line: 30, column: 16, scope: !524)
!540 = !DILocalVariable(name: "rot", scope: !524, file: !24, line: 31, type: !60, align: 1)
!541 = !DILocation(line: 31, column: 7, scope: !524)
!542 = !DILocation(line: 31, column: 21, scope: !524)
!543 = !DILocation(line: 31, column: 14, scope: !524)
!544 = !DILocation(line: 32, column: 3, scope: !524)
!545 = !DILocation(line: 32, column: 8, scope: !524)
!546 = !DILocation(line: 32, column: 7, scope: !524)
!547 = !DILocation(line: 33, column: 18, scope: !524)
!548 = !DILocation(line: 33, column: 11, scope: !524)
!549 = !DILocation(line: 33, column: 42, scope: !524)
!550 = !DILocation(line: 147, column: 53, scope: !551, inlinedAt: !548)
!551 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!552 = !DILocation(line: 147, column: 59, scope: !551, inlinedAt: !548)
!553 = !DILocation(line: 147, column: 65, scope: !551, inlinedAt: !548)
!554 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg128Random.next_bytes", scope: !24, file: !24, line: 39, type: !508, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!555 = !DILocation(line: 39, column: 66, scope: !554)
!556 = !DILocalVariable(name: "self", arg: 1, scope: !554, file: !24, line: 39, type: !510)
!557 = !DILocation(line: 39, column: 33, scope: !554)
!558 = !DILocalVariable(name: "bytes", arg: 2, scope: !554, file: !24, line: 39, type: !254)
!559 = !DILocation(line: 39, column: 47, scope: !554)
!560 = !DILocation(line: 37, column: 11, scope: !561)
!561 = distinct !DILexicalBlock(scope: !554, file: !24, line: 39, column: 66)
!562 = !DILocalVariable(name: "len", scope: !563, file: !24, line: 146, type: !259, align: 8)
!563 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!564 = !DILocation(line: 146, column: 6, scope: !563, inlinedAt: !555)
!565 = !DILocation(line: 146, column: 12, scope: !563, inlinedAt: !555)
!566 = !DILocation(line: 148, column: 2, scope: !563, inlinedAt: !555)
!567 = !DILocation(line: 148, column: 9, scope: !568, inlinedAt: !555)
!568 = distinct !DILexicalBlock(scope: !563, file: !2, line: 148, column: 2)
!569 = !DILocalVariable(name: "value", scope: !570, file: !24, line: 150, type: !6, align: 8)
!570 = distinct !DILexicalBlock(scope: !568, file: !2, line: 149, column: 2)
!571 = !DILocation(line: 150, column: 7, scope: !570, inlinedAt: !555)
!572 = !DILocation(line: 39, column: 89, scope: !570, inlinedAt: !555)
!573 = !DILocation(line: 150, column: 15, scope: !570, inlinedAt: !555)
!574 = !DILocation(line: 151, column: 7, scope: !570, inlinedAt: !555)
!575 = !DILocation(line: 153, column: 33, scope: !576, inlinedAt: !555)
!576 = distinct !DILexicalBlock(scope: !570, file: !2, line: 152, column: 3)
!577 = !DILocation(line: 153, column: 4, scope: !576, inlinedAt: !555)
!578 = !DILocation(line: 153, column: 10, scope: !576, inlinedAt: !555)
!579 = !DILocation(line: 154, column: 10, scope: !576, inlinedAt: !555)
!580 = !DILocation(line: 156, column: 3, scope: !570, inlinedAt: !555)
!581 = !DILocation(line: 157, column: 3, scope: !570, inlinedAt: !555)
!582 = !DILocation(line: 158, column: 11, scope: !570, inlinedAt: !555)
!583 = !DILocation(line: 158, column: 17, scope: !570, inlinedAt: !555)
!584 = !DILocation(line: 165, column: 33, scope: !585, inlinedAt: !586)
!585 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!586 = !DILocation(line: 160, column: 2, scope: !563, inlinedAt: !555)
!587 = !DILocation(line: 165, column: 2, scope: !585, inlinedAt: !586)
!588 = !DILocation(line: 167, column: 2, scope: !585, inlinedAt: !586)
!589 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg128Random.next_int128", scope: !24, file: !24, line: 40, type: !590, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!590 = !DISubroutineType(types: !591)
!591 = !{!25, !510}
!592 = !DILocation(line: 40, column: 56, scope: !589)
!593 = !DILocalVariable(name: "self", arg: 1, scope: !589, file: !24, line: 40, type: !510)
!594 = !DILocation(line: 40, column: 37, scope: !589)
!595 = !DILocation(line: 40, column: 72, scope: !596, inlinedAt: !592)
!596 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!597 = !DILocation(line: 138, column: 46, scope: !596, inlinedAt: !592)
!598 = !DILocation(line: 138, column: 72, scope: !596, inlinedAt: !592)
!599 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg128Random.next_int", scope: !24, file: !24, line: 41, type: !600, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!600 = !DISubroutineType(types: !601)
!601 = !{!21, !510}
!602 = !DILocation(line: 41, column: 50, scope: !599)
!603 = !DILocalVariable(name: "self", arg: 1, scope: !599, file: !24, line: 41, type: !510)
!604 = !DILocation(line: 41, column: 31, scope: !599)
!605 = !DILocation(line: 41, column: 56, scope: !599)
!606 = !DILocation(line: 41, column: 51, scope: !599)
!607 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg128Random.next_short", scope: !24, file: !24, line: 42, type: !608, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!608 = !DISubroutineType(types: !609)
!609 = !{!32, !510}
!610 = !DILocation(line: 42, column: 54, scope: !607)
!611 = !DILocalVariable(name: "self", arg: 1, scope: !607, file: !24, line: 42, type: !510)
!612 = !DILocation(line: 42, column: 35, scope: !607)
!613 = !DILocation(line: 42, column: 62, scope: !607)
!614 = !DILocation(line: 42, column: 55, scope: !607)
!615 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg128Random.next_byte", scope: !24, file: !24, line: 43, type: !616, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!616 = !DISubroutineType(types: !617)
!617 = !{!60, !510}
!618 = !DILocation(line: 43, column: 51, scope: !615)
!619 = !DILocalVariable(name: "self", arg: 1, scope: !615, file: !24, line: 43, type: !510)
!620 = !DILocation(line: 43, column: 32, scope: !615)
!621 = !DILocation(line: 43, column: 57, scope: !615)
!622 = !DILocation(line: 43, column: 52, scope: !615)
!623 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg64Random.set_seed", scope: !24, file: !24, line: 49, type: !624, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!624 = !DISubroutineType(types: !625)
!625 = !{null, !626, !254}
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg64Random*", baseType: !627, size: 64, align: 64, dwarfAddressSpace: 0)
!627 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg64Random", scope: !24, file: !24, line: 47, baseType: !6, align: 8)
!628 = !DILocation(line: 50, column: 1, scope: !623)
!629 = !DILocalVariable(name: "self", arg: 1, scope: !623, file: !24, line: 49, type: !626)
!630 = !DILocation(line: 49, column: 30, scope: !623)
!631 = !DILocalVariable(name: "input", arg: 2, scope: !623, file: !24, line: 49, type: !254)
!632 = !DILocation(line: 49, column: 44, scope: !623)
!633 = !DILocation(line: 51, column: 3, scope: !623)
!634 = !DILocalVariable(name: "return_value", scope: !635, file: !24, line: 10, type: !6, align: 8)
!635 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!636 = !DILocation(line: 10, column: 8, scope: !635, inlinedAt: !637)
!637 = !DILocation(line: 51, column: 11, scope: !623)
!638 = !DILocation(line: 11, column: 2, scope: !635, inlinedAt: !637)
!639 = !DILocation(line: 12, column: 9, scope: !635, inlinedAt: !637)
!640 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg64Random.next_int", scope: !24, file: !24, line: 54, type: !641, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!641 = !DISubroutineType(types: !642)
!642 = !{!21, !626}
!643 = !DILocation(line: 55, column: 1, scope: !640)
!644 = !DILocalVariable(name: "self", arg: 1, scope: !640, file: !24, line: 54, type: !626)
!645 = !DILocation(line: 54, column: 30, scope: !640)
!646 = !DILocalVariable(name: "s", scope: !640, file: !24, line: 57, type: !313, align: 8)
!647 = !DILocation(line: 57, column: 9, scope: !640)
!648 = !DILocation(line: 57, column: 21, scope: !640)
!649 = !DILocalVariable(name: "xor", scope: !640, file: !24, line: 58, type: !6, align: 8)
!650 = !DILocation(line: 58, column: 8, scope: !640)
!651 = !DILocation(line: 58, column: 15, scope: !640)
!652 = !DILocation(line: 58, column: 20, scope: !640)
!653 = !DILocation(line: 58, column: 19, scope: !640)
!654 = !DILocation(line: 58, column: 14, scope: !640)
!655 = !DILocalVariable(name: "rot", scope: !640, file: !24, line: 59, type: !60, align: 1)
!656 = !DILocation(line: 59, column: 7, scope: !640)
!657 = !DILocation(line: 59, column: 21, scope: !640)
!658 = !DILocation(line: 59, column: 14, scope: !640)
!659 = !DILocation(line: 60, column: 3, scope: !640)
!660 = !DILocation(line: 60, column: 8, scope: !640)
!661 = !DILocation(line: 60, column: 7, scope: !640)
!662 = !DILocation(line: 61, column: 17, scope: !640)
!663 = !DILocation(line: 61, column: 11, scope: !640)
!664 = !DILocation(line: 61, column: 41, scope: !640)
!665 = !DILocation(line: 99, column: 50, scope: !666, inlinedAt: !663)
!666 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!667 = !DILocation(line: 99, column: 56, scope: !666, inlinedAt: !663)
!668 = !DILocation(line: 99, column: 62, scope: !666, inlinedAt: !663)
!669 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg64Random.next_bytes", scope: !24, file: !24, line: 67, type: !624, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!670 = !DILocation(line: 67, column: 65, scope: !669)
!671 = !DILocalVariable(name: "self", arg: 1, scope: !669, file: !24, line: 67, type: !626)
!672 = !DILocation(line: 67, column: 32, scope: !669)
!673 = !DILocalVariable(name: "bytes", arg: 2, scope: !669, file: !24, line: 67, type: !254)
!674 = !DILocation(line: 67, column: 46, scope: !669)
!675 = !DILocation(line: 65, column: 11, scope: !676)
!676 = distinct !DILexicalBlock(scope: !669, file: !24, line: 67, column: 65)
!677 = !DILocalVariable(name: "len", scope: !678, file: !24, line: 146, type: !259, align: 8)
!678 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!679 = !DILocation(line: 146, column: 6, scope: !678, inlinedAt: !670)
!680 = !DILocation(line: 146, column: 12, scope: !678, inlinedAt: !670)
!681 = !DILocation(line: 148, column: 2, scope: !678, inlinedAt: !670)
!682 = !DILocation(line: 148, column: 9, scope: !683, inlinedAt: !670)
!683 = distinct !DILexicalBlock(scope: !678, file: !2, line: 148, column: 2)
!684 = !DILocalVariable(name: "value", scope: !685, file: !24, line: 150, type: !21, align: 4)
!685 = distinct !DILexicalBlock(scope: !683, file: !2, line: 149, column: 2)
!686 = !DILocation(line: 150, column: 7, scope: !685, inlinedAt: !670)
!687 = !DILocation(line: 67, column: 88, scope: !685, inlinedAt: !670)
!688 = !DILocation(line: 150, column: 15, scope: !685, inlinedAt: !670)
!689 = !DILocation(line: 151, column: 7, scope: !685, inlinedAt: !670)
!690 = !DILocation(line: 153, column: 33, scope: !691, inlinedAt: !670)
!691 = distinct !DILexicalBlock(scope: !685, file: !2, line: 152, column: 3)
!692 = !DILocation(line: 153, column: 4, scope: !691, inlinedAt: !670)
!693 = !DILocation(line: 153, column: 10, scope: !691, inlinedAt: !670)
!694 = !DILocation(line: 154, column: 10, scope: !691, inlinedAt: !670)
!695 = !DILocation(line: 156, column: 3, scope: !685, inlinedAt: !670)
!696 = !DILocation(line: 157, column: 3, scope: !685, inlinedAt: !670)
!697 = !DILocation(line: 158, column: 11, scope: !685, inlinedAt: !670)
!698 = !DILocation(line: 158, column: 17, scope: !685, inlinedAt: !670)
!699 = !DILocation(line: 165, column: 33, scope: !700, inlinedAt: !701)
!700 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!701 = !DILocation(line: 160, column: 2, scope: !678, inlinedAt: !670)
!702 = !DILocation(line: 165, column: 2, scope: !700, inlinedAt: !701)
!703 = !DILocation(line: 167, column: 2, scope: !700, inlinedAt: !701)
!704 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg64Random.next_int128", scope: !24, file: !24, line: 68, type: !705, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!705 = !DISubroutineType(types: !706)
!706 = !{!25, !626}
!707 = !DILocation(line: 68, column: 55, scope: !704)
!708 = !DILocalVariable(name: "self", arg: 1, scope: !704, file: !24, line: 68, type: !626)
!709 = !DILocation(line: 68, column: 36, scope: !704)
!710 = !DILocation(line: 68, column: 71, scope: !711, inlinedAt: !707)
!711 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!712 = !DILocation(line: 138, column: 46, scope: !711, inlinedAt: !707)
!713 = !DILocation(line: 138, column: 72, scope: !711, inlinedAt: !707)
!714 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg64Random.next_long", scope: !24, file: !24, line: 69, type: !715, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!715 = !DISubroutineType(types: !716)
!716 = !{!6, !626}
!717 = !DILocation(line: 69, column: 51, scope: !714)
!718 = !DILocalVariable(name: "self", arg: 1, scope: !714, file: !24, line: 69, type: !626)
!719 = !DILocation(line: 69, column: 32, scope: !714)
!720 = !DILocation(line: 69, column: 64, scope: !721, inlinedAt: !717)
!721 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!722 = !DILocation(line: 139, column: 41, scope: !721, inlinedAt: !717)
!723 = !DILocation(line: 139, column: 65, scope: !721, inlinedAt: !717)
!724 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg64Random.next_short", scope: !24, file: !24, line: 70, type: !725, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!725 = !DISubroutineType(types: !726)
!726 = !{!32, !626}
!727 = !DILocation(line: 70, column: 53, scope: !724)
!728 = !DILocalVariable(name: "self", arg: 1, scope: !724, file: !24, line: 70, type: !626)
!729 = !DILocation(line: 70, column: 34, scope: !724)
!730 = !DILocation(line: 70, column: 61, scope: !724)
!731 = !DILocation(line: 70, column: 54, scope: !724)
!732 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg64Random.next_byte", scope: !24, file: !24, line: 71, type: !733, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!733 = !DISubroutineType(types: !734)
!734 = !{!60, !626}
!735 = !DILocation(line: 71, column: 50, scope: !732)
!736 = !DILocalVariable(name: "self", arg: 1, scope: !732, file: !24, line: 71, type: !626)
!737 = !DILocation(line: 71, column: 31, scope: !732)
!738 = !DILocation(line: 71, column: 56, scope: !732)
!739 = !DILocation(line: 71, column: 51, scope: !732)
!740 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg32Random.set_seed", scope: !24, file: !24, line: 78, type: !741, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!741 = !DISubroutineType(types: !742)
!742 = !{null, !743, !254}
!743 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg32Random*", baseType: !744, size: 64, align: 64, dwarfAddressSpace: 0)
!744 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg32Random", scope: !24, file: !24, line: 76, baseType: !21, align: 4)
!745 = !DILocation(line: 79, column: 1, scope: !740)
!746 = !DILocalVariable(name: "self", arg: 1, scope: !740, file: !24, line: 78, type: !743)
!747 = !DILocation(line: 78, column: 30, scope: !740)
!748 = !DILocalVariable(name: "input", arg: 2, scope: !740, file: !24, line: 78, type: !254)
!749 = !DILocation(line: 78, column: 44, scope: !740)
!750 = !DILocation(line: 80, column: 3, scope: !740)
!751 = !DILocalVariable(name: "return_value", scope: !752, file: !24, line: 10, type: !21, align: 4)
!752 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!753 = !DILocation(line: 10, column: 8, scope: !752, inlinedAt: !754)
!754 = !DILocation(line: 80, column: 11, scope: !740)
!755 = !DILocation(line: 11, column: 2, scope: !752, inlinedAt: !754)
!756 = !DILocation(line: 12, column: 9, scope: !752, inlinedAt: !754)
!757 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg32Random.next_short", scope: !24, file: !24, line: 83, type: !758, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!758 = !DISubroutineType(types: !759)
!759 = !{!32, !743}
!760 = !DILocation(line: 84, column: 1, scope: !757)
!761 = !DILocalVariable(name: "self", arg: 1, scope: !757, file: !24, line: 83, type: !743)
!762 = !DILocation(line: 83, column: 34, scope: !757)
!763 = !DILocalVariable(name: "s", scope: !757, file: !24, line: 86, type: !764, align: 8)
!764 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !21, size: 64, align: 64, dwarfAddressSpace: 0)
!765 = !DILocation(line: 86, column: 8, scope: !757)
!766 = !DILocation(line: 86, column: 19, scope: !757)
!767 = !DILocalVariable(name: "xor", scope: !757, file: !24, line: 87, type: !21, align: 4)
!768 = !DILocation(line: 87, column: 7, scope: !757)
!769 = !DILocation(line: 87, column: 14, scope: !757)
!770 = !DILocation(line: 87, column: 19, scope: !757)
!771 = !DILocation(line: 87, column: 18, scope: !757)
!772 = !DILocation(line: 87, column: 13, scope: !757)
!773 = !DILocalVariable(name: "rot", scope: !757, file: !24, line: 88, type: !60, align: 1)
!774 = !DILocation(line: 88, column: 7, scope: !757)
!775 = !DILocation(line: 88, column: 21, scope: !757)
!776 = !DILocation(line: 88, column: 14, scope: !757)
!777 = !DILocation(line: 89, column: 3, scope: !757)
!778 = !DILocation(line: 89, column: 8, scope: !757)
!779 = !DILocation(line: 89, column: 7, scope: !757)
!780 = !DILocation(line: 90, column: 19, scope: !757)
!781 = !DILocation(line: 90, column: 11, scope: !757)
!782 = !DILocation(line: 90, column: 43, scope: !757)
!783 = !DILocation(line: 115, column: 56, scope: !784, inlinedAt: !781)
!784 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!785 = !DILocation(line: 115, column: 62, scope: !784, inlinedAt: !781)
!786 = !DILocation(line: 115, column: 68, scope: !784, inlinedAt: !781)
!787 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg32Random.next_bytes", scope: !24, file: !24, line: 96, type: !741, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!788 = !DILocation(line: 96, column: 65, scope: !787)
!789 = !DILocalVariable(name: "self", arg: 1, scope: !787, file: !24, line: 96, type: !743)
!790 = !DILocation(line: 96, column: 32, scope: !787)
!791 = !DILocalVariable(name: "bytes", arg: 2, scope: !787, file: !24, line: 96, type: !254)
!792 = !DILocation(line: 96, column: 46, scope: !787)
!793 = !DILocation(line: 94, column: 11, scope: !794)
!794 = distinct !DILexicalBlock(scope: !787, file: !24, line: 96, column: 65)
!795 = !DILocalVariable(name: "len", scope: !796, file: !24, line: 146, type: !259, align: 8)
!796 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!797 = !DILocation(line: 146, column: 6, scope: !796, inlinedAt: !788)
!798 = !DILocation(line: 146, column: 12, scope: !796, inlinedAt: !788)
!799 = !DILocation(line: 148, column: 2, scope: !796, inlinedAt: !788)
!800 = !DILocation(line: 148, column: 9, scope: !801, inlinedAt: !788)
!801 = distinct !DILexicalBlock(scope: !796, file: !2, line: 148, column: 2)
!802 = !DILocalVariable(name: "value", scope: !803, file: !24, line: 150, type: !32, align: 2)
!803 = distinct !DILexicalBlock(scope: !801, file: !2, line: 149, column: 2)
!804 = !DILocation(line: 150, column: 7, scope: !803, inlinedAt: !788)
!805 = !DILocation(line: 96, column: 88, scope: !803, inlinedAt: !788)
!806 = !DILocation(line: 150, column: 15, scope: !803, inlinedAt: !788)
!807 = !DILocation(line: 151, column: 7, scope: !803, inlinedAt: !788)
!808 = !DILocation(line: 153, column: 33, scope: !809, inlinedAt: !788)
!809 = distinct !DILexicalBlock(scope: !803, file: !2, line: 152, column: 3)
!810 = !DILocation(line: 153, column: 4, scope: !809, inlinedAt: !788)
!811 = !DILocation(line: 153, column: 10, scope: !809, inlinedAt: !788)
!812 = !DILocation(line: 154, column: 10, scope: !809, inlinedAt: !788)
!813 = !DILocation(line: 156, column: 3, scope: !803, inlinedAt: !788)
!814 = !DILocation(line: 157, column: 3, scope: !803, inlinedAt: !788)
!815 = !DILocation(line: 158, column: 11, scope: !803, inlinedAt: !788)
!816 = !DILocation(line: 158, column: 17, scope: !803, inlinedAt: !788)
!817 = !DILocation(line: 165, column: 33, scope: !818, inlinedAt: !819)
!818 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!819 = !DILocation(line: 160, column: 2, scope: !796, inlinedAt: !788)
!820 = !DILocation(line: 165, column: 2, scope: !818, inlinedAt: !819)
!821 = !DILocation(line: 167, column: 2, scope: !818, inlinedAt: !819)
!822 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg32Random.next_int128", scope: !24, file: !24, line: 97, type: !823, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!823 = !DISubroutineType(types: !824)
!824 = !{!25, !743}
!825 = !DILocation(line: 97, column: 55, scope: !822)
!826 = !DILocalVariable(name: "self", arg: 1, scope: !822, file: !24, line: 97, type: !743)
!827 = !DILocation(line: 97, column: 36, scope: !822)
!828 = !DILocation(line: 97, column: 71, scope: !829, inlinedAt: !825)
!829 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!830 = !DILocation(line: 138, column: 46, scope: !829, inlinedAt: !825)
!831 = !DILocation(line: 138, column: 72, scope: !829, inlinedAt: !825)
!832 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg32Random.next_long", scope: !24, file: !24, line: 98, type: !833, scopeLine: 98, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!833 = !DISubroutineType(types: !834)
!834 = !{!6, !743}
!835 = !DILocation(line: 98, column: 51, scope: !832)
!836 = !DILocalVariable(name: "self", arg: 1, scope: !832, file: !24, line: 98, type: !743)
!837 = !DILocation(line: 98, column: 32, scope: !832)
!838 = !DILocation(line: 98, column: 64, scope: !839, inlinedAt: !835)
!839 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!840 = !DILocation(line: 139, column: 41, scope: !839, inlinedAt: !835)
!841 = !DILocation(line: 139, column: 65, scope: !839, inlinedAt: !835)
!842 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg32Random.next_int", scope: !24, file: !24, line: 99, type: !843, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!843 = !DISubroutineType(types: !844)
!844 = !{!21, !743}
!845 = !DILocation(line: 99, column: 49, scope: !842)
!846 = !DILocalVariable(name: "self", arg: 1, scope: !842, file: !24, line: 99, type: !743)
!847 = !DILocation(line: 99, column: 30, scope: !842)
!848 = !DILocation(line: 99, column: 63, scope: !849, inlinedAt: !845)
!849 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!850 = !DILocation(line: 140, column: 41, scope: !849, inlinedAt: !845)
!851 = !DILocation(line: 140, column: 64, scope: !849, inlinedAt: !845)
!852 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg32Random.next_byte", scope: !24, file: !24, line: 100, type: !853, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!853 = !DISubroutineType(types: !854)
!854 = !{!60, !743}
!855 = !DILocation(line: 100, column: 50, scope: !852)
!856 = !DILocalVariable(name: "self", arg: 1, scope: !852, file: !24, line: 100, type: !743)
!857 = !DILocation(line: 100, column: 31, scope: !852)
!858 = !DILocation(line: 100, column: 56, scope: !852)
!859 = !DILocation(line: 100, column: 51, scope: !852)
!860 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Pcg16Random.set_seed", scope: !24, file: !24, line: 106, type: !861, scopeLine: 106, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!861 = !DISubroutineType(types: !862)
!862 = !{null, !863, !254}
!863 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Pcg16Random*", baseType: !864, size: 64, align: 64, dwarfAddressSpace: 0)
!864 = !DIDerivedType(tag: DW_TAG_typedef, name: "Pcg16Random", scope: !24, file: !24, line: 104, baseType: !32, align: 2)
!865 = !DILocation(line: 107, column: 1, scope: !860)
!866 = !DILocalVariable(name: "self", arg: 1, scope: !860, file: !24, line: 106, type: !863)
!867 = !DILocation(line: 106, column: 30, scope: !860)
!868 = !DILocalVariable(name: "input", arg: 2, scope: !860, file: !24, line: 106, type: !254)
!869 = !DILocation(line: 106, column: 44, scope: !860)
!870 = !DILocation(line: 108, column: 3, scope: !860)
!871 = !DILocalVariable(name: "return_value", scope: !872, file: !24, line: 10, type: !32, align: 2)
!872 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!873 = !DILocation(line: 10, column: 8, scope: !872, inlinedAt: !874)
!874 = !DILocation(line: 108, column: 11, scope: !860)
!875 = !DILocation(line: 11, column: 2, scope: !872, inlinedAt: !874)
!876 = !DILocation(line: 12, column: 9, scope: !872, inlinedAt: !874)
!877 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Pcg16Random.next_byte", scope: !24, file: !24, line: 111, type: !878, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!878 = !DISubroutineType(types: !879)
!879 = !{!60, !863}
!880 = !DILocation(line: 112, column: 1, scope: !877)
!881 = !DILocalVariable(name: "self", arg: 1, scope: !877, file: !24, line: 111, type: !863)
!882 = !DILocation(line: 111, column: 31, scope: !877)
!883 = !DILocalVariable(name: "s", scope: !877, file: !24, line: 114, type: !884, align: 8)
!884 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !32, size: 64, align: 64, dwarfAddressSpace: 0)
!885 = !DILocation(line: 114, column: 10, scope: !877)
!886 = !DILocation(line: 114, column: 23, scope: !877)
!887 = !DILocalVariable(name: "xor", scope: !877, file: !24, line: 115, type: !32, align: 2)
!888 = !DILocation(line: 115, column: 9, scope: !877)
!889 = !DILocation(line: 115, column: 16, scope: !877)
!890 = !DILocation(line: 115, column: 21, scope: !877)
!891 = !DILocation(line: 115, column: 20, scope: !877)
!892 = !DILocation(line: 115, column: 15, scope: !877)
!893 = !DILocalVariable(name: "rot", scope: !877, file: !24, line: 116, type: !60, align: 1)
!894 = !DILocation(line: 116, column: 7, scope: !877)
!895 = !DILocation(line: 116, column: 21, scope: !877)
!896 = !DILocation(line: 116, column: 14, scope: !877)
!897 = !DILocation(line: 117, column: 3, scope: !877)
!898 = !DILocation(line: 117, column: 8, scope: !877)
!899 = !DILocation(line: 117, column: 7, scope: !877)
!900 = !DILocation(line: 118, column: 17, scope: !877)
!901 = !DILocation(line: 118, column: 11, scope: !877)
!902 = !DILocation(line: 131, column: 50, scope: !903, inlinedAt: !901)
!903 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!904 = !DILocation(line: 131, column: 56, scope: !903, inlinedAt: !901)
!905 = !DILocation(line: 131, column: 62, scope: !903, inlinedAt: !901)
!906 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Pcg16Random.next_bytes", scope: !24, file: !24, line: 121, type: !861, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!907 = !DILocation(line: 121, column: 65, scope: !906)
!908 = !DILocalVariable(name: "self", arg: 1, scope: !906, file: !24, line: 121, type: !863)
!909 = !DILocation(line: 121, column: 32, scope: !906)
!910 = !DILocalVariable(name: "bytes", arg: 2, scope: !906, file: !24, line: 121, type: !254)
!911 = !DILocation(line: 121, column: 46, scope: !906)
!912 = !DILocalVariable(name: "len", scope: !913, file: !24, line: 146, type: !259, align: 8)
!913 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!914 = !DILocation(line: 146, column: 6, scope: !913, inlinedAt: !907)
!915 = !DILocation(line: 146, column: 12, scope: !913, inlinedAt: !907)
!916 = !DILocation(line: 148, column: 2, scope: !913, inlinedAt: !907)
!917 = !DILocation(line: 148, column: 9, scope: !918, inlinedAt: !907)
!918 = distinct !DILexicalBlock(scope: !913, file: !2, line: 148, column: 2)
!919 = !DILocalVariable(name: "value", scope: !920, file: !24, line: 150, type: !60, align: 1)
!920 = distinct !DILexicalBlock(scope: !918, file: !2, line: 149, column: 2)
!921 = !DILocation(line: 150, column: 7, scope: !920, inlinedAt: !907)
!922 = !DILocation(line: 121, column: 88, scope: !920, inlinedAt: !907)
!923 = !DILocation(line: 150, column: 15, scope: !920, inlinedAt: !907)
!924 = !DILocation(line: 151, column: 7, scope: !920, inlinedAt: !907)
!925 = !DILocation(line: 153, column: 33, scope: !926, inlinedAt: !907)
!926 = distinct !DILexicalBlock(scope: !920, file: !2, line: 152, column: 3)
!927 = !DILocation(line: 153, column: 4, scope: !926, inlinedAt: !907)
!928 = !DILocation(line: 153, column: 10, scope: !926, inlinedAt: !907)
!929 = !DILocation(line: 154, column: 10, scope: !926, inlinedAt: !907)
!930 = !DILocation(line: 156, column: 3, scope: !920, inlinedAt: !907)
!931 = !DILocation(line: 157, column: 3, scope: !920, inlinedAt: !907)
!932 = !DILocation(line: 158, column: 11, scope: !920, inlinedAt: !907)
!933 = !DILocation(line: 158, column: 17, scope: !920, inlinedAt: !907)
!934 = !DILocation(line: 165, column: 33, scope: !935, inlinedAt: !936)
!935 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!936 = !DILocation(line: 160, column: 2, scope: !913, inlinedAt: !907)
!937 = !DILocation(line: 165, column: 2, scope: !935, inlinedAt: !936)
!938 = !DILocation(line: 167, column: 2, scope: !935, inlinedAt: !936)
!939 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Pcg16Random.next_int128", scope: !24, file: !24, line: 122, type: !940, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!940 = !DISubroutineType(types: !941)
!941 = !{!25, !863}
!942 = !DILocation(line: 122, column: 55, scope: !939)
!943 = !DILocalVariable(name: "self", arg: 1, scope: !939, file: !24, line: 122, type: !863)
!944 = !DILocation(line: 122, column: 36, scope: !939)
!945 = !DILocation(line: 122, column: 71, scope: !946, inlinedAt: !942)
!946 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!947 = !DILocation(line: 138, column: 46, scope: !946, inlinedAt: !942)
!948 = !DILocation(line: 138, column: 72, scope: !946, inlinedAt: !942)
!949 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Pcg16Random.next_long", scope: !24, file: !24, line: 123, type: !950, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!950 = !DISubroutineType(types: !951)
!951 = !{!6, !863}
!952 = !DILocation(line: 123, column: 51, scope: !949)
!953 = !DILocalVariable(name: "self", arg: 1, scope: !949, file: !24, line: 123, type: !863)
!954 = !DILocation(line: 123, column: 32, scope: !949)
!955 = !DILocation(line: 123, column: 64, scope: !956, inlinedAt: !952)
!956 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!957 = !DILocation(line: 139, column: 41, scope: !956, inlinedAt: !952)
!958 = !DILocation(line: 139, column: 65, scope: !956, inlinedAt: !952)
!959 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Pcg16Random.next_int", scope: !24, file: !24, line: 124, type: !960, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!960 = !DISubroutineType(types: !961)
!961 = !{!21, !863}
!962 = !DILocation(line: 124, column: 49, scope: !959)
!963 = !DILocalVariable(name: "self", arg: 1, scope: !959, file: !24, line: 124, type: !863)
!964 = !DILocation(line: 124, column: 30, scope: !959)
!965 = !DILocation(line: 124, column: 63, scope: !966, inlinedAt: !962)
!966 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!967 = !DILocation(line: 140, column: 41, scope: !966, inlinedAt: !962)
!968 = !DILocation(line: 140, column: 64, scope: !966, inlinedAt: !962)
!969 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Pcg16Random.next_short", scope: !24, file: !24, line: 125, type: !970, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!970 = !DISubroutineType(types: !971)
!971 = !{!32, !863}
!972 = !DILocation(line: 125, column: 53, scope: !969)
!973 = !DILocalVariable(name: "self", arg: 1, scope: !969, file: !24, line: 125, type: !863)
!974 = !DILocation(line: 125, column: 34, scope: !969)
!975 = !DILocation(line: 125, column: 68, scope: !976, inlinedAt: !972)
!976 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!977 = !DILocation(line: 141, column: 44, scope: !976, inlinedAt: !972)
!978 = !DILocation(line: 141, column: 68, scope: !976, inlinedAt: !972)
!979 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc128Random.set_seed", scope: !4, file: !4, line: 15, type: !980, scopeLine: 15, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!980 = !DISubroutineType(types: !981)
!981 = !{null, !982, !254}
!982 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc128Random*", baseType: !983, size: 64, align: 64, dwarfAddressSpace: 0)
!983 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc128Random", scope: !4, file: !4, line: 13, baseType: !984, align: 16)
!984 = !DICompositeType(tag: DW_TAG_array_type, baseType: !25, size: 512, align: 128, elements: !7)
!985 = !DILocation(line: 16, column: 1, scope: !979)
!986 = !DILocalVariable(name: "self", arg: 1, scope: !979, file: !4, line: 15, type: !982)
!987 = !DILocation(line: 15, column: 32, scope: !979)
!988 = !DILocalVariable(name: "input", arg: 2, scope: !979, file: !4, line: 15, type: !254)
!989 = !DILocation(line: 15, column: 46, scope: !979)
!990 = !DILocation(line: 17, column: 3, scope: !979)
!991 = !DILocalVariable(name: "return_value", scope: !992, file: !4, line: 10, type: !984, align: 16)
!992 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!993 = !DILocation(line: 10, column: 8, scope: !992, inlinedAt: !994)
!994 = !DILocation(line: 17, column: 11, scope: !979)
!995 = !DILocation(line: 11, column: 2, scope: !992, inlinedAt: !994)
!996 = !DILocation(line: 12, column: 9, scope: !992, inlinedAt: !994)
!997 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc128Random.next_int128", scope: !4, file: !4, line: 20, type: !998, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!998 = !DISubroutineType(types: !999)
!999 = !{!25, !982}
!1000 = !DILocation(line: 21, column: 1, scope: !997)
!1001 = !DILocalVariable(name: "self", arg: 1, scope: !997, file: !4, line: 20, type: !982)
!1002 = !DILocation(line: 20, column: 37, scope: !997)
!1003 = !DILocalVariable(name: "s", scope: !997, file: !4, line: 22, type: !531, align: 8)
!1004 = !DILocation(line: 22, column: 11, scope: !997)
!1005 = !DILocation(line: 22, column: 28, scope: !997)
!1006 = !DILocalVariable(name: "result", scope: !997, file: !4, line: 23, type: !25, align: 16)
!1007 = !DILocation(line: 23, column: 10, scope: !997)
!1008 = !DILocation(line: 23, column: 19, scope: !997)
!1009 = !DILocation(line: 23, column: 21, scope: !997)
!1010 = !DILocation(line: 23, column: 26, scope: !997)
!1011 = !DILocation(line: 23, column: 28, scope: !997)
!1012 = !DILocation(line: 23, column: 33, scope: !997)
!1013 = !DILocation(line: 23, column: 35, scope: !997)
!1014 = !DILocation(line: 24, column: 2, scope: !997)
!1015 = !DILocation(line: 24, column: 9, scope: !997)
!1016 = !DILocation(line: 24, column: 11, scope: !997)
!1017 = !DILocation(line: 24, column: 16, scope: !997)
!1018 = !DILocation(line: 24, column: 18, scope: !997)
!1019 = !DILocation(line: 25, column: 2, scope: !997)
!1020 = !DILocation(line: 25, column: 4, scope: !997)
!1021 = !DILocation(line: 25, column: 9, scope: !997)
!1022 = !DILocation(line: 25, column: 11, scope: !997)
!1023 = !DILocation(line: 25, column: 16, scope: !997)
!1024 = !DILocation(line: 25, column: 18, scope: !997)
!1025 = !DILocation(line: 26, column: 2, scope: !997)
!1026 = !DILocation(line: 26, column: 4, scope: !997)
!1027 = !DILocation(line: 26, column: 9, scope: !997)
!1028 = !DILocation(line: 26, column: 11, scope: !997)
!1029 = !DILocation(line: 163, column: 59, scope: !1030, inlinedAt: !1027)
!1030 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1031 = !DILocation(line: 163, column: 65, scope: !1030, inlinedAt: !1027)
!1032 = !DILocation(line: 163, column: 71, scope: !1030, inlinedAt: !1027)
!1033 = !DILocation(line: 26, column: 25, scope: !997)
!1034 = !DILocation(line: 27, column: 2, scope: !997)
!1035 = !DILocation(line: 27, column: 4, scope: !997)
!1036 = !DILocation(line: 28, column: 9, scope: !997)
!1037 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc128Random.next_bytes", scope: !4, file: !4, line: 34, type: !980, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1038 = !DILocation(line: 34, column: 66, scope: !1037)
!1039 = !DILocalVariable(name: "self", arg: 1, scope: !1037, file: !4, line: 34, type: !982)
!1040 = !DILocation(line: 34, column: 33, scope: !1037)
!1041 = !DILocalVariable(name: "bytes", arg: 2, scope: !1037, file: !4, line: 34, type: !254)
!1042 = !DILocation(line: 34, column: 47, scope: !1037)
!1043 = !DILocation(line: 32, column: 11, scope: !1044)
!1044 = distinct !DILexicalBlock(scope: !1037, file: !4, line: 34, column: 66)
!1045 = !DILocalVariable(name: "len", scope: !1046, file: !4, line: 146, type: !259, align: 8)
!1046 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1047 = !DILocation(line: 146, column: 6, scope: !1046, inlinedAt: !1038)
!1048 = !DILocation(line: 146, column: 12, scope: !1046, inlinedAt: !1038)
!1049 = !DILocation(line: 148, column: 2, scope: !1046, inlinedAt: !1038)
!1050 = !DILocation(line: 148, column: 9, scope: !1051, inlinedAt: !1038)
!1051 = distinct !DILexicalBlock(scope: !1046, file: !2, line: 148, column: 2)
!1052 = !DILocalVariable(name: "value", scope: !1053, file: !4, line: 150, type: !25, align: 16)
!1053 = distinct !DILexicalBlock(scope: !1051, file: !2, line: 149, column: 2)
!1054 = !DILocation(line: 150, column: 7, scope: !1053, inlinedAt: !1038)
!1055 = !DILocation(line: 34, column: 89, scope: !1053, inlinedAt: !1038)
!1056 = !DILocation(line: 150, column: 15, scope: !1053, inlinedAt: !1038)
!1057 = !DILocation(line: 151, column: 7, scope: !1053, inlinedAt: !1038)
!1058 = !DILocation(line: 153, column: 33, scope: !1059, inlinedAt: !1038)
!1059 = distinct !DILexicalBlock(scope: !1053, file: !2, line: 152, column: 3)
!1060 = !DILocation(line: 153, column: 4, scope: !1059, inlinedAt: !1038)
!1061 = !DILocation(line: 153, column: 10, scope: !1059, inlinedAt: !1038)
!1062 = !DILocation(line: 154, column: 10, scope: !1059, inlinedAt: !1038)
!1063 = !DILocation(line: 156, column: 3, scope: !1053, inlinedAt: !1038)
!1064 = !DILocation(line: 157, column: 3, scope: !1053, inlinedAt: !1038)
!1065 = !DILocation(line: 158, column: 11, scope: !1053, inlinedAt: !1038)
!1066 = !DILocation(line: 158, column: 17, scope: !1053, inlinedAt: !1038)
!1067 = !DILocation(line: 165, column: 33, scope: !1068, inlinedAt: !1069)
!1068 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1069 = !DILocation(line: 160, column: 2, scope: !1046, inlinedAt: !1038)
!1070 = !DILocation(line: 165, column: 2, scope: !1068, inlinedAt: !1069)
!1071 = !DILocation(line: 167, column: 2, scope: !1068, inlinedAt: !1069)
!1072 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc128Random.next_long", scope: !4, file: !4, line: 35, type: !1073, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1073 = !DISubroutineType(types: !1074)
!1074 = !{!6, !982}
!1075 = !DILocation(line: 35, column: 52, scope: !1072)
!1076 = !DILocalVariable(name: "self", arg: 1, scope: !1072, file: !4, line: 35, type: !982)
!1077 = !DILocation(line: 35, column: 33, scope: !1072)
!1078 = !DILocation(line: 35, column: 58, scope: !1072)
!1079 = !DILocation(line: 35, column: 53, scope: !1072)
!1080 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc128Random.next_int", scope: !4, file: !4, line: 36, type: !1081, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1081 = !DISubroutineType(types: !1082)
!1082 = !{!21, !982}
!1083 = !DILocation(line: 36, column: 50, scope: !1080)
!1084 = !DILocalVariable(name: "self", arg: 1, scope: !1080, file: !4, line: 36, type: !982)
!1085 = !DILocation(line: 36, column: 31, scope: !1080)
!1086 = !DILocation(line: 36, column: 56, scope: !1080)
!1087 = !DILocation(line: 36, column: 51, scope: !1080)
!1088 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc128Random.next_short", scope: !4, file: !4, line: 37, type: !1089, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1089 = !DISubroutineType(types: !1090)
!1090 = !{!32, !982}
!1091 = !DILocation(line: 37, column: 54, scope: !1088)
!1092 = !DILocalVariable(name: "self", arg: 1, scope: !1088, file: !4, line: 37, type: !982)
!1093 = !DILocation(line: 37, column: 35, scope: !1088)
!1094 = !DILocation(line: 37, column: 62, scope: !1088)
!1095 = !DILocation(line: 37, column: 55, scope: !1088)
!1096 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc128Random.next_byte", scope: !4, file: !4, line: 38, type: !1097, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{!60, !982}
!1099 = !DILocation(line: 38, column: 51, scope: !1096)
!1100 = !DILocalVariable(name: "self", arg: 1, scope: !1096, file: !4, line: 38, type: !982)
!1101 = !DILocation(line: 38, column: 32, scope: !1096)
!1102 = !DILocation(line: 38, column: 57, scope: !1096)
!1103 = !DILocation(line: 38, column: 52, scope: !1096)
!1104 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc64Random.set_seed", scope: !4, file: !4, line: 45, type: !1105, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{null, !1107, !254}
!1107 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc64Random*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!1108 = !DILocation(line: 46, column: 1, scope: !1104)
!1109 = !DILocalVariable(name: "self", arg: 1, scope: !1104, file: !4, line: 45, type: !1107)
!1110 = !DILocation(line: 45, column: 31, scope: !1104)
!1111 = !DILocalVariable(name: "input", arg: 2, scope: !1104, file: !4, line: 45, type: !254)
!1112 = !DILocation(line: 45, column: 45, scope: !1104)
!1113 = !DILocation(line: 47, column: 3, scope: !1104)
!1114 = !DILocalVariable(name: "return_value", scope: !1115, file: !4, line: 10, type: !5, align: 8)
!1115 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1116 = !DILocation(line: 10, column: 8, scope: !1115, inlinedAt: !1117)
!1117 = !DILocation(line: 47, column: 11, scope: !1104)
!1118 = !DILocation(line: 11, column: 2, scope: !1115, inlinedAt: !1117)
!1119 = !DILocation(line: 12, column: 9, scope: !1115, inlinedAt: !1117)
!1120 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc64Random.next_long", scope: !4, file: !4, line: 50, type: !1121, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1121 = !DISubroutineType(types: !1122)
!1122 = !{!6, !1107}
!1123 = !DILocation(line: 51, column: 1, scope: !1120)
!1124 = !DILocalVariable(name: "self", arg: 1, scope: !1120, file: !4, line: 50, type: !1107)
!1125 = !DILocation(line: 50, column: 32, scope: !1120)
!1126 = !DILocalVariable(name: "s", scope: !1120, file: !4, line: 52, type: !313, align: 8)
!1127 = !DILocation(line: 52, column: 9, scope: !1120)
!1128 = !DILocation(line: 52, column: 24, scope: !1120)
!1129 = !DILocalVariable(name: "result", scope: !1120, file: !4, line: 53, type: !6, align: 8)
!1130 = !DILocation(line: 53, column: 8, scope: !1120)
!1131 = !DILocation(line: 53, column: 17, scope: !1120)
!1132 = !DILocation(line: 53, column: 19, scope: !1120)
!1133 = !DILocation(line: 53, column: 24, scope: !1120)
!1134 = !DILocation(line: 53, column: 26, scope: !1120)
!1135 = !DILocation(line: 53, column: 31, scope: !1120)
!1136 = !DILocation(line: 53, column: 33, scope: !1120)
!1137 = !DILocation(line: 54, column: 2, scope: !1120)
!1138 = !DILocation(line: 54, column: 9, scope: !1120)
!1139 = !DILocation(line: 54, column: 11, scope: !1120)
!1140 = !DILocation(line: 54, column: 16, scope: !1120)
!1141 = !DILocation(line: 54, column: 18, scope: !1120)
!1142 = !DILocation(line: 55, column: 2, scope: !1120)
!1143 = !DILocation(line: 55, column: 4, scope: !1120)
!1144 = !DILocation(line: 55, column: 9, scope: !1120)
!1145 = !DILocation(line: 55, column: 11, scope: !1120)
!1146 = !DILocation(line: 55, column: 16, scope: !1120)
!1147 = !DILocation(line: 55, column: 18, scope: !1120)
!1148 = !DILocation(line: 56, column: 2, scope: !1120)
!1149 = !DILocation(line: 56, column: 4, scope: !1120)
!1150 = !DILocation(line: 56, column: 9, scope: !1120)
!1151 = !DILocation(line: 56, column: 11, scope: !1120)
!1152 = !DILocation(line: 147, column: 53, scope: !1153, inlinedAt: !1150)
!1153 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1154 = !DILocation(line: 147, column: 59, scope: !1153, inlinedAt: !1150)
!1155 = !DILocation(line: 147, column: 65, scope: !1153, inlinedAt: !1150)
!1156 = !DILocation(line: 56, column: 25, scope: !1120)
!1157 = !DILocation(line: 57, column: 2, scope: !1120)
!1158 = !DILocation(line: 57, column: 4, scope: !1120)
!1159 = !DILocation(line: 58, column: 9, scope: !1120)
!1160 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc64Random.next_bytes", scope: !4, file: !4, line: 64, type: !1105, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1161 = !DILocation(line: 64, column: 65, scope: !1160)
!1162 = !DILocalVariable(name: "self", arg: 1, scope: !1160, file: !4, line: 64, type: !1107)
!1163 = !DILocation(line: 64, column: 32, scope: !1160)
!1164 = !DILocalVariable(name: "bytes", arg: 2, scope: !1160, file: !4, line: 64, type: !254)
!1165 = !DILocation(line: 64, column: 46, scope: !1160)
!1166 = !DILocation(line: 62, column: 11, scope: !1167)
!1167 = distinct !DILexicalBlock(scope: !1160, file: !4, line: 64, column: 65)
!1168 = !DILocalVariable(name: "len", scope: !1169, file: !4, line: 146, type: !259, align: 8)
!1169 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1170 = !DILocation(line: 146, column: 6, scope: !1169, inlinedAt: !1161)
!1171 = !DILocation(line: 146, column: 12, scope: !1169, inlinedAt: !1161)
!1172 = !DILocation(line: 148, column: 2, scope: !1169, inlinedAt: !1161)
!1173 = !DILocation(line: 148, column: 9, scope: !1174, inlinedAt: !1161)
!1174 = distinct !DILexicalBlock(scope: !1169, file: !2, line: 148, column: 2)
!1175 = !DILocalVariable(name: "value", scope: !1176, file: !4, line: 150, type: !6, align: 8)
!1176 = distinct !DILexicalBlock(scope: !1174, file: !2, line: 149, column: 2)
!1177 = !DILocation(line: 150, column: 7, scope: !1176, inlinedAt: !1161)
!1178 = !DILocation(line: 64, column: 88, scope: !1176, inlinedAt: !1161)
!1179 = !DILocation(line: 150, column: 15, scope: !1176, inlinedAt: !1161)
!1180 = !DILocation(line: 151, column: 7, scope: !1176, inlinedAt: !1161)
!1181 = !DILocation(line: 153, column: 33, scope: !1182, inlinedAt: !1161)
!1182 = distinct !DILexicalBlock(scope: !1176, file: !2, line: 152, column: 3)
!1183 = !DILocation(line: 153, column: 4, scope: !1182, inlinedAt: !1161)
!1184 = !DILocation(line: 153, column: 10, scope: !1182, inlinedAt: !1161)
!1185 = !DILocation(line: 154, column: 10, scope: !1182, inlinedAt: !1161)
!1186 = !DILocation(line: 156, column: 3, scope: !1176, inlinedAt: !1161)
!1187 = !DILocation(line: 157, column: 3, scope: !1176, inlinedAt: !1161)
!1188 = !DILocation(line: 158, column: 11, scope: !1176, inlinedAt: !1161)
!1189 = !DILocation(line: 158, column: 17, scope: !1176, inlinedAt: !1161)
!1190 = !DILocation(line: 165, column: 33, scope: !1191, inlinedAt: !1192)
!1191 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1192 = !DILocation(line: 160, column: 2, scope: !1169, inlinedAt: !1161)
!1193 = !DILocation(line: 165, column: 2, scope: !1191, inlinedAt: !1192)
!1194 = !DILocation(line: 167, column: 2, scope: !1191, inlinedAt: !1192)
!1195 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc64Random.next_int128", scope: !4, file: !4, line: 65, type: !1196, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1196 = !DISubroutineType(types: !1197)
!1197 = !{!25, !1107}
!1198 = !DILocation(line: 65, column: 55, scope: !1195)
!1199 = !DILocalVariable(name: "self", arg: 1, scope: !1195, file: !4, line: 65, type: !1107)
!1200 = !DILocation(line: 65, column: 36, scope: !1195)
!1201 = !DILocation(line: 65, column: 71, scope: !1202, inlinedAt: !1198)
!1202 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1203 = !DILocation(line: 138, column: 46, scope: !1202, inlinedAt: !1198)
!1204 = !DILocation(line: 138, column: 72, scope: !1202, inlinedAt: !1198)
!1205 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc64Random.next_int", scope: !4, file: !4, line: 66, type: !1206, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1206 = !DISubroutineType(types: !1207)
!1207 = !{!21, !1107}
!1208 = !DILocation(line: 66, column: 49, scope: !1205)
!1209 = !DILocalVariable(name: "self", arg: 1, scope: !1205, file: !4, line: 66, type: !1107)
!1210 = !DILocation(line: 66, column: 30, scope: !1205)
!1211 = !DILocation(line: 66, column: 55, scope: !1205)
!1212 = !DILocation(line: 66, column: 50, scope: !1205)
!1213 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc64Random.next_short", scope: !4, file: !4, line: 67, type: !1214, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{!32, !1107}
!1216 = !DILocation(line: 67, column: 53, scope: !1213)
!1217 = !DILocalVariable(name: "self", arg: 1, scope: !1213, file: !4, line: 67, type: !1107)
!1218 = !DILocation(line: 67, column: 34, scope: !1213)
!1219 = !DILocation(line: 67, column: 61, scope: !1213)
!1220 = !DILocation(line: 67, column: 54, scope: !1213)
!1221 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc64Random.next_byte", scope: !4, file: !4, line: 68, type: !1222, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1222 = !DISubroutineType(types: !1223)
!1223 = !{!60, !1107}
!1224 = !DILocation(line: 68, column: 50, scope: !1221)
!1225 = !DILocalVariable(name: "self", arg: 1, scope: !1221, file: !4, line: 68, type: !1107)
!1226 = !DILocation(line: 68, column: 31, scope: !1221)
!1227 = !DILocation(line: 68, column: 56, scope: !1221)
!1228 = !DILocation(line: 68, column: 51, scope: !1221)
!1229 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc32Random.set_seed", scope: !4, file: !4, line: 74, type: !1230, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{null, !1232, !254}
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc32Random*", baseType: !1233, size: 64, align: 64, dwarfAddressSpace: 0)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc32Random", scope: !4, file: !4, line: 72, baseType: !1234, align: 4)
!1234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !21, size: 128, align: 32, elements: !7)
!1235 = !DILocation(line: 75, column: 1, scope: !1229)
!1236 = !DILocalVariable(name: "self", arg: 1, scope: !1229, file: !4, line: 74, type: !1232)
!1237 = !DILocation(line: 74, column: 31, scope: !1229)
!1238 = !DILocalVariable(name: "input", arg: 2, scope: !1229, file: !4, line: 74, type: !254)
!1239 = !DILocation(line: 74, column: 45, scope: !1229)
!1240 = !DILocation(line: 76, column: 3, scope: !1229)
!1241 = !DILocalVariable(name: "return_value", scope: !1242, file: !4, line: 10, type: !1234, align: 4)
!1242 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1243 = !DILocation(line: 10, column: 8, scope: !1242, inlinedAt: !1244)
!1244 = !DILocation(line: 76, column: 11, scope: !1229)
!1245 = !DILocation(line: 11, column: 2, scope: !1242, inlinedAt: !1244)
!1246 = !DILocation(line: 12, column: 9, scope: !1242, inlinedAt: !1244)
!1247 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc32Random.next_int", scope: !4, file: !4, line: 79, type: !1248, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1248 = !DISubroutineType(types: !1249)
!1249 = !{!21, !1232}
!1250 = !DILocation(line: 80, column: 1, scope: !1247)
!1251 = !DILocalVariable(name: "sfc", arg: 1, scope: !1247, file: !4, line: 79, type: !1232)
!1252 = !DILocation(line: 79, column: 30, scope: !1247)
!1253 = !DILocalVariable(name: "s", scope: !1247, file: !4, line: 81, type: !764, align: 8)
!1254 = !DILocation(line: 81, column: 8, scope: !1247)
!1255 = !DILocation(line: 81, column: 22, scope: !1247)
!1256 = !DILocalVariable(name: "result", scope: !1247, file: !4, line: 82, type: !21, align: 4)
!1257 = !DILocation(line: 82, column: 7, scope: !1247)
!1258 = !DILocation(line: 82, column: 16, scope: !1247)
!1259 = !DILocation(line: 82, column: 18, scope: !1247)
!1260 = !DILocation(line: 82, column: 23, scope: !1247)
!1261 = !DILocation(line: 82, column: 25, scope: !1247)
!1262 = !DILocation(line: 82, column: 30, scope: !1247)
!1263 = !DILocation(line: 82, column: 32, scope: !1247)
!1264 = !DILocation(line: 83, column: 2, scope: !1247)
!1265 = !DILocation(line: 83, column: 9, scope: !1247)
!1266 = !DILocation(line: 83, column: 11, scope: !1247)
!1267 = !DILocation(line: 83, column: 16, scope: !1247)
!1268 = !DILocation(line: 83, column: 18, scope: !1247)
!1269 = !DILocation(line: 84, column: 2, scope: !1247)
!1270 = !DILocation(line: 84, column: 4, scope: !1247)
!1271 = !DILocation(line: 84, column: 9, scope: !1247)
!1272 = !DILocation(line: 84, column: 11, scope: !1247)
!1273 = !DILocation(line: 84, column: 16, scope: !1247)
!1274 = !DILocation(line: 84, column: 18, scope: !1247)
!1275 = !DILocation(line: 85, column: 2, scope: !1247)
!1276 = !DILocation(line: 85, column: 4, scope: !1247)
!1277 = !DILocation(line: 85, column: 9, scope: !1247)
!1278 = !DILocation(line: 85, column: 11, scope: !1247)
!1279 = !DILocation(line: 99, column: 50, scope: !1280, inlinedAt: !1277)
!1280 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1281 = !DILocation(line: 99, column: 56, scope: !1280, inlinedAt: !1277)
!1282 = !DILocation(line: 99, column: 62, scope: !1280, inlinedAt: !1277)
!1283 = !DILocation(line: 85, column: 25, scope: !1247)
!1284 = !DILocation(line: 86, column: 2, scope: !1247)
!1285 = !DILocation(line: 86, column: 4, scope: !1247)
!1286 = !DILocation(line: 87, column: 9, scope: !1247)
!1287 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc32Random.next_bytes", scope: !4, file: !4, line: 93, type: !1230, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1288 = !DILocation(line: 93, column: 65, scope: !1287)
!1289 = !DILocalVariable(name: "self", arg: 1, scope: !1287, file: !4, line: 93, type: !1232)
!1290 = !DILocation(line: 93, column: 32, scope: !1287)
!1291 = !DILocalVariable(name: "bytes", arg: 2, scope: !1287, file: !4, line: 93, type: !254)
!1292 = !DILocation(line: 93, column: 46, scope: !1287)
!1293 = !DILocation(line: 91, column: 11, scope: !1294)
!1294 = distinct !DILexicalBlock(scope: !1287, file: !4, line: 93, column: 65)
!1295 = !DILocalVariable(name: "len", scope: !1296, file: !4, line: 146, type: !259, align: 8)
!1296 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1297 = !DILocation(line: 146, column: 6, scope: !1296, inlinedAt: !1288)
!1298 = !DILocation(line: 146, column: 12, scope: !1296, inlinedAt: !1288)
!1299 = !DILocation(line: 148, column: 2, scope: !1296, inlinedAt: !1288)
!1300 = !DILocation(line: 148, column: 9, scope: !1301, inlinedAt: !1288)
!1301 = distinct !DILexicalBlock(scope: !1296, file: !2, line: 148, column: 2)
!1302 = !DILocalVariable(name: "value", scope: !1303, file: !4, line: 150, type: !21, align: 4)
!1303 = distinct !DILexicalBlock(scope: !1301, file: !2, line: 149, column: 2)
!1304 = !DILocation(line: 150, column: 7, scope: !1303, inlinedAt: !1288)
!1305 = !DILocation(line: 93, column: 88, scope: !1303, inlinedAt: !1288)
!1306 = !DILocation(line: 150, column: 15, scope: !1303, inlinedAt: !1288)
!1307 = !DILocation(line: 151, column: 7, scope: !1303, inlinedAt: !1288)
!1308 = !DILocation(line: 153, column: 33, scope: !1309, inlinedAt: !1288)
!1309 = distinct !DILexicalBlock(scope: !1303, file: !2, line: 152, column: 3)
!1310 = !DILocation(line: 153, column: 4, scope: !1309, inlinedAt: !1288)
!1311 = !DILocation(line: 153, column: 10, scope: !1309, inlinedAt: !1288)
!1312 = !DILocation(line: 154, column: 10, scope: !1309, inlinedAt: !1288)
!1313 = !DILocation(line: 156, column: 3, scope: !1303, inlinedAt: !1288)
!1314 = !DILocation(line: 157, column: 3, scope: !1303, inlinedAt: !1288)
!1315 = !DILocation(line: 158, column: 11, scope: !1303, inlinedAt: !1288)
!1316 = !DILocation(line: 158, column: 17, scope: !1303, inlinedAt: !1288)
!1317 = !DILocation(line: 165, column: 33, scope: !1318, inlinedAt: !1319)
!1318 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1319 = !DILocation(line: 160, column: 2, scope: !1296, inlinedAt: !1288)
!1320 = !DILocation(line: 165, column: 2, scope: !1318, inlinedAt: !1319)
!1321 = !DILocation(line: 167, column: 2, scope: !1318, inlinedAt: !1319)
!1322 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc32Random.next_int128", scope: !4, file: !4, line: 94, type: !1323, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1323 = !DISubroutineType(types: !1324)
!1324 = !{!25, !1232}
!1325 = !DILocation(line: 94, column: 55, scope: !1322)
!1326 = !DILocalVariable(name: "self", arg: 1, scope: !1322, file: !4, line: 94, type: !1232)
!1327 = !DILocation(line: 94, column: 36, scope: !1322)
!1328 = !DILocation(line: 94, column: 71, scope: !1329, inlinedAt: !1325)
!1329 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1330 = !DILocation(line: 138, column: 46, scope: !1329, inlinedAt: !1325)
!1331 = !DILocation(line: 138, column: 72, scope: !1329, inlinedAt: !1325)
!1332 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc32Random.next_long", scope: !4, file: !4, line: 95, type: !1333, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1333 = !DISubroutineType(types: !1334)
!1334 = !{!6, !1232}
!1335 = !DILocation(line: 95, column: 51, scope: !1332)
!1336 = !DILocalVariable(name: "self", arg: 1, scope: !1332, file: !4, line: 95, type: !1232)
!1337 = !DILocation(line: 95, column: 32, scope: !1332)
!1338 = !DILocation(line: 95, column: 64, scope: !1339, inlinedAt: !1335)
!1339 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1340 = !DILocation(line: 139, column: 41, scope: !1339, inlinedAt: !1335)
!1341 = !DILocation(line: 139, column: 65, scope: !1339, inlinedAt: !1335)
!1342 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc32Random.next_short", scope: !4, file: !4, line: 96, type: !1343, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1343 = !DISubroutineType(types: !1344)
!1344 = !{!32, !1232}
!1345 = !DILocation(line: 96, column: 53, scope: !1342)
!1346 = !DILocalVariable(name: "self", arg: 1, scope: !1342, file: !4, line: 96, type: !1232)
!1347 = !DILocation(line: 96, column: 34, scope: !1342)
!1348 = !DILocation(line: 96, column: 61, scope: !1342)
!1349 = !DILocation(line: 96, column: 54, scope: !1342)
!1350 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc32Random.next_byte", scope: !4, file: !4, line: 97, type: !1351, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1351 = !DISubroutineType(types: !1352)
!1352 = !{!60, !1232}
!1353 = !DILocation(line: 97, column: 50, scope: !1350)
!1354 = !DILocalVariable(name: "self", arg: 1, scope: !1350, file: !4, line: 97, type: !1232)
!1355 = !DILocation(line: 97, column: 31, scope: !1350)
!1356 = !DILocation(line: 97, column: 56, scope: !1350)
!1357 = !DILocation(line: 97, column: 51, scope: !1350)
!1358 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc16Random.set_seed", scope: !4, file: !4, line: 103, type: !1359, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1359 = !DISubroutineType(types: !1360)
!1360 = !{null, !1361, !254}
!1361 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc16Random*", baseType: !1362, size: 64, align: 64, dwarfAddressSpace: 0)
!1362 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc16Random", scope: !4, file: !4, line: 101, baseType: !1363, align: 2)
!1363 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 64, align: 16, elements: !7)
!1364 = !DILocation(line: 104, column: 1, scope: !1358)
!1365 = !DILocalVariable(name: "self", arg: 1, scope: !1358, file: !4, line: 103, type: !1361)
!1366 = !DILocation(line: 103, column: 31, scope: !1358)
!1367 = !DILocalVariable(name: "input", arg: 2, scope: !1358, file: !4, line: 103, type: !254)
!1368 = !DILocation(line: 103, column: 45, scope: !1358)
!1369 = !DILocation(line: 105, column: 3, scope: !1358)
!1370 = !DILocalVariable(name: "return_value", scope: !1371, file: !4, line: 10, type: !1363, align: 2)
!1371 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1372 = !DILocation(line: 10, column: 8, scope: !1371, inlinedAt: !1373)
!1373 = !DILocation(line: 105, column: 11, scope: !1358)
!1374 = !DILocation(line: 11, column: 2, scope: !1371, inlinedAt: !1373)
!1375 = !DILocation(line: 12, column: 9, scope: !1371, inlinedAt: !1373)
!1376 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc16Random.next_short", scope: !4, file: !4, line: 109, type: !1377, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1377 = !DISubroutineType(types: !1378)
!1378 = !{!32, !1361}
!1379 = !DILocation(line: 110, column: 1, scope: !1376)
!1380 = !DILocalVariable(name: "seed", arg: 1, scope: !1376, file: !4, line: 109, type: !1361)
!1381 = !DILocation(line: 109, column: 34, scope: !1376)
!1382 = !DILocalVariable(name: "s", scope: !1376, file: !4, line: 111, type: !884, align: 8)
!1383 = !DILocation(line: 111, column: 10, scope: !1376)
!1384 = !DILocation(line: 111, column: 26, scope: !1376)
!1385 = !DILocalVariable(name: "result", scope: !1376, file: !4, line: 112, type: !32, align: 2)
!1386 = !DILocation(line: 112, column: 9, scope: !1376)
!1387 = !DILocation(line: 112, column: 18, scope: !1376)
!1388 = !DILocation(line: 112, column: 20, scope: !1376)
!1389 = !DILocation(line: 112, column: 25, scope: !1376)
!1390 = !DILocation(line: 112, column: 27, scope: !1376)
!1391 = !DILocation(line: 112, column: 32, scope: !1376)
!1392 = !DILocation(line: 112, column: 34, scope: !1376)
!1393 = !DILocation(line: 113, column: 2, scope: !1376)
!1394 = !DILocation(line: 113, column: 9, scope: !1376)
!1395 = !DILocation(line: 113, column: 11, scope: !1376)
!1396 = !DILocation(line: 113, column: 16, scope: !1376)
!1397 = !DILocation(line: 113, column: 18, scope: !1376)
!1398 = !DILocation(line: 114, column: 2, scope: !1376)
!1399 = !DILocation(line: 114, column: 4, scope: !1376)
!1400 = !DILocation(line: 114, column: 9, scope: !1376)
!1401 = !DILocation(line: 114, column: 11, scope: !1376)
!1402 = !DILocation(line: 114, column: 16, scope: !1376)
!1403 = !DILocation(line: 114, column: 18, scope: !1376)
!1404 = !DILocation(line: 115, column: 2, scope: !1376)
!1405 = !DILocation(line: 115, column: 4, scope: !1376)
!1406 = !DILocation(line: 115, column: 9, scope: !1376)
!1407 = !DILocation(line: 115, column: 11, scope: !1376)
!1408 = !DILocation(line: 115, column: 56, scope: !1409, inlinedAt: !1406)
!1409 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1410 = !DILocation(line: 115, column: 62, scope: !1409, inlinedAt: !1406)
!1411 = !DILocation(line: 115, column: 68, scope: !1409, inlinedAt: !1406)
!1412 = !DILocation(line: 115, column: 25, scope: !1376)
!1413 = !DILocation(line: 116, column: 2, scope: !1376)
!1414 = !DILocation(line: 116, column: 4, scope: !1376)
!1415 = !DILocation(line: 117, column: 9, scope: !1376)
!1416 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc16Random.next_bytes", scope: !4, file: !4, line: 123, type: !1359, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1417 = !DILocation(line: 123, column: 65, scope: !1416)
!1418 = !DILocalVariable(name: "self", arg: 1, scope: !1416, file: !4, line: 123, type: !1361)
!1419 = !DILocation(line: 123, column: 32, scope: !1416)
!1420 = !DILocalVariable(name: "bytes", arg: 2, scope: !1416, file: !4, line: 123, type: !254)
!1421 = !DILocation(line: 123, column: 46, scope: !1416)
!1422 = !DILocation(line: 121, column: 11, scope: !1423)
!1423 = distinct !DILexicalBlock(scope: !1416, file: !4, line: 123, column: 65)
!1424 = !DILocalVariable(name: "len", scope: !1425, file: !4, line: 146, type: !259, align: 8)
!1425 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1426 = !DILocation(line: 146, column: 6, scope: !1425, inlinedAt: !1417)
!1427 = !DILocation(line: 146, column: 12, scope: !1425, inlinedAt: !1417)
!1428 = !DILocation(line: 148, column: 2, scope: !1425, inlinedAt: !1417)
!1429 = !DILocation(line: 148, column: 9, scope: !1430, inlinedAt: !1417)
!1430 = distinct !DILexicalBlock(scope: !1425, file: !2, line: 148, column: 2)
!1431 = !DILocalVariable(name: "value", scope: !1432, file: !4, line: 150, type: !32, align: 2)
!1432 = distinct !DILexicalBlock(scope: !1430, file: !2, line: 149, column: 2)
!1433 = !DILocation(line: 150, column: 7, scope: !1432, inlinedAt: !1417)
!1434 = !DILocation(line: 123, column: 88, scope: !1432, inlinedAt: !1417)
!1435 = !DILocation(line: 150, column: 15, scope: !1432, inlinedAt: !1417)
!1436 = !DILocation(line: 151, column: 7, scope: !1432, inlinedAt: !1417)
!1437 = !DILocation(line: 153, column: 33, scope: !1438, inlinedAt: !1417)
!1438 = distinct !DILexicalBlock(scope: !1432, file: !2, line: 152, column: 3)
!1439 = !DILocation(line: 153, column: 4, scope: !1438, inlinedAt: !1417)
!1440 = !DILocation(line: 153, column: 10, scope: !1438, inlinedAt: !1417)
!1441 = !DILocation(line: 154, column: 10, scope: !1438, inlinedAt: !1417)
!1442 = !DILocation(line: 156, column: 3, scope: !1432, inlinedAt: !1417)
!1443 = !DILocation(line: 157, column: 3, scope: !1432, inlinedAt: !1417)
!1444 = !DILocation(line: 158, column: 11, scope: !1432, inlinedAt: !1417)
!1445 = !DILocation(line: 158, column: 17, scope: !1432, inlinedAt: !1417)
!1446 = !DILocation(line: 165, column: 33, scope: !1447, inlinedAt: !1448)
!1447 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1448 = !DILocation(line: 160, column: 2, scope: !1425, inlinedAt: !1417)
!1449 = !DILocation(line: 165, column: 2, scope: !1447, inlinedAt: !1448)
!1450 = !DILocation(line: 167, column: 2, scope: !1447, inlinedAt: !1448)
!1451 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc16Random.next_int128", scope: !4, file: !4, line: 124, type: !1452, scopeLine: 124, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1452 = !DISubroutineType(types: !1453)
!1453 = !{!25, !1361}
!1454 = !DILocation(line: 124, column: 55, scope: !1451)
!1455 = !DILocalVariable(name: "self", arg: 1, scope: !1451, file: !4, line: 124, type: !1361)
!1456 = !DILocation(line: 124, column: 36, scope: !1451)
!1457 = !DILocation(line: 124, column: 71, scope: !1458, inlinedAt: !1454)
!1458 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1459 = !DILocation(line: 138, column: 46, scope: !1458, inlinedAt: !1454)
!1460 = !DILocation(line: 138, column: 72, scope: !1458, inlinedAt: !1454)
!1461 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc16Random.next_long", scope: !4, file: !4, line: 125, type: !1462, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1462 = !DISubroutineType(types: !1463)
!1463 = !{!6, !1361}
!1464 = !DILocation(line: 125, column: 51, scope: !1461)
!1465 = !DILocalVariable(name: "self", arg: 1, scope: !1461, file: !4, line: 125, type: !1361)
!1466 = !DILocation(line: 125, column: 32, scope: !1461)
!1467 = !DILocation(line: 125, column: 64, scope: !1468, inlinedAt: !1464)
!1468 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1469 = !DILocation(line: 139, column: 41, scope: !1468, inlinedAt: !1464)
!1470 = !DILocation(line: 139, column: 65, scope: !1468, inlinedAt: !1464)
!1471 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc16Random.next_int", scope: !4, file: !4, line: 126, type: !1472, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1472 = !DISubroutineType(types: !1473)
!1473 = !{!21, !1361}
!1474 = !DILocation(line: 126, column: 49, scope: !1471)
!1475 = !DILocalVariable(name: "self", arg: 1, scope: !1471, file: !4, line: 126, type: !1361)
!1476 = !DILocation(line: 126, column: 30, scope: !1471)
!1477 = !DILocation(line: 126, column: 63, scope: !1478, inlinedAt: !1474)
!1478 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1479 = !DILocation(line: 140, column: 41, scope: !1478, inlinedAt: !1474)
!1480 = !DILocation(line: 140, column: 64, scope: !1478, inlinedAt: !1474)
!1481 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc16Random.next_byte", scope: !4, file: !4, line: 127, type: !1482, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1482 = !DISubroutineType(types: !1483)
!1483 = !{!60, !1361}
!1484 = !DILocation(line: 127, column: 50, scope: !1481)
!1485 = !DILocalVariable(name: "self", arg: 1, scope: !1481, file: !4, line: 127, type: !1361)
!1486 = !DILocation(line: 127, column: 31, scope: !1481)
!1487 = !DILocation(line: 127, column: 56, scope: !1481)
!1488 = !DILocation(line: 127, column: 51, scope: !1481)
!1489 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Sfc8Random.set_seed", scope: !4, file: !4, line: 134, type: !1490, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1490 = !DISubroutineType(types: !1491)
!1491 = !{null, !1492, !254}
!1492 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Sfc8Random*", baseType: !1493, size: 64, align: 64, dwarfAddressSpace: 0)
!1493 = !DIDerivedType(tag: DW_TAG_typedef, name: "Sfc8Random", scope: !4, file: !4, line: 132, baseType: !1494, align: 1)
!1494 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 32, align: 8, elements: !7)
!1495 = !DILocation(line: 135, column: 1, scope: !1489)
!1496 = !DILocalVariable(name: "self", arg: 1, scope: !1489, file: !4, line: 134, type: !1492)
!1497 = !DILocation(line: 134, column: 30, scope: !1489)
!1498 = !DILocalVariable(name: "input", arg: 2, scope: !1489, file: !4, line: 134, type: !254)
!1499 = !DILocation(line: 134, column: 44, scope: !1489)
!1500 = !DILocation(line: 136, column: 3, scope: !1489)
!1501 = !DILocalVariable(name: "return_value", scope: !1502, file: !4, line: 10, type: !1494, align: 1)
!1502 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1503 = !DILocation(line: 10, column: 8, scope: !1502, inlinedAt: !1504)
!1504 = !DILocation(line: 136, column: 11, scope: !1489)
!1505 = !DILocation(line: 11, column: 2, scope: !1502, inlinedAt: !1504)
!1506 = !DILocation(line: 12, column: 9, scope: !1502, inlinedAt: !1504)
!1507 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Sfc8Random.next_byte", scope: !4, file: !4, line: 139, type: !1508, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1508 = !DISubroutineType(types: !1509)
!1509 = !{!60, !1492}
!1510 = !DILocation(line: 140, column: 1, scope: !1507)
!1511 = !DILocalVariable(name: "self", arg: 1, scope: !1507, file: !4, line: 139, type: !1492)
!1512 = !DILocation(line: 139, column: 30, scope: !1507)
!1513 = !DILocalVariable(name: "s", scope: !1507, file: !4, line: 141, type: !257, align: 8)
!1514 = !DILocation(line: 141, column: 8, scope: !1507)
!1515 = !DILocation(line: 141, column: 22, scope: !1507)
!1516 = !DILocalVariable(name: "result", scope: !1507, file: !4, line: 142, type: !60, align: 1)
!1517 = !DILocation(line: 142, column: 7, scope: !1507)
!1518 = !DILocation(line: 142, column: 16, scope: !1507)
!1519 = !DILocation(line: 142, column: 18, scope: !1507)
!1520 = !DILocation(line: 142, column: 23, scope: !1507)
!1521 = !DILocation(line: 142, column: 25, scope: !1507)
!1522 = !DILocation(line: 142, column: 30, scope: !1507)
!1523 = !DILocation(line: 142, column: 32, scope: !1507)
!1524 = !DILocation(line: 143, column: 2, scope: !1507)
!1525 = !DILocation(line: 143, column: 9, scope: !1507)
!1526 = !DILocation(line: 143, column: 11, scope: !1507)
!1527 = !DILocation(line: 143, column: 16, scope: !1507)
!1528 = !DILocation(line: 143, column: 18, scope: !1507)
!1529 = !DILocation(line: 144, column: 2, scope: !1507)
!1530 = !DILocation(line: 144, column: 4, scope: !1507)
!1531 = !DILocation(line: 144, column: 9, scope: !1507)
!1532 = !DILocation(line: 144, column: 11, scope: !1507)
!1533 = !DILocation(line: 144, column: 16, scope: !1507)
!1534 = !DILocation(line: 144, column: 18, scope: !1507)
!1535 = !DILocation(line: 145, column: 2, scope: !1507)
!1536 = !DILocation(line: 145, column: 4, scope: !1507)
!1537 = !DILocation(line: 145, column: 9, scope: !1507)
!1538 = !DILocation(line: 145, column: 11, scope: !1507)
!1539 = !DILocation(line: 131, column: 50, scope: !1540, inlinedAt: !1537)
!1540 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1541 = !DILocation(line: 131, column: 56, scope: !1540, inlinedAt: !1537)
!1542 = !DILocation(line: 131, column: 62, scope: !1540, inlinedAt: !1537)
!1543 = !DILocation(line: 145, column: 24, scope: !1507)
!1544 = !DILocation(line: 146, column: 2, scope: !1507)
!1545 = !DILocation(line: 146, column: 4, scope: !1507)
!1546 = !DILocation(line: 147, column: 9, scope: !1507)
!1547 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Sfc8Random.next_bytes", scope: !4, file: !4, line: 150, type: !1490, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1548 = !DILocation(line: 150, column: 64, scope: !1547)
!1549 = !DILocalVariable(name: "self", arg: 1, scope: !1547, file: !4, line: 150, type: !1492)
!1550 = !DILocation(line: 150, column: 31, scope: !1547)
!1551 = !DILocalVariable(name: "bytes", arg: 2, scope: !1547, file: !4, line: 150, type: !254)
!1552 = !DILocation(line: 150, column: 45, scope: !1547)
!1553 = !DILocalVariable(name: "len", scope: !1554, file: !4, line: 146, type: !259, align: 8)
!1554 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1555 = !DILocation(line: 146, column: 6, scope: !1554, inlinedAt: !1548)
!1556 = !DILocation(line: 146, column: 12, scope: !1554, inlinedAt: !1548)
!1557 = !DILocation(line: 148, column: 2, scope: !1554, inlinedAt: !1548)
!1558 = !DILocation(line: 148, column: 9, scope: !1559, inlinedAt: !1548)
!1559 = distinct !DILexicalBlock(scope: !1554, file: !2, line: 148, column: 2)
!1560 = !DILocalVariable(name: "value", scope: !1561, file: !4, line: 150, type: !60, align: 1)
!1561 = distinct !DILexicalBlock(scope: !1559, file: !2, line: 149, column: 2)
!1562 = !DILocation(line: 150, column: 7, scope: !1561, inlinedAt: !1548)
!1563 = !DILocation(line: 150, column: 87, scope: !1561, inlinedAt: !1548)
!1564 = !DILocation(line: 150, column: 15, scope: !1561, inlinedAt: !1548)
!1565 = !DILocation(line: 151, column: 7, scope: !1561, inlinedAt: !1548)
!1566 = !DILocation(line: 153, column: 33, scope: !1567, inlinedAt: !1548)
!1567 = distinct !DILexicalBlock(scope: !1561, file: !2, line: 152, column: 3)
!1568 = !DILocation(line: 153, column: 4, scope: !1567, inlinedAt: !1548)
!1569 = !DILocation(line: 153, column: 10, scope: !1567, inlinedAt: !1548)
!1570 = !DILocation(line: 154, column: 10, scope: !1567, inlinedAt: !1548)
!1571 = !DILocation(line: 156, column: 3, scope: !1561, inlinedAt: !1548)
!1572 = !DILocation(line: 157, column: 3, scope: !1561, inlinedAt: !1548)
!1573 = !DILocation(line: 158, column: 11, scope: !1561, inlinedAt: !1548)
!1574 = !DILocation(line: 158, column: 17, scope: !1561, inlinedAt: !1548)
!1575 = !DILocation(line: 165, column: 33, scope: !1576, inlinedAt: !1577)
!1576 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1577 = !DILocation(line: 160, column: 2, scope: !1554, inlinedAt: !1548)
!1578 = !DILocation(line: 165, column: 2, scope: !1576, inlinedAt: !1577)
!1579 = !DILocation(line: 167, column: 2, scope: !1576, inlinedAt: !1577)
!1580 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Sfc8Random.next_int128", scope: !4, file: !4, line: 151, type: !1581, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1581 = !DISubroutineType(types: !1582)
!1582 = !{!25, !1492}
!1583 = !DILocation(line: 151, column: 54, scope: !1580)
!1584 = !DILocalVariable(name: "self", arg: 1, scope: !1580, file: !4, line: 151, type: !1492)
!1585 = !DILocation(line: 151, column: 35, scope: !1580)
!1586 = !DILocation(line: 151, column: 70, scope: !1587, inlinedAt: !1583)
!1587 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1588 = !DILocation(line: 138, column: 46, scope: !1587, inlinedAt: !1583)
!1589 = !DILocation(line: 138, column: 72, scope: !1587, inlinedAt: !1583)
!1590 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Sfc8Random.next_long", scope: !4, file: !4, line: 152, type: !1591, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1591 = !DISubroutineType(types: !1592)
!1592 = !{!6, !1492}
!1593 = !DILocation(line: 152, column: 50, scope: !1590)
!1594 = !DILocalVariable(name: "self", arg: 1, scope: !1590, file: !4, line: 152, type: !1492)
!1595 = !DILocation(line: 152, column: 31, scope: !1590)
!1596 = !DILocation(line: 152, column: 63, scope: !1597, inlinedAt: !1593)
!1597 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1598 = !DILocation(line: 139, column: 41, scope: !1597, inlinedAt: !1593)
!1599 = !DILocation(line: 139, column: 65, scope: !1597, inlinedAt: !1593)
!1600 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Sfc8Random.next_int", scope: !4, file: !4, line: 153, type: !1601, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1601 = !DISubroutineType(types: !1602)
!1602 = !{!21, !1492}
!1603 = !DILocation(line: 153, column: 48, scope: !1600)
!1604 = !DILocalVariable(name: "self", arg: 1, scope: !1600, file: !4, line: 153, type: !1492)
!1605 = !DILocation(line: 153, column: 29, scope: !1600)
!1606 = !DILocation(line: 153, column: 62, scope: !1607, inlinedAt: !1603)
!1607 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1608 = !DILocation(line: 140, column: 41, scope: !1607, inlinedAt: !1603)
!1609 = !DILocation(line: 140, column: 64, scope: !1607, inlinedAt: !1603)
!1610 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Sfc8Random.next_short", scope: !4, file: !4, line: 154, type: !1611, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1611 = !DISubroutineType(types: !1612)
!1612 = !{!32, !1492}
!1613 = !DILocation(line: 154, column: 52, scope: !1610)
!1614 = !DILocalVariable(name: "self", arg: 1, scope: !1610, file: !4, line: 154, type: !1492)
!1615 = !DILocation(line: 154, column: 33, scope: !1610)
!1616 = !DILocation(line: 154, column: 67, scope: !1617, inlinedAt: !1613)
!1617 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1618 = !DILocation(line: 141, column: 44, scope: !1617, inlinedAt: !1613)
!1619 = !DILocation(line: 141, column: 68, scope: !1617, inlinedAt: !1613)
!1620 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.SimpleRandom.set_seed", scope: !63, file: !63, line: 6, type: !1621, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1621 = !DISubroutineType(types: !1622)
!1622 = !{null, !1623, !254}
!1623 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "SimpleRandom*", baseType: !1624, size: 64, align: 64, dwarfAddressSpace: 0)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "SimpleRandom", scope: !63, file: !63, line: 3, baseType: !6, align: 8)
!1625 = !DILocation(line: 7, column: 1, scope: !1620)
!1626 = !DILocalVariable(name: "self", arg: 1, scope: !1620, file: !63, line: 6, type: !1623)
!1627 = !DILocation(line: 6, column: 31, scope: !1620)
!1628 = !DILocalVariable(name: "seed", arg: 2, scope: !1620, file: !63, line: 6, type: !254)
!1629 = !DILocation(line: 6, column: 45, scope: !1620)
!1630 = !DILocalVariable(name: "full", scope: !1620, file: !63, line: 8, type: !1631, align: 1)
!1631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !60, size: 64, align: 8, elements: !449)
!1632 = !DILocation(line: 8, column: 10, scope: !1620)
!1633 = !DILocation(line: 9, column: 18, scope: !1634)
!1634 = distinct !DILexicalBlock(scope: !1620, file: !63, line: 9, column: 2)
!1635 = !DILocalVariable(name: ".temp", scope: !1634, file: !63, line: 9, type: !259, align: 8)
!1636 = !DILocation(line: 9, column: 11, scope: !1634)
!1637 = !DILocalVariable(name: "i", scope: !1638, file: !63, line: 9, type: !259, align: 8)
!1638 = distinct !DILexicalBlock(scope: !1634, file: !63, line: 10, column: 2)
!1639 = !DILocation(line: 9, column: 11, scope: !1638)
!1640 = !DILocalVariable(name: "c", scope: !1638, file: !63, line: 9, type: !60, align: 1)
!1641 = !DILocation(line: 9, column: 14, scope: !1638)
!1642 = !DILocation(line: 9, column: 18, scope: !1638)
!1643 = !DILocation(line: 11, column: 8, scope: !1644)
!1644 = distinct !DILexicalBlock(scope: !1638, file: !63, line: 10, column: 2)
!1645 = !DILocation(line: 11, column: 18, scope: !1644)
!1646 = !DILocation(line: 11, column: 3, scope: !1644)
!1647 = !DILocation(line: 13, column: 3, scope: !1620)
!1648 = !DILocalVariable(name: "x", scope: !1649, file: !63, line: 215, type: !6, align: 8)
!1649 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1650 = !DILocation(line: 215, column: 9, scope: !1649, inlinedAt: !1651)
!1651 = !DILocation(line: 13, column: 25, scope: !1620)
!1652 = !DILocation(line: 216, column: 38, scope: !1649, inlinedAt: !1651)
!1653 = !DILocation(line: 217, column: 10, scope: !1649, inlinedAt: !1651)
!1654 = !DILocation(line: 13, column: 11, scope: !1620)
!1655 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.SimpleRandom.next_int", scope: !63, file: !63, line: 16, type: !1656, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1656 = !DISubroutineType(types: !1657)
!1657 = !{!21, !1623}
!1658 = !DILocation(line: 17, column: 1, scope: !1655)
!1659 = !DILocalVariable(name: "self", arg: 1, scope: !1655, file: !63, line: 16, type: !1623)
!1660 = !DILocation(line: 16, column: 31, scope: !1655)
!1661 = !DILocalVariable(name: "nextseed", scope: !1655, file: !63, line: 18, type: !6, align: 8)
!1662 = !DILocation(line: 18, column: 8, scope: !1655)
!1663 = !DILocation(line: 18, column: 28, scope: !1655)
!1664 = !DILocation(line: 18, column: 21, scope: !1655)
!1665 = !DILocation(line: 19, column: 3, scope: !1655)
!1666 = !DILocation(line: 19, column: 11, scope: !1655)
!1667 = !DILocation(line: 20, column: 16, scope: !1655)
!1668 = !DILocation(line: 20, column: 10, scope: !1655)
!1669 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.SimpleRandom.next_bytes", scope: !63, file: !63, line: 26, type: !1621, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1670 = !DILocation(line: 26, column: 66, scope: !1669)
!1671 = !DILocalVariable(name: "self", arg: 1, scope: !1669, file: !63, line: 26, type: !1623)
!1672 = !DILocation(line: 26, column: 33, scope: !1669)
!1673 = !DILocalVariable(name: "bytes", arg: 2, scope: !1669, file: !63, line: 26, type: !254)
!1674 = !DILocation(line: 26, column: 47, scope: !1669)
!1675 = !DILocation(line: 24, column: 11, scope: !1676)
!1676 = distinct !DILexicalBlock(scope: !1669, file: !63, line: 26, column: 66)
!1677 = !DILocalVariable(name: "len", scope: !1678, file: !63, line: 146, type: !259, align: 8)
!1678 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1679 = !DILocation(line: 146, column: 6, scope: !1678, inlinedAt: !1670)
!1680 = !DILocation(line: 146, column: 12, scope: !1678, inlinedAt: !1670)
!1681 = !DILocation(line: 148, column: 2, scope: !1678, inlinedAt: !1670)
!1682 = !DILocation(line: 148, column: 9, scope: !1683, inlinedAt: !1670)
!1683 = distinct !DILexicalBlock(scope: !1678, file: !2, line: 148, column: 2)
!1684 = !DILocalVariable(name: "value", scope: !1685, file: !63, line: 150, type: !21, align: 4)
!1685 = distinct !DILexicalBlock(scope: !1683, file: !2, line: 149, column: 2)
!1686 = !DILocation(line: 150, column: 7, scope: !1685, inlinedAt: !1670)
!1687 = !DILocation(line: 26, column: 89, scope: !1685, inlinedAt: !1670)
!1688 = !DILocation(line: 150, column: 15, scope: !1685, inlinedAt: !1670)
!1689 = !DILocation(line: 151, column: 7, scope: !1685, inlinedAt: !1670)
!1690 = !DILocation(line: 153, column: 33, scope: !1691, inlinedAt: !1670)
!1691 = distinct !DILexicalBlock(scope: !1685, file: !2, line: 152, column: 3)
!1692 = !DILocation(line: 153, column: 4, scope: !1691, inlinedAt: !1670)
!1693 = !DILocation(line: 153, column: 10, scope: !1691, inlinedAt: !1670)
!1694 = !DILocation(line: 154, column: 10, scope: !1691, inlinedAt: !1670)
!1695 = !DILocation(line: 156, column: 3, scope: !1685, inlinedAt: !1670)
!1696 = !DILocation(line: 157, column: 3, scope: !1685, inlinedAt: !1670)
!1697 = !DILocation(line: 158, column: 11, scope: !1685, inlinedAt: !1670)
!1698 = !DILocation(line: 158, column: 17, scope: !1685, inlinedAt: !1670)
!1699 = !DILocation(line: 165, column: 33, scope: !1700, inlinedAt: !1701)
!1700 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1701 = !DILocation(line: 160, column: 2, scope: !1678, inlinedAt: !1670)
!1702 = !DILocation(line: 165, column: 2, scope: !1700, inlinedAt: !1701)
!1703 = !DILocation(line: 167, column: 2, scope: !1700, inlinedAt: !1701)
!1704 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.SimpleRandom.next_int128", scope: !63, file: !63, line: 27, type: !1705, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1705 = !DISubroutineType(types: !1706)
!1706 = !{!25, !1623}
!1707 = !DILocation(line: 27, column: 56, scope: !1704)
!1708 = !DILocalVariable(name: "self", arg: 1, scope: !1704, file: !63, line: 27, type: !1623)
!1709 = !DILocation(line: 27, column: 37, scope: !1704)
!1710 = !DILocation(line: 27, column: 72, scope: !1711, inlinedAt: !1707)
!1711 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1712 = !DILocation(line: 138, column: 46, scope: !1711, inlinedAt: !1707)
!1713 = !DILocation(line: 138, column: 72, scope: !1711, inlinedAt: !1707)
!1714 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.SimpleRandom.next_long", scope: !63, file: !63, line: 28, type: !1715, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1715 = !DISubroutineType(types: !1716)
!1716 = !{!6, !1623}
!1717 = !DILocation(line: 28, column: 52, scope: !1714)
!1718 = !DILocalVariable(name: "self", arg: 1, scope: !1714, file: !63, line: 28, type: !1623)
!1719 = !DILocation(line: 28, column: 33, scope: !1714)
!1720 = !DILocation(line: 28, column: 65, scope: !1721, inlinedAt: !1717)
!1721 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1722 = !DILocation(line: 139, column: 41, scope: !1721, inlinedAt: !1717)
!1723 = !DILocation(line: 139, column: 65, scope: !1721, inlinedAt: !1717)
!1724 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.SimpleRandom.next_short", scope: !63, file: !63, line: 29, type: !1725, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1725 = !DISubroutineType(types: !1726)
!1726 = !{!32, !1623}
!1727 = !DILocation(line: 29, column: 54, scope: !1724)
!1728 = !DILocalVariable(name: "self", arg: 1, scope: !1724, file: !63, line: 29, type: !1623)
!1729 = !DILocation(line: 29, column: 35, scope: !1724)
!1730 = !DILocation(line: 29, column: 62, scope: !1724)
!1731 = !DILocation(line: 29, column: 55, scope: !1724)
!1732 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.SimpleRandom.next_byte", scope: !63, file: !63, line: 30, type: !1733, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1733 = !DISubroutineType(types: !1734)
!1734 = !{!60, !1623}
!1735 = !DILocation(line: 30, column: 51, scope: !1732)
!1736 = !DILocalVariable(name: "self", arg: 1, scope: !1732, file: !63, line: 30, type: !1623)
!1737 = !DILocation(line: 30, column: 32, scope: !1732)
!1738 = !DILocation(line: 30, column: 57, scope: !1732)
!1739 = !DILocation(line: 30, column: 52, scope: !1732)
!1740 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws128Random.set_seed", scope: !71, file: !71, line: 17, type: !1741, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1741 = !DISubroutineType(types: !1742)
!1742 = !{null, !1743, !254}
!1743 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws128Random*", baseType: !1744, size: 64, align: 64, dwarfAddressSpace: 0)
!1744 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws128Random", scope: !71, file: !71, line: 11, size: 512, align: 128, elements: !1745, identifier: "std.math.random.Msws128Random")
!1745 = !{!1746, !1747, !1748, !1749}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1744, file: !71, line: 13, baseType: !25, size: 128, align: 128)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1744, file: !71, line: 13, baseType: !25, size: 128, align: 128, offset: 128)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1744, file: !71, line: 14, baseType: !25, size: 128, align: 128, offset: 256)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1744, file: !71, line: 14, baseType: !25, size: 128, align: 128, offset: 384)
!1750 = !DILocation(line: 18, column: 1, scope: !1740)
!1751 = !DILocalVariable(name: "self", arg: 1, scope: !1740, file: !71, line: 17, type: !1743)
!1752 = !DILocation(line: 17, column: 32, scope: !1740)
!1753 = !DILocalVariable(name: "input", arg: 2, scope: !1740, file: !71, line: 17, type: !254)
!1754 = !DILocation(line: 17, column: 46, scope: !1740)
!1755 = !DILocation(line: 19, column: 3, scope: !1740)
!1756 = !DILocalVariable(name: "return_value", scope: !1757, file: !71, line: 10, type: !984, align: 16)
!1757 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1758 = !DILocation(line: 10, column: 8, scope: !1757, inlinedAt: !1759)
!1759 = !DILocation(line: 19, column: 18, scope: !1740)
!1760 = !DILocation(line: 11, column: 2, scope: !1757, inlinedAt: !1759)
!1761 = !DILocation(line: 213, column: 20, scope: !1762, inlinedAt: !1763)
!1762 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1763 = !DILocation(line: 19, column: 10, scope: !1740)
!1764 = !DILocation(line: 213, column: 12, scope: !1762, inlinedAt: !1763)
!1765 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws128Random.next_int128", scope: !71, file: !71, line: 23, type: !1766, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1766 = !DISubroutineType(types: !1767)
!1767 = !{!25, !1743}
!1768 = !DILocation(line: 24, column: 1, scope: !1765)
!1769 = !DILocalVariable(name: "self", arg: 1, scope: !1765, file: !71, line: 23, type: !1743)
!1770 = !DILocation(line: 23, column: 38, scope: !1765)
!1771 = !DILocalVariable(name: "s0", scope: !1765, file: !71, line: 25, type: !25, align: 16)
!1772 = !DILocation(line: 25, column: 10, scope: !1765)
!1773 = !DILocation(line: 25, column: 15, scope: !1765)
!1774 = !DILocation(line: 26, column: 2, scope: !1765)
!1775 = !DILocation(line: 26, column: 16, scope: !1765)
!1776 = !DILocation(line: 26, column: 30, scope: !1765)
!1777 = !DILocation(line: 26, column: 44, scope: !1765)
!1778 = !DILocation(line: 27, column: 2, scope: !1765)
!1779 = !DILocation(line: 27, column: 16, scope: !1765)
!1780 = !DILocation(line: 163, column: 59, scope: !1781, inlinedAt: !1779)
!1781 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1782 = !DILocation(line: 163, column: 65, scope: !1781, inlinedAt: !1779)
!1783 = !DILocation(line: 163, column: 71, scope: !1781, inlinedAt: !1779)
!1784 = !DILocation(line: 28, column: 2, scope: !1765)
!1785 = !DILocation(line: 30, column: 2, scope: !1765)
!1786 = !DILocation(line: 30, column: 16, scope: !1765)
!1787 = !DILocation(line: 30, column: 30, scope: !1765)
!1788 = !DILocation(line: 30, column: 44, scope: !1765)
!1789 = !DILocalVariable(name: "s1", scope: !1765, file: !71, line: 31, type: !25, align: 16)
!1790 = !DILocation(line: 31, column: 10, scope: !1765)
!1791 = !DILocation(line: 31, column: 15, scope: !1765)
!1792 = !DILocation(line: 32, column: 2, scope: !1765)
!1793 = !DILocation(line: 32, column: 16, scope: !1765)
!1794 = !DILocation(line: 163, column: 59, scope: !1795, inlinedAt: !1793)
!1795 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 163, scopeLine: 163, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1796 = !DILocation(line: 163, column: 65, scope: !1795, inlinedAt: !1793)
!1797 = !DILocation(line: 163, column: 71, scope: !1795, inlinedAt: !1793)
!1798 = !DILocation(line: 33, column: 2, scope: !1765)
!1799 = !DILocation(line: 35, column: 9, scope: !1765)
!1800 = !DILocation(line: 35, column: 14, scope: !1765)
!1801 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws128Random.next_bytes", scope: !71, file: !71, line: 41, type: !1741, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1802 = !DILocation(line: 41, column: 67, scope: !1801)
!1803 = !DILocalVariable(name: "self", arg: 1, scope: !1801, file: !71, line: 41, type: !1743)
!1804 = !DILocation(line: 41, column: 34, scope: !1801)
!1805 = !DILocalVariable(name: "bytes", arg: 2, scope: !1801, file: !71, line: 41, type: !254)
!1806 = !DILocation(line: 41, column: 48, scope: !1801)
!1807 = !DILocation(line: 39, column: 11, scope: !1808)
!1808 = distinct !DILexicalBlock(scope: !1801, file: !71, line: 41, column: 67)
!1809 = !DILocalVariable(name: "len", scope: !1810, file: !71, line: 146, type: !259, align: 8)
!1810 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1811 = !DILocation(line: 146, column: 6, scope: !1810, inlinedAt: !1802)
!1812 = !DILocation(line: 146, column: 12, scope: !1810, inlinedAt: !1802)
!1813 = !DILocation(line: 148, column: 2, scope: !1810, inlinedAt: !1802)
!1814 = !DILocation(line: 148, column: 9, scope: !1815, inlinedAt: !1802)
!1815 = distinct !DILexicalBlock(scope: !1810, file: !2, line: 148, column: 2)
!1816 = !DILocalVariable(name: "value", scope: !1817, file: !71, line: 150, type: !25, align: 16)
!1817 = distinct !DILexicalBlock(scope: !1815, file: !2, line: 149, column: 2)
!1818 = !DILocation(line: 150, column: 7, scope: !1817, inlinedAt: !1802)
!1819 = !DILocation(line: 41, column: 90, scope: !1817, inlinedAt: !1802)
!1820 = !DILocation(line: 150, column: 15, scope: !1817, inlinedAt: !1802)
!1821 = !DILocation(line: 151, column: 7, scope: !1817, inlinedAt: !1802)
!1822 = !DILocation(line: 153, column: 33, scope: !1823, inlinedAt: !1802)
!1823 = distinct !DILexicalBlock(scope: !1817, file: !2, line: 152, column: 3)
!1824 = !DILocation(line: 153, column: 4, scope: !1823, inlinedAt: !1802)
!1825 = !DILocation(line: 153, column: 10, scope: !1823, inlinedAt: !1802)
!1826 = !DILocation(line: 154, column: 10, scope: !1823, inlinedAt: !1802)
!1827 = !DILocation(line: 156, column: 3, scope: !1817, inlinedAt: !1802)
!1828 = !DILocation(line: 157, column: 3, scope: !1817, inlinedAt: !1802)
!1829 = !DILocation(line: 158, column: 11, scope: !1817, inlinedAt: !1802)
!1830 = !DILocation(line: 158, column: 17, scope: !1817, inlinedAt: !1802)
!1831 = !DILocation(line: 165, column: 33, scope: !1832, inlinedAt: !1833)
!1832 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1833 = !DILocation(line: 160, column: 2, scope: !1810, inlinedAt: !1802)
!1834 = !DILocation(line: 165, column: 2, scope: !1832, inlinedAt: !1833)
!1835 = !DILocation(line: 167, column: 2, scope: !1832, inlinedAt: !1833)
!1836 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws128Random.next_long", scope: !71, file: !71, line: 42, type: !1837, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1837 = !DISubroutineType(types: !1838)
!1838 = !{!6, !1743}
!1839 = !DILocation(line: 42, column: 53, scope: !1836)
!1840 = !DILocalVariable(name: "self", arg: 1, scope: !1836, file: !71, line: 42, type: !1743)
!1841 = !DILocation(line: 42, column: 34, scope: !1836)
!1842 = !DILocation(line: 42, column: 60, scope: !1836)
!1843 = !DILocation(line: 42, column: 54, scope: !1836)
!1844 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws128Random.next_int", scope: !71, file: !71, line: 43, type: !1845, scopeLine: 43, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1845 = !DISubroutineType(types: !1846)
!1846 = !{!21, !1743}
!1847 = !DILocation(line: 43, column: 51, scope: !1844)
!1848 = !DILocalVariable(name: "self", arg: 1, scope: !1844, file: !71, line: 43, type: !1743)
!1849 = !DILocation(line: 43, column: 32, scope: !1844)
!1850 = !DILocation(line: 43, column: 57, scope: !1844)
!1851 = !DILocation(line: 43, column: 52, scope: !1844)
!1852 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws128Random.next_short", scope: !71, file: !71, line: 44, type: !1853, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1853 = !DISubroutineType(types: !1854)
!1854 = !{!32, !1743}
!1855 = !DILocation(line: 44, column: 55, scope: !1852)
!1856 = !DILocalVariable(name: "self", arg: 1, scope: !1852, file: !71, line: 44, type: !1743)
!1857 = !DILocation(line: 44, column: 36, scope: !1852)
!1858 = !DILocation(line: 44, column: 63, scope: !1852)
!1859 = !DILocation(line: 44, column: 56, scope: !1852)
!1860 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws128Random.next_byte", scope: !71, file: !71, line: 45, type: !1861, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1861 = !DISubroutineType(types: !1862)
!1862 = !{!60, !1743}
!1863 = !DILocation(line: 45, column: 52, scope: !1860)
!1864 = !DILocalVariable(name: "self", arg: 1, scope: !1860, file: !71, line: 45, type: !1743)
!1865 = !DILocation(line: 45, column: 33, scope: !1860)
!1866 = !DILocation(line: 45, column: 58, scope: !1860)
!1867 = !DILocation(line: 45, column: 53, scope: !1860)
!1868 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws64Random.set_seed", scope: !71, file: !71, line: 55, type: !1869, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1869 = !DISubroutineType(types: !1870)
!1870 = !{null, !1871, !254}
!1871 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws64Random*", baseType: !1872, size: 64, align: 64, dwarfAddressSpace: 0)
!1872 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws64Random", scope: !71, file: !71, line: 49, size: 256, align: 64, elements: !1873, identifier: "std.math.random.Msws64Random")
!1873 = !{!1874, !1875, !1876, !1877}
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !1872, file: !71, line: 51, baseType: !6, size: 64, align: 64)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !1872, file: !71, line: 51, baseType: !6, size: 64, align: 64, offset: 64)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !1872, file: !71, line: 52, baseType: !6, size: 64, align: 64, offset: 128)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !1872, file: !71, line: 52, baseType: !6, size: 64, align: 64, offset: 192)
!1878 = !DILocation(line: 56, column: 1, scope: !1868)
!1879 = !DILocalVariable(name: "self", arg: 1, scope: !1868, file: !71, line: 55, type: !1871)
!1880 = !DILocation(line: 55, column: 32, scope: !1868)
!1881 = !DILocalVariable(name: "input", arg: 2, scope: !1868, file: !71, line: 55, type: !254)
!1882 = !DILocation(line: 55, column: 46, scope: !1868)
!1883 = !DILocation(line: 57, column: 3, scope: !1868)
!1884 = !DILocalVariable(name: "return_value", scope: !1885, file: !71, line: 10, type: !5, align: 8)
!1885 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1886 = !DILocation(line: 10, column: 8, scope: !1885, inlinedAt: !1887)
!1887 = !DILocation(line: 57, column: 18, scope: !1868)
!1888 = !DILocation(line: 11, column: 2, scope: !1885, inlinedAt: !1887)
!1889 = !DILocation(line: 213, column: 20, scope: !1890, inlinedAt: !1891)
!1890 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1891 = !DILocation(line: 57, column: 10, scope: !1868)
!1892 = !DILocation(line: 213, column: 12, scope: !1890, inlinedAt: !1891)
!1893 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws64Random.next_long", scope: !71, file: !71, line: 60, type: !1894, scopeLine: 60, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1894 = !DISubroutineType(types: !1895)
!1895 = !{!6, !1871}
!1896 = !DILocation(line: 61, column: 1, scope: !1893)
!1897 = !DILocalVariable(name: "self", arg: 1, scope: !1893, file: !71, line: 60, type: !1871)
!1898 = !DILocation(line: 60, column: 33, scope: !1893)
!1899 = !DILocalVariable(name: "s0", scope: !1893, file: !71, line: 62, type: !6, align: 8)
!1900 = !DILocation(line: 62, column: 8, scope: !1893)
!1901 = !DILocation(line: 62, column: 13, scope: !1893)
!1902 = !DILocation(line: 63, column: 2, scope: !1893)
!1903 = !DILocation(line: 63, column: 16, scope: !1893)
!1904 = !DILocation(line: 63, column: 30, scope: !1893)
!1905 = !DILocation(line: 63, column: 44, scope: !1893)
!1906 = !DILocation(line: 64, column: 2, scope: !1893)
!1907 = !DILocation(line: 64, column: 16, scope: !1893)
!1908 = !DILocation(line: 147, column: 53, scope: !1909, inlinedAt: !1907)
!1909 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1910 = !DILocation(line: 147, column: 59, scope: !1909, inlinedAt: !1907)
!1911 = !DILocation(line: 147, column: 65, scope: !1909, inlinedAt: !1907)
!1912 = !DILocation(line: 65, column: 2, scope: !1893)
!1913 = !DILocation(line: 67, column: 2, scope: !1893)
!1914 = !DILocation(line: 67, column: 16, scope: !1893)
!1915 = !DILocation(line: 67, column: 30, scope: !1893)
!1916 = !DILocation(line: 67, column: 44, scope: !1893)
!1917 = !DILocalVariable(name: "s1", scope: !1893, file: !71, line: 68, type: !6, align: 8)
!1918 = !DILocation(line: 68, column: 8, scope: !1893)
!1919 = !DILocation(line: 68, column: 13, scope: !1893)
!1920 = !DILocation(line: 69, column: 2, scope: !1893)
!1921 = !DILocation(line: 69, column: 16, scope: !1893)
!1922 = !DILocation(line: 147, column: 53, scope: !1923, inlinedAt: !1921)
!1923 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 147, scopeLine: 147, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1924 = !DILocation(line: 147, column: 59, scope: !1923, inlinedAt: !1921)
!1925 = !DILocation(line: 147, column: 65, scope: !1923, inlinedAt: !1921)
!1926 = !DILocation(line: 70, column: 2, scope: !1893)
!1927 = !DILocation(line: 72, column: 9, scope: !1893)
!1928 = !DILocation(line: 72, column: 14, scope: !1893)
!1929 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws64Random.next_bytes", scope: !71, file: !71, line: 78, type: !1869, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1930 = !DILocation(line: 78, column: 66, scope: !1929)
!1931 = !DILocalVariable(name: "self", arg: 1, scope: !1929, file: !71, line: 78, type: !1871)
!1932 = !DILocation(line: 78, column: 33, scope: !1929)
!1933 = !DILocalVariable(name: "bytes", arg: 2, scope: !1929, file: !71, line: 78, type: !254)
!1934 = !DILocation(line: 78, column: 47, scope: !1929)
!1935 = !DILocation(line: 76, column: 11, scope: !1936)
!1936 = distinct !DILexicalBlock(scope: !1929, file: !71, line: 78, column: 66)
!1937 = !DILocalVariable(name: "len", scope: !1938, file: !71, line: 146, type: !259, align: 8)
!1938 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1939 = !DILocation(line: 146, column: 6, scope: !1938, inlinedAt: !1930)
!1940 = !DILocation(line: 146, column: 12, scope: !1938, inlinedAt: !1930)
!1941 = !DILocation(line: 148, column: 2, scope: !1938, inlinedAt: !1930)
!1942 = !DILocation(line: 148, column: 9, scope: !1943, inlinedAt: !1930)
!1943 = distinct !DILexicalBlock(scope: !1938, file: !2, line: 148, column: 2)
!1944 = !DILocalVariable(name: "value", scope: !1945, file: !71, line: 150, type: !6, align: 8)
!1945 = distinct !DILexicalBlock(scope: !1943, file: !2, line: 149, column: 2)
!1946 = !DILocation(line: 150, column: 7, scope: !1945, inlinedAt: !1930)
!1947 = !DILocation(line: 78, column: 89, scope: !1945, inlinedAt: !1930)
!1948 = !DILocation(line: 150, column: 15, scope: !1945, inlinedAt: !1930)
!1949 = !DILocation(line: 151, column: 7, scope: !1945, inlinedAt: !1930)
!1950 = !DILocation(line: 153, column: 33, scope: !1951, inlinedAt: !1930)
!1951 = distinct !DILexicalBlock(scope: !1945, file: !2, line: 152, column: 3)
!1952 = !DILocation(line: 153, column: 4, scope: !1951, inlinedAt: !1930)
!1953 = !DILocation(line: 153, column: 10, scope: !1951, inlinedAt: !1930)
!1954 = !DILocation(line: 154, column: 10, scope: !1951, inlinedAt: !1930)
!1955 = !DILocation(line: 156, column: 3, scope: !1945, inlinedAt: !1930)
!1956 = !DILocation(line: 157, column: 3, scope: !1945, inlinedAt: !1930)
!1957 = !DILocation(line: 158, column: 11, scope: !1945, inlinedAt: !1930)
!1958 = !DILocation(line: 158, column: 17, scope: !1945, inlinedAt: !1930)
!1959 = !DILocation(line: 165, column: 33, scope: !1960, inlinedAt: !1961)
!1960 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1961 = !DILocation(line: 160, column: 2, scope: !1938, inlinedAt: !1930)
!1962 = !DILocation(line: 165, column: 2, scope: !1960, inlinedAt: !1961)
!1963 = !DILocation(line: 167, column: 2, scope: !1960, inlinedAt: !1961)
!1964 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws64Random.next_int128", scope: !71, file: !71, line: 79, type: !1965, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1965 = !DISubroutineType(types: !1966)
!1966 = !{!25, !1871}
!1967 = !DILocation(line: 79, column: 56, scope: !1964)
!1968 = !DILocalVariable(name: "self", arg: 1, scope: !1964, file: !71, line: 79, type: !1871)
!1969 = !DILocation(line: 79, column: 37, scope: !1964)
!1970 = !DILocation(line: 79, column: 72, scope: !1971, inlinedAt: !1967)
!1971 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!1972 = !DILocation(line: 138, column: 46, scope: !1971, inlinedAt: !1967)
!1973 = !DILocation(line: 138, column: 72, scope: !1971, inlinedAt: !1967)
!1974 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws64Random.next_int", scope: !71, file: !71, line: 80, type: !1975, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1975 = !DISubroutineType(types: !1976)
!1976 = !{!21, !1871}
!1977 = !DILocation(line: 80, column: 50, scope: !1974)
!1978 = !DILocalVariable(name: "self", arg: 1, scope: !1974, file: !71, line: 80, type: !1871)
!1979 = !DILocation(line: 80, column: 31, scope: !1974)
!1980 = !DILocation(line: 80, column: 56, scope: !1974)
!1981 = !DILocation(line: 80, column: 51, scope: !1974)
!1982 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws64Random.next_short", scope: !71, file: !71, line: 81, type: !1983, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{!32, !1871}
!1985 = !DILocation(line: 81, column: 54, scope: !1982)
!1986 = !DILocalVariable(name: "self", arg: 1, scope: !1982, file: !71, line: 81, type: !1871)
!1987 = !DILocation(line: 81, column: 35, scope: !1982)
!1988 = !DILocation(line: 81, column: 62, scope: !1982)
!1989 = !DILocation(line: 81, column: 55, scope: !1982)
!1990 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws64Random.next_byte", scope: !71, file: !71, line: 82, type: !1991, scopeLine: 82, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1991 = !DISubroutineType(types: !1992)
!1992 = !{!60, !1871}
!1993 = !DILocation(line: 82, column: 51, scope: !1990)
!1994 = !DILocalVariable(name: "self", arg: 1, scope: !1990, file: !71, line: 82, type: !1871)
!1995 = !DILocation(line: 82, column: 32, scope: !1990)
!1996 = !DILocation(line: 82, column: 57, scope: !1990)
!1997 = !DILocation(line: 82, column: 52, scope: !1990)
!1998 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws32Random.set_seed", scope: !71, file: !71, line: 91, type: !1999, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!1999 = !DISubroutineType(types: !2000)
!2000 = !{null, !2001, !254}
!2001 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws32Random*", baseType: !2002, size: 64, align: 64, dwarfAddressSpace: 0)
!2002 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws32Random", scope: !71, file: !71, line: 85, size: 128, align: 32, elements: !2003, identifier: "std.math.random.Msws32Random")
!2003 = !{!2004, !2005, !2006, !2007}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2002, file: !71, line: 87, baseType: !21, size: 32, align: 32)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2002, file: !71, line: 87, baseType: !21, size: 32, align: 32, offset: 32)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2002, file: !71, line: 88, baseType: !21, size: 32, align: 32, offset: 64)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2002, file: !71, line: 88, baseType: !21, size: 32, align: 32, offset: 96)
!2008 = !DILocation(line: 92, column: 1, scope: !1998)
!2009 = !DILocalVariable(name: "self", arg: 1, scope: !1998, file: !71, line: 91, type: !2001)
!2010 = !DILocation(line: 91, column: 32, scope: !1998)
!2011 = !DILocalVariable(name: "input", arg: 2, scope: !1998, file: !71, line: 91, type: !254)
!2012 = !DILocation(line: 91, column: 46, scope: !1998)
!2013 = !DILocation(line: 93, column: 3, scope: !1998)
!2014 = !DILocalVariable(name: "return_value", scope: !2015, file: !71, line: 10, type: !1234, align: 4)
!2015 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2016 = !DILocation(line: 10, column: 8, scope: !2015, inlinedAt: !2017)
!2017 = !DILocation(line: 93, column: 18, scope: !1998)
!2018 = !DILocation(line: 11, column: 2, scope: !2015, inlinedAt: !2017)
!2019 = !DILocation(line: 213, column: 20, scope: !2020, inlinedAt: !2021)
!2020 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2021 = !DILocation(line: 93, column: 10, scope: !1998)
!2022 = !DILocation(line: 213, column: 12, scope: !2020, inlinedAt: !2021)
!2023 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws32Random.next_int", scope: !71, file: !71, line: 97, type: !2024, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2024 = !DISubroutineType(types: !2025)
!2025 = !{!21, !2001}
!2026 = !DILocation(line: 98, column: 1, scope: !2023)
!2027 = !DILocalVariable(name: "self", arg: 1, scope: !2023, file: !71, line: 97, type: !2001)
!2028 = !DILocation(line: 97, column: 31, scope: !2023)
!2029 = !DILocalVariable(name: "s0", scope: !2023, file: !71, line: 99, type: !21, align: 4)
!2030 = !DILocation(line: 99, column: 7, scope: !2023)
!2031 = !DILocation(line: 99, column: 12, scope: !2023)
!2032 = !DILocation(line: 100, column: 2, scope: !2023)
!2033 = !DILocation(line: 100, column: 16, scope: !2023)
!2034 = !DILocation(line: 100, column: 30, scope: !2023)
!2035 = !DILocation(line: 100, column: 44, scope: !2023)
!2036 = !DILocation(line: 101, column: 2, scope: !2023)
!2037 = !DILocation(line: 101, column: 16, scope: !2023)
!2038 = !DILocation(line: 99, column: 50, scope: !2039, inlinedAt: !2037)
!2039 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2040 = !DILocation(line: 99, column: 56, scope: !2039, inlinedAt: !2037)
!2041 = !DILocation(line: 99, column: 62, scope: !2039, inlinedAt: !2037)
!2042 = !DILocation(line: 102, column: 2, scope: !2023)
!2043 = !DILocation(line: 104, column: 2, scope: !2023)
!2044 = !DILocation(line: 104, column: 16, scope: !2023)
!2045 = !DILocation(line: 104, column: 30, scope: !2023)
!2046 = !DILocation(line: 104, column: 44, scope: !2023)
!2047 = !DILocalVariable(name: "s1", scope: !2023, file: !71, line: 105, type: !21, align: 4)
!2048 = !DILocation(line: 105, column: 7, scope: !2023)
!2049 = !DILocation(line: 105, column: 12, scope: !2023)
!2050 = !DILocation(line: 106, column: 2, scope: !2023)
!2051 = !DILocation(line: 106, column: 16, scope: !2023)
!2052 = !DILocation(line: 99, column: 50, scope: !2053, inlinedAt: !2051)
!2053 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2054 = !DILocation(line: 99, column: 56, scope: !2053, inlinedAt: !2051)
!2055 = !DILocation(line: 99, column: 62, scope: !2053, inlinedAt: !2051)
!2056 = !DILocation(line: 107, column: 2, scope: !2023)
!2057 = !DILocation(line: 109, column: 9, scope: !2023)
!2058 = !DILocation(line: 109, column: 14, scope: !2023)
!2059 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws32Random.next_bytes", scope: !71, file: !71, line: 115, type: !1999, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2060 = !DILocation(line: 115, column: 66, scope: !2059)
!2061 = !DILocalVariable(name: "self", arg: 1, scope: !2059, file: !71, line: 115, type: !2001)
!2062 = !DILocation(line: 115, column: 33, scope: !2059)
!2063 = !DILocalVariable(name: "bytes", arg: 2, scope: !2059, file: !71, line: 115, type: !254)
!2064 = !DILocation(line: 115, column: 47, scope: !2059)
!2065 = !DILocation(line: 113, column: 11, scope: !2066)
!2066 = distinct !DILexicalBlock(scope: !2059, file: !71, line: 115, column: 66)
!2067 = !DILocalVariable(name: "len", scope: !2068, file: !71, line: 146, type: !259, align: 8)
!2068 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2069 = !DILocation(line: 146, column: 6, scope: !2068, inlinedAt: !2060)
!2070 = !DILocation(line: 146, column: 12, scope: !2068, inlinedAt: !2060)
!2071 = !DILocation(line: 148, column: 2, scope: !2068, inlinedAt: !2060)
!2072 = !DILocation(line: 148, column: 9, scope: !2073, inlinedAt: !2060)
!2073 = distinct !DILexicalBlock(scope: !2068, file: !2, line: 148, column: 2)
!2074 = !DILocalVariable(name: "value", scope: !2075, file: !71, line: 150, type: !21, align: 4)
!2075 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 149, column: 2)
!2076 = !DILocation(line: 150, column: 7, scope: !2075, inlinedAt: !2060)
!2077 = !DILocation(line: 115, column: 89, scope: !2075, inlinedAt: !2060)
!2078 = !DILocation(line: 150, column: 15, scope: !2075, inlinedAt: !2060)
!2079 = !DILocation(line: 151, column: 7, scope: !2075, inlinedAt: !2060)
!2080 = !DILocation(line: 153, column: 33, scope: !2081, inlinedAt: !2060)
!2081 = distinct !DILexicalBlock(scope: !2075, file: !2, line: 152, column: 3)
!2082 = !DILocation(line: 153, column: 4, scope: !2081, inlinedAt: !2060)
!2083 = !DILocation(line: 153, column: 10, scope: !2081, inlinedAt: !2060)
!2084 = !DILocation(line: 154, column: 10, scope: !2081, inlinedAt: !2060)
!2085 = !DILocation(line: 156, column: 3, scope: !2075, inlinedAt: !2060)
!2086 = !DILocation(line: 157, column: 3, scope: !2075, inlinedAt: !2060)
!2087 = !DILocation(line: 158, column: 11, scope: !2075, inlinedAt: !2060)
!2088 = !DILocation(line: 158, column: 17, scope: !2075, inlinedAt: !2060)
!2089 = !DILocation(line: 165, column: 33, scope: !2090, inlinedAt: !2091)
!2090 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2091 = !DILocation(line: 160, column: 2, scope: !2068, inlinedAt: !2060)
!2092 = !DILocation(line: 165, column: 2, scope: !2090, inlinedAt: !2091)
!2093 = !DILocation(line: 167, column: 2, scope: !2090, inlinedAt: !2091)
!2094 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws32Random.next_int128", scope: !71, file: !71, line: 116, type: !2095, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2095 = !DISubroutineType(types: !2096)
!2096 = !{!25, !2001}
!2097 = !DILocation(line: 116, column: 56, scope: !2094)
!2098 = !DILocalVariable(name: "self", arg: 1, scope: !2094, file: !71, line: 116, type: !2001)
!2099 = !DILocation(line: 116, column: 37, scope: !2094)
!2100 = !DILocation(line: 116, column: 72, scope: !2101, inlinedAt: !2097)
!2101 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2102 = !DILocation(line: 138, column: 46, scope: !2101, inlinedAt: !2097)
!2103 = !DILocation(line: 138, column: 72, scope: !2101, inlinedAt: !2097)
!2104 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws32Random.next_long", scope: !71, file: !71, line: 117, type: !2105, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2105 = !DISubroutineType(types: !2106)
!2106 = !{!6, !2001}
!2107 = !DILocation(line: 117, column: 52, scope: !2104)
!2108 = !DILocalVariable(name: "self", arg: 1, scope: !2104, file: !71, line: 117, type: !2001)
!2109 = !DILocation(line: 117, column: 33, scope: !2104)
!2110 = !DILocation(line: 117, column: 65, scope: !2111, inlinedAt: !2107)
!2111 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2112 = !DILocation(line: 139, column: 41, scope: !2111, inlinedAt: !2107)
!2113 = !DILocation(line: 139, column: 65, scope: !2111, inlinedAt: !2107)
!2114 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws32Random.next_short", scope: !71, file: !71, line: 118, type: !2115, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2115 = !DISubroutineType(types: !2116)
!2116 = !{!32, !2001}
!2117 = !DILocation(line: 118, column: 54, scope: !2114)
!2118 = !DILocalVariable(name: "self", arg: 1, scope: !2114, file: !71, line: 118, type: !2001)
!2119 = !DILocation(line: 118, column: 35, scope: !2114)
!2120 = !DILocation(line: 118, column: 62, scope: !2114)
!2121 = !DILocation(line: 118, column: 55, scope: !2114)
!2122 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws32Random.next_byte", scope: !71, file: !71, line: 119, type: !2123, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2123 = !DISubroutineType(types: !2124)
!2124 = !{!60, !2001}
!2125 = !DILocation(line: 119, column: 51, scope: !2122)
!2126 = !DILocalVariable(name: "self", arg: 1, scope: !2122, file: !71, line: 119, type: !2001)
!2127 = !DILocation(line: 119, column: 32, scope: !2122)
!2128 = !DILocation(line: 119, column: 57, scope: !2122)
!2129 = !DILocation(line: 119, column: 52, scope: !2122)
!2130 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws16Random.set_seed", scope: !71, file: !71, line: 129, type: !2131, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2131 = !DISubroutineType(types: !2132)
!2132 = !{null, !2133, !254}
!2133 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws16Random*", baseType: !2134, size: 64, align: 64, dwarfAddressSpace: 0)
!2134 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws16Random", scope: !71, file: !71, line: 123, size: 64, align: 16, elements: !2135, identifier: "std.math.random.Msws16Random")
!2135 = !{!2136, !2137, !2138, !2139}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2134, file: !71, line: 125, baseType: !32, size: 16, align: 16)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2134, file: !71, line: 125, baseType: !32, size: 16, align: 16, offset: 16)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2134, file: !71, line: 126, baseType: !32, size: 16, align: 16, offset: 32)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2134, file: !71, line: 126, baseType: !32, size: 16, align: 16, offset: 48)
!2140 = !DILocation(line: 130, column: 1, scope: !2130)
!2141 = !DILocalVariable(name: "self", arg: 1, scope: !2130, file: !71, line: 129, type: !2133)
!2142 = !DILocation(line: 129, column: 32, scope: !2130)
!2143 = !DILocalVariable(name: "input", arg: 2, scope: !2130, file: !71, line: 129, type: !254)
!2144 = !DILocation(line: 129, column: 46, scope: !2130)
!2145 = !DILocation(line: 131, column: 3, scope: !2130)
!2146 = !DILocalVariable(name: "return_value", scope: !2147, file: !71, line: 10, type: !1363, align: 2)
!2147 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2148 = !DILocation(line: 10, column: 8, scope: !2147, inlinedAt: !2149)
!2149 = !DILocation(line: 131, column: 18, scope: !2130)
!2150 = !DILocation(line: 11, column: 2, scope: !2147, inlinedAt: !2149)
!2151 = !DILocation(line: 213, column: 20, scope: !2152, inlinedAt: !2153)
!2152 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2153 = !DILocation(line: 131, column: 10, scope: !2130)
!2154 = !DILocation(line: 213, column: 12, scope: !2152, inlinedAt: !2153)
!2155 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws16Random.next_short", scope: !71, file: !71, line: 135, type: !2156, scopeLine: 135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2156 = !DISubroutineType(types: !2157)
!2157 = !{!32, !2133}
!2158 = !DILocation(line: 136, column: 1, scope: !2155)
!2159 = !DILocalVariable(name: "self", arg: 1, scope: !2155, file: !71, line: 135, type: !2133)
!2160 = !DILocation(line: 135, column: 35, scope: !2155)
!2161 = !DILocalVariable(name: "s0", scope: !2155, file: !71, line: 137, type: !32, align: 2)
!2162 = !DILocation(line: 137, column: 9, scope: !2155)
!2163 = !DILocation(line: 137, column: 14, scope: !2155)
!2164 = !DILocation(line: 138, column: 2, scope: !2155)
!2165 = !DILocation(line: 138, column: 16, scope: !2155)
!2166 = !DILocation(line: 138, column: 30, scope: !2155)
!2167 = !DILocation(line: 138, column: 44, scope: !2155)
!2168 = !DILocation(line: 139, column: 2, scope: !2155)
!2169 = !DILocation(line: 139, column: 16, scope: !2155)
!2170 = !DILocation(line: 115, column: 56, scope: !2171, inlinedAt: !2169)
!2171 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2172 = !DILocation(line: 115, column: 62, scope: !2171, inlinedAt: !2169)
!2173 = !DILocation(line: 115, column: 68, scope: !2171, inlinedAt: !2169)
!2174 = !DILocation(line: 140, column: 2, scope: !2155)
!2175 = !DILocation(line: 142, column: 2, scope: !2155)
!2176 = !DILocation(line: 142, column: 16, scope: !2155)
!2177 = !DILocation(line: 142, column: 30, scope: !2155)
!2178 = !DILocation(line: 142, column: 44, scope: !2155)
!2179 = !DILocalVariable(name: "s1", scope: !2155, file: !71, line: 143, type: !32, align: 2)
!2180 = !DILocation(line: 143, column: 9, scope: !2155)
!2181 = !DILocation(line: 143, column: 14, scope: !2155)
!2182 = !DILocation(line: 144, column: 2, scope: !2155)
!2183 = !DILocation(line: 144, column: 16, scope: !2155)
!2184 = !DILocation(line: 115, column: 56, scope: !2185, inlinedAt: !2183)
!2185 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 115, scopeLine: 115, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2186 = !DILocation(line: 115, column: 62, scope: !2185, inlinedAt: !2183)
!2187 = !DILocation(line: 115, column: 68, scope: !2185, inlinedAt: !2183)
!2188 = !DILocation(line: 145, column: 2, scope: !2155)
!2189 = !DILocation(line: 147, column: 9, scope: !2155)
!2190 = !DILocation(line: 147, column: 14, scope: !2155)
!2191 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws16Random.next_bytes", scope: !71, file: !71, line: 153, type: !2131, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2192 = !DILocation(line: 153, column: 66, scope: !2191)
!2193 = !DILocalVariable(name: "self", arg: 1, scope: !2191, file: !71, line: 153, type: !2133)
!2194 = !DILocation(line: 153, column: 33, scope: !2191)
!2195 = !DILocalVariable(name: "bytes", arg: 2, scope: !2191, file: !71, line: 153, type: !254)
!2196 = !DILocation(line: 153, column: 47, scope: !2191)
!2197 = !DILocation(line: 151, column: 11, scope: !2198)
!2198 = distinct !DILexicalBlock(scope: !2191, file: !71, line: 153, column: 66)
!2199 = !DILocalVariable(name: "len", scope: !2200, file: !71, line: 146, type: !259, align: 8)
!2200 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2201 = !DILocation(line: 146, column: 6, scope: !2200, inlinedAt: !2192)
!2202 = !DILocation(line: 146, column: 12, scope: !2200, inlinedAt: !2192)
!2203 = !DILocation(line: 148, column: 2, scope: !2200, inlinedAt: !2192)
!2204 = !DILocation(line: 148, column: 9, scope: !2205, inlinedAt: !2192)
!2205 = distinct !DILexicalBlock(scope: !2200, file: !2, line: 148, column: 2)
!2206 = !DILocalVariable(name: "value", scope: !2207, file: !71, line: 150, type: !32, align: 2)
!2207 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 149, column: 2)
!2208 = !DILocation(line: 150, column: 7, scope: !2207, inlinedAt: !2192)
!2209 = !DILocation(line: 153, column: 89, scope: !2207, inlinedAt: !2192)
!2210 = !DILocation(line: 150, column: 15, scope: !2207, inlinedAt: !2192)
!2211 = !DILocation(line: 151, column: 7, scope: !2207, inlinedAt: !2192)
!2212 = !DILocation(line: 153, column: 33, scope: !2213, inlinedAt: !2192)
!2213 = distinct !DILexicalBlock(scope: !2207, file: !2, line: 152, column: 3)
!2214 = !DILocation(line: 153, column: 4, scope: !2213, inlinedAt: !2192)
!2215 = !DILocation(line: 153, column: 10, scope: !2213, inlinedAt: !2192)
!2216 = !DILocation(line: 154, column: 10, scope: !2213, inlinedAt: !2192)
!2217 = !DILocation(line: 156, column: 3, scope: !2207, inlinedAt: !2192)
!2218 = !DILocation(line: 157, column: 3, scope: !2207, inlinedAt: !2192)
!2219 = !DILocation(line: 158, column: 11, scope: !2207, inlinedAt: !2192)
!2220 = !DILocation(line: 158, column: 17, scope: !2207, inlinedAt: !2192)
!2221 = !DILocation(line: 165, column: 33, scope: !2222, inlinedAt: !2223)
!2222 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2223 = !DILocation(line: 160, column: 2, scope: !2200, inlinedAt: !2192)
!2224 = !DILocation(line: 165, column: 2, scope: !2222, inlinedAt: !2223)
!2225 = !DILocation(line: 167, column: 2, scope: !2222, inlinedAt: !2223)
!2226 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws16Random.next_int128", scope: !71, file: !71, line: 154, type: !2227, scopeLine: 154, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2227 = !DISubroutineType(types: !2228)
!2228 = !{!25, !2133}
!2229 = !DILocation(line: 154, column: 56, scope: !2226)
!2230 = !DILocalVariable(name: "self", arg: 1, scope: !2226, file: !71, line: 154, type: !2133)
!2231 = !DILocation(line: 154, column: 37, scope: !2226)
!2232 = !DILocation(line: 154, column: 72, scope: !2233, inlinedAt: !2229)
!2233 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2234 = !DILocation(line: 138, column: 46, scope: !2233, inlinedAt: !2229)
!2235 = !DILocation(line: 138, column: 72, scope: !2233, inlinedAt: !2229)
!2236 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws16Random.next_long", scope: !71, file: !71, line: 155, type: !2237, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2237 = !DISubroutineType(types: !2238)
!2238 = !{!6, !2133}
!2239 = !DILocation(line: 155, column: 52, scope: !2236)
!2240 = !DILocalVariable(name: "self", arg: 1, scope: !2236, file: !71, line: 155, type: !2133)
!2241 = !DILocation(line: 155, column: 33, scope: !2236)
!2242 = !DILocation(line: 155, column: 65, scope: !2243, inlinedAt: !2239)
!2243 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2244 = !DILocation(line: 139, column: 41, scope: !2243, inlinedAt: !2239)
!2245 = !DILocation(line: 139, column: 65, scope: !2243, inlinedAt: !2239)
!2246 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws16Random.next_int", scope: !71, file: !71, line: 156, type: !2247, scopeLine: 156, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2247 = !DISubroutineType(types: !2248)
!2248 = !{!21, !2133}
!2249 = !DILocation(line: 156, column: 50, scope: !2246)
!2250 = !DILocalVariable(name: "self", arg: 1, scope: !2246, file: !71, line: 156, type: !2133)
!2251 = !DILocation(line: 156, column: 31, scope: !2246)
!2252 = !DILocation(line: 156, column: 64, scope: !2253, inlinedAt: !2249)
!2253 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2254 = !DILocation(line: 140, column: 41, scope: !2253, inlinedAt: !2249)
!2255 = !DILocation(line: 140, column: 64, scope: !2253, inlinedAt: !2249)
!2256 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws16Random.next_byte", scope: !71, file: !71, line: 157, type: !2257, scopeLine: 157, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2257 = !DISubroutineType(types: !2258)
!2258 = !{!60, !2133}
!2259 = !DILocation(line: 157, column: 51, scope: !2256)
!2260 = !DILocalVariable(name: "self", arg: 1, scope: !2256, file: !71, line: 157, type: !2133)
!2261 = !DILocation(line: 157, column: 32, scope: !2256)
!2262 = !DILocation(line: 157, column: 57, scope: !2256)
!2263 = !DILocation(line: 157, column: 52, scope: !2256)
!2264 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Msws8Random.set_seed", scope: !71, file: !71, line: 166, type: !2265, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2265 = !DISubroutineType(types: !2266)
!2266 = !{null, !2267, !254}
!2267 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Msws8Random*", baseType: !2268, size: 64, align: 64, dwarfAddressSpace: 0)
!2268 = !DICompositeType(tag: DW_TAG_structure_type, name: "Msws8Random", scope: !71, file: !71, line: 160, size: 32, align: 8, elements: !2269, identifier: "std.math.random.Msws8Random")
!2269 = !{!2270, !2271, !2272, !2273}
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "state0", scope: !2268, file: !71, line: 162, baseType: !60, size: 8, align: 8)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "state1", scope: !2268, file: !71, line: 162, baseType: !60, size: 8, align: 8, offset: 8)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "weyl0", scope: !2268, file: !71, line: 163, baseType: !60, size: 8, align: 8, offset: 16)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "weyl1", scope: !2268, file: !71, line: 163, baseType: !60, size: 8, align: 8, offset: 24)
!2274 = !DILocation(line: 167, column: 1, scope: !2264)
!2275 = !DILocalVariable(name: "self", arg: 1, scope: !2264, file: !71, line: 166, type: !2267)
!2276 = !DILocation(line: 166, column: 31, scope: !2264)
!2277 = !DILocalVariable(name: "input", arg: 2, scope: !2264, file: !71, line: 166, type: !254)
!2278 = !DILocation(line: 166, column: 45, scope: !2264)
!2279 = !DILocation(line: 168, column: 3, scope: !2264)
!2280 = !DILocalVariable(name: "return_value", scope: !2281, file: !71, line: 10, type: !1494, align: 1)
!2281 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2282 = !DILocation(line: 10, column: 8, scope: !2281, inlinedAt: !2283)
!2283 = !DILocation(line: 168, column: 18, scope: !2264)
!2284 = !DILocation(line: 11, column: 2, scope: !2281, inlinedAt: !2283)
!2285 = !DILocation(line: 213, column: 20, scope: !2286, inlinedAt: !2287)
!2286 = distinct !DISubprogram(name: "bitcast", linkageName: "bitcast", scope: !345, file: !345, line: 210, scopeLine: 210, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2287 = !DILocation(line: 168, column: 10, scope: !2264)
!2288 = !DILocation(line: 213, column: 12, scope: !2286, inlinedAt: !2287)
!2289 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Msws8Random.next_byte", scope: !71, file: !71, line: 171, type: !2290, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2290 = !DISubroutineType(types: !2291)
!2291 = !{!60, !2267}
!2292 = !DILocation(line: 172, column: 1, scope: !2289)
!2293 = !DILocalVariable(name: "self", arg: 1, scope: !2289, file: !71, line: 171, type: !2267)
!2294 = !DILocation(line: 171, column: 31, scope: !2289)
!2295 = !DILocalVariable(name: "s0", scope: !2289, file: !71, line: 173, type: !60, align: 1)
!2296 = !DILocation(line: 173, column: 7, scope: !2289)
!2297 = !DILocation(line: 173, column: 12, scope: !2289)
!2298 = !DILocation(line: 174, column: 2, scope: !2289)
!2299 = !DILocation(line: 174, column: 16, scope: !2289)
!2300 = !DILocation(line: 174, column: 30, scope: !2289)
!2301 = !DILocation(line: 174, column: 44, scope: !2289)
!2302 = !DILocation(line: 175, column: 2, scope: !2289)
!2303 = !DILocation(line: 175, column: 16, scope: !2289)
!2304 = !DILocation(line: 131, column: 50, scope: !2305, inlinedAt: !2303)
!2305 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2306 = !DILocation(line: 131, column: 56, scope: !2305, inlinedAt: !2303)
!2307 = !DILocation(line: 131, column: 62, scope: !2305, inlinedAt: !2303)
!2308 = !DILocation(line: 176, column: 2, scope: !2289)
!2309 = !DILocation(line: 178, column: 2, scope: !2289)
!2310 = !DILocation(line: 178, column: 16, scope: !2289)
!2311 = !DILocation(line: 178, column: 30, scope: !2289)
!2312 = !DILocation(line: 178, column: 44, scope: !2289)
!2313 = !DILocalVariable(name: "s1", scope: !2289, file: !71, line: 179, type: !60, align: 1)
!2314 = !DILocation(line: 179, column: 7, scope: !2289)
!2315 = !DILocation(line: 179, column: 12, scope: !2289)
!2316 = !DILocation(line: 180, column: 2, scope: !2289)
!2317 = !DILocation(line: 180, column: 16, scope: !2289)
!2318 = !DILocation(line: 131, column: 50, scope: !2319, inlinedAt: !2317)
!2319 = distinct !DISubprogram(name: "rotr", linkageName: "rotr", scope: !157, file: !157, line: 131, scopeLine: 131, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2320 = !DILocation(line: 131, column: 56, scope: !2319, inlinedAt: !2317)
!2321 = !DILocation(line: 131, column: 62, scope: !2319, inlinedAt: !2317)
!2322 = !DILocation(line: 181, column: 2, scope: !2289)
!2323 = !DILocation(line: 183, column: 9, scope: !2289)
!2324 = !DILocation(line: 183, column: 14, scope: !2289)
!2325 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Msws8Random.next_bytes", scope: !71, file: !71, line: 186, type: !2265, scopeLine: 186, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2326 = !DILocation(line: 186, column: 65, scope: !2325)
!2327 = !DILocalVariable(name: "self", arg: 1, scope: !2325, file: !71, line: 186, type: !2267)
!2328 = !DILocation(line: 186, column: 32, scope: !2325)
!2329 = !DILocalVariable(name: "bytes", arg: 2, scope: !2325, file: !71, line: 186, type: !254)
!2330 = !DILocation(line: 186, column: 46, scope: !2325)
!2331 = !DILocalVariable(name: "len", scope: !2332, file: !71, line: 146, type: !259, align: 8)
!2332 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2333 = !DILocation(line: 146, column: 6, scope: !2332, inlinedAt: !2326)
!2334 = !DILocation(line: 146, column: 12, scope: !2332, inlinedAt: !2326)
!2335 = !DILocation(line: 148, column: 2, scope: !2332, inlinedAt: !2326)
!2336 = !DILocation(line: 148, column: 9, scope: !2337, inlinedAt: !2326)
!2337 = distinct !DILexicalBlock(scope: !2332, file: !2, line: 148, column: 2)
!2338 = !DILocalVariable(name: "value", scope: !2339, file: !71, line: 150, type: !60, align: 1)
!2339 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 149, column: 2)
!2340 = !DILocation(line: 150, column: 7, scope: !2339, inlinedAt: !2326)
!2341 = !DILocation(line: 186, column: 88, scope: !2339, inlinedAt: !2326)
!2342 = !DILocation(line: 150, column: 15, scope: !2339, inlinedAt: !2326)
!2343 = !DILocation(line: 151, column: 7, scope: !2339, inlinedAt: !2326)
!2344 = !DILocation(line: 153, column: 33, scope: !2345, inlinedAt: !2326)
!2345 = distinct !DILexicalBlock(scope: !2339, file: !2, line: 152, column: 3)
!2346 = !DILocation(line: 153, column: 4, scope: !2345, inlinedAt: !2326)
!2347 = !DILocation(line: 153, column: 10, scope: !2345, inlinedAt: !2326)
!2348 = !DILocation(line: 154, column: 10, scope: !2345, inlinedAt: !2326)
!2349 = !DILocation(line: 156, column: 3, scope: !2339, inlinedAt: !2326)
!2350 = !DILocation(line: 157, column: 3, scope: !2339, inlinedAt: !2326)
!2351 = !DILocation(line: 158, column: 11, scope: !2339, inlinedAt: !2326)
!2352 = !DILocation(line: 158, column: 17, scope: !2339, inlinedAt: !2326)
!2353 = !DILocation(line: 165, column: 33, scope: !2354, inlinedAt: !2355)
!2354 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2355 = !DILocation(line: 160, column: 2, scope: !2332, inlinedAt: !2326)
!2356 = !DILocation(line: 165, column: 2, scope: !2354, inlinedAt: !2355)
!2357 = !DILocation(line: 167, column: 2, scope: !2354, inlinedAt: !2355)
!2358 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Msws8Random.next_int128", scope: !71, file: !71, line: 187, type: !2359, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2359 = !DISubroutineType(types: !2360)
!2360 = !{!25, !2267}
!2361 = !DILocation(line: 187, column: 55, scope: !2358)
!2362 = !DILocalVariable(name: "self", arg: 1, scope: !2358, file: !71, line: 187, type: !2267)
!2363 = !DILocation(line: 187, column: 36, scope: !2358)
!2364 = !DILocation(line: 187, column: 71, scope: !2365, inlinedAt: !2361)
!2365 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2366 = !DILocation(line: 138, column: 46, scope: !2365, inlinedAt: !2361)
!2367 = !DILocation(line: 138, column: 72, scope: !2365, inlinedAt: !2361)
!2368 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Msws8Random.next_long", scope: !71, file: !71, line: 188, type: !2369, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2369 = !DISubroutineType(types: !2370)
!2370 = !{!6, !2267}
!2371 = !DILocation(line: 188, column: 51, scope: !2368)
!2372 = !DILocalVariable(name: "self", arg: 1, scope: !2368, file: !71, line: 188, type: !2267)
!2373 = !DILocation(line: 188, column: 32, scope: !2368)
!2374 = !DILocation(line: 188, column: 64, scope: !2375, inlinedAt: !2371)
!2375 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2376 = !DILocation(line: 139, column: 41, scope: !2375, inlinedAt: !2371)
!2377 = !DILocation(line: 139, column: 65, scope: !2375, inlinedAt: !2371)
!2378 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Msws8Random.next_int", scope: !71, file: !71, line: 189, type: !2379, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{!21, !2267}
!2381 = !DILocation(line: 189, column: 49, scope: !2378)
!2382 = !DILocalVariable(name: "self", arg: 1, scope: !2378, file: !71, line: 189, type: !2267)
!2383 = !DILocation(line: 189, column: 30, scope: !2378)
!2384 = !DILocation(line: 189, column: 63, scope: !2385, inlinedAt: !2381)
!2385 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2386 = !DILocation(line: 140, column: 41, scope: !2385, inlinedAt: !2381)
!2387 = !DILocation(line: 140, column: 64, scope: !2385, inlinedAt: !2381)
!2388 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Msws8Random.next_short", scope: !71, file: !71, line: 190, type: !2389, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2389 = !DISubroutineType(types: !2390)
!2390 = !{!32, !2267}
!2391 = !DILocation(line: 190, column: 53, scope: !2388)
!2392 = !DILocalVariable(name: "self", arg: 1, scope: !2388, file: !71, line: 190, type: !2267)
!2393 = !DILocation(line: 190, column: 34, scope: !2388)
!2394 = !DILocation(line: 190, column: 68, scope: !2395, inlinedAt: !2391)
!2395 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2396 = !DILocation(line: 141, column: 44, scope: !2395, inlinedAt: !2391)
!2397 = !DILocation(line: 141, column: 68, scope: !2395, inlinedAt: !2391)
!2398 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg128Random.set_seed", scope: !82, file: !82, line: 18, type: !2399, scopeLine: 18, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2399 = !DISubroutineType(types: !2400)
!2400 = !{null, !2401, !254}
!2401 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg128Random*", baseType: !2402, size: 64, align: 64, dwarfAddressSpace: 0)
!2402 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg128Random", scope: !82, file: !82, line: 16, baseType: !25, align: 16)
!2403 = !DILocation(line: 19, column: 1, scope: !2398)
!2404 = !DILocalVariable(name: "self", arg: 1, scope: !2398, file: !82, line: 18, type: !2401)
!2405 = !DILocation(line: 18, column: 31, scope: !2398)
!2406 = !DILocalVariable(name: "input", arg: 2, scope: !2398, file: !82, line: 18, type: !254)
!2407 = !DILocation(line: 18, column: 45, scope: !2398)
!2408 = !DILocation(line: 20, column: 3, scope: !2398)
!2409 = !DILocalVariable(name: "return_value", scope: !2410, file: !82, line: 10, type: !25, align: 16)
!2410 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2411 = !DILocation(line: 10, column: 8, scope: !2410, inlinedAt: !2412)
!2412 = !DILocation(line: 20, column: 11, scope: !2398)
!2413 = !DILocation(line: 11, column: 2, scope: !2410, inlinedAt: !2412)
!2414 = !DILocation(line: 12, column: 9, scope: !2410, inlinedAt: !2412)
!2415 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg128Random.next_long", scope: !82, file: !82, line: 24, type: !2416, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2416 = !DISubroutineType(types: !2417)
!2417 = !{!6, !2401}
!2418 = !DILocation(line: 25, column: 1, scope: !2415)
!2419 = !DILocalVariable(name: "self", arg: 1, scope: !2415, file: !82, line: 24, type: !2401)
!2420 = !DILocation(line: 24, column: 33, scope: !2415)
!2421 = !DILocalVariable(name: "s", scope: !2415, file: !82, line: 26, type: !531, align: 8)
!2422 = !DILocation(line: 26, column: 11, scope: !2415)
!2423 = !DILocation(line: 26, column: 25, scope: !2415)
!2424 = !DILocalVariable(name: "result", scope: !2415, file: !82, line: 27, type: !6, align: 8)
!2425 = !DILocation(line: 27, column: 8, scope: !2415)
!2426 = !DILocation(line: 27, column: 26, scope: !2415)
!2427 = !DILocation(line: 27, column: 18, scope: !2415)
!2428 = !DILocation(line: 28, column: 3, scope: !2415)
!2429 = !DILocation(line: 28, column: 8, scope: !2415)
!2430 = !DILocation(line: 28, column: 7, scope: !2415)
!2431 = !DILocation(line: 29, column: 9, scope: !2415)
!2432 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg128Random.next_bytes", scope: !82, file: !82, line: 35, type: !2399, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2433 = !DILocation(line: 35, column: 66, scope: !2432)
!2434 = !DILocalVariable(name: "self", arg: 1, scope: !2432, file: !82, line: 35, type: !2401)
!2435 = !DILocation(line: 35, column: 33, scope: !2432)
!2436 = !DILocalVariable(name: "bytes", arg: 2, scope: !2432, file: !82, line: 35, type: !254)
!2437 = !DILocation(line: 35, column: 47, scope: !2432)
!2438 = !DILocation(line: 33, column: 11, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2432, file: !82, line: 35, column: 66)
!2440 = !DILocalVariable(name: "len", scope: !2441, file: !82, line: 146, type: !259, align: 8)
!2441 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2442 = !DILocation(line: 146, column: 6, scope: !2441, inlinedAt: !2433)
!2443 = !DILocation(line: 146, column: 12, scope: !2441, inlinedAt: !2433)
!2444 = !DILocation(line: 148, column: 2, scope: !2441, inlinedAt: !2433)
!2445 = !DILocation(line: 148, column: 9, scope: !2446, inlinedAt: !2433)
!2446 = distinct !DILexicalBlock(scope: !2441, file: !2, line: 148, column: 2)
!2447 = !DILocalVariable(name: "value", scope: !2448, file: !82, line: 150, type: !6, align: 8)
!2448 = distinct !DILexicalBlock(scope: !2446, file: !2, line: 149, column: 2)
!2449 = !DILocation(line: 150, column: 7, scope: !2448, inlinedAt: !2433)
!2450 = !DILocation(line: 35, column: 89, scope: !2448, inlinedAt: !2433)
!2451 = !DILocation(line: 150, column: 15, scope: !2448, inlinedAt: !2433)
!2452 = !DILocation(line: 151, column: 7, scope: !2448, inlinedAt: !2433)
!2453 = !DILocation(line: 153, column: 33, scope: !2454, inlinedAt: !2433)
!2454 = distinct !DILexicalBlock(scope: !2448, file: !2, line: 152, column: 3)
!2455 = !DILocation(line: 153, column: 4, scope: !2454, inlinedAt: !2433)
!2456 = !DILocation(line: 153, column: 10, scope: !2454, inlinedAt: !2433)
!2457 = !DILocation(line: 154, column: 10, scope: !2454, inlinedAt: !2433)
!2458 = !DILocation(line: 156, column: 3, scope: !2448, inlinedAt: !2433)
!2459 = !DILocation(line: 157, column: 3, scope: !2448, inlinedAt: !2433)
!2460 = !DILocation(line: 158, column: 11, scope: !2448, inlinedAt: !2433)
!2461 = !DILocation(line: 158, column: 17, scope: !2448, inlinedAt: !2433)
!2462 = !DILocation(line: 165, column: 33, scope: !2463, inlinedAt: !2464)
!2463 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2464 = !DILocation(line: 160, column: 2, scope: !2441, inlinedAt: !2433)
!2465 = !DILocation(line: 165, column: 2, scope: !2463, inlinedAt: !2464)
!2466 = !DILocation(line: 167, column: 2, scope: !2463, inlinedAt: !2464)
!2467 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg128Random.next_int128", scope: !82, file: !82, line: 36, type: !2468, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2468 = !DISubroutineType(types: !2469)
!2469 = !{!25, !2401}
!2470 = !DILocation(line: 36, column: 56, scope: !2467)
!2471 = !DILocalVariable(name: "self", arg: 1, scope: !2467, file: !82, line: 36, type: !2401)
!2472 = !DILocation(line: 36, column: 37, scope: !2467)
!2473 = !DILocation(line: 36, column: 72, scope: !2474, inlinedAt: !2470)
!2474 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2475 = !DILocation(line: 138, column: 46, scope: !2474, inlinedAt: !2470)
!2476 = !DILocation(line: 138, column: 72, scope: !2474, inlinedAt: !2470)
!2477 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg128Random.next_int", scope: !82, file: !82, line: 37, type: !2478, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2478 = !DISubroutineType(types: !2479)
!2479 = !{!21, !2401}
!2480 = !DILocation(line: 37, column: 50, scope: !2477)
!2481 = !DILocalVariable(name: "self", arg: 1, scope: !2477, file: !82, line: 37, type: !2401)
!2482 = !DILocation(line: 37, column: 31, scope: !2477)
!2483 = !DILocation(line: 37, column: 56, scope: !2477)
!2484 = !DILocation(line: 37, column: 51, scope: !2477)
!2485 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg128Random.next_short", scope: !82, file: !82, line: 38, type: !2486, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2486 = !DISubroutineType(types: !2487)
!2487 = !{!32, !2401}
!2488 = !DILocation(line: 38, column: 54, scope: !2485)
!2489 = !DILocalVariable(name: "self", arg: 1, scope: !2485, file: !82, line: 38, type: !2401)
!2490 = !DILocation(line: 38, column: 35, scope: !2485)
!2491 = !DILocation(line: 38, column: 62, scope: !2485)
!2492 = !DILocation(line: 38, column: 55, scope: !2485)
!2493 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg128Random.next_byte", scope: !82, file: !82, line: 39, type: !2494, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2494 = !DISubroutineType(types: !2495)
!2495 = !{!60, !2401}
!2496 = !DILocation(line: 39, column: 51, scope: !2493)
!2497 = !DILocalVariable(name: "self", arg: 1, scope: !2493, file: !82, line: 39, type: !2401)
!2498 = !DILocation(line: 39, column: 32, scope: !2493)
!2499 = !DILocation(line: 39, column: 57, scope: !2493)
!2500 = !DILocation(line: 39, column: 52, scope: !2493)
!2501 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg64Random.set_seed", scope: !82, file: !82, line: 45, type: !2502, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2502 = !DISubroutineType(types: !2503)
!2503 = !{null, !2504, !254}
!2504 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg64Random*", baseType: !2505, size: 64, align: 64, dwarfAddressSpace: 0)
!2505 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg64Random", scope: !82, file: !82, line: 43, baseType: !6, align: 8)
!2506 = !DILocation(line: 46, column: 1, scope: !2501)
!2507 = !DILocalVariable(name: "self", arg: 1, scope: !2501, file: !82, line: 45, type: !2504)
!2508 = !DILocation(line: 45, column: 30, scope: !2501)
!2509 = !DILocalVariable(name: "seed", arg: 2, scope: !2501, file: !82, line: 45, type: !254)
!2510 = !DILocation(line: 45, column: 44, scope: !2501)
!2511 = !DILocation(line: 47, column: 3, scope: !2501)
!2512 = !DILocalVariable(name: "return_value", scope: !2513, file: !82, line: 10, type: !6, align: 8)
!2513 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2514 = !DILocation(line: 10, column: 8, scope: !2513, inlinedAt: !2515)
!2515 = !DILocation(line: 47, column: 11, scope: !2501)
!2516 = !DILocation(line: 11, column: 2, scope: !2513, inlinedAt: !2515)
!2517 = !DILocation(line: 12, column: 9, scope: !2513, inlinedAt: !2515)
!2518 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg64Random.next_int", scope: !82, file: !82, line: 51, type: !2519, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2519 = !DISubroutineType(types: !2520)
!2520 = !{!21, !2504}
!2521 = !DILocation(line: 52, column: 1, scope: !2518)
!2522 = !DILocalVariable(name: "self", arg: 1, scope: !2518, file: !82, line: 51, type: !2504)
!2523 = !DILocation(line: 51, column: 30, scope: !2518)
!2524 = !DILocalVariable(name: "s", scope: !2518, file: !82, line: 53, type: !313, align: 8)
!2525 = !DILocation(line: 53, column: 9, scope: !2518)
!2526 = !DILocation(line: 53, column: 21, scope: !2518)
!2527 = !DILocalVariable(name: "result", scope: !2518, file: !82, line: 54, type: !21, align: 4)
!2528 = !DILocation(line: 54, column: 7, scope: !2518)
!2529 = !DILocation(line: 54, column: 24, scope: !2518)
!2530 = !DILocation(line: 54, column: 17, scope: !2518)
!2531 = !DILocation(line: 55, column: 3, scope: !2518)
!2532 = !DILocation(line: 55, column: 8, scope: !2518)
!2533 = !DILocation(line: 55, column: 7, scope: !2518)
!2534 = !DILocation(line: 56, column: 9, scope: !2518)
!2535 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg64Random.next_bytes", scope: !82, file: !82, line: 62, type: !2502, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2536 = !DILocation(line: 62, column: 65, scope: !2535)
!2537 = !DILocalVariable(name: "self", arg: 1, scope: !2535, file: !82, line: 62, type: !2504)
!2538 = !DILocation(line: 62, column: 32, scope: !2535)
!2539 = !DILocalVariable(name: "bytes", arg: 2, scope: !2535, file: !82, line: 62, type: !254)
!2540 = !DILocation(line: 62, column: 46, scope: !2535)
!2541 = !DILocation(line: 60, column: 11, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2535, file: !82, line: 62, column: 65)
!2543 = !DILocalVariable(name: "len", scope: !2544, file: !82, line: 146, type: !259, align: 8)
!2544 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2545 = !DILocation(line: 146, column: 6, scope: !2544, inlinedAt: !2536)
!2546 = !DILocation(line: 146, column: 12, scope: !2544, inlinedAt: !2536)
!2547 = !DILocation(line: 148, column: 2, scope: !2544, inlinedAt: !2536)
!2548 = !DILocation(line: 148, column: 9, scope: !2549, inlinedAt: !2536)
!2549 = distinct !DILexicalBlock(scope: !2544, file: !2, line: 148, column: 2)
!2550 = !DILocalVariable(name: "value", scope: !2551, file: !82, line: 150, type: !21, align: 4)
!2551 = distinct !DILexicalBlock(scope: !2549, file: !2, line: 149, column: 2)
!2552 = !DILocation(line: 150, column: 7, scope: !2551, inlinedAt: !2536)
!2553 = !DILocation(line: 62, column: 88, scope: !2551, inlinedAt: !2536)
!2554 = !DILocation(line: 150, column: 15, scope: !2551, inlinedAt: !2536)
!2555 = !DILocation(line: 151, column: 7, scope: !2551, inlinedAt: !2536)
!2556 = !DILocation(line: 153, column: 33, scope: !2557, inlinedAt: !2536)
!2557 = distinct !DILexicalBlock(scope: !2551, file: !2, line: 152, column: 3)
!2558 = !DILocation(line: 153, column: 4, scope: !2557, inlinedAt: !2536)
!2559 = !DILocation(line: 153, column: 10, scope: !2557, inlinedAt: !2536)
!2560 = !DILocation(line: 154, column: 10, scope: !2557, inlinedAt: !2536)
!2561 = !DILocation(line: 156, column: 3, scope: !2551, inlinedAt: !2536)
!2562 = !DILocation(line: 157, column: 3, scope: !2551, inlinedAt: !2536)
!2563 = !DILocation(line: 158, column: 11, scope: !2551, inlinedAt: !2536)
!2564 = !DILocation(line: 158, column: 17, scope: !2551, inlinedAt: !2536)
!2565 = !DILocation(line: 165, column: 33, scope: !2566, inlinedAt: !2567)
!2566 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2567 = !DILocation(line: 160, column: 2, scope: !2544, inlinedAt: !2536)
!2568 = !DILocation(line: 165, column: 2, scope: !2566, inlinedAt: !2567)
!2569 = !DILocation(line: 167, column: 2, scope: !2566, inlinedAt: !2567)
!2570 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg64Random.next_int128", scope: !82, file: !82, line: 63, type: !2571, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2571 = !DISubroutineType(types: !2572)
!2572 = !{!25, !2504}
!2573 = !DILocation(line: 63, column: 55, scope: !2570)
!2574 = !DILocalVariable(name: "self", arg: 1, scope: !2570, file: !82, line: 63, type: !2504)
!2575 = !DILocation(line: 63, column: 36, scope: !2570)
!2576 = !DILocation(line: 63, column: 71, scope: !2577, inlinedAt: !2573)
!2577 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2578 = !DILocation(line: 138, column: 46, scope: !2577, inlinedAt: !2573)
!2579 = !DILocation(line: 138, column: 72, scope: !2577, inlinedAt: !2573)
!2580 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg64Random.next_long", scope: !82, file: !82, line: 64, type: !2581, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2581 = !DISubroutineType(types: !2582)
!2582 = !{!6, !2504}
!2583 = !DILocation(line: 64, column: 51, scope: !2580)
!2584 = !DILocalVariable(name: "self", arg: 1, scope: !2580, file: !82, line: 64, type: !2504)
!2585 = !DILocation(line: 64, column: 32, scope: !2580)
!2586 = !DILocation(line: 64, column: 64, scope: !2587, inlinedAt: !2583)
!2587 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2588 = !DILocation(line: 139, column: 41, scope: !2587, inlinedAt: !2583)
!2589 = !DILocation(line: 139, column: 65, scope: !2587, inlinedAt: !2583)
!2590 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg64Random.next_short", scope: !82, file: !82, line: 65, type: !2591, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2591 = !DISubroutineType(types: !2592)
!2592 = !{!32, !2504}
!2593 = !DILocation(line: 65, column: 53, scope: !2590)
!2594 = !DILocalVariable(name: "self", arg: 1, scope: !2590, file: !82, line: 65, type: !2504)
!2595 = !DILocation(line: 65, column: 34, scope: !2590)
!2596 = !DILocation(line: 65, column: 61, scope: !2590)
!2597 = !DILocation(line: 65, column: 54, scope: !2590)
!2598 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg64Random.next_byte", scope: !82, file: !82, line: 66, type: !2599, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2599 = !DISubroutineType(types: !2600)
!2600 = !{!60, !2504}
!2601 = !DILocation(line: 66, column: 50, scope: !2598)
!2602 = !DILocalVariable(name: "self", arg: 1, scope: !2598, file: !82, line: 66, type: !2504)
!2603 = !DILocation(line: 66, column: 31, scope: !2598)
!2604 = !DILocation(line: 66, column: 56, scope: !2598)
!2605 = !DILocation(line: 66, column: 51, scope: !2598)
!2606 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg32Random.set_seed", scope: !82, file: !82, line: 72, type: !2607, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2607 = !DISubroutineType(types: !2608)
!2608 = !{null, !2609, !254}
!2609 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg32Random*", baseType: !2610, size: 64, align: 64, dwarfAddressSpace: 0)
!2610 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg32Random", scope: !82, file: !82, line: 70, baseType: !21, align: 4)
!2611 = !DILocation(line: 73, column: 1, scope: !2606)
!2612 = !DILocalVariable(name: "self", arg: 1, scope: !2606, file: !82, line: 72, type: !2609)
!2613 = !DILocation(line: 72, column: 30, scope: !2606)
!2614 = !DILocalVariable(name: "seed", arg: 2, scope: !2606, file: !82, line: 72, type: !254)
!2615 = !DILocation(line: 72, column: 44, scope: !2606)
!2616 = !DILocation(line: 74, column: 3, scope: !2606)
!2617 = !DILocalVariable(name: "return_value", scope: !2618, file: !82, line: 10, type: !21, align: 4)
!2618 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2619 = !DILocation(line: 10, column: 8, scope: !2618, inlinedAt: !2620)
!2620 = !DILocation(line: 74, column: 11, scope: !2606)
!2621 = !DILocation(line: 11, column: 2, scope: !2618, inlinedAt: !2620)
!2622 = !DILocation(line: 12, column: 9, scope: !2618, inlinedAt: !2620)
!2623 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg32Random.next_short", scope: !82, file: !82, line: 77, type: !2624, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2624 = !DISubroutineType(types: !2625)
!2625 = !{!32, !2609}
!2626 = !DILocation(line: 78, column: 1, scope: !2623)
!2627 = !DILocalVariable(name: "self", arg: 1, scope: !2623, file: !82, line: 77, type: !2609)
!2628 = !DILocation(line: 77, column: 34, scope: !2623)
!2629 = !DILocalVariable(name: "s", scope: !2623, file: !82, line: 79, type: !764, align: 8)
!2630 = !DILocation(line: 79, column: 8, scope: !2623)
!2631 = !DILocation(line: 79, column: 19, scope: !2623)
!2632 = !DILocalVariable(name: "result", scope: !2623, file: !82, line: 80, type: !32, align: 2)
!2633 = !DILocation(line: 80, column: 9, scope: !2623)
!2634 = !DILocation(line: 80, column: 28, scope: !2623)
!2635 = !DILocation(line: 80, column: 19, scope: !2623)
!2636 = !DILocation(line: 81, column: 3, scope: !2623)
!2637 = !DILocation(line: 81, column: 8, scope: !2623)
!2638 = !DILocation(line: 81, column: 7, scope: !2623)
!2639 = !DILocation(line: 82, column: 9, scope: !2623)
!2640 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg32Random.next_bytes", scope: !82, file: !82, line: 85, type: !2607, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2641 = !DILocation(line: 85, column: 65, scope: !2640)
!2642 = !DILocalVariable(name: "self", arg: 1, scope: !2640, file: !82, line: 85, type: !2609)
!2643 = !DILocation(line: 85, column: 32, scope: !2640)
!2644 = !DILocalVariable(name: "bytes", arg: 2, scope: !2640, file: !82, line: 85, type: !254)
!2645 = !DILocation(line: 85, column: 46, scope: !2640)
!2646 = !DILocalVariable(name: "len", scope: !2647, file: !82, line: 146, type: !259, align: 8)
!2647 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2648 = !DILocation(line: 146, column: 6, scope: !2647, inlinedAt: !2641)
!2649 = !DILocation(line: 146, column: 12, scope: !2647, inlinedAt: !2641)
!2650 = !DILocation(line: 148, column: 2, scope: !2647, inlinedAt: !2641)
!2651 = !DILocation(line: 148, column: 9, scope: !2652, inlinedAt: !2641)
!2652 = distinct !DILexicalBlock(scope: !2647, file: !2, line: 148, column: 2)
!2653 = !DILocalVariable(name: "value", scope: !2654, file: !82, line: 150, type: !32, align: 2)
!2654 = distinct !DILexicalBlock(scope: !2652, file: !2, line: 149, column: 2)
!2655 = !DILocation(line: 150, column: 7, scope: !2654, inlinedAt: !2641)
!2656 = !DILocation(line: 85, column: 88, scope: !2654, inlinedAt: !2641)
!2657 = !DILocation(line: 150, column: 15, scope: !2654, inlinedAt: !2641)
!2658 = !DILocation(line: 151, column: 7, scope: !2654, inlinedAt: !2641)
!2659 = !DILocation(line: 153, column: 33, scope: !2660, inlinedAt: !2641)
!2660 = distinct !DILexicalBlock(scope: !2654, file: !2, line: 152, column: 3)
!2661 = !DILocation(line: 153, column: 4, scope: !2660, inlinedAt: !2641)
!2662 = !DILocation(line: 153, column: 10, scope: !2660, inlinedAt: !2641)
!2663 = !DILocation(line: 154, column: 10, scope: !2660, inlinedAt: !2641)
!2664 = !DILocation(line: 156, column: 3, scope: !2654, inlinedAt: !2641)
!2665 = !DILocation(line: 157, column: 3, scope: !2654, inlinedAt: !2641)
!2666 = !DILocation(line: 158, column: 11, scope: !2654, inlinedAt: !2641)
!2667 = !DILocation(line: 158, column: 17, scope: !2654, inlinedAt: !2641)
!2668 = !DILocation(line: 165, column: 33, scope: !2669, inlinedAt: !2670)
!2669 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2670 = !DILocation(line: 160, column: 2, scope: !2647, inlinedAt: !2641)
!2671 = !DILocation(line: 165, column: 2, scope: !2669, inlinedAt: !2670)
!2672 = !DILocation(line: 167, column: 2, scope: !2669, inlinedAt: !2670)
!2673 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg32Random.next_int128", scope: !82, file: !82, line: 86, type: !2674, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2674 = !DISubroutineType(types: !2675)
!2675 = !{!25, !2609}
!2676 = !DILocation(line: 86, column: 55, scope: !2673)
!2677 = !DILocalVariable(name: "self", arg: 1, scope: !2673, file: !82, line: 86, type: !2609)
!2678 = !DILocation(line: 86, column: 36, scope: !2673)
!2679 = !DILocation(line: 86, column: 71, scope: !2680, inlinedAt: !2676)
!2680 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2681 = !DILocation(line: 138, column: 46, scope: !2680, inlinedAt: !2676)
!2682 = !DILocation(line: 138, column: 72, scope: !2680, inlinedAt: !2676)
!2683 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg32Random.next_long", scope: !82, file: !82, line: 87, type: !2684, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2684 = !DISubroutineType(types: !2685)
!2685 = !{!6, !2609}
!2686 = !DILocation(line: 87, column: 51, scope: !2683)
!2687 = !DILocalVariable(name: "self", arg: 1, scope: !2683, file: !82, line: 87, type: !2609)
!2688 = !DILocation(line: 87, column: 32, scope: !2683)
!2689 = !DILocation(line: 87, column: 64, scope: !2690, inlinedAt: !2686)
!2690 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2691 = !DILocation(line: 139, column: 41, scope: !2690, inlinedAt: !2686)
!2692 = !DILocation(line: 139, column: 65, scope: !2690, inlinedAt: !2686)
!2693 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg32Random.next_int", scope: !82, file: !82, line: 88, type: !2694, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2694 = !DISubroutineType(types: !2695)
!2695 = !{!21, !2609}
!2696 = !DILocation(line: 88, column: 49, scope: !2693)
!2697 = !DILocalVariable(name: "self", arg: 1, scope: !2693, file: !82, line: 88, type: !2609)
!2698 = !DILocation(line: 88, column: 30, scope: !2693)
!2699 = !DILocation(line: 88, column: 63, scope: !2700, inlinedAt: !2696)
!2700 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2701 = !DILocation(line: 140, column: 41, scope: !2700, inlinedAt: !2696)
!2702 = !DILocation(line: 140, column: 64, scope: !2700, inlinedAt: !2696)
!2703 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg32Random.next_byte", scope: !82, file: !82, line: 89, type: !2704, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2704 = !DISubroutineType(types: !2705)
!2705 = !{!60, !2609}
!2706 = !DILocation(line: 89, column: 50, scope: !2703)
!2707 = !DILocalVariable(name: "self", arg: 1, scope: !2703, file: !82, line: 89, type: !2609)
!2708 = !DILocation(line: 89, column: 31, scope: !2703)
!2709 = !DILocation(line: 89, column: 56, scope: !2703)
!2710 = !DILocation(line: 89, column: 51, scope: !2703)
!2711 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Lcg16Random.set_seed", scope: !82, file: !82, line: 95, type: !2712, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2712 = !DISubroutineType(types: !2713)
!2713 = !{null, !2714, !254}
!2714 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Lcg16Random*", baseType: !2715, size: 64, align: 64, dwarfAddressSpace: 0)
!2715 = !DIDerivedType(tag: DW_TAG_typedef, name: "Lcg16Random", scope: !82, file: !82, line: 93, baseType: !32, align: 2)
!2716 = !DILocation(line: 96, column: 1, scope: !2711)
!2717 = !DILocalVariable(name: "self", arg: 1, scope: !2711, file: !82, line: 95, type: !2714)
!2718 = !DILocation(line: 95, column: 30, scope: !2711)
!2719 = !DILocalVariable(name: "seed", arg: 2, scope: !2711, file: !82, line: 95, type: !254)
!2720 = !DILocation(line: 95, column: 44, scope: !2711)
!2721 = !DILocation(line: 97, column: 3, scope: !2711)
!2722 = !DILocalVariable(name: "return_value", scope: !2723, file: !82, line: 10, type: !32, align: 2)
!2723 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2724 = !DILocation(line: 10, column: 8, scope: !2723, inlinedAt: !2725)
!2725 = !DILocation(line: 97, column: 11, scope: !2711)
!2726 = !DILocation(line: 11, column: 2, scope: !2723, inlinedAt: !2725)
!2727 = !DILocation(line: 12, column: 9, scope: !2723, inlinedAt: !2725)
!2728 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Lcg16Random.next_byte", scope: !82, file: !82, line: 100, type: !2729, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{!60, !2714}
!2731 = !DILocation(line: 101, column: 1, scope: !2728)
!2732 = !DILocalVariable(name: "self", arg: 1, scope: !2728, file: !82, line: 100, type: !2714)
!2733 = !DILocation(line: 100, column: 31, scope: !2728)
!2734 = !DILocalVariable(name: "s", scope: !2728, file: !82, line: 102, type: !884, align: 8)
!2735 = !DILocation(line: 102, column: 10, scope: !2728)
!2736 = !DILocation(line: 102, column: 23, scope: !2728)
!2737 = !DILocalVariable(name: "result", scope: !2728, file: !82, line: 103, type: !60, align: 1)
!2738 = !DILocation(line: 103, column: 7, scope: !2728)
!2739 = !DILocation(line: 103, column: 24, scope: !2728)
!2740 = !DILocation(line: 103, column: 17, scope: !2728)
!2741 = !DILocation(line: 104, column: 3, scope: !2728)
!2742 = !DILocation(line: 104, column: 8, scope: !2728)
!2743 = !DILocation(line: 104, column: 7, scope: !2728)
!2744 = !DILocation(line: 105, column: 9, scope: !2728)
!2745 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Lcg16Random.next_bytes", scope: !82, file: !82, line: 108, type: !2712, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2746 = !DILocation(line: 108, column: 65, scope: !2745)
!2747 = !DILocalVariable(name: "self", arg: 1, scope: !2745, file: !82, line: 108, type: !2714)
!2748 = !DILocation(line: 108, column: 32, scope: !2745)
!2749 = !DILocalVariable(name: "bytes", arg: 2, scope: !2745, file: !82, line: 108, type: !254)
!2750 = !DILocation(line: 108, column: 46, scope: !2745)
!2751 = !DILocalVariable(name: "len", scope: !2752, file: !82, line: 146, type: !259, align: 8)
!2752 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2753 = !DILocation(line: 146, column: 6, scope: !2752, inlinedAt: !2746)
!2754 = !DILocation(line: 146, column: 12, scope: !2752, inlinedAt: !2746)
!2755 = !DILocation(line: 148, column: 2, scope: !2752, inlinedAt: !2746)
!2756 = !DILocation(line: 148, column: 9, scope: !2757, inlinedAt: !2746)
!2757 = distinct !DILexicalBlock(scope: !2752, file: !2, line: 148, column: 2)
!2758 = !DILocalVariable(name: "value", scope: !2759, file: !82, line: 150, type: !60, align: 1)
!2759 = distinct !DILexicalBlock(scope: !2757, file: !2, line: 149, column: 2)
!2760 = !DILocation(line: 150, column: 7, scope: !2759, inlinedAt: !2746)
!2761 = !DILocation(line: 108, column: 88, scope: !2759, inlinedAt: !2746)
!2762 = !DILocation(line: 150, column: 15, scope: !2759, inlinedAt: !2746)
!2763 = !DILocation(line: 151, column: 7, scope: !2759, inlinedAt: !2746)
!2764 = !DILocation(line: 153, column: 33, scope: !2765, inlinedAt: !2746)
!2765 = distinct !DILexicalBlock(scope: !2759, file: !2, line: 152, column: 3)
!2766 = !DILocation(line: 153, column: 4, scope: !2765, inlinedAt: !2746)
!2767 = !DILocation(line: 153, column: 10, scope: !2765, inlinedAt: !2746)
!2768 = !DILocation(line: 154, column: 10, scope: !2765, inlinedAt: !2746)
!2769 = !DILocation(line: 156, column: 3, scope: !2759, inlinedAt: !2746)
!2770 = !DILocation(line: 157, column: 3, scope: !2759, inlinedAt: !2746)
!2771 = !DILocation(line: 158, column: 11, scope: !2759, inlinedAt: !2746)
!2772 = !DILocation(line: 158, column: 17, scope: !2759, inlinedAt: !2746)
!2773 = !DILocation(line: 165, column: 33, scope: !2774, inlinedAt: !2775)
!2774 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2775 = !DILocation(line: 160, column: 2, scope: !2752, inlinedAt: !2746)
!2776 = !DILocation(line: 165, column: 2, scope: !2774, inlinedAt: !2775)
!2777 = !DILocation(line: 167, column: 2, scope: !2774, inlinedAt: !2775)
!2778 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Lcg16Random.next_int128", scope: !82, file: !82, line: 109, type: !2779, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2779 = !DISubroutineType(types: !2780)
!2780 = !{!25, !2714}
!2781 = !DILocation(line: 109, column: 55, scope: !2778)
!2782 = !DILocalVariable(name: "self", arg: 1, scope: !2778, file: !82, line: 109, type: !2714)
!2783 = !DILocation(line: 109, column: 36, scope: !2778)
!2784 = !DILocation(line: 109, column: 71, scope: !2785, inlinedAt: !2781)
!2785 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2786 = !DILocation(line: 138, column: 46, scope: !2785, inlinedAt: !2781)
!2787 = !DILocation(line: 138, column: 72, scope: !2785, inlinedAt: !2781)
!2788 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Lcg16Random.next_long", scope: !82, file: !82, line: 110, type: !2789, scopeLine: 110, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2789 = !DISubroutineType(types: !2790)
!2790 = !{!6, !2714}
!2791 = !DILocation(line: 110, column: 51, scope: !2788)
!2792 = !DILocalVariable(name: "self", arg: 1, scope: !2788, file: !82, line: 110, type: !2714)
!2793 = !DILocation(line: 110, column: 32, scope: !2788)
!2794 = !DILocation(line: 110, column: 64, scope: !2795, inlinedAt: !2791)
!2795 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2796 = !DILocation(line: 139, column: 41, scope: !2795, inlinedAt: !2791)
!2797 = !DILocation(line: 139, column: 65, scope: !2795, inlinedAt: !2791)
!2798 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Lcg16Random.next_int", scope: !82, file: !82, line: 111, type: !2799, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2799 = !DISubroutineType(types: !2800)
!2800 = !{!21, !2714}
!2801 = !DILocation(line: 111, column: 49, scope: !2798)
!2802 = !DILocalVariable(name: "self", arg: 1, scope: !2798, file: !82, line: 111, type: !2714)
!2803 = !DILocation(line: 111, column: 30, scope: !2798)
!2804 = !DILocation(line: 111, column: 63, scope: !2805, inlinedAt: !2801)
!2805 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2806 = !DILocation(line: 140, column: 41, scope: !2805, inlinedAt: !2801)
!2807 = !DILocation(line: 140, column: 64, scope: !2805, inlinedAt: !2801)
!2808 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Lcg16Random.next_short", scope: !82, file: !82, line: 112, type: !2809, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{!32, !2714}
!2811 = !DILocation(line: 112, column: 53, scope: !2808)
!2812 = !DILocalVariable(name: "self", arg: 1, scope: !2808, file: !82, line: 112, type: !2714)
!2813 = !DILocation(line: 112, column: 34, scope: !2808)
!2814 = !DILocation(line: 112, column: 68, scope: !2815, inlinedAt: !2811)
!2815 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2816 = !DILocation(line: 141, column: 44, scope: !2815, inlinedAt: !2811)
!2817 = !DILocation(line: 141, column: 68, scope: !2815, inlinedAt: !2811)
!2818 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg128Random.set_seed", scope: !99, file: !99, line: 12, type: !2819, scopeLine: 12, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2819 = !DISubroutineType(types: !2820)
!2820 = !{null, !2821, !254}
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg128Random*", baseType: !2822, size: 64, align: 64, dwarfAddressSpace: 0)
!2822 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg128Random", scope: !99, file: !99, line: 10, baseType: !25, align: 16)
!2823 = !DILocation(line: 13, column: 1, scope: !2818)
!2824 = !DILocalVariable(name: "self", arg: 1, scope: !2818, file: !99, line: 12, type: !2821)
!2825 = !DILocation(line: 12, column: 31, scope: !2818)
!2826 = !DILocalVariable(name: "seed", arg: 2, scope: !2818, file: !99, line: 12, type: !254)
!2827 = !DILocation(line: 12, column: 45, scope: !2818)
!2828 = !DILocation(line: 14, column: 3, scope: !2818)
!2829 = !DILocalVariable(name: "return_value", scope: !2830, file: !99, line: 10, type: !25, align: 16)
!2830 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2831 = !DILocation(line: 10, column: 8, scope: !2830, inlinedAt: !2832)
!2832 = !DILocation(line: 14, column: 25, scope: !2818)
!2833 = !DILocation(line: 11, column: 2, scope: !2830, inlinedAt: !2832)
!2834 = !DILocation(line: 12, column: 9, scope: !2830, inlinedAt: !2832)
!2835 = !DILocation(line: 14, column: 11, scope: !2818)
!2836 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg128Random.next_bytes", scope: !99, file: !99, line: 20, type: !2819, scopeLine: 20, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2837 = !DILocation(line: 21, column: 1, scope: !2836)
!2838 = !DILocalVariable(name: "self", arg: 1, scope: !2836, file: !99, line: 20, type: !2821)
!2839 = !DILocation(line: 20, column: 33, scope: !2836)
!2840 = !DILocalVariable(name: "bytes", arg: 2, scope: !2836, file: !99, line: 20, type: !254)
!2841 = !DILocation(line: 20, column: 47, scope: !2836)
!2842 = !DILocation(line: 18, column: 11, scope: !2843)
!2843 = distinct !DILexicalBlock(scope: !2836, file: !99, line: 21, column: 1)
!2844 = !DILocalVariable(name: "len", scope: !2845, file: !99, line: 146, type: !259, align: 8)
!2845 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2846 = !DILocation(line: 146, column: 6, scope: !2845, inlinedAt: !2847)
!2847 = !DILocation(line: 22, column: 2, scope: !2836)
!2848 = !DILocation(line: 146, column: 12, scope: !2845, inlinedAt: !2847)
!2849 = !DILocation(line: 148, column: 2, scope: !2845, inlinedAt: !2847)
!2850 = !DILocation(line: 148, column: 9, scope: !2851, inlinedAt: !2847)
!2851 = distinct !DILexicalBlock(scope: !2845, file: !2, line: 148, column: 2)
!2852 = !DILocalVariable(name: "value", scope: !2853, file: !99, line: 150, type: !6, align: 8)
!2853 = distinct !DILexicalBlock(scope: !2851, file: !2, line: 149, column: 2)
!2854 = !DILocation(line: 150, column: 7, scope: !2853, inlinedAt: !2847)
!2855 = !DILocation(line: 22, column: 25, scope: !2853, inlinedAt: !2847)
!2856 = !DILocation(line: 150, column: 15, scope: !2853, inlinedAt: !2847)
!2857 = !DILocation(line: 151, column: 7, scope: !2853, inlinedAt: !2847)
!2858 = !DILocation(line: 153, column: 33, scope: !2859, inlinedAt: !2847)
!2859 = distinct !DILexicalBlock(scope: !2853, file: !2, line: 152, column: 3)
!2860 = !DILocation(line: 153, column: 4, scope: !2859, inlinedAt: !2847)
!2861 = !DILocation(line: 153, column: 10, scope: !2859, inlinedAt: !2847)
!2862 = !DILocation(line: 154, column: 10, scope: !2859, inlinedAt: !2847)
!2863 = !DILocation(line: 156, column: 3, scope: !2853, inlinedAt: !2847)
!2864 = !DILocation(line: 157, column: 3, scope: !2853, inlinedAt: !2847)
!2865 = !DILocation(line: 158, column: 11, scope: !2853, inlinedAt: !2847)
!2866 = !DILocation(line: 158, column: 17, scope: !2853, inlinedAt: !2847)
!2867 = !DILocation(line: 165, column: 33, scope: !2868, inlinedAt: !2869)
!2868 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2869 = !DILocation(line: 160, column: 2, scope: !2845, inlinedAt: !2847)
!2870 = !DILocation(line: 165, column: 2, scope: !2868, inlinedAt: !2869)
!2871 = !DILocation(line: 167, column: 2, scope: !2868, inlinedAt: !2869)
!2872 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg128Random.next_long", scope: !99, file: !99, line: 25, type: !2873, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2873 = !DISubroutineType(types: !2874)
!2874 = !{!6, !2821}
!2875 = !DILocation(line: 26, column: 1, scope: !2872)
!2876 = !DILocalVariable(name: "self", arg: 1, scope: !2872, file: !99, line: 25, type: !2821)
!2877 = !DILocation(line: 25, column: 33, scope: !2872)
!2878 = !DILocalVariable(name: "s", scope: !2872, file: !99, line: 27, type: !531, align: 8)
!2879 = !DILocation(line: 27, column: 11, scope: !2872)
!2880 = !DILocation(line: 27, column: 25, scope: !2872)
!2881 = !DILocalVariable(name: "result", scope: !2872, file: !99, line: 28, type: !6, align: 8)
!2882 = !DILocation(line: 28, column: 8, scope: !2872)
!2883 = !DILocation(line: 28, column: 26, scope: !2872)
!2884 = !DILocation(line: 28, column: 18, scope: !2872)
!2885 = !DILocation(line: 29, column: 3, scope: !2872)
!2886 = !DILocation(line: 29, column: 2, scope: !2872)
!2887 = !DILocation(line: 30, column: 9, scope: !2872)
!2888 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg128Random.next_int128", scope: !99, file: !99, line: 33, type: !2889, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2889 = !DISubroutineType(types: !2890)
!2890 = !{!25, !2821}
!2891 = !DILocation(line: 33, column: 56, scope: !2888)
!2892 = !DILocalVariable(name: "self", arg: 1, scope: !2888, file: !99, line: 33, type: !2821)
!2893 = !DILocation(line: 33, column: 37, scope: !2888)
!2894 = !DILocation(line: 33, column: 72, scope: !2895, inlinedAt: !2891)
!2895 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2896 = !DILocation(line: 138, column: 46, scope: !2895, inlinedAt: !2891)
!2897 = !DILocation(line: 138, column: 72, scope: !2895, inlinedAt: !2891)
!2898 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg128Random.next_int", scope: !99, file: !99, line: 34, type: !2899, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2899 = !DISubroutineType(types: !2900)
!2900 = !{!21, !2821}
!2901 = !DILocation(line: 34, column: 50, scope: !2898)
!2902 = !DILocalVariable(name: "self", arg: 1, scope: !2898, file: !99, line: 34, type: !2821)
!2903 = !DILocation(line: 34, column: 31, scope: !2898)
!2904 = !DILocation(line: 34, column: 56, scope: !2898)
!2905 = !DILocation(line: 34, column: 51, scope: !2898)
!2906 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg128Random.next_short", scope: !99, file: !99, line: 35, type: !2907, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2907 = !DISubroutineType(types: !2908)
!2908 = !{!32, !2821}
!2909 = !DILocation(line: 35, column: 54, scope: !2906)
!2910 = !DILocalVariable(name: "self", arg: 1, scope: !2906, file: !99, line: 35, type: !2821)
!2911 = !DILocation(line: 35, column: 35, scope: !2906)
!2912 = !DILocation(line: 35, column: 62, scope: !2906)
!2913 = !DILocation(line: 35, column: 55, scope: !2906)
!2914 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg128Random.next_byte", scope: !99, file: !99, line: 36, type: !2915, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2915 = !DISubroutineType(types: !2916)
!2916 = !{!60, !2821}
!2917 = !DILocation(line: 36, column: 51, scope: !2914)
!2918 = !DILocalVariable(name: "self", arg: 1, scope: !2914, file: !99, line: 36, type: !2821)
!2919 = !DILocation(line: 36, column: 32, scope: !2914)
!2920 = !DILocation(line: 36, column: 57, scope: !2914)
!2921 = !DILocation(line: 36, column: 52, scope: !2914)
!2922 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg64Random.set_seed", scope: !99, file: !99, line: 45, type: !2923, scopeLine: 45, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2923 = !DISubroutineType(types: !2924)
!2924 = !{null, !2925, !254}
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg64Random*", baseType: !2926, size: 64, align: 64, dwarfAddressSpace: 0)
!2926 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg64Random", scope: !99, file: !99, line: 43, baseType: !6, align: 8)
!2927 = !DILocation(line: 46, column: 1, scope: !2922)
!2928 = !DILocalVariable(name: "self", arg: 1, scope: !2922, file: !99, line: 45, type: !2925)
!2929 = !DILocation(line: 45, column: 30, scope: !2922)
!2930 = !DILocalVariable(name: "seed", arg: 2, scope: !2922, file: !99, line: 45, type: !254)
!2931 = !DILocation(line: 45, column: 44, scope: !2922)
!2932 = !DILocation(line: 47, column: 3, scope: !2922)
!2933 = !DILocalVariable(name: "return_value", scope: !2934, file: !99, line: 10, type: !6, align: 8)
!2934 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2935 = !DILocation(line: 10, column: 8, scope: !2934, inlinedAt: !2936)
!2936 = !DILocation(line: 47, column: 11, scope: !2922)
!2937 = !DILocation(line: 11, column: 2, scope: !2934, inlinedAt: !2936)
!2938 = !DILocation(line: 12, column: 9, scope: !2934, inlinedAt: !2936)
!2939 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg64Random.next_bytes", scope: !99, file: !99, line: 53, type: !2923, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2940 = !DILocation(line: 54, column: 1, scope: !2939)
!2941 = !DILocalVariable(name: "self", arg: 1, scope: !2939, file: !99, line: 53, type: !2925)
!2942 = !DILocation(line: 53, column: 32, scope: !2939)
!2943 = !DILocalVariable(name: "bytes", arg: 2, scope: !2939, file: !99, line: 53, type: !254)
!2944 = !DILocation(line: 53, column: 46, scope: !2939)
!2945 = !DILocation(line: 51, column: 11, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2939, file: !99, line: 54, column: 1)
!2947 = !DILocalVariable(name: "len", scope: !2948, file: !99, line: 146, type: !259, align: 8)
!2948 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2949 = !DILocation(line: 146, column: 6, scope: !2948, inlinedAt: !2950)
!2950 = !DILocation(line: 55, column: 2, scope: !2939)
!2951 = !DILocation(line: 146, column: 12, scope: !2948, inlinedAt: !2950)
!2952 = !DILocation(line: 148, column: 2, scope: !2948, inlinedAt: !2950)
!2953 = !DILocation(line: 148, column: 9, scope: !2954, inlinedAt: !2950)
!2954 = distinct !DILexicalBlock(scope: !2948, file: !2, line: 148, column: 2)
!2955 = !DILocalVariable(name: "value", scope: !2956, file: !99, line: 150, type: !21, align: 4)
!2956 = distinct !DILexicalBlock(scope: !2954, file: !2, line: 149, column: 2)
!2957 = !DILocation(line: 150, column: 7, scope: !2956, inlinedAt: !2950)
!2958 = !DILocation(line: 55, column: 25, scope: !2956, inlinedAt: !2950)
!2959 = !DILocation(line: 150, column: 15, scope: !2956, inlinedAt: !2950)
!2960 = !DILocation(line: 151, column: 7, scope: !2956, inlinedAt: !2950)
!2961 = !DILocation(line: 153, column: 33, scope: !2962, inlinedAt: !2950)
!2962 = distinct !DILexicalBlock(scope: !2956, file: !2, line: 152, column: 3)
!2963 = !DILocation(line: 153, column: 4, scope: !2962, inlinedAt: !2950)
!2964 = !DILocation(line: 153, column: 10, scope: !2962, inlinedAt: !2950)
!2965 = !DILocation(line: 154, column: 10, scope: !2962, inlinedAt: !2950)
!2966 = !DILocation(line: 156, column: 3, scope: !2956, inlinedAt: !2950)
!2967 = !DILocation(line: 157, column: 3, scope: !2956, inlinedAt: !2950)
!2968 = !DILocation(line: 158, column: 11, scope: !2956, inlinedAt: !2950)
!2969 = !DILocation(line: 158, column: 17, scope: !2956, inlinedAt: !2950)
!2970 = !DILocation(line: 165, column: 33, scope: !2971, inlinedAt: !2972)
!2971 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2972 = !DILocation(line: 160, column: 2, scope: !2948, inlinedAt: !2950)
!2973 = !DILocation(line: 165, column: 2, scope: !2971, inlinedAt: !2972)
!2974 = !DILocation(line: 167, column: 2, scope: !2971, inlinedAt: !2972)
!2975 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg64Random.next_int", scope: !99, file: !99, line: 58, type: !2976, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2976 = !DISubroutineType(types: !2977)
!2977 = !{!21, !2925}
!2978 = !DILocation(line: 59, column: 1, scope: !2975)
!2979 = !DILocalVariable(name: "self", arg: 1, scope: !2975, file: !99, line: 58, type: !2925)
!2980 = !DILocation(line: 58, column: 30, scope: !2975)
!2981 = !DILocalVariable(name: "s", scope: !2975, file: !99, line: 60, type: !313, align: 8)
!2982 = !DILocation(line: 60, column: 9, scope: !2975)
!2983 = !DILocation(line: 60, column: 21, scope: !2975)
!2984 = !DILocalVariable(name: "result", scope: !2975, file: !99, line: 61, type: !21, align: 4)
!2985 = !DILocation(line: 61, column: 7, scope: !2975)
!2986 = !DILocation(line: 61, column: 24, scope: !2975)
!2987 = !DILocation(line: 61, column: 17, scope: !2975)
!2988 = !DILocation(line: 62, column: 3, scope: !2975)
!2989 = !DILocation(line: 62, column: 2, scope: !2975)
!2990 = !DILocation(line: 63, column: 9, scope: !2975)
!2991 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg64Random.next_int128", scope: !99, file: !99, line: 66, type: !2992, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!2992 = !DISubroutineType(types: !2993)
!2993 = !{!25, !2925}
!2994 = !DILocation(line: 66, column: 55, scope: !2991)
!2995 = !DILocalVariable(name: "self", arg: 1, scope: !2991, file: !99, line: 66, type: !2925)
!2996 = !DILocation(line: 66, column: 36, scope: !2991)
!2997 = !DILocation(line: 66, column: 71, scope: !2998, inlinedAt: !2994)
!2998 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!2999 = !DILocation(line: 138, column: 46, scope: !2998, inlinedAt: !2994)
!3000 = !DILocation(line: 138, column: 72, scope: !2998, inlinedAt: !2994)
!3001 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg64Random.next_long", scope: !99, file: !99, line: 67, type: !3002, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3002 = !DISubroutineType(types: !3003)
!3003 = !{!6, !2925}
!3004 = !DILocation(line: 67, column: 51, scope: !3001)
!3005 = !DILocalVariable(name: "self", arg: 1, scope: !3001, file: !99, line: 67, type: !2925)
!3006 = !DILocation(line: 67, column: 32, scope: !3001)
!3007 = !DILocation(line: 67, column: 64, scope: !3008, inlinedAt: !3004)
!3008 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3009 = !DILocation(line: 139, column: 41, scope: !3008, inlinedAt: !3004)
!3010 = !DILocation(line: 139, column: 65, scope: !3008, inlinedAt: !3004)
!3011 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg64Random.next_short", scope: !99, file: !99, line: 68, type: !3012, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3012 = !DISubroutineType(types: !3013)
!3013 = !{!32, !2925}
!3014 = !DILocation(line: 68, column: 53, scope: !3011)
!3015 = !DILocalVariable(name: "self", arg: 1, scope: !3011, file: !99, line: 68, type: !2925)
!3016 = !DILocation(line: 68, column: 34, scope: !3011)
!3017 = !DILocation(line: 68, column: 61, scope: !3011)
!3018 = !DILocation(line: 68, column: 54, scope: !3011)
!3019 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg64Random.next_byte", scope: !99, file: !99, line: 69, type: !3020, scopeLine: 69, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3020 = !DISubroutineType(types: !3021)
!3021 = !{!60, !2925}
!3022 = !DILocation(line: 69, column: 50, scope: !3019)
!3023 = !DILocalVariable(name: "self", arg: 1, scope: !3019, file: !99, line: 69, type: !2925)
!3024 = !DILocation(line: 69, column: 31, scope: !3019)
!3025 = !DILocation(line: 69, column: 56, scope: !3019)
!3026 = !DILocation(line: 69, column: 51, scope: !3019)
!3027 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg32Random.set_seed", scope: !99, file: !99, line: 76, type: !3028, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3028 = !DISubroutineType(types: !3029)
!3029 = !{null, !3030, !254}
!3030 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg32Random*", baseType: !3031, size: 64, align: 64, dwarfAddressSpace: 0)
!3031 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg32Random", scope: !99, file: !99, line: 74, baseType: !21, align: 4)
!3032 = !DILocation(line: 77, column: 1, scope: !3027)
!3033 = !DILocalVariable(name: "self", arg: 1, scope: !3027, file: !99, line: 76, type: !3030)
!3034 = !DILocation(line: 76, column: 30, scope: !3027)
!3035 = !DILocalVariable(name: "seed", arg: 2, scope: !3027, file: !99, line: 76, type: !254)
!3036 = !DILocation(line: 76, column: 44, scope: !3027)
!3037 = !DILocation(line: 78, column: 3, scope: !3027)
!3038 = !DILocalVariable(name: "return_value", scope: !3039, file: !99, line: 10, type: !21, align: 4)
!3039 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3040 = !DILocation(line: 10, column: 8, scope: !3039, inlinedAt: !3041)
!3041 = !DILocation(line: 78, column: 11, scope: !3027)
!3042 = !DILocation(line: 11, column: 2, scope: !3039, inlinedAt: !3041)
!3043 = !DILocation(line: 12, column: 9, scope: !3039, inlinedAt: !3041)
!3044 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg32Random.next_short", scope: !99, file: !99, line: 81, type: !3045, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3045 = !DISubroutineType(types: !3046)
!3046 = !{!32, !3030}
!3047 = !DILocation(line: 82, column: 1, scope: !3044)
!3048 = !DILocalVariable(name: "self", arg: 1, scope: !3044, file: !99, line: 81, type: !3030)
!3049 = !DILocation(line: 81, column: 34, scope: !3044)
!3050 = !DILocalVariable(name: "s", scope: !3044, file: !99, line: 83, type: !764, align: 8)
!3051 = !DILocation(line: 83, column: 8, scope: !3044)
!3052 = !DILocation(line: 83, column: 19, scope: !3044)
!3053 = !DILocalVariable(name: "result", scope: !3044, file: !99, line: 84, type: !32, align: 2)
!3054 = !DILocation(line: 84, column: 9, scope: !3044)
!3055 = !DILocation(line: 84, column: 28, scope: !3044)
!3056 = !DILocation(line: 84, column: 19, scope: !3044)
!3057 = !DILocation(line: 85, column: 3, scope: !3044)
!3058 = !DILocation(line: 85, column: 2, scope: !3044)
!3059 = !DILocation(line: 86, column: 9, scope: !3044)
!3060 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg32Random.next_bytes", scope: !99, file: !99, line: 92, type: !3028, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3061 = !DILocation(line: 92, column: 65, scope: !3060)
!3062 = !DILocalVariable(name: "self", arg: 1, scope: !3060, file: !99, line: 92, type: !3030)
!3063 = !DILocation(line: 92, column: 32, scope: !3060)
!3064 = !DILocalVariable(name: "bytes", arg: 2, scope: !3060, file: !99, line: 92, type: !254)
!3065 = !DILocation(line: 92, column: 46, scope: !3060)
!3066 = !DILocation(line: 90, column: 11, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3060, file: !99, line: 92, column: 65)
!3068 = !DILocalVariable(name: "len", scope: !3069, file: !99, line: 146, type: !259, align: 8)
!3069 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3070 = !DILocation(line: 146, column: 6, scope: !3069, inlinedAt: !3061)
!3071 = !DILocation(line: 146, column: 12, scope: !3069, inlinedAt: !3061)
!3072 = !DILocation(line: 148, column: 2, scope: !3069, inlinedAt: !3061)
!3073 = !DILocation(line: 148, column: 9, scope: !3074, inlinedAt: !3061)
!3074 = distinct !DILexicalBlock(scope: !3069, file: !2, line: 148, column: 2)
!3075 = !DILocalVariable(name: "value", scope: !3076, file: !99, line: 150, type: !32, align: 2)
!3076 = distinct !DILexicalBlock(scope: !3074, file: !2, line: 149, column: 2)
!3077 = !DILocation(line: 150, column: 7, scope: !3076, inlinedAt: !3061)
!3078 = !DILocation(line: 92, column: 88, scope: !3076, inlinedAt: !3061)
!3079 = !DILocation(line: 150, column: 15, scope: !3076, inlinedAt: !3061)
!3080 = !DILocation(line: 151, column: 7, scope: !3076, inlinedAt: !3061)
!3081 = !DILocation(line: 153, column: 33, scope: !3082, inlinedAt: !3061)
!3082 = distinct !DILexicalBlock(scope: !3076, file: !2, line: 152, column: 3)
!3083 = !DILocation(line: 153, column: 4, scope: !3082, inlinedAt: !3061)
!3084 = !DILocation(line: 153, column: 10, scope: !3082, inlinedAt: !3061)
!3085 = !DILocation(line: 154, column: 10, scope: !3082, inlinedAt: !3061)
!3086 = !DILocation(line: 156, column: 3, scope: !3076, inlinedAt: !3061)
!3087 = !DILocation(line: 157, column: 3, scope: !3076, inlinedAt: !3061)
!3088 = !DILocation(line: 158, column: 11, scope: !3076, inlinedAt: !3061)
!3089 = !DILocation(line: 158, column: 17, scope: !3076, inlinedAt: !3061)
!3090 = !DILocation(line: 165, column: 33, scope: !3091, inlinedAt: !3092)
!3091 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3092 = !DILocation(line: 160, column: 2, scope: !3069, inlinedAt: !3061)
!3093 = !DILocation(line: 165, column: 2, scope: !3091, inlinedAt: !3092)
!3094 = !DILocation(line: 167, column: 2, scope: !3091, inlinedAt: !3092)
!3095 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg32Random.next_int128", scope: !99, file: !99, line: 93, type: !3096, scopeLine: 93, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3096 = !DISubroutineType(types: !3097)
!3097 = !{!25, !3030}
!3098 = !DILocation(line: 93, column: 55, scope: !3095)
!3099 = !DILocalVariable(name: "self", arg: 1, scope: !3095, file: !99, line: 93, type: !3030)
!3100 = !DILocation(line: 93, column: 36, scope: !3095)
!3101 = !DILocation(line: 93, column: 71, scope: !3102, inlinedAt: !3098)
!3102 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3103 = !DILocation(line: 138, column: 46, scope: !3102, inlinedAt: !3098)
!3104 = !DILocation(line: 138, column: 72, scope: !3102, inlinedAt: !3098)
!3105 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg32Random.next_long", scope: !99, file: !99, line: 94, type: !3106, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3106 = !DISubroutineType(types: !3107)
!3107 = !{!6, !3030}
!3108 = !DILocation(line: 94, column: 51, scope: !3105)
!3109 = !DILocalVariable(name: "self", arg: 1, scope: !3105, file: !99, line: 94, type: !3030)
!3110 = !DILocation(line: 94, column: 32, scope: !3105)
!3111 = !DILocation(line: 94, column: 64, scope: !3112, inlinedAt: !3108)
!3112 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3113 = !DILocation(line: 139, column: 41, scope: !3112, inlinedAt: !3108)
!3114 = !DILocation(line: 139, column: 65, scope: !3112, inlinedAt: !3108)
!3115 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg32Random.next_int", scope: !99, file: !99, line: 95, type: !3116, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3116 = !DISubroutineType(types: !3117)
!3117 = !{!21, !3030}
!3118 = !DILocation(line: 95, column: 49, scope: !3115)
!3119 = !DILocalVariable(name: "self", arg: 1, scope: !3115, file: !99, line: 95, type: !3030)
!3120 = !DILocation(line: 95, column: 30, scope: !3115)
!3121 = !DILocation(line: 95, column: 63, scope: !3122, inlinedAt: !3118)
!3122 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3123 = !DILocation(line: 140, column: 41, scope: !3122, inlinedAt: !3118)
!3124 = !DILocation(line: 140, column: 64, scope: !3122, inlinedAt: !3118)
!3125 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg32Random.next_byte", scope: !99, file: !99, line: 96, type: !3126, scopeLine: 96, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3126 = !DISubroutineType(types: !3127)
!3127 = !{!60, !3030}
!3128 = !DILocation(line: 96, column: 50, scope: !3125)
!3129 = !DILocalVariable(name: "self", arg: 1, scope: !3125, file: !99, line: 96, type: !3030)
!3130 = !DILocation(line: 96, column: 31, scope: !3125)
!3131 = !DILocation(line: 96, column: 56, scope: !3125)
!3132 = !DILocation(line: 96, column: 51, scope: !3125)
!3133 = distinct !DISubprogram(name: "set_seed", linkageName: "std.math.random.Mcg16Random.set_seed", scope: !99, file: !99, line: 102, type: !3134, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3134 = !DISubroutineType(types: !3135)
!3135 = !{null, !3136, !254}
!3136 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Mcg16Random*", baseType: !3137, size: 64, align: 64, dwarfAddressSpace: 0)
!3137 = !DIDerivedType(tag: DW_TAG_typedef, name: "Mcg16Random", scope: !99, file: !99, line: 100, baseType: !32, align: 2)
!3138 = !DILocation(line: 103, column: 1, scope: !3133)
!3139 = !DILocalVariable(name: "self", arg: 1, scope: !3133, file: !99, line: 102, type: !3136)
!3140 = !DILocation(line: 102, column: 30, scope: !3133)
!3141 = !DILocalVariable(name: "seed", arg: 2, scope: !3133, file: !99, line: 102, type: !254)
!3142 = !DILocation(line: 102, column: 44, scope: !3133)
!3143 = !DILocation(line: 104, column: 3, scope: !3133)
!3144 = !DILocalVariable(name: "return_value", scope: !3145, file: !99, line: 10, type: !32, align: 2)
!3145 = distinct !DISubprogram(name: "make_seed", linkageName: "make_seed", scope: !14, file: !14, line: 8, scopeLine: 8, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3146 = !DILocation(line: 10, column: 8, scope: !3145, inlinedAt: !3147)
!3147 = !DILocation(line: 104, column: 11, scope: !3133)
!3148 = !DILocation(line: 11, column: 2, scope: !3145, inlinedAt: !3147)
!3149 = !DILocation(line: 12, column: 9, scope: !3145, inlinedAt: !3147)
!3150 = distinct !DISubprogram(name: "next_byte", linkageName: "std.math.random.Mcg16Random.next_byte", scope: !99, file: !99, line: 107, type: !3151, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3151 = !DISubroutineType(types: !3152)
!3152 = !{!60, !3136}
!3153 = !DILocation(line: 108, column: 1, scope: !3150)
!3154 = !DILocalVariable(name: "self", arg: 1, scope: !3150, file: !99, line: 107, type: !3136)
!3155 = !DILocation(line: 107, column: 31, scope: !3150)
!3156 = !DILocalVariable(name: "s", scope: !3150, file: !99, line: 109, type: !884, align: 8)
!3157 = !DILocation(line: 109, column: 10, scope: !3150)
!3158 = !DILocation(line: 109, column: 23, scope: !3150)
!3159 = !DILocalVariable(name: "result", scope: !3150, file: !99, line: 110, type: !60, align: 1)
!3160 = !DILocation(line: 110, column: 7, scope: !3150)
!3161 = !DILocation(line: 110, column: 24, scope: !3150)
!3162 = !DILocation(line: 110, column: 17, scope: !3150)
!3163 = !DILocation(line: 111, column: 3, scope: !3150)
!3164 = !DILocation(line: 111, column: 2, scope: !3150)
!3165 = !DILocation(line: 112, column: 9, scope: !3150)
!3166 = distinct !DISubprogram(name: "next_bytes", linkageName: "std.math.random.Mcg16Random.next_bytes", scope: !99, file: !99, line: 115, type: !3134, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3167 = !DILocation(line: 115, column: 65, scope: !3166)
!3168 = !DILocalVariable(name: "self", arg: 1, scope: !3166, file: !99, line: 115, type: !3136)
!3169 = !DILocation(line: 115, column: 32, scope: !3166)
!3170 = !DILocalVariable(name: "bytes", arg: 2, scope: !3166, file: !99, line: 115, type: !254)
!3171 = !DILocation(line: 115, column: 46, scope: !3166)
!3172 = !DILocalVariable(name: "len", scope: !3173, file: !99, line: 146, type: !259, align: 8)
!3173 = distinct !DISubprogram(name: "@random_value_to_bytes", linkageName: "@random_value_to_bytes", scope: !2, file: !2, line: 143, scopeLine: 143, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3174 = !DILocation(line: 146, column: 6, scope: !3173, inlinedAt: !3167)
!3175 = !DILocation(line: 146, column: 12, scope: !3173, inlinedAt: !3167)
!3176 = !DILocation(line: 148, column: 2, scope: !3173, inlinedAt: !3167)
!3177 = !DILocation(line: 148, column: 9, scope: !3178, inlinedAt: !3167)
!3178 = distinct !DILexicalBlock(scope: !3173, file: !2, line: 148, column: 2)
!3179 = !DILocalVariable(name: "value", scope: !3180, file: !99, line: 150, type: !60, align: 1)
!3180 = distinct !DILexicalBlock(scope: !3178, file: !2, line: 149, column: 2)
!3181 = !DILocation(line: 150, column: 7, scope: !3180, inlinedAt: !3167)
!3182 = !DILocation(line: 115, column: 88, scope: !3180, inlinedAt: !3167)
!3183 = !DILocation(line: 150, column: 15, scope: !3180, inlinedAt: !3167)
!3184 = !DILocation(line: 151, column: 7, scope: !3180, inlinedAt: !3167)
!3185 = !DILocation(line: 153, column: 33, scope: !3186, inlinedAt: !3167)
!3186 = distinct !DILexicalBlock(scope: !3180, file: !2, line: 152, column: 3)
!3187 = !DILocation(line: 153, column: 4, scope: !3186, inlinedAt: !3167)
!3188 = !DILocation(line: 153, column: 10, scope: !3186, inlinedAt: !3167)
!3189 = !DILocation(line: 154, column: 10, scope: !3186, inlinedAt: !3167)
!3190 = !DILocation(line: 156, column: 3, scope: !3180, inlinedAt: !3167)
!3191 = !DILocation(line: 157, column: 3, scope: !3180, inlinedAt: !3167)
!3192 = !DILocation(line: 158, column: 11, scope: !3180, inlinedAt: !3167)
!3193 = !DILocation(line: 158, column: 17, scope: !3180, inlinedAt: !3167)
!3194 = !DILocation(line: 165, column: 33, scope: !3195, inlinedAt: !3196)
!3195 = distinct !DISubprogram(name: "unreachable", linkageName: "unreachable", scope: !345, file: !345, line: 162, scopeLine: 162, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3196 = !DILocation(line: 160, column: 2, scope: !3173, inlinedAt: !3167)
!3197 = !DILocation(line: 165, column: 2, scope: !3195, inlinedAt: !3196)
!3198 = !DILocation(line: 167, column: 2, scope: !3195, inlinedAt: !3196)
!3199 = distinct !DISubprogram(name: "next_int128", linkageName: "std.math.random.Mcg16Random.next_int128", scope: !99, file: !99, line: 116, type: !3200, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3200 = !DISubroutineType(types: !3201)
!3201 = !{!25, !3136}
!3202 = !DILocation(line: 116, column: 55, scope: !3199)
!3203 = !DILocalVariable(name: "self", arg: 1, scope: !3199, file: !99, line: 116, type: !3136)
!3204 = !DILocation(line: 116, column: 36, scope: !3199)
!3205 = !DILocation(line: 116, column: 71, scope: !3206, inlinedAt: !3202)
!3206 = distinct !DISubprogram(name: "@long_to_int128", linkageName: "@long_to_int128", scope: !2, file: !2, line: 138, scopeLine: 138, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3207 = !DILocation(line: 138, column: 46, scope: !3206, inlinedAt: !3202)
!3208 = !DILocation(line: 138, column: 72, scope: !3206, inlinedAt: !3202)
!3209 = distinct !DISubprogram(name: "next_long", linkageName: "std.math.random.Mcg16Random.next_long", scope: !99, file: !99, line: 117, type: !3210, scopeLine: 117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3210 = !DISubroutineType(types: !3211)
!3211 = !{!6, !3136}
!3212 = !DILocation(line: 117, column: 51, scope: !3209)
!3213 = !DILocalVariable(name: "self", arg: 1, scope: !3209, file: !99, line: 117, type: !3136)
!3214 = !DILocation(line: 117, column: 32, scope: !3209)
!3215 = !DILocation(line: 117, column: 64, scope: !3216, inlinedAt: !3212)
!3216 = distinct !DISubprogram(name: "@int_to_long", linkageName: "@int_to_long", scope: !2, file: !2, line: 139, scopeLine: 139, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3217 = !DILocation(line: 139, column: 41, scope: !3216, inlinedAt: !3212)
!3218 = !DILocation(line: 139, column: 65, scope: !3216, inlinedAt: !3212)
!3219 = distinct !DISubprogram(name: "next_int", linkageName: "std.math.random.Mcg16Random.next_int", scope: !99, file: !99, line: 118, type: !3220, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3220 = !DISubroutineType(types: !3221)
!3221 = !{!21, !3136}
!3222 = !DILocation(line: 118, column: 49, scope: !3219)
!3223 = !DILocalVariable(name: "self", arg: 1, scope: !3219, file: !99, line: 118, type: !3136)
!3224 = !DILocation(line: 118, column: 30, scope: !3219)
!3225 = !DILocation(line: 118, column: 63, scope: !3226, inlinedAt: !3222)
!3226 = distinct !DISubprogram(name: "@short_to_int", linkageName: "@short_to_int", scope: !2, file: !2, line: 140, scopeLine: 140, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3227 = !DILocation(line: 140, column: 41, scope: !3226, inlinedAt: !3222)
!3228 = !DILocation(line: 140, column: 64, scope: !3226, inlinedAt: !3222)
!3229 = distinct !DISubprogram(name: "next_short", linkageName: "std.math.random.Mcg16Random.next_short", scope: !99, file: !99, line: 119, type: !3230, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !112, retainedNodes: !117)
!3230 = !DISubroutineType(types: !3231)
!3231 = !{!32, !3136}
!3232 = !DILocation(line: 119, column: 53, scope: !3229)
!3233 = !DILocalVariable(name: "self", arg: 1, scope: !3229, file: !99, line: 119, type: !3136)
!3234 = !DILocation(line: 119, column: 34, scope: !3229)
!3235 = !DILocation(line: 119, column: 68, scope: !3236, inlinedAt: !3232)
!3236 = distinct !DISubprogram(name: "@char_to_short", linkageName: "@char_to_short", scope: !2, file: !2, line: 141, scopeLine: 141, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !112)
!3237 = !DILocation(line: 141, column: 44, scope: !3236, inlinedAt: !3232)
!3238 = !DILocation(line: 141, column: 68, scope: !3236, inlinedAt: !3232)
