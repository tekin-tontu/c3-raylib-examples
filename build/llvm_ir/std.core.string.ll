; ModuleID = 'std::core::string'
source_filename = "std::core::string"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-apple-macosx15.0"

%.introspect = type { i8, i64, ptr, i64, i64, i64, [0 x i64] }
%.fault = type { i64, %"char[]", i64 }
%"char[]" = type { ptr, i64 }
%any = type { ptr, i64 }
%"any[]" = type { ptr, i64 }
%"char[][]" = type { ptr, i64 }
%"ushort[]" = type { ptr, i64 }
%"uint[]" = type { ptr, i64 }
%StringIterator = type { %"char[]", i64 }
%Splitter = type { %"char[]", %"char[]", i64, i8, i32 }

@"$ct.std.core.string.ZString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$char" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.p$char" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.char" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.char" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 1, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.std.core.string.WString" = linkonce global %.introspect { i8 18, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), ptr null, i64 8, i64 ptrtoint (ptr @"$ct.p$ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.p$ushort" = linkonce global %.introspect { i8 19, i64 0, ptr null, i64 8, i64 ptrtoint (ptr @"$ct.ushort" to i64), i64 0, [0 x i64] zeroinitializer }, align 8
@"$ct.ushort" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 2, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@"std.core.string.UnicodeResult$INVALID_UTF8" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault, i64 12 }, i64 1 }, align 8
@.fault = internal constant [13 x i8] c"INVALID_UTF8\00", align 1
@"std.core.string.UnicodeResult$INVALID_UTF16" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.1, i64 13 }, i64 2 }, align 8
@.fault.1 = internal constant [14 x i8] c"INVALID_UTF16\00", align 1
@"std.core.string.UnicodeResult$CONVERSION_FAILED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.UnicodeResult" to i64), %"char[]" { ptr @.fault.2, i64 17 }, i64 3 }, align 8
@.fault.2 = internal constant [18 x i8] c"CONVERSION_FAILED\00", align 1
@"$ct.std.core.string.UnicodeResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 3, [0 x i64] zeroinitializer }, align 8
@"std.core.string.NumberConversion$EMPTY_STRING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.3, i64 12 }, i64 1 }, align 8
@.fault.3 = internal constant [13 x i8] c"EMPTY_STRING\00", align 1
@"std.core.string.NumberConversion$NEGATIVE_VALUE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.4, i64 14 }, i64 2 }, align 8
@.fault.4 = internal constant [15 x i8] c"NEGATIVE_VALUE\00", align 1
@"std.core.string.NumberConversion$MALFORMED_INTEGER" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.5, i64 17 }, i64 3 }, align 8
@.fault.5 = internal constant [18 x i8] c"MALFORMED_INTEGER\00", align 1
@"std.core.string.NumberConversion$INTEGER_OVERFLOW" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.6, i64 16 }, i64 4 }, align 8
@.fault.6 = internal constant [17 x i8] c"INTEGER_OVERFLOW\00", align 1
@"std.core.string.NumberConversion$MALFORMED_FLOAT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.7, i64 15 }, i64 5 }, align 8
@.fault.7 = internal constant [16 x i8] c"MALFORMED_FLOAT\00", align 1
@"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.NumberConversion" to i64), %"char[]" { ptr @.fault.8, i64 18 }, i64 6 }, align 8
@.fault.8 = internal constant [19 x i8] c"FLOAT_OUT_OF_RANGE\00", align 1
@"$ct.std.core.string.NumberConversion" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 6, [0 x i64] zeroinitializer }, align 8
@"std.core.string.SplitResult$BUFFER_EXCEEDED" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.string.SplitResult" to i64), %"char[]" { ptr @.fault.9, i64 15 }, i64 1 }, align 8
@.fault.9 = internal constant [16 x i8] c"BUFFER_EXCEEDED\00", align 1
@"$ct.std.core.string.SplitResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@"$ct.std.core.string.Splitter" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 48, i64 0, i64 5, [0 x i64] zeroinitializer }, align 8
@std.core.string.SURROGATE_OFFSET = internal unnamed_addr constant i32 65536, align 4, !dbg !0
@std.core.string.SURROGATE_GENERIC_MASK = internal unnamed_addr constant i32 63488, align 4, !dbg !4
@std.core.string.SURROGATE_MASK = internal unnamed_addr constant i32 64512, align 4, !dbg !6
@std.core.string.SURROGATE_CODEPOINT_MASK = internal unnamed_addr constant i32 1023, align 4, !dbg !8
@std.core.string.SURROGATE_BITS = internal unnamed_addr constant i32 10, align 4, !dbg !10
@std.core.string.SURROGATE_LOW_VALUE = internal unnamed_addr constant i32 56320, align 4, !dbg !12
@std.core.string.SURROGATE_HIGH_VALUE = internal unnamed_addr constant i32 55296, align 4, !dbg !14
@std.core.mem.allocator.thread_temp_allocator = extern_weak thread_local global ptr, align 8
@std.core.mem.allocator.thread_allocator = extern_weak thread_local global %any, align 8
@"$sel.acquire" = linkonce_odr constant [8 x i8] c"acquire\00", align 1
@.panic_msg = internal constant [45 x i8] c"No method 'acquire' could be found on target\00", align 1
@.file = internal constant [17 x i8] c"mem_allocator.c3\00", align 1
@.func = internal constant [9 x i8] c"join_new\00", align 1
@std.core.builtin.panic = extern_weak global ptr, align 8
@"$ct.anyfault" = linkonce global %.introspect { i8 6, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.16 = internal constant [37 x i8] c"Unexpected fault '%s' was unwrapped!\00", align 1
@"$ct.long" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.17 = internal constant [62 x i8] c"Index exceeds array length (array had size %d, index was %d).\00", align 1
@.file.18 = internal constant [10 x i8] c"string.c3\00", align 1
@.panic_msg.19 = internal constant [61 x i8] c"End index out of bounds (end index of %d exceeds size of %d)\00", align 1
@"$ct.ulong" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 8, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.20 = internal constant [60 x i8] c"Array index out of bounds (array had size %d, index was %d)\00", align 1
@.panic_msg.21 = internal constant [45 x i8] c"Dereference of null pointer, 'str' was null.\00", align 1
@.panic_msg.22 = internal constant [48 x i8] c"Dereference of null pointer, 's[1..]' was null.\00", align 1
@.func.23 = internal constant [15 x i8] c"new_from_utf32\00", align 1
@.func.24 = internal constant [15 x i8] c"new_from_utf16\00", align 1
@"$sel.release" = linkonce_odr constant [8 x i8] c"release\00", align 1
@.panic_msg.25 = internal constant [45 x i8] c"No method 'release' could be found on target\00", align 1
@"$ct.std.core.mem.allocator.TempAllocator" = linkonce global %.introspect { i8 10, i64 0, ptr null, i64 40, i64 0, i64 5, [0 x i64] zeroinitializer }, align 8
@.func.26 = internal constant [10 x i8] c"trim_left\00", align 1
@.panic_msg.27 = internal constant [39 x i8] c"Negative array indexing (index was %d)\00", align 1
@.func.28 = internal constant [11 x i8] c"trim_right\00", align 1
@.func.29 = internal constant [12 x i8] c"starts_with\00", align 1
@.func.30 = internal constant [10 x i8] c"ends_with\00", align 1
@.func.31 = internal constant [6 x i8] c"strip\00", align 1
@.func.32 = internal constant [10 x i8] c"strip_end\00", align 1
@.panic_msg.33 = internal constant [84 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be at least 1 character long'.\00", align 1
@.func.34 = internal constant [6 x i8] c"split\00", align 1
@"std.core.builtin.SearchResult$MISSING" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.SearchResult" to i64), %"char[]" { ptr @.fault.35, i64 7 }, i64 1 }, align 8
@.fault.35 = internal constant [8 x i8] c"MISSING\00", align 1
@"$ct.std.core.builtin.SearchResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@"$sel.resize" = linkonce_odr constant [7 x i8] c"resize\00", align 1
@.panic_msg.36 = internal constant [44 x i8] c"No method 'resize' could be found on target\00", align 1
@.panic_msg.37 = internal constant [35 x i8] c"@ensure \22return.len > 0\22 violated.\00", align 1
@.func.38 = internal constant [10 x i8] c"new_split\00", align 1
@.func.39 = internal constant [16 x i8] c"split_to_buffer\00", align 1
@.func.40 = internal constant [14 x i8] c"index_of_char\00", align 1
@.panic_msg.41 = internal constant [35 x i8] c"@ensure \22return < s.len\22 violated.\00", align 1
@.func.42 = internal constant [15 x i8] c"index_of_chars\00", align 1
@.func.43 = internal constant [19 x i8] c"index_of_char_from\00", align 1
@.func.44 = internal constant [15 x i8] c"rindex_of_char\00", align 1
@.panic_msg.45 = internal constant [72 x i8] c"@require \22needle.len > 0\22 violated: 'The needle must be len 1 or more'.\00", align 1
@.func.46 = internal constant [9 x i8] c"index_of\00", align 1
@.panic_msg.47 = internal constant [45 x i8] c"Negative size (start %d is less than end %d)\00", align 1
@.panic_msg.48 = internal constant [54 x i8] c"Dereference of null pointer, 's[..^needed]' was null.\00", align 1
@.func.49 = internal constant [10 x i8] c"rindex_of\00", align 1
@.func.50 = internal constant [10 x i8] c"zstr_copy\00", align 1
@.panic_msg.51 = internal constant [96 x i8] c"@require \22len == 0 || dst + len <= src || src + len <= dst\22 violated: 'Ranges may not overlap'.\00", align 1
@.file.52 = internal constant [7 x i8] c"mem.c3\00", align 1
@.func.53 = internal constant [7 x i8] c"concat\00", align 1
@.func.54 = internal constant [5 x i8] c"copy\00", align 1
@.panic_msg.55 = internal constant [60 x i8] c"Reference parameter 's' was passed a null pointer argument.\00", align 1
@.func.56 = internal constant [5 x i8] c"free\00", align 1
@.panic_msg.57 = internal constant [43 x i8] c"Dereference of null pointer, 's' was null.\00", align 1
@.func.58 = internal constant [13 x i8] c"to_new_utf16\00", align 1
@.func.59 = internal constant [9 x i8] c"to_utf32\00", align 1
@.func.60 = internal constant [23 x i8] c"convert_ascii_to_lower\00", align 1
@.panic_msg.61 = internal constant [43 x i8] c"Dereference of null pointer, 'c' was null.\00", align 1
@.func.62 = internal constant [23 x i8] c"convert_ascii_to_upper\00", align 1
@.func.63 = internal constant [16 x i8] c"utf8_codepoints\00", align 1
@.panic_msg.64 = internal constant [80 x i8] c"@require \22(base <= 10 && base > 1) || base == 16\22 violated: 'Unsupported base'.\00", align 1
@.func.65 = internal constant [10 x i8] c"to_int128\00", align 1
@.func.66 = internal constant [8 x i8] c"to_long\00", align 1
@.func.67 = internal constant [7 x i8] c"to_int\00", align 1
@.func.68 = internal constant [9 x i8] c"to_short\00", align 1
@.func.69 = internal constant [9 x i8] c"to_ichar\00", align 1
@.func.70 = internal constant [11 x i8] c"to_uint128\00", align 1
@.func.71 = internal constant [9 x i8] c"to_ulong\00", align 1
@.func.72 = internal constant [8 x i8] c"to_uint\00", align 1
@.func.73 = internal constant [10 x i8] c"to_ushort\00", align 1
@.func.74 = internal constant [9 x i8] c"to_uchar\00", align 1
@to_double.BITS = internal unnamed_addr constant i32 53, align 4, !dbg !16
@to_double.EMIN = internal unnamed_addr constant i32 -1074, align 4, !dbg !19
@.file.75 = internal constant [18 x i8] c"string_to_real.c3\00", align 1
@.func.76 = internal constant [10 x i8] c"to_double\00", align 1
@.str = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.77 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.79 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@.panic_msg.80 = internal constant [23 x i8] c"Negative indexing (%d)\00", align 1
@.panic_msg.81 = internal constant [35 x i8] c"@require \22chars.len > 0\22 violated.\00", align 1
@to_double.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !21
@to_double.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 4, !dbg !26
@.panic_msg.82 = internal constant [17 x i8] c"Assert violation\00", align 1
@.panic_msg.83 = internal constant [18 x i8] c"Division by zero.\00", align 1
@"$ct.uint" = linkonce global %.introspect { i8 3, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@.panic_msg.84 = internal constant [36 x i8] c"Shift amount out of range (was %s).\00", align 1
@.panic_msg.85 = internal constant [11 x i8] c"% by zero.\00", align 1
@"$ct.int" = linkonce global %.introspect { i8 2, i64 0, ptr null, i64 4, i64 0, i64 0, [0 x i64] zeroinitializer }, align 8
@to_float.BITS = internal unnamed_addr constant i32 24, align 4, !dbg !31
@to_float.EMIN = internal unnamed_addr constant i32 -149, align 4, !dbg !33
@.func.86 = internal constant [9 x i8] c"to_float\00", align 1
@.str.87 = private unnamed_addr constant [9 x i8] c"infinity\00", align 1
@.str.88 = private unnamed_addr constant [9 x i8] c"INFINITY\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"NAN\00", align 1
@.str.90 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@to_float.TH = internal unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !35
@to_float.P10S = internal unnamed_addr constant [8 x i32] [i32 10, i32 100, i32 1000, i32 10000, i32 100000, i32 1000000, i32 10000000, i32 100000000], align 4, !dbg !37
@.panic_msg.91 = internal constant [63 x i8] c"Reference parameter 'self' was passed a null pointer argument.\00", align 1
@.func.92 = internal constant [6 x i8] c"reset\00", align 1
@.func.93 = internal constant [5 x i8] c"next\00", align 1
@"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" = linkonce constant %.fault { i64 ptrtoint (ptr @"$ct.std.core.builtin.IteratorResult" to i64), %"char[]" { ptr @.fault.94, i64 15 }, i64 1 }, align 8
@.fault.94 = internal constant [16 x i8] c"NO_MORE_ELEMENT\00", align 1
@"$ct.std.core.builtin.IteratorResult" = linkonce global %.introspect { i8 9, i64 0, ptr null, i64 8, i64 0, i64 1, [0 x i64] zeroinitializer }, align 8
@std.core.string.KMAX = weak local_unnamed_addr constant i32 128, align 4, !dbg !39
@std.core.string.MASK = weak local_unnamed_addr constant i32 127, align 4, !dbg !42
@std.core.string.B1B_DIG = weak local_unnamed_addr constant i32 2, align 4, !dbg !44
@std.core.string.B1B_MAX = weak local_unnamed_addr constant [2 x i32] [i32 9007199, i32 254740991], align 4, !dbg !46

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.trim([2 x i64] %0, [2 x i64] %1) #0 !dbg !56 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %result1 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !69, metadata !DIExpression()), !dbg !70
  store [2 x i64] %1, ptr %to_trim, align 8
  call void @llvm.dbg.declare(metadata ptr %to_trim, metadata !71, metadata !DIExpression()), !dbg !72
  %2 = load [2 x i64], ptr %string, align 8, !dbg !73
  %3 = load [2 x i64], ptr %to_trim, align 8, !dbg !73
  %4 = call [2 x i64] @std.core.String.trim_left([2 x i64] %2, [2 x i64] %3), !dbg !74
  store [2 x i64] %4, ptr %result, align 8
  %5 = load [2 x i64], ptr %result, align 8, !dbg !75
  %6 = load [2 x i64], ptr %to_trim, align 8, !dbg !75
  %7 = call [2 x i64] @std.core.String.trim_right([2 x i64] %5, [2 x i64] %6), !dbg !74
  store [2 x i64] %7, ptr %result1, align 8
  %8 = load [2 x i64], ptr %result1, align 8
  ret [2 x i64] %8
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.trim_left([2 x i64] %0, [2 x i64] %1) #0 !dbg !76 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %start = alloca i64, align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %varargslots20 = alloca [2 x %any], align 8
  %taddr23 = alloca %"any[]", align 8
  %taddr31 = alloca i64, align 8
  %taddr32 = alloca i64, align 8
  %taddr33 = alloca %"char[]", align 8
  %taddr34 = alloca %"char[]", align 8
  %taddr35 = alloca %"char[]", align 8
  %varargslots36 = alloca [2 x %any], align 8
  %taddr39 = alloca %"any[]", align 8
  %taddr43 = alloca i64, align 8
  %taddr44 = alloca i64, align 8
  %taddr45 = alloca %"char[]", align 8
  %taddr46 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  %varargslots48 = alloca [2 x %any], align 8
  %taddr51 = alloca %"any[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr57 = alloca i64, align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %varargslots62 = alloca [2 x %any], align 8
  %taddr65 = alloca %"any[]", align 8
  %taddr68 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !77, metadata !DIExpression()), !dbg !78
  store [2 x i64] %1, ptr %to_trim, align 8
  call void @llvm.dbg.declare(metadata ptr %to_trim, metadata !79, metadata !DIExpression()), !dbg !80
  call void @llvm.dbg.declare(metadata ptr %start, metadata !81, metadata !DIExpression()), !dbg !82
  store i64 0, ptr %start, align 8, !dbg !83
  call void @llvm.dbg.declare(metadata ptr %len, metadata !84, metadata !DIExpression()), !dbg !85
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !86
  %2 = load i64, ptr %ptradd, align 8, !dbg !86
  store i64 %2, ptr %len, align 8, !dbg !86
  br label %loop.cond, !dbg !87

loop.cond:                                        ; preds = %loop.body26, %entry
  %3 = load i64, ptr %start, align 8, !dbg !88
  %4 = load i64, ptr %len, align 8, !dbg !90
  %lt = icmp ult i64 %3, %4, !dbg !88
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !88

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !91
  %5 = load i64, ptr %ptradd1, align 8, !dbg !91
  %6 = load ptr, ptr %string, align 8, !dbg !91
  %7 = load i64, ptr %start, align 8, !dbg !92
  %ge = icmp uge i64 %7, %5, !dbg !92
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !92
  br i1 %8, label %panic, label %checkok, !dbg !92

checkok:                                          ; preds = %and.rhs
  %ptradd8 = getelementptr inbounds i8, ptr %6, i64 %7, !dbg !92
  %9 = load i8, ptr %ptradd8, align 1
  store i8 %9, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd9 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !93
  %10 = load i64, ptr %ptradd9, align 8, !dbg !93
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !97, metadata !DIExpression()), !dbg !93
  store i64 0, ptr %.anon, align 8, !dbg !93
  br label %loop.cond10, !dbg !93

loop.cond10:                                      ; preds = %if.exit, %checkok
  %11 = load i64, ptr %.anon, align 8, !dbg !93
  %lt11 = icmp ult i64 %11, %10, !dbg !93
  br i1 %lt11, label %loop.body, label %loop.exit, !dbg !93

loop.body:                                        ; preds = %loop.cond10
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !98, metadata !DIExpression()), !dbg !100
  %ptradd12 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !101
  %12 = load i64, ptr %ptradd12, align 8, !dbg !101
  %13 = load ptr, ptr %set, align 8, !dbg !101
  %14 = load i64, ptr %.anon, align 8, !dbg !101
  %ge13 = icmp uge i64 %14, %12, !dbg !101
  %15 = call i1 @llvm.expect.i1(i1 %ge13, i1 false), !dbg !101
  br i1 %15, label %panic14, label %checkok24, !dbg !101

checkok24:                                        ; preds = %loop.body
  %ptradd25 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !101
  %16 = load i8, ptr %ptradd25, align 1, !dbg !101
  store i8 %16, ptr %ch, align 1, !dbg !101
  %17 = load i8, ptr %ch, align 1, !dbg !102
  %18 = load i8, ptr %c, align 1, !dbg !103
  %eq = icmp eq i8 %17, %18, !dbg !102
  br i1 %eq, label %if.then, label %if.exit, !dbg !102

if.then:                                          ; preds = %checkok24
  store i8 1, ptr %blockret, align 1, !dbg !104
  br label %expr_block.exit, !dbg !104

if.exit:                                          ; preds = %checkok24
  %19 = load i64, ptr %.anon, align 8, !dbg !93
  %addnuw = add nuw i64 %19, 1, !dbg !93
  store i64 %addnuw, ptr %.anon, align 8, !dbg !93
  br label %loop.cond10, !dbg !93

loop.exit:                                        ; preds = %loop.cond10
  store i8 0, ptr %blockret, align 1, !dbg !105
  br label %expr_block.exit, !dbg !105

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %20 = load i8, ptr %blockret, align 1, !dbg !105
  %21 = trunc i8 %20 to i1, !dbg !105
  br label %and.phi, !dbg !105

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %21, %expr_block.exit ], !dbg !105
  br i1 %val, label %loop.body26, label %loop.exit27, !dbg !105

loop.body26:                                      ; preds = %and.phi
  %22 = load i64, ptr %start, align 8, !dbg !106
  %add = add i64 %22, 1, !dbg !106
  store i64 %add, ptr %start, align 8, !dbg !106
  br label %loop.cond, !dbg !106

loop.exit27:                                      ; preds = %and.phi
  %23 = load i64, ptr %start, align 8, !dbg !107
  %24 = load i64, ptr %len, align 8, !dbg !108
  %eq28 = icmp eq i64 %23, %24, !dbg !107
  br i1 %eq28, label %if.then29, label %if.exit54, !dbg !107

if.then29:                                        ; preds = %loop.exit27
  %25 = load %"char[]", ptr %string, align 8, !dbg !109
  %26 = extractvalue %"char[]" %25, 0, !dbg !109
  %27 = extractvalue %"char[]" %25, 1, !dbg !109
  %gt = icmp sgt i64 0, %27, !dbg !109
  %28 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !109
  br i1 %28, label %panic30, label %checkok40, !dbg !109

checkok40:                                        ; preds = %if.then29
  %lt41 = icmp slt i64 %27, 0, !dbg !109
  %29 = call i1 @llvm.expect.i1(i1 %lt41, i1 false), !dbg !109
  br i1 %29, label %panic42, label %checkok52, !dbg !109

checkok52:                                        ; preds = %checkok40
  %30 = insertvalue %"char[]" undef, ptr %26, 0, !dbg !109
  %31 = insertvalue %"char[]" %30, i64 0, 1, !dbg !109
  store %"char[]" %31, ptr %taddr53, align 8
  %32 = load [2 x i64], ptr %taddr53, align 8
  ret [2 x i64] %32

if.exit54:                                        ; preds = %loop.exit27
  %33 = load %"char[]", ptr %string, align 8, !dbg !110
  %34 = extractvalue %"char[]" %33, 0, !dbg !110
  %35 = load i64, ptr %start, align 8, !dbg !111
  %36 = extractvalue %"char[]" %33, 1, !dbg !111
  %gt55 = icmp ugt i64 %35, %36, !dbg !111
  %37 = call i1 @llvm.expect.i1(i1 %gt55, i1 false), !dbg !111
  br i1 %37, label %panic56, label %checkok66, !dbg !111

checkok66:                                        ; preds = %if.exit54
  %size = sub i64 %36, %35, !dbg !110
  %ptradd67 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !110
  %38 = insertvalue %"char[]" undef, ptr %ptradd67, 0, !dbg !110
  %39 = insertvalue %"char[]" %38, i64 %size, 1, !dbg !110
  store %"char[]" %39, ptr %taddr68, align 8
  %40 = load [2 x i64], ptr %taddr68, align 8
  ret [2 x i64] %40

panic:                                            ; preds = %and.rhs
  store i64 %5, ptr %taddr, align 8
  %41 = insertvalue %any undef, ptr %taddr, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr2, align 8
  %43 = insertvalue %any undef, ptr %taddr2, 0
  %44 = insertvalue %any %43, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %45 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %46 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.26, i64 9 }, ptr %taddr5, align 8
  %47 = load [2 x i64], ptr %taddr5, align 8
  store %any %42, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %44, ptr %ptradd6, align 8
  %48 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %48, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %49 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %45, [2 x i64] %46, [2 x i64] %47, i32 164, [2 x i64] %49), !dbg !92
  unreachable, !dbg !92

panic14:                                          ; preds = %loop.body
  store i64 %12, ptr %taddr15, align 8
  %50 = insertvalue %any undef, ptr %taddr15, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr16, align 8
  %52 = insertvalue %any undef, ptr %taddr16, 0
  %53 = insertvalue %any %52, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr17, align 8
  %54 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr18, align 8
  %55 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.func.26, i64 9 }, ptr %taddr19, align 8
  %56 = load [2 x i64], ptr %taddr19, align 8
  store %any %51, ptr %varargslots20, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots20, i64 16
  store %any %53, ptr %ptradd21, align 8
  %57 = insertvalue %"any[]" undef, ptr %varargslots20, 0
  %"$$temp22" = insertvalue %"any[]" %57, i64 2, 1
  store %"any[]" %"$$temp22", ptr %taddr23, align 8
  %58 = load [2 x i64], ptr %taddr23, align 8
  call void @std.core.builtin.panicf([2 x i64] %54, [2 x i64] %55, [2 x i64] %56, i32 110, [2 x i64] %58), !dbg !101
  unreachable, !dbg !101

panic30:                                          ; preds = %if.then29
  store i64 %27, ptr %taddr31, align 8
  %59 = insertvalue %any undef, ptr %taddr31, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr32, align 8
  %61 = insertvalue %any undef, ptr %taddr32, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr33, align 8
  %63 = load [2 x i64], ptr %taddr33, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr34, align 8
  %64 = load [2 x i64], ptr %taddr34, align 8
  store %"char[]" { ptr @.func.26, i64 9 }, ptr %taddr35, align 8
  %65 = load [2 x i64], ptr %taddr35, align 8
  store %any %60, ptr %varargslots36, align 8
  %ptradd37 = getelementptr inbounds i8, ptr %varargslots36, i64 16
  store %any %62, ptr %ptradd37, align 8
  %66 = insertvalue %"any[]" undef, ptr %varargslots36, 0
  %"$$temp38" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp38", ptr %taddr39, align 8
  %67 = load [2 x i64], ptr %taddr39, align 8
  call void @std.core.builtin.panicf([2 x i64] %63, [2 x i64] %64, [2 x i64] %65, i32 165, [2 x i64] %67), !dbg !109
  unreachable, !dbg !109

panic42:                                          ; preds = %checkok40
  store i64 -1, ptr %taddr43, align 8
  %68 = insertvalue %any undef, ptr %taddr43, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %27, ptr %taddr44, align 8
  %70 = insertvalue %any undef, ptr %taddr44, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr45, align 8
  %72 = load [2 x i64], ptr %taddr45, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr46, align 8
  %73 = load [2 x i64], ptr %taddr46, align 8
  store %"char[]" { ptr @.func.26, i64 9 }, ptr %taddr47, align 8
  %74 = load [2 x i64], ptr %taddr47, align 8
  store %any %69, ptr %varargslots48, align 8
  %ptradd49 = getelementptr inbounds i8, ptr %varargslots48, i64 16
  store %any %71, ptr %ptradd49, align 8
  %75 = insertvalue %"any[]" undef, ptr %varargslots48, 0
  %"$$temp50" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp50", ptr %taddr51, align 8
  %76 = load [2 x i64], ptr %taddr51, align 8
  call void @std.core.builtin.panicf([2 x i64] %72, [2 x i64] %73, [2 x i64] %74, i32 165, [2 x i64] %76), !dbg !109
  unreachable, !dbg !109

panic56:                                          ; preds = %if.exit54
  store i64 %36, ptr %taddr57, align 8
  %77 = insertvalue %any undef, ptr %taddr57, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr58, align 8
  %79 = insertvalue %any undef, ptr %taddr58, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr59, align 8
  %81 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr60, align 8
  %82 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.26, i64 9 }, ptr %taddr61, align 8
  %83 = load [2 x i64], ptr %taddr61, align 8
  store %any %78, ptr %varargslots62, align 8
  %ptradd63 = getelementptr inbounds i8, ptr %varargslots62, i64 16
  store %any %80, ptr %ptradd63, align 8
  %84 = insertvalue %"any[]" undef, ptr %varargslots62, 0
  %"$$temp64" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp64", ptr %taddr65, align 8
  %85 = load [2 x i64], ptr %taddr65, align 8
  call void @std.core.builtin.panicf([2 x i64] %81, [2 x i64] %82, [2 x i64] %83, i32 166, [2 x i64] %85), !dbg !110
  unreachable, !dbg !110
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.trim_right([2 x i64] %0, [2 x i64] %1) #0 !dbg !112 {
entry:
  %string = alloca %"char[]", align 8
  %to_trim = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr6 = alloca %"any[]", align 8
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots13 = alloca [2 x %any], align 8
  %taddr16 = alloca %"any[]", align 8
  %c = alloca i8, align 1
  %set = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %.anon = alloca i64, align 8
  %ch = alloca i8, align 1
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 8
  %taddr33 = alloca %"any[]", align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca i64, align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %taddr44 = alloca %"char[]", align 8
  %varargslots45 = alloca [2 x %any], align 8
  %taddr48 = alloca %"any[]", align 8
  %taddr53 = alloca i64, align 8
  %taddr54 = alloca i64, align 8
  %taddr55 = alloca %"char[]", align 8
  %taddr56 = alloca %"char[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %varargslots58 = alloca [2 x %any], align 8
  %taddr61 = alloca %"any[]", align 8
  %taddr63 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !113, metadata !DIExpression()), !dbg !114
  store [2 x i64] %1, ptr %to_trim, align 8
  call void @llvm.dbg.declare(metadata ptr %to_trim, metadata !115, metadata !DIExpression()), !dbg !116
  call void @llvm.dbg.declare(metadata ptr %len, metadata !117, metadata !DIExpression()), !dbg !118
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !119
  %2 = load i64, ptr %ptradd, align 8, !dbg !119
  store i64 %2, ptr %len, align 8, !dbg !119
  br label %loop.cond, !dbg !120

loop.cond:                                        ; preds = %loop.body36, %entry
  %3 = load i64, ptr %len, align 8, !dbg !121
  %lt = icmp ult i64 0, %3, !dbg !121
  br i1 %lt, label %and.rhs, label %and.phi, !dbg !121

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !123
  %4 = load i64, ptr %ptradd1, align 8, !dbg !123
  %5 = load ptr, ptr %string, align 8, !dbg !123
  %6 = load i64, ptr %len, align 8, !dbg !124
  %sub = sub i64 %6, 1, !dbg !124
  %lt2 = icmp slt i64 %sub, 0, !dbg !124
  %7 = call i1 @llvm.expect.i1(i1 %lt2, i1 false), !dbg !124
  br i1 %7, label %panic, label %checkok, !dbg !124

checkok:                                          ; preds = %and.rhs
  %ge = icmp sge i64 %sub, %4, !dbg !124
  %8 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !124
  br i1 %8, label %panic7, label %checkok17, !dbg !124

checkok17:                                        ; preds = %checkok
  %ptradd18 = getelementptr inbounds i8, ptr %5, i64 %sub, !dbg !124
  %9 = load i8, ptr %ptradd18, align 1
  store i8 %9, ptr %c, align 1
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %set, ptr align 8 %to_trim, i32 16, i1 false)
  %ptradd19 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !125
  %10 = load i64, ptr %ptradd19, align 8, !dbg !125
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !129, metadata !DIExpression()), !dbg !125
  store i64 0, ptr %.anon, align 8, !dbg !125
  br label %loop.cond20, !dbg !125

loop.cond20:                                      ; preds = %if.exit, %checkok17
  %11 = load i64, ptr %.anon, align 8, !dbg !125
  %lt21 = icmp ult i64 %11, %10, !dbg !125
  br i1 %lt21, label %loop.body, label %loop.exit, !dbg !125

loop.body:                                        ; preds = %loop.cond20
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !130, metadata !DIExpression()), !dbg !132
  %ptradd22 = getelementptr inbounds i8, ptr %set, i64 8, !dbg !133
  %12 = load i64, ptr %ptradd22, align 8, !dbg !133
  %13 = load ptr, ptr %set, align 8, !dbg !133
  %14 = load i64, ptr %.anon, align 8, !dbg !133
  %ge23 = icmp uge i64 %14, %12, !dbg !133
  %15 = call i1 @llvm.expect.i1(i1 %ge23, i1 false), !dbg !133
  br i1 %15, label %panic24, label %checkok34, !dbg !133

checkok34:                                        ; preds = %loop.body
  %ptradd35 = getelementptr inbounds i8, ptr %13, i64 %14, !dbg !133
  %16 = load i8, ptr %ptradd35, align 1, !dbg !133
  store i8 %16, ptr %ch, align 1, !dbg !133
  %17 = load i8, ptr %ch, align 1, !dbg !134
  %18 = load i8, ptr %c, align 1, !dbg !135
  %eq = icmp eq i8 %17, %18, !dbg !134
  br i1 %eq, label %if.then, label %if.exit, !dbg !134

if.then:                                          ; preds = %checkok34
  store i8 1, ptr %blockret, align 1, !dbg !136
  br label %expr_block.exit, !dbg !136

if.exit:                                          ; preds = %checkok34
  %19 = load i64, ptr %.anon, align 8, !dbg !125
  %addnuw = add nuw i64 %19, 1, !dbg !125
  store i64 %addnuw, ptr %.anon, align 8, !dbg !125
  br label %loop.cond20, !dbg !125

loop.exit:                                        ; preds = %loop.cond20
  store i8 0, ptr %blockret, align 1, !dbg !137
  br label %expr_block.exit, !dbg !137

expr_block.exit:                                  ; preds = %loop.exit, %if.then
  %20 = load i8, ptr %blockret, align 1, !dbg !137
  %21 = trunc i8 %20 to i1, !dbg !137
  br label %and.phi, !dbg !137

and.phi:                                          ; preds = %expr_block.exit, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %21, %expr_block.exit ], !dbg !137
  br i1 %val, label %loop.body36, label %loop.exit38, !dbg !137

loop.body36:                                      ; preds = %and.phi
  %22 = load i64, ptr %len, align 8, !dbg !138
  %sub37 = sub i64 %22, 1, !dbg !138
  store i64 %sub37, ptr %len, align 8, !dbg !138
  br label %loop.cond, !dbg !138

loop.exit38:                                      ; preds = %and.phi
  %23 = load %"char[]", ptr %string, align 8, !dbg !139
  %24 = extractvalue %"char[]" %23, 0, !dbg !139
  %25 = extractvalue %"char[]" %23, 1, !dbg !140
  %gt = icmp ugt i64 0, %25, !dbg !140
  %26 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !140
  br i1 %26, label %panic39, label %checkok49, !dbg !140

checkok49:                                        ; preds = %loop.exit38
  %27 = load i64, ptr %len, align 8, !dbg !141
  %add = add i64 0, %27, !dbg !141
  %lt50 = icmp ult i64 %25, %add, !dbg !141
  %sub51 = sub i64 %add, 1, !dbg !141
  %28 = call i1 @llvm.expect.i1(i1 %lt50, i1 false), !dbg !141
  br i1 %28, label %panic52, label %checkok62, !dbg !141

checkok62:                                        ; preds = %checkok49
  %size = sub i64 %add, 0, !dbg !139
  %29 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !139
  %30 = insertvalue %"char[]" %29, i64 %size, 1, !dbg !139
  store %"char[]" %30, ptr %taddr63, align 8
  %31 = load [2 x i64], ptr %taddr63, align 8
  ret [2 x i64] %31

panic:                                            ; preds = %and.rhs
  store i64 %sub, ptr %taddr, align 8
  %32 = insertvalue %any undef, ptr %taddr, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr3, align 8
  %34 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %35 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.28, i64 10 }, ptr %taddr5, align 8
  %36 = load [2 x i64], ptr %taddr5, align 8
  store %any %33, ptr %varargslots, align 8
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr6, align 8
  %38 = load [2 x i64], ptr %taddr6, align 8
  call void @std.core.builtin.panicf([2 x i64] %34, [2 x i64] %35, [2 x i64] %36, i32 180, [2 x i64] %38), !dbg !124
  unreachable, !dbg !124

panic7:                                           ; preds = %checkok
  store i64 %4, ptr %taddr8, align 8
  %39 = insertvalue %any undef, ptr %taddr8, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub, ptr %taddr9, align 8
  %41 = insertvalue %any undef, ptr %taddr9, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr10, align 8
  %43 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %44 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.28, i64 10 }, ptr %taddr12, align 8
  %45 = load [2 x i64], ptr %taddr12, align 8
  store %any %40, ptr %varargslots13, align 8
  %ptradd14 = getelementptr inbounds i8, ptr %varargslots13, i64 16
  store %any %42, ptr %ptradd14, align 8
  %46 = insertvalue %"any[]" undef, ptr %varargslots13, 0
  %"$$temp15" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp15", ptr %taddr16, align 8
  %47 = load [2 x i64], ptr %taddr16, align 8
  call void @std.core.builtin.panicf([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 180, [2 x i64] %47), !dbg !124
  unreachable, !dbg !124

panic24:                                          ; preds = %loop.body
  store i64 %12, ptr %taddr25, align 8
  %48 = insertvalue %any undef, ptr %taddr25, 0
  %49 = insertvalue %any %48, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %14, ptr %taddr26, align 8
  %50 = insertvalue %any undef, ptr %taddr26, 0
  %51 = insertvalue %any %50, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr27, align 8
  %52 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr28, align 8
  %53 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.28, i64 10 }, ptr %taddr29, align 8
  %54 = load [2 x i64], ptr %taddr29, align 8
  store %any %49, ptr %varargslots30, align 8
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %51, ptr %ptradd31, align 8
  %55 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %55, i64 2, 1
  store %"any[]" %"$$temp32", ptr %taddr33, align 8
  %56 = load [2 x i64], ptr %taddr33, align 8
  call void @std.core.builtin.panicf([2 x i64] %52, [2 x i64] %53, [2 x i64] %54, i32 110, [2 x i64] %56), !dbg !133
  unreachable, !dbg !133

panic39:                                          ; preds = %loop.exit38
  store i64 %25, ptr %taddr40, align 8
  %57 = insertvalue %any undef, ptr %taddr40, 0
  %58 = insertvalue %any %57, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr41, align 8
  %59 = insertvalue %any undef, ptr %taddr41, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr42, align 8
  %61 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr43, align 8
  %62 = load [2 x i64], ptr %taddr43, align 8
  store %"char[]" { ptr @.func.28, i64 10 }, ptr %taddr44, align 8
  %63 = load [2 x i64], ptr %taddr44, align 8
  store %any %58, ptr %varargslots45, align 8
  %ptradd46 = getelementptr inbounds i8, ptr %varargslots45, i64 16
  store %any %60, ptr %ptradd46, align 8
  %64 = insertvalue %"any[]" undef, ptr %varargslots45, 0
  %"$$temp47" = insertvalue %"any[]" %64, i64 2, 1
  store %"any[]" %"$$temp47", ptr %taddr48, align 8
  %65 = load [2 x i64], ptr %taddr48, align 8
  call void @std.core.builtin.panicf([2 x i64] %61, [2 x i64] %62, [2 x i64] %63, i32 181, [2 x i64] %65), !dbg !139
  unreachable, !dbg !139

panic52:                                          ; preds = %checkok49
  store i64 %sub51, ptr %taddr53, align 8
  %66 = insertvalue %any undef, ptr %taddr53, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr54, align 8
  %68 = insertvalue %any undef, ptr %taddr54, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr55, align 8
  %70 = load [2 x i64], ptr %taddr55, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr56, align 8
  %71 = load [2 x i64], ptr %taddr56, align 8
  store %"char[]" { ptr @.func.28, i64 10 }, ptr %taddr57, align 8
  %72 = load [2 x i64], ptr %taddr57, align 8
  store %any %67, ptr %varargslots58, align 8
  %ptradd59 = getelementptr inbounds i8, ptr %varargslots58, i64 16
  store %any %69, ptr %ptradd59, align 8
  %73 = insertvalue %"any[]" undef, ptr %varargslots58, 0
  %"$$temp60" = insertvalue %"any[]" %73, i64 2, 1
  store %"any[]" %"$$temp60", ptr %taddr61, align 8
  %74 = load [2 x i64], ptr %taddr61, align 8
  call void @std.core.builtin.panicf([2 x i64] %70, [2 x i64] %71, [2 x i64] %72, i32 181, [2 x i64] %74), !dbg !139
  unreachable, !dbg !139
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.core.String.starts_with([2 x i64] %0, [2 x i64] %1) #0 !dbg !142 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !146, metadata !DIExpression()), !dbg !147
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !148, metadata !DIExpression()), !dbg !149
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !150
  %2 = load i64, ptr %ptradd, align 8, !dbg !150
  %ptradd1 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !151
  %3 = load i64, ptr %ptradd1, align 8, !dbg !151
  %gt = icmp ugt i64 %2, %3, !dbg !150
  br i1 %gt, label %if.then, label %if.exit, !dbg !150

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !152

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !153
  %4 = load i64, ptr %ptradd2, align 8, !dbg !153
  %i2nb = icmp eq i64 %4, 0, !dbg !153
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !153

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !154

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %string, align 8, !dbg !155
  %6 = extractvalue %"char[]" %5, 0, !dbg !155
  %7 = extractvalue %"char[]" %5, 1, !dbg !156
  %gt5 = icmp ugt i64 0, %7, !dbg !156
  %8 = call i1 @llvm.expect.i1(i1 %gt5, i1 false), !dbg !156
  br i1 %8, label %panic, label %checkok, !dbg !156

checkok:                                          ; preds = %if.exit4
  %ptradd12 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !157
  %9 = load i64, ptr %ptradd12, align 8, !dbg !157
  %add = add i64 0, %9, !dbg !157
  %lt = icmp ult i64 %7, %add, !dbg !157
  %sub = sub i64 %add, 1, !dbg !157
  %10 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !157
  br i1 %10, label %panic13, label %checkok23, !dbg !157

checkok23:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !155
  %11 = insertvalue %"char[]" undef, ptr %6, 0, !dbg !155
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !155
  %13 = load %"char[]", ptr %needle, align 8, !dbg !158
  %14 = extractvalue %"char[]" %12, 1, !dbg !155
  %15 = extractvalue %"char[]" %13, 1, !dbg !155
  %16 = extractvalue %"char[]" %12, 0, !dbg !155
  %17 = extractvalue %"char[]" %13, 0, !dbg !155
  %eq = icmp eq i64 %14, %15, !dbg !155
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !155

slice_cmp_values:                                 ; preds = %checkok23
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %18 = load i64, ptr %cmp.idx, align 8
  %lt24 = icmp slt i64 %18, %14
  br i1 %lt24, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd25 = getelementptr inbounds i8, ptr %16, i64 %18
  %ptradd26 = getelementptr inbounds i8, ptr %17, i64 %18
  %19 = load i8, ptr %ptradd25, align 1
  %20 = load i8, ptr %ptradd26, align 1
  %eq27 = icmp eq i8 %19, %20
  %21 = add i64 %18, 1
  store i64 %21, ptr %cmp.idx, align 8
  br i1 %eq27, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok23
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok23 ], [ false, %slice_loop_comparison ]
  %22 = zext i1 %slice_cmp_phi to i8
  ret i8 %22

panic:                                            ; preds = %if.exit4
  store i64 %7, ptr %taddr, align 8
  %23 = insertvalue %any undef, ptr %taddr, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr6, align 8
  %25 = insertvalue %any undef, ptr %taddr6, 0
  %26 = insertvalue %any %25, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr7, align 8
  %27 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr8, align 8
  %28 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.29, i64 11 }, ptr %taddr9, align 8
  %29 = load [2 x i64], ptr %taddr9, align 8
  store %any %24, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %26, ptr %ptradd10, align 8
  %30 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %30, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %31 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %27, [2 x i64] %28, [2 x i64] %29, i32 196, [2 x i64] %31), !dbg !155
  unreachable, !dbg !155

panic13:                                          ; preds = %checkok
  store i64 %sub, ptr %taddr14, align 8
  %32 = insertvalue %any undef, ptr %taddr14, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %7, ptr %taddr15, align 8
  %34 = insertvalue %any undef, ptr %taddr15, 0
  %35 = insertvalue %any %34, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr16, align 8
  %36 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr17, align 8
  %37 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.29, i64 11 }, ptr %taddr18, align 8
  %38 = load [2 x i64], ptr %taddr18, align 8
  store %any %33, ptr %varargslots19, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %35, ptr %ptradd20, align 8
  %39 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %39, i64 2, 1
  store %"any[]" %"$$temp21", ptr %taddr22, align 8
  %40 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %36, [2 x i64] %37, [2 x i64] %38, i32 196, [2 x i64] %40), !dbg !155
  unreachable, !dbg !155
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.core.String.ends_with([2 x i64] %0, [2 x i64] %1) #0 !dbg !159 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr7 = alloca i64, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr12 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !160, metadata !DIExpression()), !dbg !161
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !162, metadata !DIExpression()), !dbg !163
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !164
  %2 = load i64, ptr %ptradd, align 8, !dbg !164
  %ptradd1 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !165
  %3 = load i64, ptr %ptradd1, align 8, !dbg !165
  %gt = icmp ugt i64 %2, %3, !dbg !164
  br i1 %gt, label %if.then, label %if.exit, !dbg !164

if.then:                                          ; preds = %entry
  ret i8 0, !dbg !166

if.exit:                                          ; preds = %entry
  %ptradd2 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !167
  %4 = load i64, ptr %ptradd2, align 8, !dbg !167
  %i2nb = icmp eq i64 %4, 0, !dbg !167
  br i1 %i2nb, label %if.then3, label %if.exit4, !dbg !167

if.then3:                                         ; preds = %if.exit
  ret i8 1, !dbg !168

if.exit4:                                         ; preds = %if.exit
  %5 = load %"char[]", ptr %string, align 8, !dbg !169
  %6 = extractvalue %"char[]" %5, 0, !dbg !169
  %ptradd5 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !170
  %7 = load i64, ptr %ptradd5, align 8, !dbg !170
  %8 = extractvalue %"char[]" %5, 1, !dbg !170
  %sub = sub i64 %8, %7, !dbg !170
  %gt6 = icmp ugt i64 %sub, %8, !dbg !170
  %9 = call i1 @llvm.expect.i1(i1 %gt6, i1 false), !dbg !170
  br i1 %9, label %panic, label %checkok, !dbg !170

checkok:                                          ; preds = %if.exit4
  %size = sub i64 %8, %sub, !dbg !169
  %ptradd13 = getelementptr inbounds i8, ptr %6, i64 %sub, !dbg !169
  %10 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !169
  %11 = insertvalue %"char[]" %10, i64 %size, 1, !dbg !169
  %12 = load %"char[]", ptr %needle, align 8, !dbg !171
  %13 = extractvalue %"char[]" %11, 1, !dbg !169
  %14 = extractvalue %"char[]" %12, 1, !dbg !169
  %15 = extractvalue %"char[]" %11, 0, !dbg !169
  %16 = extractvalue %"char[]" %12, 0, !dbg !169
  %eq = icmp eq i64 %13, %14, !dbg !169
  br i1 %eq, label %slice_cmp_values, label %slice_cmp_exit, !dbg !169

slice_cmp_values:                                 ; preds = %checkok
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %17 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %17, %13
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd14 = getelementptr inbounds i8, ptr %15, i64 %17
  %ptradd15 = getelementptr inbounds i8, ptr %16, i64 %17
  %18 = load i8, ptr %ptradd14, align 1
  %19 = load i8, ptr %ptradd15, align 1
  %eq16 = icmp eq i8 %18, %19
  %20 = add i64 %17, 1
  store i64 %20, ptr %cmp.idx, align 8
  br i1 %eq16, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok ], [ false, %slice_loop_comparison ]
  %21 = zext i1 %slice_cmp_phi to i8
  ret i8 %21

panic:                                            ; preds = %if.exit4
  store i64 %8, ptr %taddr, align 8
  %22 = insertvalue %any undef, ptr %taddr, 0
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr7, align 8
  %24 = insertvalue %any undef, ptr %taddr7, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr8, align 8
  %26 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr9, align 8
  %27 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.30, i64 9 }, ptr %taddr10, align 8
  %28 = load [2 x i64], ptr %taddr10, align 8
  store %any %23, ptr %varargslots, align 8
  %ptradd11 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %25, ptr %ptradd11, align 8
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr12, align 8
  %30 = load [2 x i64], ptr %taddr12, align 8
  call void @std.core.builtin.panicf([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 211, [2 x i64] %30), !dbg !169
  unreachable, !dbg !169
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.strip([2 x i64] %0, [2 x i64] %1) #0 !dbg !172 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %taddr9 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !173, metadata !DIExpression()), !dbg !174
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !175, metadata !DIExpression()), !dbg !176
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !177
  %2 = load i64, ptr %ptradd, align 8, !dbg !177
  %i2nb = icmp eq i64 %2, 0, !dbg !177
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !177

or.rhs:                                           ; preds = %entry
  %3 = load [2 x i64], ptr %string, align 8, !dbg !178
  %4 = load [2 x i64], ptr %needle, align 8, !dbg !178
  %5 = call i8 @std.core.String.starts_with([2 x i64] %3, [2 x i64] %4), !dbg !179
  %6 = trunc i8 %5 to i1, !dbg !179
  %not = xor i1 %6, true, !dbg !179
  br label %or.phi, !dbg !179

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !179
  br i1 %val, label %if.then, label %if.exit, !dbg !179

if.then:                                          ; preds = %or.phi
  %7 = load [2 x i64], ptr %string, align 8, !dbg !180
  ret [2 x i64] %7, !dbg !180

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !181
  %9 = extractvalue %"char[]" %8, 0, !dbg !181
  %ptradd1 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !182
  %10 = load i64, ptr %ptradd1, align 8, !dbg !182
  %11 = extractvalue %"char[]" %8, 1, !dbg !182
  %gt = icmp ugt i64 %10, %11, !dbg !182
  %12 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !182
  br i1 %12, label %panic, label %checkok, !dbg !182

checkok:                                          ; preds = %if.exit
  %size = sub i64 %11, %10, !dbg !181
  %ptradd8 = getelementptr inbounds i8, ptr %9, i64 %10, !dbg !181
  %13 = insertvalue %"char[]" undef, ptr %ptradd8, 0, !dbg !181
  %14 = insertvalue %"char[]" %13, i64 %size, 1, !dbg !181
  store %"char[]" %14, ptr %taddr9, align 8
  %15 = load [2 x i64], ptr %taddr9, align 8
  ret [2 x i64] %15

panic:                                            ; preds = %if.exit
  store i64 %11, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr3, align 8
  %20 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %21 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.31, i64 5 }, ptr %taddr5, align 8
  %22 = load [2 x i64], ptr %taddr5, align 8
  store %any %17, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd6, align 8
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %24 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 225, [2 x i64] %24), !dbg !181
  unreachable, !dbg !181
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.strip_end([2 x i64] %0, [2 x i64] %1) #0 !dbg !183 {
entry:
  %string = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca i64, align 8
  %taddr1 = alloca i64, align 8
  %taddr2 = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr6 = alloca %"any[]", align 8
  %taddr11 = alloca i64, align 8
  %taddr12 = alloca i64, align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %varargslots16 = alloca [2 x %any], align 8
  %taddr19 = alloca %"any[]", align 8
  %taddr21 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %string, align 8
  call void @llvm.dbg.declare(metadata ptr %string, metadata !184, metadata !DIExpression()), !dbg !185
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !186, metadata !DIExpression()), !dbg !187
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !188
  %2 = load i64, ptr %ptradd, align 8, !dbg !188
  %i2nb = icmp eq i64 %2, 0, !dbg !188
  br i1 %i2nb, label %or.phi, label %or.rhs, !dbg !188

or.rhs:                                           ; preds = %entry
  %3 = load [2 x i64], ptr %string, align 8, !dbg !189
  %4 = load [2 x i64], ptr %needle, align 8, !dbg !189
  %5 = call i8 @std.core.String.ends_with([2 x i64] %3, [2 x i64] %4), !dbg !190
  %6 = trunc i8 %5 to i1, !dbg !190
  %not = xor i1 %6, true, !dbg !190
  br label %or.phi, !dbg !190

or.phi:                                           ; preds = %or.rhs, %entry
  %val = phi i1 [ true, %entry ], [ %not, %or.rhs ], !dbg !190
  br i1 %val, label %if.then, label %if.exit, !dbg !190

if.then:                                          ; preds = %or.phi
  %7 = load [2 x i64], ptr %string, align 8, !dbg !191
  ret [2 x i64] %7, !dbg !191

if.exit:                                          ; preds = %or.phi
  %8 = load %"char[]", ptr %string, align 8, !dbg !192
  %9 = extractvalue %"char[]" %8, 0, !dbg !192
  %10 = extractvalue %"char[]" %8, 1, !dbg !193
  %gt = icmp ugt i64 0, %10, !dbg !193
  %11 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !193
  br i1 %11, label %panic, label %checkok, !dbg !193

checkok:                                          ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !194
  %12 = load i64, ptr %ptradd7, align 8, !dbg !194
  %ptradd8 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !195
  %13 = load i64, ptr %ptradd8, align 8, !dbg !195
  %sub = sub i64 %12, %13, !dbg !194
  %add = add i64 0, %sub, !dbg !194
  %lt = icmp ult i64 %10, %add, !dbg !194
  %sub9 = sub i64 %add, 1, !dbg !194
  %14 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !194
  br i1 %14, label %panic10, label %checkok20, !dbg !194

checkok20:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !192
  %15 = insertvalue %"char[]" undef, ptr %9, 0, !dbg !192
  %16 = insertvalue %"char[]" %15, i64 %size, 1, !dbg !192
  store %"char[]" %16, ptr %taddr21, align 8
  %17 = load [2 x i64], ptr %taddr21, align 8
  ret [2 x i64] %17

panic:                                            ; preds = %if.exit
  store i64 %10, ptr %taddr, align 8
  %18 = insertvalue %any undef, ptr %taddr, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr1, align 8
  %20 = insertvalue %any undef, ptr %taddr1, 0
  %21 = insertvalue %any %20, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr2, align 8
  %22 = load [2 x i64], ptr %taddr2, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %23 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.32, i64 9 }, ptr %taddr4, align 8
  %24 = load [2 x i64], ptr %taddr4, align 8
  store %any %19, ptr %varargslots, align 8
  %ptradd5 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %21, ptr %ptradd5, align 8
  %25 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %25, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr6, align 8
  %26 = load [2 x i64], ptr %taddr6, align 8
  call void @std.core.builtin.panicf([2 x i64] %22, [2 x i64] %23, [2 x i64] %24, i32 240, [2 x i64] %26), !dbg !192
  unreachable, !dbg !192

panic10:                                          ; preds = %checkok
  store i64 %sub9, ptr %taddr11, align 8
  %27 = insertvalue %any undef, ptr %taddr11, 0
  %28 = insertvalue %any %27, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %10, ptr %taddr12, align 8
  %29 = insertvalue %any undef, ptr %taddr12, 0
  %30 = insertvalue %any %29, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr13, align 8
  %31 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr14, align 8
  %32 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.func.32, i64 9 }, ptr %taddr15, align 8
  %33 = load [2 x i64], ptr %taddr15, align 8
  store %any %28, ptr %varargslots16, align 8
  %ptradd17 = getelementptr inbounds i8, ptr %varargslots16, i64 16
  store %any %30, ptr %ptradd17, align 8
  %34 = insertvalue %"any[]" undef, ptr %varargslots16, 0
  %"$$temp18" = insertvalue %"any[]" %34, i64 2, 1
  store %"any[]" %"$$temp18", ptr %taddr19, align 8
  %35 = load [2 x i64], ptr %taddr19, align 8
  call void @std.core.builtin.panicf([2 x i64] %31, [2 x i64] %32, [2 x i64] %33, i32 240, [2 x i64] %35), !dbg !192
  unreachable, !dbg !192
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.split([2 x i64] %0, [2 x i64] %1, i64 %2, [2 x i64] %3, i8 %4) #0 !dbg !196 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %allocator = alloca %any, align 8
  %skip_empty = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %holder = alloca ptr, align 8
  %allocator3 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %elements5 = alloca i64, align 8
  %allocator6 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr12 = alloca ptr, align 8
  %taddr14 = alloca %"char[]", align 8
  %taddr15 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam18 = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr23 = alloca i64, align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %varargslots28 = alloca [2 x %any], align 8
  %taddr31 = alloca %"any[]", align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %varargslots41 = alloca [2 x %any], align 8
  %taddr44 = alloca %"any[]", align 8
  %taddr51 = alloca i64, align 8
  %taddr52 = alloca i64, align 8
  %taddr53 = alloca %"char[]", align 8
  %taddr54 = alloca %"char[]", align 8
  %taddr55 = alloca %"char[]", align 8
  %varargslots56 = alloca [2 x %any], align 8
  %taddr59 = alloca %"any[]", align 8
  %allocator71 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %new_size = alloca i64, align 8
  %error_var73 = alloca i64, align 8
  %allocator74 = alloca %any, align 8
  %ptr75 = alloca ptr, align 8
  %new_size76 = alloca i64, align 8
  %blockret77 = alloca ptr, align 8
  %allocator80 = alloca %any, align 8
  %ptr81 = alloca ptr, align 8
  %.inlinecache86 = alloca ptr, align 8
  %.cachedtype87 = alloca ptr, align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %taddr97 = alloca %"char[]", align 8
  %.inlinecache104 = alloca ptr, align 8
  %.cachedtype105 = alloca ptr, align 8
  %taddr113 = alloca %"char[]", align 8
  %taddr114 = alloca %"char[]", align 8
  %taddr115 = alloca %"char[]", align 8
  %retparam117 = alloca ptr, align 8
  %.inlinecache123 = alloca ptr, align 8
  %.cachedtype124 = alloca ptr, align 8
  %taddr132 = alloca %"char[]", align 8
  %taddr133 = alloca %"char[]", align 8
  %taddr134 = alloca %"char[]", align 8
  %retparam136 = alloca ptr, align 8
  %taddr142 = alloca %"char[]", align 8
  %taddr143 = alloca %"char[]", align 8
  %taddr144 = alloca %"char[]", align 8
  %varargslots145 = alloca [1 x %any], align 8
  %taddr147 = alloca %"any[]", align 8
  %taddr155 = alloca %"char[]", align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr159 = alloca %"char[][]", align 8
  store ptr null, ptr %.cachedtype124, align 8
  store ptr null, ptr %.cachedtype105, align 8
  store ptr null, ptr %.cachedtype87, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !210, metadata !DIExpression()), !dbg !211
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !212, metadata !DIExpression()), !dbg !213
  store i64 %2, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !214, metadata !DIExpression()), !dbg !215
  store [2 x i64] %3, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !216, metadata !DIExpression()), !dbg !217
  store i8 %4, ptr %skip_empty, align 1
  call void @llvm.dbg.declare(metadata ptr %skip_empty, metadata !218, metadata !DIExpression()), !dbg !219
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !220
  %5 = load i64, ptr %ptradd, align 8, !dbg !220
  %lt = icmp ult i64 0, %5, !dbg !220
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !220

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.33, i64 83 }, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %7 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr2, align 8
  %8 = load [2 x i64], ptr %taddr2, align 8
  %9 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %9([2 x i64] %6, [2 x i64] %7, [2 x i64] %8, i32 252), !dbg !220
  unreachable, !dbg !220

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %capacity, metadata !222, metadata !DIExpression()), !dbg !223
  store i64 16, ptr %capacity, align 8, !dbg !224
  call void @llvm.dbg.declare(metadata ptr %i, metadata !225, metadata !DIExpression()), !dbg !226
  store i64 0, ptr %i, align 8, !dbg !227
  call void @llvm.dbg.declare(metadata ptr %holder, metadata !228, metadata !DIExpression()), !dbg !229
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator3, ptr align 8 %allocator, i32 16, i1 false)
  %10 = load i64, ptr %capacity, align 8
  store i64 %10, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator3, i32 16, i1 false)
  %11 = load i64, ptr %elements, align 8
  store i64 %11, ptr %elements5, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator6, ptr align 8 %allocator4, i32 16, i1 false)
  %12 = load i64, ptr %elements5, align 8, !dbg !230
  %mul = mul i64 16, %12, !dbg !236
  store i64 %mul, ptr %size, align 8
  %13 = load i64, ptr %size, align 8, !dbg !237
  %i2nb = icmp eq i64 %13, 0, !dbg !237
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !237

if.then:                                          ; preds = %assert_ok
  store ptr null, ptr %blockret, align 8, !dbg !240
  br label %expr_block.exit, !dbg !240

if.exit:                                          ; preds = %assert_ok
  %ptradd7 = getelementptr inbounds i8, ptr %allocator6, i64 8, !dbg !241
  %14 = load i64, ptr %ptradd7, align 8, !dbg !241
  %15 = inttoptr i64 %14 to ptr, !dbg !241
  %type = load ptr, ptr %.cachedtype, align 8
  %16 = icmp eq ptr %15, %type
  br i1 %16, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd8 = getelementptr inbounds i8, ptr %15, i64 16
  %17 = load ptr, ptr %ptradd8, align 8
  %18 = call ptr @.dyn_search(ptr %17, ptr @"$sel.acquire")
  store ptr %18, ptr %.inlinecache, align 8
  store ptr %15, ptr %.cachedtype, align 8
  br label %19

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %19

19:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %18, %cache_miss ]
  %20 = icmp eq ptr %fn_phi, null
  br i1 %20, label %missing_function, label %match

missing_function:                                 ; preds = %19
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr9, align 8
  %21 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr10, align 8
  %22 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr11, align 8
  %23 = load [2 x i64], ptr %taddr11, align 8
  %24 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %24([2 x i64] %21, [2 x i64] %22, [2 x i64] %23, i32 68), !dbg !243
  unreachable, !dbg !243

match:                                            ; preds = %19
  %25 = load ptr, ptr %allocator6, align 8
  %26 = load i64, ptr %size, align 8
  %27 = call i64 %fn_phi(ptr %retparam, ptr %25, i64 %26, i32 0, i64 0), !dbg !243
  %not_err = icmp eq i64 %27, 0, !dbg !243
  %28 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !243
  br i1 %28, label %after_check, label %assign_optional, !dbg !243

assign_optional:                                  ; preds = %match
  store i64 %27, ptr %error_var, align 8, !dbg !243
  br label %panic_block, !dbg !243

after_check:                                      ; preds = %match
  %29 = load ptr, ptr %retparam, align 8, !dbg !243
  store ptr %29, ptr %blockret, align 8, !dbg !243
  br label %expr_block.exit, !dbg !243

expr_block.exit:                                  ; preds = %after_check, %if.then
  %30 = load ptr, ptr %blockret, align 8, !dbg !243
  store ptr %30, ptr %taddr12, align 8
  %31 = load ptr, ptr %taddr12, align 8
  %32 = load i64, ptr %elements5, align 8, !dbg !244
  %add = add i64 0, %32, !dbg !244
  %size13 = sub i64 %add, 0, !dbg !244
  %33 = insertvalue %"char[][]" undef, ptr %31, 0, !dbg !244
  %34 = insertvalue %"char[][]" %33, i64 %size13, 1, !dbg !244
  br label %noerr_block, !dbg !244

panic_block:                                      ; preds = %assign_optional
  %35 = insertvalue %any undef, ptr %error_var, 0, !dbg !244
  %36 = insertvalue %any %35, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !244
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr14, align 8
  %37 = load [2 x i64], ptr %taddr14, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr15, align 8
  %38 = load [2 x i64], ptr %taddr15, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr16, align 8
  %39 = load [2 x i64], ptr %taddr16, align 8
  store %any %36, ptr %varargslots, align 8
  %40 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %40, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr17, align 8
  %41 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %37, [2 x i64] %38, [2 x i64] %39, i32 269, [2 x i64] %41), !dbg !233
  unreachable, !dbg !233

noerr_block:                                      ; preds = %expr_block.exit
  %42 = extractvalue %"char[][]" %34, 0, !dbg !233
  store ptr %42, ptr %holder, align 8, !dbg !233
  call void @llvm.dbg.declare(metadata ptr %no_more, metadata !245, metadata !DIExpression()), !dbg !246
  store i8 0, ptr %no_more, align 1, !dbg !247
  br label %loop.cond, !dbg !248

loop.cond:                                        ; preds = %if.exit149, %if.then66, %noerr_block
  %43 = load i8, ptr %no_more, align 1, !dbg !249
  %44 = trunc i8 %43 to i1, !dbg !249
  %not = xor i1 %44, true, !dbg !249
  br i1 %not, label %loop.body, label %loop.exit, !dbg !249

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %index, metadata !251, metadata !DIExpression()), !dbg !253
  %45 = load i64, ptr %i, align 8, !dbg !254
  %46 = load i64, ptr %max, align 8, !dbg !255
  %sub = sub i64 %46, 1, !dbg !255
  %eq = icmp eq i64 %sub, %45, !dbg !254
  %check = icmp sge i64 %sub, 0, !dbg !254
  %siui-eq = and i1 %check, %eq, !dbg !254
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !254

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !256
  br label %after_assign, !dbg !256

cond.rhs:                                         ; preds = %loop.body
  %47 = load [2 x i64], ptr %s, align 8
  %48 = load [2 x i64], ptr %needle, align 8
  %49 = call i64 @std.core.String.index_of(ptr %retparam18, [2 x i64] %47, [2 x i64] %48), !dbg !257
  %not_err19 = icmp eq i64 %49, 0, !dbg !257
  %50 = call i1 @llvm.expect.i1(i1 %not_err19, i1 true), !dbg !257
  br i1 %50, label %after_check21, label %assign_optional20, !dbg !257

assign_optional20:                                ; preds = %cond.rhs
  store i64 %49, ptr %index.f, align 8, !dbg !257
  br label %after_assign, !dbg !257

after_check21:                                    ; preds = %cond.rhs
  %51 = load i64, ptr %retparam18, align 8, !dbg !257
  br label %cond.phi, !dbg !257

cond.phi:                                         ; preds = %after_check21
  store i64 %51, ptr %index, align 8, !dbg !257
  store i64 0, ptr %index.f, align 8, !dbg !257
  br label %after_assign, !dbg !257

after_assign:                                     ; preds = %cond.phi, %assign_optional20, %cond.lhs
  call void @llvm.dbg.declare(metadata ptr %res, metadata !258, metadata !DIExpression()), !dbg !259
  %load.err = load i64, ptr %index.f, align 8, !dbg !260
  %result = icmp eq i64 %load.err, 0, !dbg !260
  br i1 %result, label %if.then22, label %if.else, !dbg !260

if.then22:                                        ; preds = %after_assign
  %52 = load %"char[]", ptr %s, align 8, !dbg !261
  %53 = extractvalue %"char[]" %52, 0, !dbg !261
  %54 = extractvalue %"char[]" %52, 1, !dbg !263
  %gt = icmp ugt i64 0, %54, !dbg !263
  %55 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !263
  br i1 %55, label %panic, label %checkok, !dbg !263

checkok:                                          ; preds = %if.then22
  %56 = load i64, ptr %index, align 8, !dbg !264
  %add32 = add i64 0, %56, !dbg !264
  %lt33 = icmp ult i64 %54, %add32, !dbg !264
  %sub34 = sub i64 %add32, 1, !dbg !264
  %57 = call i1 @llvm.expect.i1(i1 %lt33, i1 false), !dbg !264
  br i1 %57, label %panic35, label %checkok45, !dbg !264

checkok45:                                        ; preds = %checkok
  %size46 = sub i64 %add32, 0, !dbg !261
  %58 = insertvalue %"char[]" undef, ptr %53, 0, !dbg !261
  %59 = insertvalue %"char[]" %58, i64 %size46, 1, !dbg !261
  store %"char[]" %59, ptr %res, align 8, !dbg !261
  %60 = load %"char[]", ptr %s, align 8, !dbg !265
  %61 = extractvalue %"char[]" %60, 0, !dbg !265
  %62 = load i64, ptr %index, align 8, !dbg !266
  %ptradd47 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !267
  %63 = load i64, ptr %ptradd47, align 8, !dbg !267
  %add48 = add i64 %62, %63, !dbg !266
  %64 = extractvalue %"char[]" %60, 1, !dbg !266
  %gt49 = icmp ugt i64 %add48, %64, !dbg !266
  %65 = call i1 @llvm.expect.i1(i1 %gt49, i1 false), !dbg !266
  br i1 %65, label %panic50, label %checkok60, !dbg !266

checkok60:                                        ; preds = %checkok45
  %size61 = sub i64 %64, %add48, !dbg !265
  %ptradd62 = getelementptr inbounds i8, ptr %61, i64 %add48, !dbg !265
  %66 = insertvalue %"char[]" undef, ptr %ptradd62, 0, !dbg !265
  %67 = insertvalue %"char[]" %66, i64 %size61, 1, !dbg !265
  store %"char[]" %67, ptr %s, align 8, !dbg !265
  br label %if.exit63, !dbg !265

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !268
  store i8 1, ptr %no_more, align 1, !dbg !270
  br label %if.exit63, !dbg !270

if.exit63:                                        ; preds = %if.else, %checkok60
  %ptradd64 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !271
  %68 = load i64, ptr %ptradd64, align 8, !dbg !271
  %i2nb65 = icmp eq i64 %68, 0, !dbg !271
  br i1 %i2nb65, label %and.rhs, label %and.phi, !dbg !271

and.rhs:                                          ; preds = %if.exit63
  %69 = load i8, ptr %skip_empty, align 1, !dbg !272
  %70 = trunc i8 %69 to i1, !dbg !272
  br label %and.phi, !dbg !272

and.phi:                                          ; preds = %and.rhs, %if.exit63
  %val = phi i1 [ false, %if.exit63 ], [ %70, %and.rhs ], !dbg !272
  br i1 %val, label %if.then66, label %if.exit67, !dbg !272

if.then66:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !273

if.exit67:                                        ; preds = %and.phi
  %71 = load i64, ptr %i, align 8, !dbg !275
  %72 = load i64, ptr %capacity, align 8, !dbg !276
  %eq68 = icmp eq i64 %71, %72, !dbg !275
  br i1 %eq68, label %if.then69, label %if.exit149, !dbg !275

if.then69:                                        ; preds = %if.exit67
  %73 = load i64, ptr %capacity, align 8, !dbg !277
  %mul70 = mul i64 %73, 2, !dbg !277
  store i64 %mul70, ptr %capacity, align 8, !dbg !277
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator71, ptr align 8 %allocator, i32 16, i1 false)
  %74 = load ptr, ptr %holder, align 8, !dbg !279
  store ptr %74, ptr %ptr, align 8
  %75 = load i64, ptr %capacity, align 8, !dbg !280
  %mul72 = mul i64 16, %75, !dbg !281
  store i64 %mul72, ptr %new_size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator74, ptr align 8 %allocator71, i32 16, i1 false)
  %76 = load ptr, ptr %ptr, align 8
  store ptr %76, ptr %ptr75, align 8
  %77 = load i64, ptr %new_size, align 8
  store i64 %77, ptr %new_size76, align 8
  %78 = load i64, ptr %new_size76, align 8, !dbg !282
  %i2nb78 = icmp eq i64 %78, 0, !dbg !282
  br i1 %i2nb78, label %if.then79, label %if.exit100, !dbg !282

if.then79:                                        ; preds = %if.then69
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator80, ptr align 8 %allocator74, i32 16, i1 false)
  %79 = load ptr, ptr %ptr75, align 8
  store ptr %79, ptr %ptr81, align 8
  %80 = load ptr, ptr %ptr81, align 8, !dbg !287
  %i2nb82 = icmp eq ptr %80, null, !dbg !287
  br i1 %i2nb82, label %if.then83, label %if.exit84, !dbg !287

if.then83:                                        ; preds = %if.then79
  br label %expr_block.exit99, !dbg !291

if.exit84:                                        ; preds = %if.then79
  %ptradd85 = getelementptr inbounds i8, ptr %allocator80, i64 8, !dbg !292
  %81 = load i64, ptr %ptradd85, align 8, !dbg !292
  %82 = inttoptr i64 %81 to ptr, !dbg !292
  %type88 = load ptr, ptr %.cachedtype87, align 8
  %83 = icmp eq ptr %82, %type88
  br i1 %83, label %cache_hit91, label %cache_miss89

cache_miss89:                                     ; preds = %if.exit84
  %ptradd90 = getelementptr inbounds i8, ptr %82, i64 16
  %84 = load ptr, ptr %ptradd90, align 8
  %85 = call ptr @.dyn_search(ptr %84, ptr @"$sel.release")
  store ptr %85, ptr %.inlinecache86, align 8
  store ptr %82, ptr %.cachedtype87, align 8
  br label %86

cache_hit91:                                      ; preds = %if.exit84
  %cache_hit_fn92 = load ptr, ptr %.inlinecache86, align 8
  br label %86

86:                                               ; preds = %cache_hit91, %cache_miss89
  %fn_phi93 = phi ptr [ %cache_hit_fn92, %cache_hit91 ], [ %85, %cache_miss89 ]
  %87 = icmp eq ptr %fn_phi93, null
  br i1 %87, label %missing_function94, label %match98

missing_function94:                               ; preds = %86
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %taddr95, align 8
  %88 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr96, align 8
  %89 = load [2 x i64], ptr %taddr96, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr97, align 8
  %90 = load [2 x i64], ptr %taddr97, align 8
  %91 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %91([2 x i64] %88, [2 x i64] %89, [2 x i64] %90, i32 105), !dbg !293
  unreachable, !dbg !293

match98:                                          ; preds = %86
  %92 = load ptr, ptr %allocator80, align 8, !dbg !293
  %93 = load ptr, ptr %ptr81, align 8, !dbg !293
  call void %fn_phi93(ptr %92, ptr %93, i8 0), !dbg !293
  br label %expr_block.exit99, !dbg !293

expr_block.exit99:                                ; preds = %match98, %if.then83
  store ptr null, ptr %blockret77, align 8, !dbg !294
  br label %expr_block.exit140, !dbg !294

if.exit100:                                       ; preds = %if.then69
  %94 = load ptr, ptr %ptr75, align 8, !dbg !295
  %i2nb101 = icmp eq ptr %94, null, !dbg !295
  br i1 %i2nb101, label %if.then102, label %if.exit121, !dbg !295

if.then102:                                       ; preds = %if.exit100
  %ptradd103 = getelementptr inbounds i8, ptr %allocator74, i64 8, !dbg !296
  %95 = load i64, ptr %ptradd103, align 8, !dbg !296
  %96 = inttoptr i64 %95 to ptr, !dbg !296
  %type106 = load ptr, ptr %.cachedtype105, align 8
  %97 = icmp eq ptr %96, %type106
  br i1 %97, label %cache_hit109, label %cache_miss107

cache_miss107:                                    ; preds = %if.then102
  %ptradd108 = getelementptr inbounds i8, ptr %96, i64 16
  %98 = load ptr, ptr %ptradd108, align 8
  %99 = call ptr @.dyn_search(ptr %98, ptr @"$sel.acquire")
  store ptr %99, ptr %.inlinecache104, align 8
  store ptr %96, ptr %.cachedtype105, align 8
  br label %100

cache_hit109:                                     ; preds = %if.then102
  %cache_hit_fn110 = load ptr, ptr %.inlinecache104, align 8
  br label %100

100:                                              ; preds = %cache_hit109, %cache_miss107
  %fn_phi111 = phi ptr [ %cache_hit_fn110, %cache_hit109 ], [ %99, %cache_miss107 ]
  %101 = icmp eq ptr %fn_phi111, null
  br i1 %101, label %missing_function112, label %match116

missing_function112:                              ; preds = %100
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr113, align 8
  %102 = load [2 x i64], ptr %taddr113, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr114, align 8
  %103 = load [2 x i64], ptr %taddr114, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr115, align 8
  %104 = load [2 x i64], ptr %taddr115, align 8
  %105 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %105([2 x i64] %102, [2 x i64] %103, [2 x i64] %104, i32 95), !dbg !298
  unreachable, !dbg !298

match116:                                         ; preds = %100
  %106 = load ptr, ptr %allocator74, align 8
  %107 = load i64, ptr %new_size76, align 8
  %108 = call i64 %fn_phi111(ptr %retparam117, ptr %106, i64 %107, i32 0, i64 0), !dbg !298
  %not_err118 = icmp eq i64 %108, 0, !dbg !298
  %109 = call i1 @llvm.expect.i1(i1 %not_err118, i1 true), !dbg !298
  br i1 %109, label %after_check120, label %assign_optional119, !dbg !298

assign_optional119:                               ; preds = %match116
  store i64 %108, ptr %error_var73, align 8, !dbg !298
  br label %panic_block141, !dbg !298

after_check120:                                   ; preds = %match116
  %110 = load ptr, ptr %retparam117, align 8, !dbg !298
  store ptr %110, ptr %blockret77, align 8, !dbg !298
  br label %expr_block.exit140, !dbg !298

if.exit121:                                       ; preds = %if.exit100
  %ptradd122 = getelementptr inbounds i8, ptr %allocator74, i64 8, !dbg !299
  %111 = load i64, ptr %ptradd122, align 8, !dbg !299
  %112 = inttoptr i64 %111 to ptr, !dbg !299
  %type125 = load ptr, ptr %.cachedtype124, align 8
  %113 = icmp eq ptr %112, %type125
  br i1 %113, label %cache_hit128, label %cache_miss126

cache_miss126:                                    ; preds = %if.exit121
  %ptradd127 = getelementptr inbounds i8, ptr %112, i64 16
  %114 = load ptr, ptr %ptradd127, align 8
  %115 = call ptr @.dyn_search(ptr %114, ptr @"$sel.resize")
  store ptr %115, ptr %.inlinecache123, align 8
  store ptr %112, ptr %.cachedtype124, align 8
  br label %116

cache_hit128:                                     ; preds = %if.exit121
  %cache_hit_fn129 = load ptr, ptr %.inlinecache123, align 8
  br label %116

116:                                              ; preds = %cache_hit128, %cache_miss126
  %fn_phi130 = phi ptr [ %cache_hit_fn129, %cache_hit128 ], [ %115, %cache_miss126 ]
  %117 = icmp eq ptr %fn_phi130, null
  br i1 %117, label %missing_function131, label %match135

missing_function131:                              ; preds = %116
  store %"char[]" { ptr @.panic_msg.36, i64 43 }, ptr %taddr132, align 8
  %118 = load [2 x i64], ptr %taddr132, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr133, align 8
  %119 = load [2 x i64], ptr %taddr133, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr134, align 8
  %120 = load [2 x i64], ptr %taddr134, align 8
  %121 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %121([2 x i64] %118, [2 x i64] %119, [2 x i64] %120, i32 96), !dbg !301
  unreachable, !dbg !301

match135:                                         ; preds = %116
  %122 = load ptr, ptr %allocator74, align 8
  %123 = load ptr, ptr %ptr75, align 8
  %124 = load i64, ptr %new_size76, align 8
  %125 = call i64 %fn_phi130(ptr %retparam136, ptr %122, ptr %123, i64 %124, i64 0), !dbg !301
  %not_err137 = icmp eq i64 %125, 0, !dbg !301
  %126 = call i1 @llvm.expect.i1(i1 %not_err137, i1 true), !dbg !301
  br i1 %126, label %after_check139, label %assign_optional138, !dbg !301

assign_optional138:                               ; preds = %match135
  store i64 %125, ptr %error_var73, align 8, !dbg !301
  br label %panic_block141, !dbg !301

after_check139:                                   ; preds = %match135
  %127 = load ptr, ptr %retparam136, align 8, !dbg !301
  store ptr %127, ptr %blockret77, align 8, !dbg !301
  br label %expr_block.exit140, !dbg !301

expr_block.exit140:                               ; preds = %after_check139, %after_check120, %expr_block.exit99
  br label %noerr_block148, !dbg !301

panic_block141:                                   ; preds = %assign_optional138, %assign_optional119
  %128 = insertvalue %any undef, ptr %error_var73, 0, !dbg !301
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !301
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr142, align 8
  %130 = load [2 x i64], ptr %taddr142, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr143, align 8
  %131 = load [2 x i64], ptr %taddr143, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr144, align 8
  %132 = load [2 x i64], ptr %taddr144, align 8
  store %any %129, ptr %varargslots145, align 8
  %133 = insertvalue %"any[]" undef, ptr %varargslots145, 0
  %"$$temp146" = insertvalue %"any[]" %133, i64 1, 1
  store %"any[]" %"$$temp146", ptr %taddr147, align 8
  %134 = load [2 x i64], ptr %taddr147, align 8
  call void @std.core.builtin.panicf([2 x i64] %130, [2 x i64] %131, [2 x i64] %132, i32 85, [2 x i64] %134), !dbg !284
  unreachable, !dbg !284

noerr_block148:                                   ; preds = %expr_block.exit140
  %135 = load ptr, ptr %blockret77, align 8, !dbg !284
  store ptr %135, ptr %holder, align 8, !dbg !284
  br label %if.exit149, !dbg !284

if.exit149:                                       ; preds = %noerr_block148, %if.exit67
  %136 = load ptr, ptr %holder, align 8, !dbg !302
  %137 = load i64, ptr %i, align 8, !dbg !303
  %add150 = add i64 %137, 1, !dbg !303
  store i64 %add150, ptr %i, align 8, !dbg !303
  %ptroffset = getelementptr inbounds [16 x i8], ptr %136, i64 %137, !dbg !303
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !304
  br label %loop.cond, !dbg !304

loop.exit:                                        ; preds = %loop.cond
  %138 = load ptr, ptr %holder, align 8, !dbg !305
  %139 = load i64, ptr %i, align 8, !dbg !306
  %add151 = add i64 0, %139, !dbg !306
  %size152 = sub i64 %add151, 0, !dbg !306
  %140 = insertvalue %"char[][]" undef, ptr %138, 0, !dbg !306
  %141 = insertvalue %"char[][]" %140, i64 %size152, 1, !dbg !306
  %142 = extractvalue %"char[][]" %141, 1, !dbg !307
  %lt153 = icmp ult i64 0, %142, !dbg !307
  br i1 %lt153, label %assert_ok158, label %assert_fail154, !dbg !307

assert_fail154:                                   ; preds = %loop.exit
  store %"char[]" { ptr @.panic_msg.37, i64 34 }, ptr %taddr155, align 8
  %143 = load [2 x i64], ptr %taddr155, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr156, align 8
  %144 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr157, align 8
  %145 = load [2 x i64], ptr %taddr157, align 8
  %146 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %146([2 x i64] %143, [2 x i64] %144, [2 x i64] %145, i32 253), !dbg !307
  unreachable, !dbg !307

assert_ok158:                                     ; preds = %loop.exit
  store %"char[][]" %141, ptr %taddr159, align 8
  %147 = load [2 x i64], ptr %taddr159, align 8
  ret [2 x i64] %147

panic:                                            ; preds = %if.then22
  store i64 %54, ptr %taddr23, align 8
  %148 = insertvalue %any undef, ptr %taddr23, 0
  %149 = insertvalue %any %148, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr24, align 8
  %150 = insertvalue %any undef, ptr %taddr24, 0
  %151 = insertvalue %any %150, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr25, align 8
  %152 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr26, align 8
  %153 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr27, align 8
  %154 = load [2 x i64], ptr %taddr27, align 8
  store %any %149, ptr %varargslots28, align 8
  %ptradd29 = getelementptr inbounds i8, ptr %varargslots28, i64 16
  store %any %151, ptr %ptradd29, align 8
  %155 = insertvalue %"any[]" undef, ptr %varargslots28, 0
  %"$$temp30" = insertvalue %"any[]" %155, i64 2, 1
  store %"any[]" %"$$temp30", ptr %taddr31, align 8
  %156 = load [2 x i64], ptr %taddr31, align 8
  call void @std.core.builtin.panicf([2 x i64] %152, [2 x i64] %153, [2 x i64] %154, i32 267, [2 x i64] %156), !dbg !261
  unreachable, !dbg !261

panic35:                                          ; preds = %checkok
  store i64 %sub34, ptr %taddr36, align 8
  %157 = insertvalue %any undef, ptr %taddr36, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %54, ptr %taddr37, align 8
  %159 = insertvalue %any undef, ptr %taddr37, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr38, align 8
  %161 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr39, align 8
  %162 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr40, align 8
  %163 = load [2 x i64], ptr %taddr40, align 8
  store %any %158, ptr %varargslots41, align 8
  %ptradd42 = getelementptr inbounds i8, ptr %varargslots41, i64 16
  store %any %160, ptr %ptradd42, align 8
  %164 = insertvalue %"any[]" undef, ptr %varargslots41, 0
  %"$$temp43" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp43", ptr %taddr44, align 8
  %165 = load [2 x i64], ptr %taddr44, align 8
  call void @std.core.builtin.panicf([2 x i64] %161, [2 x i64] %162, [2 x i64] %163, i32 267, [2 x i64] %165), !dbg !261
  unreachable, !dbg !261

panic50:                                          ; preds = %checkok45
  store i64 %64, ptr %taddr51, align 8
  %166 = insertvalue %any undef, ptr %taddr51, 0
  %167 = insertvalue %any %166, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add48, ptr %taddr52, align 8
  %168 = insertvalue %any undef, ptr %taddr52, 0
  %169 = insertvalue %any %168, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr53, align 8
  %170 = load [2 x i64], ptr %taddr53, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr54, align 8
  %171 = load [2 x i64], ptr %taddr54, align 8
  store %"char[]" { ptr @.func.34, i64 5 }, ptr %taddr55, align 8
  %172 = load [2 x i64], ptr %taddr55, align 8
  store %any %167, ptr %varargslots56, align 8
  %ptradd57 = getelementptr inbounds i8, ptr %varargslots56, i64 16
  store %any %169, ptr %ptradd57, align 8
  %173 = insertvalue %"any[]" undef, ptr %varargslots56, 0
  %"$$temp58" = insertvalue %"any[]" %173, i64 2, 1
  store %"any[]" %"$$temp58", ptr %taddr59, align 8
  %174 = load [2 x i64], ptr %taddr59, align 8
  call void @std.core.builtin.panicf([2 x i64] %170, [2 x i64] %171, [2 x i64] %172, i32 268, [2 x i64] %174), !dbg !265
  unreachable, !dbg !265
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.new_split([2 x i64] %0, [2 x i64] %1, i64 %2, i8 %3) #0 !dbg !308 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %result = alloca %"char[][]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[][]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !311, metadata !DIExpression()), !dbg !312
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !313, metadata !DIExpression()), !dbg !314
  store i64 %2, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !315, metadata !DIExpression()), !dbg !316
  store i8 %3, ptr %skip_empty, align 1
  call void @llvm.dbg.declare(metadata ptr %skip_empty, metadata !317, metadata !DIExpression()), !dbg !318
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !319
  %4 = load i64, ptr %ptradd, align 8, !dbg !319
  %lt = icmp ult i64 0, %4, !dbg !319
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !319

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.33, i64 83 }, ptr %taddr, align 8
  %5 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %6 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %taddr2, align 8
  %7 = load [2 x i64], ptr %taddr2, align 8
  %8 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %8([2 x i64] %5, [2 x i64] %6, [2 x i64] %7, i32 298), !dbg !319
  unreachable, !dbg !319

assert_ok:                                        ; preds = %entry
  %9 = load [2 x i64], ptr %s, align 8, !dbg !321
  %10 = load [2 x i64], ptr %needle, align 8, !dbg !321
  %11 = load i64, ptr %max, align 8, !dbg !321
  %12 = load [2 x i64], ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !321
  %13 = load i8, ptr %skip_empty, align 1, !dbg !321
  %14 = call [2 x i64] @std.core.String.split([2 x i64] %9, [2 x i64] %10, i64 %11, [2 x i64] %12, i8 %13) #5, !dbg !322
  store [2 x i64] %14, ptr %result, align 8
  %15 = load %"char[][]", ptr %result, align 8
  %ptradd3 = getelementptr inbounds i8, ptr %result, i64 8, !dbg !323
  %16 = load i64, ptr %ptradd3, align 8, !dbg !323
  %lt4 = icmp ult i64 0, %16, !dbg !323
  br i1 %lt4, label %assert_ok9, label %assert_fail5, !dbg !323

assert_fail5:                                     ; preds = %assert_ok
  store %"char[]" { ptr @.panic_msg.37, i64 34 }, ptr %taddr6, align 8
  %17 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr7, align 8
  %18 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.38, i64 9 }, ptr %taddr8, align 8
  %19 = load [2 x i64], ptr %taddr8, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 299), !dbg !323
  unreachable, !dbg !323

assert_ok9:                                       ; preds = %assert_ok
  store %"char[][]" %15, ptr %taddr10, align 8
  %21 = load [2 x i64], ptr %taddr10, align 8
  ret [2 x i64] %21
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.tsplit([2 x i64] %0, [2 x i64] %1, i64 %2, i8 %3) #0 !dbg !324 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %taddr = alloca %any, align 8
  %result = alloca %"char[][]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !325, metadata !DIExpression()), !dbg !326
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !327, metadata !DIExpression()), !dbg !328
  store i64 %2, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !329, metadata !DIExpression()), !dbg !330
  store i8 %3, ptr %skip_empty, align 1
  call void @llvm.dbg.declare(metadata ptr %skip_empty, metadata !331, metadata !DIExpression()), !dbg !332
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !333
  %i2nb = icmp eq ptr %4, null, !dbg !333
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !333

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !336
  br label %if.exit, !dbg !336

if.exit:                                          ; preds = %if.then, %entry
  %5 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !338
  %6 = insertvalue %any undef, ptr %5, 0, !dbg !335
  %7 = insertvalue %any %6, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !335
  %8 = load [2 x i64], ptr %s, align 8, !dbg !339
  %9 = load [2 x i64], ptr %needle, align 8, !dbg !339
  %10 = load i64, ptr %max, align 8, !dbg !339
  store %any %7, ptr %taddr, align 8
  %11 = load [2 x i64], ptr %taddr, align 8
  %12 = load i8, ptr %skip_empty, align 1
  %13 = call [2 x i64] @std.core.String.split([2 x i64] %8, [2 x i64] %9, i64 %10, [2 x i64] %11, i8 %12) #5, !dbg !340
  store [2 x i64] %13, ptr %result, align 8
  %14 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %14
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.split_to_buffer(ptr %0, [2 x i64] %1, [2 x i64] %2, [2 x i64] %3, i64 %4, i8 %5) #0 !dbg !341 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %buffer = alloca %"char[][]", align 8
  %max = alloca i64, align 8
  %skip_empty = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %max_capacity = alloca i64, align 8
  %i = alloca i64, align 8
  %no_more = alloca i8, align 1
  %index = alloca i64, align 8
  %index.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %res = alloca %"char[]", align 8
  %taddr4 = alloca i64, align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr10 = alloca %"any[]", align 8
  %taddr14 = alloca i64, align 8
  %taddr15 = alloca i64, align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  %varargslots19 = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 8
  %taddr36 = alloca %"any[]", align 8
  %taddr49 = alloca i64, align 8
  %taddr50 = alloca i64, align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %varargslots54 = alloca [2 x %any], align 8
  %taddr57 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr61 = alloca i64, align 8
  %taddr62 = alloca i64, align 8
  %taddr63 = alloca %"char[]", align 8
  %taddr64 = alloca %"char[]", align 8
  %taddr65 = alloca %"char[]", align 8
  %varargslots66 = alloca [2 x %any], align 8
  %taddr69 = alloca %"any[]", align 8
  %taddr75 = alloca i64, align 8
  %taddr76 = alloca i64, align 8
  %taddr77 = alloca %"char[]", align 8
  %taddr78 = alloca %"char[]", align 8
  %taddr79 = alloca %"char[]", align 8
  %varargslots80 = alloca [2 x %any], align 8
  %taddr83 = alloca %"any[]", align 8
  %taddr88 = alloca %"char[]", align 8
  %taddr89 = alloca %"char[]", align 8
  %taddr90 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !347, metadata !DIExpression()), !dbg !348
  store [2 x i64] %2, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !349, metadata !DIExpression()), !dbg !350
  store [2 x i64] %3, ptr %buffer, align 8
  call void @llvm.dbg.declare(metadata ptr %buffer, metadata !351, metadata !DIExpression()), !dbg !352
  store i64 %4, ptr %max, align 8
  call void @llvm.dbg.declare(metadata ptr %max, metadata !353, metadata !DIExpression()), !dbg !354
  store i8 %5, ptr %skip_empty, align 1
  call void @llvm.dbg.declare(metadata ptr %skip_empty, metadata !355, metadata !DIExpression()), !dbg !356
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !357
  %6 = load i64, ptr %ptradd, align 8, !dbg !357
  %lt = icmp ult i64 0, %6, !dbg !357
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !357

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.33, i64 83 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %8 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr2, align 8
  %9 = load [2 x i64], ptr %taddr2, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 323), !dbg !357
  unreachable, !dbg !357

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %max_capacity, metadata !359, metadata !DIExpression()), !dbg !360
  %ptradd3 = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !361
  %11 = load i64, ptr %ptradd3, align 8, !dbg !361
  store i64 %11, ptr %max_capacity, align 8, !dbg !361
  call void @llvm.dbg.declare(metadata ptr %i, metadata !362, metadata !DIExpression()), !dbg !363
  store i64 0, ptr %i, align 8, !dbg !364
  call void @llvm.dbg.declare(metadata ptr %no_more, metadata !365, metadata !DIExpression()), !dbg !366
  store i8 0, ptr %no_more, align 1, !dbg !367
  br label %loop.cond, !dbg !368

loop.cond:                                        ; preds = %checkok58, %if.then41, %assert_ok
  %12 = load i8, ptr %no_more, align 1, !dbg !369
  %13 = trunc i8 %12 to i1, !dbg !369
  %not = xor i1 %13, true, !dbg !369
  br i1 %not, label %loop.body, label %loop.exit, !dbg !369

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %index, metadata !371, metadata !DIExpression()), !dbg !373
  %14 = load i64, ptr %i, align 8, !dbg !374
  %15 = load i64, ptr %max, align 8, !dbg !375
  %sub = sub i64 %15, 1, !dbg !375
  %eq = icmp eq i64 %sub, %14, !dbg !374
  %check = icmp sge i64 %sub, 0, !dbg !374
  %siui-eq = and i1 %check, %eq, !dbg !374
  br i1 %siui-eq, label %cond.lhs, label %cond.rhs, !dbg !374

cond.lhs:                                         ; preds = %loop.body
  store i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), ptr %index.f, align 8, !dbg !376
  br label %after_assign, !dbg !376

cond.rhs:                                         ; preds = %loop.body
  %16 = load [2 x i64], ptr %s, align 8
  %17 = load [2 x i64], ptr %needle, align 8
  %18 = call i64 @std.core.String.index_of(ptr %retparam, [2 x i64] %16, [2 x i64] %17), !dbg !377
  %not_err = icmp eq i64 %18, 0, !dbg !377
  %19 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !377
  br i1 %19, label %after_check, label %assign_optional, !dbg !377

assign_optional:                                  ; preds = %cond.rhs
  store i64 %18, ptr %index.f, align 8, !dbg !377
  br label %after_assign, !dbg !377

after_check:                                      ; preds = %cond.rhs
  %20 = load i64, ptr %retparam, align 8, !dbg !377
  br label %cond.phi, !dbg !377

cond.phi:                                         ; preds = %after_check
  store i64 %20, ptr %index, align 8, !dbg !377
  store i64 0, ptr %index.f, align 8, !dbg !377
  br label %after_assign, !dbg !377

after_assign:                                     ; preds = %cond.phi, %assign_optional, %cond.lhs
  call void @llvm.dbg.declare(metadata ptr %res, metadata !378, metadata !DIExpression()), !dbg !379
  %load.err = load i64, ptr %index.f, align 8, !dbg !380
  %result = icmp eq i64 %load.err, 0, !dbg !380
  br i1 %result, label %if.then, label %if.else, !dbg !380

if.then:                                          ; preds = %after_assign
  %21 = load %"char[]", ptr %s, align 8, !dbg !381
  %22 = extractvalue %"char[]" %21, 0, !dbg !381
  %23 = extractvalue %"char[]" %21, 1, !dbg !383
  %gt = icmp ugt i64 0, %23, !dbg !383
  %24 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !383
  br i1 %24, label %panic, label %checkok, !dbg !383

checkok:                                          ; preds = %if.then
  %25 = load i64, ptr %index, align 8, !dbg !384
  %add = add i64 0, %25, !dbg !384
  %lt11 = icmp ult i64 %23, %add, !dbg !384
  %sub12 = sub i64 %add, 1, !dbg !384
  %26 = call i1 @llvm.expect.i1(i1 %lt11, i1 false), !dbg !384
  br i1 %26, label %panic13, label %checkok23, !dbg !384

checkok23:                                        ; preds = %checkok
  %size = sub i64 %add, 0, !dbg !381
  %27 = insertvalue %"char[]" undef, ptr %22, 0, !dbg !381
  %28 = insertvalue %"char[]" %27, i64 %size, 1, !dbg !381
  store %"char[]" %28, ptr %res, align 8, !dbg !381
  %29 = load %"char[]", ptr %s, align 8, !dbg !385
  %30 = extractvalue %"char[]" %29, 0, !dbg !385
  %31 = load i64, ptr %index, align 8, !dbg !386
  %ptradd24 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !387
  %32 = load i64, ptr %ptradd24, align 8, !dbg !387
  %add25 = add i64 %31, %32, !dbg !386
  %33 = extractvalue %"char[]" %29, 1, !dbg !386
  %gt26 = icmp ugt i64 %add25, %33, !dbg !386
  %34 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !386
  br i1 %34, label %panic27, label %checkok37, !dbg !386

checkok37:                                        ; preds = %checkok23
  %size38 = sub i64 %33, %add25, !dbg !385
  %ptradd39 = getelementptr inbounds i8, ptr %30, i64 %add25, !dbg !385
  %35 = insertvalue %"char[]" undef, ptr %ptradd39, 0, !dbg !385
  %36 = insertvalue %"char[]" %35, i64 %size38, 1, !dbg !385
  store %"char[]" %36, ptr %s, align 8, !dbg !385
  br label %if.exit, !dbg !385

if.else:                                          ; preds = %after_assign
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %res, ptr align 8 %s, i32 16, i1 false), !dbg !388
  store i8 1, ptr %no_more, align 1, !dbg !390
  br label %if.exit, !dbg !390

if.exit:                                          ; preds = %if.else, %checkok37
  %ptradd40 = getelementptr inbounds i8, ptr %res, i64 8, !dbg !391
  %37 = load i64, ptr %ptradd40, align 8, !dbg !391
  %i2nb = icmp eq i64 %37, 0, !dbg !391
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !391

and.rhs:                                          ; preds = %if.exit
  %38 = load i8, ptr %skip_empty, align 1, !dbg !392
  %39 = trunc i8 %38 to i1, !dbg !392
  br label %and.phi, !dbg !392

and.phi:                                          ; preds = %and.rhs, %if.exit
  %val = phi i1 [ false, %if.exit ], [ %39, %and.rhs ], !dbg !392
  br i1 %val, label %if.then41, label %if.exit42, !dbg !392

if.then41:                                        ; preds = %and.phi
  br label %loop.cond, !dbg !393

if.exit42:                                        ; preds = %and.phi
  %40 = load i64, ptr %i, align 8, !dbg !395
  %41 = load i64, ptr %max_capacity, align 8, !dbg !396
  %eq43 = icmp eq i64 %40, %41, !dbg !395
  br i1 %eq43, label %if.then44, label %if.exit45, !dbg !395

if.then44:                                        ; preds = %if.exit42
  ret i64 ptrtoint (ptr @"std.core.string.SplitResult$BUFFER_EXCEEDED" to i64), !dbg !397

if.exit45:                                        ; preds = %if.exit42
  %ptradd46 = getelementptr inbounds i8, ptr %buffer, i64 8, !dbg !399
  %42 = load i64, ptr %ptradd46, align 8, !dbg !399
  %43 = load ptr, ptr %buffer, align 8, !dbg !399
  %44 = load i64, ptr %i, align 8, !dbg !400
  %add47 = add i64 %44, 1, !dbg !400
  store i64 %add47, ptr %i, align 8, !dbg !400
  %ge = icmp uge i64 %44, %42, !dbg !400
  %45 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !400
  br i1 %45, label %panic48, label %checkok58, !dbg !400

checkok58:                                        ; preds = %if.exit45
  %ptroffset = getelementptr inbounds [16 x i8], ptr %43, i64 %44, !dbg !400
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptroffset, ptr align 8 %res, i32 16, i1 false), !dbg !401
  br label %loop.cond, !dbg !401

loop.exit:                                        ; preds = %loop.cond
  %46 = load %"char[][]", ptr %buffer, align 8, !dbg !402
  %47 = extractvalue %"char[][]" %46, 0, !dbg !402
  %48 = extractvalue %"char[][]" %46, 1, !dbg !403
  %gt59 = icmp ugt i64 0, %48, !dbg !403
  %49 = call i1 @llvm.expect.i1(i1 %gt59, i1 false), !dbg !403
  br i1 %49, label %panic60, label %checkok70, !dbg !403

checkok70:                                        ; preds = %loop.exit
  %50 = load i64, ptr %i, align 8, !dbg !404
  %add71 = add i64 0, %50, !dbg !404
  %lt72 = icmp ult i64 %48, %add71, !dbg !404
  %sub73 = sub i64 %add71, 1, !dbg !404
  %51 = call i1 @llvm.expect.i1(i1 %lt72, i1 false), !dbg !404
  br i1 %51, label %panic74, label %checkok84, !dbg !404

checkok84:                                        ; preds = %checkok70
  %size85 = sub i64 %add71, 0, !dbg !402
  %52 = insertvalue %"char[][]" undef, ptr %47, 0, !dbg !402
  %53 = insertvalue %"char[][]" %52, i64 %size85, 1, !dbg !402
  %54 = extractvalue %"char[][]" %53, 1, !dbg !405
  %lt86 = icmp ult i64 0, %54, !dbg !405
  br i1 %lt86, label %assert_ok91, label %assert_fail87, !dbg !405

assert_fail87:                                    ; preds = %checkok84
  store %"char[]" { ptr @.panic_msg.37, i64 34 }, ptr %taddr88, align 8
  %55 = load [2 x i64], ptr %taddr88, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr89, align 8
  %56 = load [2 x i64], ptr %taddr89, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr90, align 8
  %57 = load [2 x i64], ptr %taddr90, align 8
  %58 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %58([2 x i64] %55, [2 x i64] %56, [2 x i64] %57, i32 324), !dbg !405
  unreachable, !dbg !405

assert_ok91:                                      ; preds = %checkok84
  store %"char[][]" %53, ptr %0, align 8, !dbg !405
  ret i64 0, !dbg !405

panic:                                            ; preds = %if.then
  store i64 %23, ptr %taddr4, align 8
  %59 = insertvalue %any undef, ptr %taddr4, 0
  %60 = insertvalue %any %59, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr5, align 8
  %61 = insertvalue %any undef, ptr %taddr5, 0
  %62 = insertvalue %any %61, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr6, align 8
  %63 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr7, align 8
  %64 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr8, align 8
  %65 = load [2 x i64], ptr %taddr8, align 8
  store %any %60, ptr %varargslots, align 8
  %ptradd9 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %62, ptr %ptradd9, align 8
  %66 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %66, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr10, align 8
  %67 = load [2 x i64], ptr %taddr10, align 8
  call void @std.core.builtin.panicf([2 x i64] %63, [2 x i64] %64, [2 x i64] %65, i32 338, [2 x i64] %67), !dbg !381
  unreachable, !dbg !381

panic13:                                          ; preds = %checkok
  store i64 %sub12, ptr %taddr14, align 8
  %68 = insertvalue %any undef, ptr %taddr14, 0
  %69 = insertvalue %any %68, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %23, ptr %taddr15, align 8
  %70 = insertvalue %any undef, ptr %taddr15, 0
  %71 = insertvalue %any %70, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr16, align 8
  %72 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr17, align 8
  %73 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr18, align 8
  %74 = load [2 x i64], ptr %taddr18, align 8
  store %any %69, ptr %varargslots19, align 8
  %ptradd20 = getelementptr inbounds i8, ptr %varargslots19, i64 16
  store %any %71, ptr %ptradd20, align 8
  %75 = insertvalue %"any[]" undef, ptr %varargslots19, 0
  %"$$temp21" = insertvalue %"any[]" %75, i64 2, 1
  store %"any[]" %"$$temp21", ptr %taddr22, align 8
  %76 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %72, [2 x i64] %73, [2 x i64] %74, i32 338, [2 x i64] %76), !dbg !381
  unreachable, !dbg !381

panic27:                                          ; preds = %checkok23
  store i64 %33, ptr %taddr28, align 8
  %77 = insertvalue %any undef, ptr %taddr28, 0
  %78 = insertvalue %any %77, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add25, ptr %taddr29, align 8
  %79 = insertvalue %any undef, ptr %taddr29, 0
  %80 = insertvalue %any %79, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr30, align 8
  %81 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr31, align 8
  %82 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr32, align 8
  %83 = load [2 x i64], ptr %taddr32, align 8
  store %any %78, ptr %varargslots33, align 8
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %80, ptr %ptradd34, align 8
  %84 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %84, i64 2, 1
  store %"any[]" %"$$temp35", ptr %taddr36, align 8
  %85 = load [2 x i64], ptr %taddr36, align 8
  call void @std.core.builtin.panicf([2 x i64] %81, [2 x i64] %82, [2 x i64] %83, i32 339, [2 x i64] %85), !dbg !385
  unreachable, !dbg !385

panic48:                                          ; preds = %if.exit45
  store i64 %42, ptr %taddr49, align 8
  %86 = insertvalue %any undef, ptr %taddr49, 0
  %87 = insertvalue %any %86, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr50, align 8
  %88 = insertvalue %any undef, ptr %taddr50, 0
  %89 = insertvalue %any %88, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr51, align 8
  %90 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr52, align 8
  %91 = load [2 x i64], ptr %taddr52, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr53, align 8
  %92 = load [2 x i64], ptr %taddr53, align 8
  store %any %87, ptr %varargslots54, align 8
  %ptradd55 = getelementptr inbounds i8, ptr %varargslots54, i64 16
  store %any %89, ptr %ptradd55, align 8
  %93 = insertvalue %"any[]" undef, ptr %varargslots54, 0
  %"$$temp56" = insertvalue %"any[]" %93, i64 2, 1
  store %"any[]" %"$$temp56", ptr %taddr57, align 8
  %94 = load [2 x i64], ptr %taddr57, align 8
  call void @std.core.builtin.panicf([2 x i64] %90, [2 x i64] %91, [2 x i64] %92, i32 354, [2 x i64] %94), !dbg !400
  unreachable, !dbg !400

panic60:                                          ; preds = %loop.exit
  store i64 %48, ptr %taddr61, align 8
  %95 = insertvalue %any undef, ptr %taddr61, 0
  %96 = insertvalue %any %95, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr62, align 8
  %97 = insertvalue %any undef, ptr %taddr62, 0
  %98 = insertvalue %any %97, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr63, align 8
  %99 = load [2 x i64], ptr %taddr63, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr64, align 8
  %100 = load [2 x i64], ptr %taddr64, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr65, align 8
  %101 = load [2 x i64], ptr %taddr65, align 8
  store %any %96, ptr %varargslots66, align 8
  %ptradd67 = getelementptr inbounds i8, ptr %varargslots66, i64 16
  store %any %98, ptr %ptradd67, align 8
  %102 = insertvalue %"any[]" undef, ptr %varargslots66, 0
  %"$$temp68" = insertvalue %"any[]" %102, i64 2, 1
  store %"any[]" %"$$temp68", ptr %taddr69, align 8
  %103 = load [2 x i64], ptr %taddr69, align 8
  call void @std.core.builtin.panicf([2 x i64] %99, [2 x i64] %100, [2 x i64] %101, i32 356, [2 x i64] %103), !dbg !402
  unreachable, !dbg !402

panic74:                                          ; preds = %checkok70
  store i64 %sub73, ptr %taddr75, align 8
  %104 = insertvalue %any undef, ptr %taddr75, 0
  %105 = insertvalue %any %104, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %48, ptr %taddr76, align 8
  %106 = insertvalue %any undef, ptr %taddr76, 0
  %107 = insertvalue %any %106, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr77, align 8
  %108 = load [2 x i64], ptr %taddr77, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr78, align 8
  %109 = load [2 x i64], ptr %taddr78, align 8
  store %"char[]" { ptr @.func.39, i64 15 }, ptr %taddr79, align 8
  %110 = load [2 x i64], ptr %taddr79, align 8
  store %any %105, ptr %varargslots80, align 8
  %ptradd81 = getelementptr inbounds i8, ptr %varargslots80, i64 16
  store %any %107, ptr %ptradd81, align 8
  %111 = insertvalue %"any[]" undef, ptr %varargslots80, 0
  %"$$temp82" = insertvalue %"any[]" %111, i64 2, 1
  store %"any[]" %"$$temp82", ptr %taddr83, align 8
  %112 = load [2 x i64], ptr %taddr83, align 8
  call void @std.core.builtin.panicf([2 x i64] %108, [2 x i64] %109, [2 x i64] %110, i32 356, [2 x i64] %112), !dbg !402
  unreachable, !dbg !402
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i8 @std.core.String.contains([2 x i64] %0, [2 x i64] %1) #0 !dbg !406 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %blockret = alloca i8, align 1
  %temp_err = alloca i64, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !407, metadata !DIExpression()), !dbg !408
  store [2 x i64] %1, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !409, metadata !DIExpression()), !dbg !410
  br label %testblock

testblock:                                        ; preds = %entry
  %2 = load [2 x i64], ptr %s, align 8
  %3 = load [2 x i64], ptr %needle, align 8
  %4 = call i64 @std.core.String.index_of(ptr %retparam, [2 x i64] %2, [2 x i64] %3), !dbg !411
  %not_err = icmp eq i64 %4, 0, !dbg !411
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !411
  br i1 %5, label %after_check, label %assign_optional, !dbg !411

assign_optional:                                  ; preds = %testblock
  store i64 %4, ptr %temp_err, align 8, !dbg !411
  br label %end_block, !dbg !411

after_check:                                      ; preds = %testblock
  store i64 0, ptr %temp_err, align 8, !dbg !411
  br label %end_block, !dbg !411

end_block:                                        ; preds = %after_check, %assign_optional
  %6 = load i64, ptr %temp_err, align 8, !dbg !411
  %i2b = icmp ne i64 %6, 0, !dbg !411
  br i1 %i2b, label %if.then, label %if.exit, !dbg !411

if.then:                                          ; preds = %end_block
  store i8 0, ptr %blockret, align 1, !dbg !415
  br label %expr_block.exit, !dbg !415

if.exit:                                          ; preds = %end_block
  store i8 1, ptr %blockret, align 1, !dbg !416
  br label %expr_block.exit, !dbg !416

expr_block.exit:                                  ; preds = %if.exit, %if.then
  %7 = load i8, ptr %blockret, align 1, !dbg !416
  ret i8 %7, !dbg !416
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.index_of_char(ptr %0, [2 x i64] %1, i8 %2) #0 !dbg !417 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !421, metadata !DIExpression()), !dbg !422
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !423, metadata !DIExpression()), !dbg !424
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !425
  %3 = load i64, ptr %ptradd, align 8, !dbg !425
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !427, metadata !DIExpression()), !dbg !428
  store i64 0, ptr %.anon, align 8, !dbg !428
  br label %loop.cond, !dbg !428

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !428
  %lt = icmp ult i64 %4, %3, !dbg !428
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !428

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !429, metadata !DIExpression()), !dbg !431
  %5 = load i64, ptr %.anon, align 8, !dbg !431
  store i64 %5, ptr %i, align 8, !dbg !431
  call void @llvm.dbg.declare(metadata ptr %c, metadata !432, metadata !DIExpression()), !dbg !433
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !434
  %6 = load i64, ptr %ptradd1, align 8, !dbg !434
  %7 = load ptr, ptr %s, align 8, !dbg !434
  %8 = load i64, ptr %.anon, align 8, !dbg !431
  %ge = icmp uge i64 %8, %6, !dbg !431
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !431
  br i1 %9, label %panic, label %checkok, !dbg !431

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !431
  %10 = load i8, ptr %ptradd8, align 1, !dbg !431
  store i8 %10, ptr %c, align 1, !dbg !431
  %11 = load i8, ptr %c, align 1, !dbg !435
  %12 = load i8, ptr %needle, align 1, !dbg !437
  %eq = icmp eq i8 %11, %12, !dbg !435
  br i1 %eq, label %if.then, label %if.exit, !dbg !435

if.then:                                          ; preds = %checkok
  %13 = load i64, ptr %i, align 8, !dbg !438
  %14 = load i64, ptr %i, align 8, !dbg !439
  %ptradd9 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !440
  %15 = load i64, ptr %ptradd9, align 8, !dbg !440
  %lt10 = icmp ult i64 %14, %15, !dbg !439
  br i1 %lt10, label %assert_ok, label %assert_fail, !dbg !439

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr11, align 8
  %16 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr12, align 8
  %17 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.40, i64 13 }, ptr %taddr13, align 8
  %18 = load [2 x i64], ptr %taddr13, align 8
  %19 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %19([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 378), !dbg !439
  unreachable, !dbg !439

assert_ok:                                        ; preds = %if.then
  store i64 %13, ptr %0, align 8, !dbg !439
  ret i64 0, !dbg !439

if.exit:                                          ; preds = %checkok
  %20 = load i64, ptr %.anon, align 8, !dbg !428
  %addnuw = add nuw i64 %20, 1, !dbg !428
  store i64 %addnuw, ptr %.anon, align 8, !dbg !428
  br label %loop.cond, !dbg !428

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !441

panic:                                            ; preds = %loop.body
  store i64 %6, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %23 = insertvalue %any undef, ptr %taddr2, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %25 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %26 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.40, i64 13 }, ptr %taddr5, align 8
  %27 = load [2 x i64], ptr %taddr5, align 8
  store %any %22, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd6, align 8
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %29 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 384, [2 x i64] %29), !dbg !431
  unreachable, !dbg !431
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.index_of_chars(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !442 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %.anon10 = alloca i64, align 8
  %j = alloca i64, align 8
  %pin = alloca i8, align 1
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 8
  %taddr25 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !445, metadata !DIExpression()), !dbg !446
  store [2 x i64] %2, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !447, metadata !DIExpression()), !dbg !448
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !449
  %3 = load i64, ptr %ptradd, align 8, !dbg !449
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !451, metadata !DIExpression()), !dbg !452
  store i64 0, ptr %.anon, align 8, !dbg !452
  br label %loop.cond, !dbg !452

loop.cond:                                        ; preds = %loop.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !452
  %lt = icmp ult i64 %4, %3, !dbg !452
  br i1 %lt, label %loop.body, label %loop.exit34, !dbg !452

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !453, metadata !DIExpression()), !dbg !455
  %5 = load i64, ptr %.anon, align 8, !dbg !455
  store i64 %5, ptr %i, align 8, !dbg !455
  call void @llvm.dbg.declare(metadata ptr %c, metadata !456, metadata !DIExpression()), !dbg !457
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !458
  %6 = load i64, ptr %ptradd1, align 8, !dbg !458
  %7 = load ptr, ptr %s, align 8, !dbg !458
  %8 = load i64, ptr %.anon, align 8, !dbg !455
  %ge = icmp uge i64 %8, %6, !dbg !455
  %9 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !455
  br i1 %9, label %panic, label %checkok, !dbg !455

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %7, i64 %8, !dbg !455
  %10 = load i8, ptr %ptradd8, align 1, !dbg !455
  store i8 %10, ptr %c, align 1, !dbg !455
  %ptradd9 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !459
  %11 = load i64, ptr %ptradd9, align 8, !dbg !459
  call void @llvm.dbg.declare(metadata ptr %.anon10, metadata !462, metadata !DIExpression()), !dbg !463
  store i64 0, ptr %.anon10, align 8, !dbg !463
  br label %loop.cond11, !dbg !463

loop.cond11:                                      ; preds = %if.exit, %checkok
  %12 = load i64, ptr %.anon10, align 8, !dbg !463
  %lt12 = icmp ult i64 %12, %11, !dbg !463
  br i1 %lt12, label %loop.body13, label %loop.exit, !dbg !463

loop.body13:                                      ; preds = %loop.cond11
  call void @llvm.dbg.declare(metadata ptr %j, metadata !464, metadata !DIExpression()), !dbg !466
  %13 = load i64, ptr %.anon10, align 8, !dbg !466
  store i64 %13, ptr %j, align 8, !dbg !466
  call void @llvm.dbg.declare(metadata ptr %pin, metadata !467, metadata !DIExpression()), !dbg !468
  %ptradd14 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !469
  %14 = load i64, ptr %ptradd14, align 8, !dbg !469
  %15 = load ptr, ptr %needle, align 8, !dbg !469
  %16 = load i64, ptr %.anon10, align 8, !dbg !466
  %ge15 = icmp uge i64 %16, %14, !dbg !466
  %17 = call i1 @llvm.expect.i1(i1 %ge15, i1 false), !dbg !466
  br i1 %17, label %panic16, label %checkok26, !dbg !466

checkok26:                                        ; preds = %loop.body13
  %ptradd27 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !466
  %18 = load i8, ptr %ptradd27, align 1, !dbg !466
  store i8 %18, ptr %pin, align 1, !dbg !466
  %19 = load i8, ptr %c, align 1, !dbg !470
  %20 = load i8, ptr %pin, align 1, !dbg !472
  %eq = icmp eq i8 %19, %20, !dbg !470
  br i1 %eq, label %if.then, label %if.exit, !dbg !470

if.then:                                          ; preds = %checkok26
  %21 = load i64, ptr %i, align 8, !dbg !473
  %22 = load i64, ptr %i, align 8, !dbg !474
  %ptradd28 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !475
  %23 = load i64, ptr %ptradd28, align 8, !dbg !475
  %lt29 = icmp ult i64 %22, %23, !dbg !474
  br i1 %lt29, label %assert_ok, label %assert_fail, !dbg !474

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr30, align 8
  %24 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr31, align 8
  %25 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.42, i64 14 }, ptr %taddr32, align 8
  %26 = load [2 x i64], ptr %taddr32, align 8
  %27 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %27([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 397), !dbg !474
  unreachable, !dbg !474

assert_ok:                                        ; preds = %if.then
  store i64 %21, ptr %0, align 8, !dbg !474
  ret i64 0, !dbg !474

if.exit:                                          ; preds = %checkok26
  %28 = load i64, ptr %.anon10, align 8, !dbg !463
  %addnuw = add nuw i64 %28, 1, !dbg !463
  store i64 %addnuw, ptr %.anon10, align 8, !dbg !463
  br label %loop.cond11, !dbg !463

loop.exit:                                        ; preds = %loop.cond11
  %29 = load i64, ptr %.anon, align 8, !dbg !452
  %addnuw33 = add nuw i64 %29, 1, !dbg !452
  store i64 %addnuw33, ptr %.anon, align 8, !dbg !452
  br label %loop.cond, !dbg !452

loop.exit34:                                      ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !476

panic:                                            ; preds = %loop.body
  store i64 %6, ptr %taddr, align 8
  %30 = insertvalue %any undef, ptr %taddr, 0
  %31 = insertvalue %any %30, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %8, ptr %taddr2, align 8
  %32 = insertvalue %any undef, ptr %taddr2, 0
  %33 = insertvalue %any %32, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %34 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %35 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.42, i64 14 }, ptr %taddr5, align 8
  %36 = load [2 x i64], ptr %taddr5, align 8
  store %any %31, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %33, ptr %ptradd6, align 8
  %37 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %37, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %38 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %34, [2 x i64] %35, [2 x i64] %36, i32 403, [2 x i64] %38), !dbg !455
  unreachable, !dbg !455

panic16:                                          ; preds = %loop.body13
  store i64 %14, ptr %taddr17, align 8
  %39 = insertvalue %any undef, ptr %taddr17, 0
  %40 = insertvalue %any %39, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %16, ptr %taddr18, align 8
  %41 = insertvalue %any undef, ptr %taddr18, 0
  %42 = insertvalue %any %41, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr19, align 8
  %43 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr20, align 8
  %44 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.42, i64 14 }, ptr %taddr21, align 8
  %45 = load [2 x i64], ptr %taddr21, align 8
  store %any %40, ptr %varargslots22, align 8
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %42, ptr %ptradd23, align 8
  %46 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %46, i64 2, 1
  store %"any[]" %"$$temp24", ptr %taddr25, align 8
  %47 = load [2 x i64], ptr %taddr25, align 8
  call void @std.core.builtin.panicf([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 405, [2 x i64] %47), !dbg !466
  unreachable, !dbg !466
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.index_of_char_from(ptr %0, [2 x i64] %1, i8 %2, i64 %3) #0 !dbg !477 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %start_index = alloca i64, align 8
  %len = alloca i64, align 8
  %i = alloca i64, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !480, metadata !DIExpression()), !dbg !481
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !482, metadata !DIExpression()), !dbg !483
  store i64 %3, ptr %start_index, align 8
  call void @llvm.dbg.declare(metadata ptr %start_index, metadata !484, metadata !DIExpression()), !dbg !485
  call void @llvm.dbg.declare(metadata ptr %len, metadata !486, metadata !DIExpression()), !dbg !487
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !488
  %4 = load i64, ptr %ptradd, align 8, !dbg !488
  store i64 %4, ptr %len, align 8, !dbg !488
  %5 = load i64, ptr %len, align 8, !dbg !489
  %6 = load i64, ptr %start_index, align 8, !dbg !490
  %le = icmp ule i64 %5, %6, !dbg !489
  br i1 %le, label %if.then, label %if.exit, !dbg !489

if.then:                                          ; preds = %entry
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !491

if.exit:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %i, metadata !492, metadata !DIExpression()), !dbg !494
  %7 = load i64, ptr %start_index, align 8, !dbg !495
  store i64 %7, ptr %i, align 8, !dbg !495
  br label %loop.cond, !dbg !495

loop.cond:                                        ; preds = %if.exit15, %if.exit
  %8 = load i64, ptr %i, align 8, !dbg !496
  %9 = load i64, ptr %len, align 8, !dbg !497
  %lt = icmp ult i64 %8, %9, !dbg !496
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !496

loop.body:                                        ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !498
  %10 = load i64, ptr %ptradd1, align 8, !dbg !498
  %11 = load ptr, ptr %s, align 8, !dbg !498
  %12 = load i64, ptr %i, align 8, !dbg !500
  %ge = icmp uge i64 %12, %10, !dbg !500
  %13 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !500
  br i1 %13, label %panic, label %checkok, !dbg !500

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %11, i64 %12, !dbg !500
  %14 = load i8, ptr %ptradd8, align 1, !dbg !500
  %15 = load i8, ptr %needle, align 1, !dbg !501
  %eq = icmp eq i8 %14, %15, !dbg !498
  br i1 %eq, label %if.then9, label %if.exit15, !dbg !498

if.then9:                                         ; preds = %checkok
  %16 = load i64, ptr %i, align 8, !dbg !502
  %17 = load i64, ptr %i, align 8, !dbg !503
  %ptradd10 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !504
  %18 = load i64, ptr %ptradd10, align 8, !dbg !504
  %lt11 = icmp ult i64 %17, %18, !dbg !503
  br i1 %lt11, label %assert_ok, label %assert_fail, !dbg !503

assert_fail:                                      ; preds = %if.then9
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr12, align 8
  %19 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr13, align 8
  %20 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.func.43, i64 18 }, ptr %taddr14, align 8
  %21 = load [2 x i64], ptr %taddr14, align 8
  %22 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %22([2 x i64] %19, [2 x i64] %20, [2 x i64] %21, i32 421), !dbg !503
  unreachable, !dbg !503

assert_ok:                                        ; preds = %if.then9
  store i64 %16, ptr %0, align 8, !dbg !503
  ret i64 0, !dbg !503

if.exit15:                                        ; preds = %checkok
  %23 = load i64, ptr %i, align 8, !dbg !505
  %add = add i64 %23, 1, !dbg !505
  store i64 %add, ptr %i, align 8, !dbg !505
  br label %loop.cond, !dbg !505

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !506

panic:                                            ; preds = %loop.body
  store i64 %10, ptr %taddr, align 8
  %24 = insertvalue %any undef, ptr %taddr, 0
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %12, ptr %taddr2, align 8
  %26 = insertvalue %any undef, ptr %taddr2, 0
  %27 = insertvalue %any %26, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %28 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %29 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.43, i64 18 }, ptr %taddr5, align 8
  %30 = load [2 x i64], ptr %taddr5, align 8
  store %any %25, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %27, ptr %ptradd6, align 8
  %31 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %31, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %32 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %28, [2 x i64] %29, [2 x i64] %30, i32 431, [2 x i64] %32), !dbg !500
  unreachable, !dbg !500
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.rindex_of_char(ptr %0, [2 x i64] %1, i8 %2) #0 !dbg !507 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca i8, align 1
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %reterr = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !508, metadata !DIExpression()), !dbg !509
  store i8 %2, ptr %needle, align 1
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !510, metadata !DIExpression()), !dbg !511
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !512, metadata !DIExpression()), !dbg !514
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !515
  %3 = load i64, ptr %ptradd, align 8, !dbg !515
  store i64 %3, ptr %.anon, align 8, !dbg !515
  br label %loop.cond, !dbg !515

loop.cond:                                        ; preds = %if.exit, %entry
  %4 = load i64, ptr %.anon, align 8, !dbg !514
  %gt = icmp ugt i64 %4, 0, !dbg !514
  br i1 %gt, label %loop.body, label %loop.exit, !dbg !514

loop.body:                                        ; preds = %loop.cond
  %5 = load i64, ptr %.anon, align 8, !dbg !514
  %subnuw = sub nuw i64 %5, 1, !dbg !514
  store i64 %subnuw, ptr %.anon, align 8, !dbg !514
  call void @llvm.dbg.declare(metadata ptr %i, metadata !516, metadata !DIExpression()), !dbg !518
  %6 = load i64, ptr %.anon, align 8, !dbg !518
  store i64 %6, ptr %i, align 8, !dbg !518
  call void @llvm.dbg.declare(metadata ptr %c, metadata !519, metadata !DIExpression()), !dbg !520
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !521
  %7 = load i64, ptr %ptradd1, align 8, !dbg !521
  %8 = load ptr, ptr %s, align 8, !dbg !521
  %9 = load i64, ptr %.anon, align 8, !dbg !518
  %ge = icmp uge i64 %9, %7, !dbg !518
  %10 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !518
  br i1 %10, label %panic, label %checkok, !dbg !518

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %8, i64 %9, !dbg !518
  %11 = load i8, ptr %ptradd8, align 1, !dbg !518
  store i8 %11, ptr %c, align 1, !dbg !518
  %12 = load i8, ptr %c, align 1, !dbg !522
  %13 = load i8, ptr %needle, align 1, !dbg !524
  %eq = icmp eq i8 %12, %13, !dbg !522
  br i1 %eq, label %if.then, label %if.exit, !dbg !522

if.then:                                          ; preds = %checkok
  %14 = load i64, ptr %i, align 8, !dbg !525
  %15 = load i64, ptr %i, align 8, !dbg !526
  %ptradd9 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !527
  %16 = load i64, ptr %ptradd9, align 8, !dbg !527
  %lt = icmp ult i64 %15, %16, !dbg !526
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !526

assert_fail:                                      ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr10, align 8
  %17 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %18 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.44, i64 14 }, ptr %taddr12, align 8
  %19 = load [2 x i64], ptr %taddr12, align 8
  %20 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %20([2 x i64] %17, [2 x i64] %18, [2 x i64] %19, i32 442), !dbg !526
  unreachable, !dbg !526

assert_ok:                                        ; preds = %if.then
  store i64 %14, ptr %0, align 8, !dbg !526
  ret i64 0, !dbg !526

if.exit:                                          ; preds = %checkok
  br label %loop.cond, !dbg !526

loop.exit:                                        ; preds = %loop.cond
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !528

panic:                                            ; preds = %loop.body
  store i64 %7, ptr %taddr, align 8
  %21 = insertvalue %any undef, ptr %taddr, 0
  %22 = insertvalue %any %21, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %9, ptr %taddr2, align 8
  %23 = insertvalue %any undef, ptr %taddr2, 0
  %24 = insertvalue %any %23, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %25 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %26 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.44, i64 14 }, ptr %taddr5, align 8
  %27 = load [2 x i64], ptr %taddr5, align 8
  store %any %22, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %24, ptr %ptradd6, align 8
  %28 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %28, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %29 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 448, [2 x i64] %29), !dbg !518
  unreachable, !dbg !518
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.index_of(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !529 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr14 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 8
  %taddr36 = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 8
  %taddr47 = alloca %"any[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %taddr70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 8
  %taddr74 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 8
  %taddr88 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %taddr97 = alloca %"char[]", align 8
  %varargslots98 = alloca [2 x %any], align 8
  %taddr101 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr116 = alloca %"char[]", align 8
  %taddr117 = alloca %"char[]", align 8
  %taddr118 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !532, metadata !DIExpression()), !dbg !533
  store [2 x i64] %2, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !534, metadata !DIExpression()), !dbg !535
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !536
  %3 = load i64, ptr %ptradd, align 8, !dbg !536
  %lt = icmp ult i64 0, %3, !dbg !536
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !536

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.45, i64 71 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %5 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr2, align 8
  %6 = load [2 x i64], ptr %taddr2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 462), !dbg !536
  unreachable, !dbg !536

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !538, metadata !DIExpression()), !dbg !539
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !540
  %8 = load i64, ptr %ptradd3, align 8, !dbg !540
  store i64 %8, ptr %needed, align 8, !dbg !540
  %9 = load i64, ptr %needed, align 8, !dbg !541
  %lt4 = icmp ult i64 0, %9, !dbg !541
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !541

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !542
  %10 = load i64, ptr %ptradd5, align 8, !dbg !542
  %11 = load i64, ptr %needed, align 8, !dbg !543
  %ge = icmp uge i64 %10, %11, !dbg !542
  br label %and.phi, !dbg !542

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !542
  br i1 %val, label %if.then, label %if.exit120, !dbg !542

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !544, metadata !DIExpression()), !dbg !546
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !547
  %12 = load i64, ptr %ptradd6, align 8, !dbg !547
  %13 = load ptr, ptr %needle, align 8, !dbg !547
  %ge7 = icmp sge i64 0, %12, !dbg !548
  %14 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !548
  br i1 %14, label %panic, label %checkok, !dbg !548

checkok:                                          ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !548
  store i8 %15, ptr %first, align 1, !dbg !548
  %16 = load %"char[]", ptr %s, align 8, !dbg !549
  %17 = extractvalue %"char[]" %16, 0, !dbg !549
  %18 = extractvalue %"char[]" %16, 1, !dbg !551
  %gt = icmp ugt i64 0, %18, !dbg !551
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !551
  br i1 %19, label %panic15, label %checkok25, !dbg !551

checkok25:                                        ; preds = %checkok
  %20 = load i64, ptr %needed, align 8, !dbg !552
  %sub = sub i64 %18, %20, !dbg !552
  %gt26 = icmp ugt i64 0, %sub, !dbg !552
  %21 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !552
  br i1 %21, label %panic27, label %checkok37, !dbg !552

checkok37:                                        ; preds = %checkok25
  %le = icmp ule i64 %18, %sub, !dbg !549
  %22 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !549
  br i1 %22, label %panic38, label %checkok48, !dbg !549

checkok48:                                        ; preds = %checkok37
  %23 = add i64 %sub, 1, !dbg !549
  %size = sub i64 %23, 0, !dbg !549
  %24 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !549
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !549
  store %"char[]" %25, ptr %taddr49, align 8
  %checknull = icmp eq ptr %taddr49, null, !dbg !549
  %26 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !549
  br i1 %26, label %panic50, label %checkok54, !dbg !549

checkok54:                                        ; preds = %checkok48
  %ptradd55 = getelementptr inbounds i8, ptr %taddr49, i64 8, !dbg !549
  %27 = load i64, ptr %ptradd55, align 8, !dbg !549
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !553, metadata !DIExpression()), !dbg !554
  store i64 0, ptr %.anon, align 8, !dbg !554
  br label %loop.cond, !dbg !554

loop.cond:                                        ; preds = %if.exit, %checkok54
  %28 = load i64, ptr %.anon, align 8, !dbg !554
  %lt56 = icmp ult i64 %28, %27, !dbg !554
  br i1 %lt56, label %loop.body, label %loop.exit, !dbg !554

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %i, metadata !555, metadata !DIExpression()), !dbg !557
  %29 = load i64, ptr %.anon, align 8, !dbg !557
  store i64 %29, ptr %i, align 8, !dbg !557
  call void @llvm.dbg.declare(metadata ptr %c, metadata !558, metadata !DIExpression()), !dbg !559
  %checknull57 = icmp eq ptr %taddr49, null, !dbg !560
  %30 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !560
  br i1 %30, label %panic58, label %checkok62, !dbg !560

checkok62:                                        ; preds = %loop.body
  %ptradd63 = getelementptr inbounds i8, ptr %taddr49, i64 8, !dbg !560
  %31 = load i64, ptr %ptradd63, align 8, !dbg !560
  %32 = load ptr, ptr %taddr49, align 8, !dbg !560
  %33 = load i64, ptr %.anon, align 8, !dbg !557
  %ge64 = icmp uge i64 %33, %31, !dbg !557
  %34 = call i1 @llvm.expect.i1(i1 %ge64, i1 false), !dbg !557
  br i1 %34, label %panic65, label %checkok75, !dbg !557

checkok75:                                        ; preds = %checkok62
  %ptradd76 = getelementptr inbounds i8, ptr %32, i64 %33, !dbg !557
  %35 = load i8, ptr %ptradd76, align 1, !dbg !557
  store i8 %35, ptr %c, align 1, !dbg !557
  %36 = load i8, ptr %c, align 1, !dbg !561
  %37 = load i8, ptr %first, align 1, !dbg !563
  %eq = icmp eq i8 %36, %37, !dbg !561
  br i1 %eq, label %and.rhs77, label %and.phi110, !dbg !561

and.rhs77:                                        ; preds = %checkok75
  %38 = load %"char[]", ptr %s, align 8, !dbg !564
  %39 = extractvalue %"char[]" %38, 0, !dbg !564
  %40 = load i64, ptr %i, align 8, !dbg !565
  %41 = extractvalue %"char[]" %38, 1, !dbg !565
  %gt78 = icmp ugt i64 %40, %41, !dbg !565
  %42 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !565
  br i1 %42, label %panic79, label %checkok89, !dbg !565

checkok89:                                        ; preds = %and.rhs77
  %43 = load i64, ptr %needed, align 8, !dbg !566
  %add = add i64 %40, %43, !dbg !566
  %lt90 = icmp ult i64 %41, %add, !dbg !566
  %sub91 = sub i64 %add, 1, !dbg !566
  %44 = call i1 @llvm.expect.i1(i1 %lt90, i1 false), !dbg !566
  br i1 %44, label %panic92, label %checkok102, !dbg !566

checkok102:                                       ; preds = %checkok89
  %size103 = sub i64 %add, %40, !dbg !564
  %ptradd104 = getelementptr inbounds i8, ptr %39, i64 %40, !dbg !564
  %45 = insertvalue %"char[]" undef, ptr %ptradd104, 0, !dbg !564
  %46 = insertvalue %"char[]" %45, i64 %size103, 1, !dbg !564
  %47 = load %"char[]", ptr %needle, align 8, !dbg !567
  %48 = extractvalue %"char[]" %46, 1, !dbg !564
  %49 = extractvalue %"char[]" %47, 1, !dbg !564
  %50 = extractvalue %"char[]" %46, 0, !dbg !564
  %51 = extractvalue %"char[]" %47, 0, !dbg !564
  %eq105 = icmp eq i64 %48, %49, !dbg !564
  br i1 %eq105, label %slice_cmp_values, label %slice_cmp_exit, !dbg !564

slice_cmp_values:                                 ; preds = %checkok102
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %52 = load i64, ptr %cmp.idx, align 8
  %lt106 = icmp slt i64 %52, %48
  br i1 %lt106, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd107 = getelementptr inbounds i8, ptr %50, i64 %52
  %ptradd108 = getelementptr inbounds i8, ptr %51, i64 %52
  %53 = load i8, ptr %ptradd107, align 1
  %54 = load i8, ptr %ptradd108, align 1
  %eq109 = icmp eq i8 %53, %54
  %55 = add i64 %52, 1
  store i64 %55, ptr %cmp.idx, align 8
  br i1 %eq109, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok102
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok102 ], [ false, %slice_loop_comparison ]
  br label %and.phi110

and.phi110:                                       ; preds = %slice_cmp_exit, %checkok75
  %val111 = phi i1 [ false, %checkok75 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val111, label %if.then112, label %if.exit

if.then112:                                       ; preds = %and.phi110
  %56 = load i64, ptr %i, align 8, !dbg !568
  %57 = load i64, ptr %i, align 8, !dbg !569
  %ptradd113 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !570
  %58 = load i64, ptr %ptradd113, align 8, !dbg !570
  %lt114 = icmp ult i64 %57, %58, !dbg !569
  br i1 %lt114, label %assert_ok119, label %assert_fail115, !dbg !569

assert_fail115:                                   ; preds = %if.then112
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr116, align 8
  %59 = load [2 x i64], ptr %taddr116, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr117, align 8
  %60 = load [2 x i64], ptr %taddr117, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr118, align 8
  %61 = load [2 x i64], ptr %taddr118, align 8
  %62 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %62([2 x i64] %59, [2 x i64] %60, [2 x i64] %61, i32 461), !dbg !569
  unreachable, !dbg !569

assert_ok119:                                     ; preds = %if.then112
  store i64 %56, ptr %0, align 8, !dbg !569
  ret i64 0, !dbg !569

if.exit:                                          ; preds = %and.phi110
  %63 = load i64, ptr %.anon, align 8, !dbg !554
  %addnuw = add nuw i64 %63, 1, !dbg !554
  store i64 %addnuw, ptr %.anon, align 8, !dbg !554
  br label %loop.cond, !dbg !554

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit120, !dbg !554

if.exit120:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !571

panic:                                            ; preds = %if.then
  store i64 %12, ptr %taddr8, align 8
  %64 = insertvalue %any undef, ptr %taddr8, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %66 = insertvalue %any undef, ptr %taddr9, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr10, align 8
  %68 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %69 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr12, align 8
  %70 = load [2 x i64], ptr %taddr12, align 8
  store %any %65, ptr %varargslots, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %67, ptr %ptradd13, align 8
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr14, align 8
  %72 = load [2 x i64], ptr %taddr14, align 8
  call void @std.core.builtin.panicf([2 x i64] %68, [2 x i64] %69, [2 x i64] %70, i32 471, [2 x i64] %72), !dbg !548
  unreachable, !dbg !548

panic15:                                          ; preds = %checkok
  store i64 %18, ptr %taddr16, align 8
  %73 = insertvalue %any undef, ptr %taddr16, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr17, align 8
  %75 = insertvalue %any undef, ptr %taddr17, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr18, align 8
  %77 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %78 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr20, align 8
  %79 = load [2 x i64], ptr %taddr20, align 8
  store %any %74, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %76, ptr %ptradd22, align 8
  %80 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %81 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 472, [2 x i64] %81), !dbg !549
  unreachable, !dbg !549

panic27:                                          ; preds = %checkok25
  store i64 0, ptr %taddr28, align 8
  %82 = insertvalue %any undef, ptr %taddr28, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr29, align 8
  %84 = insertvalue %any undef, ptr %taddr29, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.47, i64 44 }, ptr %taddr30, align 8
  %86 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr31, align 8
  %87 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr32, align 8
  %88 = load [2 x i64], ptr %taddr32, align 8
  store %any %83, ptr %varargslots33, align 8
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %85, ptr %ptradd34, align 8
  %89 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp35", ptr %taddr36, align 8
  %90 = load [2 x i64], ptr %taddr36, align 8
  call void @std.core.builtin.panicf([2 x i64] %86, [2 x i64] %87, [2 x i64] %88, i32 472, [2 x i64] %90), !dbg !549
  unreachable, !dbg !549

panic38:                                          ; preds = %checkok37
  store i64 %sub, ptr %taddr39, align 8
  %91 = insertvalue %any undef, ptr %taddr39, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr40, align 8
  %93 = insertvalue %any undef, ptr %taddr40, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr41, align 8
  %95 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr42, align 8
  %96 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr43, align 8
  %97 = load [2 x i64], ptr %taddr43, align 8
  store %any %92, ptr %varargslots44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %94, ptr %ptradd45, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp46", ptr %taddr47, align 8
  %99 = load [2 x i64], ptr %taddr47, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 472, [2 x i64] %99), !dbg !549
  unreachable, !dbg !549

panic50:                                          ; preds = %checkok48
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %taddr51, align 8
  %100 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr52, align 8
  %101 = load [2 x i64], ptr %taddr52, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr53, align 8
  %102 = load [2 x i64], ptr %taddr53, align 8
  %103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %103([2 x i64] %100, [2 x i64] %101, [2 x i64] %102, i32 472), !dbg !549
  unreachable, !dbg !549

panic58:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %taddr59, align 8
  %104 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr60, align 8
  %105 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr61, align 8
  %106 = load [2 x i64], ptr %taddr61, align 8
  %107 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %107([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 472), !dbg !560
  unreachable, !dbg !560

panic65:                                          ; preds = %checkok62
  store i64 %31, ptr %taddr66, align 8
  %108 = insertvalue %any undef, ptr %taddr66, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %33, ptr %taddr67, align 8
  %110 = insertvalue %any undef, ptr %taddr67, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr68, align 8
  %112 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr69, align 8
  %113 = load [2 x i64], ptr %taddr69, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr70, align 8
  %114 = load [2 x i64], ptr %taddr70, align 8
  store %any %109, ptr %varargslots71, align 8
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %111, ptr %ptradd72, align 8
  %115 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp73", ptr %taddr74, align 8
  %116 = load [2 x i64], ptr %taddr74, align 8
  call void @std.core.builtin.panicf([2 x i64] %112, [2 x i64] %113, [2 x i64] %114, i32 472, [2 x i64] %116), !dbg !557
  unreachable, !dbg !557

panic79:                                          ; preds = %and.rhs77
  store i64 %41, ptr %taddr80, align 8
  %117 = insertvalue %any undef, ptr %taddr80, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %40, ptr %taddr81, align 8
  %119 = insertvalue %any undef, ptr %taddr81, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr82, align 8
  %121 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr83, align 8
  %122 = load [2 x i64], ptr %taddr83, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr84, align 8
  %123 = load [2 x i64], ptr %taddr84, align 8
  store %any %118, ptr %varargslots85, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %120, ptr %ptradd86, align 8
  %124 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp87", ptr %taddr88, align 8
  %125 = load [2 x i64], ptr %taddr88, align 8
  call void @std.core.builtin.panicf([2 x i64] %121, [2 x i64] %122, [2 x i64] %123, i32 474, [2 x i64] %125), !dbg !564
  unreachable, !dbg !564

panic92:                                          ; preds = %checkok89
  store i64 %sub91, ptr %taddr93, align 8
  %126 = insertvalue %any undef, ptr %taddr93, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr94, align 8
  %128 = insertvalue %any undef, ptr %taddr94, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr95, align 8
  %130 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr96, align 8
  %131 = load [2 x i64], ptr %taddr96, align 8
  store %"char[]" { ptr @.func.46, i64 8 }, ptr %taddr97, align 8
  %132 = load [2 x i64], ptr %taddr97, align 8
  store %any %127, ptr %varargslots98, align 8
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %129, ptr %ptradd99, align 8
  %133 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp100", ptr %taddr101, align 8
  %134 = load [2 x i64], ptr %taddr101, align 8
  call void @std.core.builtin.panicf([2 x i64] %130, [2 x i64] %131, [2 x i64] %132, i32 474, [2 x i64] %134), !dbg !564
  unreachable, !dbg !564
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.rindex_of(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !572 {
entry:
  %s = alloca %"char[]", align 8
  %needle = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %needed = alloca i64, align 8
  %first = alloca i8, align 1
  %taddr8 = alloca i64, align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr14 = alloca %"any[]", align 8
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots21 = alloca [2 x %any], align 8
  %taddr24 = alloca %"any[]", align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca i64, align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %taddr32 = alloca %"char[]", align 8
  %varargslots33 = alloca [2 x %any], align 8
  %taddr36 = alloca %"any[]", align 8
  %taddr39 = alloca i64, align 8
  %taddr40 = alloca i64, align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr43 = alloca %"char[]", align 8
  %varargslots44 = alloca [2 x %any], align 8
  %taddr47 = alloca %"any[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %taddr51 = alloca %"char[]", align 8
  %taddr52 = alloca %"char[]", align 8
  %taddr53 = alloca %"char[]", align 8
  %i = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr59 = alloca %"char[]", align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr66 = alloca i64, align 8
  %taddr67 = alloca i64, align 8
  %taddr68 = alloca %"char[]", align 8
  %taddr69 = alloca %"char[]", align 8
  %taddr70 = alloca %"char[]", align 8
  %varargslots71 = alloca [2 x %any], align 8
  %taddr74 = alloca %"any[]", align 8
  %taddr80 = alloca i64, align 8
  %taddr81 = alloca i64, align 8
  %taddr82 = alloca %"char[]", align 8
  %taddr83 = alloca %"char[]", align 8
  %taddr84 = alloca %"char[]", align 8
  %varargslots85 = alloca [2 x %any], align 8
  %taddr88 = alloca %"any[]", align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca i64, align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %taddr97 = alloca %"char[]", align 8
  %varargslots98 = alloca [2 x %any], align 8
  %taddr101 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr116 = alloca %"char[]", align 8
  %taddr117 = alloca %"char[]", align 8
  %taddr118 = alloca %"char[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !573, metadata !DIExpression()), !dbg !574
  store [2 x i64] %2, ptr %needle, align 8
  call void @llvm.dbg.declare(metadata ptr %needle, metadata !575, metadata !DIExpression()), !dbg !576
  %ptradd = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !577
  %3 = load i64, ptr %ptradd, align 8, !dbg !577
  %lt = icmp ult i64 0, %3, !dbg !577
  br i1 %lt, label %assert_ok, label %assert_fail, !dbg !577

assert_fail:                                      ; preds = %entry
  store %"char[]" { ptr @.panic_msg.45, i64 71 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %5 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr2, align 8
  %6 = load [2 x i64], ptr %taddr2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 487), !dbg !577
  unreachable, !dbg !577

assert_ok:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %needed, metadata !579, metadata !DIExpression()), !dbg !580
  %ptradd3 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !581
  %8 = load i64, ptr %ptradd3, align 8, !dbg !581
  store i64 %8, ptr %needed, align 8, !dbg !581
  %9 = load i64, ptr %needed, align 8, !dbg !582
  %lt4 = icmp ult i64 0, %9, !dbg !582
  br i1 %lt4, label %and.rhs, label %and.phi, !dbg !582

and.rhs:                                          ; preds = %assert_ok
  %ptradd5 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !583
  %10 = load i64, ptr %ptradd5, align 8, !dbg !583
  %11 = load i64, ptr %needed, align 8, !dbg !584
  %ge = icmp uge i64 %10, %11, !dbg !583
  br label %and.phi, !dbg !583

and.phi:                                          ; preds = %and.rhs, %assert_ok
  %val = phi i1 [ false, %assert_ok ], [ %ge, %and.rhs ], !dbg !583
  br i1 %val, label %if.then, label %if.exit120, !dbg !583

if.then:                                          ; preds = %and.phi
  call void @llvm.dbg.declare(metadata ptr %first, metadata !585, metadata !DIExpression()), !dbg !587
  %ptradd6 = getelementptr inbounds i8, ptr %needle, i64 8, !dbg !588
  %12 = load i64, ptr %ptradd6, align 8, !dbg !588
  %13 = load ptr, ptr %needle, align 8, !dbg !588
  %ge7 = icmp sge i64 0, %12, !dbg !589
  %14 = call i1 @llvm.expect.i1(i1 %ge7, i1 false), !dbg !589
  br i1 %14, label %panic, label %checkok, !dbg !589

checkok:                                          ; preds = %if.then
  %15 = load i8, ptr %13, align 1, !dbg !589
  store i8 %15, ptr %first, align 1, !dbg !589
  %16 = load %"char[]", ptr %s, align 8, !dbg !590
  %17 = extractvalue %"char[]" %16, 0, !dbg !590
  %18 = extractvalue %"char[]" %16, 1, !dbg !592
  %gt = icmp ugt i64 0, %18, !dbg !592
  %19 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !592
  br i1 %19, label %panic15, label %checkok25, !dbg !592

checkok25:                                        ; preds = %checkok
  %20 = load i64, ptr %needed, align 8, !dbg !593
  %sub = sub i64 %18, %20, !dbg !593
  %gt26 = icmp ugt i64 0, %sub, !dbg !593
  %21 = call i1 @llvm.expect.i1(i1 %gt26, i1 false), !dbg !593
  br i1 %21, label %panic27, label %checkok37, !dbg !593

checkok37:                                        ; preds = %checkok25
  %le = icmp ule i64 %18, %sub, !dbg !590
  %22 = call i1 @llvm.expect.i1(i1 %le, i1 false), !dbg !590
  br i1 %22, label %panic38, label %checkok48, !dbg !590

checkok48:                                        ; preds = %checkok37
  %23 = add i64 %sub, 1, !dbg !590
  %size = sub i64 %23, 0, !dbg !590
  %24 = insertvalue %"char[]" undef, ptr %17, 0, !dbg !590
  %25 = insertvalue %"char[]" %24, i64 %size, 1, !dbg !590
  store %"char[]" %25, ptr %taddr49, align 8
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !594, metadata !DIExpression()), !dbg !595
  %checknull = icmp eq ptr %taddr49, null, !dbg !590
  %26 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !590
  br i1 %26, label %panic50, label %checkok54, !dbg !590

checkok54:                                        ; preds = %checkok48
  %ptradd55 = getelementptr inbounds i8, ptr %taddr49, i64 8, !dbg !590
  %27 = load i64, ptr %ptradd55, align 8, !dbg !590
  store i64 %27, ptr %.anon, align 8, !dbg !590
  br label %loop.cond, !dbg !590

loop.cond:                                        ; preds = %if.exit, %checkok54
  %28 = load i64, ptr %.anon, align 8, !dbg !595
  %gt56 = icmp ugt i64 %28, 0, !dbg !595
  br i1 %gt56, label %loop.body, label %loop.exit, !dbg !595

loop.body:                                        ; preds = %loop.cond
  %29 = load i64, ptr %.anon, align 8, !dbg !595
  %subnuw = sub nuw i64 %29, 1, !dbg !595
  store i64 %subnuw, ptr %.anon, align 8, !dbg !595
  call void @llvm.dbg.declare(metadata ptr %i, metadata !596, metadata !DIExpression()), !dbg !598
  %30 = load i64, ptr %.anon, align 8, !dbg !598
  store i64 %30, ptr %i, align 8, !dbg !598
  call void @llvm.dbg.declare(metadata ptr %c, metadata !599, metadata !DIExpression()), !dbg !600
  %checknull57 = icmp eq ptr %taddr49, null, !dbg !601
  %31 = call i1 @llvm.expect.i1(i1 %checknull57, i1 false), !dbg !601
  br i1 %31, label %panic58, label %checkok62, !dbg !601

checkok62:                                        ; preds = %loop.body
  %ptradd63 = getelementptr inbounds i8, ptr %taddr49, i64 8, !dbg !601
  %32 = load i64, ptr %ptradd63, align 8, !dbg !601
  %33 = load ptr, ptr %taddr49, align 8, !dbg !601
  %34 = load i64, ptr %.anon, align 8, !dbg !598
  %ge64 = icmp uge i64 %34, %32, !dbg !598
  %35 = call i1 @llvm.expect.i1(i1 %ge64, i1 false), !dbg !598
  br i1 %35, label %panic65, label %checkok75, !dbg !598

checkok75:                                        ; preds = %checkok62
  %ptradd76 = getelementptr inbounds i8, ptr %33, i64 %34, !dbg !598
  %36 = load i8, ptr %ptradd76, align 1, !dbg !598
  store i8 %36, ptr %c, align 1, !dbg !598
  %37 = load i8, ptr %c, align 1, !dbg !602
  %38 = load i8, ptr %first, align 1, !dbg !604
  %eq = icmp eq i8 %37, %38, !dbg !602
  br i1 %eq, label %and.rhs77, label %and.phi110, !dbg !602

and.rhs77:                                        ; preds = %checkok75
  %39 = load %"char[]", ptr %s, align 8, !dbg !605
  %40 = extractvalue %"char[]" %39, 0, !dbg !605
  %41 = load i64, ptr %i, align 8, !dbg !606
  %42 = extractvalue %"char[]" %39, 1, !dbg !606
  %gt78 = icmp ugt i64 %41, %42, !dbg !606
  %43 = call i1 @llvm.expect.i1(i1 %gt78, i1 false), !dbg !606
  br i1 %43, label %panic79, label %checkok89, !dbg !606

checkok89:                                        ; preds = %and.rhs77
  %44 = load i64, ptr %needed, align 8, !dbg !607
  %add = add i64 %41, %44, !dbg !607
  %lt90 = icmp ult i64 %42, %add, !dbg !607
  %sub91 = sub i64 %add, 1, !dbg !607
  %45 = call i1 @llvm.expect.i1(i1 %lt90, i1 false), !dbg !607
  br i1 %45, label %panic92, label %checkok102, !dbg !607

checkok102:                                       ; preds = %checkok89
  %size103 = sub i64 %add, %41, !dbg !605
  %ptradd104 = getelementptr inbounds i8, ptr %40, i64 %41, !dbg !605
  %46 = insertvalue %"char[]" undef, ptr %ptradd104, 0, !dbg !605
  %47 = insertvalue %"char[]" %46, i64 %size103, 1, !dbg !605
  %48 = load %"char[]", ptr %needle, align 8, !dbg !608
  %49 = extractvalue %"char[]" %47, 1, !dbg !605
  %50 = extractvalue %"char[]" %48, 1, !dbg !605
  %51 = extractvalue %"char[]" %47, 0, !dbg !605
  %52 = extractvalue %"char[]" %48, 0, !dbg !605
  %eq105 = icmp eq i64 %49, %50, !dbg !605
  br i1 %eq105, label %slice_cmp_values, label %slice_cmp_exit, !dbg !605

slice_cmp_values:                                 ; preds = %checkok102
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %53 = load i64, ptr %cmp.idx, align 8
  %lt106 = icmp slt i64 %53, %49
  br i1 %lt106, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd107 = getelementptr inbounds i8, ptr %51, i64 %53
  %ptradd108 = getelementptr inbounds i8, ptr %52, i64 %53
  %54 = load i8, ptr %ptradd107, align 1
  %55 = load i8, ptr %ptradd108, align 1
  %eq109 = icmp eq i8 %54, %55
  %56 = add i64 %53, 1
  store i64 %56, ptr %cmp.idx, align 8
  br i1 %eq109, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %checkok102
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %checkok102 ], [ false, %slice_loop_comparison ]
  br label %and.phi110

and.phi110:                                       ; preds = %slice_cmp_exit, %checkok75
  %val111 = phi i1 [ false, %checkok75 ], [ %slice_cmp_phi, %slice_cmp_exit ]
  br i1 %val111, label %if.then112, label %if.exit

if.then112:                                       ; preds = %and.phi110
  %57 = load i64, ptr %i, align 8, !dbg !609
  %58 = load i64, ptr %i, align 8, !dbg !610
  %ptradd113 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !611
  %59 = load i64, ptr %ptradd113, align 8, !dbg !611
  %lt114 = icmp ult i64 %58, %59, !dbg !610
  br i1 %lt114, label %assert_ok119, label %assert_fail115, !dbg !610

assert_fail115:                                   ; preds = %if.then112
  store %"char[]" { ptr @.panic_msg.41, i64 34 }, ptr %taddr116, align 8
  %60 = load [2 x i64], ptr %taddr116, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr117, align 8
  %61 = load [2 x i64], ptr %taddr117, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr118, align 8
  %62 = load [2 x i64], ptr %taddr118, align 8
  %63 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %63([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 486), !dbg !610
  unreachable, !dbg !610

assert_ok119:                                     ; preds = %if.then112
  store i64 %57, ptr %0, align 8, !dbg !610
  ret i64 0, !dbg !610

if.exit:                                          ; preds = %and.phi110
  br label %loop.cond, !dbg !610

loop.exit:                                        ; preds = %loop.cond
  br label %if.exit120, !dbg !610

if.exit120:                                       ; preds = %loop.exit, %and.phi
  ret i64 ptrtoint (ptr @"std.core.builtin.SearchResult$MISSING" to i64), !dbg !612

panic:                                            ; preds = %if.then
  store i64 %12, ptr %taddr8, align 8
  %64 = insertvalue %any undef, ptr %taddr8, 0
  %65 = insertvalue %any %64, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr9, align 8
  %66 = insertvalue %any undef, ptr %taddr9, 0
  %67 = insertvalue %any %66, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr10, align 8
  %68 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %69 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr12, align 8
  %70 = load [2 x i64], ptr %taddr12, align 8
  store %any %65, ptr %varargslots, align 8
  %ptradd13 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %67, ptr %ptradd13, align 8
  %71 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %71, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr14, align 8
  %72 = load [2 x i64], ptr %taddr14, align 8
  call void @std.core.builtin.panicf([2 x i64] %68, [2 x i64] %69, [2 x i64] %70, i32 496, [2 x i64] %72), !dbg !589
  unreachable, !dbg !589

panic15:                                          ; preds = %checkok
  store i64 %18, ptr %taddr16, align 8
  %73 = insertvalue %any undef, ptr %taddr16, 0
  %74 = insertvalue %any %73, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr17, align 8
  %75 = insertvalue %any undef, ptr %taddr17, 0
  %76 = insertvalue %any %75, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr18, align 8
  %77 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %78 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr20, align 8
  %79 = load [2 x i64], ptr %taddr20, align 8
  store %any %74, ptr %varargslots21, align 8
  %ptradd22 = getelementptr inbounds i8, ptr %varargslots21, i64 16
  store %any %76, ptr %ptradd22, align 8
  %80 = insertvalue %"any[]" undef, ptr %varargslots21, 0
  %"$$temp23" = insertvalue %"any[]" %80, i64 2, 1
  store %"any[]" %"$$temp23", ptr %taddr24, align 8
  %81 = load [2 x i64], ptr %taddr24, align 8
  call void @std.core.builtin.panicf([2 x i64] %77, [2 x i64] %78, [2 x i64] %79, i32 497, [2 x i64] %81), !dbg !590
  unreachable, !dbg !590

panic27:                                          ; preds = %checkok25
  store i64 0, ptr %taddr28, align 8
  %82 = insertvalue %any undef, ptr %taddr28, 0
  %83 = insertvalue %any %82, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %sub, ptr %taddr29, align 8
  %84 = insertvalue %any undef, ptr %taddr29, 0
  %85 = insertvalue %any %84, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.47, i64 44 }, ptr %taddr30, align 8
  %86 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr31, align 8
  %87 = load [2 x i64], ptr %taddr31, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr32, align 8
  %88 = load [2 x i64], ptr %taddr32, align 8
  store %any %83, ptr %varargslots33, align 8
  %ptradd34 = getelementptr inbounds i8, ptr %varargslots33, i64 16
  store %any %85, ptr %ptradd34, align 8
  %89 = insertvalue %"any[]" undef, ptr %varargslots33, 0
  %"$$temp35" = insertvalue %"any[]" %89, i64 2, 1
  store %"any[]" %"$$temp35", ptr %taddr36, align 8
  %90 = load [2 x i64], ptr %taddr36, align 8
  call void @std.core.builtin.panicf([2 x i64] %86, [2 x i64] %87, [2 x i64] %88, i32 497, [2 x i64] %90), !dbg !590
  unreachable, !dbg !590

panic38:                                          ; preds = %checkok37
  store i64 %sub, ptr %taddr39, align 8
  %91 = insertvalue %any undef, ptr %taddr39, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %18, ptr %taddr40, align 8
  %93 = insertvalue %any undef, ptr %taddr40, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr41, align 8
  %95 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr42, align 8
  %96 = load [2 x i64], ptr %taddr42, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr43, align 8
  %97 = load [2 x i64], ptr %taddr43, align 8
  store %any %92, ptr %varargslots44, align 8
  %ptradd45 = getelementptr inbounds i8, ptr %varargslots44, i64 16
  store %any %94, ptr %ptradd45, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots44, 0
  %"$$temp46" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp46", ptr %taddr47, align 8
  %99 = load [2 x i64], ptr %taddr47, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 497, [2 x i64] %99), !dbg !590
  unreachable, !dbg !590

panic50:                                          ; preds = %checkok48
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %taddr51, align 8
  %100 = load [2 x i64], ptr %taddr51, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr52, align 8
  %101 = load [2 x i64], ptr %taddr52, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr53, align 8
  %102 = load [2 x i64], ptr %taddr53, align 8
  %103 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %103([2 x i64] %100, [2 x i64] %101, [2 x i64] %102, i32 497), !dbg !590
  unreachable, !dbg !590

panic58:                                          ; preds = %loop.body
  store %"char[]" { ptr @.panic_msg.48, i64 53 }, ptr %taddr59, align 8
  %104 = load [2 x i64], ptr %taddr59, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr60, align 8
  %105 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr61, align 8
  %106 = load [2 x i64], ptr %taddr61, align 8
  %107 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %107([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 497), !dbg !601
  unreachable, !dbg !601

panic65:                                          ; preds = %checkok62
  store i64 %32, ptr %taddr66, align 8
  %108 = insertvalue %any undef, ptr %taddr66, 0
  %109 = insertvalue %any %108, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %34, ptr %taddr67, align 8
  %110 = insertvalue %any undef, ptr %taddr67, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr68, align 8
  %112 = load [2 x i64], ptr %taddr68, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr69, align 8
  %113 = load [2 x i64], ptr %taddr69, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr70, align 8
  %114 = load [2 x i64], ptr %taddr70, align 8
  store %any %109, ptr %varargslots71, align 8
  %ptradd72 = getelementptr inbounds i8, ptr %varargslots71, i64 16
  store %any %111, ptr %ptradd72, align 8
  %115 = insertvalue %"any[]" undef, ptr %varargslots71, 0
  %"$$temp73" = insertvalue %"any[]" %115, i64 2, 1
  store %"any[]" %"$$temp73", ptr %taddr74, align 8
  %116 = load [2 x i64], ptr %taddr74, align 8
  call void @std.core.builtin.panicf([2 x i64] %112, [2 x i64] %113, [2 x i64] %114, i32 497, [2 x i64] %116), !dbg !598
  unreachable, !dbg !598

panic79:                                          ; preds = %and.rhs77
  store i64 %42, ptr %taddr80, align 8
  %117 = insertvalue %any undef, ptr %taddr80, 0
  %118 = insertvalue %any %117, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %41, ptr %taddr81, align 8
  %119 = insertvalue %any undef, ptr %taddr81, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr82, align 8
  %121 = load [2 x i64], ptr %taddr82, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr83, align 8
  %122 = load [2 x i64], ptr %taddr83, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr84, align 8
  %123 = load [2 x i64], ptr %taddr84, align 8
  store %any %118, ptr %varargslots85, align 8
  %ptradd86 = getelementptr inbounds i8, ptr %varargslots85, i64 16
  store %any %120, ptr %ptradd86, align 8
  %124 = insertvalue %"any[]" undef, ptr %varargslots85, 0
  %"$$temp87" = insertvalue %"any[]" %124, i64 2, 1
  store %"any[]" %"$$temp87", ptr %taddr88, align 8
  %125 = load [2 x i64], ptr %taddr88, align 8
  call void @std.core.builtin.panicf([2 x i64] %121, [2 x i64] %122, [2 x i64] %123, i32 499, [2 x i64] %125), !dbg !605
  unreachable, !dbg !605

panic92:                                          ; preds = %checkok89
  store i64 %sub91, ptr %taddr93, align 8
  %126 = insertvalue %any undef, ptr %taddr93, 0
  %127 = insertvalue %any %126, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %42, ptr %taddr94, align 8
  %128 = insertvalue %any undef, ptr %taddr94, 0
  %129 = insertvalue %any %128, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr95, align 8
  %130 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr96, align 8
  %131 = load [2 x i64], ptr %taddr96, align 8
  store %"char[]" { ptr @.func.49, i64 9 }, ptr %taddr97, align 8
  %132 = load [2 x i64], ptr %taddr97, align 8
  store %any %127, ptr %varargslots98, align 8
  %ptradd99 = getelementptr inbounds i8, ptr %varargslots98, i64 16
  store %any %129, ptr %ptradd99, align 8
  %133 = insertvalue %"any[]" undef, ptr %varargslots98, 0
  %"$$temp100" = insertvalue %"any[]" %133, i64 2, 1
  store %"any[]" %"$$temp100", ptr %taddr101, align 8
  %134 = load [2 x i64], ptr %taddr101, align 8
  call void @std.core.builtin.panicf([2 x i64] %130, [2 x i64] %131, [2 x i64] %132, i32 499, [2 x i64] %134), !dbg !605
  unreachable, !dbg !605
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.ZString.str_view(ptr %0) #0 !dbg !613 {
entry:
  %str = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !617, metadata !DIExpression()), !dbg !618
  %1 = load ptr, ptr %str, align 8, !dbg !619
  %2 = load ptr, ptr %str, align 8, !dbg !620
  %3 = call i64 @std.core.string.ZString.len(ptr %2), !dbg !620
  %add = add i64 0, %3, !dbg !620
  %size = sub i64 %add, 0, !dbg !620
  %4 = insertvalue %"char[]" undef, ptr %1, 0, !dbg !620
  %5 = insertvalue %"char[]" %4, i64 %size, 1, !dbg !620
  store %"char[]" %5, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  ret [2 x i64] %6
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.ZString.char_len(ptr %0) #0 !dbg !621 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !624, metadata !DIExpression()), !dbg !625
  call void @llvm.dbg.declare(metadata ptr %len, metadata !626, metadata !DIExpression()), !dbg !627
  store i64 0, ptr %len, align 8, !dbg !628
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !629, metadata !DIExpression()), !dbg !630
  %1 = load ptr, ptr %str, align 8, !dbg !631
  store ptr %1, ptr %ptr, align 8, !dbg !631
  br label %loop.cond, !dbg !632

loop.cond:                                        ; preds = %if.exit, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !633, metadata !DIExpression()), !dbg !635
  %2 = load ptr, ptr %ptr, align 8, !dbg !636
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !636
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !636
  %3 = load i8, ptr %2, align 1, !dbg !637
  store i8 %3, ptr %c, align 1, !dbg !637
  %i2b = icmp ne i8 %3, 0, !dbg !637
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !637

loop.body:                                        ; preds = %loop.cond
  %4 = load i8, ptr %c, align 1, !dbg !638
  %zext = zext i8 %4 to i32, !dbg !638
  %and = and i32 %zext, 192, !dbg !638
  %neq = icmp ne i32 %and, 128, !dbg !638
  br i1 %neq, label %if.then, label %if.exit, !dbg !638

if.then:                                          ; preds = %loop.body
  %5 = load i64, ptr %len, align 8, !dbg !640
  %add = add i64 %5, 1, !dbg !640
  store i64 %add, ptr %len, align 8, !dbg !640
  br label %if.exit, !dbg !640

if.exit:                                          ; preds = %if.then, %loop.body
  br label %loop.cond, !dbg !640

loop.exit:                                        ; preds = %loop.cond
  %6 = load i64, ptr %len, align 8, !dbg !641
  ret i64 %6, !dbg !641
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.ZString.len(ptr %0) #0 !dbg !642 {
entry:
  %str = alloca ptr, align 8
  %len = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  store ptr %0, ptr %str, align 8
  call void @llvm.dbg.declare(metadata ptr %str, metadata !643, metadata !DIExpression()), !dbg !644
  call void @llvm.dbg.declare(metadata ptr %len, metadata !645, metadata !DIExpression()), !dbg !646
  store i64 0, ptr %len, align 8, !dbg !647
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !648, metadata !DIExpression()), !dbg !649
  %1 = load ptr, ptr %str, align 8, !dbg !650
  store ptr %1, ptr %ptr, align 8, !dbg !650
  br label %loop.cond, !dbg !651

loop.cond:                                        ; preds = %loop.body, %entry
  call void @llvm.dbg.declare(metadata ptr %c, metadata !652, metadata !DIExpression()), !dbg !654
  %2 = load ptr, ptr %ptr, align 8, !dbg !655
  %ptradd_any = getelementptr i8, ptr %2, i8 1, !dbg !655
  store ptr %ptradd_any, ptr %ptr, align 8, !dbg !655
  %3 = load i8, ptr %2, align 1, !dbg !656
  store i8 %3, ptr %c, align 1, !dbg !656
  %i2b = icmp ne i8 %3, 0, !dbg !656
  br i1 %i2b, label %loop.body, label %loop.exit, !dbg !656

loop.body:                                        ; preds = %loop.cond
  %4 = load i64, ptr %len, align 8, !dbg !657
  %add = add i64 %4, 1, !dbg !657
  store i64 %add, ptr %len, align 8, !dbg !657
  br label %loop.cond, !dbg !657

loop.exit:                                        ; preds = %loop.cond
  %5 = load i64, ptr %len, align 8, !dbg !658
  ret i64 %5, !dbg !658
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.core.String.zstr_copy([2 x i64] %0, [2 x i64] %1) #0 !dbg !659 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %size3 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len12 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !662, metadata !DIExpression()), !dbg !663
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !664, metadata !DIExpression()), !dbg !665
  call void @llvm.dbg.declare(metadata ptr %len, metadata !666, metadata !DIExpression()), !dbg !667
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !668
  %2 = load i64, ptr %ptradd, align 8, !dbg !668
  store i64 %2, ptr %len, align 8, !dbg !668
  call void @llvm.dbg.declare(metadata ptr %str, metadata !669, metadata !DIExpression()), !dbg !670
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %3 = load i64, ptr %len, align 8, !dbg !671
  %add = add i64 %3, 1, !dbg !671
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size3, align 8
  %5 = load i64, ptr %size3, align 8, !dbg !672
  %i2nb = icmp eq i64 %5, 0, !dbg !672
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !672

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !677
  br label %expr_block.exit, !dbg !677

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator2, i64 8, !dbg !678
  %6 = load i64, ptr %ptradd4, align 8, !dbg !678
  %7 = inttoptr i64 %6 to ptr, !dbg !678
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd5, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %13 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr6, align 8
  %14 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr7, align 8
  %15 = load [2 x i64], ptr %taddr7, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 68), !dbg !680
  unreachable, !dbg !680

match:                                            ; preds = %11
  %17 = load ptr, ptr %allocator2, align 8
  %18 = load i64, ptr %size3, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !680
  %not_err = icmp eq i64 %19, 0, !dbg !680
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !680
  br i1 %20, label %after_check, label %assign_optional, !dbg !680

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !680
  br label %panic_block, !dbg !680

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !680
  store ptr %21, ptr %blockret, align 8, !dbg !680
  br label %expr_block.exit, !dbg !680

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !680

panic_block:                                      ; preds = %assign_optional
  %22 = insertvalue %any undef, ptr %error_var, 0, !dbg !680
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !680
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr8, align 8
  %24 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr9, align 8
  %25 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr10, align 8
  %26 = load [2 x i64], ptr %taddr10, align 8
  store %any %23, ptr %varargslots, align 8
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %28 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 57, [2 x i64] %28), !dbg !674
  unreachable, !dbg !674

noerr_block:                                      ; preds = %expr_block.exit
  %29 = load ptr, ptr %blockret, align 8, !dbg !674
  store ptr %29, ptr %str, align 8, !dbg !674
  %30 = load ptr, ptr %str, align 8, !dbg !681
  store ptr %30, ptr %dst, align 8
  %31 = load ptr, ptr %s, align 8, !dbg !682
  store ptr %31, ptr %src, align 8
  %32 = load i64, ptr %len, align 8
  store i64 %32, ptr %len12, align 8
  %33 = load i64, ptr %len12, align 8, !dbg !683
  %eq = icmp eq i64 0, %33, !dbg !683
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !683

or.rhs:                                           ; preds = %noerr_block
  %34 = load ptr, ptr %dst, align 8, !dbg !688
  %35 = load i64, ptr %len12, align 8, !dbg !689
  %ptradd_any = getelementptr i8, ptr %34, i64 %35, !dbg !689
  %36 = load ptr, ptr %src, align 8, !dbg !690
  %le = icmp ule ptr %ptradd_any, %36, !dbg !688
  br label %or.phi, !dbg !688

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !688
  br i1 %val, label %or.phi16, label %or.rhs13, !dbg !688

or.rhs13:                                         ; preds = %or.phi
  %37 = load ptr, ptr %src, align 8, !dbg !691
  %38 = load i64, ptr %len12, align 8, !dbg !692
  %ptradd_any14 = getelementptr i8, ptr %37, i64 %38, !dbg !692
  %39 = load ptr, ptr %dst, align 8, !dbg !693
  %le15 = icmp ule ptr %ptradd_any14, %39, !dbg !691
  br label %or.phi16, !dbg !691

or.phi16:                                         ; preds = %or.rhs13, %or.phi
  %val17 = phi i1 [ true, %or.phi ], [ %le15, %or.rhs13 ], !dbg !691
  br i1 %val17, label %assert_ok, label %assert_fail, !dbg !691

assert_fail:                                      ; preds = %or.phi16
  store %"char[]" { ptr @.panic_msg.51, i64 95 }, ptr %taddr18, align 8
  %40 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.52, i64 6 }, ptr %taddr19, align 8
  %41 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.50, i64 9 }, ptr %taddr20, align 8
  %42 = load [2 x i64], ptr %taddr20, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43([2 x i64] %40, [2 x i64] %41, [2 x i64] %42, i32 324), !dbg !683
  unreachable, !dbg !683

assert_ok:                                        ; preds = %or.phi16
  %44 = load ptr, ptr %dst, align 8, !dbg !694
  %45 = load ptr, ptr %src, align 8, !dbg !695
  %46 = load i64, ptr %len12, align 8, !dbg !696
  call void @llvm.memcpy.p0.p0.i64(ptr %44, ptr %45, i64 %46, i1 false), !dbg !697
  %47 = load ptr, ptr %str, align 8, !dbg !698
  %48 = load i64, ptr %len, align 8, !dbg !699
  %ptradd21 = getelementptr inbounds i8, ptr %47, i64 %48, !dbg !699
  store i8 0, ptr %ptradd21, align 1, !dbg !700
  %49 = load ptr, ptr %str, align 8, !dbg !701
  ret ptr %49, !dbg !701
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.concat([2 x i64] %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !702 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %full_len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator2 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size5 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr13 = alloca %"any[]", align 8
  %s1_len = alloca i64, align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len = alloca i64, align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr22 = alloca %"char[]", align 8
  %dst24 = alloca ptr, align 8
  %src25 = alloca ptr, align 8
  %len27 = alloca i64, align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %taddr42 = alloca %"char[]", align 8
  %taddr47 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %0, ptr %s1, align 8
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !705, metadata !DIExpression()), !dbg !706
  store [2 x i64] %1, ptr %s2, align 8
  call void @llvm.dbg.declare(metadata ptr %s2, metadata !707, metadata !DIExpression()), !dbg !708
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !709, metadata !DIExpression()), !dbg !710
  call void @llvm.dbg.declare(metadata ptr %full_len, metadata !711, metadata !DIExpression()), !dbg !712
  %ptradd = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !713
  %3 = load i64, ptr %ptradd, align 8, !dbg !713
  %ptradd1 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !714
  %4 = load i64, ptr %ptradd1, align 8, !dbg !714
  %add = add i64 %3, %4, !dbg !713
  store i64 %add, ptr %full_len, align 8, !dbg !713
  call void @llvm.dbg.declare(metadata ptr %str, metadata !715, metadata !DIExpression()), !dbg !716
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %full_len, align 8, !dbg !717
  %add3 = add i64 %5, 1, !dbg !717
  store i64 %add3, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator2, i32 16, i1 false)
  %6 = load i64, ptr %size, align 8
  store i64 %6, ptr %size5, align 8
  %7 = load i64, ptr %size5, align 8, !dbg !718
  %i2nb = icmp eq i64 %7, 0, !dbg !718
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !718

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !723
  br label %expr_block.exit, !dbg !723

if.exit:                                          ; preds = %entry
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !724
  %8 = load i64, ptr %ptradd6, align 8, !dbg !724
  %9 = inttoptr i64 %8 to ptr, !dbg !724
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd7, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr8, align 8
  %16 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.53, i64 6 }, ptr %taddr9, align 8
  %17 = load [2 x i64], ptr %taddr9, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 68), !dbg !726
  unreachable, !dbg !726

match:                                            ; preds = %13
  %19 = load ptr, ptr %allocator4, align 8
  %20 = load i64, ptr %size5, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !726
  %not_err = icmp eq i64 %21, 0, !dbg !726
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !726
  br i1 %22, label %after_check, label %assign_optional, !dbg !726

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !726
  br label %panic_block, !dbg !726

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !726
  store ptr %23, ptr %blockret, align 8, !dbg !726
  br label %expr_block.exit, !dbg !726

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !726

panic_block:                                      ; preds = %assign_optional
  %24 = insertvalue %any undef, ptr %error_var, 0, !dbg !726
  %25 = insertvalue %any %24, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !726
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr10, align 8
  %26 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr11, align 8
  %27 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.53, i64 6 }, ptr %taddr12, align 8
  %28 = load [2 x i64], ptr %taddr12, align 8
  store %any %25, ptr %varargslots, align 8
  %29 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %29, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr13, align 8
  %30 = load [2 x i64], ptr %taddr13, align 8
  call void @std.core.builtin.panicf([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 57, [2 x i64] %30), !dbg !720
  unreachable, !dbg !720

noerr_block:                                      ; preds = %expr_block.exit
  %31 = load ptr, ptr %blockret, align 8, !dbg !720
  store ptr %31, ptr %str, align 8, !dbg !720
  call void @llvm.dbg.declare(metadata ptr %s1_len, metadata !727, metadata !DIExpression()), !dbg !728
  %ptradd14 = getelementptr inbounds i8, ptr %s1, i64 8, !dbg !729
  %32 = load i64, ptr %ptradd14, align 8, !dbg !729
  store i64 %32, ptr %s1_len, align 8, !dbg !729
  %33 = load ptr, ptr %str, align 8, !dbg !730
  store ptr %33, ptr %dst, align 8
  %34 = load ptr, ptr %s1, align 8, !dbg !731
  store ptr %34, ptr %src, align 8
  %35 = load i64, ptr %s1_len, align 8
  store i64 %35, ptr %len, align 8
  %36 = load i64, ptr %len, align 8, !dbg !732
  %eq = icmp eq i64 0, %36, !dbg !732
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !732

or.rhs:                                           ; preds = %noerr_block
  %37 = load ptr, ptr %dst, align 8, !dbg !736
  %38 = load i64, ptr %len, align 8, !dbg !737
  %ptradd_any = getelementptr i8, ptr %37, i64 %38, !dbg !737
  %39 = load ptr, ptr %src, align 8, !dbg !738
  %le = icmp ule ptr %ptradd_any, %39, !dbg !736
  br label %or.phi, !dbg !736

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !736
  br i1 %val, label %or.phi18, label %or.rhs15, !dbg !736

or.rhs15:                                         ; preds = %or.phi
  %40 = load ptr, ptr %src, align 8, !dbg !739
  %41 = load i64, ptr %len, align 8, !dbg !740
  %ptradd_any16 = getelementptr i8, ptr %40, i64 %41, !dbg !740
  %42 = load ptr, ptr %dst, align 8, !dbg !741
  %le17 = icmp ule ptr %ptradd_any16, %42, !dbg !739
  br label %or.phi18, !dbg !739

or.phi18:                                         ; preds = %or.rhs15, %or.phi
  %val19 = phi i1 [ true, %or.phi ], [ %le17, %or.rhs15 ], !dbg !739
  br i1 %val19, label %assert_ok, label %assert_fail, !dbg !739

assert_fail:                                      ; preds = %or.phi18
  store %"char[]" { ptr @.panic_msg.51, i64 95 }, ptr %taddr20, align 8
  %43 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.file.52, i64 6 }, ptr %taddr21, align 8
  %44 = load [2 x i64], ptr %taddr21, align 8
  store %"char[]" { ptr @.func.53, i64 6 }, ptr %taddr22, align 8
  %45 = load [2 x i64], ptr %taddr22, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 324), !dbg !732
  unreachable, !dbg !732

assert_ok:                                        ; preds = %or.phi18
  %47 = load ptr, ptr %dst, align 8, !dbg !742
  %48 = load ptr, ptr %src, align 8, !dbg !743
  %49 = load i64, ptr %len, align 8, !dbg !744
  call void @llvm.memcpy.p0.p0.i64(ptr %47, ptr %48, i64 %49, i1 false), !dbg !745
  %50 = load ptr, ptr %str, align 8, !dbg !746
  %51 = load i64, ptr %s1_len, align 8, !dbg !747
  %ptradd_any23 = getelementptr i8, ptr %50, i64 %51, !dbg !747
  store ptr %ptradd_any23, ptr %dst24, align 8
  %52 = load ptr, ptr %s2, align 8, !dbg !748
  store ptr %52, ptr %src25, align 8
  %ptradd26 = getelementptr inbounds i8, ptr %s2, i64 8, !dbg !749
  %53 = load i64, ptr %ptradd26, align 8
  store i64 %53, ptr %len27, align 8
  %54 = load i64, ptr %len27, align 8, !dbg !750
  %eq28 = icmp eq i64 0, %54, !dbg !750
  br i1 %eq28, label %or.phi32, label %or.rhs29, !dbg !750

or.rhs29:                                         ; preds = %assert_ok
  %55 = load ptr, ptr %dst24, align 8, !dbg !754
  %56 = load i64, ptr %len27, align 8, !dbg !755
  %ptradd_any30 = getelementptr i8, ptr %55, i64 %56, !dbg !755
  %57 = load ptr, ptr %src25, align 8, !dbg !756
  %le31 = icmp ule ptr %ptradd_any30, %57, !dbg !754
  br label %or.phi32, !dbg !754

or.phi32:                                         ; preds = %or.rhs29, %assert_ok
  %val33 = phi i1 [ true, %assert_ok ], [ %le31, %or.rhs29 ], !dbg !754
  br i1 %val33, label %or.phi37, label %or.rhs34, !dbg !754

or.rhs34:                                         ; preds = %or.phi32
  %58 = load ptr, ptr %src25, align 8, !dbg !757
  %59 = load i64, ptr %len27, align 8, !dbg !758
  %ptradd_any35 = getelementptr i8, ptr %58, i64 %59, !dbg !758
  %60 = load ptr, ptr %dst24, align 8, !dbg !759
  %le36 = icmp ule ptr %ptradd_any35, %60, !dbg !757
  br label %or.phi37, !dbg !757

or.phi37:                                         ; preds = %or.rhs34, %or.phi32
  %val38 = phi i1 [ true, %or.phi32 ], [ %le36, %or.rhs34 ], !dbg !757
  br i1 %val38, label %assert_ok43, label %assert_fail39, !dbg !757

assert_fail39:                                    ; preds = %or.phi37
  store %"char[]" { ptr @.panic_msg.51, i64 95 }, ptr %taddr40, align 8
  %61 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.file.52, i64 6 }, ptr %taddr41, align 8
  %62 = load [2 x i64], ptr %taddr41, align 8
  store %"char[]" { ptr @.func.53, i64 6 }, ptr %taddr42, align 8
  %63 = load [2 x i64], ptr %taddr42, align 8
  %64 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %64([2 x i64] %61, [2 x i64] %62, [2 x i64] %63, i32 324), !dbg !750
  unreachable, !dbg !750

assert_ok43:                                      ; preds = %or.phi37
  %65 = load ptr, ptr %dst24, align 8, !dbg !760
  %66 = load ptr, ptr %src25, align 8, !dbg !761
  %67 = load i64, ptr %len27, align 8, !dbg !762
  call void @llvm.memcpy.p0.p0.i64(ptr %65, ptr %66, i64 %67, i1 false), !dbg !763
  %68 = load ptr, ptr %str, align 8, !dbg !764
  %69 = load i64, ptr %full_len, align 8, !dbg !765
  %ptradd44 = getelementptr inbounds i8, ptr %68, i64 %69, !dbg !765
  store i8 0, ptr %ptradd44, align 1, !dbg !766
  %70 = load ptr, ptr %str, align 8, !dbg !767
  %71 = load i64, ptr %full_len, align 8, !dbg !768
  %add45 = add i64 0, %71, !dbg !768
  %size46 = sub i64 %add45, 0, !dbg !768
  %72 = insertvalue %"char[]" undef, ptr %70, 0, !dbg !768
  %73 = insertvalue %"char[]" %72, i64 %size46, 1, !dbg !768
  store %"char[]" %73, ptr %taddr47, align 8
  %74 = load [2 x i64], ptr %taddr47, align 8
  ret [2 x i64] %74
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.tconcat([2 x i64] %0, [2 x i64] %1) #0 !dbg !769 {
entry:
  %s1 = alloca %"char[]", align 8
  %s2 = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s1, align 8
  call void @llvm.dbg.declare(metadata ptr %s1, metadata !770, metadata !DIExpression()), !dbg !771
  store [2 x i64] %1, ptr %s2, align 8
  call void @llvm.dbg.declare(metadata ptr %s2, metadata !772, metadata !DIExpression()), !dbg !773
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !774
  %i2nb = icmp eq ptr %2, null, !dbg !774
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !774

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !777
  br label %if.exit, !dbg !777

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !779
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !776
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !776
  %6 = load [2 x i64], ptr %s1, align 8, !dbg !776
  %7 = load [2 x i64], ptr %s2, align 8, !dbg !776
  store %any %5, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  %9 = call [2 x i64] @std.core.String.concat([2 x i64] %6, [2 x i64] %7, [2 x i64] %8), !dbg !780
  store [2 x i64] %9, ptr %result, align 8
  %10 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %10
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.core.String.zstr_tcopy([2 x i64] %0) #0 !dbg !781 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !784, metadata !DIExpression()), !dbg !785
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !786
  %i2nb = icmp eq ptr %1, null, !dbg !786
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !786

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !789
  br label %if.exit, !dbg !789

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !791
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !788
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !788
  %5 = load [2 x i64], ptr %s, align 8, !dbg !788
  store %any %4, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  %7 = call ptr @std.core.String.zstr_copy([2 x i64] %5, [2 x i64] %6) #5, !dbg !792
  ret ptr %7, !dbg !792
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.copy([2 x i64] %0, [2 x i64] %1) #0 !dbg !793 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %str = alloca ptr, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %size3 = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %taddr7 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %dst = alloca ptr, align 8
  %src = alloca ptr, align 8
  %len12 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !796, metadata !DIExpression()), !dbg !797
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !798, metadata !DIExpression()), !dbg !799
  call void @llvm.dbg.declare(metadata ptr %len, metadata !800, metadata !DIExpression()), !dbg !801
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !802
  %2 = load i64, ptr %ptradd, align 8, !dbg !802
  store i64 %2, ptr %len, align 8, !dbg !802
  call void @llvm.dbg.declare(metadata ptr %str, metadata !803, metadata !DIExpression()), !dbg !804
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %3 = load i64, ptr %len, align 8, !dbg !805
  %add = add i64 %3, 1, !dbg !805
  store i64 %add, ptr %size, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %4 = load i64, ptr %size, align 8
  store i64 %4, ptr %size3, align 8
  %5 = load i64, ptr %size3, align 8, !dbg !806
  %i2nb = icmp eq i64 %5, 0, !dbg !806
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !806

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !811
  br label %expr_block.exit, !dbg !811

if.exit:                                          ; preds = %entry
  %ptradd4 = getelementptr inbounds i8, ptr %allocator2, i64 8, !dbg !812
  %6 = load i64, ptr %ptradd4, align 8, !dbg !812
  %7 = inttoptr i64 %6 to ptr, !dbg !812
  %type = load ptr, ptr %.cachedtype, align 8
  %8 = icmp eq ptr %7, %type
  br i1 %8, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd5 = getelementptr inbounds i8, ptr %7, i64 16
  %9 = load ptr, ptr %ptradd5, align 8
  %10 = call ptr @.dyn_search(ptr %9, ptr @"$sel.acquire")
  store ptr %10, ptr %.inlinecache, align 8
  store ptr %7, ptr %.cachedtype, align 8
  br label %11

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %11

11:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %10, %cache_miss ]
  %12 = icmp eq ptr %fn_phi, null
  br i1 %12, label %missing_function, label %match

missing_function:                                 ; preds = %11
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %13 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr6, align 8
  %14 = load [2 x i64], ptr %taddr6, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %taddr7, align 8
  %15 = load [2 x i64], ptr %taddr7, align 8
  %16 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %16([2 x i64] %13, [2 x i64] %14, [2 x i64] %15, i32 68), !dbg !814
  unreachable, !dbg !814

match:                                            ; preds = %11
  %17 = load ptr, ptr %allocator2, align 8
  %18 = load i64, ptr %size3, align 8
  %19 = call i64 %fn_phi(ptr %retparam, ptr %17, i64 %18, i32 0, i64 0), !dbg !814
  %not_err = icmp eq i64 %19, 0, !dbg !814
  %20 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !814
  br i1 %20, label %after_check, label %assign_optional, !dbg !814

assign_optional:                                  ; preds = %match
  store i64 %19, ptr %error_var, align 8, !dbg !814
  br label %panic_block, !dbg !814

after_check:                                      ; preds = %match
  %21 = load ptr, ptr %retparam, align 8, !dbg !814
  store ptr %21, ptr %blockret, align 8, !dbg !814
  br label %expr_block.exit, !dbg !814

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !814

panic_block:                                      ; preds = %assign_optional
  %22 = insertvalue %any undef, ptr %error_var, 0, !dbg !814
  %23 = insertvalue %any %22, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !814
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr8, align 8
  %24 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr9, align 8
  %25 = load [2 x i64], ptr %taddr9, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %taddr10, align 8
  %26 = load [2 x i64], ptr %taddr10, align 8
  store %any %23, ptr %varargslots, align 8
  %27 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %27, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %28 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %24, [2 x i64] %25, [2 x i64] %26, i32 57, [2 x i64] %28), !dbg !808
  unreachable, !dbg !808

noerr_block:                                      ; preds = %expr_block.exit
  %29 = load ptr, ptr %blockret, align 8, !dbg !808
  store ptr %29, ptr %str, align 8, !dbg !808
  %30 = load ptr, ptr %str, align 8, !dbg !815
  store ptr %30, ptr %dst, align 8
  %31 = load ptr, ptr %s, align 8, !dbg !816
  store ptr %31, ptr %src, align 8
  %32 = load i64, ptr %len, align 8
  store i64 %32, ptr %len12, align 8
  %33 = load i64, ptr %len12, align 8, !dbg !817
  %eq = icmp eq i64 0, %33, !dbg !817
  br i1 %eq, label %or.phi, label %or.rhs, !dbg !817

or.rhs:                                           ; preds = %noerr_block
  %34 = load ptr, ptr %dst, align 8, !dbg !821
  %35 = load i64, ptr %len12, align 8, !dbg !822
  %ptradd_any = getelementptr i8, ptr %34, i64 %35, !dbg !822
  %36 = load ptr, ptr %src, align 8, !dbg !823
  %le = icmp ule ptr %ptradd_any, %36, !dbg !821
  br label %or.phi, !dbg !821

or.phi:                                           ; preds = %or.rhs, %noerr_block
  %val = phi i1 [ true, %noerr_block ], [ %le, %or.rhs ], !dbg !821
  br i1 %val, label %or.phi16, label %or.rhs13, !dbg !821

or.rhs13:                                         ; preds = %or.phi
  %37 = load ptr, ptr %src, align 8, !dbg !824
  %38 = load i64, ptr %len12, align 8, !dbg !825
  %ptradd_any14 = getelementptr i8, ptr %37, i64 %38, !dbg !825
  %39 = load ptr, ptr %dst, align 8, !dbg !826
  %le15 = icmp ule ptr %ptradd_any14, %39, !dbg !824
  br label %or.phi16, !dbg !824

or.phi16:                                         ; preds = %or.rhs13, %or.phi
  %val17 = phi i1 [ true, %or.phi ], [ %le15, %or.rhs13 ], !dbg !824
  br i1 %val17, label %assert_ok, label %assert_fail, !dbg !824

assert_fail:                                      ; preds = %or.phi16
  store %"char[]" { ptr @.panic_msg.51, i64 95 }, ptr %taddr18, align 8
  %40 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.52, i64 6 }, ptr %taddr19, align 8
  %41 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.54, i64 4 }, ptr %taddr20, align 8
  %42 = load [2 x i64], ptr %taddr20, align 8
  %43 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %43([2 x i64] %40, [2 x i64] %41, [2 x i64] %42, i32 324), !dbg !817
  unreachable, !dbg !817

assert_ok:                                        ; preds = %or.phi16
  %44 = load ptr, ptr %dst, align 8, !dbg !827
  %45 = load ptr, ptr %src, align 8, !dbg !828
  %46 = load i64, ptr %len12, align 8, !dbg !829
  call void @llvm.memcpy.p0.p0.i64(ptr %44, ptr %45, i64 %46, i1 false), !dbg !830
  %47 = load ptr, ptr %str, align 8, !dbg !831
  %48 = load i64, ptr %len, align 8, !dbg !832
  %ptradd21 = getelementptr inbounds i8, ptr %47, i64 %48, !dbg !832
  store i8 0, ptr %ptradd21, align 1, !dbg !833
  %49 = load ptr, ptr %str, align 8, !dbg !834
  %50 = load i64, ptr %len, align 8, !dbg !835
  %add22 = add i64 0, %50, !dbg !835
  %size23 = sub i64 %add22, 0, !dbg !835
  %51 = insertvalue %"char[]" undef, ptr %49, 0, !dbg !835
  %52 = insertvalue %"char[]" %51, i64 %size23, 1, !dbg !835
  store %"char[]" %52, ptr %taddr24, align 8
  %53 = load [2 x i64], ptr %taddr24, align 8
  ret [2 x i64] %53
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.free(ptr %0, [2 x i64] %1) #0 !dbg !836 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %s = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %taddr6 = alloca %"char[]", align 8
  %allocator8 = alloca %any, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %ptr = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8, !dbg !839
  %2 = icmp eq ptr %0, null, !dbg !839
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !839
  br i1 %3, label %panic, label %checkok, !dbg !839

checkok:                                          ; preds = %entry
  store ptr %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !840, metadata !DIExpression()), !dbg !841
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !842, metadata !DIExpression()), !dbg !843
  %4 = load ptr, ptr %s, align 8, !dbg !844
  %checknull = icmp eq ptr %4, null, !dbg !844
  %5 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !844
  br i1 %5, label %panic3, label %checkok7, !dbg !844

checkok7:                                         ; preds = %checkok
  %6 = load ptr, ptr %4, align 8, !dbg !844
  %i2nb = icmp eq ptr %6, null, !dbg !844
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !844

if.then:                                          ; preds = %checkok7
  ret void, !dbg !845

if.exit:                                          ; preds = %checkok7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator8, ptr align 8 %allocator, i32 16, i1 false)
  %7 = load ptr, ptr %s, align 8, !dbg !846
  %checknull9 = icmp eq ptr %7, null, !dbg !846
  %8 = call i1 @llvm.expect.i1(i1 %checknull9, i1 false), !dbg !846
  br i1 %8, label %panic10, label %checkok14, !dbg !846

checkok14:                                        ; preds = %if.exit
  %9 = load ptr, ptr %7, align 8, !dbg !846
  store ptr %9, ptr %ptr, align 8
  %10 = load ptr, ptr %ptr, align 8, !dbg !847
  %i2nb15 = icmp eq ptr %10, null, !dbg !847
  br i1 %i2nb15, label %if.then16, label %if.exit17, !dbg !847

if.then16:                                        ; preds = %checkok14
  br label %expr_block.exit, !dbg !850

if.exit17:                                        ; preds = %checkok14
  %ptradd = getelementptr inbounds i8, ptr %allocator8, i64 8, !dbg !851
  %11 = load i64, ptr %ptradd, align 8, !dbg !851
  %12 = inttoptr i64 %11 to ptr, !dbg !851
  %type = load ptr, ptr %.cachedtype, align 8, !dbg !839
  %13 = icmp eq ptr %12, %type, !dbg !839
  br i1 %13, label %cache_hit, label %cache_miss, !dbg !839

cache_miss:                                       ; preds = %if.exit17
  %ptradd18 = getelementptr inbounds i8, ptr %12, i64 16, !dbg !839
  %14 = load ptr, ptr %ptradd18, align 8, !dbg !839
  %15 = call ptr @.dyn_search(ptr %14, ptr @"$sel.release"), !dbg !839
  store ptr %15, ptr %.inlinecache, align 8, !dbg !839
  store ptr %12, ptr %.cachedtype, align 8, !dbg !839
  br label %16, !dbg !839

cache_hit:                                        ; preds = %if.exit17
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8, !dbg !839
  br label %16, !dbg !839

16:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %15, %cache_miss ], !dbg !839
  %17 = icmp eq ptr %fn_phi, null, !dbg !839
  br i1 %17, label %missing_function, label %match, !dbg !839

missing_function:                                 ; preds = %16
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %taddr19, align 8
  %18 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr20, align 8
  %19 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func.56, i64 4 }, ptr %taddr21, align 8
  %20 = load [2 x i64], ptr %taddr21, align 8
  %21 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %21([2 x i64] %18, [2 x i64] %19, [2 x i64] %20, i32 105), !dbg !852
  unreachable, !dbg !852

match:                                            ; preds = %16
  %22 = load ptr, ptr %allocator8, align 8, !dbg !852
  %23 = load ptr, ptr %ptr, align 8, !dbg !852
  call void %fn_phi(ptr %22, ptr %23, i8 0), !dbg !852
  br label %expr_block.exit, !dbg !852

expr_block.exit:                                  ; preds = %match, %if.then16
  %24 = load ptr, ptr %s, align 8, !dbg !853
  %checknull22 = icmp eq ptr %24, null, !dbg !853
  %25 = call i1 @llvm.expect.i1(i1 %checknull22, i1 false), !dbg !853
  br i1 %25, label %panic23, label %checkok27, !dbg !853

checkok27:                                        ; preds = %expr_block.exit
  store %"char[]" zeroinitializer, ptr %24, align 8, !dbg !854
  ret void, !dbg !854

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.55, i64 59 }, ptr %taddr, align 8
  %26 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %27 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.56, i64 4 }, ptr %taddr2, align 8
  %28 = load [2 x i64], ptr %taddr2, align 8
  %29 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %29([2 x i64] %26, [2 x i64] %27, [2 x i64] %28, i32 569), !dbg !841
  unreachable, !dbg !841

panic3:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.57, i64 42 }, ptr %taddr4, align 8
  %30 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr5, align 8
  %31 = load [2 x i64], ptr %taddr5, align 8
  store %"char[]" { ptr @.func.56, i64 4 }, ptr %taddr6, align 8
  %32 = load [2 x i64], ptr %taddr6, align 8
  %33 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %33([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 571), !dbg !844
  unreachable, !dbg !844

panic10:                                          ; preds = %if.exit
  store %"char[]" { ptr @.panic_msg.57, i64 42 }, ptr %taddr11, align 8
  %34 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr12, align 8
  %35 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.56, i64 4 }, ptr %taddr13, align 8
  %36 = load [2 x i64], ptr %taddr13, align 8
  %37 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %37([2 x i64] %34, [2 x i64] %35, [2 x i64] %36, i32 572), !dbg !846
  unreachable, !dbg !846

panic23:                                          ; preds = %expr_block.exit
  store %"char[]" { ptr @.panic_msg.57, i64 42 }, ptr %taddr24, align 8
  %38 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr25, align 8
  %39 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.56, i64 4 }, ptr %taddr26, align 8
  %40 = load [2 x i64], ptr %taddr26, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 573), !dbg !853
  unreachable, !dbg !853
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.tcopy([2 x i64] %0) #0 !dbg !855 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !858, metadata !DIExpression()), !dbg !859
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !860
  %i2nb = icmp eq ptr %1, null, !dbg !860
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !860

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !863
  br label %if.exit, !dbg !863

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !865
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !862
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !862
  %5 = load [2 x i64], ptr %s, align 8, !dbg !862
  store %any %4, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  %7 = call [2 x i64] @std.core.String.copy([2 x i64] %5, [2 x i64] %6) #5, !dbg !866
  store [2 x i64] %7, ptr %result, align 8
  %8 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %8
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.ZString.copy(ptr %0, [2 x i64] %1) #0 !dbg !867 {
entry:
  %z = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %result = alloca %"char[]", align 8
  %result1 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !870, metadata !DIExpression()), !dbg !871
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !872, metadata !DIExpression()), !dbg !873
  %2 = load ptr, ptr %z, align 8, !dbg !874
  %3 = call [2 x i64] @std.core.string.ZString.str_view(ptr %2), !dbg !874
  store [2 x i64] %3, ptr %result, align 8
  %4 = load [2 x i64], ptr %result, align 8, !dbg !875
  %5 = load [2 x i64], ptr %allocator, align 8, !dbg !875
  %6 = call [2 x i64] @std.core.String.copy([2 x i64] %4, [2 x i64] %5) #5, !dbg !874
  store [2 x i64] %6, ptr %result1, align 8
  %7 = load [2 x i64], ptr %result1, align 8
  ret [2 x i64] %7
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.ZString.tcopy(ptr %0) #0 !dbg !876 {
entry:
  %z = alloca ptr, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result1 = alloca %"char[]", align 8
  store ptr %0, ptr %z, align 8
  call void @llvm.dbg.declare(metadata ptr %z, metadata !877, metadata !DIExpression()), !dbg !878
  %1 = load ptr, ptr %z, align 8, !dbg !879
  %2 = call [2 x i64] @std.core.string.ZString.str_view(ptr %1), !dbg !879
  store [2 x i64] %2, ptr %result, align 8
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !880
  %i2nb = icmp eq ptr %3, null, !dbg !880
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !880

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !883
  br label %if.exit, !dbg !883

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !885
  %5 = insertvalue %any undef, ptr %4, 0, !dbg !882
  %6 = insertvalue %any %5, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !882
  %7 = load [2 x i64], ptr %result, align 8, !dbg !882
  store %any %6, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  %9 = call [2 x i64] @std.core.String.copy([2 x i64] %7, [2 x i64] %8) #5, !dbg !879
  store [2 x i64] %9, ptr %result1, align 8
  %10 = load [2 x i64], ptr %result1, align 8
  ret [2 x i64] %10
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_new_utf16(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !886 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %len16 = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr6 = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !897, metadata !DIExpression()), !dbg !898
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !899, metadata !DIExpression()), !dbg !900
  call void @llvm.dbg.declare(metadata ptr %len16, metadata !901, metadata !DIExpression()), !dbg !902
  %3 = load [2 x i64], ptr %s, align 8, !dbg !903
  %4 = call i64 @std.core.string.conv.utf16len_for_utf8([2 x i64] %3), !dbg !904
  store i64 %4, ptr %len16, align 8, !dbg !904
  call void @llvm.dbg.declare(metadata ptr %data, metadata !905, metadata !DIExpression()), !dbg !906
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len16, align 8, !dbg !907
  %add = add i64 %5, 1, !dbg !907
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %6 = load i64, ptr %elements, align 8, !dbg !908
  %mul = mul i64 2, %6, !dbg !911
  store i64 %mul, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !912
  %i2nb = icmp eq i64 %7, 0, !dbg !912
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !912

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !915
  br label %expr_block.exit, !dbg !915

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator2, i64 8, !dbg !916
  %8 = load i64, ptr %ptradd, align 8, !dbg !916
  %9 = inttoptr i64 %8 to ptr, !dbg !916
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd3, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.58, i64 12 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 68), !dbg !918
  unreachable, !dbg !918

match:                                            ; preds = %13
  %19 = load ptr, ptr %allocator2, align 8
  %20 = load i64, ptr %size, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !918
  %not_err = icmp eq i64 %21, 0, !dbg !918
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !918
  br i1 %22, label %after_check, label %assign_optional, !dbg !918

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !918
  br label %guard_block, !dbg !918

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !918
  store ptr %23, ptr %blockret, align 8, !dbg !918
  br label %expr_block.exit, !dbg !918

expr_block.exit:                                  ; preds = %after_check, %if.then
  %24 = load ptr, ptr %blockret, align 8, !dbg !918
  store ptr %24, ptr %taddr6, align 8
  %25 = load ptr, ptr %taddr6, align 8
  %26 = load i64, ptr %elements, align 8, !dbg !919
  %add7 = add i64 0, %26, !dbg !919
  %size8 = sub i64 %add7, 0, !dbg !919
  %27 = insertvalue %"ushort[]" undef, ptr %25, 0, !dbg !919
  %28 = insertvalue %"ushort[]" %27, i64 %size8, 1, !dbg !919
  br label %noerr_block, !dbg !919

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !919
  ret i64 %29, !dbg !919

noerr_block:                                      ; preds = %expr_block.exit
  %30 = extractvalue %"ushort[]" %28, 0, !dbg !919
  store ptr %30, ptr %data, align 8, !dbg !919
  %31 = load [2 x i64], ptr %s, align 8, !dbg !920
  %32 = load ptr, ptr %data, align 8, !dbg !920
  %33 = call i64 @std.core.string.conv.utf8to16_unsafe([2 x i64] %31, ptr %32), !dbg !921
  %not_err10 = icmp eq i64 %33, 0, !dbg !921
  %34 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !921
  br i1 %34, label %after_check12, label %assign_optional11, !dbg !921

assign_optional11:                                ; preds = %noerr_block
  store i64 %33, ptr %error_var9, align 8, !dbg !921
  br label %guard_block13, !dbg !921

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !921

guard_block13:                                    ; preds = %assign_optional11
  %35 = load i64, ptr %error_var9, align 8, !dbg !921
  ret i64 %35, !dbg !921

noerr_block14:                                    ; preds = %after_check12
  %36 = load ptr, ptr %data, align 8, !dbg !922
  %37 = load i64, ptr %len16, align 8, !dbg !923
  %ptroffset = getelementptr inbounds [2 x i8], ptr %36, i64 %37, !dbg !923
  store i16 0, ptr %ptroffset, align 2, !dbg !924
  %38 = load ptr, ptr %data, align 8, !dbg !925
  %39 = load i64, ptr %len16, align 8, !dbg !926
  %add15 = add i64 0, %39, !dbg !926
  %size16 = sub i64 %add15, 0, !dbg !926
  %40 = insertvalue %"ushort[]" undef, ptr %38, 0, !dbg !926
  %41 = insertvalue %"ushort[]" %40, i64 %size16, 1, !dbg !926
  store %"ushort[]" %41, ptr %0, align 8, !dbg !926
  ret i64 0, !dbg !926
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_temp_utf16(ptr %0, [2 x i64] %1) #0 !dbg !927 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  %taddr = alloca %any, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !930, metadata !DIExpression()), !dbg !931
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !932
  %i2nb = icmp eq ptr %2, null, !dbg !932
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !932

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !935
  br label %if.exit, !dbg !935

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !937
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !934
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !934
  %6 = load [2 x i64], ptr %s, align 8
  store %any %5, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  %8 = call i64 @std.core.String.to_new_utf16(ptr %retparam, [2 x i64] %6, [2 x i64] %7), !dbg !938
  %not_err = icmp eq i64 %8, 0, !dbg !938
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !938
  br i1 %9, label %after_check, label %assign_optional, !dbg !938

assign_optional:                                  ; preds = %if.exit
  store i64 %8, ptr %reterr, align 8, !dbg !938
  br label %err_retblock, !dbg !938

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !938
  ret i64 0, !dbg !938

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !938
  ret i64 %10, !dbg !938
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_wstring(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !939 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"ushort[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !945, metadata !DIExpression()), !dbg !946
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !947, metadata !DIExpression()), !dbg !948
  %3 = load [2 x i64], ptr %s, align 8
  %4 = load [2 x i64], ptr %allocator, align 8
  %5 = call i64 @std.core.String.to_new_utf16(ptr %retparam, [2 x i64] %3, [2 x i64] %4), !dbg !949
  %not_err = icmp eq i64 %5, 0, !dbg !949
  %6 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !949
  br i1 %6, label %after_check, label %assign_optional, !dbg !949

assign_optional:                                  ; preds = %entry
  store i64 %5, ptr %reterr, align 8, !dbg !949
  br label %err_retblock, !dbg !949

after_check:                                      ; preds = %entry
  %7 = load ptr, ptr %retparam, align 8, !dbg !949
  store ptr %7, ptr %0, align 8, !dbg !949
  ret i64 0, !dbg !949

err_retblock:                                     ; preds = %assign_optional
  %8 = load i64, ptr %reterr, align 8, !dbg !949
  ret i64 %8, !dbg !949
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_temp_wstring(ptr %0, [2 x i64] %1) #0 !dbg !950 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  %taddr = alloca %any, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !953, metadata !DIExpression()), !dbg !954
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !955
  %i2nb = icmp eq ptr %2, null, !dbg !955
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !955

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !958
  br label %if.exit, !dbg !958

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !960
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !957
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !957
  %6 = load [2 x i64], ptr %s, align 8
  store %any %5, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  %8 = call i64 @std.core.String.to_wstring(ptr %retparam, [2 x i64] %6, [2 x i64] %7), !dbg !961
  %not_err = icmp eq i64 %8, 0, !dbg !961
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !961
  br i1 %9, label %after_check, label %assign_optional, !dbg !961

assign_optional:                                  ; preds = %if.exit
  store i64 %8, ptr %reterr, align 8, !dbg !961
  br label %err_retblock, !dbg !961

after_check:                                      ; preds = %if.exit
  %10 = load ptr, ptr %retparam, align 8, !dbg !961
  store ptr %10, ptr %0, align 8, !dbg !961
  ret i64 0, !dbg !961

err_retblock:                                     ; preds = %assign_optional
  %11 = load i64, ptr %reterr, align 8, !dbg !961
  ret i64 %11, !dbg !961
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_new_wstring(ptr %0, [2 x i64] %1) #0 !dbg !962 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca ptr, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !963, metadata !DIExpression()), !dbg !964
  %2 = load [2 x i64], ptr %s, align 8
  %3 = load [2 x i64], ptr @std.core.mem.allocator.thread_allocator, align 8
  %4 = call i64 @std.core.String.to_wstring(ptr %retparam, [2 x i64] %2, [2 x i64] %3), !dbg !965
  %not_err = icmp eq i64 %4, 0, !dbg !965
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !965
  br i1 %5, label %after_check, label %assign_optional, !dbg !965

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %reterr, align 8, !dbg !965
  br label %err_retblock, !dbg !965

after_check:                                      ; preds = %entry
  %6 = load ptr, ptr %retparam, align 8, !dbg !965
  store ptr %6, ptr %0, align 8, !dbg !965
  ret i64 0, !dbg !965

err_retblock:                                     ; preds = %assign_optional
  %7 = load i64, ptr %reterr, align 8, !dbg !965
  ret i64 %7, !dbg !965
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_utf32(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !966 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %codepoints = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %elements = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr6 = alloca ptr, align 8
  %error_var9 = alloca i64, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !976, metadata !DIExpression()), !dbg !977
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !978, metadata !DIExpression()), !dbg !979
  call void @llvm.dbg.declare(metadata ptr %codepoints, metadata !980, metadata !DIExpression()), !dbg !981
  %3 = load [2 x i64], ptr %s, align 8, !dbg !982
  %4 = call i64 @std.core.string.conv.utf8_codepoints([2 x i64] %3), !dbg !983
  store i64 %4, ptr %codepoints, align 8, !dbg !983
  call void @llvm.dbg.declare(metadata ptr %data, metadata !984, metadata !DIExpression()), !dbg !985
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %codepoints, align 8, !dbg !986
  %add = add i64 %5, 1, !dbg !986
  store i64 %add, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %6 = load i64, ptr %elements, align 8, !dbg !987
  %mul = mul i64 4, %6, !dbg !990
  store i64 %mul, ptr %size, align 8
  %7 = load i64, ptr %size, align 8, !dbg !991
  %i2nb = icmp eq i64 %7, 0, !dbg !991
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !991

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !994
  br label %expr_block.exit, !dbg !994

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator2, i64 8, !dbg !995
  %8 = load i64, ptr %ptradd, align 8, !dbg !995
  %9 = inttoptr i64 %8 to ptr, !dbg !995
  %type = load ptr, ptr %.cachedtype, align 8
  %10 = icmp eq ptr %9, %type
  br i1 %10, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd3 = getelementptr inbounds i8, ptr %9, i64 16
  %11 = load ptr, ptr %ptradd3, align 8
  %12 = call ptr @.dyn_search(ptr %11, ptr @"$sel.acquire")
  store ptr %12, ptr %.inlinecache, align 8
  store ptr %9, ptr %.cachedtype, align 8
  br label %13

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %13

13:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %12, %cache_miss ]
  %14 = icmp eq ptr %fn_phi, null
  br i1 %14, label %missing_function, label %match

missing_function:                                 ; preds = %13
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %15 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.59, i64 8 }, ptr %taddr5, align 8
  %17 = load [2 x i64], ptr %taddr5, align 8
  %18 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %18([2 x i64] %15, [2 x i64] %16, [2 x i64] %17, i32 68), !dbg !997
  unreachable, !dbg !997

match:                                            ; preds = %13
  %19 = load ptr, ptr %allocator2, align 8
  %20 = load i64, ptr %size, align 8
  %21 = call i64 %fn_phi(ptr %retparam, ptr %19, i64 %20, i32 0, i64 0), !dbg !997
  %not_err = icmp eq i64 %21, 0, !dbg !997
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !997
  br i1 %22, label %after_check, label %assign_optional, !dbg !997

assign_optional:                                  ; preds = %match
  store i64 %21, ptr %error_var, align 8, !dbg !997
  br label %guard_block, !dbg !997

after_check:                                      ; preds = %match
  %23 = load ptr, ptr %retparam, align 8, !dbg !997
  store ptr %23, ptr %blockret, align 8, !dbg !997
  br label %expr_block.exit, !dbg !997

expr_block.exit:                                  ; preds = %after_check, %if.then
  %24 = load ptr, ptr %blockret, align 8, !dbg !997
  store ptr %24, ptr %taddr6, align 8
  %25 = load ptr, ptr %taddr6, align 8
  %26 = load i64, ptr %elements, align 8, !dbg !998
  %add7 = add i64 0, %26, !dbg !998
  %size8 = sub i64 %add7, 0, !dbg !998
  %27 = insertvalue %"uint[]" undef, ptr %25, 0, !dbg !998
  %28 = insertvalue %"uint[]" %27, i64 %size8, 1, !dbg !998
  br label %noerr_block, !dbg !998

guard_block:                                      ; preds = %assign_optional
  %29 = load i64, ptr %error_var, align 8, !dbg !998
  ret i64 %29, !dbg !998

noerr_block:                                      ; preds = %expr_block.exit
  %30 = extractvalue %"uint[]" %28, 0, !dbg !998
  store ptr %30, ptr %data, align 8, !dbg !998
  %31 = load [2 x i64], ptr %s, align 8, !dbg !999
  %32 = load ptr, ptr %data, align 8, !dbg !999
  %33 = call i64 @std.core.string.conv.utf8to32_unsafe([2 x i64] %31, ptr %32), !dbg !1000
  %not_err10 = icmp eq i64 %33, 0, !dbg !1000
  %34 = call i1 @llvm.expect.i1(i1 %not_err10, i1 true), !dbg !1000
  br i1 %34, label %after_check12, label %assign_optional11, !dbg !1000

assign_optional11:                                ; preds = %noerr_block
  store i64 %33, ptr %error_var9, align 8, !dbg !1000
  br label %guard_block13, !dbg !1000

after_check12:                                    ; preds = %noerr_block
  br label %noerr_block14, !dbg !1000

guard_block13:                                    ; preds = %assign_optional11
  %35 = load i64, ptr %error_var9, align 8, !dbg !1000
  ret i64 %35, !dbg !1000

noerr_block14:                                    ; preds = %after_check12
  %36 = load ptr, ptr %data, align 8, !dbg !1001
  %37 = load i64, ptr %codepoints, align 8, !dbg !1002
  %ptroffset = getelementptr inbounds [4 x i8], ptr %36, i64 %37, !dbg !1002
  store i32 0, ptr %ptroffset, align 4, !dbg !1003
  %38 = load ptr, ptr %data, align 8, !dbg !1004
  %39 = load i64, ptr %codepoints, align 8, !dbg !1005
  %add15 = add i64 0, %39, !dbg !1005
  %size16 = sub i64 %add15, 0, !dbg !1005
  %40 = insertvalue %"uint[]" undef, ptr %38, 0, !dbg !1005
  %41 = insertvalue %"uint[]" %40, i64 %size16, 1, !dbg !1005
  store %"uint[]" %41, ptr %0, align 8, !dbg !1005
  ret i64 0, !dbg !1005
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_new_utf32(ptr %0, [2 x i64] %1) #0 !dbg !1006 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1009, metadata !DIExpression()), !dbg !1010
  %2 = load [2 x i64], ptr %s, align 8
  %3 = load [2 x i64], ptr @std.core.mem.allocator.thread_allocator, align 8
  %4 = call i64 @std.core.String.to_utf32(ptr %retparam, [2 x i64] %2, [2 x i64] %3) #5, !dbg !1011
  %not_err = icmp eq i64 %4, 0, !dbg !1011
  %5 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1011
  br i1 %5, label %after_check, label %assign_optional, !dbg !1011

assign_optional:                                  ; preds = %entry
  store i64 %4, ptr %reterr, align 8, !dbg !1011
  br label %err_retblock, !dbg !1011

after_check:                                      ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1011
  ret i64 0, !dbg !1011

err_retblock:                                     ; preds = %assign_optional
  %6 = load i64, ptr %reterr, align 8, !dbg !1011
  ret i64 %6, !dbg !1011
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_temp_utf32(ptr %0, [2 x i64] %1) #0 !dbg !1012 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"uint[]", align 8
  %taddr = alloca %any, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1013, metadata !DIExpression()), !dbg !1014
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1015
  %i2nb = icmp eq ptr %2, null, !dbg !1015
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1015

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1018
  br label %if.exit, !dbg !1018

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1020
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !1017
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1017
  %6 = load [2 x i64], ptr %s, align 8
  store %any %5, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  %8 = call i64 @std.core.String.to_utf32(ptr %retparam, [2 x i64] %6, [2 x i64] %7) #5, !dbg !1021
  %not_err = icmp eq i64 %8, 0, !dbg !1021
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !1021
  br i1 %9, label %after_check, label %assign_optional, !dbg !1021

assign_optional:                                  ; preds = %if.exit
  store i64 %8, ptr %reterr, align 8, !dbg !1021
  br label %err_retblock, !dbg !1021

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !1021
  ret i64 0, !dbg !1021

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !1021
  ret i64 %10, !dbg !1021
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.convert_ascii_to_lower([2 x i64] %0) #0 !dbg !1022 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1025, metadata !DIExpression()), !dbg !1026
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1027
  %1 = load i64, ptr %ptradd, align 8, !dbg !1027
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1029, metadata !DIExpression()), !dbg !1027
  store i64 0, ptr %.anon, align 8, !dbg !1027
  br label %loop.cond, !dbg !1027

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !1027
  %lt = icmp ult i64 %2, %1, !dbg !1027
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1027

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1030, metadata !DIExpression()), !dbg !1032
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1033
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1033
  %4 = load ptr, ptr %s, align 8, !dbg !1033
  %5 = load i64, ptr %.anon, align 8, !dbg !1033
  %ge = icmp uge i64 %5, %3, !dbg !1033
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1033
  br i1 %6, label %panic, label %checkok, !dbg !1033

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !1033
  store ptr %ptradd8, ptr %c, align 8, !dbg !1033
  %7 = load ptr, ptr %c, align 8, !dbg !1034
  %checknull = icmp eq ptr %7, null, !dbg !1034
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1034
  br i1 %8, label %panic9, label %checkok13, !dbg !1034

checkok13:                                        ; preds = %checkok
  %9 = load i8, ptr %7, align 1, !dbg !1034
  %10 = call i8 @std.ascii.char.is_upper(i8 %9), !dbg !1034
  %11 = trunc i8 %10 to i1, !dbg !1034
  br i1 %11, label %if.then, label %if.exit, !dbg !1034

if.then:                                          ; preds = %checkok13
  %12 = load ptr, ptr %c, align 8, !dbg !1035
  %checknull14 = icmp eq ptr %12, null, !dbg !1035
  %13 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1035
  br i1 %13, label %panic15, label %checkok19, !dbg !1035

checkok19:                                        ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !1035
  %add = add i8 %14, 32, !dbg !1036
  store i8 %add, ptr %12, align 1, !dbg !1036
  br label %if.exit, !dbg !1036

if.exit:                                          ; preds = %checkok19, %checkok13
  %15 = load i64, ptr %.anon, align 8, !dbg !1027
  %addnuw = add nuw i64 %15, 1, !dbg !1027
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1027
  br label %loop.cond, !dbg !1027

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1027

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %20 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %21 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %taddr5, align 8
  %22 = load [2 x i64], ptr %taddr5, align 8
  store %any %17, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd6, align 8
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %24 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 642, [2 x i64] %24), !dbg !1033
  unreachable, !dbg !1033

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.61, i64 42 }, ptr %taddr10, align 8
  %25 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %26 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %taddr12, align 8
  %27 = load [2 x i64], ptr %taddr12, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 642), !dbg !1034
  unreachable, !dbg !1034

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.61, i64 42 }, ptr %taddr16, align 8
  %29 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr17, align 8
  %30 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.60, i64 22 }, ptr %taddr18, align 8
  %31 = load [2 x i64], ptr %taddr18, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 642), !dbg !1035
  unreachable, !dbg !1035
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.new_ascii_to_lower([2 x i64] %0, [2 x i64] %1) #0 !dbg !1037 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1038, metadata !DIExpression()), !dbg !1039
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !1040, metadata !DIExpression()), !dbg !1041
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !1042, metadata !DIExpression()), !dbg !1043
  %2 = load [2 x i64], ptr %s, align 8, !dbg !1044
  %3 = load [2 x i64], ptr %allocator, align 8, !dbg !1044
  %4 = call [2 x i64] @std.core.String.copy([2 x i64] %2, [2 x i64] %3), !dbg !1045
  store [2 x i64] %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %5 = load [2 x i64], ptr %copy, align 8, !dbg !1046
  call void @std.core.String.convert_ascii_to_lower([2 x i64] %5), !dbg !1046
  %6 = load [2 x i64], ptr %copy, align 8, !dbg !1047
  ret [2 x i64] %6, !dbg !1047
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.temp_ascii_to_lower([2 x i64] %0) #0 !dbg !1048 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1049, metadata !DIExpression()), !dbg !1050
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1051
  %i2nb = icmp eq ptr %1, null, !dbg !1051
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1051

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1054
  br label %if.exit, !dbg !1054

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1056
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !1053
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1053
  %5 = load [2 x i64], ptr %s, align 8, !dbg !1053
  store %any %4, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  %7 = call [2 x i64] @std.core.String.new_ascii_to_lower([2 x i64] %5, [2 x i64] %6), !dbg !1057
  store [2 x i64] %7, ptr %result, align 8
  %8 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %8
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.convert_ascii_to_upper([2 x i64] %0) #0 !dbg !1058 {
entry:
  %s = alloca %"char[]", align 8
  %.anon = alloca i64, align 8
  %c = alloca ptr, align 8
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %taddr10 = alloca %"char[]", align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca %"char[]", align 8
  %taddr18 = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1059, metadata !DIExpression()), !dbg !1060
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1061
  %1 = load i64, ptr %ptradd, align 8, !dbg !1061
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1063, metadata !DIExpression()), !dbg !1061
  store i64 0, ptr %.anon, align 8, !dbg !1061
  br label %loop.cond, !dbg !1061

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !1061
  %lt = icmp ult i64 %2, %1, !dbg !1061
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1061

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1064, metadata !DIExpression()), !dbg !1066
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1067
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1067
  %4 = load ptr, ptr %s, align 8, !dbg !1067
  %5 = load i64, ptr %.anon, align 8, !dbg !1067
  %ge = icmp uge i64 %5, %3, !dbg !1067
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1067
  br i1 %6, label %panic, label %checkok, !dbg !1067

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !1067
  store ptr %ptradd8, ptr %c, align 8, !dbg !1067
  %7 = load ptr, ptr %c, align 8, !dbg !1068
  %checknull = icmp eq ptr %7, null, !dbg !1068
  %8 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !1068
  br i1 %8, label %panic9, label %checkok13, !dbg !1068

checkok13:                                        ; preds = %checkok
  %9 = load i8, ptr %7, align 1, !dbg !1068
  %10 = call i8 @std.ascii.char.is_lower(i8 %9), !dbg !1068
  %11 = trunc i8 %10 to i1, !dbg !1068
  br i1 %11, label %if.then, label %if.exit, !dbg !1068

if.then:                                          ; preds = %checkok13
  %12 = load ptr, ptr %c, align 8, !dbg !1069
  %checknull14 = icmp eq ptr %12, null, !dbg !1069
  %13 = call i1 @llvm.expect.i1(i1 %checknull14, i1 false), !dbg !1069
  br i1 %13, label %panic15, label %checkok19, !dbg !1069

checkok19:                                        ; preds = %if.then
  %14 = load i8, ptr %12, align 1, !dbg !1069
  %sub = sub i8 %14, 32, !dbg !1070
  store i8 %sub, ptr %12, align 1, !dbg !1070
  br label %if.exit, !dbg !1070

if.exit:                                          ; preds = %checkok19, %checkok13
  %15 = load i64, ptr %.anon, align 8, !dbg !1061
  %addnuw = add nuw i64 %15, 1, !dbg !1061
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1061
  br label %loop.cond, !dbg !1061

loop.exit:                                        ; preds = %loop.cond
  ret void, !dbg !1061

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %16 = insertvalue %any undef, ptr %taddr, 0
  %17 = insertvalue %any %16, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %18 = insertvalue %any undef, ptr %taddr2, 0
  %19 = insertvalue %any %18, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %20 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %21 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.62, i64 22 }, ptr %taddr5, align 8
  %22 = load [2 x i64], ptr %taddr5, align 8
  store %any %17, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %19, ptr %ptradd6, align 8
  %23 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %23, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %24 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %20, [2 x i64] %21, [2 x i64] %22, i32 665, [2 x i64] %24), !dbg !1067
  unreachable, !dbg !1067

panic9:                                           ; preds = %checkok
  store %"char[]" { ptr @.panic_msg.61, i64 42 }, ptr %taddr10, align 8
  %25 = load [2 x i64], ptr %taddr10, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr11, align 8
  %26 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.func.62, i64 22 }, ptr %taddr12, align 8
  %27 = load [2 x i64], ptr %taddr12, align 8
  %28 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %28([2 x i64] %25, [2 x i64] %26, [2 x i64] %27, i32 665), !dbg !1068
  unreachable, !dbg !1068

panic15:                                          ; preds = %if.then
  store %"char[]" { ptr @.panic_msg.61, i64 42 }, ptr %taddr16, align 8
  %29 = load [2 x i64], ptr %taddr16, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr17, align 8
  %30 = load [2 x i64], ptr %taddr17, align 8
  store %"char[]" { ptr @.func.62, i64 22 }, ptr %taddr18, align 8
  %31 = load [2 x i64], ptr %taddr18, align 8
  %32 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %32([2 x i64] %29, [2 x i64] %30, [2 x i64] %31, i32 665), !dbg !1069
  unreachable, !dbg !1069
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.new_ascii_to_upper([2 x i64] %0, [2 x i64] %1) #0 !dbg !1071 {
entry:
  %s = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %copy = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1072, metadata !DIExpression()), !dbg !1073
  store [2 x i64] %1, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !1074, metadata !DIExpression()), !dbg !1075
  call void @llvm.dbg.declare(metadata ptr %copy, metadata !1076, metadata !DIExpression()), !dbg !1077
  %2 = load [2 x i64], ptr %s, align 8, !dbg !1078
  %3 = load [2 x i64], ptr %allocator, align 8, !dbg !1078
  %4 = call [2 x i64] @std.core.String.copy([2 x i64] %2, [2 x i64] %3), !dbg !1079
  store [2 x i64] %4, ptr %result, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %copy, ptr align 8 %result, i32 16, i1 false)
  %5 = load [2 x i64], ptr %copy, align 8, !dbg !1080
  call void @std.core.String.convert_ascii_to_upper([2 x i64] %5), !dbg !1080
  %6 = load [2 x i64], ptr %copy, align 8, !dbg !1081
  ret [2 x i64] %6, !dbg !1081
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.iterator(ptr noalias sret(%StringIterator) align 8 %0, [2 x i64] %1) #0 !dbg !1082 {
entry:
  %s = alloca %"char[]", align 8
  %literal = alloca %StringIterator, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1089, metadata !DIExpression()), !dbg !1090
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %s, i32 16, i1 false), !dbg !1091
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !1091
  store i64 0, ptr %ptradd, align 8, !dbg !1092
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 24, i1 false), !dbg !1092
  ret void, !dbg !1092
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.String.temp_ascii_to_upper([2 x i64] %0) #0 !dbg !1093 {
entry:
  %s = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1094, metadata !DIExpression()), !dbg !1095
  %1 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1096
  %i2nb = icmp eq ptr %1, null, !dbg !1096
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !1096

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !1099
  br label %if.exit, !dbg !1099

if.exit:                                          ; preds = %if.then, %entry
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !1101
  %3 = insertvalue %any undef, ptr %2, 0, !dbg !1098
  %4 = insertvalue %any %3, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !1098
  %5 = load [2 x i64], ptr %s, align 8, !dbg !1098
  store %any %4, ptr %taddr, align 8
  %6 = load [2 x i64], ptr %taddr, align 8
  %7 = call [2 x i64] @std.core.String.new_ascii_to_upper([2 x i64] %5, [2 x i64] %6), !dbg !1102
  store [2 x i64] %7, ptr %result, align 8
  %8 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %8
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.utf8_codepoints([2 x i64] %0) #0 !dbg !1103 {
entry:
  %s = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %.anon = alloca i64, align 8
  %c = alloca i8, align 1
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1106, metadata !DIExpression()), !dbg !1107
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1108, metadata !DIExpression()), !dbg !1109
  store i64 0, ptr %len, align 8, !dbg !1110
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1111
  %1 = load i64, ptr %ptradd, align 8, !dbg !1111
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !1113, metadata !DIExpression()), !dbg !1111
  store i64 0, ptr %.anon, align 8, !dbg !1111
  br label %loop.cond, !dbg !1111

loop.cond:                                        ; preds = %if.exit, %entry
  %2 = load i64, ptr %.anon, align 8, !dbg !1111
  %lt = icmp ult i64 %2, %1, !dbg !1111
  br i1 %lt, label %loop.body, label %loop.exit, !dbg !1111

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %c, metadata !1114, metadata !DIExpression()), !dbg !1116
  %ptradd1 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !1117
  %3 = load i64, ptr %ptradd1, align 8, !dbg !1117
  %4 = load ptr, ptr %s, align 8, !dbg !1117
  %5 = load i64, ptr %.anon, align 8, !dbg !1117
  %ge = icmp uge i64 %5, %3, !dbg !1117
  %6 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1117
  br i1 %6, label %panic, label %checkok, !dbg !1117

checkok:                                          ; preds = %loop.body
  %ptradd8 = getelementptr inbounds i8, ptr %4, i64 %5, !dbg !1117
  %7 = load i8, ptr %ptradd8, align 1, !dbg !1117
  store i8 %7, ptr %c, align 1, !dbg !1117
  %8 = load i8, ptr %c, align 1, !dbg !1118
  %zext = zext i8 %8 to i32, !dbg !1118
  %and = and i32 %zext, 192, !dbg !1118
  %neq = icmp ne i32 %and, 128, !dbg !1118
  br i1 %neq, label %if.then, label %if.exit, !dbg !1118

if.then:                                          ; preds = %checkok
  %9 = load i64, ptr %len, align 8, !dbg !1120
  %add = add i64 %9, 1, !dbg !1120
  store i64 %add, ptr %len, align 8, !dbg !1120
  br label %if.exit, !dbg !1120

if.exit:                                          ; preds = %if.then, %checkok
  %10 = load i64, ptr %.anon, align 8, !dbg !1111
  %addnuw = add nuw i64 %10, 1, !dbg !1111
  store i64 %addnuw, ptr %.anon, align 8, !dbg !1111
  br label %loop.cond, !dbg !1111

loop.exit:                                        ; preds = %loop.cond
  %11 = load i64, ptr %len, align 8, !dbg !1121
  ret i64 %11, !dbg !1121

panic:                                            ; preds = %loop.body
  store i64 %3, ptr %taddr, align 8
  %12 = insertvalue %any undef, ptr %taddr, 0
  %13 = insertvalue %any %12, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %5, ptr %taddr2, align 8
  %14 = insertvalue %any undef, ptr %taddr2, 0
  %15 = insertvalue %any %14, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %16 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr4, align 8
  %17 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.63, i64 15 }, ptr %taddr5, align 8
  %18 = load [2 x i64], ptr %taddr5, align 8
  store %any %13, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %15, ptr %ptradd6, align 8
  %19 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %19, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %20 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %16, [2 x i64] %17, [2 x i64] %18, i32 731, [2 x i64] %20), !dbg !1117
  unreachable, !dbg !1117
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_int128(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1122 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i128, align 16
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 8
  %taddr99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value139 = alloca i128, align 16
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1127, metadata !DIExpression()), !dbg !1128
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1129, metadata !DIExpression()), !dbg !1130
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1131
  %le = icmp sle i32 %4, 10, !dbg !1131
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1131

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1135
  %gt = icmp sgt i32 %5, 1, !dbg !1135
  br label %and.phi, !dbg !1135

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1135
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1135

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1136
  %eq = icmp eq i32 %6, 16, !dbg !1136
  br label %or.phi, !dbg !1136

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1136
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1136

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1131
  unreachable, !dbg !1131

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1137, metadata !DIExpression()), !dbg !1138
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1139
  %11 = load i64, ptr %ptradd, align 8, !dbg !1139
  store i64 %11, ptr %len, align 8, !dbg !1139
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1140, metadata !DIExpression()), !dbg !1141
  store i64 0, ptr %index, align 8, !dbg !1142
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1143, metadata !DIExpression()), !dbg !1144
  %12 = load ptr, ptr %string, align 8, !dbg !1145
  store ptr %12, ptr %ptr, align 8, !dbg !1145
  br label %loop.cond, !dbg !1146

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1147
  %14 = load i64, ptr %len, align 8, !dbg !1149
  %lt = icmp ult i64 %13, %14, !dbg !1147
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1147

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1150
  %16 = load i64, ptr %index, align 8, !dbg !1151
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1151
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1152
  %eq7 = icmp eq i8 %18, 32, !dbg !1152
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1152

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1156
  %eq9 = icmp eq i8 %19, 9, !dbg !1156
  br label %or.phi10, !dbg !1156

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1156
  br label %and.phi12, !dbg !1156

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1156
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1156

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1157
  %add = add i64 %20, 1, !dbg !1157
  store i64 %add, ptr %index, align 8, !dbg !1157
  br label %loop.cond, !dbg !1157

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1158
  %22 = load i64, ptr %index, align 8, !dbg !1159
  %eq14 = icmp eq i64 %21, %22, !dbg !1158
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1158

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1160
  br label %err_retblock, !dbg !1160

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1161, metadata !DIExpression()), !dbg !1162
  store i8 0, ptr %is_negative, align 1, !dbg !1162
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1163
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1163
  %24 = load ptr, ptr %string, align 8, !dbg !1163
  %25 = load i64, ptr %index, align 8, !dbg !1165
  %ge = icmp uge i64 %25, %23, !dbg !1165
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1165
  br i1 %26, label %panic, label %checkok, !dbg !1165

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1165
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit24, !dbg !1166

if.exit24:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1168
  %29 = load i64, ptr %index, align 8, !dbg !1169
  %add25 = add i64 %29, 1, !dbg !1169
  store i64 %add25, ptr %index, align 8, !dbg !1169
  br label %switch.exit, !dbg !1169

switch.case26:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1170
  %add27 = add i64 %30, 1, !dbg !1170
  store i64 %add27, ptr %index, align 8, !dbg !1170
  br label %switch.exit, !dbg !1170

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1172

switch.exit:                                      ; preds = %switch.default, %switch.case26, %if.exit24
  %31 = load i64, ptr %len, align 8, !dbg !1174
  %32 = load i64, ptr %index, align 8, !dbg !1175
  %eq28 = icmp eq i64 %31, %32, !dbg !1174
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1174

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1176
  br label %err_retblock, !dbg !1176

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1177, metadata !DIExpression()), !dbg !1178
  %33 = load i32, ptr %base1, align 4, !dbg !1179
  %sext = sext i32 %33 to i128, !dbg !1179
  store i128 %sext, ptr %base_used, align 16, !dbg !1179
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1180
  %34 = load i64, ptr %ptradd31, align 8, !dbg !1180
  %35 = load ptr, ptr %string, align 8, !dbg !1180
  %36 = load i64, ptr %index, align 8, !dbg !1181
  %ge32 = icmp uge i64 %36, %34, !dbg !1181
  %37 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1181
  br i1 %37, label %panic33, label %checkok43, !dbg !1181

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1181
  %38 = load i8, ptr %ptradd44, align 1, !dbg !1181
  %eq45 = icmp eq i8 %38, 48, !dbg !1180
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1180

and.rhs46:                                        ; preds = %checkok43
  %39 = load i32, ptr %base1, align 4, !dbg !1182
  %eq47 = icmp eq i32 %39, 10, !dbg !1182
  br label %and.phi48, !dbg !1182

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1182
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1182

if.then50:                                        ; preds = %and.phi48
  %40 = load i64, ptr %index, align 8, !dbg !1183
  %add51 = add i64 %40, 1, !dbg !1183
  store i64 %add51, ptr %index, align 8, !dbg !1183
  %41 = load i64, ptr %index, align 8, !dbg !1185
  %42 = load i64, ptr %len, align 8, !dbg !1186
  %eq52 = icmp eq i64 %41, %42, !dbg !1185
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1185

if.then53:                                        ; preds = %if.then50
  store i128 0, ptr %blockret, align 16, !dbg !1187
  br label %expr_block.exit150, !dbg !1187

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1188
  %43 = load i64, ptr %ptradd55, align 8, !dbg !1188
  %44 = load ptr, ptr %string, align 8, !dbg !1188
  %45 = load i64, ptr %index, align 8, !dbg !1190
  %ge56 = icmp uge i64 %45, %43, !dbg !1190
  %46 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1190
  br i1 %46, label %panic57, label %checkok67, !dbg !1190

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1190
  %47 = load i8, ptr %ptradd68, align 1
  store i8 %47, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %48 = load i8, ptr %switch69, align 1
  switch i8 %48, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 16, ptr %base_used, align 16, !dbg !1191
  %49 = load i64, ptr %index, align 8, !dbg !1193
  %add72 = add i64 %49, 1, !dbg !1193
  store i64 %add72, ptr %index, align 8, !dbg !1193
  br label %switch.exit78, !dbg !1193

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 2, ptr %base_used, align 16, !dbg !1194
  %50 = load i64, ptr %index, align 8, !dbg !1196
  %add74 = add i64 %50, 1, !dbg !1196
  store i64 %add74, ptr %index, align 8, !dbg !1196
  br label %switch.exit78, !dbg !1196

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i128 8, ptr %base_used, align 16, !dbg !1197
  %51 = load i64, ptr %index, align 8, !dbg !1199
  %add76 = add i64 %51, 1, !dbg !1199
  store i64 %add76, ptr %index, align 8, !dbg !1199
  br label %switch.exit78, !dbg !1199

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1200

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %52 = load i64, ptr %len, align 8, !dbg !1202
  %53 = load i64, ptr %index, align 8, !dbg !1203
  %eq79 = icmp eq i64 %52, %53, !dbg !1202
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1202

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1204
  br label %err_retblock, !dbg !1204

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1204

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i128 0, ptr %value, align 16, !dbg !1207
  br label %loop.cond83, !dbg !1208

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %54 = load i64, ptr %index, align 8, !dbg !1209
  %55 = load i64, ptr %len, align 8, !dbg !1211
  %neq = icmp ne i64 %54, %55, !dbg !1209
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1209

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1212, metadata !DIExpression()), !dbg !1214
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1215, metadata !DIExpression()), !dbg !1217
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1218
  %56 = load i64, ptr %ptradd87, align 8, !dbg !1218
  %57 = load ptr, ptr %string, align 8, !dbg !1218
  %58 = load i64, ptr %index, align 8, !dbg !1219
  %add88 = add i64 %58, 1, !dbg !1219
  store i64 %add88, ptr %index, align 8, !dbg !1219
  %ge89 = icmp uge i64 %58, %56, !dbg !1219
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1219
  br i1 %59, label %panic90, label %checkok100, !dbg !1219

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1219
  %60 = load i8, ptr %ptradd101, align 1, !dbg !1219
  store i8 %60, ptr %ch, align 1, !dbg !1219
  %61 = load i128, ptr %base_used, align 16, !dbg !1220
  %neq102 = icmp ne i128 %61, 16, !dbg !1220
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1220

or.rhs103:                                        ; preds = %checkok100
  %62 = load i8, ptr %ch, align 1, !dbg !1221
  %lt104 = icmp ult i8 %62, 65, !dbg !1221
  br label %or.phi105, !dbg !1221

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1221
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1221

if.then107:                                       ; preds = %or.phi105
  %63 = load i8, ptr %ch, align 1, !dbg !1222
  %zext = zext i8 %63 to i32, !dbg !1222
  %sub = sub i32 %zext, 48, !dbg !1223
  %trunc = trunc i32 %sub to i8, !dbg !1223
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1223
  br label %expr_block.exit, !dbg !1223

if.exit108:                                       ; preds = %or.phi105
  %64 = load i8, ptr %ch, align 1, !dbg !1224
  %le109 = icmp ule i8 %64, 70, !dbg !1224
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1224

if.then110:                                       ; preds = %if.exit108
  %65 = load i8, ptr %ch, align 1, !dbg !1225
  %zext111 = zext i8 %65 to i32, !dbg !1225
  %sub112 = sub i32 %zext111, 65, !dbg !1225
  %add113 = add i32 %sub112, 10, !dbg !1226
  %trunc114 = trunc i32 %add113 to i8, !dbg !1226
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1226
  br label %expr_block.exit, !dbg !1226

if.exit115:                                       ; preds = %if.exit108
  %66 = load i8, ptr %ch, align 1, !dbg !1227
  %lt116 = icmp ult i8 %66, 97, !dbg !1227
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1227

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1228
  br label %guard_block, !dbg !1228

if.exit118:                                       ; preds = %if.exit115
  %67 = load i8, ptr %ch, align 1, !dbg !1229
  %gt119 = icmp ugt i8 %67, 102, !dbg !1229
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1229

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1230
  br label %guard_block, !dbg !1230

if.exit121:                                       ; preds = %if.exit118
  %68 = load i8, ptr %ch, align 1, !dbg !1231
  %zext122 = zext i8 %68 to i32, !dbg !1231
  %sub123 = sub i32 %zext122, 97, !dbg !1231
  %add124 = add i32 %sub123, 10, !dbg !1232
  %trunc125 = trunc i32 %add124 to i8, !dbg !1232
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1232
  br label %expr_block.exit, !dbg !1232

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1232

guard_block:                                      ; preds = %if.then120, %if.then117
  %69 = load i64, ptr %error_var, align 8, !dbg !1232
  store i64 %69, ptr %reterr, align 8, !dbg !1232
  br label %err_retblock, !dbg !1232

noerr_block:                                      ; preds = %expr_block.exit
  %70 = load i8, ptr %blockret86, align 1, !dbg !1232
  store i8 %70, ptr %c85, align 1, !dbg !1232
  %71 = load i8, ptr %c85, align 1, !dbg !1233
  %zext126 = zext i8 %71 to i128, !dbg !1233
  %72 = load i128, ptr %base_used, align 16, !dbg !1234
  %le127 = icmp sle i128 %72, %zext126, !dbg !1233
  %check = icmp slt i128 %zext126, 0, !dbg !1233
  %siui-le = or i1 %check, %le127, !dbg !1233
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1233

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1235
  br label %err_retblock, !dbg !1235

if.exit129:                                       ; preds = %noerr_block
  %73 = load i8, ptr %is_negative, align 1, !dbg !1236
  %74 = trunc i8 %73 to i1, !dbg !1236
  br i1 %74, label %if.then132, label %if.exit138, !dbg !1236

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1238, metadata !DIExpression()), !dbg !1240
  %75 = load i128, ptr %value, align 16, !dbg !1241
  %76 = load i128, ptr %base_used, align 16, !dbg !1242
  %mul = mul i128 %75, %76, !dbg !1241
  %77 = load i8, ptr %c85, align 1, !dbg !1243
  %zext133 = zext i8 %77 to i128, !dbg !1243
  %sub134 = sub i128 %mul, %zext133, !dbg !1241
  store i128 %sub134, ptr %new_value, align 16, !dbg !1241
  %78 = load i128, ptr %new_value, align 16, !dbg !1244
  %79 = load i128, ptr %value, align 16, !dbg !1245
  %gt135 = icmp sgt i128 %78, %79, !dbg !1244
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1244

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1246
  br label %guard_block147, !dbg !1246

if.exit137:                                       ; preds = %if.then132
  %80 = load i128, ptr %new_value, align 16, !dbg !1247
  store i128 %80, ptr %blockret131, align 16, !dbg !1247
  br label %expr_block.exit146, !dbg !1247

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !1248, metadata !DIExpression()), !dbg !1249
  %81 = load i128, ptr %value, align 16, !dbg !1250
  %82 = load i128, ptr %base_used, align 16, !dbg !1251
  %mul140 = mul i128 %81, %82, !dbg !1250
  %83 = load i8, ptr %c85, align 1, !dbg !1252
  %zext141 = zext i8 %83 to i128, !dbg !1252
  %add142 = add i128 %mul140, %zext141, !dbg !1250
  store i128 %add142, ptr %new_value139, align 16, !dbg !1250
  %84 = load i128, ptr %new_value139, align 16, !dbg !1253
  %85 = load i128, ptr %value, align 16, !dbg !1254
  %lt143 = icmp slt i128 %84, %85, !dbg !1253
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1253

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1255
  br label %guard_block147, !dbg !1255

if.exit145:                                       ; preds = %if.exit138
  %86 = load i128, ptr %new_value139, align 16, !dbg !1256
  store i128 %86, ptr %blockret131, align 16, !dbg !1256
  br label %expr_block.exit146, !dbg !1256

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1256

guard_block147:                                   ; preds = %if.then144, %if.then136
  %87 = load i64, ptr %error_var130, align 8, !dbg !1256
  store i64 %87, ptr %reterr, align 8, !dbg !1256
  br label %err_retblock, !dbg !1256

noerr_block148:                                   ; preds = %expr_block.exit146
  %88 = load i128, ptr %blockret131, align 16, !dbg !1256
  store i128 %88, ptr %value, align 16, !dbg !1256
  br label %loop.cond83, !dbg !1256

loop.exit149:                                     ; preds = %loop.cond83
  %89 = load i128, ptr %value, align 16, !dbg !1257
  store i128 %89, ptr %blockret, align 16, !dbg !1257
  br label %expr_block.exit150, !dbg !1257

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %90 = load i128, ptr %blockret, align 16, !dbg !1257
  store i128 %90, ptr %0, align 16, !dbg !1257
  ret i64 0, !dbg !1257

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then
  %91 = load i64, ptr %reterr, align 8, !dbg !1257
  ret i64 %91, !dbg !1257

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %96 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %97 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr20, align 8
  %98 = load [2 x i64], ptr %taddr20, align 8
  store %any %93, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd21, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %100 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 750, [2 x i64] %100), !dbg !1165
  unreachable, !dbg !1165

panic33:                                          ; preds = %if.exit30
  store i64 %34, ptr %taddr34, align 8
  %101 = insertvalue %any undef, ptr %taddr34, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr35, align 8
  %103 = insertvalue %any undef, ptr %taddr35, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr36, align 8
  %105 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr37, align 8
  %106 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr38, align 8
  %107 = load [2 x i64], ptr %taddr38, align 8
  store %any %102, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %104, ptr %ptradd40, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %109 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 763, [2 x i64] %109), !dbg !1181
  unreachable, !dbg !1181

panic57:                                          ; preds = %if.exit54
  store i64 %43, ptr %taddr58, align 8
  %110 = insertvalue %any undef, ptr %taddr58, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr60, align 8
  %114 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr61, align 8
  %115 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr62, align 8
  %116 = load [2 x i64], ptr %taddr62, align 8
  store %any %111, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %113, ptr %ptradd64, align 8
  %117 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %118 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 767, [2 x i64] %118), !dbg !1190
  unreachable, !dbg !1190

panic90:                                          ; preds = %loop.body84
  store i64 %56, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr92, align 8
  %121 = insertvalue %any undef, ptr %taddr92, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr93, align 8
  %123 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr94, align 8
  %124 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.func.65, i64 9 }, ptr %taddr95, align 8
  %125 = load [2 x i64], ptr %taddr95, align 8
  store %any %120, ptr %varargslots96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %122, ptr %ptradd97, align 8
  %126 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp98", ptr %taddr99, align 8
  %127 = load [2 x i64], ptr %taddr99, align 8
  call void @std.core.builtin.panicf([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 790, [2 x i64] %127), !dbg !1219
  unreachable, !dbg !1219
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_long(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1258 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i64, align 8
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 8
  %taddr99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value139 = alloca i64, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1262, metadata !DIExpression()), !dbg !1263
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1264, metadata !DIExpression()), !dbg !1265
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1266
  %le = icmp sle i32 %4, 10, !dbg !1266
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1266

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1270
  %gt = icmp sgt i32 %5, 1, !dbg !1270
  br label %and.phi, !dbg !1270

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1270
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1270

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1271
  %eq = icmp eq i32 %6, 16, !dbg !1271
  br label %or.phi, !dbg !1271

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1271
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1271

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1266
  unreachable, !dbg !1266

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1272, metadata !DIExpression()), !dbg !1273
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1274
  %11 = load i64, ptr %ptradd, align 8, !dbg !1274
  store i64 %11, ptr %len, align 8, !dbg !1274
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1275, metadata !DIExpression()), !dbg !1276
  store i64 0, ptr %index, align 8, !dbg !1277
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1278, metadata !DIExpression()), !dbg !1279
  %12 = load ptr, ptr %string, align 8, !dbg !1280
  store ptr %12, ptr %ptr, align 8, !dbg !1280
  br label %loop.cond, !dbg !1281

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1282
  %14 = load i64, ptr %len, align 8, !dbg !1284
  %lt = icmp ult i64 %13, %14, !dbg !1282
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1282

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1285
  %16 = load i64, ptr %index, align 8, !dbg !1286
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1286
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1287
  %eq7 = icmp eq i8 %18, 32, !dbg !1287
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1287

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1290
  %eq9 = icmp eq i8 %19, 9, !dbg !1290
  br label %or.phi10, !dbg !1290

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1290
  br label %and.phi12, !dbg !1290

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1290
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1290

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1291
  %add = add i64 %20, 1, !dbg !1291
  store i64 %add, ptr %index, align 8, !dbg !1291
  br label %loop.cond, !dbg !1291

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1292
  %22 = load i64, ptr %index, align 8, !dbg !1293
  %eq14 = icmp eq i64 %21, %22, !dbg !1292
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1292

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1294
  br label %err_retblock, !dbg !1294

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1295, metadata !DIExpression()), !dbg !1296
  store i8 0, ptr %is_negative, align 1, !dbg !1296
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1297
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1297
  %24 = load ptr, ptr %string, align 8, !dbg !1297
  %25 = load i64, ptr %index, align 8, !dbg !1299
  %ge = icmp uge i64 %25, %23, !dbg !1299
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1299
  br i1 %26, label %panic, label %checkok, !dbg !1299

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1299
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit24, !dbg !1300

if.exit24:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1302
  %29 = load i64, ptr %index, align 8, !dbg !1303
  %add25 = add i64 %29, 1, !dbg !1303
  store i64 %add25, ptr %index, align 8, !dbg !1303
  br label %switch.exit, !dbg !1303

switch.case26:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1304
  %add27 = add i64 %30, 1, !dbg !1304
  store i64 %add27, ptr %index, align 8, !dbg !1304
  br label %switch.exit, !dbg !1304

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1306

switch.exit:                                      ; preds = %switch.default, %switch.case26, %if.exit24
  %31 = load i64, ptr %len, align 8, !dbg !1308
  %32 = load i64, ptr %index, align 8, !dbg !1309
  %eq28 = icmp eq i64 %31, %32, !dbg !1308
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1308

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1310
  br label %err_retblock, !dbg !1310

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1311, metadata !DIExpression()), !dbg !1312
  %33 = load i32, ptr %base1, align 4, !dbg !1313
  %sext = sext i32 %33 to i64, !dbg !1313
  store i64 %sext, ptr %base_used, align 8, !dbg !1313
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1314
  %34 = load i64, ptr %ptradd31, align 8, !dbg !1314
  %35 = load ptr, ptr %string, align 8, !dbg !1314
  %36 = load i64, ptr %index, align 8, !dbg !1315
  %ge32 = icmp uge i64 %36, %34, !dbg !1315
  %37 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1315
  br i1 %37, label %panic33, label %checkok43, !dbg !1315

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1315
  %38 = load i8, ptr %ptradd44, align 1, !dbg !1315
  %eq45 = icmp eq i8 %38, 48, !dbg !1314
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1314

and.rhs46:                                        ; preds = %checkok43
  %39 = load i32, ptr %base1, align 4, !dbg !1316
  %eq47 = icmp eq i32 %39, 10, !dbg !1316
  br label %and.phi48, !dbg !1316

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1316
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1316

if.then50:                                        ; preds = %and.phi48
  %40 = load i64, ptr %index, align 8, !dbg !1317
  %add51 = add i64 %40, 1, !dbg !1317
  store i64 %add51, ptr %index, align 8, !dbg !1317
  %41 = load i64, ptr %index, align 8, !dbg !1319
  %42 = load i64, ptr %len, align 8, !dbg !1320
  %eq52 = icmp eq i64 %41, %42, !dbg !1319
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1319

if.then53:                                        ; preds = %if.then50
  store i64 0, ptr %blockret, align 8, !dbg !1321
  br label %expr_block.exit150, !dbg !1321

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1322
  %43 = load i64, ptr %ptradd55, align 8, !dbg !1322
  %44 = load ptr, ptr %string, align 8, !dbg !1322
  %45 = load i64, ptr %index, align 8, !dbg !1324
  %ge56 = icmp uge i64 %45, %43, !dbg !1324
  %46 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1324
  br i1 %46, label %panic57, label %checkok67, !dbg !1324

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1324
  %47 = load i8, ptr %ptradd68, align 1
  store i8 %47, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %48 = load i8, ptr %switch69, align 1
  switch i8 %48, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 16, ptr %base_used, align 8, !dbg !1325
  %49 = load i64, ptr %index, align 8, !dbg !1327
  %add72 = add i64 %49, 1, !dbg !1327
  store i64 %add72, ptr %index, align 8, !dbg !1327
  br label %switch.exit78, !dbg !1327

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 2, ptr %base_used, align 8, !dbg !1328
  %50 = load i64, ptr %index, align 8, !dbg !1330
  %add74 = add i64 %50, 1, !dbg !1330
  store i64 %add74, ptr %index, align 8, !dbg !1330
  br label %switch.exit78, !dbg !1330

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i64 8, ptr %base_used, align 8, !dbg !1331
  %51 = load i64, ptr %index, align 8, !dbg !1333
  %add76 = add i64 %51, 1, !dbg !1333
  store i64 %add76, ptr %index, align 8, !dbg !1333
  br label %switch.exit78, !dbg !1333

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1334

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %52 = load i64, ptr %len, align 8, !dbg !1336
  %53 = load i64, ptr %index, align 8, !dbg !1337
  %eq79 = icmp eq i64 %52, %53, !dbg !1336
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1336

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1338
  br label %err_retblock, !dbg !1338

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1338

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1339, metadata !DIExpression()), !dbg !1340
  store i64 0, ptr %value, align 8, !dbg !1341
  br label %loop.cond83, !dbg !1342

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %54 = load i64, ptr %index, align 8, !dbg !1343
  %55 = load i64, ptr %len, align 8, !dbg !1345
  %neq = icmp ne i64 %54, %55, !dbg !1343
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1343

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1346, metadata !DIExpression()), !dbg !1348
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1349, metadata !DIExpression()), !dbg !1351
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1352
  %56 = load i64, ptr %ptradd87, align 8, !dbg !1352
  %57 = load ptr, ptr %string, align 8, !dbg !1352
  %58 = load i64, ptr %index, align 8, !dbg !1353
  %add88 = add i64 %58, 1, !dbg !1353
  store i64 %add88, ptr %index, align 8, !dbg !1353
  %ge89 = icmp uge i64 %58, %56, !dbg !1353
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1353
  br i1 %59, label %panic90, label %checkok100, !dbg !1353

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1353
  %60 = load i8, ptr %ptradd101, align 1, !dbg !1353
  store i8 %60, ptr %ch, align 1, !dbg !1353
  %61 = load i64, ptr %base_used, align 8, !dbg !1354
  %neq102 = icmp ne i64 %61, 16, !dbg !1354
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1354

or.rhs103:                                        ; preds = %checkok100
  %62 = load i8, ptr %ch, align 1, !dbg !1355
  %lt104 = icmp ult i8 %62, 65, !dbg !1355
  br label %or.phi105, !dbg !1355

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1355
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1355

if.then107:                                       ; preds = %or.phi105
  %63 = load i8, ptr %ch, align 1, !dbg !1356
  %zext = zext i8 %63 to i32, !dbg !1356
  %sub = sub i32 %zext, 48, !dbg !1357
  %trunc = trunc i32 %sub to i8, !dbg !1357
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1357
  br label %expr_block.exit, !dbg !1357

if.exit108:                                       ; preds = %or.phi105
  %64 = load i8, ptr %ch, align 1, !dbg !1358
  %le109 = icmp ule i8 %64, 70, !dbg !1358
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1358

if.then110:                                       ; preds = %if.exit108
  %65 = load i8, ptr %ch, align 1, !dbg !1359
  %zext111 = zext i8 %65 to i32, !dbg !1359
  %sub112 = sub i32 %zext111, 65, !dbg !1359
  %add113 = add i32 %sub112, 10, !dbg !1360
  %trunc114 = trunc i32 %add113 to i8, !dbg !1360
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1360
  br label %expr_block.exit, !dbg !1360

if.exit115:                                       ; preds = %if.exit108
  %66 = load i8, ptr %ch, align 1, !dbg !1361
  %lt116 = icmp ult i8 %66, 97, !dbg !1361
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1361

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1362
  br label %guard_block, !dbg !1362

if.exit118:                                       ; preds = %if.exit115
  %67 = load i8, ptr %ch, align 1, !dbg !1363
  %gt119 = icmp ugt i8 %67, 102, !dbg !1363
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1363

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1364
  br label %guard_block, !dbg !1364

if.exit121:                                       ; preds = %if.exit118
  %68 = load i8, ptr %ch, align 1, !dbg !1365
  %zext122 = zext i8 %68 to i32, !dbg !1365
  %sub123 = sub i32 %zext122, 97, !dbg !1365
  %add124 = add i32 %sub123, 10, !dbg !1366
  %trunc125 = trunc i32 %add124 to i8, !dbg !1366
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1366
  br label %expr_block.exit, !dbg !1366

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1366

guard_block:                                      ; preds = %if.then120, %if.then117
  %69 = load i64, ptr %error_var, align 8, !dbg !1366
  store i64 %69, ptr %reterr, align 8, !dbg !1366
  br label %err_retblock, !dbg !1366

noerr_block:                                      ; preds = %expr_block.exit
  %70 = load i8, ptr %blockret86, align 1, !dbg !1366
  store i8 %70, ptr %c85, align 1, !dbg !1366
  %71 = load i8, ptr %c85, align 1, !dbg !1367
  %zext126 = zext i8 %71 to i64, !dbg !1367
  %72 = load i64, ptr %base_used, align 8, !dbg !1368
  %le127 = icmp sle i64 %72, %zext126, !dbg !1367
  %check = icmp slt i64 %zext126, 0, !dbg !1367
  %siui-le = or i1 %check, %le127, !dbg !1367
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1367

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1369
  br label %err_retblock, !dbg !1369

if.exit129:                                       ; preds = %noerr_block
  %73 = load i8, ptr %is_negative, align 1, !dbg !1370
  %74 = trunc i8 %73 to i1, !dbg !1370
  br i1 %74, label %if.then132, label %if.exit138, !dbg !1370

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1372, metadata !DIExpression()), !dbg !1374
  %75 = load i64, ptr %value, align 8, !dbg !1375
  %76 = load i64, ptr %base_used, align 8, !dbg !1376
  %mul = mul i64 %75, %76, !dbg !1375
  %77 = load i8, ptr %c85, align 1, !dbg !1377
  %zext133 = zext i8 %77 to i64, !dbg !1377
  %sub134 = sub i64 %mul, %zext133, !dbg !1375
  store i64 %sub134, ptr %new_value, align 8, !dbg !1375
  %78 = load i64, ptr %new_value, align 8, !dbg !1378
  %79 = load i64, ptr %value, align 8, !dbg !1379
  %gt135 = icmp sgt i64 %78, %79, !dbg !1378
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1378

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1380
  br label %guard_block147, !dbg !1380

if.exit137:                                       ; preds = %if.then132
  %80 = load i64, ptr %new_value, align 8, !dbg !1381
  store i64 %80, ptr %blockret131, align 8, !dbg !1381
  br label %expr_block.exit146, !dbg !1381

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !1382, metadata !DIExpression()), !dbg !1383
  %81 = load i64, ptr %value, align 8, !dbg !1384
  %82 = load i64, ptr %base_used, align 8, !dbg !1385
  %mul140 = mul i64 %81, %82, !dbg !1384
  %83 = load i8, ptr %c85, align 1, !dbg !1386
  %zext141 = zext i8 %83 to i64, !dbg !1386
  %add142 = add i64 %mul140, %zext141, !dbg !1384
  store i64 %add142, ptr %new_value139, align 8, !dbg !1384
  %84 = load i64, ptr %new_value139, align 8, !dbg !1387
  %85 = load i64, ptr %value, align 8, !dbg !1388
  %lt143 = icmp slt i64 %84, %85, !dbg !1387
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1387

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1389
  br label %guard_block147, !dbg !1389

if.exit145:                                       ; preds = %if.exit138
  %86 = load i64, ptr %new_value139, align 8, !dbg !1390
  store i64 %86, ptr %blockret131, align 8, !dbg !1390
  br label %expr_block.exit146, !dbg !1390

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1390

guard_block147:                                   ; preds = %if.then144, %if.then136
  %87 = load i64, ptr %error_var130, align 8, !dbg !1390
  store i64 %87, ptr %reterr, align 8, !dbg !1390
  br label %err_retblock, !dbg !1390

noerr_block148:                                   ; preds = %expr_block.exit146
  %88 = load i64, ptr %blockret131, align 8, !dbg !1390
  store i64 %88, ptr %value, align 8, !dbg !1390
  br label %loop.cond83, !dbg !1390

loop.exit149:                                     ; preds = %loop.cond83
  %89 = load i64, ptr %value, align 8, !dbg !1391
  store i64 %89, ptr %blockret, align 8, !dbg !1391
  br label %expr_block.exit150, !dbg !1391

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %90 = load i64, ptr %blockret, align 8, !dbg !1391
  store i64 %90, ptr %0, align 8, !dbg !1391
  ret i64 0, !dbg !1391

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then
  %91 = load i64, ptr %reterr, align 8, !dbg !1391
  ret i64 %91, !dbg !1391

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %96 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %97 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %taddr20, align 8
  %98 = load [2 x i64], ptr %taddr20, align 8
  store %any %93, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd21, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %100 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 750, [2 x i64] %100), !dbg !1299
  unreachable, !dbg !1299

panic33:                                          ; preds = %if.exit30
  store i64 %34, ptr %taddr34, align 8
  %101 = insertvalue %any undef, ptr %taddr34, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr35, align 8
  %103 = insertvalue %any undef, ptr %taddr35, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr36, align 8
  %105 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr37, align 8
  %106 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %taddr38, align 8
  %107 = load [2 x i64], ptr %taddr38, align 8
  store %any %102, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %104, ptr %ptradd40, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %109 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 763, [2 x i64] %109), !dbg !1315
  unreachable, !dbg !1315

panic57:                                          ; preds = %if.exit54
  store i64 %43, ptr %taddr58, align 8
  %110 = insertvalue %any undef, ptr %taddr58, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr60, align 8
  %114 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr61, align 8
  %115 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %taddr62, align 8
  %116 = load [2 x i64], ptr %taddr62, align 8
  store %any %111, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %113, ptr %ptradd64, align 8
  %117 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %118 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 767, [2 x i64] %118), !dbg !1324
  unreachable, !dbg !1324

panic90:                                          ; preds = %loop.body84
  store i64 %56, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr92, align 8
  %121 = insertvalue %any undef, ptr %taddr92, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr93, align 8
  %123 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr94, align 8
  %124 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.func.66, i64 7 }, ptr %taddr95, align 8
  %125 = load [2 x i64], ptr %taddr95, align 8
  store %any %120, ptr %varargslots96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %122, ptr %ptradd97, align 8
  %126 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp98", ptr %taddr99, align 8
  %127 = load [2 x i64], ptr %taddr99, align 8
  call void @std.core.builtin.panicf([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 790, [2 x i64] %127), !dbg !1353
  unreachable, !dbg !1353
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_int(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1392 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i32, align 4
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 8
  %taddr99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value139 = alloca i32, align 4
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1396, metadata !DIExpression()), !dbg !1397
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1398, metadata !DIExpression()), !dbg !1399
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1400
  %le = icmp sle i32 %4, 10, !dbg !1400
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1400

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1404
  %gt = icmp sgt i32 %5, 1, !dbg !1404
  br label %and.phi, !dbg !1404

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1404
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1404

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1405
  %eq = icmp eq i32 %6, 16, !dbg !1405
  br label %or.phi, !dbg !1405

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1405
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1405

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1400
  unreachable, !dbg !1400

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1406, metadata !DIExpression()), !dbg !1407
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1408
  %11 = load i64, ptr %ptradd, align 8, !dbg !1408
  store i64 %11, ptr %len, align 8, !dbg !1408
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1409, metadata !DIExpression()), !dbg !1410
  store i64 0, ptr %index, align 8, !dbg !1411
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1412, metadata !DIExpression()), !dbg !1413
  %12 = load ptr, ptr %string, align 8, !dbg !1414
  store ptr %12, ptr %ptr, align 8, !dbg !1414
  br label %loop.cond, !dbg !1415

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1416
  %14 = load i64, ptr %len, align 8, !dbg !1418
  %lt = icmp ult i64 %13, %14, !dbg !1416
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1416

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1419
  %16 = load i64, ptr %index, align 8, !dbg !1420
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1420
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1421
  %eq7 = icmp eq i8 %18, 32, !dbg !1421
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1421

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1424
  %eq9 = icmp eq i8 %19, 9, !dbg !1424
  br label %or.phi10, !dbg !1424

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1424
  br label %and.phi12, !dbg !1424

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1424
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1424

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1425
  %add = add i64 %20, 1, !dbg !1425
  store i64 %add, ptr %index, align 8, !dbg !1425
  br label %loop.cond, !dbg !1425

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1426
  %22 = load i64, ptr %index, align 8, !dbg !1427
  %eq14 = icmp eq i64 %21, %22, !dbg !1426
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1426

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1428
  br label %err_retblock, !dbg !1428

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1429, metadata !DIExpression()), !dbg !1430
  store i8 0, ptr %is_negative, align 1, !dbg !1430
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1431
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1431
  %24 = load ptr, ptr %string, align 8, !dbg !1431
  %25 = load i64, ptr %index, align 8, !dbg !1433
  %ge = icmp uge i64 %25, %23, !dbg !1433
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1433
  br i1 %26, label %panic, label %checkok, !dbg !1433

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1433
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit24, !dbg !1434

if.exit24:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1436
  %29 = load i64, ptr %index, align 8, !dbg !1437
  %add25 = add i64 %29, 1, !dbg !1437
  store i64 %add25, ptr %index, align 8, !dbg !1437
  br label %switch.exit, !dbg !1437

switch.case26:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1438
  %add27 = add i64 %30, 1, !dbg !1438
  store i64 %add27, ptr %index, align 8, !dbg !1438
  br label %switch.exit, !dbg !1438

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1440

switch.exit:                                      ; preds = %switch.default, %switch.case26, %if.exit24
  %31 = load i64, ptr %len, align 8, !dbg !1442
  %32 = load i64, ptr %index, align 8, !dbg !1443
  %eq28 = icmp eq i64 %31, %32, !dbg !1442
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1442

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1444
  br label %err_retblock, !dbg !1444

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1445, metadata !DIExpression()), !dbg !1446
  %33 = load i32, ptr %base1, align 4, !dbg !1447
  store i32 %33, ptr %base_used, align 4, !dbg !1447
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1448
  %34 = load i64, ptr %ptradd31, align 8, !dbg !1448
  %35 = load ptr, ptr %string, align 8, !dbg !1448
  %36 = load i64, ptr %index, align 8, !dbg !1449
  %ge32 = icmp uge i64 %36, %34, !dbg !1449
  %37 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1449
  br i1 %37, label %panic33, label %checkok43, !dbg !1449

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1449
  %38 = load i8, ptr %ptradd44, align 1, !dbg !1449
  %eq45 = icmp eq i8 %38, 48, !dbg !1448
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1448

and.rhs46:                                        ; preds = %checkok43
  %39 = load i32, ptr %base1, align 4, !dbg !1450
  %eq47 = icmp eq i32 %39, 10, !dbg !1450
  br label %and.phi48, !dbg !1450

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1450
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1450

if.then50:                                        ; preds = %and.phi48
  %40 = load i64, ptr %index, align 8, !dbg !1451
  %add51 = add i64 %40, 1, !dbg !1451
  store i64 %add51, ptr %index, align 8, !dbg !1451
  %41 = load i64, ptr %index, align 8, !dbg !1453
  %42 = load i64, ptr %len, align 8, !dbg !1454
  %eq52 = icmp eq i64 %41, %42, !dbg !1453
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1453

if.then53:                                        ; preds = %if.then50
  store i32 0, ptr %blockret, align 4, !dbg !1455
  br label %expr_block.exit150, !dbg !1455

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1456
  %43 = load i64, ptr %ptradd55, align 8, !dbg !1456
  %44 = load ptr, ptr %string, align 8, !dbg !1456
  %45 = load i64, ptr %index, align 8, !dbg !1458
  %ge56 = icmp uge i64 %45, %43, !dbg !1458
  %46 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1458
  br i1 %46, label %panic57, label %checkok67, !dbg !1458

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1458
  %47 = load i8, ptr %ptradd68, align 1
  store i8 %47, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %48 = load i8, ptr %switch69, align 1
  switch i8 %48, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 16, ptr %base_used, align 4, !dbg !1459
  %49 = load i64, ptr %index, align 8, !dbg !1461
  %add72 = add i64 %49, 1, !dbg !1461
  store i64 %add72, ptr %index, align 8, !dbg !1461
  br label %switch.exit78, !dbg !1461

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 2, ptr %base_used, align 4, !dbg !1462
  %50 = load i64, ptr %index, align 8, !dbg !1464
  %add74 = add i64 %50, 1, !dbg !1464
  store i64 %add74, ptr %index, align 8, !dbg !1464
  br label %switch.exit78, !dbg !1464

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i32 8, ptr %base_used, align 4, !dbg !1465
  %51 = load i64, ptr %index, align 8, !dbg !1467
  %add76 = add i64 %51, 1, !dbg !1467
  store i64 %add76, ptr %index, align 8, !dbg !1467
  br label %switch.exit78, !dbg !1467

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1468

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %52 = load i64, ptr %len, align 8, !dbg !1470
  %53 = load i64, ptr %index, align 8, !dbg !1471
  %eq79 = icmp eq i64 %52, %53, !dbg !1470
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1470

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1472
  br label %err_retblock, !dbg !1472

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1472

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1473, metadata !DIExpression()), !dbg !1474
  store i32 0, ptr %value, align 4, !dbg !1475
  br label %loop.cond83, !dbg !1476

loop.cond83:                                      ; preds = %noerr_block148, %if.exit82
  %54 = load i64, ptr %index, align 8, !dbg !1477
  %55 = load i64, ptr %len, align 8, !dbg !1479
  %neq = icmp ne i64 %54, %55, !dbg !1477
  br i1 %neq, label %loop.body84, label %loop.exit149, !dbg !1477

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1480, metadata !DIExpression()), !dbg !1482
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1483, metadata !DIExpression()), !dbg !1485
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1486
  %56 = load i64, ptr %ptradd87, align 8, !dbg !1486
  %57 = load ptr, ptr %string, align 8, !dbg !1486
  %58 = load i64, ptr %index, align 8, !dbg !1487
  %add88 = add i64 %58, 1, !dbg !1487
  store i64 %add88, ptr %index, align 8, !dbg !1487
  %ge89 = icmp uge i64 %58, %56, !dbg !1487
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1487
  br i1 %59, label %panic90, label %checkok100, !dbg !1487

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1487
  %60 = load i8, ptr %ptradd101, align 1, !dbg !1487
  store i8 %60, ptr %ch, align 1, !dbg !1487
  %61 = load i32, ptr %base_used, align 4, !dbg !1488
  %neq102 = icmp ne i32 %61, 16, !dbg !1488
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1488

or.rhs103:                                        ; preds = %checkok100
  %62 = load i8, ptr %ch, align 1, !dbg !1489
  %lt104 = icmp ult i8 %62, 65, !dbg !1489
  br label %or.phi105, !dbg !1489

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1489
  br i1 %val106, label %if.then107, label %if.exit108, !dbg !1489

if.then107:                                       ; preds = %or.phi105
  %63 = load i8, ptr %ch, align 1, !dbg !1490
  %zext = zext i8 %63 to i32, !dbg !1490
  %sub = sub i32 %zext, 48, !dbg !1491
  %trunc = trunc i32 %sub to i8, !dbg !1491
  store i8 %trunc, ptr %blockret86, align 1, !dbg !1491
  br label %expr_block.exit, !dbg !1491

if.exit108:                                       ; preds = %or.phi105
  %64 = load i8, ptr %ch, align 1, !dbg !1492
  %le109 = icmp ule i8 %64, 70, !dbg !1492
  br i1 %le109, label %if.then110, label %if.exit115, !dbg !1492

if.then110:                                       ; preds = %if.exit108
  %65 = load i8, ptr %ch, align 1, !dbg !1493
  %zext111 = zext i8 %65 to i32, !dbg !1493
  %sub112 = sub i32 %zext111, 65, !dbg !1493
  %add113 = add i32 %sub112, 10, !dbg !1494
  %trunc114 = trunc i32 %add113 to i8, !dbg !1494
  store i8 %trunc114, ptr %blockret86, align 1, !dbg !1494
  br label %expr_block.exit, !dbg !1494

if.exit115:                                       ; preds = %if.exit108
  %66 = load i8, ptr %ch, align 1, !dbg !1495
  %lt116 = icmp ult i8 %66, 97, !dbg !1495
  br i1 %lt116, label %if.then117, label %if.exit118, !dbg !1495

if.then117:                                       ; preds = %if.exit115
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1496
  br label %guard_block, !dbg !1496

if.exit118:                                       ; preds = %if.exit115
  %67 = load i8, ptr %ch, align 1, !dbg !1497
  %gt119 = icmp ugt i8 %67, 102, !dbg !1497
  br i1 %gt119, label %if.then120, label %if.exit121, !dbg !1497

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1498
  br label %guard_block, !dbg !1498

if.exit121:                                       ; preds = %if.exit118
  %68 = load i8, ptr %ch, align 1, !dbg !1499
  %zext122 = zext i8 %68 to i32, !dbg !1499
  %sub123 = sub i32 %zext122, 97, !dbg !1499
  %add124 = add i32 %sub123, 10, !dbg !1500
  %trunc125 = trunc i32 %add124 to i8, !dbg !1500
  store i8 %trunc125, ptr %blockret86, align 1, !dbg !1500
  br label %expr_block.exit, !dbg !1500

expr_block.exit:                                  ; preds = %if.exit121, %if.then110, %if.then107
  br label %noerr_block, !dbg !1500

guard_block:                                      ; preds = %if.then120, %if.then117
  %69 = load i64, ptr %error_var, align 8, !dbg !1500
  store i64 %69, ptr %reterr, align 8, !dbg !1500
  br label %err_retblock, !dbg !1500

noerr_block:                                      ; preds = %expr_block.exit
  %70 = load i8, ptr %blockret86, align 1, !dbg !1500
  store i8 %70, ptr %c85, align 1, !dbg !1500
  %71 = load i8, ptr %c85, align 1, !dbg !1501
  %zext126 = zext i8 %71 to i32, !dbg !1501
  %72 = load i32, ptr %base_used, align 4, !dbg !1502
  %le127 = icmp sle i32 %72, %zext126, !dbg !1501
  %check = icmp slt i32 %zext126, 0, !dbg !1501
  %siui-le = or i1 %check, %le127, !dbg !1501
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1501

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1503
  br label %err_retblock, !dbg !1503

if.exit129:                                       ; preds = %noerr_block
  %73 = load i8, ptr %is_negative, align 1, !dbg !1504
  %74 = trunc i8 %73 to i1, !dbg !1504
  br i1 %74, label %if.then132, label %if.exit138, !dbg !1504

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1506, metadata !DIExpression()), !dbg !1508
  %75 = load i32, ptr %value, align 4, !dbg !1509
  %76 = load i32, ptr %base_used, align 4, !dbg !1510
  %mul = mul i32 %75, %76, !dbg !1509
  %77 = load i8, ptr %c85, align 1, !dbg !1511
  %zext133 = zext i8 %77 to i32, !dbg !1511
  %sub134 = sub i32 %mul, %zext133, !dbg !1509
  store i32 %sub134, ptr %new_value, align 4, !dbg !1509
  %78 = load i32, ptr %new_value, align 4, !dbg !1512
  %79 = load i32, ptr %value, align 4, !dbg !1513
  %gt135 = icmp sgt i32 %78, %79, !dbg !1512
  br i1 %gt135, label %if.then136, label %if.exit137, !dbg !1512

if.then136:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1514
  br label %guard_block147, !dbg !1514

if.exit137:                                       ; preds = %if.then132
  %80 = load i32, ptr %new_value, align 4, !dbg !1515
  store i32 %80, ptr %blockret131, align 4, !dbg !1515
  br label %expr_block.exit146, !dbg !1515

if.exit138:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value139, metadata !1516, metadata !DIExpression()), !dbg !1517
  %81 = load i32, ptr %value, align 4, !dbg !1518
  %82 = load i32, ptr %base_used, align 4, !dbg !1519
  %mul140 = mul i32 %81, %82, !dbg !1518
  %83 = load i8, ptr %c85, align 1, !dbg !1520
  %zext141 = zext i8 %83 to i32, !dbg !1520
  %add142 = add i32 %mul140, %zext141, !dbg !1518
  store i32 %add142, ptr %new_value139, align 4, !dbg !1518
  %84 = load i32, ptr %new_value139, align 4, !dbg !1521
  %85 = load i32, ptr %value, align 4, !dbg !1522
  %lt143 = icmp slt i32 %84, %85, !dbg !1521
  br i1 %lt143, label %if.then144, label %if.exit145, !dbg !1521

if.then144:                                       ; preds = %if.exit138
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1523
  br label %guard_block147, !dbg !1523

if.exit145:                                       ; preds = %if.exit138
  %86 = load i32, ptr %new_value139, align 4, !dbg !1524
  store i32 %86, ptr %blockret131, align 4, !dbg !1524
  br label %expr_block.exit146, !dbg !1524

expr_block.exit146:                               ; preds = %if.exit145, %if.exit137
  br label %noerr_block148, !dbg !1524

guard_block147:                                   ; preds = %if.then144, %if.then136
  %87 = load i64, ptr %error_var130, align 8, !dbg !1524
  store i64 %87, ptr %reterr, align 8, !dbg !1524
  br label %err_retblock, !dbg !1524

noerr_block148:                                   ; preds = %expr_block.exit146
  %88 = load i32, ptr %blockret131, align 4, !dbg !1524
  store i32 %88, ptr %value, align 4, !dbg !1524
  br label %loop.cond83, !dbg !1524

loop.exit149:                                     ; preds = %loop.cond83
  %89 = load i32, ptr %value, align 4, !dbg !1525
  store i32 %89, ptr %blockret, align 4, !dbg !1525
  br label %expr_block.exit150, !dbg !1525

expr_block.exit150:                               ; preds = %loop.exit149, %if.then53
  %90 = load i32, ptr %blockret, align 4, !dbg !1525
  store i32 %90, ptr %0, align 4, !dbg !1525
  ret i64 0, !dbg !1525

err_retblock:                                     ; preds = %guard_block147, %if.then128, %guard_block, %if.then80, %if.then29, %if.then
  %91 = load i64, ptr %reterr, align 8, !dbg !1525
  ret i64 %91, !dbg !1525

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %96 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %97 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %taddr20, align 8
  %98 = load [2 x i64], ptr %taddr20, align 8
  store %any %93, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd21, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %100 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 750, [2 x i64] %100), !dbg !1433
  unreachable, !dbg !1433

panic33:                                          ; preds = %if.exit30
  store i64 %34, ptr %taddr34, align 8
  %101 = insertvalue %any undef, ptr %taddr34, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr35, align 8
  %103 = insertvalue %any undef, ptr %taddr35, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr36, align 8
  %105 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr37, align 8
  %106 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %taddr38, align 8
  %107 = load [2 x i64], ptr %taddr38, align 8
  store %any %102, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %104, ptr %ptradd40, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %109 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 763, [2 x i64] %109), !dbg !1449
  unreachable, !dbg !1449

panic57:                                          ; preds = %if.exit54
  store i64 %43, ptr %taddr58, align 8
  %110 = insertvalue %any undef, ptr %taddr58, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr60, align 8
  %114 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr61, align 8
  %115 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %taddr62, align 8
  %116 = load [2 x i64], ptr %taddr62, align 8
  store %any %111, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %113, ptr %ptradd64, align 8
  %117 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %118 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 767, [2 x i64] %118), !dbg !1458
  unreachable, !dbg !1458

panic90:                                          ; preds = %loop.body84
  store i64 %56, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr92, align 8
  %121 = insertvalue %any undef, ptr %taddr92, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr93, align 8
  %123 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr94, align 8
  %124 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.func.67, i64 6 }, ptr %taddr95, align 8
  %125 = load [2 x i64], ptr %taddr95, align 8
  store %any %120, ptr %varargslots96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %122, ptr %ptradd97, align 8
  %126 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp98", ptr %taddr99, align 8
  %127 = load [2 x i64], ptr %taddr99, align 8
  call void @std.core.builtin.panicf([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 790, [2 x i64] %127), !dbg !1487
  unreachable, !dbg !1487
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_short(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1526 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i16, align 2
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 8
  %taddr99 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value143 = alloca i16, align 2
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1531, metadata !DIExpression()), !dbg !1532
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1533, metadata !DIExpression()), !dbg !1534
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1535
  %le = icmp sle i32 %4, 10, !dbg !1535
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1535

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1539
  %gt = icmp sgt i32 %5, 1, !dbg !1539
  br label %and.phi, !dbg !1539

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1539
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1539

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1540
  %eq = icmp eq i32 %6, 16, !dbg !1540
  br label %or.phi, !dbg !1540

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1540
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1540

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1535
  unreachable, !dbg !1535

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1541, metadata !DIExpression()), !dbg !1542
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1543
  %11 = load i64, ptr %ptradd, align 8, !dbg !1543
  store i64 %11, ptr %len, align 8, !dbg !1543
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1544, metadata !DIExpression()), !dbg !1545
  store i64 0, ptr %index, align 8, !dbg !1546
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1547, metadata !DIExpression()), !dbg !1548
  %12 = load ptr, ptr %string, align 8, !dbg !1549
  store ptr %12, ptr %ptr, align 8, !dbg !1549
  br label %loop.cond, !dbg !1550

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1551
  %14 = load i64, ptr %len, align 8, !dbg !1553
  %lt = icmp ult i64 %13, %14, !dbg !1551
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1551

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1554
  %16 = load i64, ptr %index, align 8, !dbg !1555
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1555
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1556
  %eq7 = icmp eq i8 %18, 32, !dbg !1556
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1556

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1559
  %eq9 = icmp eq i8 %19, 9, !dbg !1559
  br label %or.phi10, !dbg !1559

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1559
  br label %and.phi12, !dbg !1559

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1559
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1559

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1560
  %add = add i64 %20, 1, !dbg !1560
  store i64 %add, ptr %index, align 8, !dbg !1560
  br label %loop.cond, !dbg !1560

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1561
  %22 = load i64, ptr %index, align 8, !dbg !1562
  %eq14 = icmp eq i64 %21, %22, !dbg !1561
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1561

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1563
  br label %err_retblock, !dbg !1563

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1564, metadata !DIExpression()), !dbg !1565
  store i8 0, ptr %is_negative, align 1, !dbg !1565
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1566
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1566
  %24 = load ptr, ptr %string, align 8, !dbg !1566
  %25 = load i64, ptr %index, align 8, !dbg !1568
  %ge = icmp uge i64 %25, %23, !dbg !1568
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1568
  br i1 %26, label %panic, label %checkok, !dbg !1568

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1568
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit24, !dbg !1569

if.exit24:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1571
  %29 = load i64, ptr %index, align 8, !dbg !1572
  %add25 = add i64 %29, 1, !dbg !1572
  store i64 %add25, ptr %index, align 8, !dbg !1572
  br label %switch.exit, !dbg !1572

switch.case26:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1573
  %add27 = add i64 %30, 1, !dbg !1573
  store i64 %add27, ptr %index, align 8, !dbg !1573
  br label %switch.exit, !dbg !1573

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1575

switch.exit:                                      ; preds = %switch.default, %switch.case26, %if.exit24
  %31 = load i64, ptr %len, align 8, !dbg !1577
  %32 = load i64, ptr %index, align 8, !dbg !1578
  %eq28 = icmp eq i64 %31, %32, !dbg !1577
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1577

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1579
  br label %err_retblock, !dbg !1579

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1580, metadata !DIExpression()), !dbg !1581
  %33 = load i32, ptr %base1, align 4, !dbg !1582
  %trunc = trunc i32 %33 to i16, !dbg !1582
  store i16 %trunc, ptr %base_used, align 2, !dbg !1582
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1583
  %34 = load i64, ptr %ptradd31, align 8, !dbg !1583
  %35 = load ptr, ptr %string, align 8, !dbg !1583
  %36 = load i64, ptr %index, align 8, !dbg !1584
  %ge32 = icmp uge i64 %36, %34, !dbg !1584
  %37 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1584
  br i1 %37, label %panic33, label %checkok43, !dbg !1584

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1584
  %38 = load i8, ptr %ptradd44, align 1, !dbg !1584
  %eq45 = icmp eq i8 %38, 48, !dbg !1583
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1583

and.rhs46:                                        ; preds = %checkok43
  %39 = load i32, ptr %base1, align 4, !dbg !1585
  %eq47 = icmp eq i32 %39, 10, !dbg !1585
  br label %and.phi48, !dbg !1585

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1585
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1585

if.then50:                                        ; preds = %and.phi48
  %40 = load i64, ptr %index, align 8, !dbg !1586
  %add51 = add i64 %40, 1, !dbg !1586
  store i64 %add51, ptr %index, align 8, !dbg !1586
  %41 = load i64, ptr %index, align 8, !dbg !1588
  %42 = load i64, ptr %len, align 8, !dbg !1589
  %eq52 = icmp eq i64 %41, %42, !dbg !1588
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1588

if.then53:                                        ; preds = %if.then50
  store i16 0, ptr %blockret, align 2, !dbg !1590
  br label %expr_block.exit157, !dbg !1590

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1591
  %43 = load i64, ptr %ptradd55, align 8, !dbg !1591
  %44 = load ptr, ptr %string, align 8, !dbg !1591
  %45 = load i64, ptr %index, align 8, !dbg !1593
  %ge56 = icmp uge i64 %45, %43, !dbg !1593
  %46 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1593
  br i1 %46, label %panic57, label %checkok67, !dbg !1593

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1593
  %47 = load i8, ptr %ptradd68, align 1
  store i8 %47, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %48 = load i8, ptr %switch69, align 1
  switch i8 %48, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 16, ptr %base_used, align 2, !dbg !1594
  %49 = load i64, ptr %index, align 8, !dbg !1596
  %add72 = add i64 %49, 1, !dbg !1596
  store i64 %add72, ptr %index, align 8, !dbg !1596
  br label %switch.exit78, !dbg !1596

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 2, ptr %base_used, align 2, !dbg !1597
  %50 = load i64, ptr %index, align 8, !dbg !1599
  %add74 = add i64 %50, 1, !dbg !1599
  store i64 %add74, ptr %index, align 8, !dbg !1599
  br label %switch.exit78, !dbg !1599

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i16 8, ptr %base_used, align 2, !dbg !1600
  %51 = load i64, ptr %index, align 8, !dbg !1602
  %add76 = add i64 %51, 1, !dbg !1602
  store i64 %add76, ptr %index, align 8, !dbg !1602
  br label %switch.exit78, !dbg !1602

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1603

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %52 = load i64, ptr %len, align 8, !dbg !1605
  %53 = load i64, ptr %index, align 8, !dbg !1606
  %eq79 = icmp eq i64 %52, %53, !dbg !1605
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1605

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1607
  br label %err_retblock, !dbg !1607

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1607

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1608, metadata !DIExpression()), !dbg !1609
  store i16 0, ptr %value, align 2, !dbg !1610
  br label %loop.cond83, !dbg !1611

loop.cond83:                                      ; preds = %noerr_block155, %if.exit82
  %54 = load i64, ptr %index, align 8, !dbg !1612
  %55 = load i64, ptr %len, align 8, !dbg !1614
  %neq = icmp ne i64 %54, %55, !dbg !1612
  br i1 %neq, label %loop.body84, label %loop.exit156, !dbg !1612

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1615, metadata !DIExpression()), !dbg !1617
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1618, metadata !DIExpression()), !dbg !1620
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1621
  %56 = load i64, ptr %ptradd87, align 8, !dbg !1621
  %57 = load ptr, ptr %string, align 8, !dbg !1621
  %58 = load i64, ptr %index, align 8, !dbg !1622
  %add88 = add i64 %58, 1, !dbg !1622
  store i64 %add88, ptr %index, align 8, !dbg !1622
  %ge89 = icmp uge i64 %58, %56, !dbg !1622
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1622
  br i1 %59, label %panic90, label %checkok100, !dbg !1622

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1622
  %60 = load i8, ptr %ptradd101, align 1, !dbg !1622
  store i8 %60, ptr %ch, align 1, !dbg !1622
  %61 = load i16, ptr %base_used, align 2, !dbg !1623
  %sext = sext i16 %61 to i32, !dbg !1623
  %neq102 = icmp ne i32 %sext, 16, !dbg !1623
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1623

or.rhs103:                                        ; preds = %checkok100
  %62 = load i8, ptr %ch, align 1, !dbg !1624
  %lt104 = icmp ult i8 %62, 65, !dbg !1624
  br label %or.phi105, !dbg !1624

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1624
  br i1 %val106, label %if.then107, label %if.exit109, !dbg !1624

if.then107:                                       ; preds = %or.phi105
  %63 = load i8, ptr %ch, align 1, !dbg !1625
  %zext = zext i8 %63 to i32, !dbg !1625
  %sub = sub i32 %zext, 48, !dbg !1626
  %trunc108 = trunc i32 %sub to i8, !dbg !1626
  store i8 %trunc108, ptr %blockret86, align 1, !dbg !1626
  br label %expr_block.exit, !dbg !1626

if.exit109:                                       ; preds = %or.phi105
  %64 = load i8, ptr %ch, align 1, !dbg !1627
  %le110 = icmp ule i8 %64, 70, !dbg !1627
  br i1 %le110, label %if.then111, label %if.exit116, !dbg !1627

if.then111:                                       ; preds = %if.exit109
  %65 = load i8, ptr %ch, align 1, !dbg !1628
  %zext112 = zext i8 %65 to i32, !dbg !1628
  %sub113 = sub i32 %zext112, 65, !dbg !1628
  %add114 = add i32 %sub113, 10, !dbg !1629
  %trunc115 = trunc i32 %add114 to i8, !dbg !1629
  store i8 %trunc115, ptr %blockret86, align 1, !dbg !1629
  br label %expr_block.exit, !dbg !1629

if.exit116:                                       ; preds = %if.exit109
  %66 = load i8, ptr %ch, align 1, !dbg !1630
  %lt117 = icmp ult i8 %66, 97, !dbg !1630
  br i1 %lt117, label %if.then118, label %if.exit119, !dbg !1630

if.then118:                                       ; preds = %if.exit116
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1631
  br label %guard_block, !dbg !1631

if.exit119:                                       ; preds = %if.exit116
  %67 = load i8, ptr %ch, align 1, !dbg !1632
  %gt120 = icmp ugt i8 %67, 102, !dbg !1632
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1632

if.then121:                                       ; preds = %if.exit119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1633
  br label %guard_block, !dbg !1633

if.exit122:                                       ; preds = %if.exit119
  %68 = load i8, ptr %ch, align 1, !dbg !1634
  %zext123 = zext i8 %68 to i32, !dbg !1634
  %sub124 = sub i32 %zext123, 97, !dbg !1634
  %add125 = add i32 %sub124, 10, !dbg !1635
  %trunc126 = trunc i32 %add125 to i8, !dbg !1635
  store i8 %trunc126, ptr %blockret86, align 1, !dbg !1635
  br label %expr_block.exit, !dbg !1635

expr_block.exit:                                  ; preds = %if.exit122, %if.then111, %if.then107
  br label %noerr_block, !dbg !1635

guard_block:                                      ; preds = %if.then121, %if.then118
  %69 = load i64, ptr %error_var, align 8, !dbg !1635
  store i64 %69, ptr %reterr, align 8, !dbg !1635
  br label %err_retblock, !dbg !1635

noerr_block:                                      ; preds = %expr_block.exit
  %70 = load i8, ptr %blockret86, align 1, !dbg !1635
  store i8 %70, ptr %c85, align 1, !dbg !1635
  %71 = load i8, ptr %c85, align 1, !dbg !1636
  %zext127 = zext i8 %71 to i16, !dbg !1636
  %72 = load i16, ptr %base_used, align 2, !dbg !1637
  %le128 = icmp sle i16 %72, %zext127, !dbg !1636
  %check = icmp slt i16 %zext127, 0, !dbg !1636
  %siui-le = or i1 %check, %le128, !dbg !1636
  br i1 %siui-le, label %if.then129, label %if.exit130, !dbg !1636

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1638
  br label %err_retblock, !dbg !1638

if.exit130:                                       ; preds = %noerr_block
  %73 = load i8, ptr %is_negative, align 1, !dbg !1639
  %74 = trunc i8 %73 to i1, !dbg !1639
  br i1 %74, label %if.then133, label %if.exit142, !dbg !1639

if.then133:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1641, metadata !DIExpression()), !dbg !1643
  %75 = load i16, ptr %value, align 2, !dbg !1644
  %sext134 = sext i16 %75 to i32, !dbg !1644
  %76 = load i16, ptr %base_used, align 2, !dbg !1645
  %sext135 = sext i16 %76 to i32, !dbg !1645
  %mul = mul i32 %sext134, %sext135, !dbg !1644
  %77 = load i8, ptr %c85, align 1, !dbg !1646
  %zext136 = zext i8 %77 to i32, !dbg !1646
  %sub137 = sub i32 %mul, %zext136, !dbg !1644
  %trunc138 = trunc i32 %sub137 to i16, !dbg !1644
  store i16 %trunc138, ptr %new_value, align 2, !dbg !1644
  %78 = load i16, ptr %new_value, align 2, !dbg !1647
  %79 = load i16, ptr %value, align 2, !dbg !1648
  %gt139 = icmp sgt i16 %78, %79, !dbg !1647
  br i1 %gt139, label %if.then140, label %if.exit141, !dbg !1647

if.then140:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1649
  br label %guard_block154, !dbg !1649

if.exit141:                                       ; preds = %if.then133
  %80 = load i16, ptr %new_value, align 2, !dbg !1650
  store i16 %80, ptr %blockret132, align 2, !dbg !1650
  br label %expr_block.exit153, !dbg !1650

if.exit142:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value143, metadata !1651, metadata !DIExpression()), !dbg !1652
  %81 = load i16, ptr %value, align 2, !dbg !1653
  %sext144 = sext i16 %81 to i32, !dbg !1653
  %82 = load i16, ptr %base_used, align 2, !dbg !1654
  %sext145 = sext i16 %82 to i32, !dbg !1654
  %mul146 = mul i32 %sext144, %sext145, !dbg !1653
  %83 = load i8, ptr %c85, align 1, !dbg !1655
  %zext147 = zext i8 %83 to i32, !dbg !1655
  %add148 = add i32 %mul146, %zext147, !dbg !1653
  %trunc149 = trunc i32 %add148 to i16, !dbg !1653
  store i16 %trunc149, ptr %new_value143, align 2, !dbg !1653
  %84 = load i16, ptr %new_value143, align 2, !dbg !1656
  %85 = load i16, ptr %value, align 2, !dbg !1657
  %lt150 = icmp slt i16 %84, %85, !dbg !1656
  br i1 %lt150, label %if.then151, label %if.exit152, !dbg !1656

if.then151:                                       ; preds = %if.exit142
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1658
  br label %guard_block154, !dbg !1658

if.exit152:                                       ; preds = %if.exit142
  %86 = load i16, ptr %new_value143, align 2, !dbg !1659
  store i16 %86, ptr %blockret132, align 2, !dbg !1659
  br label %expr_block.exit153, !dbg !1659

expr_block.exit153:                               ; preds = %if.exit152, %if.exit141
  br label %noerr_block155, !dbg !1659

guard_block154:                                   ; preds = %if.then151, %if.then140
  %87 = load i64, ptr %error_var131, align 8, !dbg !1659
  store i64 %87, ptr %reterr, align 8, !dbg !1659
  br label %err_retblock, !dbg !1659

noerr_block155:                                   ; preds = %expr_block.exit153
  %88 = load i16, ptr %blockret132, align 2, !dbg !1659
  store i16 %88, ptr %value, align 2, !dbg !1659
  br label %loop.cond83, !dbg !1659

loop.exit156:                                     ; preds = %loop.cond83
  %89 = load i16, ptr %value, align 2, !dbg !1660
  store i16 %89, ptr %blockret, align 2, !dbg !1660
  br label %expr_block.exit157, !dbg !1660

expr_block.exit157:                               ; preds = %loop.exit156, %if.then53
  %90 = load i16, ptr %blockret, align 2, !dbg !1660
  store i16 %90, ptr %0, align 2, !dbg !1660
  ret i64 0, !dbg !1660

err_retblock:                                     ; preds = %guard_block154, %if.then129, %guard_block, %if.then80, %if.then29, %if.then
  %91 = load i64, ptr %reterr, align 8, !dbg !1660
  ret i64 %91, !dbg !1660

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %96 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %97 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %taddr20, align 8
  %98 = load [2 x i64], ptr %taddr20, align 8
  store %any %93, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd21, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %100 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 750, [2 x i64] %100), !dbg !1568
  unreachable, !dbg !1568

panic33:                                          ; preds = %if.exit30
  store i64 %34, ptr %taddr34, align 8
  %101 = insertvalue %any undef, ptr %taddr34, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr35, align 8
  %103 = insertvalue %any undef, ptr %taddr35, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr36, align 8
  %105 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr37, align 8
  %106 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %taddr38, align 8
  %107 = load [2 x i64], ptr %taddr38, align 8
  store %any %102, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %104, ptr %ptradd40, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %109 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 763, [2 x i64] %109), !dbg !1584
  unreachable, !dbg !1584

panic57:                                          ; preds = %if.exit54
  store i64 %43, ptr %taddr58, align 8
  %110 = insertvalue %any undef, ptr %taddr58, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr60, align 8
  %114 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr61, align 8
  %115 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %taddr62, align 8
  %116 = load [2 x i64], ptr %taddr62, align 8
  store %any %111, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %113, ptr %ptradd64, align 8
  %117 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %118 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 767, [2 x i64] %118), !dbg !1593
  unreachable, !dbg !1593

panic90:                                          ; preds = %loop.body84
  store i64 %56, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr92, align 8
  %121 = insertvalue %any undef, ptr %taddr92, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr93, align 8
  %123 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr94, align 8
  %124 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.func.68, i64 8 }, ptr %taddr95, align 8
  %125 = load [2 x i64], ptr %taddr95, align 8
  store %any %120, ptr %varargslots96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %122, ptr %ptradd97, align 8
  %126 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp98", ptr %taddr99, align 8
  %127 = load [2 x i64], ptr %taddr99, align 8
  call void @std.core.builtin.panicf([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 790, [2 x i64] %127), !dbg !1622
  unreachable, !dbg !1622
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_ichar(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1661 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr34 = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca %"char[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %varargslots39 = alloca [2 x %any], align 8
  %taddr42 = alloca %"any[]", align 8
  %taddr58 = alloca i64, align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca %"char[]", align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %varargslots63 = alloca [2 x %any], align 8
  %taddr66 = alloca %"any[]", align 8
  %switch69 = alloca i8, align 1
  %value = alloca i8, align 1
  %c85 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret86 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr91 = alloca i64, align 8
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca %"char[]", align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %varargslots96 = alloca [2 x %any], align 8
  %taddr99 = alloca %"any[]", align 8
  %error_var130 = alloca i64, align 8
  %blockret131 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value142 = alloca i8, align 1
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1666, metadata !DIExpression()), !dbg !1667
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1668, metadata !DIExpression()), !dbg !1669
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1670
  %le = icmp sle i32 %4, 10, !dbg !1670
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1670

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1674
  %gt = icmp sgt i32 %5, 1, !dbg !1674
  br label %and.phi, !dbg !1674

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1674
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1674

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1675
  %eq = icmp eq i32 %6, 16, !dbg !1675
  br label %or.phi, !dbg !1675

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1675
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1675

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1670
  unreachable, !dbg !1670

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1676, metadata !DIExpression()), !dbg !1677
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1678
  %11 = load i64, ptr %ptradd, align 8, !dbg !1678
  store i64 %11, ptr %len, align 8, !dbg !1678
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1679, metadata !DIExpression()), !dbg !1680
  store i64 0, ptr %index, align 8, !dbg !1681
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1682, metadata !DIExpression()), !dbg !1683
  %12 = load ptr, ptr %string, align 8, !dbg !1684
  store ptr %12, ptr %ptr, align 8, !dbg !1684
  br label %loop.cond, !dbg !1685

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1686
  %14 = load i64, ptr %len, align 8, !dbg !1688
  %lt = icmp ult i64 %13, %14, !dbg !1686
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1686

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1689
  %16 = load i64, ptr %index, align 8, !dbg !1690
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1690
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1691
  %eq7 = icmp eq i8 %18, 32, !dbg !1691
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1691

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1694
  %eq9 = icmp eq i8 %19, 9, !dbg !1694
  br label %or.phi10, !dbg !1694

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1694
  br label %and.phi12, !dbg !1694

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1694
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1694

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1695
  %add = add i64 %20, 1, !dbg !1695
  store i64 %add, ptr %index, align 8, !dbg !1695
  br label %loop.cond, !dbg !1695

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1696
  %22 = load i64, ptr %index, align 8, !dbg !1697
  %eq14 = icmp eq i64 %21, %22, !dbg !1696
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1696

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1698
  br label %err_retblock, !dbg !1698

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1699, metadata !DIExpression()), !dbg !1700
  store i8 0, ptr %is_negative, align 1, !dbg !1700
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1701
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1701
  %24 = load ptr, ptr %string, align 8, !dbg !1701
  %25 = load i64, ptr %index, align 8, !dbg !1703
  %ge = icmp uge i64 %25, %23, !dbg !1703
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1703
  br i1 %26, label %panic, label %checkok, !dbg !1703

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1703
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case26
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.exit24, !dbg !1704

if.exit24:                                        ; preds = %switch.case
  store i8 1, ptr %is_negative, align 1, !dbg !1706
  %29 = load i64, ptr %index, align 8, !dbg !1707
  %add25 = add i64 %29, 1, !dbg !1707
  store i64 %add25, ptr %index, align 8, !dbg !1707
  br label %switch.exit, !dbg !1707

switch.case26:                                    ; preds = %switch.entry
  %30 = load i64, ptr %index, align 8, !dbg !1708
  %add27 = add i64 %30, 1, !dbg !1708
  store i64 %add27, ptr %index, align 8, !dbg !1708
  br label %switch.exit, !dbg !1708

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1710

switch.exit:                                      ; preds = %switch.default, %switch.case26, %if.exit24
  %31 = load i64, ptr %len, align 8, !dbg !1712
  %32 = load i64, ptr %index, align 8, !dbg !1713
  %eq28 = icmp eq i64 %31, %32, !dbg !1712
  br i1 %eq28, label %if.then29, label %if.exit30, !dbg !1712

if.then29:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1714
  br label %err_retblock, !dbg !1714

if.exit30:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1715, metadata !DIExpression()), !dbg !1716
  %33 = load i32, ptr %base1, align 4, !dbg !1717
  %trunc = trunc i32 %33 to i8, !dbg !1717
  store i8 %trunc, ptr %base_used, align 1, !dbg !1717
  %ptradd31 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1718
  %34 = load i64, ptr %ptradd31, align 8, !dbg !1718
  %35 = load ptr, ptr %string, align 8, !dbg !1718
  %36 = load i64, ptr %index, align 8, !dbg !1719
  %ge32 = icmp uge i64 %36, %34, !dbg !1719
  %37 = call i1 @llvm.expect.i1(i1 %ge32, i1 false), !dbg !1719
  br i1 %37, label %panic33, label %checkok43, !dbg !1719

checkok43:                                        ; preds = %if.exit30
  %ptradd44 = getelementptr inbounds i8, ptr %35, i64 %36, !dbg !1719
  %38 = load i8, ptr %ptradd44, align 1, !dbg !1719
  %eq45 = icmp eq i8 %38, 48, !dbg !1718
  br i1 %eq45, label %and.rhs46, label %and.phi48, !dbg !1718

and.rhs46:                                        ; preds = %checkok43
  %39 = load i32, ptr %base1, align 4, !dbg !1720
  %eq47 = icmp eq i32 %39, 10, !dbg !1720
  br label %and.phi48, !dbg !1720

and.phi48:                                        ; preds = %and.rhs46, %checkok43
  %val49 = phi i1 [ false, %checkok43 ], [ %eq47, %and.rhs46 ], !dbg !1720
  br i1 %val49, label %if.then50, label %if.exit82, !dbg !1720

if.then50:                                        ; preds = %and.phi48
  %40 = load i64, ptr %index, align 8, !dbg !1721
  %add51 = add i64 %40, 1, !dbg !1721
  store i64 %add51, ptr %index, align 8, !dbg !1721
  %41 = load i64, ptr %index, align 8, !dbg !1723
  %42 = load i64, ptr %len, align 8, !dbg !1724
  %eq52 = icmp eq i64 %41, %42, !dbg !1723
  br i1 %eq52, label %if.then53, label %if.exit54, !dbg !1723

if.then53:                                        ; preds = %if.then50
  store i8 0, ptr %blockret, align 1, !dbg !1725
  br label %expr_block.exit156, !dbg !1725

if.exit54:                                        ; preds = %if.then50
  %ptradd55 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1726
  %43 = load i64, ptr %ptradd55, align 8, !dbg !1726
  %44 = load ptr, ptr %string, align 8, !dbg !1726
  %45 = load i64, ptr %index, align 8, !dbg !1728
  %ge56 = icmp uge i64 %45, %43, !dbg !1728
  %46 = call i1 @llvm.expect.i1(i1 %ge56, i1 false), !dbg !1728
  br i1 %46, label %panic57, label %checkok67, !dbg !1728

checkok67:                                        ; preds = %if.exit54
  %ptradd68 = getelementptr inbounds i8, ptr %44, i64 %45, !dbg !1728
  %47 = load i8, ptr %ptradd68, align 1
  store i8 %47, ptr %switch69, align 1
  br label %switch.entry70

switch.entry70:                                   ; preds = %checkok67
  %48 = load i8, ptr %switch69, align 1
  switch i8 %48, label %switch.default77 [
    i8 120, label %switch.case71
    i8 88, label %switch.case71
    i8 98, label %switch.case73
    i8 66, label %switch.case73
    i8 111, label %switch.case75
    i8 79, label %switch.case75
  ]

switch.case71:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 16, ptr %base_used, align 1, !dbg !1729
  %49 = load i64, ptr %index, align 8, !dbg !1731
  %add72 = add i64 %49, 1, !dbg !1731
  store i64 %add72, ptr %index, align 8, !dbg !1731
  br label %switch.exit78, !dbg !1731

switch.case73:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 2, ptr %base_used, align 1, !dbg !1732
  %50 = load i64, ptr %index, align 8, !dbg !1734
  %add74 = add i64 %50, 1, !dbg !1734
  store i64 %add74, ptr %index, align 8, !dbg !1734
  br label %switch.exit78, !dbg !1734

switch.case75:                                    ; preds = %switch.entry70, %switch.entry70
  store i8 8, ptr %base_used, align 1, !dbg !1735
  %51 = load i64, ptr %index, align 8, !dbg !1737
  %add76 = add i64 %51, 1, !dbg !1737
  store i64 %add76, ptr %index, align 8, !dbg !1737
  br label %switch.exit78, !dbg !1737

switch.default77:                                 ; preds = %switch.entry70
  br label %switch.exit78, !dbg !1738

switch.exit78:                                    ; preds = %switch.default77, %switch.case75, %switch.case73, %switch.case71
  %52 = load i64, ptr %len, align 8, !dbg !1740
  %53 = load i64, ptr %index, align 8, !dbg !1741
  %eq79 = icmp eq i64 %52, %53, !dbg !1740
  br i1 %eq79, label %if.then80, label %if.exit81, !dbg !1740

if.then80:                                        ; preds = %switch.exit78
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1742
  br label %err_retblock, !dbg !1742

if.exit81:                                        ; preds = %switch.exit78
  br label %if.exit82, !dbg !1742

if.exit82:                                        ; preds = %if.exit81, %and.phi48
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1743, metadata !DIExpression()), !dbg !1744
  store i8 0, ptr %value, align 1, !dbg !1745
  br label %loop.cond83, !dbg !1746

loop.cond83:                                      ; preds = %noerr_block154, %if.exit82
  %54 = load i64, ptr %index, align 8, !dbg !1747
  %55 = load i64, ptr %len, align 8, !dbg !1749
  %neq = icmp ne i64 %54, %55, !dbg !1747
  br i1 %neq, label %loop.body84, label %loop.exit155, !dbg !1747

loop.body84:                                      ; preds = %loop.cond83
  call void @llvm.dbg.declare(metadata ptr %c85, metadata !1750, metadata !DIExpression()), !dbg !1752
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1753, metadata !DIExpression()), !dbg !1755
  %ptradd87 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1756
  %56 = load i64, ptr %ptradd87, align 8, !dbg !1756
  %57 = load ptr, ptr %string, align 8, !dbg !1756
  %58 = load i64, ptr %index, align 8, !dbg !1757
  %add88 = add i64 %58, 1, !dbg !1757
  store i64 %add88, ptr %index, align 8, !dbg !1757
  %ge89 = icmp uge i64 %58, %56, !dbg !1757
  %59 = call i1 @llvm.expect.i1(i1 %ge89, i1 false), !dbg !1757
  br i1 %59, label %panic90, label %checkok100, !dbg !1757

checkok100:                                       ; preds = %loop.body84
  %ptradd101 = getelementptr inbounds i8, ptr %57, i64 %58, !dbg !1757
  %60 = load i8, ptr %ptradd101, align 1, !dbg !1757
  store i8 %60, ptr %ch, align 1, !dbg !1757
  %61 = load i8, ptr %base_used, align 1, !dbg !1758
  %sext = sext i8 %61 to i32, !dbg !1758
  %neq102 = icmp ne i32 %sext, 16, !dbg !1758
  br i1 %neq102, label %or.phi105, label %or.rhs103, !dbg !1758

or.rhs103:                                        ; preds = %checkok100
  %62 = load i8, ptr %ch, align 1, !dbg !1759
  %lt104 = icmp ult i8 %62, 65, !dbg !1759
  br label %or.phi105, !dbg !1759

or.phi105:                                        ; preds = %or.rhs103, %checkok100
  %val106 = phi i1 [ true, %checkok100 ], [ %lt104, %or.rhs103 ], !dbg !1759
  br i1 %val106, label %if.then107, label %if.exit109, !dbg !1759

if.then107:                                       ; preds = %or.phi105
  %63 = load i8, ptr %ch, align 1, !dbg !1760
  %zext = zext i8 %63 to i32, !dbg !1760
  %sub = sub i32 %zext, 48, !dbg !1761
  %trunc108 = trunc i32 %sub to i8, !dbg !1761
  store i8 %trunc108, ptr %blockret86, align 1, !dbg !1761
  br label %expr_block.exit, !dbg !1761

if.exit109:                                       ; preds = %or.phi105
  %64 = load i8, ptr %ch, align 1, !dbg !1762
  %le110 = icmp ule i8 %64, 70, !dbg !1762
  br i1 %le110, label %if.then111, label %if.exit116, !dbg !1762

if.then111:                                       ; preds = %if.exit109
  %65 = load i8, ptr %ch, align 1, !dbg !1763
  %zext112 = zext i8 %65 to i32, !dbg !1763
  %sub113 = sub i32 %zext112, 65, !dbg !1763
  %add114 = add i32 %sub113, 10, !dbg !1764
  %trunc115 = trunc i32 %add114 to i8, !dbg !1764
  store i8 %trunc115, ptr %blockret86, align 1, !dbg !1764
  br label %expr_block.exit, !dbg !1764

if.exit116:                                       ; preds = %if.exit109
  %66 = load i8, ptr %ch, align 1, !dbg !1765
  %lt117 = icmp ult i8 %66, 97, !dbg !1765
  br i1 %lt117, label %if.then118, label %if.exit119, !dbg !1765

if.then118:                                       ; preds = %if.exit116
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1766
  br label %guard_block, !dbg !1766

if.exit119:                                       ; preds = %if.exit116
  %67 = load i8, ptr %ch, align 1, !dbg !1767
  %gt120 = icmp ugt i8 %67, 102, !dbg !1767
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1767

if.then121:                                       ; preds = %if.exit119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1768
  br label %guard_block, !dbg !1768

if.exit122:                                       ; preds = %if.exit119
  %68 = load i8, ptr %ch, align 1, !dbg !1769
  %zext123 = zext i8 %68 to i32, !dbg !1769
  %sub124 = sub i32 %zext123, 97, !dbg !1769
  %add125 = add i32 %sub124, 10, !dbg !1770
  %trunc126 = trunc i32 %add125 to i8, !dbg !1770
  store i8 %trunc126, ptr %blockret86, align 1, !dbg !1770
  br label %expr_block.exit, !dbg !1770

expr_block.exit:                                  ; preds = %if.exit122, %if.then111, %if.then107
  br label %noerr_block, !dbg !1770

guard_block:                                      ; preds = %if.then121, %if.then118
  %69 = load i64, ptr %error_var, align 8, !dbg !1770
  store i64 %69, ptr %reterr, align 8, !dbg !1770
  br label %err_retblock, !dbg !1770

noerr_block:                                      ; preds = %expr_block.exit
  %70 = load i8, ptr %blockret86, align 1, !dbg !1770
  store i8 %70, ptr %c85, align 1, !dbg !1770
  %71 = load i8, ptr %c85, align 1, !dbg !1771
  %72 = load i8, ptr %base_used, align 1, !dbg !1772
  %le127 = icmp sle i8 %72, %71, !dbg !1771
  %check = icmp slt i8 %71, 0, !dbg !1771
  %siui-le = or i1 %check, %le127, !dbg !1771
  br i1 %siui-le, label %if.then128, label %if.exit129, !dbg !1771

if.then128:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1773
  br label %err_retblock, !dbg !1773

if.exit129:                                       ; preds = %noerr_block
  %73 = load i8, ptr %is_negative, align 1, !dbg !1774
  %74 = trunc i8 %73 to i1, !dbg !1774
  br i1 %74, label %if.then132, label %if.exit141, !dbg !1774

if.then132:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1776, metadata !DIExpression()), !dbg !1778
  %75 = load i8, ptr %value, align 1, !dbg !1779
  %sext133 = sext i8 %75 to i32, !dbg !1779
  %76 = load i8, ptr %base_used, align 1, !dbg !1780
  %sext134 = sext i8 %76 to i32, !dbg !1780
  %mul = mul i32 %sext133, %sext134, !dbg !1779
  %77 = load i8, ptr %c85, align 1, !dbg !1781
  %zext135 = zext i8 %77 to i32, !dbg !1781
  %sub136 = sub i32 %mul, %zext135, !dbg !1779
  %trunc137 = trunc i32 %sub136 to i8, !dbg !1779
  store i8 %trunc137, ptr %new_value, align 1, !dbg !1779
  %78 = load i8, ptr %new_value, align 1, !dbg !1782
  %79 = load i8, ptr %value, align 1, !dbg !1783
  %gt138 = icmp sgt i8 %78, %79, !dbg !1782
  br i1 %gt138, label %if.then139, label %if.exit140, !dbg !1782

if.then139:                                       ; preds = %if.then132
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1784
  br label %guard_block153, !dbg !1784

if.exit140:                                       ; preds = %if.then132
  %80 = load i8, ptr %new_value, align 1, !dbg !1785
  store i8 %80, ptr %blockret131, align 1, !dbg !1785
  br label %expr_block.exit152, !dbg !1785

if.exit141:                                       ; preds = %if.exit129
  call void @llvm.dbg.declare(metadata ptr %new_value142, metadata !1786, metadata !DIExpression()), !dbg !1787
  %81 = load i8, ptr %value, align 1, !dbg !1788
  %sext143 = sext i8 %81 to i32, !dbg !1788
  %82 = load i8, ptr %base_used, align 1, !dbg !1789
  %sext144 = sext i8 %82 to i32, !dbg !1789
  %mul145 = mul i32 %sext143, %sext144, !dbg !1788
  %83 = load i8, ptr %c85, align 1, !dbg !1790
  %zext146 = zext i8 %83 to i32, !dbg !1790
  %add147 = add i32 %mul145, %zext146, !dbg !1788
  %trunc148 = trunc i32 %add147 to i8, !dbg !1788
  store i8 %trunc148, ptr %new_value142, align 1, !dbg !1788
  %84 = load i8, ptr %new_value142, align 1, !dbg !1791
  %85 = load i8, ptr %value, align 1, !dbg !1792
  %lt149 = icmp slt i8 %84, %85, !dbg !1791
  br i1 %lt149, label %if.then150, label %if.exit151, !dbg !1791

if.then150:                                       ; preds = %if.exit141
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var130, align 8, !dbg !1793
  br label %guard_block153, !dbg !1793

if.exit151:                                       ; preds = %if.exit141
  %86 = load i8, ptr %new_value142, align 1, !dbg !1794
  store i8 %86, ptr %blockret131, align 1, !dbg !1794
  br label %expr_block.exit152, !dbg !1794

expr_block.exit152:                               ; preds = %if.exit151, %if.exit140
  br label %noerr_block154, !dbg !1794

guard_block153:                                   ; preds = %if.then150, %if.then139
  %87 = load i64, ptr %error_var130, align 8, !dbg !1794
  store i64 %87, ptr %reterr, align 8, !dbg !1794
  br label %err_retblock, !dbg !1794

noerr_block154:                                   ; preds = %expr_block.exit152
  %88 = load i8, ptr %blockret131, align 1, !dbg !1794
  store i8 %88, ptr %value, align 1, !dbg !1794
  br label %loop.cond83, !dbg !1794

loop.exit155:                                     ; preds = %loop.cond83
  %89 = load i8, ptr %value, align 1, !dbg !1795
  store i8 %89, ptr %blockret, align 1, !dbg !1795
  br label %expr_block.exit156, !dbg !1795

expr_block.exit156:                               ; preds = %loop.exit155, %if.then53
  %90 = load i8, ptr %blockret, align 1, !dbg !1795
  store i8 %90, ptr %0, align 1, !dbg !1795
  ret i64 0, !dbg !1795

err_retblock:                                     ; preds = %guard_block153, %if.then128, %guard_block, %if.then80, %if.then29, %if.then
  %91 = load i64, ptr %reterr, align 8, !dbg !1795
  ret i64 %91, !dbg !1795

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %92 = insertvalue %any undef, ptr %taddr16, 0
  %93 = insertvalue %any %92, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %94 = insertvalue %any undef, ptr %taddr17, 0
  %95 = insertvalue %any %94, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %96 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %97 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %taddr20, align 8
  %98 = load [2 x i64], ptr %taddr20, align 8
  store %any %93, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %95, ptr %ptradd21, align 8
  %99 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %99, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %100 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %96, [2 x i64] %97, [2 x i64] %98, i32 750, [2 x i64] %100), !dbg !1703
  unreachable, !dbg !1703

panic33:                                          ; preds = %if.exit30
  store i64 %34, ptr %taddr34, align 8
  %101 = insertvalue %any undef, ptr %taddr34, 0
  %102 = insertvalue %any %101, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %36, ptr %taddr35, align 8
  %103 = insertvalue %any undef, ptr %taddr35, 0
  %104 = insertvalue %any %103, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr36, align 8
  %105 = load [2 x i64], ptr %taddr36, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr37, align 8
  %106 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %taddr38, align 8
  %107 = load [2 x i64], ptr %taddr38, align 8
  store %any %102, ptr %varargslots39, align 8
  %ptradd40 = getelementptr inbounds i8, ptr %varargslots39, i64 16
  store %any %104, ptr %ptradd40, align 8
  %108 = insertvalue %"any[]" undef, ptr %varargslots39, 0
  %"$$temp41" = insertvalue %"any[]" %108, i64 2, 1
  store %"any[]" %"$$temp41", ptr %taddr42, align 8
  %109 = load [2 x i64], ptr %taddr42, align 8
  call void @std.core.builtin.panicf([2 x i64] %105, [2 x i64] %106, [2 x i64] %107, i32 763, [2 x i64] %109), !dbg !1719
  unreachable, !dbg !1719

panic57:                                          ; preds = %if.exit54
  store i64 %43, ptr %taddr58, align 8
  %110 = insertvalue %any undef, ptr %taddr58, 0
  %111 = insertvalue %any %110, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %45, ptr %taddr59, align 8
  %112 = insertvalue %any undef, ptr %taddr59, 0
  %113 = insertvalue %any %112, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr60, align 8
  %114 = load [2 x i64], ptr %taddr60, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr61, align 8
  %115 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %taddr62, align 8
  %116 = load [2 x i64], ptr %taddr62, align 8
  store %any %111, ptr %varargslots63, align 8
  %ptradd64 = getelementptr inbounds i8, ptr %varargslots63, i64 16
  store %any %113, ptr %ptradd64, align 8
  %117 = insertvalue %"any[]" undef, ptr %varargslots63, 0
  %"$$temp65" = insertvalue %"any[]" %117, i64 2, 1
  store %"any[]" %"$$temp65", ptr %taddr66, align 8
  %118 = load [2 x i64], ptr %taddr66, align 8
  call void @std.core.builtin.panicf([2 x i64] %114, [2 x i64] %115, [2 x i64] %116, i32 767, [2 x i64] %118), !dbg !1728
  unreachable, !dbg !1728

panic90:                                          ; preds = %loop.body84
  store i64 %56, ptr %taddr91, align 8
  %119 = insertvalue %any undef, ptr %taddr91, 0
  %120 = insertvalue %any %119, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %58, ptr %taddr92, align 8
  %121 = insertvalue %any undef, ptr %taddr92, 0
  %122 = insertvalue %any %121, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr93, align 8
  %123 = load [2 x i64], ptr %taddr93, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr94, align 8
  %124 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.func.69, i64 8 }, ptr %taddr95, align 8
  %125 = load [2 x i64], ptr %taddr95, align 8
  store %any %120, ptr %varargslots96, align 8
  %ptradd97 = getelementptr inbounds i8, ptr %varargslots96, i64 16
  store %any %122, ptr %ptradd97, align 8
  %126 = insertvalue %"any[]" undef, ptr %varargslots96, 0
  %"$$temp98" = insertvalue %"any[]" %126, i64 2, 1
  store %"any[]" %"$$temp98", ptr %taddr99, align 8
  %127 = load [2 x i64], ptr %taddr99, align 8
  call void @std.core.builtin.panicf([2 x i64] %123, [2 x i64] %124, [2 x i64] %125, i32 790, [2 x i64] %127), !dbg !1757
  unreachable, !dbg !1757
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_uint128(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1796 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i128, align 16
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i128, align 16
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch70 = alloca i8, align 1
  %value = alloca i128, align 16
  %c86 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret87 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i128, align 16
  %new_value = alloca i128, align 16
  %new_value140 = alloca i128, align 16
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1801, metadata !DIExpression()), !dbg !1802
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1803, metadata !DIExpression()), !dbg !1804
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1805
  %le = icmp sle i32 %4, 10, !dbg !1805
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1805

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1809
  %gt = icmp sgt i32 %5, 1, !dbg !1809
  br label %and.phi, !dbg !1809

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1809
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1809

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1810
  %eq = icmp eq i32 %6, 16, !dbg !1810
  br label %or.phi, !dbg !1810

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1810
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1810

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.70, i64 10 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1805
  unreachable, !dbg !1805

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1811, metadata !DIExpression()), !dbg !1812
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1813
  %11 = load i64, ptr %ptradd, align 8, !dbg !1813
  store i64 %11, ptr %len, align 8, !dbg !1813
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1814, metadata !DIExpression()), !dbg !1815
  store i64 0, ptr %index, align 8, !dbg !1816
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1817, metadata !DIExpression()), !dbg !1818
  %12 = load ptr, ptr %string, align 8, !dbg !1819
  store ptr %12, ptr %ptr, align 8, !dbg !1819
  br label %loop.cond, !dbg !1820

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1821
  %14 = load i64, ptr %len, align 8, !dbg !1823
  %lt = icmp ult i64 %13, %14, !dbg !1821
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1821

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1824
  %16 = load i64, ptr %index, align 8, !dbg !1825
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1825
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1826
  %eq7 = icmp eq i8 %18, 32, !dbg !1826
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1826

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1829
  %eq9 = icmp eq i8 %19, 9, !dbg !1829
  br label %or.phi10, !dbg !1829

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1829
  br label %and.phi12, !dbg !1829

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1829
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1829

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1830
  %add = add i64 %20, 1, !dbg !1830
  store i64 %add, ptr %index, align 8, !dbg !1830
  br label %loop.cond, !dbg !1830

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1831
  %22 = load i64, ptr %index, align 8, !dbg !1832
  %eq14 = icmp eq i64 %21, %22, !dbg !1831
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1831

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1833
  br label %err_retblock, !dbg !1833

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1834, metadata !DIExpression()), !dbg !1835
  store i8 0, ptr %is_negative, align 1, !dbg !1835
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1836
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1836
  %24 = load ptr, ptr %string, align 8, !dbg !1836
  %25 = load i64, ptr %index, align 8, !dbg !1838
  %ge = icmp uge i64 %25, %23, !dbg !1838
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1838
  br i1 %26, label %panic, label %checkok, !dbg !1838

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1838
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then24, !dbg !1839

if.then24:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1841
  br label %err_retblock, !dbg !1841

switch.case27:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1842
  %add28 = add i64 %29, 1, !dbg !1842
  store i64 %add28, ptr %index, align 8, !dbg !1842
  br label %switch.exit, !dbg !1842

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1844

switch.exit:                                      ; preds = %switch.default, %switch.case27
  %30 = load i64, ptr %len, align 8, !dbg !1846
  %31 = load i64, ptr %index, align 8, !dbg !1847
  %eq29 = icmp eq i64 %30, %31, !dbg !1846
  br i1 %eq29, label %if.then30, label %if.exit31, !dbg !1846

if.then30:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1848
  br label %err_retblock, !dbg !1848

if.exit31:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1849, metadata !DIExpression()), !dbg !1850
  %32 = load i32, ptr %base1, align 4, !dbg !1851
  %sext = sext i32 %32 to i128, !dbg !1851
  store i128 %sext, ptr %base_used, align 16, !dbg !1851
  %ptradd32 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1852
  %33 = load i64, ptr %ptradd32, align 8, !dbg !1852
  %34 = load ptr, ptr %string, align 8, !dbg !1852
  %35 = load i64, ptr %index, align 8, !dbg !1853
  %ge33 = icmp uge i64 %35, %33, !dbg !1853
  %36 = call i1 @llvm.expect.i1(i1 %ge33, i1 false), !dbg !1853
  br i1 %36, label %panic34, label %checkok44, !dbg !1853

checkok44:                                        ; preds = %if.exit31
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1853
  %37 = load i8, ptr %ptradd45, align 1, !dbg !1853
  %eq46 = icmp eq i8 %37, 48, !dbg !1852
  br i1 %eq46, label %and.rhs47, label %and.phi49, !dbg !1852

and.rhs47:                                        ; preds = %checkok44
  %38 = load i32, ptr %base1, align 4, !dbg !1854
  %eq48 = icmp eq i32 %38, 10, !dbg !1854
  br label %and.phi49, !dbg !1854

and.phi49:                                        ; preds = %and.rhs47, %checkok44
  %val50 = phi i1 [ false, %checkok44 ], [ %eq48, %and.rhs47 ], !dbg !1854
  br i1 %val50, label %if.then51, label %if.exit83, !dbg !1854

if.then51:                                        ; preds = %and.phi49
  %39 = load i64, ptr %index, align 8, !dbg !1855
  %add52 = add i64 %39, 1, !dbg !1855
  store i64 %add52, ptr %index, align 8, !dbg !1855
  %40 = load i64, ptr %index, align 8, !dbg !1857
  %41 = load i64, ptr %len, align 8, !dbg !1858
  %eq53 = icmp eq i64 %40, %41, !dbg !1857
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !1857

if.then54:                                        ; preds = %if.then51
  store i128 0, ptr %blockret, align 16, !dbg !1859
  br label %expr_block.exit151, !dbg !1859

if.exit55:                                        ; preds = %if.then51
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1860
  %42 = load i64, ptr %ptradd56, align 8, !dbg !1860
  %43 = load ptr, ptr %string, align 8, !dbg !1860
  %44 = load i64, ptr %index, align 8, !dbg !1862
  %ge57 = icmp uge i64 %44, %42, !dbg !1862
  %45 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !1862
  br i1 %45, label %panic58, label %checkok68, !dbg !1862

checkok68:                                        ; preds = %if.exit55
  %ptradd69 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1862
  %46 = load i8, ptr %ptradd69, align 1
  store i8 %46, ptr %switch70, align 1
  br label %switch.entry71

switch.entry71:                                   ; preds = %checkok68
  %47 = load i8, ptr %switch70, align 1
  switch i8 %47, label %switch.default78 [
    i8 120, label %switch.case72
    i8 88, label %switch.case72
    i8 98, label %switch.case74
    i8 66, label %switch.case74
    i8 111, label %switch.case76
    i8 79, label %switch.case76
  ]

switch.case72:                                    ; preds = %switch.entry71, %switch.entry71
  store i128 16, ptr %base_used, align 16, !dbg !1863
  %48 = load i64, ptr %index, align 8, !dbg !1865
  %add73 = add i64 %48, 1, !dbg !1865
  store i64 %add73, ptr %index, align 8, !dbg !1865
  br label %switch.exit79, !dbg !1865

switch.case74:                                    ; preds = %switch.entry71, %switch.entry71
  store i128 2, ptr %base_used, align 16, !dbg !1866
  %49 = load i64, ptr %index, align 8, !dbg !1868
  %add75 = add i64 %49, 1, !dbg !1868
  store i64 %add75, ptr %index, align 8, !dbg !1868
  br label %switch.exit79, !dbg !1868

switch.case76:                                    ; preds = %switch.entry71, %switch.entry71
  store i128 8, ptr %base_used, align 16, !dbg !1869
  %50 = load i64, ptr %index, align 8, !dbg !1871
  %add77 = add i64 %50, 1, !dbg !1871
  store i64 %add77, ptr %index, align 8, !dbg !1871
  br label %switch.exit79, !dbg !1871

switch.default78:                                 ; preds = %switch.entry71
  br label %switch.exit79, !dbg !1872

switch.exit79:                                    ; preds = %switch.default78, %switch.case76, %switch.case74, %switch.case72
  %51 = load i64, ptr %len, align 8, !dbg !1874
  %52 = load i64, ptr %index, align 8, !dbg !1875
  %eq80 = icmp eq i64 %51, %52, !dbg !1874
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !1874

if.then81:                                        ; preds = %switch.exit79
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1876
  br label %err_retblock, !dbg !1876

if.exit82:                                        ; preds = %switch.exit79
  br label %if.exit83, !dbg !1876

if.exit83:                                        ; preds = %if.exit82, %and.phi49
  call void @llvm.dbg.declare(metadata ptr %value, metadata !1877, metadata !DIExpression()), !dbg !1878
  store i128 0, ptr %value, align 16, !dbg !1879
  br label %loop.cond84, !dbg !1880

loop.cond84:                                      ; preds = %noerr_block149, %if.exit83
  %53 = load i64, ptr %index, align 8, !dbg !1881
  %54 = load i64, ptr %len, align 8, !dbg !1883
  %neq = icmp ne i64 %53, %54, !dbg !1881
  br i1 %neq, label %loop.body85, label %loop.exit150, !dbg !1881

loop.body85:                                      ; preds = %loop.cond84
  call void @llvm.dbg.declare(metadata ptr %c86, metadata !1884, metadata !DIExpression()), !dbg !1886
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !1887, metadata !DIExpression()), !dbg !1889
  %ptradd88 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1890
  %55 = load i64, ptr %ptradd88, align 8, !dbg !1890
  %56 = load ptr, ptr %string, align 8, !dbg !1890
  %57 = load i64, ptr %index, align 8, !dbg !1891
  %add89 = add i64 %57, 1, !dbg !1891
  store i64 %add89, ptr %index, align 8, !dbg !1891
  %ge90 = icmp uge i64 %57, %55, !dbg !1891
  %58 = call i1 @llvm.expect.i1(i1 %ge90, i1 false), !dbg !1891
  br i1 %58, label %panic91, label %checkok101, !dbg !1891

checkok101:                                       ; preds = %loop.body85
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !1891
  %59 = load i8, ptr %ptradd102, align 1, !dbg !1891
  store i8 %59, ptr %ch, align 1, !dbg !1891
  %60 = load i128, ptr %base_used, align 16, !dbg !1892
  %neq103 = icmp ne i128 16, %60, !dbg !1892
  %siui-ne = or i1 false, %neq103, !dbg !1892
  br i1 %siui-ne, label %or.phi106, label %or.rhs104, !dbg !1892

or.rhs104:                                        ; preds = %checkok101
  %61 = load i8, ptr %ch, align 1, !dbg !1893
  %lt105 = icmp ult i8 %61, 65, !dbg !1893
  br label %or.phi106, !dbg !1893

or.phi106:                                        ; preds = %or.rhs104, %checkok101
  %val107 = phi i1 [ true, %checkok101 ], [ %lt105, %or.rhs104 ], !dbg !1893
  br i1 %val107, label %if.then108, label %if.exit109, !dbg !1893

if.then108:                                       ; preds = %or.phi106
  %62 = load i8, ptr %ch, align 1, !dbg !1894
  %zext = zext i8 %62 to i32, !dbg !1894
  %sub = sub i32 %zext, 48, !dbg !1895
  %trunc = trunc i32 %sub to i8, !dbg !1895
  store i8 %trunc, ptr %blockret87, align 1, !dbg !1895
  br label %expr_block.exit, !dbg !1895

if.exit109:                                       ; preds = %or.phi106
  %63 = load i8, ptr %ch, align 1, !dbg !1896
  %le110 = icmp ule i8 %63, 70, !dbg !1896
  br i1 %le110, label %if.then111, label %if.exit116, !dbg !1896

if.then111:                                       ; preds = %if.exit109
  %64 = load i8, ptr %ch, align 1, !dbg !1897
  %zext112 = zext i8 %64 to i32, !dbg !1897
  %sub113 = sub i32 %zext112, 65, !dbg !1897
  %add114 = add i32 %sub113, 10, !dbg !1898
  %trunc115 = trunc i32 %add114 to i8, !dbg !1898
  store i8 %trunc115, ptr %blockret87, align 1, !dbg !1898
  br label %expr_block.exit, !dbg !1898

if.exit116:                                       ; preds = %if.exit109
  %65 = load i8, ptr %ch, align 1, !dbg !1899
  %lt117 = icmp ult i8 %65, 97, !dbg !1899
  br i1 %lt117, label %if.then118, label %if.exit119, !dbg !1899

if.then118:                                       ; preds = %if.exit116
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1900
  br label %guard_block, !dbg !1900

if.exit119:                                       ; preds = %if.exit116
  %66 = load i8, ptr %ch, align 1, !dbg !1901
  %gt120 = icmp ugt i8 %66, 102, !dbg !1901
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !1901

if.then121:                                       ; preds = %if.exit119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !1902
  br label %guard_block, !dbg !1902

if.exit122:                                       ; preds = %if.exit119
  %67 = load i8, ptr %ch, align 1, !dbg !1903
  %zext123 = zext i8 %67 to i32, !dbg !1903
  %sub124 = sub i32 %zext123, 97, !dbg !1903
  %add125 = add i32 %sub124, 10, !dbg !1904
  %trunc126 = trunc i32 %add125 to i8, !dbg !1904
  store i8 %trunc126, ptr %blockret87, align 1, !dbg !1904
  br label %expr_block.exit, !dbg !1904

expr_block.exit:                                  ; preds = %if.exit122, %if.then111, %if.then108
  br label %noerr_block, !dbg !1904

guard_block:                                      ; preds = %if.then121, %if.then118
  %68 = load i64, ptr %error_var, align 8, !dbg !1904
  store i64 %68, ptr %reterr, align 8, !dbg !1904
  br label %err_retblock, !dbg !1904

noerr_block:                                      ; preds = %expr_block.exit
  %69 = load i8, ptr %blockret87, align 1, !dbg !1904
  store i8 %69, ptr %c86, align 1, !dbg !1904
  %70 = load i8, ptr %c86, align 1, !dbg !1905
  %zext127 = zext i8 %70 to i128, !dbg !1905
  %71 = load i128, ptr %base_used, align 16, !dbg !1906
  %ge128 = icmp uge i128 %zext127, %71, !dbg !1905
  br i1 %ge128, label %if.then129, label %if.exit130, !dbg !1905

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1907
  br label %err_retblock, !dbg !1907

if.exit130:                                       ; preds = %noerr_block
  %72 = load i8, ptr %is_negative, align 1, !dbg !1908
  %73 = trunc i8 %72 to i1, !dbg !1908
  br i1 %73, label %if.then133, label %if.exit139, !dbg !1908

if.then133:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !1910, metadata !DIExpression()), !dbg !1912
  %74 = load i128, ptr %value, align 16, !dbg !1913
  %75 = load i128, ptr %base_used, align 16, !dbg !1914
  %mul = mul i128 %74, %75, !dbg !1913
  %76 = load i8, ptr %c86, align 1, !dbg !1915
  %zext134 = zext i8 %76 to i128, !dbg !1915
  %sub135 = sub i128 %mul, %zext134, !dbg !1913
  store i128 %sub135, ptr %new_value, align 16, !dbg !1913
  %77 = load i128, ptr %new_value, align 16, !dbg !1916
  %78 = load i128, ptr %value, align 16, !dbg !1917
  %gt136 = icmp ugt i128 %77, %78, !dbg !1916
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !1916

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1918
  br label %guard_block148, !dbg !1918

if.exit138:                                       ; preds = %if.then133
  %79 = load i128, ptr %new_value, align 16, !dbg !1919
  store i128 %79, ptr %blockret132, align 16, !dbg !1919
  br label %expr_block.exit147, !dbg !1919

if.exit139:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value140, metadata !1920, metadata !DIExpression()), !dbg !1921
  %80 = load i128, ptr %value, align 16, !dbg !1922
  %81 = load i128, ptr %base_used, align 16, !dbg !1923
  %mul141 = mul i128 %80, %81, !dbg !1922
  %82 = load i8, ptr %c86, align 1, !dbg !1924
  %zext142 = zext i8 %82 to i128, !dbg !1924
  %add143 = add i128 %mul141, %zext142, !dbg !1922
  store i128 %add143, ptr %new_value140, align 16, !dbg !1922
  %83 = load i128, ptr %new_value140, align 16, !dbg !1925
  %84 = load i128, ptr %value, align 16, !dbg !1926
  %lt144 = icmp ult i128 %83, %84, !dbg !1925
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !1925

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !1927
  br label %guard_block148, !dbg !1927

if.exit146:                                       ; preds = %if.exit139
  %85 = load i128, ptr %new_value140, align 16, !dbg !1928
  store i128 %85, ptr %blockret132, align 16, !dbg !1928
  br label %expr_block.exit147, !dbg !1928

expr_block.exit147:                               ; preds = %if.exit146, %if.exit138
  br label %noerr_block149, !dbg !1928

guard_block148:                                   ; preds = %if.then145, %if.then137
  %86 = load i64, ptr %error_var131, align 8, !dbg !1928
  store i64 %86, ptr %reterr, align 8, !dbg !1928
  br label %err_retblock, !dbg !1928

noerr_block149:                                   ; preds = %expr_block.exit147
  %87 = load i128, ptr %blockret132, align 16, !dbg !1928
  store i128 %87, ptr %value, align 16, !dbg !1928
  br label %loop.cond84, !dbg !1928

loop.exit150:                                     ; preds = %loop.cond84
  %88 = load i128, ptr %value, align 16, !dbg !1929
  store i128 %88, ptr %blockret, align 16, !dbg !1929
  br label %expr_block.exit151, !dbg !1929

expr_block.exit151:                               ; preds = %loop.exit150, %if.then54
  %89 = load i128, ptr %blockret, align 16, !dbg !1929
  store i128 %89, ptr %0, align 16, !dbg !1929
  ret i64 0, !dbg !1929

err_retblock:                                     ; preds = %guard_block148, %if.then129, %guard_block, %if.then81, %if.then30, %if.then24, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !1929
  ret i64 %90, !dbg !1929

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %93 = insertvalue %any undef, ptr %taddr17, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %95 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %96 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.70, i64 10 }, ptr %taddr20, align 8
  %97 = load [2 x i64], ptr %taddr20, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd21, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %99 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 750, [2 x i64] %99), !dbg !1838
  unreachable, !dbg !1838

panic34:                                          ; preds = %if.exit31
  store i64 %33, ptr %taddr35, align 8
  %100 = insertvalue %any undef, ptr %taddr35, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr36, align 8
  %102 = insertvalue %any undef, ptr %taddr36, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr37, align 8
  %104 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr38, align 8
  %105 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.70, i64 10 }, ptr %taddr39, align 8
  %106 = load [2 x i64], ptr %taddr39, align 8
  store %any %101, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %108 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 763, [2 x i64] %108), !dbg !1853
  unreachable, !dbg !1853

panic58:                                          ; preds = %if.exit55
  store i64 %42, ptr %taddr59, align 8
  %109 = insertvalue %any undef, ptr %taddr59, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr60, align 8
  %111 = insertvalue %any undef, ptr %taddr60, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr61, align 8
  %113 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr62, align 8
  %114 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.70, i64 10 }, ptr %taddr63, align 8
  %115 = load [2 x i64], ptr %taddr63, align 8
  store %any %110, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %112, ptr %ptradd65, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %117 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 767, [2 x i64] %117), !dbg !1862
  unreachable, !dbg !1862

panic91:                                          ; preds = %loop.body85
  store i64 %55, ptr %taddr92, align 8
  %118 = insertvalue %any undef, ptr %taddr92, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr93, align 8
  %120 = insertvalue %any undef, ptr %taddr93, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr94, align 8
  %122 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr95, align 8
  %123 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.70, i64 10 }, ptr %taddr96, align 8
  %124 = load [2 x i64], ptr %taddr96, align 8
  store %any %119, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %121, ptr %ptradd98, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %126 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 790, [2 x i64] %126), !dbg !1891
  unreachable, !dbg !1891
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_ulong(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !1930 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i64, align 8
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i64, align 8
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch70 = alloca i8, align 1
  %value = alloca i64, align 8
  %c86 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret87 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i64, align 8
  %new_value = alloca i64, align 8
  %new_value140 = alloca i64, align 8
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !1934, metadata !DIExpression()), !dbg !1935
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !1936, metadata !DIExpression()), !dbg !1937
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !1938
  %le = icmp sle i32 %4, 10, !dbg !1938
  br i1 %le, label %and.rhs, label %and.phi, !dbg !1938

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !1942
  %gt = icmp sgt i32 %5, 1, !dbg !1942
  br label %and.phi, !dbg !1942

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !1942
  br i1 %val, label %or.phi, label %or.rhs, !dbg !1942

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !1943
  %eq = icmp eq i32 %6, 16, !dbg !1943
  br label %or.phi, !dbg !1943

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !1943
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !1943

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !1938
  unreachable, !dbg !1938

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !1944, metadata !DIExpression()), !dbg !1945
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1946
  %11 = load i64, ptr %ptradd, align 8, !dbg !1946
  store i64 %11, ptr %len, align 8, !dbg !1946
  call void @llvm.dbg.declare(metadata ptr %index, metadata !1947, metadata !DIExpression()), !dbg !1948
  store i64 0, ptr %index, align 8, !dbg !1949
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !1950, metadata !DIExpression()), !dbg !1951
  %12 = load ptr, ptr %string, align 8, !dbg !1952
  store ptr %12, ptr %ptr, align 8, !dbg !1952
  br label %loop.cond, !dbg !1953

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !1954
  %14 = load i64, ptr %len, align 8, !dbg !1956
  %lt = icmp ult i64 %13, %14, !dbg !1954
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !1954

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !1957
  %16 = load i64, ptr %index, align 8, !dbg !1958
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !1958
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !1959
  %eq7 = icmp eq i8 %18, 32, !dbg !1959
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !1959

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !1962
  %eq9 = icmp eq i8 %19, 9, !dbg !1962
  br label %or.phi10, !dbg !1962

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !1962
  br label %and.phi12, !dbg !1962

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !1962
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !1962

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !1963
  %add = add i64 %20, 1, !dbg !1963
  store i64 %add, ptr %index, align 8, !dbg !1963
  br label %loop.cond, !dbg !1963

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !1964
  %22 = load i64, ptr %index, align 8, !dbg !1965
  %eq14 = icmp eq i64 %21, %22, !dbg !1964
  br i1 %eq14, label %if.then, label %if.exit, !dbg !1964

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !1966
  br label %err_retblock, !dbg !1966

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !1967, metadata !DIExpression()), !dbg !1968
  store i8 0, ptr %is_negative, align 1, !dbg !1968
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1969
  %23 = load i64, ptr %ptradd15, align 8, !dbg !1969
  %24 = load ptr, ptr %string, align 8, !dbg !1969
  %25 = load i64, ptr %index, align 8, !dbg !1971
  %ge = icmp uge i64 %25, %23, !dbg !1971
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !1971
  br i1 %26, label %panic, label %checkok, !dbg !1971

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !1971
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then24, !dbg !1972

if.then24:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !1974
  br label %err_retblock, !dbg !1974

switch.case27:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !1975
  %add28 = add i64 %29, 1, !dbg !1975
  store i64 %add28, ptr %index, align 8, !dbg !1975
  br label %switch.exit, !dbg !1975

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !1977

switch.exit:                                      ; preds = %switch.default, %switch.case27
  %30 = load i64, ptr %len, align 8, !dbg !1979
  %31 = load i64, ptr %index, align 8, !dbg !1980
  %eq29 = icmp eq i64 %30, %31, !dbg !1979
  br i1 %eq29, label %if.then30, label %if.exit31, !dbg !1979

if.then30:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !1981
  br label %err_retblock, !dbg !1981

if.exit31:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !1982, metadata !DIExpression()), !dbg !1983
  %32 = load i32, ptr %base1, align 4, !dbg !1984
  %sext = sext i32 %32 to i64, !dbg !1984
  store i64 %sext, ptr %base_used, align 8, !dbg !1984
  %ptradd32 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1985
  %33 = load i64, ptr %ptradd32, align 8, !dbg !1985
  %34 = load ptr, ptr %string, align 8, !dbg !1985
  %35 = load i64, ptr %index, align 8, !dbg !1986
  %ge33 = icmp uge i64 %35, %33, !dbg !1986
  %36 = call i1 @llvm.expect.i1(i1 %ge33, i1 false), !dbg !1986
  br i1 %36, label %panic34, label %checkok44, !dbg !1986

checkok44:                                        ; preds = %if.exit31
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !1986
  %37 = load i8, ptr %ptradd45, align 1, !dbg !1986
  %eq46 = icmp eq i8 %37, 48, !dbg !1985
  br i1 %eq46, label %and.rhs47, label %and.phi49, !dbg !1985

and.rhs47:                                        ; preds = %checkok44
  %38 = load i32, ptr %base1, align 4, !dbg !1987
  %eq48 = icmp eq i32 %38, 10, !dbg !1987
  br label %and.phi49, !dbg !1987

and.phi49:                                        ; preds = %and.rhs47, %checkok44
  %val50 = phi i1 [ false, %checkok44 ], [ %eq48, %and.rhs47 ], !dbg !1987
  br i1 %val50, label %if.then51, label %if.exit83, !dbg !1987

if.then51:                                        ; preds = %and.phi49
  %39 = load i64, ptr %index, align 8, !dbg !1988
  %add52 = add i64 %39, 1, !dbg !1988
  store i64 %add52, ptr %index, align 8, !dbg !1988
  %40 = load i64, ptr %index, align 8, !dbg !1990
  %41 = load i64, ptr %len, align 8, !dbg !1991
  %eq53 = icmp eq i64 %40, %41, !dbg !1990
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !1990

if.then54:                                        ; preds = %if.then51
  store i64 0, ptr %blockret, align 8, !dbg !1992
  br label %expr_block.exit151, !dbg !1992

if.exit55:                                        ; preds = %if.then51
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !1993
  %42 = load i64, ptr %ptradd56, align 8, !dbg !1993
  %43 = load ptr, ptr %string, align 8, !dbg !1993
  %44 = load i64, ptr %index, align 8, !dbg !1995
  %ge57 = icmp uge i64 %44, %42, !dbg !1995
  %45 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !1995
  br i1 %45, label %panic58, label %checkok68, !dbg !1995

checkok68:                                        ; preds = %if.exit55
  %ptradd69 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !1995
  %46 = load i8, ptr %ptradd69, align 1
  store i8 %46, ptr %switch70, align 1
  br label %switch.entry71

switch.entry71:                                   ; preds = %checkok68
  %47 = load i8, ptr %switch70, align 1
  switch i8 %47, label %switch.default78 [
    i8 120, label %switch.case72
    i8 88, label %switch.case72
    i8 98, label %switch.case74
    i8 66, label %switch.case74
    i8 111, label %switch.case76
    i8 79, label %switch.case76
  ]

switch.case72:                                    ; preds = %switch.entry71, %switch.entry71
  store i64 16, ptr %base_used, align 8, !dbg !1996
  %48 = load i64, ptr %index, align 8, !dbg !1998
  %add73 = add i64 %48, 1, !dbg !1998
  store i64 %add73, ptr %index, align 8, !dbg !1998
  br label %switch.exit79, !dbg !1998

switch.case74:                                    ; preds = %switch.entry71, %switch.entry71
  store i64 2, ptr %base_used, align 8, !dbg !1999
  %49 = load i64, ptr %index, align 8, !dbg !2001
  %add75 = add i64 %49, 1, !dbg !2001
  store i64 %add75, ptr %index, align 8, !dbg !2001
  br label %switch.exit79, !dbg !2001

switch.case76:                                    ; preds = %switch.entry71, %switch.entry71
  store i64 8, ptr %base_used, align 8, !dbg !2002
  %50 = load i64, ptr %index, align 8, !dbg !2004
  %add77 = add i64 %50, 1, !dbg !2004
  store i64 %add77, ptr %index, align 8, !dbg !2004
  br label %switch.exit79, !dbg !2004

switch.default78:                                 ; preds = %switch.entry71
  br label %switch.exit79, !dbg !2005

switch.exit79:                                    ; preds = %switch.default78, %switch.case76, %switch.case74, %switch.case72
  %51 = load i64, ptr %len, align 8, !dbg !2007
  %52 = load i64, ptr %index, align 8, !dbg !2008
  %eq80 = icmp eq i64 %51, %52, !dbg !2007
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !2007

if.then81:                                        ; preds = %switch.exit79
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2009
  br label %err_retblock, !dbg !2009

if.exit82:                                        ; preds = %switch.exit79
  br label %if.exit83, !dbg !2009

if.exit83:                                        ; preds = %if.exit82, %and.phi49
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2010, metadata !DIExpression()), !dbg !2011
  store i64 0, ptr %value, align 8, !dbg !2012
  br label %loop.cond84, !dbg !2013

loop.cond84:                                      ; preds = %noerr_block149, %if.exit83
  %53 = load i64, ptr %index, align 8, !dbg !2014
  %54 = load i64, ptr %len, align 8, !dbg !2016
  %neq = icmp ne i64 %53, %54, !dbg !2014
  br i1 %neq, label %loop.body85, label %loop.exit150, !dbg !2014

loop.body85:                                      ; preds = %loop.cond84
  call void @llvm.dbg.declare(metadata ptr %c86, metadata !2017, metadata !DIExpression()), !dbg !2019
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2020, metadata !DIExpression()), !dbg !2022
  %ptradd88 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2023
  %55 = load i64, ptr %ptradd88, align 8, !dbg !2023
  %56 = load ptr, ptr %string, align 8, !dbg !2023
  %57 = load i64, ptr %index, align 8, !dbg !2024
  %add89 = add i64 %57, 1, !dbg !2024
  store i64 %add89, ptr %index, align 8, !dbg !2024
  %ge90 = icmp uge i64 %57, %55, !dbg !2024
  %58 = call i1 @llvm.expect.i1(i1 %ge90, i1 false), !dbg !2024
  br i1 %58, label %panic91, label %checkok101, !dbg !2024

checkok101:                                       ; preds = %loop.body85
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !2024
  %59 = load i8, ptr %ptradd102, align 1, !dbg !2024
  store i8 %59, ptr %ch, align 1, !dbg !2024
  %60 = load i64, ptr %base_used, align 8, !dbg !2025
  %neq103 = icmp ne i64 16, %60, !dbg !2025
  br i1 %neq103, label %or.phi106, label %or.rhs104, !dbg !2025

or.rhs104:                                        ; preds = %checkok101
  %61 = load i8, ptr %ch, align 1, !dbg !2026
  %lt105 = icmp ult i8 %61, 65, !dbg !2026
  br label %or.phi106, !dbg !2026

or.phi106:                                        ; preds = %or.rhs104, %checkok101
  %val107 = phi i1 [ true, %checkok101 ], [ %lt105, %or.rhs104 ], !dbg !2026
  br i1 %val107, label %if.then108, label %if.exit109, !dbg !2026

if.then108:                                       ; preds = %or.phi106
  %62 = load i8, ptr %ch, align 1, !dbg !2027
  %zext = zext i8 %62 to i32, !dbg !2027
  %sub = sub i32 %zext, 48, !dbg !2028
  %trunc = trunc i32 %sub to i8, !dbg !2028
  store i8 %trunc, ptr %blockret87, align 1, !dbg !2028
  br label %expr_block.exit, !dbg !2028

if.exit109:                                       ; preds = %or.phi106
  %63 = load i8, ptr %ch, align 1, !dbg !2029
  %le110 = icmp ule i8 %63, 70, !dbg !2029
  br i1 %le110, label %if.then111, label %if.exit116, !dbg !2029

if.then111:                                       ; preds = %if.exit109
  %64 = load i8, ptr %ch, align 1, !dbg !2030
  %zext112 = zext i8 %64 to i32, !dbg !2030
  %sub113 = sub i32 %zext112, 65, !dbg !2030
  %add114 = add i32 %sub113, 10, !dbg !2031
  %trunc115 = trunc i32 %add114 to i8, !dbg !2031
  store i8 %trunc115, ptr %blockret87, align 1, !dbg !2031
  br label %expr_block.exit, !dbg !2031

if.exit116:                                       ; preds = %if.exit109
  %65 = load i8, ptr %ch, align 1, !dbg !2032
  %lt117 = icmp ult i8 %65, 97, !dbg !2032
  br i1 %lt117, label %if.then118, label %if.exit119, !dbg !2032

if.then118:                                       ; preds = %if.exit116
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2033
  br label %guard_block, !dbg !2033

if.exit119:                                       ; preds = %if.exit116
  %66 = load i8, ptr %ch, align 1, !dbg !2034
  %gt120 = icmp ugt i8 %66, 102, !dbg !2034
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !2034

if.then121:                                       ; preds = %if.exit119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2035
  br label %guard_block, !dbg !2035

if.exit122:                                       ; preds = %if.exit119
  %67 = load i8, ptr %ch, align 1, !dbg !2036
  %zext123 = zext i8 %67 to i32, !dbg !2036
  %sub124 = sub i32 %zext123, 97, !dbg !2036
  %add125 = add i32 %sub124, 10, !dbg !2037
  %trunc126 = trunc i32 %add125 to i8, !dbg !2037
  store i8 %trunc126, ptr %blockret87, align 1, !dbg !2037
  br label %expr_block.exit, !dbg !2037

expr_block.exit:                                  ; preds = %if.exit122, %if.then111, %if.then108
  br label %noerr_block, !dbg !2037

guard_block:                                      ; preds = %if.then121, %if.then118
  %68 = load i64, ptr %error_var, align 8, !dbg !2037
  store i64 %68, ptr %reterr, align 8, !dbg !2037
  br label %err_retblock, !dbg !2037

noerr_block:                                      ; preds = %expr_block.exit
  %69 = load i8, ptr %blockret87, align 1, !dbg !2037
  store i8 %69, ptr %c86, align 1, !dbg !2037
  %70 = load i8, ptr %c86, align 1, !dbg !2038
  %zext127 = zext i8 %70 to i64, !dbg !2038
  %71 = load i64, ptr %base_used, align 8, !dbg !2039
  %ge128 = icmp uge i64 %zext127, %71, !dbg !2038
  br i1 %ge128, label %if.then129, label %if.exit130, !dbg !2038

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2040
  br label %err_retblock, !dbg !2040

if.exit130:                                       ; preds = %noerr_block
  %72 = load i8, ptr %is_negative, align 1, !dbg !2041
  %73 = trunc i8 %72 to i1, !dbg !2041
  br i1 %73, label %if.then133, label %if.exit139, !dbg !2041

if.then133:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2043, metadata !DIExpression()), !dbg !2045
  %74 = load i64, ptr %value, align 8, !dbg !2046
  %75 = load i64, ptr %base_used, align 8, !dbg !2047
  %mul = mul i64 %74, %75, !dbg !2046
  %76 = load i8, ptr %c86, align 1, !dbg !2048
  %zext134 = zext i8 %76 to i64, !dbg !2048
  %sub135 = sub i64 %mul, %zext134, !dbg !2046
  store i64 %sub135, ptr %new_value, align 8, !dbg !2046
  %77 = load i64, ptr %new_value, align 8, !dbg !2049
  %78 = load i64, ptr %value, align 8, !dbg !2050
  %gt136 = icmp ugt i64 %77, %78, !dbg !2049
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !2049

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2051
  br label %guard_block148, !dbg !2051

if.exit138:                                       ; preds = %if.then133
  %79 = load i64, ptr %new_value, align 8, !dbg !2052
  store i64 %79, ptr %blockret132, align 8, !dbg !2052
  br label %expr_block.exit147, !dbg !2052

if.exit139:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value140, metadata !2053, metadata !DIExpression()), !dbg !2054
  %80 = load i64, ptr %value, align 8, !dbg !2055
  %81 = load i64, ptr %base_used, align 8, !dbg !2056
  %mul141 = mul i64 %80, %81, !dbg !2055
  %82 = load i8, ptr %c86, align 1, !dbg !2057
  %zext142 = zext i8 %82 to i64, !dbg !2057
  %add143 = add i64 %mul141, %zext142, !dbg !2055
  store i64 %add143, ptr %new_value140, align 8, !dbg !2055
  %83 = load i64, ptr %new_value140, align 8, !dbg !2058
  %84 = load i64, ptr %value, align 8, !dbg !2059
  %lt144 = icmp ult i64 %83, %84, !dbg !2058
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !2058

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2060
  br label %guard_block148, !dbg !2060

if.exit146:                                       ; preds = %if.exit139
  %85 = load i64, ptr %new_value140, align 8, !dbg !2061
  store i64 %85, ptr %blockret132, align 8, !dbg !2061
  br label %expr_block.exit147, !dbg !2061

expr_block.exit147:                               ; preds = %if.exit146, %if.exit138
  br label %noerr_block149, !dbg !2061

guard_block148:                                   ; preds = %if.then145, %if.then137
  %86 = load i64, ptr %error_var131, align 8, !dbg !2061
  store i64 %86, ptr %reterr, align 8, !dbg !2061
  br label %err_retblock, !dbg !2061

noerr_block149:                                   ; preds = %expr_block.exit147
  %87 = load i64, ptr %blockret132, align 8, !dbg !2061
  store i64 %87, ptr %value, align 8, !dbg !2061
  br label %loop.cond84, !dbg !2061

loop.exit150:                                     ; preds = %loop.cond84
  %88 = load i64, ptr %value, align 8, !dbg !2062
  store i64 %88, ptr %blockret, align 8, !dbg !2062
  br label %expr_block.exit151, !dbg !2062

expr_block.exit151:                               ; preds = %loop.exit150, %if.then54
  %89 = load i64, ptr %blockret, align 8, !dbg !2062
  store i64 %89, ptr %0, align 8, !dbg !2062
  ret i64 0, !dbg !2062

err_retblock:                                     ; preds = %guard_block148, %if.then129, %guard_block, %if.then81, %if.then30, %if.then24, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !2062
  ret i64 %90, !dbg !2062

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %93 = insertvalue %any undef, ptr %taddr17, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %95 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %96 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %taddr20, align 8
  %97 = load [2 x i64], ptr %taddr20, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd21, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %99 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 750, [2 x i64] %99), !dbg !1971
  unreachable, !dbg !1971

panic34:                                          ; preds = %if.exit31
  store i64 %33, ptr %taddr35, align 8
  %100 = insertvalue %any undef, ptr %taddr35, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr36, align 8
  %102 = insertvalue %any undef, ptr %taddr36, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr37, align 8
  %104 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr38, align 8
  %105 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %taddr39, align 8
  %106 = load [2 x i64], ptr %taddr39, align 8
  store %any %101, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %108 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 763, [2 x i64] %108), !dbg !1986
  unreachable, !dbg !1986

panic58:                                          ; preds = %if.exit55
  store i64 %42, ptr %taddr59, align 8
  %109 = insertvalue %any undef, ptr %taddr59, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr60, align 8
  %111 = insertvalue %any undef, ptr %taddr60, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr61, align 8
  %113 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr62, align 8
  %114 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %taddr63, align 8
  %115 = load [2 x i64], ptr %taddr63, align 8
  store %any %110, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %112, ptr %ptradd65, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %117 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 767, [2 x i64] %117), !dbg !1995
  unreachable, !dbg !1995

panic91:                                          ; preds = %loop.body85
  store i64 %55, ptr %taddr92, align 8
  %118 = insertvalue %any undef, ptr %taddr92, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr93, align 8
  %120 = insertvalue %any undef, ptr %taddr93, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr94, align 8
  %122 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr95, align 8
  %123 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.71, i64 8 }, ptr %taddr96, align 8
  %124 = load [2 x i64], ptr %taddr96, align 8
  store %any %119, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %121, ptr %ptradd98, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %126 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 790, [2 x i64] %126), !dbg !2024
  unreachable, !dbg !2024
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_uint(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !2063 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i32, align 4
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i32, align 4
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch70 = alloca i8, align 1
  %value = alloca i32, align 4
  %c86 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret87 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %error_var131 = alloca i64, align 8
  %blockret132 = alloca i32, align 4
  %new_value = alloca i32, align 4
  %new_value140 = alloca i32, align 4
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2067, metadata !DIExpression()), !dbg !2068
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2069, metadata !DIExpression()), !dbg !2070
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !2071
  %le = icmp sle i32 %4, 10, !dbg !2071
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2071

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !2075
  %gt = icmp sgt i32 %5, 1, !dbg !2075
  br label %and.phi, !dbg !2075

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2075
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2075

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !2076
  %eq = icmp eq i32 %6, 16, !dbg !2076
  br label %or.phi, !dbg !2076

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2076
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2076

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.72, i64 7 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !2071
  unreachable, !dbg !2071

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2077, metadata !DIExpression()), !dbg !2078
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2079
  %11 = load i64, ptr %ptradd, align 8, !dbg !2079
  store i64 %11, ptr %len, align 8, !dbg !2079
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2080, metadata !DIExpression()), !dbg !2081
  store i64 0, ptr %index, align 8, !dbg !2082
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2083, metadata !DIExpression()), !dbg !2084
  %12 = load ptr, ptr %string, align 8, !dbg !2085
  store ptr %12, ptr %ptr, align 8, !dbg !2085
  br label %loop.cond, !dbg !2086

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !2087
  %14 = load i64, ptr %len, align 8, !dbg !2089
  %lt = icmp ult i64 %13, %14, !dbg !2087
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !2087

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !2090
  %16 = load i64, ptr %index, align 8, !dbg !2091
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !2091
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !2092
  %eq7 = icmp eq i8 %18, 32, !dbg !2092
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !2092

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !2095
  %eq9 = icmp eq i8 %19, 9, !dbg !2095
  br label %or.phi10, !dbg !2095

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !2095
  br label %and.phi12, !dbg !2095

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !2095
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !2095

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !2096
  %add = add i64 %20, 1, !dbg !2096
  store i64 %add, ptr %index, align 8, !dbg !2096
  br label %loop.cond, !dbg !2096

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !2097
  %22 = load i64, ptr %index, align 8, !dbg !2098
  %eq14 = icmp eq i64 %21, %22, !dbg !2097
  br i1 %eq14, label %if.then, label %if.exit, !dbg !2097

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2099
  br label %err_retblock, !dbg !2099

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2100, metadata !DIExpression()), !dbg !2101
  store i8 0, ptr %is_negative, align 1, !dbg !2101
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2102
  %23 = load i64, ptr %ptradd15, align 8, !dbg !2102
  %24 = load ptr, ptr %string, align 8, !dbg !2102
  %25 = load i64, ptr %index, align 8, !dbg !2104
  %ge = icmp uge i64 %25, %23, !dbg !2104
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2104
  br i1 %26, label %panic, label %checkok, !dbg !2104

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !2104
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then24, !dbg !2105

if.then24:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2107
  br label %err_retblock, !dbg !2107

switch.case27:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !2108
  %add28 = add i64 %29, 1, !dbg !2108
  store i64 %add28, ptr %index, align 8, !dbg !2108
  br label %switch.exit, !dbg !2108

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2110

switch.exit:                                      ; preds = %switch.default, %switch.case27
  %30 = load i64, ptr %len, align 8, !dbg !2112
  %31 = load i64, ptr %index, align 8, !dbg !2113
  %eq29 = icmp eq i64 %30, %31, !dbg !2112
  br i1 %eq29, label %if.then30, label %if.exit31, !dbg !2112

if.then30:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2114
  br label %err_retblock, !dbg !2114

if.exit31:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2115, metadata !DIExpression()), !dbg !2116
  %32 = load i32, ptr %base1, align 4, !dbg !2117
  store i32 %32, ptr %base_used, align 4, !dbg !2117
  %ptradd32 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2118
  %33 = load i64, ptr %ptradd32, align 8, !dbg !2118
  %34 = load ptr, ptr %string, align 8, !dbg !2118
  %35 = load i64, ptr %index, align 8, !dbg !2119
  %ge33 = icmp uge i64 %35, %33, !dbg !2119
  %36 = call i1 @llvm.expect.i1(i1 %ge33, i1 false), !dbg !2119
  br i1 %36, label %panic34, label %checkok44, !dbg !2119

checkok44:                                        ; preds = %if.exit31
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !2119
  %37 = load i8, ptr %ptradd45, align 1, !dbg !2119
  %eq46 = icmp eq i8 %37, 48, !dbg !2118
  br i1 %eq46, label %and.rhs47, label %and.phi49, !dbg !2118

and.rhs47:                                        ; preds = %checkok44
  %38 = load i32, ptr %base1, align 4, !dbg !2120
  %eq48 = icmp eq i32 %38, 10, !dbg !2120
  br label %and.phi49, !dbg !2120

and.phi49:                                        ; preds = %and.rhs47, %checkok44
  %val50 = phi i1 [ false, %checkok44 ], [ %eq48, %and.rhs47 ], !dbg !2120
  br i1 %val50, label %if.then51, label %if.exit83, !dbg !2120

if.then51:                                        ; preds = %and.phi49
  %39 = load i64, ptr %index, align 8, !dbg !2121
  %add52 = add i64 %39, 1, !dbg !2121
  store i64 %add52, ptr %index, align 8, !dbg !2121
  %40 = load i64, ptr %index, align 8, !dbg !2123
  %41 = load i64, ptr %len, align 8, !dbg !2124
  %eq53 = icmp eq i64 %40, %41, !dbg !2123
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !2123

if.then54:                                        ; preds = %if.then51
  store i32 0, ptr %blockret, align 4, !dbg !2125
  br label %expr_block.exit151, !dbg !2125

if.exit55:                                        ; preds = %if.then51
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2126
  %42 = load i64, ptr %ptradd56, align 8, !dbg !2126
  %43 = load ptr, ptr %string, align 8, !dbg !2126
  %44 = load i64, ptr %index, align 8, !dbg !2128
  %ge57 = icmp uge i64 %44, %42, !dbg !2128
  %45 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !2128
  br i1 %45, label %panic58, label %checkok68, !dbg !2128

checkok68:                                        ; preds = %if.exit55
  %ptradd69 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !2128
  %46 = load i8, ptr %ptradd69, align 1
  store i8 %46, ptr %switch70, align 1
  br label %switch.entry71

switch.entry71:                                   ; preds = %checkok68
  %47 = load i8, ptr %switch70, align 1
  switch i8 %47, label %switch.default78 [
    i8 120, label %switch.case72
    i8 88, label %switch.case72
    i8 98, label %switch.case74
    i8 66, label %switch.case74
    i8 111, label %switch.case76
    i8 79, label %switch.case76
  ]

switch.case72:                                    ; preds = %switch.entry71, %switch.entry71
  store i32 16, ptr %base_used, align 4, !dbg !2129
  %48 = load i64, ptr %index, align 8, !dbg !2131
  %add73 = add i64 %48, 1, !dbg !2131
  store i64 %add73, ptr %index, align 8, !dbg !2131
  br label %switch.exit79, !dbg !2131

switch.case74:                                    ; preds = %switch.entry71, %switch.entry71
  store i32 2, ptr %base_used, align 4, !dbg !2132
  %49 = load i64, ptr %index, align 8, !dbg !2134
  %add75 = add i64 %49, 1, !dbg !2134
  store i64 %add75, ptr %index, align 8, !dbg !2134
  br label %switch.exit79, !dbg !2134

switch.case76:                                    ; preds = %switch.entry71, %switch.entry71
  store i32 8, ptr %base_used, align 4, !dbg !2135
  %50 = load i64, ptr %index, align 8, !dbg !2137
  %add77 = add i64 %50, 1, !dbg !2137
  store i64 %add77, ptr %index, align 8, !dbg !2137
  br label %switch.exit79, !dbg !2137

switch.default78:                                 ; preds = %switch.entry71
  br label %switch.exit79, !dbg !2138

switch.exit79:                                    ; preds = %switch.default78, %switch.case76, %switch.case74, %switch.case72
  %51 = load i64, ptr %len, align 8, !dbg !2140
  %52 = load i64, ptr %index, align 8, !dbg !2141
  %eq80 = icmp eq i64 %51, %52, !dbg !2140
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !2140

if.then81:                                        ; preds = %switch.exit79
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2142
  br label %err_retblock, !dbg !2142

if.exit82:                                        ; preds = %switch.exit79
  br label %if.exit83, !dbg !2142

if.exit83:                                        ; preds = %if.exit82, %and.phi49
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2143, metadata !DIExpression()), !dbg !2144
  store i32 0, ptr %value, align 4, !dbg !2145
  br label %loop.cond84, !dbg !2146

loop.cond84:                                      ; preds = %noerr_block149, %if.exit83
  %53 = load i64, ptr %index, align 8, !dbg !2147
  %54 = load i64, ptr %len, align 8, !dbg !2149
  %neq = icmp ne i64 %53, %54, !dbg !2147
  br i1 %neq, label %loop.body85, label %loop.exit150, !dbg !2147

loop.body85:                                      ; preds = %loop.cond84
  call void @llvm.dbg.declare(metadata ptr %c86, metadata !2150, metadata !DIExpression()), !dbg !2152
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2153, metadata !DIExpression()), !dbg !2155
  %ptradd88 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2156
  %55 = load i64, ptr %ptradd88, align 8, !dbg !2156
  %56 = load ptr, ptr %string, align 8, !dbg !2156
  %57 = load i64, ptr %index, align 8, !dbg !2157
  %add89 = add i64 %57, 1, !dbg !2157
  store i64 %add89, ptr %index, align 8, !dbg !2157
  %ge90 = icmp uge i64 %57, %55, !dbg !2157
  %58 = call i1 @llvm.expect.i1(i1 %ge90, i1 false), !dbg !2157
  br i1 %58, label %panic91, label %checkok101, !dbg !2157

checkok101:                                       ; preds = %loop.body85
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !2157
  %59 = load i8, ptr %ptradd102, align 1, !dbg !2157
  store i8 %59, ptr %ch, align 1, !dbg !2157
  %60 = load i32, ptr %base_used, align 4, !dbg !2158
  %neq103 = icmp ne i32 16, %60, !dbg !2158
  br i1 %neq103, label %or.phi106, label %or.rhs104, !dbg !2158

or.rhs104:                                        ; preds = %checkok101
  %61 = load i8, ptr %ch, align 1, !dbg !2159
  %lt105 = icmp ult i8 %61, 65, !dbg !2159
  br label %or.phi106, !dbg !2159

or.phi106:                                        ; preds = %or.rhs104, %checkok101
  %val107 = phi i1 [ true, %checkok101 ], [ %lt105, %or.rhs104 ], !dbg !2159
  br i1 %val107, label %if.then108, label %if.exit109, !dbg !2159

if.then108:                                       ; preds = %or.phi106
  %62 = load i8, ptr %ch, align 1, !dbg !2160
  %zext = zext i8 %62 to i32, !dbg !2160
  %sub = sub i32 %zext, 48, !dbg !2161
  %trunc = trunc i32 %sub to i8, !dbg !2161
  store i8 %trunc, ptr %blockret87, align 1, !dbg !2161
  br label %expr_block.exit, !dbg !2161

if.exit109:                                       ; preds = %or.phi106
  %63 = load i8, ptr %ch, align 1, !dbg !2162
  %le110 = icmp ule i8 %63, 70, !dbg !2162
  br i1 %le110, label %if.then111, label %if.exit116, !dbg !2162

if.then111:                                       ; preds = %if.exit109
  %64 = load i8, ptr %ch, align 1, !dbg !2163
  %zext112 = zext i8 %64 to i32, !dbg !2163
  %sub113 = sub i32 %zext112, 65, !dbg !2163
  %add114 = add i32 %sub113, 10, !dbg !2164
  %trunc115 = trunc i32 %add114 to i8, !dbg !2164
  store i8 %trunc115, ptr %blockret87, align 1, !dbg !2164
  br label %expr_block.exit, !dbg !2164

if.exit116:                                       ; preds = %if.exit109
  %65 = load i8, ptr %ch, align 1, !dbg !2165
  %lt117 = icmp ult i8 %65, 97, !dbg !2165
  br i1 %lt117, label %if.then118, label %if.exit119, !dbg !2165

if.then118:                                       ; preds = %if.exit116
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2166
  br label %guard_block, !dbg !2166

if.exit119:                                       ; preds = %if.exit116
  %66 = load i8, ptr %ch, align 1, !dbg !2167
  %gt120 = icmp ugt i8 %66, 102, !dbg !2167
  br i1 %gt120, label %if.then121, label %if.exit122, !dbg !2167

if.then121:                                       ; preds = %if.exit119
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2168
  br label %guard_block, !dbg !2168

if.exit122:                                       ; preds = %if.exit119
  %67 = load i8, ptr %ch, align 1, !dbg !2169
  %zext123 = zext i8 %67 to i32, !dbg !2169
  %sub124 = sub i32 %zext123, 97, !dbg !2169
  %add125 = add i32 %sub124, 10, !dbg !2170
  %trunc126 = trunc i32 %add125 to i8, !dbg !2170
  store i8 %trunc126, ptr %blockret87, align 1, !dbg !2170
  br label %expr_block.exit, !dbg !2170

expr_block.exit:                                  ; preds = %if.exit122, %if.then111, %if.then108
  br label %noerr_block, !dbg !2170

guard_block:                                      ; preds = %if.then121, %if.then118
  %68 = load i64, ptr %error_var, align 8, !dbg !2170
  store i64 %68, ptr %reterr, align 8, !dbg !2170
  br label %err_retblock, !dbg !2170

noerr_block:                                      ; preds = %expr_block.exit
  %69 = load i8, ptr %blockret87, align 1, !dbg !2170
  store i8 %69, ptr %c86, align 1, !dbg !2170
  %70 = load i8, ptr %c86, align 1, !dbg !2171
  %zext127 = zext i8 %70 to i32, !dbg !2171
  %71 = load i32, ptr %base_used, align 4, !dbg !2172
  %ge128 = icmp uge i32 %zext127, %71, !dbg !2171
  br i1 %ge128, label %if.then129, label %if.exit130, !dbg !2171

if.then129:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2173
  br label %err_retblock, !dbg !2173

if.exit130:                                       ; preds = %noerr_block
  %72 = load i8, ptr %is_negative, align 1, !dbg !2174
  %73 = trunc i8 %72 to i1, !dbg !2174
  br i1 %73, label %if.then133, label %if.exit139, !dbg !2174

if.then133:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2176, metadata !DIExpression()), !dbg !2178
  %74 = load i32, ptr %value, align 4, !dbg !2179
  %75 = load i32, ptr %base_used, align 4, !dbg !2180
  %mul = mul i32 %74, %75, !dbg !2179
  %76 = load i8, ptr %c86, align 1, !dbg !2181
  %zext134 = zext i8 %76 to i32, !dbg !2181
  %sub135 = sub i32 %mul, %zext134, !dbg !2179
  store i32 %sub135, ptr %new_value, align 4, !dbg !2179
  %77 = load i32, ptr %new_value, align 4, !dbg !2182
  %78 = load i32, ptr %value, align 4, !dbg !2183
  %gt136 = icmp ugt i32 %77, %78, !dbg !2182
  br i1 %gt136, label %if.then137, label %if.exit138, !dbg !2182

if.then137:                                       ; preds = %if.then133
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2184
  br label %guard_block148, !dbg !2184

if.exit138:                                       ; preds = %if.then133
  %79 = load i32, ptr %new_value, align 4, !dbg !2185
  store i32 %79, ptr %blockret132, align 4, !dbg !2185
  br label %expr_block.exit147, !dbg !2185

if.exit139:                                       ; preds = %if.exit130
  call void @llvm.dbg.declare(metadata ptr %new_value140, metadata !2186, metadata !DIExpression()), !dbg !2187
  %80 = load i32, ptr %value, align 4, !dbg !2188
  %81 = load i32, ptr %base_used, align 4, !dbg !2189
  %mul141 = mul i32 %80, %81, !dbg !2188
  %82 = load i8, ptr %c86, align 1, !dbg !2190
  %zext142 = zext i8 %82 to i32, !dbg !2190
  %add143 = add i32 %mul141, %zext142, !dbg !2188
  store i32 %add143, ptr %new_value140, align 4, !dbg !2188
  %83 = load i32, ptr %new_value140, align 4, !dbg !2191
  %84 = load i32, ptr %value, align 4, !dbg !2192
  %lt144 = icmp ult i32 %83, %84, !dbg !2191
  br i1 %lt144, label %if.then145, label %if.exit146, !dbg !2191

if.then145:                                       ; preds = %if.exit139
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var131, align 8, !dbg !2193
  br label %guard_block148, !dbg !2193

if.exit146:                                       ; preds = %if.exit139
  %85 = load i32, ptr %new_value140, align 4, !dbg !2194
  store i32 %85, ptr %blockret132, align 4, !dbg !2194
  br label %expr_block.exit147, !dbg !2194

expr_block.exit147:                               ; preds = %if.exit146, %if.exit138
  br label %noerr_block149, !dbg !2194

guard_block148:                                   ; preds = %if.then145, %if.then137
  %86 = load i64, ptr %error_var131, align 8, !dbg !2194
  store i64 %86, ptr %reterr, align 8, !dbg !2194
  br label %err_retblock, !dbg !2194

noerr_block149:                                   ; preds = %expr_block.exit147
  %87 = load i32, ptr %blockret132, align 4, !dbg !2194
  store i32 %87, ptr %value, align 4, !dbg !2194
  br label %loop.cond84, !dbg !2194

loop.exit150:                                     ; preds = %loop.cond84
  %88 = load i32, ptr %value, align 4, !dbg !2195
  store i32 %88, ptr %blockret, align 4, !dbg !2195
  br label %expr_block.exit151, !dbg !2195

expr_block.exit151:                               ; preds = %loop.exit150, %if.then54
  %89 = load i32, ptr %blockret, align 4, !dbg !2195
  store i32 %89, ptr %0, align 4, !dbg !2195
  ret i64 0, !dbg !2195

err_retblock:                                     ; preds = %guard_block148, %if.then129, %guard_block, %if.then81, %if.then30, %if.then24, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !2195
  ret i64 %90, !dbg !2195

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %93 = insertvalue %any undef, ptr %taddr17, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %95 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %96 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.72, i64 7 }, ptr %taddr20, align 8
  %97 = load [2 x i64], ptr %taddr20, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd21, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %99 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 750, [2 x i64] %99), !dbg !2104
  unreachable, !dbg !2104

panic34:                                          ; preds = %if.exit31
  store i64 %33, ptr %taddr35, align 8
  %100 = insertvalue %any undef, ptr %taddr35, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr36, align 8
  %102 = insertvalue %any undef, ptr %taddr36, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr37, align 8
  %104 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr38, align 8
  %105 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.72, i64 7 }, ptr %taddr39, align 8
  %106 = load [2 x i64], ptr %taddr39, align 8
  store %any %101, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %108 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 763, [2 x i64] %108), !dbg !2119
  unreachable, !dbg !2119

panic58:                                          ; preds = %if.exit55
  store i64 %42, ptr %taddr59, align 8
  %109 = insertvalue %any undef, ptr %taddr59, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr60, align 8
  %111 = insertvalue %any undef, ptr %taddr60, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr61, align 8
  %113 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr62, align 8
  %114 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.72, i64 7 }, ptr %taddr63, align 8
  %115 = load [2 x i64], ptr %taddr63, align 8
  store %any %110, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %112, ptr %ptradd65, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %117 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 767, [2 x i64] %117), !dbg !2128
  unreachable, !dbg !2128

panic91:                                          ; preds = %loop.body85
  store i64 %55, ptr %taddr92, align 8
  %118 = insertvalue %any undef, ptr %taddr92, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr93, align 8
  %120 = insertvalue %any undef, ptr %taddr93, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr94, align 8
  %122 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr95, align 8
  %123 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.72, i64 7 }, ptr %taddr96, align 8
  %124 = load [2 x i64], ptr %taddr96, align 8
  store %any %119, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %121, ptr %ptradd98, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %126 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 790, [2 x i64] %126), !dbg !2157
  unreachable, !dbg !2157
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_ushort(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !2196 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i16, align 2
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i16, align 2
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch70 = alloca i8, align 1
  %value = alloca i16, align 2
  %c86 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret87 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %error_var133 = alloca i64, align 8
  %blockret134 = alloca i16, align 2
  %new_value = alloca i16, align 2
  %new_value145 = alloca i16, align 2
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2199, metadata !DIExpression()), !dbg !2200
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2201, metadata !DIExpression()), !dbg !2202
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !2203
  %le = icmp sle i32 %4, 10, !dbg !2203
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2203

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !2207
  %gt = icmp sgt i32 %5, 1, !dbg !2207
  br label %and.phi, !dbg !2207

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2207
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2207

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !2208
  %eq = icmp eq i32 %6, 16, !dbg !2208
  br label %or.phi, !dbg !2208

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2208
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2208

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !2203
  unreachable, !dbg !2203

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2209, metadata !DIExpression()), !dbg !2210
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2211
  %11 = load i64, ptr %ptradd, align 8, !dbg !2211
  store i64 %11, ptr %len, align 8, !dbg !2211
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2212, metadata !DIExpression()), !dbg !2213
  store i64 0, ptr %index, align 8, !dbg !2214
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2215, metadata !DIExpression()), !dbg !2216
  %12 = load ptr, ptr %string, align 8, !dbg !2217
  store ptr %12, ptr %ptr, align 8, !dbg !2217
  br label %loop.cond, !dbg !2218

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !2219
  %14 = load i64, ptr %len, align 8, !dbg !2221
  %lt = icmp ult i64 %13, %14, !dbg !2219
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !2219

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !2222
  %16 = load i64, ptr %index, align 8, !dbg !2223
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !2223
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !2224
  %eq7 = icmp eq i8 %18, 32, !dbg !2224
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !2224

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !2227
  %eq9 = icmp eq i8 %19, 9, !dbg !2227
  br label %or.phi10, !dbg !2227

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !2227
  br label %and.phi12, !dbg !2227

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !2227
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !2227

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !2228
  %add = add i64 %20, 1, !dbg !2228
  store i64 %add, ptr %index, align 8, !dbg !2228
  br label %loop.cond, !dbg !2228

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !2229
  %22 = load i64, ptr %index, align 8, !dbg !2230
  %eq14 = icmp eq i64 %21, %22, !dbg !2229
  br i1 %eq14, label %if.then, label %if.exit, !dbg !2229

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2231
  br label %err_retblock, !dbg !2231

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2232, metadata !DIExpression()), !dbg !2233
  store i8 0, ptr %is_negative, align 1, !dbg !2233
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2234
  %23 = load i64, ptr %ptradd15, align 8, !dbg !2234
  %24 = load ptr, ptr %string, align 8, !dbg !2234
  %25 = load i64, ptr %index, align 8, !dbg !2236
  %ge = icmp uge i64 %25, %23, !dbg !2236
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2236
  br i1 %26, label %panic, label %checkok, !dbg !2236

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !2236
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then24, !dbg !2237

if.then24:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2239
  br label %err_retblock, !dbg !2239

switch.case27:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !2240
  %add28 = add i64 %29, 1, !dbg !2240
  store i64 %add28, ptr %index, align 8, !dbg !2240
  br label %switch.exit, !dbg !2240

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2242

switch.exit:                                      ; preds = %switch.default, %switch.case27
  %30 = load i64, ptr %len, align 8, !dbg !2244
  %31 = load i64, ptr %index, align 8, !dbg !2245
  %eq29 = icmp eq i64 %30, %31, !dbg !2244
  br i1 %eq29, label %if.then30, label %if.exit31, !dbg !2244

if.then30:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2246
  br label %err_retblock, !dbg !2246

if.exit31:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2247, metadata !DIExpression()), !dbg !2248
  %32 = load i32, ptr %base1, align 4, !dbg !2249
  %trunc = trunc i32 %32 to i16, !dbg !2249
  store i16 %trunc, ptr %base_used, align 2, !dbg !2249
  %ptradd32 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2250
  %33 = load i64, ptr %ptradd32, align 8, !dbg !2250
  %34 = load ptr, ptr %string, align 8, !dbg !2250
  %35 = load i64, ptr %index, align 8, !dbg !2251
  %ge33 = icmp uge i64 %35, %33, !dbg !2251
  %36 = call i1 @llvm.expect.i1(i1 %ge33, i1 false), !dbg !2251
  br i1 %36, label %panic34, label %checkok44, !dbg !2251

checkok44:                                        ; preds = %if.exit31
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !2251
  %37 = load i8, ptr %ptradd45, align 1, !dbg !2251
  %eq46 = icmp eq i8 %37, 48, !dbg !2250
  br i1 %eq46, label %and.rhs47, label %and.phi49, !dbg !2250

and.rhs47:                                        ; preds = %checkok44
  %38 = load i32, ptr %base1, align 4, !dbg !2252
  %eq48 = icmp eq i32 %38, 10, !dbg !2252
  br label %and.phi49, !dbg !2252

and.phi49:                                        ; preds = %and.rhs47, %checkok44
  %val50 = phi i1 [ false, %checkok44 ], [ %eq48, %and.rhs47 ], !dbg !2252
  br i1 %val50, label %if.then51, label %if.exit83, !dbg !2252

if.then51:                                        ; preds = %and.phi49
  %39 = load i64, ptr %index, align 8, !dbg !2253
  %add52 = add i64 %39, 1, !dbg !2253
  store i64 %add52, ptr %index, align 8, !dbg !2253
  %40 = load i64, ptr %index, align 8, !dbg !2255
  %41 = load i64, ptr %len, align 8, !dbg !2256
  %eq53 = icmp eq i64 %40, %41, !dbg !2255
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !2255

if.then54:                                        ; preds = %if.then51
  store i16 0, ptr %blockret, align 2, !dbg !2257
  br label %expr_block.exit159, !dbg !2257

if.exit55:                                        ; preds = %if.then51
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2258
  %42 = load i64, ptr %ptradd56, align 8, !dbg !2258
  %43 = load ptr, ptr %string, align 8, !dbg !2258
  %44 = load i64, ptr %index, align 8, !dbg !2260
  %ge57 = icmp uge i64 %44, %42, !dbg !2260
  %45 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !2260
  br i1 %45, label %panic58, label %checkok68, !dbg !2260

checkok68:                                        ; preds = %if.exit55
  %ptradd69 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !2260
  %46 = load i8, ptr %ptradd69, align 1
  store i8 %46, ptr %switch70, align 1
  br label %switch.entry71

switch.entry71:                                   ; preds = %checkok68
  %47 = load i8, ptr %switch70, align 1
  switch i8 %47, label %switch.default78 [
    i8 120, label %switch.case72
    i8 88, label %switch.case72
    i8 98, label %switch.case74
    i8 66, label %switch.case74
    i8 111, label %switch.case76
    i8 79, label %switch.case76
  ]

switch.case72:                                    ; preds = %switch.entry71, %switch.entry71
  store i16 16, ptr %base_used, align 2, !dbg !2261
  %48 = load i64, ptr %index, align 8, !dbg !2263
  %add73 = add i64 %48, 1, !dbg !2263
  store i64 %add73, ptr %index, align 8, !dbg !2263
  br label %switch.exit79, !dbg !2263

switch.case74:                                    ; preds = %switch.entry71, %switch.entry71
  store i16 2, ptr %base_used, align 2, !dbg !2264
  %49 = load i64, ptr %index, align 8, !dbg !2266
  %add75 = add i64 %49, 1, !dbg !2266
  store i64 %add75, ptr %index, align 8, !dbg !2266
  br label %switch.exit79, !dbg !2266

switch.case76:                                    ; preds = %switch.entry71, %switch.entry71
  store i16 8, ptr %base_used, align 2, !dbg !2267
  %50 = load i64, ptr %index, align 8, !dbg !2269
  %add77 = add i64 %50, 1, !dbg !2269
  store i64 %add77, ptr %index, align 8, !dbg !2269
  br label %switch.exit79, !dbg !2269

switch.default78:                                 ; preds = %switch.entry71
  br label %switch.exit79, !dbg !2270

switch.exit79:                                    ; preds = %switch.default78, %switch.case76, %switch.case74, %switch.case72
  %51 = load i64, ptr %len, align 8, !dbg !2272
  %52 = load i64, ptr %index, align 8, !dbg !2273
  %eq80 = icmp eq i64 %51, %52, !dbg !2272
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !2272

if.then81:                                        ; preds = %switch.exit79
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2274
  br label %err_retblock, !dbg !2274

if.exit82:                                        ; preds = %switch.exit79
  br label %if.exit83, !dbg !2274

if.exit83:                                        ; preds = %if.exit82, %and.phi49
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2275, metadata !DIExpression()), !dbg !2276
  store i16 0, ptr %value, align 2, !dbg !2277
  br label %loop.cond84, !dbg !2278

loop.cond84:                                      ; preds = %noerr_block157, %if.exit83
  %53 = load i64, ptr %index, align 8, !dbg !2279
  %54 = load i64, ptr %len, align 8, !dbg !2281
  %neq = icmp ne i64 %53, %54, !dbg !2279
  br i1 %neq, label %loop.body85, label %loop.exit158, !dbg !2279

loop.body85:                                      ; preds = %loop.cond84
  call void @llvm.dbg.declare(metadata ptr %c86, metadata !2282, metadata !DIExpression()), !dbg !2284
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2285, metadata !DIExpression()), !dbg !2287
  %ptradd88 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2288
  %55 = load i64, ptr %ptradd88, align 8, !dbg !2288
  %56 = load ptr, ptr %string, align 8, !dbg !2288
  %57 = load i64, ptr %index, align 8, !dbg !2289
  %add89 = add i64 %57, 1, !dbg !2289
  store i64 %add89, ptr %index, align 8, !dbg !2289
  %ge90 = icmp uge i64 %57, %55, !dbg !2289
  %58 = call i1 @llvm.expect.i1(i1 %ge90, i1 false), !dbg !2289
  br i1 %58, label %panic91, label %checkok101, !dbg !2289

checkok101:                                       ; preds = %loop.body85
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !2289
  %59 = load i8, ptr %ptradd102, align 1, !dbg !2289
  store i8 %59, ptr %ch, align 1, !dbg !2289
  %60 = load i16, ptr %base_used, align 2, !dbg !2290
  %zext = zext i16 %60 to i32, !dbg !2290
  %neq103 = icmp ne i32 16, %zext, !dbg !2290
  br i1 %neq103, label %or.phi106, label %or.rhs104, !dbg !2290

or.rhs104:                                        ; preds = %checkok101
  %61 = load i8, ptr %ch, align 1, !dbg !2291
  %lt105 = icmp ult i8 %61, 65, !dbg !2291
  br label %or.phi106, !dbg !2291

or.phi106:                                        ; preds = %or.rhs104, %checkok101
  %val107 = phi i1 [ true, %checkok101 ], [ %lt105, %or.rhs104 ], !dbg !2291
  br i1 %val107, label %if.then108, label %if.exit111, !dbg !2291

if.then108:                                       ; preds = %or.phi106
  %62 = load i8, ptr %ch, align 1, !dbg !2292
  %zext109 = zext i8 %62 to i32, !dbg !2292
  %sub = sub i32 %zext109, 48, !dbg !2293
  %trunc110 = trunc i32 %sub to i8, !dbg !2293
  store i8 %trunc110, ptr %blockret87, align 1, !dbg !2293
  br label %expr_block.exit, !dbg !2293

if.exit111:                                       ; preds = %or.phi106
  %63 = load i8, ptr %ch, align 1, !dbg !2294
  %le112 = icmp ule i8 %63, 70, !dbg !2294
  br i1 %le112, label %if.then113, label %if.exit118, !dbg !2294

if.then113:                                       ; preds = %if.exit111
  %64 = load i8, ptr %ch, align 1, !dbg !2295
  %zext114 = zext i8 %64 to i32, !dbg !2295
  %sub115 = sub i32 %zext114, 65, !dbg !2295
  %add116 = add i32 %sub115, 10, !dbg !2296
  %trunc117 = trunc i32 %add116 to i8, !dbg !2296
  store i8 %trunc117, ptr %blockret87, align 1, !dbg !2296
  br label %expr_block.exit, !dbg !2296

if.exit118:                                       ; preds = %if.exit111
  %65 = load i8, ptr %ch, align 1, !dbg !2297
  %lt119 = icmp ult i8 %65, 97, !dbg !2297
  br i1 %lt119, label %if.then120, label %if.exit121, !dbg !2297

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2298
  br label %guard_block, !dbg !2298

if.exit121:                                       ; preds = %if.exit118
  %66 = load i8, ptr %ch, align 1, !dbg !2299
  %gt122 = icmp ugt i8 %66, 102, !dbg !2299
  br i1 %gt122, label %if.then123, label %if.exit124, !dbg !2299

if.then123:                                       ; preds = %if.exit121
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2300
  br label %guard_block, !dbg !2300

if.exit124:                                       ; preds = %if.exit121
  %67 = load i8, ptr %ch, align 1, !dbg !2301
  %zext125 = zext i8 %67 to i32, !dbg !2301
  %sub126 = sub i32 %zext125, 97, !dbg !2301
  %add127 = add i32 %sub126, 10, !dbg !2302
  %trunc128 = trunc i32 %add127 to i8, !dbg !2302
  store i8 %trunc128, ptr %blockret87, align 1, !dbg !2302
  br label %expr_block.exit, !dbg !2302

expr_block.exit:                                  ; preds = %if.exit124, %if.then113, %if.then108
  br label %noerr_block, !dbg !2302

guard_block:                                      ; preds = %if.then123, %if.then120
  %68 = load i64, ptr %error_var, align 8, !dbg !2302
  store i64 %68, ptr %reterr, align 8, !dbg !2302
  br label %err_retblock, !dbg !2302

noerr_block:                                      ; preds = %expr_block.exit
  %69 = load i8, ptr %blockret87, align 1, !dbg !2302
  store i8 %69, ptr %c86, align 1, !dbg !2302
  %70 = load i8, ptr %c86, align 1, !dbg !2303
  %zext129 = zext i8 %70 to i16, !dbg !2303
  %71 = load i16, ptr %base_used, align 2, !dbg !2304
  %ge130 = icmp uge i16 %zext129, %71, !dbg !2303
  br i1 %ge130, label %if.then131, label %if.exit132, !dbg !2303

if.then131:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2305
  br label %err_retblock, !dbg !2305

if.exit132:                                       ; preds = %noerr_block
  %72 = load i8, ptr %is_negative, align 1, !dbg !2306
  %73 = trunc i8 %72 to i1, !dbg !2306
  br i1 %73, label %if.then135, label %if.exit144, !dbg !2306

if.then135:                                       ; preds = %if.exit132
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2308, metadata !DIExpression()), !dbg !2310
  %74 = load i16, ptr %value, align 2, !dbg !2311
  %zext136 = zext i16 %74 to i32, !dbg !2311
  %75 = load i16, ptr %base_used, align 2, !dbg !2312
  %zext137 = zext i16 %75 to i32, !dbg !2312
  %mul = mul i32 %zext136, %zext137, !dbg !2311
  %76 = load i8, ptr %c86, align 1, !dbg !2313
  %zext138 = zext i8 %76 to i32, !dbg !2313
  %sub139 = sub i32 %mul, %zext138, !dbg !2311
  %trunc140 = trunc i32 %sub139 to i16, !dbg !2311
  store i16 %trunc140, ptr %new_value, align 2, !dbg !2311
  %77 = load i16, ptr %new_value, align 2, !dbg !2314
  %78 = load i16, ptr %value, align 2, !dbg !2315
  %gt141 = icmp ugt i16 %77, %78, !dbg !2314
  br i1 %gt141, label %if.then142, label %if.exit143, !dbg !2314

if.then142:                                       ; preds = %if.then135
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var133, align 8, !dbg !2316
  br label %guard_block156, !dbg !2316

if.exit143:                                       ; preds = %if.then135
  %79 = load i16, ptr %new_value, align 2, !dbg !2317
  store i16 %79, ptr %blockret134, align 2, !dbg !2317
  br label %expr_block.exit155, !dbg !2317

if.exit144:                                       ; preds = %if.exit132
  call void @llvm.dbg.declare(metadata ptr %new_value145, metadata !2318, metadata !DIExpression()), !dbg !2319
  %80 = load i16, ptr %value, align 2, !dbg !2320
  %zext146 = zext i16 %80 to i32, !dbg !2320
  %81 = load i16, ptr %base_used, align 2, !dbg !2321
  %zext147 = zext i16 %81 to i32, !dbg !2321
  %mul148 = mul i32 %zext146, %zext147, !dbg !2320
  %82 = load i8, ptr %c86, align 1, !dbg !2322
  %zext149 = zext i8 %82 to i32, !dbg !2322
  %add150 = add i32 %mul148, %zext149, !dbg !2320
  %trunc151 = trunc i32 %add150 to i16, !dbg !2320
  store i16 %trunc151, ptr %new_value145, align 2, !dbg !2320
  %83 = load i16, ptr %new_value145, align 2, !dbg !2323
  %84 = load i16, ptr %value, align 2, !dbg !2324
  %lt152 = icmp ult i16 %83, %84, !dbg !2323
  br i1 %lt152, label %if.then153, label %if.exit154, !dbg !2323

if.then153:                                       ; preds = %if.exit144
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var133, align 8, !dbg !2325
  br label %guard_block156, !dbg !2325

if.exit154:                                       ; preds = %if.exit144
  %85 = load i16, ptr %new_value145, align 2, !dbg !2326
  store i16 %85, ptr %blockret134, align 2, !dbg !2326
  br label %expr_block.exit155, !dbg !2326

expr_block.exit155:                               ; preds = %if.exit154, %if.exit143
  br label %noerr_block157, !dbg !2326

guard_block156:                                   ; preds = %if.then153, %if.then142
  %86 = load i64, ptr %error_var133, align 8, !dbg !2326
  store i64 %86, ptr %reterr, align 8, !dbg !2326
  br label %err_retblock, !dbg !2326

noerr_block157:                                   ; preds = %expr_block.exit155
  %87 = load i16, ptr %blockret134, align 2, !dbg !2326
  store i16 %87, ptr %value, align 2, !dbg !2326
  br label %loop.cond84, !dbg !2326

loop.exit158:                                     ; preds = %loop.cond84
  %88 = load i16, ptr %value, align 2, !dbg !2327
  store i16 %88, ptr %blockret, align 2, !dbg !2327
  br label %expr_block.exit159, !dbg !2327

expr_block.exit159:                               ; preds = %loop.exit158, %if.then54
  %89 = load i16, ptr %blockret, align 2, !dbg !2327
  store i16 %89, ptr %0, align 2, !dbg !2327
  ret i64 0, !dbg !2327

err_retblock:                                     ; preds = %guard_block156, %if.then131, %guard_block, %if.then81, %if.then30, %if.then24, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !2327
  ret i64 %90, !dbg !2327

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %93 = insertvalue %any undef, ptr %taddr17, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %95 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %96 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %taddr20, align 8
  %97 = load [2 x i64], ptr %taddr20, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd21, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %99 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 750, [2 x i64] %99), !dbg !2236
  unreachable, !dbg !2236

panic34:                                          ; preds = %if.exit31
  store i64 %33, ptr %taddr35, align 8
  %100 = insertvalue %any undef, ptr %taddr35, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr36, align 8
  %102 = insertvalue %any undef, ptr %taddr36, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr37, align 8
  %104 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr38, align 8
  %105 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %taddr39, align 8
  %106 = load [2 x i64], ptr %taddr39, align 8
  store %any %101, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %108 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 763, [2 x i64] %108), !dbg !2251
  unreachable, !dbg !2251

panic58:                                          ; preds = %if.exit55
  store i64 %42, ptr %taddr59, align 8
  %109 = insertvalue %any undef, ptr %taddr59, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr60, align 8
  %111 = insertvalue %any undef, ptr %taddr60, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr61, align 8
  %113 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr62, align 8
  %114 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %taddr63, align 8
  %115 = load [2 x i64], ptr %taddr63, align 8
  store %any %110, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %112, ptr %ptradd65, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %117 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 767, [2 x i64] %117), !dbg !2260
  unreachable, !dbg !2260

panic91:                                          ; preds = %loop.body85
  store i64 %55, ptr %taddr92, align 8
  %118 = insertvalue %any undef, ptr %taddr92, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr93, align 8
  %120 = insertvalue %any undef, ptr %taddr93, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr94, align 8
  %122 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr95, align 8
  %123 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.73, i64 9 }, ptr %taddr96, align 8
  %124 = load [2 x i64], ptr %taddr96, align 8
  store %any %119, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %121, ptr %ptradd98, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %126 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 790, [2 x i64] %126), !dbg !2289
  unreachable, !dbg !2289
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_uchar(ptr %0, [2 x i64] %1, i32 %2) #0 !dbg !2328 {
entry:
  %s = alloca %"char[]", align 8
  %base = alloca i32, align 4
  %reterr = alloca i64, align 8
  %string = alloca %"char[]", align 8
  %base1 = alloca i32, align 4
  %blockret = alloca i8, align 1
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %len = alloca i64, align 8
  %index = alloca i64, align 8
  %ptr = alloca ptr, align 8
  %c = alloca i8, align 1
  %is_negative = alloca i8, align 1
  %taddr16 = alloca i64, align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca %"char[]", align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr22 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %base_used = alloca i8, align 1
  %taddr35 = alloca i64, align 8
  %taddr36 = alloca i64, align 8
  %taddr37 = alloca %"char[]", align 8
  %taddr38 = alloca %"char[]", align 8
  %taddr39 = alloca %"char[]", align 8
  %varargslots40 = alloca [2 x %any], align 8
  %taddr43 = alloca %"any[]", align 8
  %taddr59 = alloca i64, align 8
  %taddr60 = alloca i64, align 8
  %taddr61 = alloca %"char[]", align 8
  %taddr62 = alloca %"char[]", align 8
  %taddr63 = alloca %"char[]", align 8
  %varargslots64 = alloca [2 x %any], align 8
  %taddr67 = alloca %"any[]", align 8
  %switch70 = alloca i8, align 1
  %value = alloca i8, align 1
  %c86 = alloca i8, align 1
  %error_var = alloca i64, align 8
  %blockret87 = alloca i8, align 1
  %ch = alloca i8, align 1
  %taddr92 = alloca i64, align 8
  %taddr93 = alloca i64, align 8
  %taddr94 = alloca %"char[]", align 8
  %taddr95 = alloca %"char[]", align 8
  %taddr96 = alloca %"char[]", align 8
  %varargslots97 = alloca [2 x %any], align 8
  %taddr100 = alloca %"any[]", align 8
  %error_var132 = alloca i64, align 8
  %blockret133 = alloca i8, align 1
  %new_value = alloca i8, align 1
  %new_value144 = alloca i8, align 1
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2331, metadata !DIExpression()), !dbg !2332
  store i32 %2, ptr %base, align 4
  call void @llvm.dbg.declare(metadata ptr %base, metadata !2333, metadata !DIExpression()), !dbg !2334
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %string, ptr align 8 %s, i32 16, i1 false)
  %3 = load i32, ptr %base, align 4
  store i32 %3, ptr %base1, align 4
  %4 = load i32, ptr %base1, align 4, !dbg !2335
  %le = icmp sle i32 %4, 10, !dbg !2335
  br i1 %le, label %and.rhs, label %and.phi, !dbg !2335

and.rhs:                                          ; preds = %entry
  %5 = load i32, ptr %base1, align 4, !dbg !2339
  %gt = icmp sgt i32 %5, 1, !dbg !2339
  br label %and.phi, !dbg !2339

and.phi:                                          ; preds = %and.rhs, %entry
  %val = phi i1 [ false, %entry ], [ %gt, %and.rhs ], !dbg !2339
  br i1 %val, label %or.phi, label %or.rhs, !dbg !2339

or.rhs:                                           ; preds = %and.phi
  %6 = load i32, ptr %base1, align 4, !dbg !2340
  %eq = icmp eq i32 %6, 16, !dbg !2340
  br label %or.phi, !dbg !2340

or.phi:                                           ; preds = %or.rhs, %and.phi
  %val2 = phi i1 [ true, %and.phi ], [ %eq, %or.rhs ], !dbg !2340
  br i1 %val2, label %assert_ok, label %assert_fail, !dbg !2340

assert_fail:                                      ; preds = %or.phi
  store %"char[]" { ptr @.panic_msg.64, i64 79 }, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr3, align 8
  %8 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.74, i64 8 }, ptr %taddr4, align 8
  %9 = load [2 x i64], ptr %taddr4, align 8
  %10 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %10([2 x i64] %7, [2 x i64] %8, [2 x i64] %9, i32 740), !dbg !2335
  unreachable, !dbg !2335

assert_ok:                                        ; preds = %or.phi
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2341, metadata !DIExpression()), !dbg !2342
  %ptradd = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2343
  %11 = load i64, ptr %ptradd, align 8, !dbg !2343
  store i64 %11, ptr %len, align 8, !dbg !2343
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2344, metadata !DIExpression()), !dbg !2345
  store i64 0, ptr %index, align 8, !dbg !2346
  call void @llvm.dbg.declare(metadata ptr %ptr, metadata !2347, metadata !DIExpression()), !dbg !2348
  %12 = load ptr, ptr %string, align 8, !dbg !2349
  store ptr %12, ptr %ptr, align 8, !dbg !2349
  br label %loop.cond, !dbg !2350

loop.cond:                                        ; preds = %loop.body, %assert_ok
  %13 = load i64, ptr %index, align 8, !dbg !2351
  %14 = load i64, ptr %len, align 8, !dbg !2353
  %lt = icmp ult i64 %13, %14, !dbg !2351
  br i1 %lt, label %and.rhs5, label %and.phi12, !dbg !2351

and.rhs5:                                         ; preds = %loop.cond
  %15 = load ptr, ptr %ptr, align 8, !dbg !2354
  %16 = load i64, ptr %index, align 8, !dbg !2355
  %ptradd6 = getelementptr inbounds i8, ptr %15, i64 %16, !dbg !2355
  %17 = load i8, ptr %ptradd6, align 1
  store i8 %17, ptr %c, align 1
  %18 = load i8, ptr %c, align 1, !dbg !2356
  %eq7 = icmp eq i8 %18, 32, !dbg !2356
  br i1 %eq7, label %or.phi10, label %or.rhs8, !dbg !2356

or.rhs8:                                          ; preds = %and.rhs5
  %19 = load i8, ptr %c, align 1, !dbg !2359
  %eq9 = icmp eq i8 %19, 9, !dbg !2359
  br label %or.phi10, !dbg !2359

or.phi10:                                         ; preds = %or.rhs8, %and.rhs5
  %val11 = phi i1 [ true, %and.rhs5 ], [ %eq9, %or.rhs8 ], !dbg !2359
  br label %and.phi12, !dbg !2359

and.phi12:                                        ; preds = %or.phi10, %loop.cond
  %val13 = phi i1 [ false, %loop.cond ], [ %val11, %or.phi10 ], !dbg !2359
  br i1 %val13, label %loop.body, label %loop.exit, !dbg !2359

loop.body:                                        ; preds = %and.phi12
  %20 = load i64, ptr %index, align 8, !dbg !2360
  %add = add i64 %20, 1, !dbg !2360
  store i64 %add, ptr %index, align 8, !dbg !2360
  br label %loop.cond, !dbg !2360

loop.exit:                                        ; preds = %and.phi12
  %21 = load i64, ptr %len, align 8, !dbg !2361
  %22 = load i64, ptr %index, align 8, !dbg !2362
  %eq14 = icmp eq i64 %21, %22, !dbg !2361
  br i1 %eq14, label %if.then, label %if.exit, !dbg !2361

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$EMPTY_STRING" to i64), ptr %reterr, align 8, !dbg !2363
  br label %err_retblock, !dbg !2363

if.exit:                                          ; preds = %loop.exit
  call void @llvm.dbg.declare(metadata ptr %is_negative, metadata !2364, metadata !DIExpression()), !dbg !2365
  store i8 0, ptr %is_negative, align 1, !dbg !2365
  %ptradd15 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2366
  %23 = load i64, ptr %ptradd15, align 8, !dbg !2366
  %24 = load ptr, ptr %string, align 8, !dbg !2366
  %25 = load i64, ptr %index, align 8, !dbg !2368
  %ge = icmp uge i64 %25, %23, !dbg !2368
  %26 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2368
  br i1 %26, label %panic, label %checkok, !dbg !2368

checkok:                                          ; preds = %if.exit
  %ptradd23 = getelementptr inbounds i8, ptr %24, i64 %25, !dbg !2368
  %27 = load i8, ptr %ptradd23, align 1
  store i8 %27, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok
  %28 = load i8, ptr %switch, align 1
  switch i8 %28, label %switch.default [
    i8 45, label %switch.case
    i8 43, label %switch.case27
  ]

switch.case:                                      ; preds = %switch.entry
  br label %if.then24, !dbg !2369

if.then24:                                        ; preds = %switch.case
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$NEGATIVE_VALUE" to i64), ptr %reterr, align 8, !dbg !2371
  br label %err_retblock, !dbg !2371

switch.case27:                                    ; preds = %switch.entry
  %29 = load i64, ptr %index, align 8, !dbg !2372
  %add28 = add i64 %29, 1, !dbg !2372
  store i64 %add28, ptr %index, align 8, !dbg !2372
  br label %switch.exit, !dbg !2372

switch.default:                                   ; preds = %switch.entry
  br label %switch.exit, !dbg !2374

switch.exit:                                      ; preds = %switch.default, %switch.case27
  %30 = load i64, ptr %len, align 8, !dbg !2376
  %31 = load i64, ptr %index, align 8, !dbg !2377
  %eq29 = icmp eq i64 %30, %31, !dbg !2376
  br i1 %eq29, label %if.then30, label %if.exit31, !dbg !2376

if.then30:                                        ; preds = %switch.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2378
  br label %err_retblock, !dbg !2378

if.exit31:                                        ; preds = %switch.exit
  call void @llvm.dbg.declare(metadata ptr %base_used, metadata !2379, metadata !DIExpression()), !dbg !2380
  %32 = load i32, ptr %base1, align 4, !dbg !2381
  %trunc = trunc i32 %32 to i8, !dbg !2381
  store i8 %trunc, ptr %base_used, align 1, !dbg !2381
  %ptradd32 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2382
  %33 = load i64, ptr %ptradd32, align 8, !dbg !2382
  %34 = load ptr, ptr %string, align 8, !dbg !2382
  %35 = load i64, ptr %index, align 8, !dbg !2383
  %ge33 = icmp uge i64 %35, %33, !dbg !2383
  %36 = call i1 @llvm.expect.i1(i1 %ge33, i1 false), !dbg !2383
  br i1 %36, label %panic34, label %checkok44, !dbg !2383

checkok44:                                        ; preds = %if.exit31
  %ptradd45 = getelementptr inbounds i8, ptr %34, i64 %35, !dbg !2383
  %37 = load i8, ptr %ptradd45, align 1, !dbg !2383
  %eq46 = icmp eq i8 %37, 48, !dbg !2382
  br i1 %eq46, label %and.rhs47, label %and.phi49, !dbg !2382

and.rhs47:                                        ; preds = %checkok44
  %38 = load i32, ptr %base1, align 4, !dbg !2384
  %eq48 = icmp eq i32 %38, 10, !dbg !2384
  br label %and.phi49, !dbg !2384

and.phi49:                                        ; preds = %and.rhs47, %checkok44
  %val50 = phi i1 [ false, %checkok44 ], [ %eq48, %and.rhs47 ], !dbg !2384
  br i1 %val50, label %if.then51, label %if.exit83, !dbg !2384

if.then51:                                        ; preds = %and.phi49
  %39 = load i64, ptr %index, align 8, !dbg !2385
  %add52 = add i64 %39, 1, !dbg !2385
  store i64 %add52, ptr %index, align 8, !dbg !2385
  %40 = load i64, ptr %index, align 8, !dbg !2387
  %41 = load i64, ptr %len, align 8, !dbg !2388
  %eq53 = icmp eq i64 %40, %41, !dbg !2387
  br i1 %eq53, label %if.then54, label %if.exit55, !dbg !2387

if.then54:                                        ; preds = %if.then51
  store i8 0, ptr %blockret, align 1, !dbg !2389
  br label %expr_block.exit158, !dbg !2389

if.exit55:                                        ; preds = %if.then51
  %ptradd56 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2390
  %42 = load i64, ptr %ptradd56, align 8, !dbg !2390
  %43 = load ptr, ptr %string, align 8, !dbg !2390
  %44 = load i64, ptr %index, align 8, !dbg !2392
  %ge57 = icmp uge i64 %44, %42, !dbg !2392
  %45 = call i1 @llvm.expect.i1(i1 %ge57, i1 false), !dbg !2392
  br i1 %45, label %panic58, label %checkok68, !dbg !2392

checkok68:                                        ; preds = %if.exit55
  %ptradd69 = getelementptr inbounds i8, ptr %43, i64 %44, !dbg !2392
  %46 = load i8, ptr %ptradd69, align 1
  store i8 %46, ptr %switch70, align 1
  br label %switch.entry71

switch.entry71:                                   ; preds = %checkok68
  %47 = load i8, ptr %switch70, align 1
  switch i8 %47, label %switch.default78 [
    i8 120, label %switch.case72
    i8 88, label %switch.case72
    i8 98, label %switch.case74
    i8 66, label %switch.case74
    i8 111, label %switch.case76
    i8 79, label %switch.case76
  ]

switch.case72:                                    ; preds = %switch.entry71, %switch.entry71
  store i8 16, ptr %base_used, align 1, !dbg !2393
  %48 = load i64, ptr %index, align 8, !dbg !2395
  %add73 = add i64 %48, 1, !dbg !2395
  store i64 %add73, ptr %index, align 8, !dbg !2395
  br label %switch.exit79, !dbg !2395

switch.case74:                                    ; preds = %switch.entry71, %switch.entry71
  store i8 2, ptr %base_used, align 1, !dbg !2396
  %49 = load i64, ptr %index, align 8, !dbg !2398
  %add75 = add i64 %49, 1, !dbg !2398
  store i64 %add75, ptr %index, align 8, !dbg !2398
  br label %switch.exit79, !dbg !2398

switch.case76:                                    ; preds = %switch.entry71, %switch.entry71
  store i8 8, ptr %base_used, align 1, !dbg !2399
  %50 = load i64, ptr %index, align 8, !dbg !2401
  %add77 = add i64 %50, 1, !dbg !2401
  store i64 %add77, ptr %index, align 8, !dbg !2401
  br label %switch.exit79, !dbg !2401

switch.default78:                                 ; preds = %switch.entry71
  br label %switch.exit79, !dbg !2402

switch.exit79:                                    ; preds = %switch.default78, %switch.case76, %switch.case74, %switch.case72
  %51 = load i64, ptr %len, align 8, !dbg !2404
  %52 = load i64, ptr %index, align 8, !dbg !2405
  %eq80 = icmp eq i64 %51, %52, !dbg !2404
  br i1 %eq80, label %if.then81, label %if.exit82, !dbg !2404

if.then81:                                        ; preds = %switch.exit79
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2406
  br label %err_retblock, !dbg !2406

if.exit82:                                        ; preds = %switch.exit79
  br label %if.exit83, !dbg !2406

if.exit83:                                        ; preds = %if.exit82, %and.phi49
  call void @llvm.dbg.declare(metadata ptr %value, metadata !2407, metadata !DIExpression()), !dbg !2408
  store i8 0, ptr %value, align 1, !dbg !2409
  br label %loop.cond84, !dbg !2410

loop.cond84:                                      ; preds = %noerr_block156, %if.exit83
  %53 = load i64, ptr %index, align 8, !dbg !2411
  %54 = load i64, ptr %len, align 8, !dbg !2413
  %neq = icmp ne i64 %53, %54, !dbg !2411
  br i1 %neq, label %loop.body85, label %loop.exit157, !dbg !2411

loop.body85:                                      ; preds = %loop.cond84
  call void @llvm.dbg.declare(metadata ptr %c86, metadata !2414, metadata !DIExpression()), !dbg !2416
  call void @llvm.dbg.declare(metadata ptr %ch, metadata !2417, metadata !DIExpression()), !dbg !2419
  %ptradd88 = getelementptr inbounds i8, ptr %string, i64 8, !dbg !2420
  %55 = load i64, ptr %ptradd88, align 8, !dbg !2420
  %56 = load ptr, ptr %string, align 8, !dbg !2420
  %57 = load i64, ptr %index, align 8, !dbg !2421
  %add89 = add i64 %57, 1, !dbg !2421
  store i64 %add89, ptr %index, align 8, !dbg !2421
  %ge90 = icmp uge i64 %57, %55, !dbg !2421
  %58 = call i1 @llvm.expect.i1(i1 %ge90, i1 false), !dbg !2421
  br i1 %58, label %panic91, label %checkok101, !dbg !2421

checkok101:                                       ; preds = %loop.body85
  %ptradd102 = getelementptr inbounds i8, ptr %56, i64 %57, !dbg !2421
  %59 = load i8, ptr %ptradd102, align 1, !dbg !2421
  store i8 %59, ptr %ch, align 1, !dbg !2421
  %60 = load i8, ptr %base_used, align 1, !dbg !2422
  %zext = zext i8 %60 to i32, !dbg !2422
  %neq103 = icmp ne i32 16, %zext, !dbg !2422
  br i1 %neq103, label %or.phi106, label %or.rhs104, !dbg !2422

or.rhs104:                                        ; preds = %checkok101
  %61 = load i8, ptr %ch, align 1, !dbg !2423
  %lt105 = icmp ult i8 %61, 65, !dbg !2423
  br label %or.phi106, !dbg !2423

or.phi106:                                        ; preds = %or.rhs104, %checkok101
  %val107 = phi i1 [ true, %checkok101 ], [ %lt105, %or.rhs104 ], !dbg !2423
  br i1 %val107, label %if.then108, label %if.exit111, !dbg !2423

if.then108:                                       ; preds = %or.phi106
  %62 = load i8, ptr %ch, align 1, !dbg !2424
  %zext109 = zext i8 %62 to i32, !dbg !2424
  %sub = sub i32 %zext109, 48, !dbg !2425
  %trunc110 = trunc i32 %sub to i8, !dbg !2425
  store i8 %trunc110, ptr %blockret87, align 1, !dbg !2425
  br label %expr_block.exit, !dbg !2425

if.exit111:                                       ; preds = %or.phi106
  %63 = load i8, ptr %ch, align 1, !dbg !2426
  %le112 = icmp ule i8 %63, 70, !dbg !2426
  br i1 %le112, label %if.then113, label %if.exit118, !dbg !2426

if.then113:                                       ; preds = %if.exit111
  %64 = load i8, ptr %ch, align 1, !dbg !2427
  %zext114 = zext i8 %64 to i32, !dbg !2427
  %sub115 = sub i32 %zext114, 65, !dbg !2427
  %add116 = add i32 %sub115, 10, !dbg !2428
  %trunc117 = trunc i32 %add116 to i8, !dbg !2428
  store i8 %trunc117, ptr %blockret87, align 1, !dbg !2428
  br label %expr_block.exit, !dbg !2428

if.exit118:                                       ; preds = %if.exit111
  %65 = load i8, ptr %ch, align 1, !dbg !2429
  %lt119 = icmp ult i8 %65, 97, !dbg !2429
  br i1 %lt119, label %if.then120, label %if.exit121, !dbg !2429

if.then120:                                       ; preds = %if.exit118
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2430
  br label %guard_block, !dbg !2430

if.exit121:                                       ; preds = %if.exit118
  %66 = load i8, ptr %ch, align 1, !dbg !2431
  %gt122 = icmp ugt i8 %66, 102, !dbg !2431
  br i1 %gt122, label %if.then123, label %if.exit124, !dbg !2431

if.then123:                                       ; preds = %if.exit121
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %error_var, align 8, !dbg !2432
  br label %guard_block, !dbg !2432

if.exit124:                                       ; preds = %if.exit121
  %67 = load i8, ptr %ch, align 1, !dbg !2433
  %zext125 = zext i8 %67 to i32, !dbg !2433
  %sub126 = sub i32 %zext125, 97, !dbg !2433
  %add127 = add i32 %sub126, 10, !dbg !2434
  %trunc128 = trunc i32 %add127 to i8, !dbg !2434
  store i8 %trunc128, ptr %blockret87, align 1, !dbg !2434
  br label %expr_block.exit, !dbg !2434

expr_block.exit:                                  ; preds = %if.exit124, %if.then113, %if.then108
  br label %noerr_block, !dbg !2434

guard_block:                                      ; preds = %if.then123, %if.then120
  %68 = load i64, ptr %error_var, align 8, !dbg !2434
  store i64 %68, ptr %reterr, align 8, !dbg !2434
  br label %err_retblock, !dbg !2434

noerr_block:                                      ; preds = %expr_block.exit
  %69 = load i8, ptr %blockret87, align 1, !dbg !2434
  store i8 %69, ptr %c86, align 1, !dbg !2434
  %70 = load i8, ptr %c86, align 1, !dbg !2435
  %71 = load i8, ptr %base_used, align 1, !dbg !2436
  %ge129 = icmp uge i8 %70, %71, !dbg !2435
  br i1 %ge129, label %if.then130, label %if.exit131, !dbg !2435

if.then130:                                       ; preds = %noerr_block
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_INTEGER" to i64), ptr %reterr, align 8, !dbg !2437
  br label %err_retblock, !dbg !2437

if.exit131:                                       ; preds = %noerr_block
  %72 = load i8, ptr %is_negative, align 1, !dbg !2438
  %73 = trunc i8 %72 to i1, !dbg !2438
  br i1 %73, label %if.then134, label %if.exit143, !dbg !2438

if.then134:                                       ; preds = %if.exit131
  call void @llvm.dbg.declare(metadata ptr %new_value, metadata !2440, metadata !DIExpression()), !dbg !2442
  %74 = load i8, ptr %value, align 1, !dbg !2443
  %zext135 = zext i8 %74 to i32, !dbg !2443
  %75 = load i8, ptr %base_used, align 1, !dbg !2444
  %zext136 = zext i8 %75 to i32, !dbg !2444
  %mul = mul i32 %zext135, %zext136, !dbg !2443
  %76 = load i8, ptr %c86, align 1, !dbg !2445
  %zext137 = zext i8 %76 to i32, !dbg !2445
  %sub138 = sub i32 %mul, %zext137, !dbg !2443
  %trunc139 = trunc i32 %sub138 to i8, !dbg !2443
  store i8 %trunc139, ptr %new_value, align 1, !dbg !2443
  %77 = load i8, ptr %new_value, align 1, !dbg !2446
  %78 = load i8, ptr %value, align 1, !dbg !2447
  %gt140 = icmp ugt i8 %77, %78, !dbg !2446
  br i1 %gt140, label %if.then141, label %if.exit142, !dbg !2446

if.then141:                                       ; preds = %if.then134
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !2448
  br label %guard_block155, !dbg !2448

if.exit142:                                       ; preds = %if.then134
  %79 = load i8, ptr %new_value, align 1, !dbg !2449
  store i8 %79, ptr %blockret133, align 1, !dbg !2449
  br label %expr_block.exit154, !dbg !2449

if.exit143:                                       ; preds = %if.exit131
  call void @llvm.dbg.declare(metadata ptr %new_value144, metadata !2450, metadata !DIExpression()), !dbg !2451
  %80 = load i8, ptr %value, align 1, !dbg !2452
  %zext145 = zext i8 %80 to i32, !dbg !2452
  %81 = load i8, ptr %base_used, align 1, !dbg !2453
  %zext146 = zext i8 %81 to i32, !dbg !2453
  %mul147 = mul i32 %zext145, %zext146, !dbg !2452
  %82 = load i8, ptr %c86, align 1, !dbg !2454
  %zext148 = zext i8 %82 to i32, !dbg !2454
  %add149 = add i32 %mul147, %zext148, !dbg !2452
  %trunc150 = trunc i32 %add149 to i8, !dbg !2452
  store i8 %trunc150, ptr %new_value144, align 1, !dbg !2452
  %83 = load i8, ptr %new_value144, align 1, !dbg !2455
  %84 = load i8, ptr %value, align 1, !dbg !2456
  %lt151 = icmp ult i8 %83, %84, !dbg !2455
  br i1 %lt151, label %if.then152, label %if.exit153, !dbg !2455

if.then152:                                       ; preds = %if.exit143
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$INTEGER_OVERFLOW" to i64), ptr %error_var132, align 8, !dbg !2457
  br label %guard_block155, !dbg !2457

if.exit153:                                       ; preds = %if.exit143
  %85 = load i8, ptr %new_value144, align 1, !dbg !2458
  store i8 %85, ptr %blockret133, align 1, !dbg !2458
  br label %expr_block.exit154, !dbg !2458

expr_block.exit154:                               ; preds = %if.exit153, %if.exit142
  br label %noerr_block156, !dbg !2458

guard_block155:                                   ; preds = %if.then152, %if.then141
  %86 = load i64, ptr %error_var132, align 8, !dbg !2458
  store i64 %86, ptr %reterr, align 8, !dbg !2458
  br label %err_retblock, !dbg !2458

noerr_block156:                                   ; preds = %expr_block.exit154
  %87 = load i8, ptr %blockret133, align 1, !dbg !2458
  store i8 %87, ptr %value, align 1, !dbg !2458
  br label %loop.cond84, !dbg !2458

loop.exit157:                                     ; preds = %loop.cond84
  %88 = load i8, ptr %value, align 1, !dbg !2459
  store i8 %88, ptr %blockret, align 1, !dbg !2459
  br label %expr_block.exit158, !dbg !2459

expr_block.exit158:                               ; preds = %loop.exit157, %if.then54
  %89 = load i8, ptr %blockret, align 1, !dbg !2459
  store i8 %89, ptr %0, align 1, !dbg !2459
  ret i64 0, !dbg !2459

err_retblock:                                     ; preds = %guard_block155, %if.then130, %guard_block, %if.then81, %if.then30, %if.then24, %if.then
  %90 = load i64, ptr %reterr, align 8, !dbg !2459
  ret i64 %90, !dbg !2459

panic:                                            ; preds = %if.exit
  store i64 %23, ptr %taddr16, align 8
  %91 = insertvalue %any undef, ptr %taddr16, 0
  %92 = insertvalue %any %91, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %25, ptr %taddr17, align 8
  %93 = insertvalue %any undef, ptr %taddr17, 0
  %94 = insertvalue %any %93, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr18, align 8
  %95 = load [2 x i64], ptr %taddr18, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr19, align 8
  %96 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.func.74, i64 8 }, ptr %taddr20, align 8
  %97 = load [2 x i64], ptr %taddr20, align 8
  store %any %92, ptr %varargslots, align 8
  %ptradd21 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %94, ptr %ptradd21, align 8
  %98 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %98, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr22, align 8
  %99 = load [2 x i64], ptr %taddr22, align 8
  call void @std.core.builtin.panicf([2 x i64] %95, [2 x i64] %96, [2 x i64] %97, i32 750, [2 x i64] %99), !dbg !2368
  unreachable, !dbg !2368

panic34:                                          ; preds = %if.exit31
  store i64 %33, ptr %taddr35, align 8
  %100 = insertvalue %any undef, ptr %taddr35, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr36, align 8
  %102 = insertvalue %any undef, ptr %taddr36, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr37, align 8
  %104 = load [2 x i64], ptr %taddr37, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr38, align 8
  %105 = load [2 x i64], ptr %taddr38, align 8
  store %"char[]" { ptr @.func.74, i64 8 }, ptr %taddr39, align 8
  %106 = load [2 x i64], ptr %taddr39, align 8
  store %any %101, ptr %varargslots40, align 8
  %ptradd41 = getelementptr inbounds i8, ptr %varargslots40, i64 16
  store %any %103, ptr %ptradd41, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots40, 0
  %"$$temp42" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp42", ptr %taddr43, align 8
  %108 = load [2 x i64], ptr %taddr43, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 763, [2 x i64] %108), !dbg !2383
  unreachable, !dbg !2383

panic58:                                          ; preds = %if.exit55
  store i64 %42, ptr %taddr59, align 8
  %109 = insertvalue %any undef, ptr %taddr59, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %44, ptr %taddr60, align 8
  %111 = insertvalue %any undef, ptr %taddr60, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr61, align 8
  %113 = load [2 x i64], ptr %taddr61, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr62, align 8
  %114 = load [2 x i64], ptr %taddr62, align 8
  store %"char[]" { ptr @.func.74, i64 8 }, ptr %taddr63, align 8
  %115 = load [2 x i64], ptr %taddr63, align 8
  store %any %110, ptr %varargslots64, align 8
  %ptradd65 = getelementptr inbounds i8, ptr %varargslots64, i64 16
  store %any %112, ptr %ptradd65, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots64, 0
  %"$$temp66" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp66", ptr %taddr67, align 8
  %117 = load [2 x i64], ptr %taddr67, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 767, [2 x i64] %117), !dbg !2392
  unreachable, !dbg !2392

panic91:                                          ; preds = %loop.body85
  store i64 %55, ptr %taddr92, align 8
  %118 = insertvalue %any undef, ptr %taddr92, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %57, ptr %taddr93, align 8
  %120 = insertvalue %any undef, ptr %taddr93, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr94, align 8
  %122 = load [2 x i64], ptr %taddr94, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr95, align 8
  %123 = load [2 x i64], ptr %taddr95, align 8
  store %"char[]" { ptr @.func.74, i64 8 }, ptr %taddr96, align 8
  %124 = load [2 x i64], ptr %taddr96, align 8
  store %any %119, ptr %varargslots97, align 8
  %ptradd98 = getelementptr inbounds i8, ptr %varargslots97, i64 16
  store %any %121, ptr %ptradd98, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots97, 0
  %"$$temp99" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp99", ptr %taddr100, align 8
  %126 = load [2 x i64], ptr %taddr100, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 790, [2 x i64] %126), !dbg !2421
  unreachable, !dbg !2421
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_double(ptr %0, [2 x i64] %1) #0 !dbg !2460 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca double, align 8
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots14 = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 8
  %taddr32 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 8
  %taddr45 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx55 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %cmp.idx81 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca %"char[]", align 8
  %taddr103 = alloca %"char[]", align 8
  %taddr104 = alloca %"char[]", align 8
  %varargslots105 = alloca [2 x %any], align 8
  %taddr108 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca %"char[]", align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %varargslots122 = alloca [2 x %any], align 8
  %taddr125 = alloca %"any[]", align 8
  %taddr134 = alloca i64, align 8
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr137 = alloca %"char[]", align 8
  %taddr138 = alloca %"char[]", align 8
  %varargslots139 = alloca [2 x %any], align 8
  %taddr142 = alloca %"any[]", align 8
  %chars146 = alloca %"char[]", align 8
  %sign147 = alloca i32, align 4
  %blockret148 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr154 = alloca i64, align 8
  %taddr155 = alloca i64, align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr158 = alloca %"char[]", align 8
  %varargslots159 = alloca [2 x %any], align 8
  %taddr162 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %taddr187 = alloca %"char[]", align 8
  %taddr188 = alloca %"char[]", align 8
  %taddr189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 8
  %taddr193 = alloca %"any[]", align 8
  %taddr208 = alloca i64, align 8
  %taddr209 = alloca i64, align 8
  %taddr210 = alloca %"char[]", align 8
  %taddr211 = alloca %"char[]", align 8
  %taddr212 = alloca %"char[]", align 8
  %varargslots213 = alloca [2 x %any], align 8
  %taddr216 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret247 = alloca i32, align 4
  %switch257 = alloca i8, align 1
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca %"char[]", align 8
  %taddr292 = alloca %"char[]", align 8
  %taddr293 = alloca %"char[]", align 8
  %varargslots294 = alloca [2 x %any], align 8
  %taddr297 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %taddr323 = alloca i64, align 8
  %taddr324 = alloca %"char[]", align 8
  %taddr325 = alloca %"char[]", align 8
  %taddr326 = alloca %"char[]", align 8
  %varargslots327 = alloca [2 x %any], align 8
  %taddr330 = alloca %"any[]", align 8
  %taddr333 = alloca i64, align 8
  %taddr334 = alloca %"char[]", align 8
  %taddr335 = alloca %"char[]", align 8
  %taddr336 = alloca %"char[]", align 8
  %varargslots337 = alloca [1 x %any], align 8
  %taddr339 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %taddr343 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x385 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x389 = alloca double, align 8
  %y390 = alloca double, align 8
  %x415 = alloca double, align 8
  %n417 = alloca i32, align 4
  %chars421 = alloca %"char[]", align 8
  %sign422 = alloca i32, align 4
  %blockret423 = alloca double, align 8
  %taddr426 = alloca %"char[]", align 8
  %taddr427 = alloca %"char[]", align 8
  %taddr428 = alloca %"char[]", align 8
  %x429 = alloca [128 x i32], align 4
  %emax = alloca i32, align 4
  %index430 = alloca i64, align 8
  %got_digit431 = alloca i8, align 1
  %taddr435 = alloca i64, align 8
  %taddr436 = alloca i64, align 8
  %taddr437 = alloca %"char[]", align 8
  %taddr438 = alloca %"char[]", align 8
  %taddr439 = alloca %"char[]", align 8
  %varargslots440 = alloca [2 x %any], align 8
  %taddr443 = alloca %"any[]", align 8
  %got_rad446 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc447 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len448 = alloca i64, align 8
  %last_char450 = alloca i64, align 8
  %taddr454 = alloca %"char[]", align 8
  %taddr455 = alloca %"char[]", align 8
  %taddr456 = alloca %"char[]", align 8
  %c458 = alloca i8, align 1
  %taddr463 = alloca i64, align 8
  %taddr464 = alloca i64, align 8
  %taddr465 = alloca %"char[]", align 8
  %taddr466 = alloca %"char[]", align 8
  %taddr467 = alloca %"char[]", align 8
  %varargslots468 = alloca [2 x %any], align 8
  %taddr471 = alloca %"any[]", align 8
  %taddr499 = alloca i64, align 8
  %taddr500 = alloca i64, align 8
  %taddr501 = alloca %"char[]", align 8
  %taddr502 = alloca %"char[]", align 8
  %taddr503 = alloca %"char[]", align 8
  %varargslots504 = alloca [2 x %any], align 8
  %taddr507 = alloca %"any[]", align 8
  %taddr522 = alloca i64, align 8
  %taddr523 = alloca i64, align 8
  %taddr524 = alloca %"char[]", align 8
  %taddr525 = alloca %"char[]", align 8
  %taddr526 = alloca %"char[]", align 8
  %varargslots527 = alloca [2 x %any], align 8
  %taddr530 = alloca %"any[]", align 8
  %switch550 = alloca i8, align 1
  %taddr570 = alloca i64, align 8
  %taddr571 = alloca %"char[]", align 8
  %taddr572 = alloca %"char[]", align 8
  %taddr573 = alloca %"char[]", align 8
  %varargslots574 = alloca [1 x %any], align 8
  %taddr576 = alloca %"any[]", align 8
  %taddr580 = alloca i64, align 8
  %taddr581 = alloca i64, align 8
  %taddr582 = alloca %"char[]", align 8
  %taddr583 = alloca %"char[]", align 8
  %taddr584 = alloca %"char[]", align 8
  %varargslots585 = alloca [2 x %any], align 8
  %taddr588 = alloca %"any[]", align 8
  %taddr593 = alloca i64, align 8
  %taddr594 = alloca %"char[]", align 8
  %taddr595 = alloca %"char[]", align 8
  %taddr596 = alloca %"char[]", align 8
  %varargslots597 = alloca [1 x %any], align 8
  %taddr599 = alloca %"any[]", align 8
  %taddr603 = alloca i64, align 8
  %taddr604 = alloca i64, align 8
  %taddr605 = alloca %"char[]", align 8
  %taddr606 = alloca %"char[]", align 8
  %taddr607 = alloca %"char[]", align 8
  %varargslots608 = alloca [2 x %any], align 8
  %taddr611 = alloca %"any[]", align 8
  %taddr622 = alloca i64, align 8
  %taddr623 = alloca %"char[]", align 8
  %taddr624 = alloca %"char[]", align 8
  %taddr625 = alloca %"char[]", align 8
  %varargslots626 = alloca [1 x %any], align 8
  %taddr628 = alloca %"any[]", align 8
  %taddr632 = alloca i64, align 8
  %taddr633 = alloca i64, align 8
  %taddr634 = alloca %"char[]", align 8
  %taddr635 = alloca %"char[]", align 8
  %taddr636 = alloca %"char[]", align 8
  %varargslots637 = alloca [2 x %any], align 8
  %taddr640 = alloca %"any[]", align 8
  %taddr664 = alloca %"char[]", align 8
  %taddr665 = alloca %"char[]", align 8
  %taddr666 = alloca %"char[]", align 8
  %taddr672 = alloca i64, align 8
  %taddr673 = alloca i64, align 8
  %taddr674 = alloca %"char[]", align 8
  %taddr675 = alloca %"char[]", align 8
  %taddr676 = alloca %"char[]", align 8
  %varargslots677 = alloca [2 x %any], align 8
  %taddr680 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr702 = alloca i64, align 8
  %taddr703 = alloca i64, align 8
  %taddr704 = alloca %"char[]", align 8
  %taddr705 = alloca %"char[]", align 8
  %taddr706 = alloca %"char[]", align 8
  %varargslots707 = alloca [2 x %any], align 8
  %taddr710 = alloca %"any[]", align 8
  %taddr714 = alloca i64, align 8
  %taddr715 = alloca %"char[]", align 8
  %taddr716 = alloca %"char[]", align 8
  %taddr717 = alloca %"char[]", align 8
  %varargslots718 = alloca [1 x %any], align 8
  %taddr720 = alloca %"any[]", align 8
  %retparam724 = alloca i64, align 8
  %taddr725 = alloca %"char[]", align 8
  %error_var729 = alloca i64, align 8
  %taddr775 = alloca i64, align 8
  %taddr776 = alloca %"char[]", align 8
  %taddr777 = alloca %"char[]", align 8
  %taddr778 = alloca %"char[]", align 8
  %varargslots779 = alloca [1 x %any], align 8
  %taddr781 = alloca %"any[]", align 8
  %taddr785 = alloca i64, align 8
  %taddr786 = alloca i64, align 8
  %taddr787 = alloca %"char[]", align 8
  %taddr788 = alloca %"char[]", align 8
  %taddr789 = alloca %"char[]", align 8
  %varargslots790 = alloca [2 x %any], align 8
  %taddr793 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2801 = alloca i32, align 4
  %rp802 = alloca i64, align 8
  %taddr827 = alloca i64, align 8
  %taddr828 = alloca %"char[]", align 8
  %taddr829 = alloca %"char[]", align 8
  %taddr830 = alloca %"char[]", align 8
  %varargslots831 = alloca [1 x %any], align 8
  %taddr833 = alloca %"any[]", align 8
  %taddr837 = alloca i64, align 8
  %taddr838 = alloca i64, align 8
  %taddr839 = alloca %"char[]", align 8
  %taddr840 = alloca %"char[]", align 8
  %taddr841 = alloca %"char[]", align 8
  %varargslots842 = alloca [2 x %any], align 8
  %taddr845 = alloca %"any[]", align 8
  %taddr850 = alloca %"char[]", align 8
  %taddr851 = alloca %"char[]", align 8
  %taddr852 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr863 = alloca i32, align 4
  %taddr864 = alloca %"char[]", align 8
  %taddr865 = alloca %"char[]", align 8
  %taddr866 = alloca %"char[]", align 8
  %varargslots867 = alloca [1 x %any], align 8
  %taddr869 = alloca %"any[]", align 8
  %taddr882 = alloca i64, align 8
  %taddr883 = alloca %"char[]", align 8
  %taddr884 = alloca %"char[]", align 8
  %taddr885 = alloca %"char[]", align 8
  %varargslots886 = alloca [1 x %any], align 8
  %taddr888 = alloca %"any[]", align 8
  %taddr892 = alloca i64, align 8
  %taddr893 = alloca i64, align 8
  %taddr894 = alloca %"char[]", align 8
  %taddr895 = alloca %"char[]", align 8
  %taddr896 = alloca %"char[]", align 8
  %varargslots897 = alloca [2 x %any], align 8
  %taddr900 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr917 = alloca i64, align 8
  %taddr918 = alloca %"char[]", align 8
  %taddr919 = alloca %"char[]", align 8
  %taddr920 = alloca %"char[]", align 8
  %varargslots921 = alloca [1 x %any], align 8
  %taddr923 = alloca %"any[]", align 8
  %taddr927 = alloca i64, align 8
  %taddr928 = alloca i64, align 8
  %taddr929 = alloca %"char[]", align 8
  %taddr930 = alloca %"char[]", align 8
  %taddr931 = alloca %"char[]", align 8
  %varargslots932 = alloca [2 x %any], align 8
  %taddr935 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr944 = alloca i64, align 8
  %taddr945 = alloca %"char[]", align 8
  %taddr946 = alloca %"char[]", align 8
  %taddr947 = alloca %"char[]", align 8
  %varargslots948 = alloca [1 x %any], align 8
  %taddr950 = alloca %"any[]", align 8
  %taddr954 = alloca i64, align 8
  %taddr955 = alloca i64, align 8
  %taddr956 = alloca %"char[]", align 8
  %taddr957 = alloca %"char[]", align 8
  %taddr958 = alloca %"char[]", align 8
  %varargslots959 = alloca [2 x %any], align 8
  %taddr962 = alloca %"any[]", align 8
  %taddr967 = alloca %"char[]", align 8
  %taddr968 = alloca %"char[]", align 8
  %taddr969 = alloca %"char[]", align 8
  %taddr975 = alloca i64, align 8
  %taddr976 = alloca %"char[]", align 8
  %taddr977 = alloca %"char[]", align 8
  %taddr978 = alloca %"char[]", align 8
  %varargslots979 = alloca [1 x %any], align 8
  %taddr981 = alloca %"any[]", align 8
  %taddr985 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %taddr987 = alloca %"char[]", align 8
  %taddr988 = alloca %"char[]", align 8
  %taddr989 = alloca %"char[]", align 8
  %varargslots990 = alloca [2 x %any], align 8
  %taddr993 = alloca %"any[]", align 8
  %taddr999 = alloca i64, align 8
  %taddr1000 = alloca %"char[]", align 8
  %taddr1001 = alloca %"char[]", align 8
  %taddr1002 = alloca %"char[]", align 8
  %varargslots1003 = alloca [1 x %any], align 8
  %taddr1005 = alloca %"any[]", align 8
  %taddr1009 = alloca i64, align 8
  %taddr1010 = alloca i64, align 8
  %taddr1011 = alloca %"char[]", align 8
  %taddr1012 = alloca %"char[]", align 8
  %taddr1013 = alloca %"char[]", align 8
  %varargslots1014 = alloca [2 x %any], align 8
  %taddr1017 = alloca %"any[]", align 8
  %taddr1022 = alloca %"char[]", align 8
  %taddr1023 = alloca %"char[]", align 8
  %taddr1024 = alloca %"char[]", align 8
  %taddr1029 = alloca %"char[]", align 8
  %taddr1030 = alloca %"char[]", align 8
  %taddr1031 = alloca %"char[]", align 8
  %taddr1040 = alloca i64, align 8
  %taddr1041 = alloca %"char[]", align 8
  %taddr1042 = alloca %"char[]", align 8
  %taddr1043 = alloca %"char[]", align 8
  %varargslots1044 = alloca [1 x %any], align 8
  %taddr1046 = alloca %"any[]", align 8
  %taddr1050 = alloca i64, align 8
  %taddr1051 = alloca i64, align 8
  %taddr1052 = alloca %"char[]", align 8
  %taddr1053 = alloca %"char[]", align 8
  %taddr1054 = alloca %"char[]", align 8
  %varargslots1055 = alloca [2 x %any], align 8
  %taddr1058 = alloca %"any[]", align 8
  %taddr1077 = alloca i64, align 8
  %taddr1078 = alloca %"char[]", align 8
  %taddr1079 = alloca %"char[]", align 8
  %taddr1080 = alloca %"char[]", align 8
  %varargslots1081 = alloca [1 x %any], align 8
  %taddr1083 = alloca %"any[]", align 8
  %taddr1087 = alloca i64, align 8
  %taddr1088 = alloca i64, align 8
  %taddr1089 = alloca %"char[]", align 8
  %taddr1090 = alloca %"char[]", align 8
  %taddr1091 = alloca %"char[]", align 8
  %varargslots1092 = alloca [2 x %any], align 8
  %taddr1095 = alloca %"any[]", align 8
  %taddr1110 = alloca i64, align 8
  %taddr1111 = alloca %"char[]", align 8
  %taddr1112 = alloca %"char[]", align 8
  %taddr1113 = alloca %"char[]", align 8
  %varargslots1114 = alloca [1 x %any], align 8
  %taddr1116 = alloca %"any[]", align 8
  %taddr1120 = alloca i64, align 8
  %taddr1121 = alloca i64, align 8
  %taddr1122 = alloca %"char[]", align 8
  %taddr1123 = alloca %"char[]", align 8
  %taddr1124 = alloca %"char[]", align 8
  %varargslots1125 = alloca [2 x %any], align 8
  %taddr1128 = alloca %"any[]", align 8
  %carry1137 = alloca i32, align 4
  %tmp1142 = alloca i64, align 8
  %taddr1146 = alloca i64, align 8
  %taddr1147 = alloca %"char[]", align 8
  %taddr1148 = alloca %"char[]", align 8
  %taddr1149 = alloca %"char[]", align 8
  %varargslots1150 = alloca [1 x %any], align 8
  %taddr1152 = alloca %"any[]", align 8
  %taddr1156 = alloca i64, align 8
  %taddr1157 = alloca i64, align 8
  %taddr1158 = alloca %"char[]", align 8
  %taddr1159 = alloca %"char[]", align 8
  %taddr1160 = alloca %"char[]", align 8
  %varargslots1161 = alloca [2 x %any], align 8
  %taddr1164 = alloca %"any[]", align 8
  %taddr1177 = alloca i64, align 8
  %taddr1178 = alloca %"char[]", align 8
  %taddr1179 = alloca %"char[]", align 8
  %taddr1180 = alloca %"char[]", align 8
  %varargslots1181 = alloca [1 x %any], align 8
  %taddr1183 = alloca %"any[]", align 8
  %taddr1187 = alloca i64, align 8
  %taddr1188 = alloca i64, align 8
  %taddr1189 = alloca %"char[]", align 8
  %taddr1190 = alloca %"char[]", align 8
  %taddr1191 = alloca %"char[]", align 8
  %varargslots1192 = alloca [2 x %any], align 8
  %taddr1195 = alloca %"any[]", align 8
  %taddr1204 = alloca i64, align 8
  %taddr1205 = alloca %"char[]", align 8
  %taddr1206 = alloca %"char[]", align 8
  %taddr1207 = alloca %"char[]", align 8
  %varargslots1208 = alloca [1 x %any], align 8
  %taddr1210 = alloca %"any[]", align 8
  %taddr1214 = alloca i64, align 8
  %taddr1215 = alloca i64, align 8
  %taddr1216 = alloca %"char[]", align 8
  %taddr1217 = alloca %"char[]", align 8
  %taddr1218 = alloca %"char[]", align 8
  %varargslots1219 = alloca [2 x %any], align 8
  %taddr1222 = alloca %"any[]", align 8
  %taddr1238 = alloca i64, align 8
  %taddr1239 = alloca %"char[]", align 8
  %taddr1240 = alloca %"char[]", align 8
  %taddr1241 = alloca %"char[]", align 8
  %varargslots1242 = alloca [1 x %any], align 8
  %taddr1244 = alloca %"any[]", align 8
  %taddr1248 = alloca i64, align 8
  %taddr1249 = alloca i64, align 8
  %taddr1250 = alloca %"char[]", align 8
  %taddr1251 = alloca %"char[]", align 8
  %taddr1252 = alloca %"char[]", align 8
  %varargslots1253 = alloca [2 x %any], align 8
  %taddr1256 = alloca %"any[]", align 8
  %taddr1284 = alloca i64, align 8
  %taddr1285 = alloca %"char[]", align 8
  %taddr1286 = alloca %"char[]", align 8
  %taddr1287 = alloca %"char[]", align 8
  %varargslots1288 = alloca [1 x %any], align 8
  %taddr1290 = alloca %"any[]", align 8
  %taddr1294 = alloca i64, align 8
  %taddr1295 = alloca i64, align 8
  %taddr1296 = alloca %"char[]", align 8
  %taddr1297 = alloca %"char[]", align 8
  %taddr1298 = alloca %"char[]", align 8
  %varargslots1299 = alloca [2 x %any], align 8
  %taddr1302 = alloca %"any[]", align 8
  %taddr1308 = alloca i64, align 8
  %taddr1309 = alloca %"char[]", align 8
  %taddr1310 = alloca %"char[]", align 8
  %taddr1311 = alloca %"char[]", align 8
  %varargslots1312 = alloca [1 x %any], align 8
  %taddr1314 = alloca %"any[]", align 8
  %taddr1318 = alloca i64, align 8
  %taddr1319 = alloca i64, align 8
  %taddr1320 = alloca %"char[]", align 8
  %taddr1321 = alloca %"char[]", align 8
  %taddr1322 = alloca %"char[]", align 8
  %varargslots1323 = alloca [2 x %any], align 8
  %taddr1326 = alloca %"any[]", align 8
  %taddr1334 = alloca i64, align 8
  %taddr1335 = alloca %"char[]", align 8
  %taddr1336 = alloca %"char[]", align 8
  %taddr1337 = alloca %"char[]", align 8
  %varargslots1338 = alloca [1 x %any], align 8
  %taddr1340 = alloca %"any[]", align 8
  %taddr1344 = alloca i64, align 8
  %taddr1345 = alloca i64, align 8
  %taddr1346 = alloca %"char[]", align 8
  %taddr1347 = alloca %"char[]", align 8
  %taddr1348 = alloca %"char[]", align 8
  %varargslots1349 = alloca [2 x %any], align 8
  %taddr1352 = alloca %"any[]", align 8
  %carry1358 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1369 = alloca i64, align 8
  %taddr1370 = alloca %"char[]", align 8
  %taddr1371 = alloca %"char[]", align 8
  %taddr1372 = alloca %"char[]", align 8
  %varargslots1373 = alloca [1 x %any], align 8
  %taddr1375 = alloca %"any[]", align 8
  %taddr1379 = alloca i64, align 8
  %taddr1380 = alloca i64, align 8
  %taddr1381 = alloca %"char[]", align 8
  %taddr1382 = alloca %"char[]", align 8
  %taddr1383 = alloca %"char[]", align 8
  %varargslots1384 = alloca [2 x %any], align 8
  %taddr1387 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %taddr1394 = alloca %"char[]", align 8
  %taddr1395 = alloca %"char[]", align 8
  %taddr1396 = alloca %"char[]", align 8
  %varargslots1397 = alloca [1 x %any], align 8
  %taddr1399 = alloca %"any[]", align 8
  %taddr1403 = alloca i64, align 8
  %taddr1404 = alloca i64, align 8
  %taddr1405 = alloca %"char[]", align 8
  %taddr1406 = alloca %"char[]", align 8
  %taddr1407 = alloca %"char[]", align 8
  %varargslots1408 = alloca [2 x %any], align 8
  %taddr1411 = alloca %"any[]", align 8
  %taddr1424 = alloca i64, align 8
  %taddr1425 = alloca %"char[]", align 8
  %taddr1426 = alloca %"char[]", align 8
  %taddr1427 = alloca %"char[]", align 8
  %varargslots1428 = alloca [1 x %any], align 8
  %taddr1430 = alloca %"any[]", align 8
  %taddr1434 = alloca i64, align 8
  %taddr1435 = alloca i64, align 8
  %taddr1436 = alloca %"char[]", align 8
  %taddr1437 = alloca %"char[]", align 8
  %taddr1438 = alloca %"char[]", align 8
  %varargslots1439 = alloca [2 x %any], align 8
  %taddr1442 = alloca %"any[]", align 8
  %taddr1448 = alloca i64, align 8
  %taddr1449 = alloca %"char[]", align 8
  %taddr1450 = alloca %"char[]", align 8
  %taddr1451 = alloca %"char[]", align 8
  %varargslots1452 = alloca [1 x %any], align 8
  %taddr1454 = alloca %"any[]", align 8
  %taddr1458 = alloca i64, align 8
  %taddr1459 = alloca i64, align 8
  %taddr1460 = alloca %"char[]", align 8
  %taddr1461 = alloca %"char[]", align 8
  %taddr1462 = alloca %"char[]", align 8
  %varargslots1463 = alloca [2 x %any], align 8
  %taddr1466 = alloca %"any[]", align 8
  %tmp1488 = alloca i32, align 4
  %taddr1492 = alloca i64, align 8
  %taddr1493 = alloca %"char[]", align 8
  %taddr1494 = alloca %"char[]", align 8
  %taddr1495 = alloca %"char[]", align 8
  %varargslots1496 = alloca [1 x %any], align 8
  %taddr1498 = alloca %"any[]", align 8
  %taddr1502 = alloca i64, align 8
  %taddr1503 = alloca i64, align 8
  %taddr1504 = alloca %"char[]", align 8
  %taddr1505 = alloca %"char[]", align 8
  %taddr1506 = alloca %"char[]", align 8
  %varargslots1507 = alloca [2 x %any], align 8
  %taddr1510 = alloca %"any[]", align 8
  %taddr1514 = alloca i32, align 4
  %taddr1515 = alloca %"char[]", align 8
  %taddr1516 = alloca %"char[]", align 8
  %taddr1517 = alloca %"char[]", align 8
  %varargslots1518 = alloca [1 x %any], align 8
  %taddr1520 = alloca %"any[]", align 8
  %taddr1524 = alloca i32, align 4
  %taddr1525 = alloca %"char[]", align 8
  %taddr1526 = alloca %"char[]", align 8
  %taddr1527 = alloca %"char[]", align 8
  %varargslots1528 = alloca [1 x %any], align 8
  %taddr1530 = alloca %"any[]", align 8
  %taddr1538 = alloca i64, align 8
  %taddr1539 = alloca %"char[]", align 8
  %taddr1540 = alloca %"char[]", align 8
  %taddr1541 = alloca %"char[]", align 8
  %varargslots1542 = alloca [1 x %any], align 8
  %taddr1544 = alloca %"any[]", align 8
  %taddr1548 = alloca i64, align 8
  %taddr1549 = alloca i64, align 8
  %taddr1550 = alloca %"char[]", align 8
  %taddr1551 = alloca %"char[]", align 8
  %taddr1552 = alloca %"char[]", align 8
  %varargslots1553 = alloca [2 x %any], align 8
  %taddr1556 = alloca %"any[]", align 8
  %taddr1562 = alloca i64, align 8
  %taddr1563 = alloca %"char[]", align 8
  %taddr1564 = alloca %"char[]", align 8
  %taddr1565 = alloca %"char[]", align 8
  %varargslots1566 = alloca [1 x %any], align 8
  %taddr1568 = alloca %"any[]", align 8
  %taddr1572 = alloca i64, align 8
  %taddr1573 = alloca i64, align 8
  %taddr1574 = alloca %"char[]", align 8
  %taddr1575 = alloca %"char[]", align 8
  %taddr1576 = alloca %"char[]", align 8
  %varargslots1577 = alloca [2 x %any], align 8
  %taddr1580 = alloca %"any[]", align 8
  %taddr1585 = alloca i32, align 4
  %taddr1586 = alloca %"char[]", align 8
  %taddr1587 = alloca %"char[]", align 8
  %taddr1588 = alloca %"char[]", align 8
  %varargslots1589 = alloca [1 x %any], align 8
  %taddr1591 = alloca %"any[]", align 8
  %taddr1597 = alloca i32, align 4
  %taddr1598 = alloca %"char[]", align 8
  %taddr1599 = alloca %"char[]", align 8
  %taddr1600 = alloca %"char[]", align 8
  %varargslots1601 = alloca [1 x %any], align 8
  %taddr1603 = alloca %"any[]", align 8
  %taddr1607 = alloca i32, align 4
  %taddr1608 = alloca %"char[]", align 8
  %taddr1609 = alloca %"char[]", align 8
  %taddr1610 = alloca %"char[]", align 8
  %varargslots1611 = alloca [1 x %any], align 8
  %taddr1613 = alloca %"any[]", align 8
  %taddr1621 = alloca i64, align 8
  %taddr1622 = alloca %"char[]", align 8
  %taddr1623 = alloca %"char[]", align 8
  %taddr1624 = alloca %"char[]", align 8
  %varargslots1625 = alloca [1 x %any], align 8
  %taddr1627 = alloca %"any[]", align 8
  %taddr1631 = alloca i64, align 8
  %taddr1632 = alloca i64, align 8
  %taddr1633 = alloca %"char[]", align 8
  %taddr1634 = alloca %"char[]", align 8
  %taddr1635 = alloca %"char[]", align 8
  %varargslots1636 = alloca [2 x %any], align 8
  %taddr1639 = alloca %"any[]", align 8
  %taddr1663 = alloca i64, align 8
  %taddr1664 = alloca %"char[]", align 8
  %taddr1665 = alloca %"char[]", align 8
  %taddr1666 = alloca %"char[]", align 8
  %varargslots1667 = alloca [1 x %any], align 8
  %taddr1669 = alloca %"any[]", align 8
  %taddr1673 = alloca i64, align 8
  %taddr1674 = alloca i64, align 8
  %taddr1675 = alloca %"char[]", align 8
  %taddr1676 = alloca %"char[]", align 8
  %taddr1677 = alloca %"char[]", align 8
  %varargslots1678 = alloca [2 x %any], align 8
  %taddr1681 = alloca %"any[]", align 8
  %taddr1692 = alloca i64, align 8
  %taddr1693 = alloca %"char[]", align 8
  %taddr1694 = alloca %"char[]", align 8
  %taddr1695 = alloca %"char[]", align 8
  %varargslots1696 = alloca [1 x %any], align 8
  %taddr1698 = alloca %"any[]", align 8
  %taddr1702 = alloca i64, align 8
  %taddr1703 = alloca i64, align 8
  %taddr1704 = alloca %"char[]", align 8
  %taddr1705 = alloca %"char[]", align 8
  %taddr1706 = alloca %"char[]", align 8
  %varargslots1707 = alloca [2 x %any], align 8
  %taddr1710 = alloca %"any[]", align 8
  %y1717 = alloca double, align 8
  %i1718 = alloca i32, align 4
  %taddr1732 = alloca i64, align 8
  %taddr1733 = alloca %"char[]", align 8
  %taddr1734 = alloca %"char[]", align 8
  %taddr1735 = alloca %"char[]", align 8
  %varargslots1736 = alloca [1 x %any], align 8
  %taddr1738 = alloca %"any[]", align 8
  %taddr1742 = alloca i64, align 8
  %taddr1743 = alloca i64, align 8
  %taddr1744 = alloca %"char[]", align 8
  %taddr1745 = alloca %"char[]", align 8
  %taddr1746 = alloca %"char[]", align 8
  %varargslots1747 = alloca [2 x %any], align 8
  %taddr1750 = alloca %"any[]", align 8
  %taddr1760 = alloca i64, align 8
  %taddr1761 = alloca %"char[]", align 8
  %taddr1762 = alloca %"char[]", align 8
  %taddr1763 = alloca %"char[]", align 8
  %varargslots1764 = alloca [1 x %any], align 8
  %taddr1766 = alloca %"any[]", align 8
  %taddr1770 = alloca i64, align 8
  %taddr1771 = alloca i64, align 8
  %taddr1772 = alloca %"char[]", align 8
  %taddr1773 = alloca %"char[]", align 8
  %taddr1774 = alloca %"char[]", align 8
  %varargslots1775 = alloca [2 x %any], align 8
  %taddr1778 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1787 = alloca i32, align 4
  %bias1800 = alloca double, align 8
  %frac = alloca double, align 8
  %x1803 = alloca double, align 8
  %n1806 = alloca i32, align 4
  %mag1807 = alloca double, align 8
  %sgn1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %y1810 = alloca double, align 8
  %x1811 = alloca double, align 8
  %n1813 = alloca i32, align 4
  %taddr1816 = alloca %"char[]", align 8
  %taddr1817 = alloca %"char[]", align 8
  %taddr1818 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1832 = alloca i64, align 8
  %taddr1833 = alloca %"char[]", align 8
  %taddr1834 = alloca %"char[]", align 8
  %taddr1835 = alloca %"char[]", align 8
  %varargslots1836 = alloca [1 x %any], align 8
  %taddr1838 = alloca %"any[]", align 8
  %taddr1842 = alloca i64, align 8
  %taddr1843 = alloca i64, align 8
  %taddr1844 = alloca %"char[]", align 8
  %taddr1845 = alloca %"char[]", align 8
  %taddr1846 = alloca %"char[]", align 8
  %varargslots1847 = alloca [2 x %any], align 8
  %taddr1850 = alloca %"any[]", align 8
  %switch1853 = alloca i8, align 1
  %x1916 = alloca double, align 8
  %x1944 = alloca double, align 8
  %n1945 = alloca i32, align 4
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !2465, metadata !DIExpression()), !dbg !2466
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !2467, metadata !DIExpression()), !dbg !2469
  store i32 1, ptr %sign, align 4, !dbg !2471
  br label %loop.cond, !dbg !2472

loop.cond:                                        ; preds = %checkok18, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2473
  %2 = load i64, ptr %ptradd, align 8, !dbg !2473
  %i2b = icmp ne i64 %2, 0, !dbg !2473
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !2473

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2475
  %3 = load i64, ptr %ptradd1, align 8, !dbg !2475
  %4 = load ptr, ptr %chars, align 8, !dbg !2475
  %ge = icmp sge i64 0, %3, !dbg !2476
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !2476
  br i1 %5, label %panic, label %checkok, !dbg !2476

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !2476
  %eq = icmp eq i8 %6, 32, !dbg !2475
  br label %and.phi, !dbg !2475

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !2475
  br i1 %val, label %loop.body, label %loop.exit, !dbg !2475

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !2477
  %8 = extractvalue %"char[]" %7, 0, !dbg !2477
  %9 = extractvalue %"char[]" %7, 1, !dbg !2478
  %gt = icmp sgt i64 1, %9, !dbg !2478
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !2478
  br i1 %10, label %panic8, label %checkok18, !dbg !2478

checkok18:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !2477
  %ptradd19 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !2477
  %11 = insertvalue %"char[]" undef, ptr %ptradd19, 0, !dbg !2477
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !2477
  store %"char[]" %12, ptr %chars, align 8, !dbg !2477
  br label %loop.cond, !dbg !2477

loop.exit:                                        ; preds = %and.phi
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2479
  %13 = load i64, ptr %ptradd20, align 8, !dbg !2479
  %i2nb = icmp eq i64 %13, 0, !dbg !2479
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !2479

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2480
  br label %err_retblock, !dbg !2480

if.exit:                                          ; preds = %loop.exit
  %ptradd21 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2481
  %14 = load i64, ptr %ptradd21, align 8, !dbg !2481
  %15 = load ptr, ptr %chars, align 8, !dbg !2481
  %ge22 = icmp sge i64 0, %14, !dbg !2483
  %16 = call i1 @llvm.expect.i1(i1 %ge22, i1 false), !dbg !2483
  br i1 %16, label %panic23, label %checkok33, !dbg !2483

checkok33:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok33
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case34
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !2484
  br label %switch.case34, !dbg !2486

switch.case34:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !2487
  %20 = extractvalue %"char[]" %19, 0, !dbg !2487
  %21 = extractvalue %"char[]" %19, 1, !dbg !2489
  %gt35 = icmp sgt i64 1, %21, !dbg !2489
  %22 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !2489
  br i1 %22, label %panic36, label %checkok46, !dbg !2489

checkok46:                                        ; preds = %switch.case34
  %size47 = sub i64 %21, 1, !dbg !2487
  %ptradd48 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !2487
  %23 = insertvalue %"char[]" undef, ptr %ptradd48, 0, !dbg !2487
  %24 = insertvalue %"char[]" %23, i64 %size47, 1, !dbg !2487
  store %"char[]" %24, ptr %chars, align 8, !dbg !2487
  br label %switch.exit, !dbg !2487

switch.exit:                                      ; preds = %checkok46, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !2490
  %26 = extractvalue %"char[]" %25, 1, !dbg !2490
  %27 = extractvalue %"char[]" %25, 0, !dbg !2490
  %eq49 = icmp eq i64 %26, 8, !dbg !2490
  br i1 %eq49, label %slice_cmp_values, label %slice_cmp_exit, !dbg !2490

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd50 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd51 = getelementptr inbounds i8, ptr @.str, i64 %28
  %29 = load i8, ptr %ptradd50, align 1
  %30 = load i8, ptr %ptradd51, align 1
  %eq52 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq52, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !2491
  %33 = extractvalue %"char[]" %32, 1, !dbg !2491
  %34 = extractvalue %"char[]" %32, 0, !dbg !2491
  %eq53 = icmp eq i64 %33, 8, !dbg !2491
  br i1 %eq53, label %slice_cmp_values54, label %slice_cmp_exit62, !dbg !2491

slice_cmp_values54:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx55, align 8
  br label %slice_loop_start56

slice_loop_start56:                               ; preds = %slice_loop_comparison58, %slice_cmp_values54
  %35 = load i64, ptr %cmp.idx55, align 8
  %lt57 = icmp slt i64 %35, %33
  br i1 %lt57, label %slice_loop_comparison58, label %slice_cmp_exit62

slice_loop_comparison58:                          ; preds = %slice_loop_start56
  %ptradd59 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd60 = getelementptr inbounds i8, ptr @.str.77, i64 %35
  %36 = load i8, ptr %ptradd59, align 1
  %37 = load i8, ptr %ptradd60, align 1
  %eq61 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx55, align 8
  br i1 %eq61, label %slice_loop_start56, label %slice_cmp_exit62

slice_cmp_exit62:                                 ; preds = %slice_loop_comparison58, %slice_loop_start56, %or.rhs
  %slice_cmp_phi63 = phi i1 [ true, %slice_loop_start56 ], [ false, %or.rhs ], [ false, %slice_loop_comparison58 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit62, %slice_cmp_exit
  %val64 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi63, %slice_cmp_exit62 ]
  br i1 %val64, label %if.then65, label %if.exit66

if.then65:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !2492
  %sifp = sitofp i32 %39 to double, !dbg !2492
  %fmul = fmul double %sifp, 0x7FF0000000000000, !dbg !2492
  store double %fmul, ptr %blockret, align 8, !dbg !2492
  br label %expr_block.exit1948, !dbg !2492

if.exit66:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !2493
  %41 = extractvalue %"char[]" %40, 1, !dbg !2493
  %42 = extractvalue %"char[]" %40, 0, !dbg !2493
  %eq67 = icmp eq i64 %41, 3, !dbg !2493
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !2493

slice_cmp_values68:                               ; preds = %if.exit66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %43 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %43, %41
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd74 = getelementptr inbounds i8, ptr @.str.78, i64 %43
  %44 = load i8, ptr %ptradd73, align 1
  %45 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %if.exit66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %if.exit66 ], [ false, %slice_loop_comparison72 ]
  br i1 %slice_cmp_phi77, label %or.phi90, label %or.rhs78

or.rhs78:                                         ; preds = %slice_cmp_exit76
  %47 = load %"char[]", ptr %chars, align 8, !dbg !2494
  %48 = extractvalue %"char[]" %47, 1, !dbg !2494
  %49 = extractvalue %"char[]" %47, 0, !dbg !2494
  %eq79 = icmp eq i64 %48, 3, !dbg !2494
  br i1 %eq79, label %slice_cmp_values80, label %slice_cmp_exit88, !dbg !2494

slice_cmp_values80:                               ; preds = %or.rhs78
  store i64 0, ptr %cmp.idx81, align 8
  br label %slice_loop_start82

slice_loop_start82:                               ; preds = %slice_loop_comparison84, %slice_cmp_values80
  %50 = load i64, ptr %cmp.idx81, align 8
  %lt83 = icmp slt i64 %50, %48
  br i1 %lt83, label %slice_loop_comparison84, label %slice_cmp_exit88

slice_loop_comparison84:                          ; preds = %slice_loop_start82
  %ptradd85 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd86 = getelementptr inbounds i8, ptr @.str.79, i64 %50
  %51 = load i8, ptr %ptradd85, align 1
  %52 = load i8, ptr %ptradd86, align 1
  %eq87 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx81, align 8
  br i1 %eq87, label %slice_loop_start82, label %slice_cmp_exit88

slice_cmp_exit88:                                 ; preds = %slice_loop_comparison84, %slice_loop_start82, %or.rhs78
  %slice_cmp_phi89 = phi i1 [ true, %slice_loop_start82 ], [ false, %or.rhs78 ], [ false, %slice_loop_comparison84 ]
  br label %or.phi90

or.phi90:                                         ; preds = %slice_cmp_exit88, %slice_cmp_exit76
  %val91 = phi i1 [ true, %slice_cmp_exit76 ], [ %slice_cmp_phi89, %slice_cmp_exit88 ]
  br i1 %val91, label %if.then92, label %if.exit93

if.then92:                                        ; preds = %or.phi90
  store double 0x7FF8000000000000, ptr %blockret, align 8, !dbg !2495
  br label %expr_block.exit1948, !dbg !2495

if.exit93:                                        ; preds = %or.phi90
  %ptradd94 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2496
  %54 = load i64, ptr %ptradd94, align 8, !dbg !2496
  %lt95 = icmp ult i64 2, %54, !dbg !2496
  br i1 %lt95, label %and.rhs96, label %and.phi111, !dbg !2496

and.rhs96:                                        ; preds = %if.exit93
  %ptradd97 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2497
  %55 = load i64, ptr %ptradd97, align 8, !dbg !2497
  %56 = load ptr, ptr %chars, align 8, !dbg !2497
  %ge98 = icmp sge i64 0, %55, !dbg !2498
  %57 = call i1 @llvm.expect.i1(i1 %ge98, i1 false), !dbg !2498
  br i1 %57, label %panic99, label %checkok109, !dbg !2498

checkok109:                                       ; preds = %and.rhs96
  %58 = load i8, ptr %56, align 1, !dbg !2498
  %eq110 = icmp eq i8 %58, 48, !dbg !2497
  br label %and.phi111, !dbg !2497

and.phi111:                                       ; preds = %checkok109, %if.exit93
  %val112 = phi i1 [ false, %if.exit93 ], [ %eq110, %checkok109 ], !dbg !2497
  br i1 %val112, label %and.rhs113, label %and.phi129, !dbg !2497

and.rhs113:                                       ; preds = %and.phi111
  %ptradd114 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !2499
  %59 = load i64, ptr %ptradd114, align 8, !dbg !2499
  %60 = load ptr, ptr %chars, align 8, !dbg !2499
  %ge115 = icmp sge i64 1, %59, !dbg !2500
  %61 = call i1 @llvm.expect.i1(i1 %ge115, i1 false), !dbg !2500
  br i1 %61, label %panic116, label %checkok126, !dbg !2500

checkok126:                                       ; preds = %and.rhs113
  %ptradd127 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !2500
  %62 = load i8, ptr %ptradd127, align 1, !dbg !2500
  %zext = zext i8 %62 to i32, !dbg !2500
  %or = or i32 %zext, 32, !dbg !2499
  %eq128 = icmp eq i32 %or, 120, !dbg !2499
  %check = icmp sge i32 %or, 0, !dbg !2499
  %siui-eq = and i1 %check, %eq128, !dbg !2499
  br label %and.phi129, !dbg !2499

and.phi129:                                       ; preds = %checkok126, %and.phi111
  %val130 = phi i1 [ false, %and.phi111 ], [ %siui-eq, %checkok126 ], !dbg !2499
  br i1 %val130, label %if.then131, label %if.exit420, !dbg !2499

if.then131:                                       ; preds = %and.phi129
  %63 = load %"char[]", ptr %chars, align 8, !dbg !2501
  %64 = extractvalue %"char[]" %63, 0, !dbg !2501
  %65 = extractvalue %"char[]" %63, 1, !dbg !2503
  %gt132 = icmp sgt i64 2, %65, !dbg !2503
  %66 = call i1 @llvm.expect.i1(i1 %gt132, i1 false), !dbg !2503
  br i1 %66, label %panic133, label %checkok143, !dbg !2503

checkok143:                                       ; preds = %if.then131
  %size144 = sub i64 %65, 2, !dbg !2504
  %ptradd145 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !2504
  %67 = insertvalue %"char[]" undef, ptr %ptradd145, 0, !dbg !2504
  %68 = insertvalue %"char[]" %67, i64 %size144, 1, !dbg !2504
  store %"char[]" %68, ptr %chars146, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign147, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !2505, metadata !DIExpression()), !dbg !2507
  store double 1.000000e+00, ptr %scale, align 8, !dbg !2509
  call void @llvm.dbg.declare(metadata ptr %x, metadata !2510, metadata !DIExpression()), !dbg !2511
  store i32 0, ptr %x, align 4, !dbg !2511
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !2512, metadata !DIExpression()), !dbg !2513
  store i64 0, ptr %rp, align 8, !dbg !2513
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !2514, metadata !DIExpression()), !dbg !2515
  store i64 0, ptr %dc, align 8, !dbg !2515
  call void @llvm.dbg.declare(metadata ptr %c, metadata !2516, metadata !DIExpression()), !dbg !2517
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !2518, metadata !DIExpression()), !dbg !2519
  store i8 0, ptr %got_rad, align 1, !dbg !2519
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !2520, metadata !DIExpression()), !dbg !2521
  store i8 0, ptr %got_digit, align 1, !dbg !2521
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !2522, metadata !DIExpression()), !dbg !2523
  store i8 0, ptr %got_tail, align 1, !dbg !2523
  call void @llvm.dbg.declare(metadata ptr %len, metadata !2524, metadata !DIExpression()), !dbg !2525
  %ptradd149 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !2526
  %70 = load i64, ptr %ptradd149, align 8, !dbg !2526
  store i64 %70, ptr %len, align 8, !dbg !2526
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !2527, metadata !DIExpression()), !dbg !2528
  %71 = load i64, ptr %len, align 8, !dbg !2529
  %sub = sub i64 %71, 1, !dbg !2529
  store i64 %sub, ptr %last_char, align 8, !dbg !2529
  call void @llvm.dbg.declare(metadata ptr %index, metadata !2530, metadata !DIExpression()), !dbg !2531
  store i64 0, ptr %index, align 8, !dbg !2531
  call void @llvm.dbg.declare(metadata ptr %y, metadata !2532, metadata !DIExpression()), !dbg !2533
  store double 0.000000e+00, ptr %y, align 8, !dbg !2533
  br label %loop.cond150, !dbg !2534

loop.cond150:                                     ; preds = %if.exit169, %checkok143
  %ptradd151 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !2535
  %72 = load i64, ptr %ptradd151, align 8, !dbg !2535
  %73 = load ptr, ptr %chars146, align 8, !dbg !2535
  %74 = load i64, ptr %index, align 8, !dbg !2537
  %ge152 = icmp uge i64 %74, %72, !dbg !2537
  %75 = call i1 @llvm.expect.i1(i1 %ge152, i1 false), !dbg !2537
  br i1 %75, label %panic153, label %checkok163, !dbg !2537

checkok163:                                       ; preds = %loop.cond150
  %ptradd164 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !2537
  %76 = load i8, ptr %ptradd164, align 1, !dbg !2537
  store i8 %76, ptr %c, align 1, !dbg !2537
  %eq165 = icmp eq i8 %76, 48, !dbg !2538
  br i1 %eq165, label %loop.body166, label %loop.exit170, !dbg !2538

loop.body166:                                     ; preds = %checkok163
  %77 = load i64, ptr %index, align 8, !dbg !2539
  %78 = load i64, ptr %last_char, align 8, !dbg !2541
  %eq167 = icmp eq i64 %77, %78, !dbg !2539
  br i1 %eq167, label %if.then168, label %if.exit169, !dbg !2539

if.then168:                                       ; preds = %loop.body166
  store double 0.000000e+00, ptr %blockret148, align 8, !dbg !2542
  br label %expr_block.exit419, !dbg !2542

if.exit169:                                       ; preds = %loop.body166
  %79 = load i64, ptr %index, align 8, !dbg !2543
  %add = add i64 %79, 1, !dbg !2543
  store i64 %add, ptr %index, align 8, !dbg !2543
  br label %loop.cond150, !dbg !2543

loop.exit170:                                     ; preds = %checkok163
  %80 = load i8, ptr %c, align 1, !dbg !2544
  %eq171 = icmp eq i8 %80, 46, !dbg !2544
  br i1 %eq171, label %if.then172, label %if.exit226, !dbg !2544

if.then172:                                       ; preds = %loop.exit170
  store i8 1, ptr %got_rad, align 1, !dbg !2545
  %81 = load i64, ptr %index, align 8, !dbg !2547
  %82 = load i64, ptr %last_char, align 8, !dbg !2548
  %eq173 = icmp eq i64 %81, %82, !dbg !2547
  br i1 %eq173, label %if.then174, label %if.exit179, !dbg !2547

if.then174:                                       ; preds = %if.then172
  %83 = load i8, ptr %got_digit, align 1, !dbg !2549
  %84 = trunc i8 %83 to i1, !dbg !2549
  %not = xor i1 %84, true, !dbg !2549
  br i1 %not, label %if.then175, label %if.exit176, !dbg !2549

if.then175:                                       ; preds = %if.then174
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2551
  br label %err_retblock, !dbg !2551

if.exit176:                                       ; preds = %if.then174
  %85 = load i32, ptr %sign147, align 4, !dbg !2552
  %sifp177 = sitofp i32 %85 to double, !dbg !2552
  %fmul178 = fmul double %sifp177, 0.000000e+00, !dbg !2552
  store double %fmul178, ptr %blockret148, align 8, !dbg !2552
  br label %expr_block.exit419, !dbg !2552

if.exit179:                                       ; preds = %if.then172
  %86 = load i64, ptr %index, align 8, !dbg !2553
  %87 = load i64, ptr %last_char, align 8, !dbg !2554
  %neq = icmp ne i64 %86, %87, !dbg !2553
  br i1 %neq, label %and.rhs180, label %and.phi197, !dbg !2553

and.rhs180:                                       ; preds = %if.exit179
  %ptradd181 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !2555
  %88 = load i64, ptr %ptradd181, align 8, !dbg !2555
  %89 = load ptr, ptr %chars146, align 8, !dbg !2555
  %90 = load i64, ptr %index, align 8, !dbg !2556
  %add182 = add i64 %90, 1, !dbg !2556
  store i64 %add182, ptr %index, align 8, !dbg !2556
  %ge183 = icmp uge i64 %add182, %88, !dbg !2556
  %91 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !2556
  br i1 %91, label %panic184, label %checkok194, !dbg !2556

checkok194:                                       ; preds = %and.rhs180
  %ptradd195 = getelementptr inbounds i8, ptr %89, i64 %add182, !dbg !2557
  %92 = load i8, ptr %ptradd195, align 1, !dbg !2557
  store i8 %92, ptr %c, align 1, !dbg !2557
  %eq196 = icmp eq i8 %92, 48, !dbg !2558
  br label %and.phi197, !dbg !2558

and.phi197:                                       ; preds = %checkok194, %if.exit179
  %val198 = phi i1 [ false, %if.exit179 ], [ %eq196, %checkok194 ], !dbg !2558
  br i1 %val198, label %if.then199, label %if.exit225, !dbg !2558

if.then199:                                       ; preds = %and.phi197
  %93 = load i64, ptr %rp, align 8, !dbg !2559
  %sub200 = sub i64 %93, 1, !dbg !2559
  store i64 %sub200, ptr %rp, align 8, !dbg !2559
  store i8 1, ptr %got_digit, align 1, !dbg !2561
  br label %loop.cond201, !dbg !2562

loop.cond201:                                     ; preds = %loop.body222, %if.then199
  %94 = load i64, ptr %last_char, align 8, !dbg !2563
  %95 = load i64, ptr %index, align 8, !dbg !2565
  %neq202 = icmp ne i64 %94, %95, !dbg !2563
  br i1 %neq202, label %and.rhs203, label %and.phi220, !dbg !2563

and.rhs203:                                       ; preds = %loop.cond201
  %ptradd204 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !2566
  %96 = load i64, ptr %ptradd204, align 8, !dbg !2566
  %97 = load ptr, ptr %chars146, align 8, !dbg !2566
  %98 = load i64, ptr %index, align 8, !dbg !2567
  %add205 = add i64 %98, 1, !dbg !2567
  store i64 %add205, ptr %index, align 8, !dbg !2567
  %ge206 = icmp uge i64 %add205, %96, !dbg !2567
  %99 = call i1 @llvm.expect.i1(i1 %ge206, i1 false), !dbg !2567
  br i1 %99, label %panic207, label %checkok217, !dbg !2567

checkok217:                                       ; preds = %and.rhs203
  %ptradd218 = getelementptr inbounds i8, ptr %97, i64 %add205, !dbg !2568
  %100 = load i8, ptr %ptradd218, align 1, !dbg !2568
  store i8 %100, ptr %c, align 1, !dbg !2568
  %eq219 = icmp eq i8 %100, 48, !dbg !2569
  br label %and.phi220, !dbg !2569

and.phi220:                                       ; preds = %checkok217, %loop.cond201
  %val221 = phi i1 [ false, %loop.cond201 ], [ %eq219, %checkok217 ], !dbg !2569
  br i1 %val221, label %loop.body222, label %loop.exit224, !dbg !2569

loop.body222:                                     ; preds = %and.phi220
  %101 = load i64, ptr %rp, align 8, !dbg !2570
  %sub223 = sub i64 %101, 1, !dbg !2570
  store i64 %sub223, ptr %rp, align 8, !dbg !2570
  br label %loop.cond201, !dbg !2570

loop.exit224:                                     ; preds = %and.phi220
  br label %if.exit225, !dbg !2570

if.exit225:                                       ; preds = %loop.exit224, %and.phi197
  br label %if.exit226, !dbg !2570

if.exit226:                                       ; preds = %if.exit225, %loop.exit170
  br label %loop.cond227, !dbg !2572

loop.cond227:                                     ; preds = %checkok298, %if.exit226
  %102 = load i8, ptr %c, align 1, !dbg !2573
  %zext228 = zext i8 %102 to i32, !dbg !2573
  %sub229 = sub i32 %zext228, 48, !dbg !2573
  %lt230 = icmp ult i32 %sub229, 10, !dbg !2573
  br i1 %lt230, label %or.phi236, label %or.rhs231, !dbg !2573

or.rhs231:                                        ; preds = %loop.cond227
  %103 = load i8, ptr %c, align 1, !dbg !2575
  %zext232 = zext i8 %103 to i32, !dbg !2575
  %or233 = or i32 %zext232, 32, !dbg !2575
  %sub234 = sub i32 %or233, 97, !dbg !2575
  %lt235 = icmp slt i32 %sub234, 6, !dbg !2575
  %siui-lt = or i1 false, %lt235, !dbg !2575
  br label %or.phi236, !dbg !2575

or.phi236:                                        ; preds = %or.rhs231, %loop.cond227
  %val237 = phi i1 [ true, %loop.cond227 ], [ %siui-lt, %or.rhs231 ], !dbg !2575
  br i1 %val237, label %or.phi240, label %or.rhs238, !dbg !2575

or.rhs238:                                        ; preds = %or.phi236
  %104 = load i8, ptr %c, align 1, !dbg !2576
  %eq239 = icmp eq i8 %104, 46, !dbg !2576
  br label %or.phi240, !dbg !2576

or.phi240:                                        ; preds = %or.rhs238, %or.phi236
  %val241 = phi i1 [ true, %or.phi236 ], [ %eq239, %or.rhs238 ], !dbg !2576
  br i1 %val241, label %loop.body242, label %loop.exit300, !dbg !2576

loop.body242:                                     ; preds = %or.phi240
  %105 = load i8, ptr %c, align 1, !dbg !2577
  %eq243 = icmp eq i8 %105, 46, !dbg !2577
  br i1 %eq243, label %if.then244, label %if.else, !dbg !2577

if.then244:                                       ; preds = %loop.body242
  %106 = load i8, ptr %got_rad, align 1, !dbg !2579
  %107 = trunc i8 %106 to i1, !dbg !2579
  br i1 %107, label %if.then245, label %if.exit246, !dbg !2579

if.then245:                                       ; preds = %if.then244
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2581
  br label %err_retblock, !dbg !2581

if.exit246:                                       ; preds = %if.then244
  store i8 1, ptr %got_rad, align 1, !dbg !2582
  %108 = load i64, ptr %dc, align 8, !dbg !2583
  store i64 %108, ptr %rp, align 8, !dbg !2583
  br label %if.exit281, !dbg !2583

if.else:                                          ; preds = %loop.body242
  store i8 1, ptr %got_digit, align 1, !dbg !2584
  call void @llvm.dbg.declare(metadata ptr %d, metadata !2586, metadata !DIExpression()), !dbg !2587
  %109 = load i8, ptr %c, align 1, !dbg !2588
  %gt248 = icmp ugt i8 %109, 57, !dbg !2588
  br i1 %gt248, label %if.then249, label %if.exit254, !dbg !2588

if.then249:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !2590
  %zext250 = zext i8 %110 to i32, !dbg !2590
  %or251 = or i32 %zext250, 32, !dbg !2590
  %add252 = add i32 %or251, 10, !dbg !2590
  %sub253 = sub i32 %add252, 97, !dbg !2590
  store i32 %sub253, ptr %blockret247, align 4, !dbg !2590
  br label %expr_block.exit, !dbg !2590

if.exit254:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !2591
  %zext255 = zext i8 %111 to i32, !dbg !2591
  %sub256 = sub i32 %zext255, 48, !dbg !2591
  store i32 %sub256, ptr %blockret247, align 4, !dbg !2591
  br label %expr_block.exit, !dbg !2591

expr_block.exit:                                  ; preds = %if.exit254, %if.then249
  %112 = load i32, ptr %blockret247, align 4, !dbg !2591
  store i32 %112, ptr %d, align 4, !dbg !2591
  store i8 1, ptr %switch257, align 1
  br label %switch.entry258

switch.entry258:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch257, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !2592
  %lt259 = icmp slt i64 %115, 8, !dbg !2592
  %eq260 = icmp eq i1 %lt259, %114, !dbg !2592
  br i1 %eq260, label %switch.case261, label %next_if, !dbg !2592

switch.case261:                                   ; preds = %switch.entry258
  %116 = load i32, ptr %x, align 4, !dbg !2594
  %mul = mul i32 %116, 16, !dbg !2594
  %117 = load i32, ptr %d, align 4, !dbg !2596
  %add262 = add i32 %mul, %117, !dbg !2594
  store i32 %add262, ptr %x, align 4, !dbg !2594
  br label %switch.exit279, !dbg !2594

next_if:                                          ; preds = %switch.entry258
  %118 = load i64, ptr %dc, align 8, !dbg !2597
  %lt263 = icmp slt i64 %118, 14, !dbg !2597
  %eq264 = icmp eq i1 %lt263, %114, !dbg !2597
  br i1 %eq264, label %switch.case265, label %next_if268, !dbg !2597

switch.case265:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !2598
  %120 = load i32, ptr %d, align 4, !dbg !2600
  %sifp266 = sitofp i32 %120 to double, !dbg !2600
  %121 = load double, ptr %scale, align 8, !dbg !2601
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !2601
  store double %fdiv, ptr %scale, align 8, !dbg !2601
  %fmul267 = fmul double %sifp266, %fdiv, !dbg !2600
  %fadd = fadd double %119, %fmul267, !dbg !2598
  store double %fadd, ptr %y, align 8, !dbg !2598
  store i8 1, ptr %got_tail, align 1, !dbg !2602
  br label %switch.exit279, !dbg !2602

next_if268:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !2603
  %i2b269 = icmp ne i32 %122, 0, !dbg !2603
  br i1 %i2b269, label %and.rhs270, label %and.phi272, !dbg !2603

and.rhs270:                                       ; preds = %next_if268
  %123 = load i8, ptr %got_tail, align 1, !dbg !2604
  %124 = trunc i8 %123 to i1, !dbg !2604
  %not271 = xor i1 %124, true, !dbg !2604
  br label %and.phi272, !dbg !2604

and.phi272:                                       ; preds = %and.rhs270, %next_if268
  %val273 = phi i1 [ false, %next_if268 ], [ %not271, %and.rhs270 ], !dbg !2604
  %eq274 = icmp eq i1 %val273, %114, !dbg !2604
  br i1 %eq274, label %switch.case275, label %next_if278, !dbg !2604

switch.case275:                                   ; preds = %and.phi272
  %125 = load double, ptr %y, align 8, !dbg !2605
  %126 = load double, ptr %scale, align 8, !dbg !2607
  %fmul276 = fmul double 5.000000e-01, %126, !dbg !2608
  %fadd277 = fadd double %125, %fmul276, !dbg !2605
  store double %fadd277, ptr %y, align 8, !dbg !2605
  store i8 1, ptr %got_tail, align 1, !dbg !2609
  br label %switch.exit279, !dbg !2609

next_if278:                                       ; preds = %and.phi272
  br label %switch.exit279, !dbg !2609

switch.exit279:                                   ; preds = %next_if278, %switch.case275, %switch.case265, %switch.case261
  %127 = load i64, ptr %dc, align 8, !dbg !2610
  %add280 = add i64 %127, 1, !dbg !2610
  store i64 %add280, ptr %dc, align 8, !dbg !2610
  br label %if.exit281, !dbg !2610

if.exit281:                                       ; preds = %switch.exit279, %if.exit246
  %128 = load i64, ptr %index, align 8, !dbg !2611
  %129 = load i64, ptr %last_char, align 8, !dbg !2612
  %eq282 = icmp eq i64 %128, %129, !dbg !2611
  br i1 %eq282, label %if.then283, label %if.exit284, !dbg !2611

if.then283:                                       ; preds = %if.exit281
  br label %loop.exit300, !dbg !2613

if.exit284:                                       ; preds = %if.exit281
  %ptradd285 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !2614
  %130 = load i64, ptr %ptradd285, align 8, !dbg !2614
  %131 = load ptr, ptr %chars146, align 8, !dbg !2614
  %132 = load i64, ptr %index, align 8, !dbg !2615
  %add286 = add i64 %132, 1, !dbg !2615
  store i64 %add286, ptr %index, align 8, !dbg !2615
  %ge287 = icmp uge i64 %add286, %130, !dbg !2615
  %133 = call i1 @llvm.expect.i1(i1 %ge287, i1 false), !dbg !2615
  br i1 %133, label %panic288, label %checkok298, !dbg !2615

checkok298:                                       ; preds = %if.exit284
  %ptradd299 = getelementptr inbounds i8, ptr %131, i64 %add286, !dbg !2616
  %134 = load i8, ptr %ptradd299, align 1, !dbg !2616
  store i8 %134, ptr %c, align 1, !dbg !2616
  br label %loop.cond227, !dbg !2616

loop.exit300:                                     ; preds = %if.then283, %or.phi240
  %135 = load i8, ptr %got_digit, align 1, !dbg !2617
  %136 = trunc i8 %135 to i1, !dbg !2617
  %not301 = xor i1 %136, true, !dbg !2617
  br i1 %not301, label %if.then302, label %if.exit303, !dbg !2617

if.then302:                                       ; preds = %loop.exit300
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2618
  br label %err_retblock, !dbg !2618

if.exit303:                                       ; preds = %loop.exit300
  %137 = load i8, ptr %got_rad, align 1, !dbg !2619
  %138 = trunc i8 %137 to i1, !dbg !2619
  %not304 = xor i1 %138, true, !dbg !2619
  br i1 %not304, label %if.then305, label %if.exit306, !dbg !2619

if.then305:                                       ; preds = %if.exit303
  %139 = load i64, ptr %dc, align 8, !dbg !2620
  store i64 %139, ptr %rp, align 8, !dbg !2620
  br label %if.exit306, !dbg !2620

if.exit306:                                       ; preds = %if.then305, %if.exit303
  br label %loop.cond307, !dbg !2621

loop.cond307:                                     ; preds = %loop.body309, %if.exit306
  %140 = load i64, ptr %dc, align 8, !dbg !2622
  %lt308 = icmp slt i64 %140, 8, !dbg !2622
  br i1 %lt308, label %loop.body309, label %loop.exit312, !dbg !2622

loop.body309:                                     ; preds = %loop.cond307
  %141 = load i32, ptr %x, align 4, !dbg !2624
  %mul310 = mul i32 %141, 16, !dbg !2624
  store i32 %mul310, ptr %x, align 4, !dbg !2624
  %142 = load i64, ptr %dc, align 8, !dbg !2625
  %add311 = add i64 %142, 1, !dbg !2625
  store i64 %add311, ptr %dc, align 8, !dbg !2625
  br label %loop.cond307, !dbg !2625

loop.exit312:                                     ; preds = %loop.cond307
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !2626, metadata !DIExpression()), !dbg !2627
  store i64 0, ptr %e2, align 8, !dbg !2627
  %143 = load i8, ptr %c, align 1, !dbg !2628
  %zext313 = zext i8 %143 to i32, !dbg !2628
  %or314 = or i32 %zext313, 32, !dbg !2628
  %eq315 = icmp eq i32 %or314, 112, !dbg !2628
  %check316 = icmp sge i32 %or314, 0, !dbg !2628
  %siui-eq317 = and i1 %check316, %eq315, !dbg !2628
  br i1 %siui-eq317, label %if.then318, label %if.exit344, !dbg !2628

if.then318:                                       ; preds = %loop.exit312
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !2629, metadata !DIExpression()), !dbg !2631
  %144 = load %"char[]", ptr %chars146, align 8, !dbg !2632
  %145 = extractvalue %"char[]" %144, 0, !dbg !2632
  %146 = load i64, ptr %index, align 8, !dbg !2633
  %add319 = add i64 %146, 1, !dbg !2633
  %147 = extractvalue %"char[]" %144, 1, !dbg !2633
  %gt320 = icmp sgt i64 %add319, %147, !dbg !2633
  %148 = call i1 @llvm.expect.i1(i1 %gt320, i1 false), !dbg !2633
  br i1 %148, label %panic321, label %checkok331, !dbg !2633

checkok331:                                       ; preds = %if.then318
  %underflow = icmp slt i64 %add319, 0, !dbg !2634
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !2634
  br i1 %149, label %panic332, label %checkok340, !dbg !2634

checkok340:                                       ; preds = %checkok331
  %size341 = sub i64 %147, %add319, !dbg !2633
  %ptradd342 = getelementptr inbounds i8, ptr %145, i64 %add319, !dbg !2633
  %150 = insertvalue %"char[]" undef, ptr %ptradd342, 0, !dbg !2633
  %151 = insertvalue %"char[]" %150, i64 %size341, 1, !dbg !2633
  store %"char[]" %151, ptr %taddr343, align 8
  %152 = load [2 x i64], ptr %taddr343, align 8
  %153 = call i64 @std.core.String.to_long(ptr %retparam, [2 x i64] %152, i32 10), !dbg !2635
  %not_err = icmp eq i64 %153, 0, !dbg !2635
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !2635
  br i1 %154, label %after_check, label %else_block, !dbg !2635

after_check:                                      ; preds = %checkok340
  %155 = load i64, ptr %retparam, align 8, !dbg !2635
  br label %phi_block, !dbg !2635

else_block:                                       ; preds = %checkok340
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !2636
  br label %guard_block, !dbg !2636

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !2636
  store i64 %156, ptr %reterr, align 8, !dbg !2636
  br label %err_retblock, !dbg !2636

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !2636
  %157 = load i64, ptr %e2val, align 8, !dbg !2637
  store i64 %157, ptr %e2, align 8, !dbg !2637
  br label %if.exit344, !dbg !2637

if.exit344:                                       ; preds = %phi_block, %loop.exit312
  %158 = load i64, ptr %e2, align 8, !dbg !2638
  %159 = load i64, ptr %rp, align 8, !dbg !2639
  %mul345 = mul i64 4, %159, !dbg !2640
  %sub346 = sub i64 %mul345, 32, !dbg !2640
  %add347 = add i64 %158, %sub346, !dbg !2638
  store i64 %add347, ptr %e2, align 8, !dbg !2638
  %160 = load i32, ptr %x, align 4, !dbg !2641
  %i2nb348 = icmp eq i32 %160, 0, !dbg !2641
  br i1 %i2nb348, label %if.then349, label %if.exit352, !dbg !2641

if.then349:                                       ; preds = %if.exit344
  %161 = load i32, ptr %sign147, align 4, !dbg !2642
  %sifp350 = sitofp i32 %161 to double, !dbg !2642
  %fmul351 = fmul double %sifp350, 0.000000e+00, !dbg !2642
  store double %fmul351, ptr %blockret148, align 8, !dbg !2642
  br label %expr_block.exit419, !dbg !2642

if.exit352:                                       ; preds = %if.exit344
  %162 = load i64, ptr %e2, align 8, !dbg !2643
  %gt353 = icmp sgt i64 %162, 1074, !dbg !2643
  br i1 %gt353, label %if.then354, label %if.exit355, !dbg !2643

if.then354:                                       ; preds = %if.exit352
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2644
  br label %err_retblock, !dbg !2644

if.exit355:                                       ; preds = %if.exit352
  %163 = load i64, ptr %e2, align 8, !dbg !2645
  %lt356 = icmp slt i64 %163, -1180, !dbg !2645
  br i1 %lt356, label %if.then357, label %if.exit358, !dbg !2645

if.then357:                                       ; preds = %if.exit355
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2646
  br label %err_retblock, !dbg !2646

if.exit358:                                       ; preds = %if.exit355
  br label %loop.cond359, !dbg !2647

loop.cond359:                                     ; preds = %if.exit370, %if.exit358
  %164 = load i32, ptr %x, align 4, !dbg !2648
  %lt360 = icmp ult i32 %164, -2147483648, !dbg !2648
  br i1 %lt360, label %loop.body361, label %loop.exit372, !dbg !2648

loop.body361:                                     ; preds = %loop.cond359
  %165 = load double, ptr %y, align 8, !dbg !2650
  %ge362 = fcmp oge double %165, 5.000000e-01, !dbg !2650
  br i1 %ge362, label %if.then363, label %if.else367, !dbg !2650

if.then363:                                       ; preds = %loop.body361
  %166 = load i32, ptr %x, align 4, !dbg !2652
  %167 = load i32, ptr %x, align 4, !dbg !2654
  %add364 = add i32 %167, 1, !dbg !2654
  %add365 = add i32 %166, %add364, !dbg !2652
  store i32 %add365, ptr %x, align 4, !dbg !2652
  %168 = load double, ptr %y, align 8, !dbg !2655
  %169 = load double, ptr %y, align 8, !dbg !2656
  %fsub = fsub double %169, 1.000000e+00, !dbg !2656
  %fadd366 = fadd double %168, %fsub, !dbg !2655
  store double %fadd366, ptr %y, align 8, !dbg !2655
  br label %if.exit370, !dbg !2655

if.else367:                                       ; preds = %loop.body361
  %170 = load i32, ptr %x, align 4, !dbg !2657
  %171 = load i32, ptr %x, align 4, !dbg !2659
  %add368 = add i32 %170, %171, !dbg !2657
  store i32 %add368, ptr %x, align 4, !dbg !2657
  %172 = load double, ptr %y, align 8, !dbg !2660
  %173 = load double, ptr %y, align 8, !dbg !2661
  %fadd369 = fadd double %172, %173, !dbg !2660
  store double %fadd369, ptr %y, align 8, !dbg !2660
  br label %if.exit370, !dbg !2660

if.exit370:                                       ; preds = %if.else367, %if.then363
  %174 = load i64, ptr %e2, align 8, !dbg !2662
  %sub371 = sub i64 %174, 1, !dbg !2662
  store i64 %sub371, ptr %e2, align 8, !dbg !2662
  br label %loop.cond359, !dbg !2662

loop.exit372:                                     ; preds = %loop.cond359
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !2663, metadata !DIExpression()), !dbg !2664
  store i32 53, ptr %bits, align 4, !dbg !2665
  %175 = load i64, ptr %e2, align 8, !dbg !2666
  %add373 = add i64 32, %175, !dbg !2667
  %sub374 = sub i64 %add373, -1074, !dbg !2667
  %gt375 = icmp sgt i64 53, %sub374, !dbg !2668
  br i1 %gt375, label %if.then376, label %if.exit382, !dbg !2668

if.then376:                                       ; preds = %loop.exit372
  %176 = load i64, ptr %e2, align 8, !dbg !2669
  %add377 = add i64 32, %176, !dbg !2671
  %sub378 = sub i64 %add377, -1074, !dbg !2672
  %trunc = trunc i64 %sub378 to i32, !dbg !2672
  store i32 %trunc, ptr %bits, align 4, !dbg !2672
  %177 = load i32, ptr %bits, align 4, !dbg !2673
  %lt379 = icmp slt i32 %177, 0, !dbg !2673
  br i1 %lt379, label %if.then380, label %if.exit381, !dbg !2673

if.then380:                                       ; preds = %if.then376
  store i32 0, ptr %bits, align 4, !dbg !2674
  br label %if.exit381, !dbg !2674

if.exit381:                                       ; preds = %if.then380, %if.then376
  br label %if.exit382, !dbg !2674

if.exit382:                                       ; preds = %if.exit381, %loop.exit372
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !2675, metadata !DIExpression()), !dbg !2676
  store double 0.000000e+00, ptr %bias, align 8, !dbg !2676
  %178 = load i32, ptr %bits, align 4, !dbg !2677
  %lt383 = icmp slt i32 %178, 53, !dbg !2677
  br i1 %lt383, label %if.then384, label %if.exit391, !dbg !2677

if.then384:                                       ; preds = %if.exit382
  store double 1.000000e+00, ptr %x385, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !2678
  %sub386 = sub i32 85, %179, !dbg !2680
  %sub387 = sub i32 %sub386, 1, !dbg !2680
  store i32 %sub387, ptr %n, align 4
  %180 = load double, ptr %x385, align 8, !dbg !2681
  %181 = load i32, ptr %n, align 4, !dbg !2681
  %182 = call double @scalbn(double %180, i32 %181), !dbg !2685
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign147, align 4, !dbg !2686
  %sifp388 = sitofp i32 %183 to double, !dbg !2686
  store double %sifp388, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x389, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y390, align 8
  %186 = load double, ptr %x389, align 8, !dbg !2687
  %187 = load double, ptr %sgn, align 8, !dbg !2693
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !2693
  store double %188, ptr %bias, align 8, !dbg !2693
  br label %if.exit391, !dbg !2693

if.exit391:                                       ; preds = %if.then384, %if.exit382
  %189 = load i32, ptr %bits, align 4, !dbg !2694
  %lt392 = icmp slt i32 %189, 32, !dbg !2694
  br i1 %lt392, label %and.rhs393, label %and.phi395, !dbg !2694

and.rhs393:                                       ; preds = %if.exit391
  %190 = load double, ptr %y, align 8, !dbg !2695
  %neq394 = fcmp one double %190, 0.000000e+00, !dbg !2695
  br label %and.phi395, !dbg !2695

and.phi395:                                       ; preds = %and.rhs393, %if.exit391
  %val396 = phi i1 [ false, %if.exit391 ], [ %neq394, %and.rhs393 ], !dbg !2695
  br i1 %val396, label %and.rhs397, label %and.phi399, !dbg !2695

and.rhs397:                                       ; preds = %and.phi395
  %191 = load i32, ptr %x, align 4, !dbg !2696
  %and = and i32 %191, 1, !dbg !2697
  %i2nb398 = icmp eq i32 %and, 0, !dbg !2697
  br label %and.phi399, !dbg !2697

and.phi399:                                       ; preds = %and.rhs397, %and.phi395
  %val400 = phi i1 [ false, %and.phi395 ], [ %i2nb398, %and.rhs397 ], !dbg !2697
  br i1 %val400, label %if.then401, label %if.exit403, !dbg !2697

if.then401:                                       ; preds = %and.phi399
  %192 = load i32, ptr %x, align 4, !dbg !2698
  %add402 = add i32 %192, 1, !dbg !2698
  store i32 %add402, ptr %x, align 4, !dbg !2698
  store double 0.000000e+00, ptr %y, align 8, !dbg !2700
  br label %if.exit403, !dbg !2700

if.exit403:                                       ; preds = %if.then401, %and.phi399
  %193 = load double, ptr %bias, align 8, !dbg !2701
  %194 = load i32, ptr %sign147, align 4, !dbg !2702
  %sifp404 = sitofp i32 %194 to double, !dbg !2702
  %195 = load i32, ptr %x, align 4, !dbg !2703
  %uifp = uitofp i32 %195 to double, !dbg !2703
  %fmul405 = fmul double %sifp404, %uifp, !dbg !2702
  %fadd406 = fadd double %193, %fmul405, !dbg !2701
  %196 = load i32, ptr %sign147, align 4, !dbg !2704
  %sifp407 = sitofp i32 %196 to double, !dbg !2704
  %197 = load double, ptr %y, align 8, !dbg !2705
  %fmul408 = fmul double %sifp407, %197, !dbg !2704
  %fadd409 = fadd double %fadd406, %fmul408, !dbg !2701
  store double %fadd409, ptr %y, align 8, !dbg !2701
  %198 = load double, ptr %y, align 8, !dbg !2706
  %199 = load double, ptr %bias, align 8, !dbg !2707
  %fsub410 = fsub double %198, %199, !dbg !2706
  store double %fsub410, ptr %y, align 8, !dbg !2706
  %200 = load double, ptr %y, align 8, !dbg !2708
  %neq411 = fcmp one double %200, 0.000000e+00, !dbg !2708
  %not412 = xor i1 %neq411, true, !dbg !2708
  br i1 %not412, label %if.then413, label %if.exit414, !dbg !2708

if.then413:                                       ; preds = %if.exit403
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2709
  br label %err_retblock, !dbg !2709

if.exit414:                                       ; preds = %if.exit403
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x415, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !2710
  %trunc416 = trunc i64 %202 to i32, !dbg !2710
  store i32 %trunc416, ptr %n417, align 4
  %203 = load double, ptr %x415, align 8, !dbg !2711
  %204 = load i32, ptr %n417, align 4, !dbg !2711
  %205 = call double @scalbn(double %203, i32 %204), !dbg !2714
  store double %205, ptr %blockret148, align 8, !dbg !2714
  br label %expr_block.exit419, !dbg !2714

expr_block.exit419:                               ; preds = %if.exit414, %if.then349, %if.exit176, %if.then168
  %206 = load double, ptr %blockret148, align 8, !dbg !2714
  store double %206, ptr %blockret, align 8, !dbg !2714
  br label %expr_block.exit1948, !dbg !2714

if.exit420:                                       ; preds = %and.phi129
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars421, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign422, align 4
  %ptradd424 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2715
  %208 = load i64, ptr %ptradd424, align 8, !dbg !2715
  %lt425 = icmp ult i64 0, %208, !dbg !2715
  br i1 %lt425, label %assert_ok, label %assert_fail, !dbg !2715

assert_fail:                                      ; preds = %if.exit420
  store %"char[]" { ptr @.panic_msg.81, i64 34 }, ptr %taddr426, align 8
  %209 = load [2 x i64], ptr %taddr426, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr427, align 8
  %210 = load [2 x i64], ptr %taddr427, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr428, align 8
  %211 = load [2 x i64], ptr %taddr428, align 8
  %212 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %212([2 x i64] %209, [2 x i64] %210, [2 x i64] %211, i32 35), !dbg !2715
  unreachable, !dbg !2715

assert_ok:                                        ; preds = %if.exit420
  call void @llvm.dbg.declare(metadata ptr %x429, metadata !2719, metadata !DIExpression()), !dbg !2723
  call void @llvm.memset.p0.i64(ptr align 4 %x429, i8 0, i64 512, i1 false), !dbg !2723
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !2724, metadata !DIExpression()), !dbg !2725
  store i32 1024, ptr %emax, align 4, !dbg !2726
  call void @llvm.dbg.declare(metadata ptr %index430, metadata !2727, metadata !DIExpression()), !dbg !2728
  store i64 0, ptr %index430, align 8, !dbg !2728
  call void @llvm.dbg.declare(metadata ptr %got_digit431, metadata !2729, metadata !DIExpression()), !dbg !2730
  %ptradd432 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2731
  %213 = load i64, ptr %ptradd432, align 8, !dbg !2731
  %214 = load ptr, ptr %chars421, align 8, !dbg !2731
  %ge433 = icmp sge i64 0, %213, !dbg !2732
  %215 = call i1 @llvm.expect.i1(i1 %ge433, i1 false), !dbg !2732
  br i1 %215, label %panic434, label %checkok444, !dbg !2732

checkok444:                                       ; preds = %assert_ok
  %216 = load i8, ptr %214, align 1, !dbg !2732
  %eq445 = icmp eq i8 %216, 48, !dbg !2731
  %217 = zext i1 %eq445 to i8, !dbg !2731
  store i8 %217, ptr %got_digit431, align 1, !dbg !2731
  call void @llvm.dbg.declare(metadata ptr %got_rad446, metadata !2733, metadata !DIExpression()), !dbg !2734
  store i8 0, ptr %got_rad446, align 1, !dbg !2734
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !2735, metadata !DIExpression()), !dbg !2736
  store i64 0, ptr %lrp, align 8, !dbg !2736
  call void @llvm.dbg.declare(metadata ptr %dc447, metadata !2737, metadata !DIExpression()), !dbg !2738
  store i64 0, ptr %dc447, align 8, !dbg !2738
  call void @llvm.dbg.declare(metadata ptr %k, metadata !2739, metadata !DIExpression()), !dbg !2740
  store i32 0, ptr %k, align 4, !dbg !2740
  call void @llvm.dbg.declare(metadata ptr %j, metadata !2741, metadata !DIExpression()), !dbg !2742
  store i32 0, ptr %j, align 4, !dbg !2742
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !2743, metadata !DIExpression()), !dbg !2744
  store i32 0, ptr %lnz, align 4, !dbg !2744
  call void @llvm.dbg.declare(metadata ptr %len448, metadata !2745, metadata !DIExpression()), !dbg !2746
  %ptradd449 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2747
  %218 = load i64, ptr %ptradd449, align 8, !dbg !2747
  store i64 %218, ptr %len448, align 8, !dbg !2747
  call void @llvm.dbg.declare(metadata ptr %last_char450, metadata !2748, metadata !DIExpression()), !dbg !2749
  %219 = load i64, ptr %len448, align 8, !dbg !2750
  %sub451 = sub i64 %219, 1, !dbg !2750
  store i64 %sub451, ptr %last_char450, align 8, !dbg !2750
  %220 = load i64, ptr %len448, align 8, !dbg !2751
  %i2b452 = icmp ne i64 %220, 0, !dbg !2751
  br i1 %i2b452, label %assert_ok457, label %assert_fail453, !dbg !2751

assert_fail453:                                   ; preds = %checkok444
  store %"char[]" { ptr @.panic_msg.82, i64 16 }, ptr %taddr454, align 8
  %221 = load [2 x i64], ptr %taddr454, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr455, align 8
  %222 = load [2 x i64], ptr %taddr455, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr456, align 8
  %223 = load [2 x i64], ptr %taddr456, align 8
  %224 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %224([2 x i64] %221, [2 x i64] %222, [2 x i64] %223, i32 52), !dbg !2751
  unreachable, !dbg !2751

assert_ok457:                                     ; preds = %checkok444
  call void @llvm.dbg.declare(metadata ptr %c458, metadata !2752, metadata !DIExpression()), !dbg !2753
  br label %loop.cond459, !dbg !2754

loop.cond459:                                     ; preds = %if.exit480, %assert_ok457
  %ptradd460 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2755
  %225 = load i64, ptr %ptradd460, align 8, !dbg !2755
  %226 = load ptr, ptr %chars421, align 8, !dbg !2755
  %227 = load i64, ptr %index430, align 8, !dbg !2757
  %ge461 = icmp uge i64 %227, %225, !dbg !2757
  %228 = call i1 @llvm.expect.i1(i1 %ge461, i1 false), !dbg !2757
  br i1 %228, label %panic462, label %checkok472, !dbg !2757

checkok472:                                       ; preds = %loop.cond459
  %ptradd473 = getelementptr inbounds i8, ptr %226, i64 %227, !dbg !2757
  %229 = load i8, ptr %ptradd473, align 1, !dbg !2757
  store i8 %229, ptr %c458, align 1, !dbg !2757
  %eq474 = icmp eq i8 %229, 48, !dbg !2758
  br i1 %eq474, label %loop.body475, label %loop.exit482, !dbg !2758

loop.body475:                                     ; preds = %checkok472
  %230 = load i64, ptr %index430, align 8, !dbg !2759
  %231 = load i64, ptr %last_char450, align 8, !dbg !2761
  %eq476 = icmp eq i64 %230, %231, !dbg !2759
  br i1 %eq476, label %if.then477, label %if.exit480, !dbg !2759

if.then477:                                       ; preds = %loop.body475
  %232 = load i32, ptr %sign422, align 4, !dbg !2762
  %sifp478 = sitofp i32 %232 to double, !dbg !2762
  %fmul479 = fmul double %sifp478, 0.000000e+00, !dbg !2762
  store double %fmul479, ptr %blockret423, align 8, !dbg !2762
  br label %expr_block.exit1947, !dbg !2762

if.exit480:                                       ; preds = %loop.body475
  %233 = load i64, ptr %index430, align 8, !dbg !2763
  %add481 = add i64 %233, 1, !dbg !2763
  store i64 %add481, ptr %index430, align 8, !dbg !2763
  br label %loop.cond459, !dbg !2763

loop.exit482:                                     ; preds = %checkok472
  %234 = load i8, ptr %c458, align 1, !dbg !2764
  %eq483 = icmp eq i8 %234, 46, !dbg !2764
  br i1 %eq483, label %if.then484, label %if.exit540, !dbg !2764

if.then484:                                       ; preds = %loop.exit482
  store i8 1, ptr %got_rad446, align 1, !dbg !2765
  %235 = load i64, ptr %index430, align 8, !dbg !2767
  %236 = load i64, ptr %last_char450, align 8, !dbg !2768
  %eq485 = icmp eq i64 %235, %236, !dbg !2767
  br i1 %eq485, label %if.then486, label %if.exit492, !dbg !2767

if.then486:                                       ; preds = %if.then484
  %237 = load i8, ptr %got_digit431, align 1, !dbg !2769
  %238 = trunc i8 %237 to i1, !dbg !2769
  %not487 = xor i1 %238, true, !dbg !2769
  br i1 %not487, label %if.then488, label %if.exit489, !dbg !2769

if.then488:                                       ; preds = %if.then486
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2771
  br label %err_retblock, !dbg !2771

if.exit489:                                       ; preds = %if.then486
  %239 = load i32, ptr %sign422, align 4, !dbg !2772
  %sifp490 = sitofp i32 %239 to double, !dbg !2772
  %fmul491 = fmul double %sifp490, 0.000000e+00, !dbg !2772
  store double %fmul491, ptr %blockret423, align 8, !dbg !2772
  br label %expr_block.exit1947, !dbg !2772

if.exit492:                                       ; preds = %if.then484
  %240 = load i64, ptr %index430, align 8, !dbg !2773
  %241 = load i64, ptr %last_char450, align 8, !dbg !2774
  %neq493 = icmp ne i64 %240, %241, !dbg !2773
  br i1 %neq493, label %and.rhs494, label %and.phi511, !dbg !2773

and.rhs494:                                       ; preds = %if.exit492
  %ptradd495 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2775
  %242 = load i64, ptr %ptradd495, align 8, !dbg !2775
  %243 = load ptr, ptr %chars421, align 8, !dbg !2775
  %244 = load i64, ptr %index430, align 8, !dbg !2776
  %add496 = add i64 %244, 1, !dbg !2776
  store i64 %add496, ptr %index430, align 8, !dbg !2776
  %ge497 = icmp uge i64 %add496, %242, !dbg !2776
  %245 = call i1 @llvm.expect.i1(i1 %ge497, i1 false), !dbg !2776
  br i1 %245, label %panic498, label %checkok508, !dbg !2776

checkok508:                                       ; preds = %and.rhs494
  %ptradd509 = getelementptr inbounds i8, ptr %243, i64 %add496, !dbg !2777
  %246 = load i8, ptr %ptradd509, align 1, !dbg !2777
  store i8 %246, ptr %c458, align 1, !dbg !2777
  %eq510 = icmp eq i8 %246, 48, !dbg !2778
  br label %and.phi511, !dbg !2778

and.phi511:                                       ; preds = %checkok508, %if.exit492
  %val512 = phi i1 [ false, %if.exit492 ], [ %eq510, %checkok508 ], !dbg !2778
  br i1 %val512, label %if.then513, label %if.exit539, !dbg !2778

if.then513:                                       ; preds = %and.phi511
  %247 = load i64, ptr %lrp, align 8, !dbg !2779
  %sub514 = sub i64 %247, 1, !dbg !2779
  store i64 %sub514, ptr %lrp, align 8, !dbg !2779
  store i8 1, ptr %got_digit431, align 1, !dbg !2781
  br label %loop.cond515, !dbg !2782

loop.cond515:                                     ; preds = %loop.body536, %if.then513
  %248 = load i64, ptr %last_char450, align 8, !dbg !2783
  %249 = load i64, ptr %index430, align 8, !dbg !2785
  %neq516 = icmp ne i64 %248, %249, !dbg !2783
  br i1 %neq516, label %and.rhs517, label %and.phi534, !dbg !2783

and.rhs517:                                       ; preds = %loop.cond515
  %ptradd518 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2786
  %250 = load i64, ptr %ptradd518, align 8, !dbg !2786
  %251 = load ptr, ptr %chars421, align 8, !dbg !2786
  %252 = load i64, ptr %index430, align 8, !dbg !2787
  %add519 = add i64 %252, 1, !dbg !2787
  store i64 %add519, ptr %index430, align 8, !dbg !2787
  %ge520 = icmp uge i64 %add519, %250, !dbg !2787
  %253 = call i1 @llvm.expect.i1(i1 %ge520, i1 false), !dbg !2787
  br i1 %253, label %panic521, label %checkok531, !dbg !2787

checkok531:                                       ; preds = %and.rhs517
  %ptradd532 = getelementptr inbounds i8, ptr %251, i64 %add519, !dbg !2788
  %254 = load i8, ptr %ptradd532, align 1, !dbg !2788
  store i8 %254, ptr %c458, align 1, !dbg !2788
  %eq533 = icmp eq i8 %254, 48, !dbg !2789
  br label %and.phi534, !dbg !2789

and.phi534:                                       ; preds = %checkok531, %loop.cond515
  %val535 = phi i1 [ false, %loop.cond515 ], [ %eq533, %checkok531 ], !dbg !2789
  br i1 %val535, label %loop.body536, label %loop.exit538, !dbg !2789

loop.body536:                                     ; preds = %and.phi534
  %255 = load i64, ptr %lrp, align 8, !dbg !2790
  %sub537 = sub i64 %255, 1, !dbg !2790
  store i64 %sub537, ptr %lrp, align 8, !dbg !2790
  br label %loop.cond515, !dbg !2790

loop.exit538:                                     ; preds = %and.phi534
  br label %if.exit539, !dbg !2790

if.exit539:                                       ; preds = %loop.exit538, %and.phi511
  br label %if.exit540, !dbg !2790

if.exit540:                                       ; preds = %if.exit539, %loop.exit482
  br label %loop.cond541, !dbg !2792

loop.cond541:                                     ; preds = %checkok681, %if.exit540
  %256 = load i8, ptr %c458, align 1, !dbg !2793
  %zext542 = zext i8 %256 to i32, !dbg !2793
  %sub543 = sub i32 %zext542, 48, !dbg !2793
  %lt544 = icmp ult i32 %sub543, 10, !dbg !2793
  br i1 %lt544, label %or.phi547, label %or.rhs545, !dbg !2793

or.rhs545:                                        ; preds = %loop.cond541
  %257 = load i8, ptr %c458, align 1, !dbg !2795
  %eq546 = icmp eq i8 %257, 46, !dbg !2795
  br label %or.phi547, !dbg !2795

or.phi547:                                        ; preds = %or.rhs545, %loop.cond541
  %val548 = phi i1 [ true, %loop.cond541 ], [ %eq546, %or.rhs545 ], !dbg !2795
  br i1 %val548, label %loop.body549, label %loop.exit683, !dbg !2795

loop.body549:                                     ; preds = %or.phi547
  store i8 1, ptr %switch550, align 1
  br label %switch.entry551

switch.entry551:                                  ; preds = %loop.body549
  %258 = load i8, ptr %switch550, align 1
  %259 = trunc i8 %258 to i1
  %260 = load i8, ptr %c458, align 1, !dbg !2796
  %eq552 = icmp eq i8 %260, 46, !dbg !2796
  %eq553 = icmp eq i1 %eq552, %259, !dbg !2796
  br i1 %eq553, label %switch.case554, label %next_if557, !dbg !2796

switch.case554:                                   ; preds = %switch.entry551
  %261 = load i8, ptr %got_rad446, align 1, !dbg !2799
  %262 = trunc i8 %261 to i1, !dbg !2799
  br i1 %262, label %if.then555, label %if.exit556, !dbg !2799

if.then555:                                       ; preds = %switch.case554
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2801
  br label %err_retblock, !dbg !2801

if.exit556:                                       ; preds = %switch.case554
  store i8 1, ptr %got_rad446, align 1, !dbg !2802
  %263 = load i64, ptr %dc447, align 8, !dbg !2803
  store i64 %263, ptr %lrp, align 8, !dbg !2803
  br label %switch.exit658, !dbg !2803

next_if557:                                       ; preds = %switch.entry551
  %264 = load i32, ptr %k, align 4, !dbg !2804
  %lt558 = icmp slt i32 %264, 125, !dbg !2804
  %eq559 = icmp eq i1 %lt558, %259, !dbg !2804
  br i1 %eq559, label %switch.case560, label %next_if651, !dbg !2804

switch.case560:                                   ; preds = %next_if557
  %265 = load i64, ptr %dc447, align 8, !dbg !2805
  %add561 = add i64 %265, 1, !dbg !2805
  store i64 %add561, ptr %dc447, align 8, !dbg !2805
  %266 = load i8, ptr %c458, align 1, !dbg !2807
  %neq562 = icmp ne i8 %266, 48, !dbg !2807
  br i1 %neq562, label %if.then563, label %if.exit565, !dbg !2807

if.then563:                                       ; preds = %switch.case560
  %267 = load i64, ptr %dc447, align 8, !dbg !2808
  %trunc564 = trunc i64 %267 to i32, !dbg !2808
  store i32 %trunc564, ptr %lnz, align 4, !dbg !2808
  br label %if.exit565, !dbg !2808

if.exit565:                                       ; preds = %if.then563, %switch.case560
  %268 = load i32, ptr %j, align 4, !dbg !2809
  %i2b566 = icmp ne i32 %268, 0, !dbg !2809
  br i1 %i2b566, label %if.then567, label %if.else618, !dbg !2809

if.then567:                                       ; preds = %if.exit565
  %269 = load i32, ptr %k, align 4, !dbg !2810
  %sext = sext i32 %269 to i64, !dbg !2810
  %lt568 = icmp slt i64 %sext, 0, !dbg !2810
  %270 = call i1 @llvm.expect.i1(i1 %lt568, i1 false), !dbg !2810
  br i1 %270, label %panic569, label %checkok577, !dbg !2810

checkok577:                                       ; preds = %if.then567
  %ge578 = icmp sge i64 %sext, 128, !dbg !2810
  %271 = call i1 @llvm.expect.i1(i1 %ge578, i1 false), !dbg !2810
  br i1 %271, label %panic579, label %checkok589, !dbg !2810

checkok589:                                       ; preds = %checkok577
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext, !dbg !2810
  %272 = load i32, ptr %k, align 4, !dbg !2812
  %sext590 = sext i32 %272 to i64, !dbg !2812
  %lt591 = icmp slt i64 %sext590, 0, !dbg !2812
  %273 = call i1 @llvm.expect.i1(i1 %lt591, i1 false), !dbg !2812
  br i1 %273, label %panic592, label %checkok600, !dbg !2812

checkok600:                                       ; preds = %checkok589
  %ge601 = icmp sge i64 %sext590, 128, !dbg !2812
  %274 = call i1 @llvm.expect.i1(i1 %ge601, i1 false), !dbg !2812
  br i1 %274, label %panic602, label %checkok612, !dbg !2812

checkok612:                                       ; preds = %checkok600
  %ptroffset613 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext590, !dbg !2812
  %275 = load i32, ptr %ptroffset613, align 4, !dbg !2812
  %mul614 = mul i32 %275, 10, !dbg !2813
  %276 = load i8, ptr %c458, align 1, !dbg !2814
  %zext615 = zext i8 %276 to i32, !dbg !2814
  %add616 = add i32 %mul614, %zext615, !dbg !2813
  %sub617 = sub i32 %add616, 48, !dbg !2813
  store i32 %sub617, ptr %ptroffset, align 4, !dbg !2813
  br label %if.exit645, !dbg !2813

if.else618:                                       ; preds = %if.exit565
  %277 = load i32, ptr %k, align 4, !dbg !2815
  %sext619 = sext i32 %277 to i64, !dbg !2815
  %lt620 = icmp slt i64 %sext619, 0, !dbg !2815
  %278 = call i1 @llvm.expect.i1(i1 %lt620, i1 false), !dbg !2815
  br i1 %278, label %panic621, label %checkok629, !dbg !2815

checkok629:                                       ; preds = %if.else618
  %ge630 = icmp sge i64 %sext619, 128, !dbg !2815
  %279 = call i1 @llvm.expect.i1(i1 %ge630, i1 false), !dbg !2815
  br i1 %279, label %panic631, label %checkok641, !dbg !2815

checkok641:                                       ; preds = %checkok629
  %ptroffset642 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext619, !dbg !2815
  %280 = load i8, ptr %c458, align 1, !dbg !2817
  %zext643 = zext i8 %280 to i32, !dbg !2817
  %sub644 = sub i32 %zext643, 48, !dbg !2817
  store i32 %sub644, ptr %ptroffset642, align 4, !dbg !2817
  br label %if.exit645, !dbg !2817

if.exit645:                                       ; preds = %checkok641, %checkok612
  %281 = load i32, ptr %j, align 4, !dbg !2818
  %add646 = add i32 %281, 1, !dbg !2818
  store i32 %add646, ptr %j, align 4, !dbg !2818
  %eq647 = icmp eq i32 %add646, 9, !dbg !2819
  br i1 %eq647, label %if.then648, label %if.exit650, !dbg !2819

if.then648:                                       ; preds = %if.exit645
  %282 = load i32, ptr %k, align 4, !dbg !2820
  %add649 = add i32 %282, 1, !dbg !2820
  store i32 %add649, ptr %k, align 4, !dbg !2820
  store i32 0, ptr %j, align 4, !dbg !2822
  br label %if.exit650, !dbg !2822

if.exit650:                                       ; preds = %if.then648, %if.exit645
  store i8 1, ptr %got_digit431, align 1, !dbg !2823
  br label %switch.exit658, !dbg !2823

next_if651:                                       ; preds = %next_if557
  br label %switch.default, !dbg !2823

switch.default:                                   ; preds = %next_if651
  %283 = load i64, ptr %dc447, align 8, !dbg !2824
  %add652 = add i64 %283, 1, !dbg !2824
  store i64 %add652, ptr %dc447, align 8, !dbg !2824
  %284 = load i8, ptr %c458, align 1, !dbg !2826
  %neq653 = icmp ne i8 %284, 48, !dbg !2826
  br i1 %neq653, label %if.then654, label %if.exit657, !dbg !2826

if.then654:                                       ; preds = %switch.default
  %ptradd655 = getelementptr inbounds i8, ptr %x429, i64 496, !dbg !2827
  %285 = load i32, ptr %ptradd655, align 4, !dbg !2827
  %or656 = or i32 %285, 1, !dbg !2828
  store i32 %or656, ptr %ptradd655, align 4, !dbg !2828
  br label %if.exit657, !dbg !2828

if.exit657:                                       ; preds = %if.then654, %switch.default
  br label %switch.exit658, !dbg !2828

switch.exit658:                                   ; preds = %if.exit657, %if.exit650, %if.exit556
  %286 = load i64, ptr %index430, align 8, !dbg !2829
  %287 = load i64, ptr %last_char450, align 8, !dbg !2830
  %eq659 = icmp eq i64 %286, %287, !dbg !2829
  br i1 %eq659, label %if.then660, label %if.exit661, !dbg !2829

if.then660:                                       ; preds = %switch.exit658
  br label %loop.exit683, !dbg !2831

if.exit661:                                       ; preds = %switch.exit658
  %288 = load i64, ptr %index430, align 8, !dbg !2832
  %289 = load i64, ptr %last_char450, align 8, !dbg !2833
  %lt662 = icmp ult i64 %288, %289, !dbg !2832
  br i1 %lt662, label %assert_ok667, label %assert_fail663, !dbg !2832

assert_fail663:                                   ; preds = %if.exit661
  store %"char[]" { ptr @.panic_msg.82, i64 16 }, ptr %taddr664, align 8
  %290 = load [2 x i64], ptr %taddr664, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr665, align 8
  %291 = load [2 x i64], ptr %taddr665, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr666, align 8
  %292 = load [2 x i64], ptr %taddr666, align 8
  %293 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %293([2 x i64] %290, [2 x i64] %291, [2 x i64] %292, i32 112), !dbg !2832
  unreachable, !dbg !2832

assert_ok667:                                     ; preds = %if.exit661
  %ptradd668 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !2834
  %294 = load i64, ptr %ptradd668, align 8, !dbg !2834
  %295 = load ptr, ptr %chars421, align 8, !dbg !2834
  %296 = load i64, ptr %index430, align 8, !dbg !2835
  %add669 = add i64 %296, 1, !dbg !2835
  store i64 %add669, ptr %index430, align 8, !dbg !2835
  %ge670 = icmp uge i64 %add669, %294, !dbg !2835
  %297 = call i1 @llvm.expect.i1(i1 %ge670, i1 false), !dbg !2835
  br i1 %297, label %panic671, label %checkok681, !dbg !2835

checkok681:                                       ; preds = %assert_ok667
  %ptradd682 = getelementptr inbounds i8, ptr %295, i64 %add669, !dbg !2836
  %298 = load i8, ptr %ptradd682, align 1, !dbg !2836
  store i8 %298, ptr %c458, align 1, !dbg !2836
  br label %loop.cond541, !dbg !2836

loop.exit683:                                     ; preds = %if.then660, %or.phi547
  %299 = load i8, ptr %got_rad446, align 1, !dbg !2837
  %300 = trunc i8 %299 to i1, !dbg !2837
  %not684 = xor i1 %300, true, !dbg !2837
  br i1 %not684, label %if.then685, label %if.exit686, !dbg !2837

if.then685:                                       ; preds = %loop.exit683
  %301 = load i64, ptr %dc447, align 8, !dbg !2838
  store i64 %301, ptr %lrp, align 8, !dbg !2838
  br label %if.exit686, !dbg !2838

if.exit686:                                       ; preds = %if.then685, %loop.exit683
  %302 = load i8, ptr %got_digit431, align 1, !dbg !2839
  %303 = trunc i8 %302 to i1, !dbg !2839
  %not687 = xor i1 %303, true, !dbg !2839
  br i1 %not687, label %if.then688, label %if.exit689, !dbg !2839

if.then688:                                       ; preds = %if.exit686
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2840
  br label %err_retblock, !dbg !2840

if.exit689:                                       ; preds = %if.exit686
  %304 = load i8, ptr %c458, align 1, !dbg !2841
  %zext690 = zext i8 %304 to i32, !dbg !2841
  %or691 = or i32 %zext690, 32, !dbg !2841
  %eq692 = icmp eq i32 %or691, 101, !dbg !2841
  %check693 = icmp sge i32 %or691, 0, !dbg !2841
  %siui-eq694 = and i1 %check693, %eq692, !dbg !2841
  br i1 %siui-eq694, label %if.then695, label %if.else733, !dbg !2841

if.then695:                                       ; preds = %if.exit689
  %305 = load i64, ptr %last_char450, align 8, !dbg !2842
  %306 = load i64, ptr %index430, align 8, !dbg !2844
  %eq696 = icmp eq i64 %305, %306, !dbg !2842
  br i1 %eq696, label %if.then697, label %if.exit698, !dbg !2842

if.then697:                                       ; preds = %if.then695
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2845
  br label %err_retblock, !dbg !2845

if.exit698:                                       ; preds = %if.then695
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !2846, metadata !DIExpression()), !dbg !2847
  %307 = load %"char[]", ptr %chars421, align 8, !dbg !2848
  %308 = extractvalue %"char[]" %307, 0, !dbg !2848
  %309 = load i64, ptr %index430, align 8, !dbg !2849
  %add699 = add i64 %309, 1, !dbg !2849
  %310 = extractvalue %"char[]" %307, 1, !dbg !2849
  %gt700 = icmp sgt i64 %add699, %310, !dbg !2849
  %311 = call i1 @llvm.expect.i1(i1 %gt700, i1 false), !dbg !2849
  br i1 %311, label %panic701, label %checkok711, !dbg !2849

checkok711:                                       ; preds = %if.exit698
  %underflow712 = icmp slt i64 %add699, 0, !dbg !2850
  %312 = call i1 @llvm.expect.i1(i1 %underflow712, i1 false), !dbg !2850
  br i1 %312, label %panic713, label %checkok721, !dbg !2850

checkok721:                                       ; preds = %checkok711
  %size722 = sub i64 %310, %add699, !dbg !2849
  %ptradd723 = getelementptr inbounds i8, ptr %308, i64 %add699, !dbg !2849
  %313 = insertvalue %"char[]" undef, ptr %ptradd723, 0, !dbg !2849
  %314 = insertvalue %"char[]" %313, i64 %size722, 1, !dbg !2849
  store %"char[]" %314, ptr %taddr725, align 8
  %315 = load [2 x i64], ptr %taddr725, align 8
  %316 = call i64 @std.core.String.to_long(ptr %retparam724, [2 x i64] %315, i32 10), !dbg !2851
  %not_err726 = icmp eq i64 %316, 0, !dbg !2851
  %317 = call i1 @llvm.expect.i1(i1 %not_err726, i1 true), !dbg !2851
  br i1 %317, label %after_check727, label %else_block728, !dbg !2851

after_check727:                                   ; preds = %checkok721
  %318 = load i64, ptr %retparam724, align 8, !dbg !2851
  br label %phi_block731, !dbg !2851

else_block728:                                    ; preds = %checkok721
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var729, align 8, !dbg !2852
  br label %guard_block730, !dbg !2852

guard_block730:                                   ; preds = %else_block728
  %319 = load i64, ptr %error_var729, align 8, !dbg !2852
  store i64 %319, ptr %reterr, align 8, !dbg !2852
  br label %err_retblock, !dbg !2852

phi_block731:                                     ; preds = %after_check727
  store i64 %318, ptr %e10, align 8, !dbg !2852
  %320 = load i64, ptr %lrp, align 8, !dbg !2853
  %321 = load i64, ptr %e10, align 8, !dbg !2854
  %add732 = add i64 %320, %321, !dbg !2853
  store i64 %add732, ptr %lrp, align 8, !dbg !2853
  br label %if.exit737, !dbg !2853

if.else733:                                       ; preds = %if.exit689
  %322 = load i64, ptr %index430, align 8, !dbg !2855
  %323 = load i64, ptr %last_char450, align 8, !dbg !2856
  %neq734 = icmp ne i64 %322, %323, !dbg !2855
  br i1 %neq734, label %if.then735, label %if.exit736, !dbg !2855

if.then735:                                       ; preds = %if.else733
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !2857
  br label %err_retblock, !dbg !2857

if.exit736:                                       ; preds = %if.else733
  br label %if.exit737, !dbg !2857

if.exit737:                                       ; preds = %if.exit736, %phi_block731
  %324 = load i32, ptr %x429, align 4, !dbg !2859
  %i2nb738 = icmp eq i32 %324, 0, !dbg !2859
  br i1 %i2nb738, label %if.then739, label %if.exit742, !dbg !2859

if.then739:                                       ; preds = %if.exit737
  %325 = load i32, ptr %sign422, align 4, !dbg !2860
  %sifp740 = sitofp i32 %325 to double, !dbg !2860
  %fmul741 = fmul double %sifp740, 0.000000e+00, !dbg !2860
  store double %fmul741, ptr %blockret423, align 8, !dbg !2860
  br label %expr_block.exit1947, !dbg !2860

if.exit742:                                       ; preds = %if.exit737
  %326 = load i64, ptr %lrp, align 8, !dbg !2861
  %327 = load i64, ptr %dc447, align 8, !dbg !2862
  %eq743 = icmp eq i64 %326, %327, !dbg !2861
  br i1 %eq743, label %and.rhs744, label %and.phi746, !dbg !2861

and.rhs744:                                       ; preds = %if.exit742
  %328 = load i64, ptr %dc447, align 8, !dbg !2863
  %lt745 = icmp slt i64 %328, 10, !dbg !2863
  br label %and.phi746, !dbg !2863

and.phi746:                                       ; preds = %and.rhs744, %if.exit742
  %val747 = phi i1 [ false, %if.exit742 ], [ %lt745, %and.rhs744 ], !dbg !2863
  br i1 %val747, label %and.rhs748, label %and.phi754, !dbg !2863

and.rhs748:                                       ; preds = %and.phi746
  br i1 true, label %or.phi752, label %or.rhs749, !dbg !2864

or.rhs749:                                        ; preds = %and.rhs748
  %329 = load i32, ptr %x429, align 4, !dbg !2865
  %zext750 = zext i32 %329 to i64, !dbg !2865
  %lshr = lshr i64 %zext750, 53, !dbg !2866
  %330 = freeze i64 %lshr, !dbg !2866
  %eq751 = icmp eq i64 0, %330, !dbg !2866
  br label %or.phi752, !dbg !2866

or.phi752:                                        ; preds = %or.rhs749, %and.rhs748
  %val753 = phi i1 [ true, %and.rhs748 ], [ %eq751, %or.rhs749 ], !dbg !2866
  br label %and.phi754, !dbg !2866

and.phi754:                                       ; preds = %or.phi752, %and.phi746
  %val755 = phi i1 [ false, %and.phi746 ], [ %val753, %or.phi752 ], !dbg !2866
  br i1 %val755, label %if.then756, label %if.exit760, !dbg !2866

if.then756:                                       ; preds = %and.phi754
  %331 = load i32, ptr %sign422, align 4, !dbg !2867
  %sifp757 = sitofp i32 %331 to double, !dbg !2867
  %332 = load i32, ptr %x429, align 4, !dbg !2868
  %uifp758 = uitofp i32 %332 to double, !dbg !2868
  %fmul759 = fmul double %sifp757, %uifp758, !dbg !2867
  store double %fmul759, ptr %blockret423, align 8, !dbg !2867
  br label %expr_block.exit1947, !dbg !2867

if.exit760:                                       ; preds = %and.phi754
  %333 = load i64, ptr %lrp, align 8, !dbg !2869
  %gt761 = icmp sgt i64 %333, 537, !dbg !2869
  br i1 %gt761, label %if.then762, label %if.exit763, !dbg !2869

if.then762:                                       ; preds = %if.exit760
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2870
  br label %err_retblock, !dbg !2870

if.exit763:                                       ; preds = %if.exit760
  %334 = load i64, ptr %lrp, align 8, !dbg !2871
  %lt764 = icmp slt i64 %334, -1180, !dbg !2871
  br i1 %lt764, label %if.then765, label %if.exit766, !dbg !2871

if.then765:                                       ; preds = %if.exit763
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !2872
  br label %err_retblock, !dbg !2872

if.exit766:                                       ; preds = %if.exit763
  %335 = load i32, ptr %j, align 4, !dbg !2873
  %i2b767 = icmp ne i32 %335, 0, !dbg !2873
  br i1 %i2b767, label %if.then768, label %if.exit800, !dbg !2873

if.then768:                                       ; preds = %if.exit766
  br label %loop.cond769, !dbg !2874

loop.cond769:                                     ; preds = %checkok794, %if.then768
  %336 = load i32, ptr %j, align 4, !dbg !2876
  %lt770 = icmp slt i32 %336, 9, !dbg !2876
  br i1 %lt770, label %loop.body771, label %loop.exit798, !dbg !2876

loop.body771:                                     ; preds = %loop.cond769
  %337 = load i32, ptr %k, align 4, !dbg !2878
  %sext772 = sext i32 %337 to i64, !dbg !2878
  %lt773 = icmp slt i64 %sext772, 0, !dbg !2878
  %338 = call i1 @llvm.expect.i1(i1 %lt773, i1 false), !dbg !2878
  br i1 %338, label %panic774, label %checkok782, !dbg !2878

checkok782:                                       ; preds = %loop.body771
  %ge783 = icmp sge i64 %sext772, 128, !dbg !2878
  %339 = call i1 @llvm.expect.i1(i1 %ge783, i1 false), !dbg !2878
  br i1 %339, label %panic784, label %checkok794, !dbg !2878

checkok794:                                       ; preds = %checkok782
  %ptroffset795 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext772, !dbg !2878
  %340 = load i32, ptr %ptroffset795, align 4, !dbg !2878
  %mul796 = mul i32 %340, 10, !dbg !2879
  store i32 %mul796, ptr %ptroffset795, align 4, !dbg !2879
  %341 = load i32, ptr %j, align 4, !dbg !2880
  %add797 = add i32 %341, 1, !dbg !2880
  store i32 %add797, ptr %j, align 4, !dbg !2880
  br label %loop.cond769, !dbg !2880

loop.exit798:                                     ; preds = %loop.cond769
  %342 = load i32, ptr %k, align 4, !dbg !2881
  %add799 = add i32 %342, 1, !dbg !2881
  store i32 %add799, ptr %k, align 4, !dbg !2881
  store i32 0, ptr %j, align 4, !dbg !2882
  br label %if.exit800, !dbg !2882

if.exit800:                                       ; preds = %loop.exit798, %if.exit766
  call void @llvm.dbg.declare(metadata ptr %a, metadata !2883, metadata !DIExpression()), !dbg !2884
  store i32 0, ptr %a, align 4, !dbg !2884
  call void @llvm.dbg.declare(metadata ptr %z, metadata !2885, metadata !DIExpression()), !dbg !2886
  %343 = load i32, ptr %k, align 4, !dbg !2887
  store i32 %343, ptr %z, align 4, !dbg !2887
  call void @llvm.dbg.declare(metadata ptr %e2801, metadata !2888, metadata !DIExpression()), !dbg !2889
  store i32 0, ptr %e2801, align 4, !dbg !2889
  call void @llvm.dbg.declare(metadata ptr %rp802, metadata !2890, metadata !DIExpression()), !dbg !2891
  %344 = load i64, ptr %lrp, align 8, !dbg !2892
  store i64 %344, ptr %rp802, align 8, !dbg !2892
  %345 = load i32, ptr %lnz, align 4, !dbg !2893
  %lt803 = icmp slt i32 %345, 9, !dbg !2893
  br i1 %lt803, label %and.rhs804, label %and.phi806, !dbg !2893

and.rhs804:                                       ; preds = %if.exit800
  %346 = load i32, ptr %lnz, align 4, !dbg !2894
  %sext805 = sext i32 %346 to i64, !dbg !2894
  %347 = load i64, ptr %rp802, align 8, !dbg !2895
  %le = icmp sle i64 %sext805, %347, !dbg !2894
  br label %and.phi806, !dbg !2894

and.phi806:                                       ; preds = %and.rhs804, %if.exit800
  %val807 = phi i1 [ false, %if.exit800 ], [ %le, %and.rhs804 ], !dbg !2894
  br i1 %val807, label %and.rhs808, label %and.phi810, !dbg !2894

and.rhs808:                                       ; preds = %and.phi806
  %348 = load i64, ptr %rp802, align 8, !dbg !2896
  %lt809 = icmp slt i64 %348, 18, !dbg !2896
  br label %and.phi810, !dbg !2896

and.phi810:                                       ; preds = %and.rhs808, %and.phi806
  %val811 = phi i1 [ false, %and.phi806 ], [ %lt809, %and.rhs808 ], !dbg !2896
  br i1 %val811, label %if.then812, label %if.exit906, !dbg !2896

if.then812:                                       ; preds = %and.phi810
  %349 = load i64, ptr %rp802, align 8, !dbg !2897
  %eq813 = icmp eq i64 %349, 9, !dbg !2897
  br i1 %eq813, label %if.then814, label %if.exit818, !dbg !2897

if.then814:                                       ; preds = %if.then812
  %350 = load i32, ptr %sign422, align 4, !dbg !2899
  %sifp815 = sitofp i32 %350 to double, !dbg !2899
  %351 = load i32, ptr %x429, align 4, !dbg !2900
  %uifp816 = uitofp i32 %351 to double, !dbg !2900
  %fmul817 = fmul double %sifp815, %uifp816, !dbg !2899
  store double %fmul817, ptr %blockret423, align 8, !dbg !2899
  br label %expr_block.exit1947, !dbg !2899

if.exit818:                                       ; preds = %if.then812
  %352 = load i64, ptr %rp802, align 8, !dbg !2901
  %lt819 = icmp slt i64 %352, 9, !dbg !2901
  br i1 %lt819, label %if.then820, label %if.exit855, !dbg !2901

if.then820:                                       ; preds = %if.exit818
  %353 = load i32, ptr %sign422, align 4, !dbg !2902
  %sifp821 = sitofp i32 %353 to double, !dbg !2902
  %354 = load i32, ptr %x429, align 4, !dbg !2903
  %uifp822 = uitofp i32 %354 to double, !dbg !2903
  %fmul823 = fmul double %sifp821, %uifp822, !dbg !2902
  %355 = load i64, ptr %rp802, align 8, !dbg !2904
  %sub824 = sub i64 8, %355, !dbg !2905
  %lt825 = icmp slt i64 %sub824, 0, !dbg !2905
  %356 = call i1 @llvm.expect.i1(i1 %lt825, i1 false), !dbg !2905
  br i1 %356, label %panic826, label %checkok834, !dbg !2905

checkok834:                                       ; preds = %if.then820
  %ge835 = icmp sge i64 %sub824, 8, !dbg !2905
  %357 = call i1 @llvm.expect.i1(i1 %ge835, i1 false), !dbg !2905
  br i1 %357, label %panic836, label %checkok846, !dbg !2905

checkok846:                                       ; preds = %checkok834
  %ptroffset847 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub824, !dbg !2905
  %358 = load i32, ptr %ptroffset847, align 4, !dbg !2905
  %sifp848 = sitofp i32 %358 to double, !dbg !2905
  %zero = fcmp ueq double %sifp848, 0.000000e+00, !dbg !2902
  %359 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !2902
  br i1 %359, label %panic849, label %checkok853, !dbg !2902

checkok853:                                       ; preds = %checkok846
  %fdiv854 = fdiv double %fmul823, %sifp848, !dbg !2902
  store double %fdiv854, ptr %blockret423, align 8, !dbg !2902
  br label %expr_block.exit1947, !dbg !2902

if.exit855:                                       ; preds = %if.exit818
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !2906, metadata !DIExpression()), !dbg !2907
  %360 = load i64, ptr %rp802, align 8, !dbg !2908
  %sub856 = sub i64 %360, 9, !dbg !2909
  %trunc857 = trunc i64 %sub856 to i32, !dbg !2909
  %mul858 = mul i32 3, %trunc857, !dbg !2910
  %sub859 = sub i32 53, %mul858, !dbg !2911
  store i32 %sub859, ptr %bitlim, align 4, !dbg !2911
  %361 = load i32, ptr %bitlim, align 4, !dbg !2912
  %gt860 = icmp sgt i32 %361, 30, !dbg !2912
  br i1 %gt860, label %or.phi873, label %or.rhs861, !dbg !2912

or.rhs861:                                        ; preds = %if.exit855
  %362 = load i32, ptr %x429, align 4, !dbg !2913
  %363 = load i32, ptr %bitlim, align 4, !dbg !2914
  %shift_exceeds = icmp uge i32 %363, 32, !dbg !2915
  %364 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !2915
  br i1 %364, label %panic862, label %checkok870, !dbg !2915

checkok870:                                       ; preds = %or.rhs861
  %lshr871 = lshr i32 %362, %363, !dbg !2915
  %365 = freeze i32 %lshr871, !dbg !2915
  %eq872 = icmp eq i32 0, %365, !dbg !2915
  br label %or.phi873, !dbg !2915

or.phi873:                                        ; preds = %checkok870, %if.exit855
  %val874 = phi i1 [ true, %if.exit855 ], [ %eq872, %checkok870 ], !dbg !2915
  br i1 %val874, label %if.then875, label %if.exit905, !dbg !2915

if.then875:                                       ; preds = %or.phi873
  %366 = load i32, ptr %sign422, align 4, !dbg !2916
  %sifp876 = sitofp i32 %366 to double, !dbg !2916
  %367 = load i32, ptr %x429, align 4, !dbg !2917
  %uifp877 = uitofp i32 %367 to double, !dbg !2917
  %fmul878 = fmul double %sifp876, %uifp877, !dbg !2916
  %368 = load i64, ptr %rp802, align 8, !dbg !2918
  %sub879 = sub i64 %368, 10, !dbg !2918
  %lt880 = icmp slt i64 %sub879, 0, !dbg !2918
  %369 = call i1 @llvm.expect.i1(i1 %lt880, i1 false), !dbg !2918
  br i1 %369, label %panic881, label %checkok889, !dbg !2918

checkok889:                                       ; preds = %if.then875
  %ge890 = icmp sge i64 %sub879, 8, !dbg !2918
  %370 = call i1 @llvm.expect.i1(i1 %ge890, i1 false), !dbg !2918
  br i1 %370, label %panic891, label %checkok901, !dbg !2918

checkok901:                                       ; preds = %checkok889
  %ptroffset902 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub879, !dbg !2918
  %371 = load i32, ptr %ptroffset902, align 4, !dbg !2918
  %sifp903 = sitofp i32 %371 to double, !dbg !2918
  %fmul904 = fmul double %fmul878, %sifp903, !dbg !2916
  store double %fmul904, ptr %blockret423, align 8, !dbg !2916
  br label %expr_block.exit1947, !dbg !2916

if.exit905:                                       ; preds = %or.phi873
  br label %if.exit906, !dbg !2916

if.exit906:                                       ; preds = %if.exit905, %and.phi810
  %372 = load i64, ptr %rp802, align 8, !dbg !2919
  %smod = srem i64 %372, 9, !dbg !2919
  %i2b907 = icmp ne i64 %smod, 0, !dbg !2919
  br i1 %i2b907, label %if.then908, label %if.exit1101, !dbg !2919

if.then908:                                       ; preds = %if.exit906
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !2920, metadata !DIExpression()), !dbg !2922
  %373 = load i64, ptr %rp802, align 8, !dbg !2923
  %ge909 = icmp sge i64 %373, 0, !dbg !2923
  br i1 %ge909, label %cond.lhs, label %cond.rhs, !dbg !2923

cond.lhs:                                         ; preds = %if.then908
  %374 = load i64, ptr %rp802, align 8, !dbg !2924
  %smod910 = srem i64 %374, 9, !dbg !2924
  br label %cond.phi, !dbg !2924

cond.rhs:                                         ; preds = %if.then908
  %375 = load i64, ptr %rp802, align 8, !dbg !2925
  %smod911 = srem i64 %375, 9, !dbg !2925
  %add912 = add i64 %smod911, 9, !dbg !2925
  br label %cond.phi, !dbg !2925

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val913 = phi i64 [ %smod910, %cond.lhs ], [ %add912, %cond.rhs ], !dbg !2925
  store i64 %val913, ptr %rpm9, align 8, !dbg !2925
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !2926, metadata !DIExpression()), !dbg !2927
  %376 = load i64, ptr %rpm9, align 8, !dbg !2928
  %sub914 = sub i64 8, %376, !dbg !2929
  %lt915 = icmp slt i64 %sub914, 0, !dbg !2929
  %377 = call i1 @llvm.expect.i1(i1 %lt915, i1 false), !dbg !2929
  br i1 %377, label %panic916, label %checkok924, !dbg !2929

checkok924:                                       ; preds = %cond.phi
  %ge925 = icmp sge i64 %sub914, 8, !dbg !2929
  %378 = call i1 @llvm.expect.i1(i1 %ge925, i1 false), !dbg !2929
  br i1 %378, label %panic926, label %checkok936, !dbg !2929

checkok936:                                       ; preds = %checkok924
  %ptroffset937 = getelementptr inbounds [4 x i8], ptr @to_double.P10S, i64 %sub914, !dbg !2929
  %379 = load i32, ptr %ptroffset937, align 4, !dbg !2929
  store i32 %379, ptr %p10, align 4, !dbg !2929
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !2930, metadata !DIExpression()), !dbg !2931
  store i32 0, ptr %carry, align 4, !dbg !2932
  %380 = load i32, ptr %a, align 4, !dbg !2933
  store i32 %380, ptr %k, align 4, !dbg !2933
  br label %loop.cond938, !dbg !2933

loop.cond938:                                     ; preds = %if.exit1068, %checkok936
  %381 = load i32, ptr %k, align 4, !dbg !2935
  %382 = load i32, ptr %z, align 4, !dbg !2936
  %neq939 = icmp ne i32 %381, %382, !dbg !2935
  br i1 %neq939, label %loop.body940, label %loop.exit1070, !dbg !2935

loop.body940:                                     ; preds = %loop.cond938
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !2937, metadata !DIExpression()), !dbg !2939
  %383 = load i32, ptr %k, align 4, !dbg !2940
  %sext941 = sext i32 %383 to i64, !dbg !2940
  %lt942 = icmp slt i64 %sext941, 0, !dbg !2940
  %384 = call i1 @llvm.expect.i1(i1 %lt942, i1 false), !dbg !2940
  br i1 %384, label %panic943, label %checkok951, !dbg !2940

checkok951:                                       ; preds = %loop.body940
  %ge952 = icmp sge i64 %sext941, 128, !dbg !2940
  %385 = call i1 @llvm.expect.i1(i1 %ge952, i1 false), !dbg !2940
  br i1 %385, label %panic953, label %checkok963, !dbg !2940

checkok963:                                       ; preds = %checkok951
  %ptroffset964 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext941, !dbg !2940
  %386 = load i32, ptr %ptroffset964, align 4, !dbg !2940
  %387 = load i32, ptr %p10, align 4, !dbg !2941
  %zero965 = icmp eq i32 %387, 0, !dbg !2942
  %388 = call i1 @llvm.expect.i1(i1 %zero965, i1 false), !dbg !2942
  br i1 %388, label %panic966, label %checkok970, !dbg !2942

checkok970:                                       ; preds = %checkok963
  %smod971 = srem i32 %386, %387, !dbg !2942
  store i32 %smod971, ptr %tmp, align 4, !dbg !2942
  %389 = load i32, ptr %k, align 4, !dbg !2943
  %sext972 = sext i32 %389 to i64, !dbg !2943
  %lt973 = icmp slt i64 %sext972, 0, !dbg !2943
  %390 = call i1 @llvm.expect.i1(i1 %lt973, i1 false), !dbg !2943
  br i1 %390, label %panic974, label %checkok982, !dbg !2943

checkok982:                                       ; preds = %checkok970
  %ge983 = icmp sge i64 %sext972, 128, !dbg !2943
  %391 = call i1 @llvm.expect.i1(i1 %ge983, i1 false), !dbg !2943
  br i1 %391, label %panic984, label %checkok994, !dbg !2943

checkok994:                                       ; preds = %checkok982
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext972, !dbg !2943
  %392 = load i32, ptr %k, align 4, !dbg !2944
  %sext996 = sext i32 %392 to i64, !dbg !2944
  %lt997 = icmp slt i64 %sext996, 0, !dbg !2944
  %393 = call i1 @llvm.expect.i1(i1 %lt997, i1 false), !dbg !2944
  br i1 %393, label %panic998, label %checkok1006, !dbg !2944

checkok1006:                                      ; preds = %checkok994
  %ge1007 = icmp sge i64 %sext996, 128, !dbg !2944
  %394 = call i1 @llvm.expect.i1(i1 %ge1007, i1 false), !dbg !2944
  br i1 %394, label %panic1008, label %checkok1018, !dbg !2944

checkok1018:                                      ; preds = %checkok1006
  %ptroffset1019 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext996, !dbg !2944
  %395 = load i32, ptr %ptroffset1019, align 4, !dbg !2944
  %396 = load i32, ptr %p10, align 4, !dbg !2945
  %zero1020 = icmp eq i32 %396, 0, !dbg !2946
  %397 = call i1 @llvm.expect.i1(i1 %zero1020, i1 false), !dbg !2946
  br i1 %397, label %panic1021, label %checkok1025, !dbg !2946

checkok1025:                                      ; preds = %checkok1018
  %sdiv = sdiv i32 %395, %396, !dbg !2946
  %398 = load i32, ptr %carry, align 4, !dbg !2947
  %add1026 = add i32 %sdiv, %398, !dbg !2946
  store i32 %add1026, ptr %ptroffset995, align 4, !dbg !2946
  %399 = load i32, ptr %p10, align 4, !dbg !2948
  %zero1027 = icmp eq i32 %399, 0, !dbg !2949
  %400 = call i1 @llvm.expect.i1(i1 %zero1027, i1 false), !dbg !2949
  br i1 %400, label %panic1028, label %checkok1032, !dbg !2949

checkok1032:                                      ; preds = %checkok1025
  %sdiv1033 = sdiv i32 1000000000, %399, !dbg !2949
  %401 = load i32, ptr %tmp, align 4, !dbg !2950
  %mul1034 = mul i32 %sdiv1033, %401, !dbg !2949
  store i32 %mul1034, ptr %carry, align 4, !dbg !2949
  %402 = load i32, ptr %k, align 4, !dbg !2951
  %403 = load i32, ptr %a, align 4, !dbg !2952
  %eq1035 = icmp eq i32 %402, %403, !dbg !2951
  br i1 %eq1035, label %and.rhs1036, label %and.phi1062, !dbg !2951

and.rhs1036:                                      ; preds = %checkok1032
  %404 = load i32, ptr %k, align 4, !dbg !2953
  %sext1037 = sext i32 %404 to i64, !dbg !2953
  %lt1038 = icmp slt i64 %sext1037, 0, !dbg !2953
  %405 = call i1 @llvm.expect.i1(i1 %lt1038, i1 false), !dbg !2953
  br i1 %405, label %panic1039, label %checkok1047, !dbg !2953

checkok1047:                                      ; preds = %and.rhs1036
  %ge1048 = icmp sge i64 %sext1037, 128, !dbg !2953
  %406 = call i1 @llvm.expect.i1(i1 %ge1048, i1 false), !dbg !2953
  br i1 %406, label %panic1049, label %checkok1059, !dbg !2953

checkok1059:                                      ; preds = %checkok1047
  %ptroffset1060 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1037, !dbg !2953
  %407 = load i32, ptr %ptroffset1060, align 4, !dbg !2953
  %i2nb1061 = icmp eq i32 %407, 0, !dbg !2953
  br label %and.phi1062, !dbg !2953

and.phi1062:                                      ; preds = %checkok1059, %checkok1032
  %val1063 = phi i1 [ false, %checkok1032 ], [ %i2nb1061, %checkok1059 ], !dbg !2953
  br i1 %val1063, label %if.then1064, label %if.exit1068, !dbg !2953

if.then1064:                                      ; preds = %and.phi1062
  %408 = load i32, ptr %a, align 4, !dbg !2954
  %add1065 = add i32 %408, 1, !dbg !2954
  %and1066 = and i32 %add1065, 127, !dbg !2954
  store i32 %and1066, ptr %a, align 4, !dbg !2954
  %409 = load i64, ptr %rp802, align 8, !dbg !2956
  %sub1067 = sub i64 %409, 9, !dbg !2956
  store i64 %sub1067, ptr %rp802, align 8, !dbg !2956
  br label %if.exit1068, !dbg !2956

if.exit1068:                                      ; preds = %if.then1064, %and.phi1062
  %410 = load i32, ptr %k, align 4, !dbg !2957
  %add1069 = add i32 %410, 1, !dbg !2957
  store i32 %add1069, ptr %k, align 4, !dbg !2957
  br label %loop.cond938, !dbg !2957

loop.exit1070:                                    ; preds = %loop.cond938
  %411 = load i32, ptr %carry, align 4, !dbg !2958
  %i2b1071 = icmp ne i32 %411, 0, !dbg !2958
  br i1 %i2b1071, label %if.then1072, label %if.exit1098, !dbg !2958

if.then1072:                                      ; preds = %loop.exit1070
  %412 = load i32, ptr %z, align 4, !dbg !2959
  %add1073 = add i32 %412, 1, !dbg !2959
  store i32 %add1073, ptr %z, align 4, !dbg !2959
  %sext1074 = sext i32 %412 to i64, !dbg !2959
  %lt1075 = icmp slt i64 %sext1074, 0, !dbg !2959
  %413 = call i1 @llvm.expect.i1(i1 %lt1075, i1 false), !dbg !2959
  br i1 %413, label %panic1076, label %checkok1084, !dbg !2959

checkok1084:                                      ; preds = %if.then1072
  %ge1085 = icmp sge i64 %sext1074, 128, !dbg !2959
  %414 = call i1 @llvm.expect.i1(i1 %ge1085, i1 false), !dbg !2959
  br i1 %414, label %panic1086, label %checkok1096, !dbg !2959

checkok1096:                                      ; preds = %checkok1084
  %ptroffset1097 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1074, !dbg !2959
  %415 = load i32, ptr %carry, align 4, !dbg !2960
  store i32 %415, ptr %ptroffset1097, align 4, !dbg !2960
  br label %if.exit1098, !dbg !2960

if.exit1098:                                      ; preds = %checkok1096, %loop.exit1070
  %416 = load i64, ptr %rp802, align 8, !dbg !2961
  %417 = load i64, ptr %rpm9, align 8, !dbg !2962
  %sub1099 = sub i64 9, %417, !dbg !2963
  %add1100 = add i64 %416, %sub1099, !dbg !2961
  store i64 %add1100, ptr %rp802, align 8, !dbg !2961
  br label %if.exit1101, !dbg !2961

if.exit1101:                                      ; preds = %if.exit1098, %if.exit906
  br label %loop.cond1102, !dbg !2964

loop.cond1102:                                    ; preds = %if.exit1355, %if.exit1101
  %418 = load i64, ptr %rp802, align 8, !dbg !2965
  %lt1103 = icmp slt i64 %418, 18, !dbg !2965
  br i1 %lt1103, label %or.phi1134, label %or.rhs1104, !dbg !2965

or.rhs1104:                                       ; preds = %loop.cond1102
  %419 = load i64, ptr %rp802, align 8, !dbg !2967
  %eq1105 = icmp eq i64 %419, 18, !dbg !2967
  br i1 %eq1105, label %and.rhs1106, label %and.phi1132, !dbg !2967

and.rhs1106:                                      ; preds = %or.rhs1104
  %420 = load i32, ptr %a, align 4, !dbg !2968
  %sext1107 = sext i32 %420 to i64, !dbg !2968
  %lt1108 = icmp slt i64 %sext1107, 0, !dbg !2968
  %421 = call i1 @llvm.expect.i1(i1 %lt1108, i1 false), !dbg !2968
  br i1 %421, label %panic1109, label %checkok1117, !dbg !2968

checkok1117:                                      ; preds = %and.rhs1106
  %ge1118 = icmp sge i64 %sext1107, 128, !dbg !2968
  %422 = call i1 @llvm.expect.i1(i1 %ge1118, i1 false), !dbg !2968
  br i1 %422, label %panic1119, label %checkok1129, !dbg !2968

checkok1129:                                      ; preds = %checkok1117
  %ptroffset1130 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1107, !dbg !2968
  %423 = load i32, ptr %ptroffset1130, align 4, !dbg !2968
  %lt1131 = icmp ult i32 %423, 9007199, !dbg !2969
  br label %and.phi1132, !dbg !2969

and.phi1132:                                      ; preds = %checkok1129, %or.rhs1104
  %val1133 = phi i1 [ false, %or.rhs1104 ], [ %lt1131, %checkok1129 ], !dbg !2969
  br label %or.phi1134, !dbg !2969

or.phi1134:                                       ; preds = %and.phi1132, %loop.cond1102
  %val1135 = phi i1 [ true, %loop.cond1102 ], [ %val1133, %and.phi1132 ], !dbg !2969
  br i1 %val1135, label %loop.body1136, label %loop.exit1356, !dbg !2969

loop.body1136:                                    ; preds = %or.phi1134
  call void @llvm.dbg.declare(metadata ptr %carry1137, metadata !2970, metadata !DIExpression()), !dbg !2972
  store i32 0, ptr %carry1137, align 4, !dbg !2973
  %424 = load i32, ptr %e2801, align 4, !dbg !2974
  %sub1138 = sub i32 %424, 29, !dbg !2974
  store i32 %sub1138, ptr %e2801, align 4, !dbg !2974
  %425 = load i32, ptr %z, align 4, !dbg !2975
  %sub1139 = sub i32 %425, 1, !dbg !2975
  %and1140 = and i32 %sub1139, 127, !dbg !2975
  store i32 %and1140, ptr %k, align 4, !dbg !2975
  br label %loop.body1141, !dbg !2975

loop.body1141:                                    ; preds = %if.exit1266, %loop.body1136
  call void @llvm.dbg.declare(metadata ptr %tmp1142, metadata !2977, metadata !DIExpression()), !dbg !2979
  %426 = load i32, ptr %k, align 4, !dbg !2980
  %sext1143 = sext i32 %426 to i64, !dbg !2980
  %lt1144 = icmp slt i64 %sext1143, 0, !dbg !2980
  %427 = call i1 @llvm.expect.i1(i1 %lt1144, i1 false), !dbg !2980
  br i1 %427, label %panic1145, label %checkok1153, !dbg !2980

checkok1153:                                      ; preds = %loop.body1141
  %ge1154 = icmp sge i64 %sext1143, 128, !dbg !2980
  %428 = call i1 @llvm.expect.i1(i1 %ge1154, i1 false), !dbg !2980
  br i1 %428, label %panic1155, label %checkok1165, !dbg !2980

checkok1165:                                      ; preds = %checkok1153
  %ptroffset1166 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1143, !dbg !2980
  %429 = load i32, ptr %ptroffset1166, align 4, !dbg !2980
  %zext1167 = zext i32 %429 to i64, !dbg !2980
  %shl = shl i64 %zext1167, 29, !dbg !2981
  %430 = freeze i64 %shl, !dbg !2981
  %431 = load i32, ptr %carry1137, align 4, !dbg !2982
  %zext1168 = zext i32 %431 to i64, !dbg !2982
  %add1169 = add i64 %430, %zext1168, !dbg !2981
  store i64 %add1169, ptr %tmp1142, align 8, !dbg !2981
  %432 = load i64, ptr %tmp1142, align 8, !dbg !2983
  %lt1170 = icmp ult i64 1000000000, %432, !dbg !2983
  br i1 %lt1170, label %if.then1171, label %if.else1200, !dbg !2983

if.then1171:                                      ; preds = %checkok1165
  %433 = load i64, ptr %tmp1142, align 8, !dbg !2984
  %sdiv1172 = sdiv i64 %433, 1000000000, !dbg !2986
  %trunc1173 = trunc i64 %sdiv1172 to i32, !dbg !2986
  store i32 %trunc1173, ptr %carry1137, align 4, !dbg !2986
  %434 = load i32, ptr %k, align 4, !dbg !2987
  %sext1174 = sext i32 %434 to i64, !dbg !2987
  %lt1175 = icmp slt i64 %sext1174, 0, !dbg !2987
  %435 = call i1 @llvm.expect.i1(i1 %lt1175, i1 false), !dbg !2987
  br i1 %435, label %panic1176, label %checkok1184, !dbg !2987

checkok1184:                                      ; preds = %if.then1171
  %ge1185 = icmp sge i64 %sext1174, 128, !dbg !2987
  %436 = call i1 @llvm.expect.i1(i1 %ge1185, i1 false), !dbg !2987
  br i1 %436, label %panic1186, label %checkok1196, !dbg !2987

checkok1196:                                      ; preds = %checkok1184
  %ptroffset1197 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1174, !dbg !2987
  %437 = load i64, ptr %tmp1142, align 8, !dbg !2988
  %smod1198 = srem i64 %437, 1000000000, !dbg !2989
  %trunc1199 = trunc i64 %smod1198 to i32, !dbg !2989
  store i32 %trunc1199, ptr %ptroffset1197, align 4, !dbg !2989
  br label %if.exit1226, !dbg !2989

if.else1200:                                      ; preds = %checkok1165
  store i32 0, ptr %carry1137, align 4, !dbg !2990
  %438 = load i32, ptr %k, align 4, !dbg !2992
  %sext1201 = sext i32 %438 to i64, !dbg !2992
  %lt1202 = icmp slt i64 %sext1201, 0, !dbg !2992
  %439 = call i1 @llvm.expect.i1(i1 %lt1202, i1 false), !dbg !2992
  br i1 %439, label %panic1203, label %checkok1211, !dbg !2992

checkok1211:                                      ; preds = %if.else1200
  %ge1212 = icmp sge i64 %sext1201, 128, !dbg !2992
  %440 = call i1 @llvm.expect.i1(i1 %ge1212, i1 false), !dbg !2992
  br i1 %440, label %panic1213, label %checkok1223, !dbg !2992

checkok1223:                                      ; preds = %checkok1211
  %ptroffset1224 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1201, !dbg !2992
  %441 = load i64, ptr %tmp1142, align 8, !dbg !2993
  %trunc1225 = trunc i64 %441 to i32, !dbg !2993
  store i32 %trunc1225, ptr %ptroffset1224, align 4, !dbg !2993
  br label %if.exit1226, !dbg !2993

if.exit1226:                                      ; preds = %checkok1223, %checkok1196
  %442 = load i32, ptr %k, align 4, !dbg !2994
  %443 = load i32, ptr %z, align 4, !dbg !2995
  %sub1227 = sub i32 %443, 1, !dbg !2995
  %and1228 = and i32 %sub1227, 127, !dbg !2995
  %eq1229 = icmp eq i32 %442, %and1228, !dbg !2994
  br i1 %eq1229, label %and.rhs1230, label %and.phi1232, !dbg !2994

and.rhs1230:                                      ; preds = %if.exit1226
  %444 = load i32, ptr %k, align 4, !dbg !2996
  %445 = load i32, ptr %a, align 4, !dbg !2997
  %neq1231 = icmp ne i32 %444, %445, !dbg !2996
  br label %and.phi1232, !dbg !2996

and.phi1232:                                      ; preds = %and.rhs1230, %if.exit1226
  %val1233 = phi i1 [ false, %if.exit1226 ], [ %neq1231, %and.rhs1230 ], !dbg !2996
  br i1 %val1233, label %and.rhs1234, label %and.phi1260, !dbg !2996

and.rhs1234:                                      ; preds = %and.phi1232
  %446 = load i32, ptr %k, align 4, !dbg !2998
  %sext1235 = sext i32 %446 to i64, !dbg !2998
  %lt1236 = icmp slt i64 %sext1235, 0, !dbg !2998
  %447 = call i1 @llvm.expect.i1(i1 %lt1236, i1 false), !dbg !2998
  br i1 %447, label %panic1237, label %checkok1245, !dbg !2998

checkok1245:                                      ; preds = %and.rhs1234
  %ge1246 = icmp sge i64 %sext1235, 128, !dbg !2998
  %448 = call i1 @llvm.expect.i1(i1 %ge1246, i1 false), !dbg !2998
  br i1 %448, label %panic1247, label %checkok1257, !dbg !2998

checkok1257:                                      ; preds = %checkok1245
  %ptroffset1258 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1235, !dbg !2998
  %449 = load i32, ptr %ptroffset1258, align 4, !dbg !2998
  %i2nb1259 = icmp eq i32 %449, 0, !dbg !2998
  br label %and.phi1260, !dbg !2998

and.phi1260:                                      ; preds = %checkok1257, %and.phi1232
  %val1261 = phi i1 [ false, %and.phi1232 ], [ %i2nb1259, %checkok1257 ], !dbg !2998
  br i1 %val1261, label %if.then1262, label %if.exit1263, !dbg !2998

if.then1262:                                      ; preds = %and.phi1260
  %450 = load i32, ptr %k, align 4, !dbg !2999
  store i32 %450, ptr %z, align 4, !dbg !2999
  br label %if.exit1263, !dbg !2999

if.exit1263:                                      ; preds = %if.then1262, %and.phi1260
  %451 = load i32, ptr %k, align 4, !dbg !3000
  %452 = load i32, ptr %a, align 4, !dbg !3001
  %eq1264 = icmp eq i32 %451, %452, !dbg !3000
  br i1 %eq1264, label %if.then1265, label %if.exit1266, !dbg !3000

if.then1265:                                      ; preds = %if.exit1263
  br label %loop.exit1269, !dbg !3002

if.exit1266:                                      ; preds = %if.exit1263
  %453 = load i32, ptr %k, align 4, !dbg !3003
  %sub1267 = sub i32 %453, 1, !dbg !3003
  %and1268 = and i32 %sub1267, 127, !dbg !3003
  store i32 %and1268, ptr %k, align 4, !dbg !3003
  br label %loop.body1141, !dbg !3003

loop.exit1269:                                    ; preds = %if.then1265
  %454 = load i32, ptr %carry1137, align 4, !dbg !3004
  %i2b1270 = icmp ne i32 %454, 0, !dbg !3004
  br i1 %i2b1270, label %if.then1271, label %if.exit1355, !dbg !3004

if.then1271:                                      ; preds = %loop.exit1269
  %455 = load i64, ptr %rp802, align 8, !dbg !3005
  %add1272 = add i64 %455, 9, !dbg !3005
  store i64 %add1272, ptr %rp802, align 8, !dbg !3005
  %456 = load i32, ptr %a, align 4, !dbg !3007
  %sub1273 = sub i32 %456, 1, !dbg !3007
  %and1274 = and i32 %sub1273, 127, !dbg !3007
  store i32 %and1274, ptr %a, align 4, !dbg !3007
  %457 = load i32, ptr %a, align 4, !dbg !3008
  %458 = load i32, ptr %z, align 4, !dbg !3009
  %eq1275 = icmp eq i32 %457, %458, !dbg !3008
  br i1 %eq1275, label %if.then1276, label %if.exit1330, !dbg !3008

if.then1276:                                      ; preds = %if.then1271
  %459 = load i32, ptr %z, align 4, !dbg !3010
  %sub1277 = sub i32 %459, 1, !dbg !3010
  %and1278 = and i32 %sub1277, 127, !dbg !3010
  store i32 %and1278, ptr %z, align 4, !dbg !3010
  %460 = load i32, ptr %z, align 4, !dbg !3012
  %sub1279 = sub i32 %460, 1, !dbg !3012
  %and1280 = and i32 %sub1279, 127, !dbg !3012
  %sext1281 = sext i32 %and1280 to i64, !dbg !3012
  %lt1282 = icmp slt i64 %sext1281, 0, !dbg !3012
  %461 = call i1 @llvm.expect.i1(i1 %lt1282, i1 false), !dbg !3012
  br i1 %461, label %panic1283, label %checkok1291, !dbg !3012

checkok1291:                                      ; preds = %if.then1276
  %ge1292 = icmp sge i64 %sext1281, 128, !dbg !3012
  %462 = call i1 @llvm.expect.i1(i1 %ge1292, i1 false), !dbg !3012
  br i1 %462, label %panic1293, label %checkok1303, !dbg !3012

checkok1303:                                      ; preds = %checkok1291
  %ptroffset1304 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1281, !dbg !3012
  %463 = load i32, ptr %ptroffset1304, align 4, !dbg !3012
  %464 = load i32, ptr %z, align 4, !dbg !3013
  %sext1305 = sext i32 %464 to i64, !dbg !3013
  %lt1306 = icmp slt i64 %sext1305, 0, !dbg !3013
  %465 = call i1 @llvm.expect.i1(i1 %lt1306, i1 false), !dbg !3013
  br i1 %465, label %panic1307, label %checkok1315, !dbg !3013

checkok1315:                                      ; preds = %checkok1303
  %ge1316 = icmp sge i64 %sext1305, 128, !dbg !3013
  %466 = call i1 @llvm.expect.i1(i1 %ge1316, i1 false), !dbg !3013
  br i1 %466, label %panic1317, label %checkok1327, !dbg !3013

checkok1327:                                      ; preds = %checkok1315
  %ptroffset1328 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1305, !dbg !3013
  %467 = load i32, ptr %ptroffset1328, align 4, !dbg !3013
  %or1329 = or i32 %463, %467, !dbg !3014
  store i32 %or1329, ptr %ptroffset1304, align 4, !dbg !3014
  br label %if.exit1330, !dbg !3014

if.exit1330:                                      ; preds = %checkok1327, %if.then1271
  %468 = load i32, ptr %a, align 4, !dbg !3015
  %sext1331 = sext i32 %468 to i64, !dbg !3015
  %lt1332 = icmp slt i64 %sext1331, 0, !dbg !3015
  %469 = call i1 @llvm.expect.i1(i1 %lt1332, i1 false), !dbg !3015
  br i1 %469, label %panic1333, label %checkok1341, !dbg !3015

checkok1341:                                      ; preds = %if.exit1330
  %ge1342 = icmp sge i64 %sext1331, 128, !dbg !3015
  %470 = call i1 @llvm.expect.i1(i1 %ge1342, i1 false), !dbg !3015
  br i1 %470, label %panic1343, label %checkok1353, !dbg !3015

checkok1353:                                      ; preds = %checkok1341
  %ptroffset1354 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1331, !dbg !3015
  %471 = load i32, ptr %carry1137, align 4, !dbg !3016
  store i32 %471, ptr %ptroffset1354, align 4, !dbg !3016
  br label %if.exit1355, !dbg !3016

if.exit1355:                                      ; preds = %checkok1353, %loop.exit1269
  br label %loop.cond1102, !dbg !3016

loop.exit1356:                                    ; preds = %or.phi1134
  br label %loop.body1357, !dbg !3017

loop.body1357:                                    ; preds = %if.exit1715, %loop.exit1356
  call void @llvm.dbg.declare(metadata ptr %carry1358, metadata !3018, metadata !DIExpression()), !dbg !3021
  store i32 0, ptr %carry1358, align 4, !dbg !3022
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !3023, metadata !DIExpression()), !dbg !3024
  store i32 1, ptr %sh, align 4, !dbg !3025
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3026, metadata !DIExpression()), !dbg !3027
  store i32 0, ptr %i, align 4, !dbg !3027
  store i32 0, ptr %i, align 4, !dbg !3028
  br label %loop.cond1359, !dbg !3028

loop.cond1359:                                    ; preds = %if.exit1471, %loop.body1357
  %472 = load i32, ptr %i, align 4, !dbg !3030
  %lt1360 = icmp slt i32 %472, 2, !dbg !3030
  br i1 %lt1360, label %loop.body1361, label %loop.exit1473, !dbg !3030

loop.body1361:                                    ; preds = %loop.cond1359
  %473 = load i32, ptr %a, align 4, !dbg !3031
  %474 = load i32, ptr %i, align 4, !dbg !3033
  %add1362 = add i32 %473, %474, !dbg !3031
  %and1363 = and i32 %add1362, 127, !dbg !3031
  store i32 %and1363, ptr %k, align 4, !dbg !3031
  %475 = load i32, ptr %k, align 4, !dbg !3034
  %476 = load i32, ptr %z, align 4, !dbg !3035
  %eq1364 = icmp eq i32 %475, %476, !dbg !3034
  br i1 %eq1364, label %or.phi1415, label %or.rhs1365, !dbg !3034

or.rhs1365:                                       ; preds = %loop.body1361
  %477 = load i32, ptr %k, align 4, !dbg !3036
  %sext1366 = sext i32 %477 to i64, !dbg !3036
  %lt1367 = icmp slt i64 %sext1366, 0, !dbg !3036
  %478 = call i1 @llvm.expect.i1(i1 %lt1367, i1 false), !dbg !3036
  br i1 %478, label %panic1368, label %checkok1376, !dbg !3036

checkok1376:                                      ; preds = %or.rhs1365
  %ge1377 = icmp sge i64 %sext1366, 128, !dbg !3036
  %479 = call i1 @llvm.expect.i1(i1 %ge1377, i1 false), !dbg !3036
  br i1 %479, label %panic1378, label %checkok1388, !dbg !3036

checkok1388:                                      ; preds = %checkok1376
  %ptroffset1389 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1366, !dbg !3036
  %480 = load i32, ptr %ptroffset1389, align 4, !dbg !3036
  %481 = load i32, ptr %i, align 4, !dbg !3037
  %sext1390 = sext i32 %481 to i64, !dbg !3037
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !3037
  %482 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !3037
  br i1 %482, label %panic1392, label %checkok1400, !dbg !3037

checkok1400:                                      ; preds = %checkok1388
  %ge1401 = icmp sge i64 %sext1390, 2, !dbg !3037
  %483 = call i1 @llvm.expect.i1(i1 %ge1401, i1 false), !dbg !3037
  br i1 %483, label %panic1402, label %checkok1412, !dbg !3037

checkok1412:                                      ; preds = %checkok1400
  %ptroffset1413 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1390, !dbg !3037
  %484 = load i32, ptr %ptroffset1413, align 4, !dbg !3037
  %lt1414 = icmp ult i32 %480, %484, !dbg !3038
  br label %or.phi1415, !dbg !3038

or.phi1415:                                       ; preds = %checkok1412, %loop.body1361
  %val1416 = phi i1 [ true, %loop.body1361 ], [ %lt1414, %checkok1412 ], !dbg !3038
  br i1 %val1416, label %if.then1417, label %if.exit1418, !dbg !3038

if.then1417:                                      ; preds = %or.phi1415
  store i32 2, ptr %i, align 4, !dbg !3039
  br label %loop.exit1473, !dbg !3041

if.exit1418:                                      ; preds = %or.phi1415
  %485 = load i32, ptr %a, align 4, !dbg !3042
  %486 = load i32, ptr %i, align 4, !dbg !3043
  %add1419 = add i32 %485, %486, !dbg !3042
  %and1420 = and i32 %add1419, 127, !dbg !3042
  %sext1421 = sext i32 %and1420 to i64, !dbg !3042
  %lt1422 = icmp slt i64 %sext1421, 0, !dbg !3042
  %487 = call i1 @llvm.expect.i1(i1 %lt1422, i1 false), !dbg !3042
  br i1 %487, label %panic1423, label %checkok1431, !dbg !3042

checkok1431:                                      ; preds = %if.exit1418
  %ge1432 = icmp sge i64 %sext1421, 128, !dbg !3042
  %488 = call i1 @llvm.expect.i1(i1 %ge1432, i1 false), !dbg !3042
  br i1 %488, label %panic1433, label %checkok1443, !dbg !3042

checkok1443:                                      ; preds = %checkok1431
  %ptroffset1444 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1421, !dbg !3042
  %489 = load i32, ptr %ptroffset1444, align 4, !dbg !3042
  %490 = load i32, ptr %i, align 4, !dbg !3044
  %sext1445 = sext i32 %490 to i64, !dbg !3044
  %lt1446 = icmp slt i64 %sext1445, 0, !dbg !3044
  %491 = call i1 @llvm.expect.i1(i1 %lt1446, i1 false), !dbg !3044
  br i1 %491, label %panic1447, label %checkok1455, !dbg !3044

checkok1455:                                      ; preds = %checkok1443
  %ge1456 = icmp sge i64 %sext1445, 2, !dbg !3044
  %492 = call i1 @llvm.expect.i1(i1 %ge1456, i1 false), !dbg !3044
  br i1 %492, label %panic1457, label %checkok1467, !dbg !3044

checkok1467:                                      ; preds = %checkok1455
  %ptroffset1468 = getelementptr inbounds [4 x i8], ptr @to_double.TH, i64 %sext1445, !dbg !3044
  %493 = load i32, ptr %ptroffset1468, align 4, !dbg !3044
  %gt1469 = icmp ugt i32 %489, %493, !dbg !3045
  br i1 %gt1469, label %if.then1470, label %if.exit1471, !dbg !3045

if.then1470:                                      ; preds = %checkok1467
  br label %loop.exit1473, !dbg !3046

if.exit1471:                                      ; preds = %checkok1467
  %494 = load i32, ptr %i, align 4, !dbg !3047
  %add1472 = add i32 %494, 1, !dbg !3047
  store i32 %add1472, ptr %i, align 4, !dbg !3047
  br label %loop.cond1359, !dbg !3047

loop.exit1473:                                    ; preds = %if.then1470, %if.then1417, %loop.cond1359
  %495 = load i32, ptr %i, align 4, !dbg !3048
  %eq1474 = icmp eq i32 %495, 2, !dbg !3048
  br i1 %eq1474, label %and.rhs1475, label %and.phi1477, !dbg !3048

and.rhs1475:                                      ; preds = %loop.exit1473
  %496 = load i64, ptr %rp802, align 8, !dbg !3049
  %eq1476 = icmp eq i64 %496, 18, !dbg !3049
  br label %and.phi1477, !dbg !3049

and.phi1477:                                      ; preds = %and.rhs1475, %loop.exit1473
  %val1478 = phi i1 [ false, %loop.exit1473 ], [ %eq1476, %and.rhs1475 ], !dbg !3049
  br i1 %val1478, label %if.then1479, label %if.exit1480, !dbg !3049

if.then1479:                                      ; preds = %and.phi1477
  br label %loop.exit1716, !dbg !3050

if.exit1480:                                      ; preds = %and.phi1477
  %497 = load i64, ptr %rp802, align 8, !dbg !3051
  %gt1481 = icmp sgt i64 %497, 27, !dbg !3051
  br i1 %gt1481, label %if.then1482, label %if.exit1483, !dbg !3051

if.then1482:                                      ; preds = %if.exit1480
  store i32 9, ptr %sh, align 4, !dbg !3052
  br label %if.exit1483, !dbg !3052

if.exit1483:                                      ; preds = %if.then1482, %if.exit1480
  %498 = load i32, ptr %e2801, align 4, !dbg !3053
  %499 = load i32, ptr %sh, align 4, !dbg !3054
  %add1484 = add i32 %498, %499, !dbg !3053
  store i32 %add1484, ptr %e2801, align 4, !dbg !3053
  %500 = load i32, ptr %a, align 4, !dbg !3055
  store i32 %500, ptr %k, align 4, !dbg !3055
  br label %loop.cond1485, !dbg !3055

loop.cond1485:                                    ; preds = %if.exit1650, %if.exit1483
  %501 = load i32, ptr %k, align 4, !dbg !3057
  %502 = load i32, ptr %z, align 4, !dbg !3058
  %neq1486 = icmp ne i32 %501, %502, !dbg !3057
  br i1 %neq1486, label %loop.body1487, label %loop.exit1653, !dbg !3057

loop.body1487:                                    ; preds = %loop.cond1485
  call void @llvm.dbg.declare(metadata ptr %tmp1488, metadata !3059, metadata !DIExpression()), !dbg !3061
  %503 = load i32, ptr %k, align 4, !dbg !3062
  %sext1489 = sext i32 %503 to i64, !dbg !3062
  %lt1490 = icmp slt i64 %sext1489, 0, !dbg !3062
  %504 = call i1 @llvm.expect.i1(i1 %lt1490, i1 false), !dbg !3062
  br i1 %504, label %panic1491, label %checkok1499, !dbg !3062

checkok1499:                                      ; preds = %loop.body1487
  %ge1500 = icmp sge i64 %sext1489, 128, !dbg !3062
  %505 = call i1 @llvm.expect.i1(i1 %ge1500, i1 false), !dbg !3062
  br i1 %505, label %panic1501, label %checkok1511, !dbg !3062

checkok1511:                                      ; preds = %checkok1499
  %ptroffset1512 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1489, !dbg !3062
  %506 = load i32, ptr %ptroffset1512, align 4, !dbg !3062
  %507 = load i32, ptr %sh, align 4, !dbg !3063
  %shift_underflow = icmp slt i32 %507, 0, !dbg !3064
  %508 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3064
  br i1 %508, label %panic1513, label %checkok1521, !dbg !3064

checkok1521:                                      ; preds = %checkok1511
  %shift_exceeds1522 = icmp sge i32 %507, 32, !dbg !3064
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1522, i1 false), !dbg !3064
  br i1 %509, label %panic1523, label %checkok1531, !dbg !3064

checkok1531:                                      ; preds = %checkok1521
  %shl1532 = shl i32 1, %507, !dbg !3064
  %510 = freeze i32 %shl1532, !dbg !3064
  %sub1533 = sub i32 %510, 1, !dbg !3064
  %and1534 = and i32 %506, %sub1533, !dbg !3065
  store i32 %and1534, ptr %tmp1488, align 4, !dbg !3065
  %511 = load i32, ptr %k, align 4, !dbg !3066
  %sext1535 = sext i32 %511 to i64, !dbg !3066
  %lt1536 = icmp slt i64 %sext1535, 0, !dbg !3066
  %512 = call i1 @llvm.expect.i1(i1 %lt1536, i1 false), !dbg !3066
  br i1 %512, label %panic1537, label %checkok1545, !dbg !3066

checkok1545:                                      ; preds = %checkok1531
  %ge1546 = icmp sge i64 %sext1535, 128, !dbg !3066
  %513 = call i1 @llvm.expect.i1(i1 %ge1546, i1 false), !dbg !3066
  br i1 %513, label %panic1547, label %checkok1557, !dbg !3066

checkok1557:                                      ; preds = %checkok1545
  %ptroffset1558 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1535, !dbg !3066
  %514 = load i32, ptr %k, align 4, !dbg !3067
  %sext1559 = sext i32 %514 to i64, !dbg !3067
  %lt1560 = icmp slt i64 %sext1559, 0, !dbg !3067
  %515 = call i1 @llvm.expect.i1(i1 %lt1560, i1 false), !dbg !3067
  br i1 %515, label %panic1561, label %checkok1569, !dbg !3067

checkok1569:                                      ; preds = %checkok1557
  %ge1570 = icmp sge i64 %sext1559, 128, !dbg !3067
  %516 = call i1 @llvm.expect.i1(i1 %ge1570, i1 false), !dbg !3067
  br i1 %516, label %panic1571, label %checkok1581, !dbg !3067

checkok1581:                                      ; preds = %checkok1569
  %ptroffset1582 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1559, !dbg !3067
  %517 = load i32, ptr %ptroffset1582, align 4, !dbg !3067
  %518 = load i32, ptr %sh, align 4, !dbg !3068
  %shift_exceeds1583 = icmp uge i32 %518, 32, !dbg !3069
  %519 = call i1 @llvm.expect.i1(i1 %shift_exceeds1583, i1 false), !dbg !3069
  br i1 %519, label %panic1584, label %checkok1592, !dbg !3069

checkok1592:                                      ; preds = %checkok1581
  %lshr1593 = lshr i32 %517, %518, !dbg !3069
  %520 = freeze i32 %lshr1593, !dbg !3069
  %521 = load i32, ptr %carry1358, align 4, !dbg !3070
  %add1594 = add i32 %520, %521, !dbg !3069
  store i32 %add1594, ptr %ptroffset1558, align 4, !dbg !3069
  %522 = load i32, ptr %sh, align 4, !dbg !3071
  %shift_underflow1595 = icmp slt i32 %522, 0, !dbg !3072
  %523 = call i1 @llvm.expect.i1(i1 %shift_underflow1595, i1 false), !dbg !3072
  br i1 %523, label %panic1596, label %checkok1604, !dbg !3072

checkok1604:                                      ; preds = %checkok1592
  %shift_exceeds1605 = icmp sge i32 %522, 32, !dbg !3072
  %524 = call i1 @llvm.expect.i1(i1 %shift_exceeds1605, i1 false), !dbg !3072
  br i1 %524, label %panic1606, label %checkok1614, !dbg !3072

checkok1614:                                      ; preds = %checkok1604
  %ashr = ashr i32 1000000000, %522, !dbg !3072
  %525 = freeze i32 %ashr, !dbg !3072
  %526 = load i32, ptr %tmp1488, align 4, !dbg !3073
  %mul1615 = mul i32 %525, %526, !dbg !3072
  store i32 %mul1615, ptr %carry1358, align 4, !dbg !3072
  %527 = load i32, ptr %k, align 4, !dbg !3074
  %528 = load i32, ptr %a, align 4, !dbg !3075
  %eq1616 = icmp eq i32 %527, %528, !dbg !3074
  br i1 %eq1616, label %and.rhs1617, label %and.phi1643, !dbg !3074

and.rhs1617:                                      ; preds = %checkok1614
  %529 = load i32, ptr %k, align 4, !dbg !3076
  %sext1618 = sext i32 %529 to i64, !dbg !3076
  %lt1619 = icmp slt i64 %sext1618, 0, !dbg !3076
  %530 = call i1 @llvm.expect.i1(i1 %lt1619, i1 false), !dbg !3076
  br i1 %530, label %panic1620, label %checkok1628, !dbg !3076

checkok1628:                                      ; preds = %and.rhs1617
  %ge1629 = icmp sge i64 %sext1618, 128, !dbg !3076
  %531 = call i1 @llvm.expect.i1(i1 %ge1629, i1 false), !dbg !3076
  br i1 %531, label %panic1630, label %checkok1640, !dbg !3076

checkok1640:                                      ; preds = %checkok1628
  %ptroffset1641 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1618, !dbg !3076
  %532 = load i32, ptr %ptroffset1641, align 4, !dbg !3076
  %i2nb1642 = icmp eq i32 %532, 0, !dbg !3076
  br label %and.phi1643, !dbg !3076

and.phi1643:                                      ; preds = %checkok1640, %checkok1614
  %val1644 = phi i1 [ false, %checkok1614 ], [ %i2nb1642, %checkok1640 ], !dbg !3076
  br i1 %val1644, label %if.then1645, label %if.exit1650, !dbg !3076

if.then1645:                                      ; preds = %and.phi1643
  %533 = load i32, ptr %a, align 4, !dbg !3077
  %add1646 = add i32 %533, 1, !dbg !3077
  %and1647 = and i32 %add1646, 127, !dbg !3077
  store i32 %and1647, ptr %a, align 4, !dbg !3077
  %534 = load i32, ptr %i, align 4, !dbg !3079
  %sub1648 = sub i32 %534, 1, !dbg !3079
  store i32 %sub1648, ptr %i, align 4, !dbg !3079
  %535 = load i64, ptr %rp802, align 8, !dbg !3080
  %sub1649 = sub i64 %535, 9, !dbg !3080
  store i64 %sub1649, ptr %rp802, align 8, !dbg !3080
  br label %if.exit1650, !dbg !3080

if.exit1650:                                      ; preds = %if.then1645, %and.phi1643
  %536 = load i32, ptr %k, align 4, !dbg !3081
  %add1651 = add i32 %536, 1, !dbg !3081
  %and1652 = and i32 %add1651, 127, !dbg !3081
  store i32 %and1652, ptr %k, align 4, !dbg !3081
  br label %loop.cond1485, !dbg !3081

loop.exit1653:                                    ; preds = %loop.cond1485
  %537 = load i32, ptr %carry1358, align 4, !dbg !3082
  %i2b1654 = icmp ne i32 %537, 0, !dbg !3082
  br i1 %i2b1654, label %if.then1655, label %if.exit1715, !dbg !3082

if.then1655:                                      ; preds = %loop.exit1653
  %538 = load i32, ptr %z, align 4, !dbg !3083
  %add1656 = add i32 %538, 1, !dbg !3083
  %and1657 = and i32 %add1656, 127, !dbg !3083
  %539 = load i32, ptr %a, align 4, !dbg !3085
  %neq1658 = icmp ne i32 %and1657, %539, !dbg !3083
  br i1 %neq1658, label %if.then1659, label %if.else1686, !dbg !3083

if.then1659:                                      ; preds = %if.then1655
  %540 = load i32, ptr %z, align 4, !dbg !3086
  %sext1660 = sext i32 %540 to i64, !dbg !3086
  %lt1661 = icmp slt i64 %sext1660, 0, !dbg !3086
  %541 = call i1 @llvm.expect.i1(i1 %lt1661, i1 false), !dbg !3086
  br i1 %541, label %panic1662, label %checkok1670, !dbg !3086

checkok1670:                                      ; preds = %if.then1659
  %ge1671 = icmp sge i64 %sext1660, 128, !dbg !3086
  %542 = call i1 @llvm.expect.i1(i1 %ge1671, i1 false), !dbg !3086
  br i1 %542, label %panic1672, label %checkok1682, !dbg !3086

checkok1682:                                      ; preds = %checkok1670
  %ptroffset1683 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1660, !dbg !3086
  %543 = load i32, ptr %carry1358, align 4, !dbg !3088
  store i32 %543, ptr %ptroffset1683, align 4, !dbg !3088
  %544 = load i32, ptr %z, align 4, !dbg !3089
  %add1684 = add i32 %544, 1, !dbg !3089
  %and1685 = and i32 %add1684, 127, !dbg !3089
  store i32 %and1685, ptr %z, align 4, !dbg !3089
  br label %if.exit1714, !dbg !3089

if.else1686:                                      ; preds = %if.then1655
  %545 = load i32, ptr %z, align 4, !dbg !3090
  %sub1687 = sub i32 %545, 1, !dbg !3090
  %and1688 = and i32 %sub1687, 127, !dbg !3090
  %sext1689 = sext i32 %and1688 to i64, !dbg !3090
  %lt1690 = icmp slt i64 %sext1689, 0, !dbg !3090
  %546 = call i1 @llvm.expect.i1(i1 %lt1690, i1 false), !dbg !3090
  br i1 %546, label %panic1691, label %checkok1699, !dbg !3090

checkok1699:                                      ; preds = %if.else1686
  %ge1700 = icmp sge i64 %sext1689, 128, !dbg !3090
  %547 = call i1 @llvm.expect.i1(i1 %ge1700, i1 false), !dbg !3090
  br i1 %547, label %panic1701, label %checkok1711, !dbg !3090

checkok1711:                                      ; preds = %checkok1699
  %ptroffset1712 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1689, !dbg !3090
  %548 = load i32, ptr %ptroffset1712, align 4, !dbg !3090
  %or1713 = or i32 %548, 1, !dbg !3092
  store i32 %or1713, ptr %ptroffset1712, align 4, !dbg !3092
  br label %if.exit1714, !dbg !3092

if.exit1714:                                      ; preds = %checkok1711, %checkok1682
  br label %if.exit1715, !dbg !3092

if.exit1715:                                      ; preds = %if.exit1714, %loop.exit1653
  br label %loop.body1357, !dbg !3092

loop.exit1716:                                    ; preds = %if.then1479
  call void @llvm.dbg.declare(metadata ptr %y1717, metadata !3093, metadata !DIExpression()), !dbg !3094
  store double 0.000000e+00, ptr %y1717, align 8, !dbg !3094
  call void @llvm.dbg.declare(metadata ptr %i1718, metadata !3095, metadata !DIExpression()), !dbg !3096
  store i32 0, ptr %i1718, align 4, !dbg !3096
  store i32 0, ptr %i1718, align 4, !dbg !3097
  br label %loop.cond1719, !dbg !3097

loop.cond1719:                                    ; preds = %checkok1779, %loop.exit1716
  %549 = load i32, ptr %i1718, align 4, !dbg !3099
  %lt1720 = icmp slt i32 %549, 2, !dbg !3099
  br i1 %lt1720, label %loop.body1721, label %loop.exit1784, !dbg !3099

loop.body1721:                                    ; preds = %loop.cond1719
  %550 = load i32, ptr %a, align 4, !dbg !3100
  %551 = load i32, ptr %i1718, align 4, !dbg !3102
  %add1722 = add i32 %550, %551, !dbg !3100
  %and1723 = and i32 %add1722, 127, !dbg !3100
  %552 = load i32, ptr %z, align 4, !dbg !3103
  %eq1724 = icmp eq i32 %and1723, %552, !dbg !3100
  br i1 %eq1724, label %if.then1725, label %if.exit1753, !dbg !3100

if.then1725:                                      ; preds = %loop.body1721
  %553 = load i32, ptr %z, align 4, !dbg !3104
  %add1726 = add i32 %553, 1, !dbg !3104
  %and1727 = and i32 %add1726, 127, !dbg !3104
  store i32 %and1727, ptr %z, align 4, !dbg !3104
  %sub1728 = sub i32 %and1727, 1, !dbg !3105
  %sext1729 = sext i32 %sub1728 to i64, !dbg !3105
  %lt1730 = icmp slt i64 %sext1729, 0, !dbg !3105
  %554 = call i1 @llvm.expect.i1(i1 %lt1730, i1 false), !dbg !3105
  br i1 %554, label %panic1731, label %checkok1739, !dbg !3105

checkok1739:                                      ; preds = %if.then1725
  %ge1740 = icmp sge i64 %sext1729, 128, !dbg !3105
  %555 = call i1 @llvm.expect.i1(i1 %ge1740, i1 false), !dbg !3105
  br i1 %555, label %panic1741, label %checkok1751, !dbg !3105

checkok1751:                                      ; preds = %checkok1739
  %ptroffset1752 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1729, !dbg !3105
  store i32 0, ptr %ptroffset1752, align 4, !dbg !3106
  br label %if.exit1753, !dbg !3106

if.exit1753:                                      ; preds = %checkok1751, %loop.body1721
  %556 = load double, ptr %y1717, align 8, !dbg !3107
  %fmul1754 = fmul double 1.000000e+09, %556, !dbg !3108
  %557 = load i32, ptr %a, align 4, !dbg !3109
  %558 = load i32, ptr %i1718, align 4, !dbg !3110
  %add1755 = add i32 %557, %558, !dbg !3109
  %and1756 = and i32 %add1755, 127, !dbg !3109
  %sext1757 = sext i32 %and1756 to i64, !dbg !3109
  %lt1758 = icmp slt i64 %sext1757, 0, !dbg !3109
  %559 = call i1 @llvm.expect.i1(i1 %lt1758, i1 false), !dbg !3109
  br i1 %559, label %panic1759, label %checkok1767, !dbg !3109

checkok1767:                                      ; preds = %if.exit1753
  %ge1768 = icmp sge i64 %sext1757, 128, !dbg !3109
  %560 = call i1 @llvm.expect.i1(i1 %ge1768, i1 false), !dbg !3109
  br i1 %560, label %panic1769, label %checkok1779, !dbg !3109

checkok1779:                                      ; preds = %checkok1767
  %ptroffset1780 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1757, !dbg !3109
  %561 = load i32, ptr %ptroffset1780, align 4, !dbg !3109
  %uifp1781 = uitofp i32 %561 to double, !dbg !3109
  %fadd1782 = fadd double %fmul1754, %uifp1781, !dbg !3108
  store double %fadd1782, ptr %y1717, align 8, !dbg !3108
  %562 = load i32, ptr %i1718, align 4, !dbg !3111
  %add1783 = add i32 %562, 1, !dbg !3111
  store i32 %add1783, ptr %i1718, align 4, !dbg !3111
  br label %loop.cond1719, !dbg !3111

loop.exit1784:                                    ; preds = %loop.cond1719
  %563 = load double, ptr %y1717, align 8, !dbg !3112
  %564 = load i32, ptr %sign422, align 4, !dbg !3113
  %sifp1785 = sitofp i32 %564 to double, !dbg !3113
  %fmul1786 = fmul double %563, %sifp1785, !dbg !3112
  store double %fmul1786, ptr %y1717, align 8, !dbg !3112
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !3114, metadata !DIExpression()), !dbg !3115
  store i8 0, ptr %denormal, align 1, !dbg !3115
  call void @llvm.dbg.declare(metadata ptr %bits1787, metadata !3116, metadata !DIExpression()), !dbg !3117
  store i32 53, ptr %bits1787, align 4, !dbg !3118
  %565 = load i32, ptr %bits1787, align 4, !dbg !3119
  %566 = load i32, ptr %e2801, align 4, !dbg !3120
  %add1788 = add i32 53, %566, !dbg !3121
  %sub1789 = sub i32 %add1788, -1074, !dbg !3121
  %lt1790 = icmp slt i32 %sub1789, %565, !dbg !3119
  %check1791 = icmp slt i32 %565, 0, !dbg !3119
  %siui-lt1792 = or i1 %check1791, %lt1790, !dbg !3119
  br i1 %siui-lt1792, label %if.then1793, label %if.exit1799, !dbg !3119

if.then1793:                                      ; preds = %loop.exit1784
  %567 = load i32, ptr %e2801, align 4, !dbg !3122
  %add1794 = add i32 53, %567, !dbg !3124
  %sub1795 = sub i32 %add1794, -1074, !dbg !3124
  store i32 %sub1795, ptr %bits1787, align 4, !dbg !3124
  %568 = load i32, ptr %bits1787, align 4, !dbg !3125
  %gt1796 = icmp ugt i32 0, %568, !dbg !3125
  br i1 %gt1796, label %if.then1797, label %if.exit1798, !dbg !3125

if.then1797:                                      ; preds = %if.then1793
  store i32 0, ptr %bits1787, align 4, !dbg !3126
  br label %if.exit1798, !dbg !3126

if.exit1798:                                      ; preds = %if.then1797, %if.then1793
  store i8 1, ptr %denormal, align 1, !dbg !3127
  br label %if.exit1799, !dbg !3127

if.exit1799:                                      ; preds = %if.exit1798, %loop.exit1784
  call void @llvm.dbg.declare(metadata ptr %bias1800, metadata !3128, metadata !DIExpression()), !dbg !3129
  store double 0.000000e+00, ptr %bias1800, align 8, !dbg !3129
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !3130, metadata !DIExpression()), !dbg !3131
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3131
  %569 = load i32, ptr %bits1787, align 4, !dbg !3132
  %gt1801 = icmp ugt i32 53, %569, !dbg !3132
  br i1 %gt1801, label %if.then1802, label %if.exit1822, !dbg !3132

if.then1802:                                      ; preds = %if.exit1799
  store double 1.000000e+00, ptr %x1803, align 8
  %570 = load i32, ptr %bits1787, align 4, !dbg !3133
  %sub1804 = sub i32 106, %570, !dbg !3135
  %sub1805 = sub i32 %sub1804, 1, !dbg !3135
  store i32 %sub1805, ptr %n1806, align 4
  %571 = load double, ptr %x1803, align 8, !dbg !3136
  %572 = load i32, ptr %n1806, align 4, !dbg !3136
  %573 = call double @scalbn(double %571, i32 %572), !dbg !3139
  store double %573, ptr %mag1807, align 8
  %574 = load double, ptr %y1717, align 8
  store double %574, ptr %sgn1808, align 8
  %575 = load double, ptr %mag1807, align 8
  store double %575, ptr %x1809, align 8
  %576 = load double, ptr %sgn1808, align 8
  store double %576, ptr %y1810, align 8
  %577 = load double, ptr %x1809, align 8, !dbg !3140
  %578 = load double, ptr %sgn1808, align 8, !dbg !3145
  %579 = call double @llvm.copysign.f64(double %577, double %578), !dbg !3145
  store double %579, ptr %bias1800, align 8, !dbg !3145
  %580 = load double, ptr %y1717, align 8, !dbg !3146
  store double 1.000000e+00, ptr %x1811, align 8
  %581 = load i32, ptr %bits1787, align 4, !dbg !3147
  %sub1812 = sub i32 53, %581, !dbg !3148
  store i32 %sub1812, ptr %n1813, align 4
  %582 = load double, ptr %x1811, align 8, !dbg !3149
  %583 = load i32, ptr %n1813, align 4, !dbg !3149
  %584 = call double @scalbn(double %582, i32 %583), !dbg !3152
  %zero1814 = fcmp ueq double %584, 0.000000e+00, !dbg !3146
  %585 = call i1 @llvm.expect.i1(i1 %zero1814, i1 false), !dbg !3146
  br i1 %585, label %panic1815, label %checkok1819, !dbg !3146

checkok1819:                                      ; preds = %if.then1802
  %fmod = frem double %580, %584, !dbg !3146
  store double %fmod, ptr %frac, align 8, !dbg !3146
  %586 = load double, ptr %y1717, align 8, !dbg !3153
  %587 = load double, ptr %frac, align 8, !dbg !3154
  %fsub1820 = fsub double %586, %587, !dbg !3153
  store double %fsub1820, ptr %y1717, align 8, !dbg !3153
  %588 = load double, ptr %y1717, align 8, !dbg !3155
  %589 = load double, ptr %bias1800, align 8, !dbg !3156
  %fadd1821 = fadd double %588, %589, !dbg !3155
  store double %fadd1821, ptr %y1717, align 8, !dbg !3155
  br label %if.exit1822, !dbg !3155

if.exit1822:                                      ; preds = %checkok1819, %if.exit1799
  %590 = load i32, ptr %a, align 4, !dbg !3157
  %591 = load i32, ptr %i1718, align 4, !dbg !3158
  %add1823 = add i32 %590, %591, !dbg !3157
  %and1824 = and i32 %add1823, 127, !dbg !3157
  %592 = load i32, ptr %z, align 4, !dbg !3159
  %neq1825 = icmp ne i32 %and1824, %592, !dbg !3157
  br i1 %neq1825, label %if.then1826, label %if.exit1908, !dbg !3157

if.then1826:                                      ; preds = %if.exit1822
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3160, metadata !DIExpression()), !dbg !3162
  %593 = load i32, ptr %a, align 4, !dbg !3163
  %594 = load i32, ptr %i1718, align 4, !dbg !3164
  %add1827 = add i32 %593, %594, !dbg !3163
  %and1828 = and i32 %add1827, 127, !dbg !3163
  %sext1829 = sext i32 %and1828 to i64, !dbg !3163
  %lt1830 = icmp slt i64 %sext1829, 0, !dbg !3163
  %595 = call i1 @llvm.expect.i1(i1 %lt1830, i1 false), !dbg !3163
  br i1 %595, label %panic1831, label %checkok1839, !dbg !3163

checkok1839:                                      ; preds = %if.then1826
  %ge1840 = icmp sge i64 %sext1829, 128, !dbg !3163
  %596 = call i1 @llvm.expect.i1(i1 %ge1840, i1 false), !dbg !3163
  br i1 %596, label %panic1841, label %checkok1851, !dbg !3163

checkok1851:                                      ; preds = %checkok1839
  %ptroffset1852 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1829, !dbg !3163
  %597 = load i32, ptr %ptroffset1852, align 4, !dbg !3163
  store i32 %597, ptr %t, align 4, !dbg !3163
  store i8 1, ptr %switch1853, align 1
  br label %switch.entry1854

switch.entry1854:                                 ; preds = %checkok1851
  %598 = load i8, ptr %switch1853, align 1
  %599 = trunc i8 %598 to i1
  %600 = load i32, ptr %t, align 4, !dbg !3165
  %gt1855 = icmp ugt i32 500000000, %600, !dbg !3165
  br i1 %gt1855, label %and.rhs1856, label %and.phi1865, !dbg !3165

and.rhs1856:                                      ; preds = %switch.entry1854
  %601 = load i32, ptr %t, align 4, !dbg !3167
  %i2b1857 = icmp ne i32 %601, 0, !dbg !3167
  br i1 %i2b1857, label %or.phi1863, label %or.rhs1858, !dbg !3167

or.rhs1858:                                       ; preds = %and.rhs1856
  %602 = load i32, ptr %a, align 4, !dbg !3168
  %603 = load i32, ptr %i1718, align 4, !dbg !3169
  %add1859 = add i32 %602, %603, !dbg !3168
  %add1860 = add i32 %add1859, 1, !dbg !3168
  %and1861 = and i32 %add1860, 127, !dbg !3168
  %604 = load i32, ptr %z, align 4, !dbg !3170
  %neq1862 = icmp ne i32 %and1861, %604, !dbg !3168
  br label %or.phi1863, !dbg !3168

or.phi1863:                                       ; preds = %or.rhs1858, %and.rhs1856
  %val1864 = phi i1 [ true, %and.rhs1856 ], [ %neq1862, %or.rhs1858 ], !dbg !3168
  br label %and.phi1865, !dbg !3168

and.phi1865:                                      ; preds = %or.phi1863, %switch.entry1854
  %val1866 = phi i1 [ false, %switch.entry1854 ], [ %val1864, %or.phi1863 ], !dbg !3168
  %eq1867 = icmp eq i1 %val1866, %599, !dbg !3168
  br i1 %eq1867, label %switch.case1868, label %next_if1872, !dbg !3168

switch.case1868:                                  ; preds = %and.phi1865
  %605 = load double, ptr %frac, align 8, !dbg !3171
  %606 = load i32, ptr %sign422, align 4, !dbg !3173
  %sifp1869 = sitofp i32 %606 to double, !dbg !3173
  %fmul1870 = fmul double 2.500000e-01, %sifp1869, !dbg !3174
  %fadd1871 = fadd double %605, %fmul1870, !dbg !3171
  store double %fadd1871, ptr %frac, align 8, !dbg !3171
  br label %switch.exit1897, !dbg !3171

next_if1872:                                      ; preds = %and.phi1865
  %607 = load i32, ptr %t, align 4, !dbg !3175
  %lt1873 = icmp ult i32 500000000, %607, !dbg !3175
  %eq1874 = icmp eq i1 %lt1873, %599, !dbg !3175
  br i1 %eq1874, label %switch.case1875, label %next_if1879, !dbg !3175

switch.case1875:                                  ; preds = %next_if1872
  %608 = load double, ptr %frac, align 8, !dbg !3176
  %609 = load i32, ptr %sign422, align 4, !dbg !3178
  %sifp1876 = sitofp i32 %609 to double, !dbg !3178
  %fmul1877 = fmul double 7.500000e-01, %sifp1876, !dbg !3179
  %fadd1878 = fadd double %608, %fmul1877, !dbg !3176
  store double %fadd1878, ptr %frac, align 8, !dbg !3176
  br label %switch.exit1897, !dbg !3176

next_if1879:                                      ; preds = %next_if1872
  %610 = load i32, ptr %t, align 4, !dbg !3180
  %eq1880 = icmp eq i32 500000000, %610, !dbg !3180
  %eq1881 = icmp eq i1 %eq1880, %599, !dbg !3180
  br i1 %eq1881, label %switch.case1882, label %next_if1896, !dbg !3180

switch.case1882:                                  ; preds = %next_if1879
  %611 = load i32, ptr %a, align 4, !dbg !3181
  %612 = load i32, ptr %i1718, align 4, !dbg !3183
  %add1883 = add i32 %611, %612, !dbg !3181
  %add1884 = add i32 %add1883, 1, !dbg !3181
  %and1885 = and i32 %add1884, 127, !dbg !3181
  %613 = load i32, ptr %z, align 4, !dbg !3184
  %eq1886 = icmp eq i32 %and1885, %613, !dbg !3181
  br i1 %eq1886, label %if.then1887, label %if.else1891, !dbg !3181

if.then1887:                                      ; preds = %switch.case1882
  %614 = load double, ptr %frac, align 8, !dbg !3185
  %615 = load i32, ptr %sign422, align 4, !dbg !3187
  %sifp1888 = sitofp i32 %615 to double, !dbg !3187
  %fmul1889 = fmul double 5.000000e-01, %sifp1888, !dbg !3188
  %fadd1890 = fadd double %614, %fmul1889, !dbg !3185
  store double %fadd1890, ptr %frac, align 8, !dbg !3185
  br label %if.exit1895, !dbg !3185

if.else1891:                                      ; preds = %switch.case1882
  %616 = load double, ptr %frac, align 8, !dbg !3189
  %617 = load i32, ptr %sign422, align 4, !dbg !3191
  %sifp1892 = sitofp i32 %617 to double, !dbg !3191
  %fmul1893 = fmul double 7.500000e-01, %sifp1892, !dbg !3192
  %fadd1894 = fadd double %616, %fmul1893, !dbg !3189
  store double %fadd1894, ptr %frac, align 8, !dbg !3189
  br label %if.exit1895, !dbg !3189

if.exit1895:                                      ; preds = %if.else1891, %if.then1887
  br label %switch.exit1897, !dbg !3189

next_if1896:                                      ; preds = %next_if1879
  br label %switch.exit1897, !dbg !3189

switch.exit1897:                                  ; preds = %next_if1896, %if.exit1895, %switch.case1875, %switch.case1868
  %618 = load i32, ptr %bits1787, align 4, !dbg !3193
  %sub1898 = sub i32 53, %618, !dbg !3194
  %ge1899 = icmp sge i32 %sub1898, 2, !dbg !3194
  br i1 %ge1899, label %and.rhs1900, label %and.phi1904, !dbg !3194

and.rhs1900:                                      ; preds = %switch.exit1897
  %619 = load double, ptr %frac, align 8, !dbg !3195
  %fmod1901 = frem double %619, 1.000000e+00, !dbg !3195
  %neq1902 = fcmp one double %fmod1901, 0.000000e+00, !dbg !3195
  %not1903 = xor i1 %neq1902, true, !dbg !3195
  br label %and.phi1904, !dbg !3195

and.phi1904:                                      ; preds = %and.rhs1900, %switch.exit1897
  %val1905 = phi i1 [ false, %switch.exit1897 ], [ %not1903, %and.rhs1900 ], !dbg !3195
  br i1 %val1905, label %if.then1906, label %if.exit1907, !dbg !3195

if.then1906:                                      ; preds = %and.phi1904
  %620 = load double, ptr %frac, align 8, !dbg !3196
  %fincdec = fadd double %620, 1.000000e+00, !dbg !3196
  store double %fincdec, ptr %frac, align 8, !dbg !3196
  br label %if.exit1907, !dbg !3196

if.exit1907:                                      ; preds = %if.then1906, %and.phi1904
  br label %if.exit1908, !dbg !3196

if.exit1908:                                      ; preds = %if.exit1907, %if.exit1822
  %621 = load double, ptr %y1717, align 8, !dbg !3197
  %622 = load double, ptr %frac, align 8, !dbg !3198
  %fadd1909 = fadd double %621, %622, !dbg !3197
  store double %fadd1909, ptr %y1717, align 8, !dbg !3197
  %623 = load double, ptr %y1717, align 8, !dbg !3199
  %624 = load double, ptr %bias1800, align 8, !dbg !3200
  %fsub1910 = fsub double %623, %624, !dbg !3199
  store double %fsub1910, ptr %y1717, align 8, !dbg !3199
  %625 = load i32, ptr %e2801, align 4, !dbg !3201
  %add1911 = add i32 %625, 53, !dbg !3201
  %and1912 = and i32 %add1911, 2147483647, !dbg !3201
  %626 = load i32, ptr %emax, align 4, !dbg !3202
  %sub1913 = sub i32 %626, 5, !dbg !3202
  %gt1914 = icmp sgt i32 %and1912, %sub1913, !dbg !3201
  br i1 %gt1914, label %if.then1915, label %if.exit1943, !dbg !3201

if.then1915:                                      ; preds = %if.exit1908
  %627 = load double, ptr %y1717, align 8
  store double %627, ptr %x1916, align 8
  %628 = load double, ptr %x1916, align 8, !dbg !3203
  %629 = call double @llvm.fabs.f64(double %628), !dbg !3203
  %ge1917 = fcmp oge double %629, 0x4340000000000000, !dbg !3205
  br i1 %ge1917, label %if.then1918, label %if.exit1931, !dbg !3205

if.then1918:                                      ; preds = %if.then1915
  %630 = load i8, ptr %denormal, align 1, !dbg !3207
  %631 = trunc i8 %630 to i1, !dbg !3207
  br i1 %631, label %and.rhs1919, label %and.phi1925, !dbg !3207

and.rhs1919:                                      ; preds = %if.then1918
  %632 = load i32, ptr %bits1787, align 4, !dbg !3209
  %633 = load i32, ptr %e2801, align 4, !dbg !3210
  %add1920 = add i32 53, %633, !dbg !3211
  %sub1921 = sub i32 %add1920, -1074, !dbg !3211
  %eq1922 = icmp eq i32 %sub1921, %632, !dbg !3209
  %check1923 = icmp sge i32 %sub1921, 0, !dbg !3209
  %siui-eq1924 = and i1 %check1923, %eq1922, !dbg !3209
  br label %and.phi1925, !dbg !3209

and.phi1925:                                      ; preds = %and.rhs1919, %if.then1918
  %val1926 = phi i1 [ false, %if.then1918 ], [ %siui-eq1924, %and.rhs1919 ], !dbg !3209
  br i1 %val1926, label %if.then1927, label %if.exit1928, !dbg !3209

if.then1927:                                      ; preds = %and.phi1925
  store i8 0, ptr %denormal, align 1, !dbg !3212
  br label %if.exit1928, !dbg !3212

if.exit1928:                                      ; preds = %if.then1927, %and.phi1925
  %634 = load double, ptr %y1717, align 8, !dbg !3213
  %fmul1929 = fmul double %634, 5.000000e-01, !dbg !3213
  store double %fmul1929, ptr %y1717, align 8, !dbg !3213
  %635 = load i32, ptr %e2801, align 4, !dbg !3214
  %add1930 = add i32 %635, 1, !dbg !3214
  store i32 %add1930, ptr %e2801, align 4, !dbg !3214
  br label %if.exit1931, !dbg !3214

if.exit1931:                                      ; preds = %if.exit1928, %if.then1915
  %636 = load i32, ptr %e2801, align 4, !dbg !3215
  %add1932 = add i32 %636, 53, !dbg !3215
  %637 = load i32, ptr %emax, align 4, !dbg !3216
  %gt1933 = icmp sgt i32 %add1932, %637, !dbg !3215
  br i1 %gt1933, label %or.phi1939, label %or.rhs1934, !dbg !3215

or.rhs1934:                                       ; preds = %if.exit1931
  %638 = load i8, ptr %denormal, align 1, !dbg !3217
  %639 = trunc i8 %638 to i1, !dbg !3217
  br i1 %639, label %and.rhs1935, label %and.phi1937, !dbg !3217

and.rhs1935:                                      ; preds = %or.rhs1934
  %640 = load double, ptr %frac, align 8, !dbg !3218
  %neq1936 = fcmp one double %640, 0.000000e+00, !dbg !3218
  br label %and.phi1937, !dbg !3218

and.phi1937:                                      ; preds = %and.rhs1935, %or.rhs1934
  %val1938 = phi i1 [ false, %or.rhs1934 ], [ %neq1936, %and.rhs1935 ], !dbg !3218
  br label %or.phi1939, !dbg !3218

or.phi1939:                                       ; preds = %and.phi1937, %if.exit1931
  %val1940 = phi i1 [ true, %if.exit1931 ], [ %val1938, %and.phi1937 ], !dbg !3218
  br i1 %val1940, label %if.then1941, label %if.exit1942, !dbg !3218

if.then1941:                                      ; preds = %or.phi1939
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3219
  br label %err_retblock, !dbg !3219

if.exit1942:                                      ; preds = %or.phi1939
  br label %if.exit1943, !dbg !3219

if.exit1943:                                      ; preds = %if.exit1942, %if.exit1908
  %641 = load double, ptr %y1717, align 8
  store double %641, ptr %x1944, align 8
  %642 = load i32, ptr %e2801, align 4
  store i32 %642, ptr %n1945, align 4
  %643 = load double, ptr %x1944, align 8, !dbg !3220
  %644 = load i32, ptr %n1945, align 4, !dbg !3220
  %645 = call double @scalbn(double %643, i32 %644), !dbg !3223
  store double %645, ptr %blockret423, align 8, !dbg !3223
  br label %expr_block.exit1947, !dbg !3223

expr_block.exit1947:                              ; preds = %if.exit1943, %checkok901, %checkok853, %if.then814, %if.then756, %if.then739, %if.exit489, %if.then477
  %646 = load double, ptr %blockret423, align 8, !dbg !3223
  store double %646, ptr %blockret, align 8, !dbg !3223
  br label %expr_block.exit1948, !dbg !3223

expr_block.exit1948:                              ; preds = %expr_block.exit1947, %expr_block.exit419, %if.then92, %if.then65
  %647 = load double, ptr %blockret, align 8, !dbg !3223
  store double %647, ptr %0, align 8, !dbg !3223
  ret i64 0, !dbg !3223

err_retblock:                                     ; preds = %if.then1941, %if.then765, %if.then762, %if.then735, %guard_block730, %if.then697, %if.then688, %if.then555, %if.then488, %if.then413, %if.then357, %if.then354, %guard_block, %if.then302, %if.then245, %if.then175, %if.then
  %648 = load i64, ptr %reterr, align 8, !dbg !3223
  ret i64 %648, !dbg !3223

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %649 = insertvalue %any undef, ptr %taddr, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %651 = insertvalue %any undef, ptr %taddr2, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %653 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr4, align 8
  %654 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr5, align 8
  %655 = load [2 x i64], ptr %taddr5, align 8
  store %any %650, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %652, ptr %ptradd6, align 8
  %656 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %656, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %657 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %653, [2 x i64] %654, [2 x i64] %655, i32 468, [2 x i64] %657), !dbg !2476
  unreachable, !dbg !2476

panic8:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr9, align 8
  %658 = insertvalue %any undef, ptr %taddr9, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr10, align 8
  %660 = insertvalue %any undef, ptr %taddr10, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr11, align 8
  %662 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr12, align 8
  %663 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr13, align 8
  %664 = load [2 x i64], ptr %taddr13, align 8
  store %any %659, ptr %varargslots14, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %661, ptr %ptradd15, align 8
  %665 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %665, i64 2, 1
  store %"any[]" %"$$temp16", ptr %taddr17, align 8
  %666 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %662, [2 x i64] %663, [2 x i64] %664, i32 468, [2 x i64] %666), !dbg !2477
  unreachable, !dbg !2477

panic23:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr24, align 8
  %667 = insertvalue %any undef, ptr %taddr24, 0
  %668 = insertvalue %any %667, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %669 = insertvalue %any undef, ptr %taddr25, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr26, align 8
  %671 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr27, align 8
  %672 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr28, align 8
  %673 = load [2 x i64], ptr %taddr28, align 8
  store %any %668, ptr %varargslots29, align 8
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %670, ptr %ptradd30, align 8
  %674 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %674, i64 2, 1
  store %"any[]" %"$$temp31", ptr %taddr32, align 8
  %675 = load [2 x i64], ptr %taddr32, align 8
  call void @std.core.builtin.panicf([2 x i64] %671, [2 x i64] %672, [2 x i64] %673, i32 470, [2 x i64] %675), !dbg !2483
  unreachable, !dbg !2483

panic36:                                          ; preds = %switch.case34
  store i64 %21, ptr %taddr37, align 8
  %676 = insertvalue %any undef, ptr %taddr37, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr38, align 8
  %678 = insertvalue %any undef, ptr %taddr38, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr39, align 8
  %680 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr40, align 8
  %681 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr41, align 8
  %682 = load [2 x i64], ptr %taddr41, align 8
  store %any %677, ptr %varargslots42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %679, ptr %ptradd43, align 8
  %683 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp44", ptr %taddr45, align 8
  %684 = load [2 x i64], ptr %taddr45, align 8
  call void @std.core.builtin.panicf([2 x i64] %680, [2 x i64] %681, [2 x i64] %682, i32 476, [2 x i64] %684), !dbg !2487
  unreachable, !dbg !2487

panic99:                                          ; preds = %and.rhs96
  store i64 %55, ptr %taddr100, align 8
  %685 = insertvalue %any undef, ptr %taddr100, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr101, align 8
  %687 = insertvalue %any undef, ptr %taddr101, 0
  %688 = insertvalue %any %687, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr102, align 8
  %689 = load [2 x i64], ptr %taddr102, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr103, align 8
  %690 = load [2 x i64], ptr %taddr103, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr104, align 8
  %691 = load [2 x i64], ptr %taddr104, align 8
  store %any %686, ptr %varargslots105, align 8
  %ptradd106 = getelementptr inbounds i8, ptr %varargslots105, i64 16
  store %any %688, ptr %ptradd106, align 8
  %692 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp107" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp107", ptr %taddr108, align 8
  %693 = load [2 x i64], ptr %taddr108, align 8
  call void @std.core.builtin.panicf([2 x i64] %689, [2 x i64] %690, [2 x i64] %691, i32 481, [2 x i64] %693), !dbg !2498
  unreachable, !dbg !2498

panic116:                                         ; preds = %and.rhs113
  store i64 %59, ptr %taddr117, align 8
  %694 = insertvalue %any undef, ptr %taddr117, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr118, align 8
  %696 = insertvalue %any undef, ptr %taddr118, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr119, align 8
  %698 = load [2 x i64], ptr %taddr119, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr120, align 8
  %699 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr121, align 8
  %700 = load [2 x i64], ptr %taddr121, align 8
  store %any %695, ptr %varargslots122, align 8
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %697, ptr %ptradd123, align 8
  %701 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %701, i64 2, 1
  store %"any[]" %"$$temp124", ptr %taddr125, align 8
  %702 = load [2 x i64], ptr %taddr125, align 8
  call void @std.core.builtin.panicf([2 x i64] %698, [2 x i64] %699, [2 x i64] %700, i32 481, [2 x i64] %702), !dbg !2500
  unreachable, !dbg !2500

panic133:                                         ; preds = %if.then131
  store i64 %65, ptr %taddr134, align 8
  %703 = insertvalue %any undef, ptr %taddr134, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr135, align 8
  %705 = insertvalue %any undef, ptr %taddr135, 0
  %706 = insertvalue %any %705, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr136, align 8
  %707 = load [2 x i64], ptr %taddr136, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr137, align 8
  %708 = load [2 x i64], ptr %taddr137, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr138, align 8
  %709 = load [2 x i64], ptr %taddr138, align 8
  store %any %704, ptr %varargslots139, align 8
  %ptradd140 = getelementptr inbounds i8, ptr %varargslots139, i64 16
  store %any %706, ptr %ptradd140, align 8
  %710 = insertvalue %"any[]" undef, ptr %varargslots139, 0
  %"$$temp141" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp141", ptr %taddr142, align 8
  %711 = load [2 x i64], ptr %taddr142, align 8
  call void @std.core.builtin.panicf([2 x i64] %707, [2 x i64] %708, [2 x i64] %709, i32 483, [2 x i64] %711), !dbg !2504
  unreachable, !dbg !2504

panic153:                                         ; preds = %loop.cond150
  store i64 %72, ptr %taddr154, align 8
  %712 = insertvalue %any undef, ptr %taddr154, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr155, align 8
  %714 = insertvalue %any undef, ptr %taddr155, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr156, align 8
  %716 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr157, align 8
  %717 = load [2 x i64], ptr %taddr157, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr158, align 8
  %718 = load [2 x i64], ptr %taddr158, align 8
  store %any %713, ptr %varargslots159, align 8
  %ptradd160 = getelementptr inbounds i8, ptr %varargslots159, i64 16
  store %any %715, ptr %ptradd160, align 8
  %719 = insertvalue %"any[]" undef, ptr %varargslots159, 0
  %"$$temp161" = insertvalue %"any[]" %719, i64 2, 1
  store %"any[]" %"$$temp161", ptr %taddr162, align 8
  %720 = load [2 x i64], ptr %taddr162, align 8
  call void @std.core.builtin.panicf([2 x i64] %716, [2 x i64] %717, [2 x i64] %718, i32 344, [2 x i64] %720), !dbg !2537
  unreachable, !dbg !2537

panic184:                                         ; preds = %and.rhs180
  store i64 %88, ptr %taddr185, align 8
  %721 = insertvalue %any undef, ptr %taddr185, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %723 = insertvalue %any undef, ptr %taddr186, 0
  %724 = insertvalue %any %723, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr187, align 8
  %725 = load [2 x i64], ptr %taddr187, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr188, align 8
  %726 = load [2 x i64], ptr %taddr188, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr189, align 8
  %727 = load [2 x i64], ptr %taddr189, align 8
  store %any %722, ptr %varargslots190, align 8
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %724, ptr %ptradd191, align 8
  %728 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp192", ptr %taddr193, align 8
  %729 = load [2 x i64], ptr %taddr193, align 8
  call void @std.core.builtin.panicf([2 x i64] %725, [2 x i64] %726, [2 x i64] %727, i32 357, [2 x i64] %729), !dbg !2557
  unreachable, !dbg !2557

panic207:                                         ; preds = %and.rhs203
  store i64 %96, ptr %taddr208, align 8
  %730 = insertvalue %any undef, ptr %taddr208, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add205, ptr %taddr209, align 8
  %732 = insertvalue %any undef, ptr %taddr209, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr210, align 8
  %734 = load [2 x i64], ptr %taddr210, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr211, align 8
  %735 = load [2 x i64], ptr %taddr211, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr212, align 8
  %736 = load [2 x i64], ptr %taddr212, align 8
  store %any %731, ptr %varargslots213, align 8
  %ptradd214 = getelementptr inbounds i8, ptr %varargslots213, i64 16
  store %any %733, ptr %ptradd214, align 8
  %737 = insertvalue %"any[]" undef, ptr %varargslots213, 0
  %"$$temp215" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp215", ptr %taddr216, align 8
  %738 = load [2 x i64], ptr %taddr216, align 8
  call void @std.core.builtin.panicf([2 x i64] %734, [2 x i64] %735, [2 x i64] %736, i32 361, [2 x i64] %738), !dbg !2568
  unreachable, !dbg !2568

panic288:                                         ; preds = %if.exit284
  store i64 %130, ptr %taddr289, align 8
  %739 = insertvalue %any undef, ptr %taddr289, 0
  %740 = insertvalue %any %739, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %741 = insertvalue %any undef, ptr %taddr290, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr291, align 8
  %743 = load [2 x i64], ptr %taddr291, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr292, align 8
  %744 = load [2 x i64], ptr %taddr292, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr293, align 8
  %745 = load [2 x i64], ptr %taddr293, align 8
  store %any %740, ptr %varargslots294, align 8
  %ptradd295 = getelementptr inbounds i8, ptr %varargslots294, i64 16
  store %any %742, ptr %ptradd295, align 8
  %746 = insertvalue %"any[]" undef, ptr %varargslots294, 0
  %"$$temp296" = insertvalue %"any[]" %746, i64 2, 1
  store %"any[]" %"$$temp296", ptr %taddr297, align 8
  %747 = load [2 x i64], ptr %taddr297, align 8
  call void @std.core.builtin.panicf([2 x i64] %743, [2 x i64] %744, [2 x i64] %745, i32 397, [2 x i64] %747), !dbg !2616
  unreachable, !dbg !2616

panic321:                                         ; preds = %if.then318
  store i64 %147, ptr %taddr322, align 8
  %748 = insertvalue %any undef, ptr %taddr322, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add319, ptr %taddr323, align 8
  %750 = insertvalue %any undef, ptr %taddr323, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr324, align 8
  %752 = load [2 x i64], ptr %taddr324, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr325, align 8
  %753 = load [2 x i64], ptr %taddr325, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr326, align 8
  %754 = load [2 x i64], ptr %taddr326, align 8
  store %any %749, ptr %varargslots327, align 8
  %ptradd328 = getelementptr inbounds i8, ptr %varargslots327, i64 16
  store %any %751, ptr %ptradd328, align 8
  %755 = insertvalue %"any[]" undef, ptr %varargslots327, 0
  %"$$temp329" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp329", ptr %taddr330, align 8
  %756 = load [2 x i64], ptr %taddr330, align 8
  call void @std.core.builtin.panicf([2 x i64] %752, [2 x i64] %753, [2 x i64] %754, i32 406, [2 x i64] %756), !dbg !2634
  unreachable, !dbg !2634

panic332:                                         ; preds = %checkok331
  store i64 %add319, ptr %taddr333, align 8
  %757 = insertvalue %any undef, ptr %taddr333, 0
  %758 = insertvalue %any %757, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 22 }, ptr %taddr334, align 8
  %759 = load [2 x i64], ptr %taddr334, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr335, align 8
  %760 = load [2 x i64], ptr %taddr335, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr336, align 8
  %761 = load [2 x i64], ptr %taddr336, align 8
  store %any %758, ptr %varargslots337, align 8
  %762 = insertvalue %"any[]" undef, ptr %varargslots337, 0
  %"$$temp338" = insertvalue %"any[]" %762, i64 1, 1
  store %"any[]" %"$$temp338", ptr %taddr339, align 8
  %763 = load [2 x i64], ptr %taddr339, align 8
  call void @std.core.builtin.panicf([2 x i64] %759, [2 x i64] %760, [2 x i64] %761, i32 406, [2 x i64] %763), !dbg !2633
  unreachable, !dbg !2633

panic434:                                         ; preds = %assert_ok
  store i64 %213, ptr %taddr435, align 8
  %764 = insertvalue %any undef, ptr %taddr435, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr436, align 8
  %766 = insertvalue %any undef, ptr %taddr436, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr437, align 8
  %768 = load [2 x i64], ptr %taddr437, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr438, align 8
  %769 = load [2 x i64], ptr %taddr438, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr439, align 8
  %770 = load [2 x i64], ptr %taddr439, align 8
  store %any %765, ptr %varargslots440, align 8
  %ptradd441 = getelementptr inbounds i8, ptr %varargslots440, i64 16
  store %any %767, ptr %ptradd441, align 8
  %771 = insertvalue %"any[]" undef, ptr %varargslots440, 0
  %"$$temp442" = insertvalue %"any[]" %771, i64 2, 1
  store %"any[]" %"$$temp442", ptr %taddr443, align 8
  %772 = load [2 x i64], ptr %taddr443, align 8
  call void @std.core.builtin.panicf([2 x i64] %768, [2 x i64] %769, [2 x i64] %770, i32 45, [2 x i64] %772), !dbg !2732
  unreachable, !dbg !2732

panic462:                                         ; preds = %loop.cond459
  store i64 %225, ptr %taddr463, align 8
  %773 = insertvalue %any undef, ptr %taddr463, 0
  %774 = insertvalue %any %773, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %227, ptr %taddr464, align 8
  %775 = insertvalue %any undef, ptr %taddr464, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr465, align 8
  %777 = load [2 x i64], ptr %taddr465, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr466, align 8
  %778 = load [2 x i64], ptr %taddr466, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr467, align 8
  %779 = load [2 x i64], ptr %taddr467, align 8
  store %any %774, ptr %varargslots468, align 8
  %ptradd469 = getelementptr inbounds i8, ptr %varargslots468, i64 16
  store %any %776, ptr %ptradd469, align 8
  %780 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp470" = insertvalue %"any[]" %780, i64 2, 1
  store %"any[]" %"$$temp470", ptr %taddr471, align 8
  %781 = load [2 x i64], ptr %taddr471, align 8
  call void @std.core.builtin.panicf([2 x i64] %777, [2 x i64] %778, [2 x i64] %779, i32 56, [2 x i64] %781), !dbg !2757
  unreachable, !dbg !2757

panic498:                                         ; preds = %and.rhs494
  store i64 %242, ptr %taddr499, align 8
  %782 = insertvalue %any undef, ptr %taddr499, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add496, ptr %taddr500, align 8
  %784 = insertvalue %any undef, ptr %taddr500, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr501, align 8
  %786 = load [2 x i64], ptr %taddr501, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr502, align 8
  %787 = load [2 x i64], ptr %taddr502, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr503, align 8
  %788 = load [2 x i64], ptr %taddr503, align 8
  store %any %783, ptr %varargslots504, align 8
  %ptradd505 = getelementptr inbounds i8, ptr %varargslots504, i64 16
  store %any %785, ptr %ptradd505, align 8
  %789 = insertvalue %"any[]" undef, ptr %varargslots504, 0
  %"$$temp506" = insertvalue %"any[]" %789, i64 2, 1
  store %"any[]" %"$$temp506", ptr %taddr507, align 8
  %790 = load [2 x i64], ptr %taddr507, align 8
  call void @std.core.builtin.panicf([2 x i64] %786, [2 x i64] %787, [2 x i64] %788, i32 70, [2 x i64] %790), !dbg !2777
  unreachable, !dbg !2777

panic521:                                         ; preds = %and.rhs517
  store i64 %250, ptr %taddr522, align 8
  %791 = insertvalue %any undef, ptr %taddr522, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add519, ptr %taddr523, align 8
  %793 = insertvalue %any undef, ptr %taddr523, 0
  %794 = insertvalue %any %793, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr524, align 8
  %795 = load [2 x i64], ptr %taddr524, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr525, align 8
  %796 = load [2 x i64], ptr %taddr525, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr526, align 8
  %797 = load [2 x i64], ptr %taddr526, align 8
  store %any %792, ptr %varargslots527, align 8
  %ptradd528 = getelementptr inbounds i8, ptr %varargslots527, i64 16
  store %any %794, ptr %ptradd528, align 8
  %798 = insertvalue %"any[]" undef, ptr %varargslots527, 0
  %"$$temp529" = insertvalue %"any[]" %798, i64 2, 1
  store %"any[]" %"$$temp529", ptr %taddr530, align 8
  %799 = load [2 x i64], ptr %taddr530, align 8
  call void @std.core.builtin.panicf([2 x i64] %795, [2 x i64] %796, [2 x i64] %797, i32 74, [2 x i64] %799), !dbg !2788
  unreachable, !dbg !2788

panic569:                                         ; preds = %if.then567
  store i64 %sext, ptr %taddr570, align 8
  %800 = insertvalue %any undef, ptr %taddr570, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr571, align 8
  %802 = load [2 x i64], ptr %taddr571, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr572, align 8
  %803 = load [2 x i64], ptr %taddr572, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr573, align 8
  %804 = load [2 x i64], ptr %taddr573, align 8
  store %any %801, ptr %varargslots574, align 8
  %805 = insertvalue %"any[]" undef, ptr %varargslots574, 0
  %"$$temp575" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp575", ptr %taddr576, align 8
  %806 = load [2 x i64], ptr %taddr576, align 8
  call void @std.core.builtin.panicf([2 x i64] %802, [2 x i64] %803, [2 x i64] %804, i32 94, [2 x i64] %806), !dbg !2810
  unreachable, !dbg !2810

panic579:                                         ; preds = %checkok577
  store i64 128, ptr %taddr580, align 8
  %807 = insertvalue %any undef, ptr %taddr580, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr581, align 8
  %809 = insertvalue %any undef, ptr %taddr581, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr582, align 8
  %811 = load [2 x i64], ptr %taddr582, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr583, align 8
  %812 = load [2 x i64], ptr %taddr583, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr584, align 8
  %813 = load [2 x i64], ptr %taddr584, align 8
  store %any %808, ptr %varargslots585, align 8
  %ptradd586 = getelementptr inbounds i8, ptr %varargslots585, i64 16
  store %any %810, ptr %ptradd586, align 8
  %814 = insertvalue %"any[]" undef, ptr %varargslots585, 0
  %"$$temp587" = insertvalue %"any[]" %814, i64 2, 1
  store %"any[]" %"$$temp587", ptr %taddr588, align 8
  %815 = load [2 x i64], ptr %taddr588, align 8
  call void @std.core.builtin.panicf([2 x i64] %811, [2 x i64] %812, [2 x i64] %813, i32 94, [2 x i64] %815), !dbg !2810
  unreachable, !dbg !2810

panic592:                                         ; preds = %checkok589
  store i64 %sext590, ptr %taddr593, align 8
  %816 = insertvalue %any undef, ptr %taddr593, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr594, align 8
  %818 = load [2 x i64], ptr %taddr594, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr595, align 8
  %819 = load [2 x i64], ptr %taddr595, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr596, align 8
  %820 = load [2 x i64], ptr %taddr596, align 8
  store %any %817, ptr %varargslots597, align 8
  %821 = insertvalue %"any[]" undef, ptr %varargslots597, 0
  %"$$temp598" = insertvalue %"any[]" %821, i64 1, 1
  store %"any[]" %"$$temp598", ptr %taddr599, align 8
  %822 = load [2 x i64], ptr %taddr599, align 8
  call void @std.core.builtin.panicf([2 x i64] %818, [2 x i64] %819, [2 x i64] %820, i32 94, [2 x i64] %822), !dbg !2812
  unreachable, !dbg !2812

panic602:                                         ; preds = %checkok600
  store i64 128, ptr %taddr603, align 8
  %823 = insertvalue %any undef, ptr %taddr603, 0
  %824 = insertvalue %any %823, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext590, ptr %taddr604, align 8
  %825 = insertvalue %any undef, ptr %taddr604, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr605, align 8
  %827 = load [2 x i64], ptr %taddr605, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr606, align 8
  %828 = load [2 x i64], ptr %taddr606, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr607, align 8
  %829 = load [2 x i64], ptr %taddr607, align 8
  store %any %824, ptr %varargslots608, align 8
  %ptradd609 = getelementptr inbounds i8, ptr %varargslots608, i64 16
  store %any %826, ptr %ptradd609, align 8
  %830 = insertvalue %"any[]" undef, ptr %varargslots608, 0
  %"$$temp610" = insertvalue %"any[]" %830, i64 2, 1
  store %"any[]" %"$$temp610", ptr %taddr611, align 8
  %831 = load [2 x i64], ptr %taddr611, align 8
  call void @std.core.builtin.panicf([2 x i64] %827, [2 x i64] %828, [2 x i64] %829, i32 94, [2 x i64] %831), !dbg !2812
  unreachable, !dbg !2812

panic621:                                         ; preds = %if.else618
  store i64 %sext619, ptr %taddr622, align 8
  %832 = insertvalue %any undef, ptr %taddr622, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr623, align 8
  %834 = load [2 x i64], ptr %taddr623, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr624, align 8
  %835 = load [2 x i64], ptr %taddr624, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr625, align 8
  %836 = load [2 x i64], ptr %taddr625, align 8
  store %any %833, ptr %varargslots626, align 8
  %837 = insertvalue %"any[]" undef, ptr %varargslots626, 0
  %"$$temp627" = insertvalue %"any[]" %837, i64 1, 1
  store %"any[]" %"$$temp627", ptr %taddr628, align 8
  %838 = load [2 x i64], ptr %taddr628, align 8
  call void @std.core.builtin.panicf([2 x i64] %834, [2 x i64] %835, [2 x i64] %836, i32 98, [2 x i64] %838), !dbg !2815
  unreachable, !dbg !2815

panic631:                                         ; preds = %checkok629
  store i64 128, ptr %taddr632, align 8
  %839 = insertvalue %any undef, ptr %taddr632, 0
  %840 = insertvalue %any %839, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext619, ptr %taddr633, align 8
  %841 = insertvalue %any undef, ptr %taddr633, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr634, align 8
  %843 = load [2 x i64], ptr %taddr634, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr635, align 8
  %844 = load [2 x i64], ptr %taddr635, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr636, align 8
  %845 = load [2 x i64], ptr %taddr636, align 8
  store %any %840, ptr %varargslots637, align 8
  %ptradd638 = getelementptr inbounds i8, ptr %varargslots637, i64 16
  store %any %842, ptr %ptradd638, align 8
  %846 = insertvalue %"any[]" undef, ptr %varargslots637, 0
  %"$$temp639" = insertvalue %"any[]" %846, i64 2, 1
  store %"any[]" %"$$temp639", ptr %taddr640, align 8
  %847 = load [2 x i64], ptr %taddr640, align 8
  call void @std.core.builtin.panicf([2 x i64] %843, [2 x i64] %844, [2 x i64] %845, i32 98, [2 x i64] %847), !dbg !2815
  unreachable, !dbg !2815

panic671:                                         ; preds = %assert_ok667
  store i64 %294, ptr %taddr672, align 8
  %848 = insertvalue %any undef, ptr %taddr672, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add669, ptr %taddr673, align 8
  %850 = insertvalue %any undef, ptr %taddr673, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr674, align 8
  %852 = load [2 x i64], ptr %taddr674, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr675, align 8
  %853 = load [2 x i64], ptr %taddr675, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr676, align 8
  %854 = load [2 x i64], ptr %taddr676, align 8
  store %any %849, ptr %varargslots677, align 8
  %ptradd678 = getelementptr inbounds i8, ptr %varargslots677, i64 16
  store %any %851, ptr %ptradd678, align 8
  %855 = insertvalue %"any[]" undef, ptr %varargslots677, 0
  %"$$temp679" = insertvalue %"any[]" %855, i64 2, 1
  store %"any[]" %"$$temp679", ptr %taddr680, align 8
  %856 = load [2 x i64], ptr %taddr680, align 8
  call void @std.core.builtin.panicf([2 x i64] %852, [2 x i64] %853, [2 x i64] %854, i32 113, [2 x i64] %856), !dbg !2836
  unreachable, !dbg !2836

panic701:                                         ; preds = %if.exit698
  store i64 %310, ptr %taddr702, align 8
  %857 = insertvalue %any undef, ptr %taddr702, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add699, ptr %taddr703, align 8
  %859 = insertvalue %any undef, ptr %taddr703, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr704, align 8
  %861 = load [2 x i64], ptr %taddr704, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr705, align 8
  %862 = load [2 x i64], ptr %taddr705, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr706, align 8
  %863 = load [2 x i64], ptr %taddr706, align 8
  store %any %858, ptr %varargslots707, align 8
  %ptradd708 = getelementptr inbounds i8, ptr %varargslots707, i64 16
  store %any %860, ptr %ptradd708, align 8
  %864 = insertvalue %"any[]" undef, ptr %varargslots707, 0
  %"$$temp709" = insertvalue %"any[]" %864, i64 2, 1
  store %"any[]" %"$$temp709", ptr %taddr710, align 8
  %865 = load [2 x i64], ptr %taddr710, align 8
  call void @std.core.builtin.panicf([2 x i64] %861, [2 x i64] %862, [2 x i64] %863, i32 120, [2 x i64] %865), !dbg !2850
  unreachable, !dbg !2850

panic713:                                         ; preds = %checkok711
  store i64 %add699, ptr %taddr714, align 8
  %866 = insertvalue %any undef, ptr %taddr714, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 22 }, ptr %taddr715, align 8
  %868 = load [2 x i64], ptr %taddr715, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr716, align 8
  %869 = load [2 x i64], ptr %taddr716, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr717, align 8
  %870 = load [2 x i64], ptr %taddr717, align 8
  store %any %867, ptr %varargslots718, align 8
  %871 = insertvalue %"any[]" undef, ptr %varargslots718, 0
  %"$$temp719" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp719", ptr %taddr720, align 8
  %872 = load [2 x i64], ptr %taddr720, align 8
  call void @std.core.builtin.panicf([2 x i64] %868, [2 x i64] %869, [2 x i64] %870, i32 120, [2 x i64] %872), !dbg !2849
  unreachable, !dbg !2849

panic774:                                         ; preds = %loop.body771
  store i64 %sext772, ptr %taddr775, align 8
  %873 = insertvalue %any undef, ptr %taddr775, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr776, align 8
  %875 = load [2 x i64], ptr %taddr776, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr777, align 8
  %876 = load [2 x i64], ptr %taddr777, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr778, align 8
  %877 = load [2 x i64], ptr %taddr778, align 8
  store %any %874, ptr %varargslots779, align 8
  %878 = insertvalue %"any[]" undef, ptr %varargslots779, 0
  %"$$temp780" = insertvalue %"any[]" %878, i64 1, 1
  store %"any[]" %"$$temp780", ptr %taddr781, align 8
  %879 = load [2 x i64], ptr %taddr781, align 8
  call void @std.core.builtin.panicf([2 x i64] %875, [2 x i64] %876, [2 x i64] %877, i32 138, [2 x i64] %879), !dbg !2878
  unreachable, !dbg !2878

panic784:                                         ; preds = %checkok782
  store i64 128, ptr %taddr785, align 8
  %880 = insertvalue %any undef, ptr %taddr785, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext772, ptr %taddr786, align 8
  %882 = insertvalue %any undef, ptr %taddr786, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr787, align 8
  %884 = load [2 x i64], ptr %taddr787, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr788, align 8
  %885 = load [2 x i64], ptr %taddr788, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr789, align 8
  %886 = load [2 x i64], ptr %taddr789, align 8
  store %any %881, ptr %varargslots790, align 8
  %ptradd791 = getelementptr inbounds i8, ptr %varargslots790, i64 16
  store %any %883, ptr %ptradd791, align 8
  %887 = insertvalue %"any[]" undef, ptr %varargslots790, 0
  %"$$temp792" = insertvalue %"any[]" %887, i64 2, 1
  store %"any[]" %"$$temp792", ptr %taddr793, align 8
  %888 = load [2 x i64], ptr %taddr793, align 8
  call void @std.core.builtin.panicf([2 x i64] %884, [2 x i64] %885, [2 x i64] %886, i32 138, [2 x i64] %888), !dbg !2878
  unreachable, !dbg !2878

panic826:                                         ; preds = %if.then820
  store i64 %sub824, ptr %taddr827, align 8
  %889 = insertvalue %any undef, ptr %taddr827, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr828, align 8
  %891 = load [2 x i64], ptr %taddr828, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr829, align 8
  %892 = load [2 x i64], ptr %taddr829, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr830, align 8
  %893 = load [2 x i64], ptr %taddr830, align 8
  store %any %890, ptr %varargslots831, align 8
  %894 = insertvalue %"any[]" undef, ptr %varargslots831, 0
  %"$$temp832" = insertvalue %"any[]" %894, i64 1, 1
  store %"any[]" %"$$temp832", ptr %taddr833, align 8
  %895 = load [2 x i64], ptr %taddr833, align 8
  call void @std.core.builtin.panicf([2 x i64] %891, [2 x i64] %892, [2 x i64] %893, i32 152, [2 x i64] %895), !dbg !2905
  unreachable, !dbg !2905

panic836:                                         ; preds = %checkok834
  store i64 8, ptr %taddr837, align 8
  %896 = insertvalue %any undef, ptr %taddr837, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub824, ptr %taddr838, align 8
  %898 = insertvalue %any undef, ptr %taddr838, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr839, align 8
  %900 = load [2 x i64], ptr %taddr839, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr840, align 8
  %901 = load [2 x i64], ptr %taddr840, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr841, align 8
  %902 = load [2 x i64], ptr %taddr841, align 8
  store %any %897, ptr %varargslots842, align 8
  %ptradd843 = getelementptr inbounds i8, ptr %varargslots842, i64 16
  store %any %899, ptr %ptradd843, align 8
  %903 = insertvalue %"any[]" undef, ptr %varargslots842, 0
  %"$$temp844" = insertvalue %"any[]" %903, i64 2, 1
  store %"any[]" %"$$temp844", ptr %taddr845, align 8
  %904 = load [2 x i64], ptr %taddr845, align 8
  call void @std.core.builtin.panicf([2 x i64] %900, [2 x i64] %901, [2 x i64] %902, i32 152, [2 x i64] %904), !dbg !2905
  unreachable, !dbg !2905

panic849:                                         ; preds = %checkok846
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr850, align 8
  %905 = load [2 x i64], ptr %taddr850, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr851, align 8
  %906 = load [2 x i64], ptr %taddr851, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr852, align 8
  %907 = load [2 x i64], ptr %taddr852, align 8
  %908 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %908([2 x i64] %905, [2 x i64] %906, [2 x i64] %907, i32 152), !dbg !2902
  unreachable, !dbg !2902

panic862:                                         ; preds = %or.rhs861
  store i32 %363, ptr %taddr863, align 4
  %909 = insertvalue %any undef, ptr %taddr863, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr864, align 8
  %911 = load [2 x i64], ptr %taddr864, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr865, align 8
  %912 = load [2 x i64], ptr %taddr865, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr866, align 8
  %913 = load [2 x i64], ptr %taddr866, align 8
  store %any %910, ptr %varargslots867, align 8
  %914 = insertvalue %"any[]" undef, ptr %varargslots867, 0
  %"$$temp868" = insertvalue %"any[]" %914, i64 1, 1
  store %"any[]" %"$$temp868", ptr %taddr869, align 8
  %915 = load [2 x i64], ptr %taddr869, align 8
  call void @std.core.builtin.panicf([2 x i64] %911, [2 x i64] %912, [2 x i64] %913, i32 154, [2 x i64] %915), !dbg !2915
  unreachable, !dbg !2915

panic881:                                         ; preds = %if.then875
  store i64 %sub879, ptr %taddr882, align 8
  %916 = insertvalue %any undef, ptr %taddr882, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr883, align 8
  %918 = load [2 x i64], ptr %taddr883, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr884, align 8
  %919 = load [2 x i64], ptr %taddr884, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr885, align 8
  %920 = load [2 x i64], ptr %taddr885, align 8
  store %any %917, ptr %varargslots886, align 8
  %921 = insertvalue %"any[]" undef, ptr %varargslots886, 0
  %"$$temp887" = insertvalue %"any[]" %921, i64 1, 1
  store %"any[]" %"$$temp887", ptr %taddr888, align 8
  %922 = load [2 x i64], ptr %taddr888, align 8
  call void @std.core.builtin.panicf([2 x i64] %918, [2 x i64] %919, [2 x i64] %920, i32 154, [2 x i64] %922), !dbg !2918
  unreachable, !dbg !2918

panic891:                                         ; preds = %checkok889
  store i64 8, ptr %taddr892, align 8
  %923 = insertvalue %any undef, ptr %taddr892, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub879, ptr %taddr893, align 8
  %925 = insertvalue %any undef, ptr %taddr893, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr894, align 8
  %927 = load [2 x i64], ptr %taddr894, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr895, align 8
  %928 = load [2 x i64], ptr %taddr895, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr896, align 8
  %929 = load [2 x i64], ptr %taddr896, align 8
  store %any %924, ptr %varargslots897, align 8
  %ptradd898 = getelementptr inbounds i8, ptr %varargslots897, i64 16
  store %any %926, ptr %ptradd898, align 8
  %930 = insertvalue %"any[]" undef, ptr %varargslots897, 0
  %"$$temp899" = insertvalue %"any[]" %930, i64 2, 1
  store %"any[]" %"$$temp899", ptr %taddr900, align 8
  %931 = load [2 x i64], ptr %taddr900, align 8
  call void @std.core.builtin.panicf([2 x i64] %927, [2 x i64] %928, [2 x i64] %929, i32 154, [2 x i64] %931), !dbg !2918
  unreachable, !dbg !2918

panic916:                                         ; preds = %cond.phi
  store i64 %sub914, ptr %taddr917, align 8
  %932 = insertvalue %any undef, ptr %taddr917, 0
  %933 = insertvalue %any %932, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr918, align 8
  %934 = load [2 x i64], ptr %taddr918, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr919, align 8
  %935 = load [2 x i64], ptr %taddr919, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr920, align 8
  %936 = load [2 x i64], ptr %taddr920, align 8
  store %any %933, ptr %varargslots921, align 8
  %937 = insertvalue %"any[]" undef, ptr %varargslots921, 0
  %"$$temp922" = insertvalue %"any[]" %937, i64 1, 1
  store %"any[]" %"$$temp922", ptr %taddr923, align 8
  %938 = load [2 x i64], ptr %taddr923, align 8
  call void @std.core.builtin.panicf([2 x i64] %934, [2 x i64] %935, [2 x i64] %936, i32 161, [2 x i64] %938), !dbg !2929
  unreachable, !dbg !2929

panic926:                                         ; preds = %checkok924
  store i64 8, ptr %taddr927, align 8
  %939 = insertvalue %any undef, ptr %taddr927, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub914, ptr %taddr928, align 8
  %941 = insertvalue %any undef, ptr %taddr928, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr929, align 8
  %943 = load [2 x i64], ptr %taddr929, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr930, align 8
  %944 = load [2 x i64], ptr %taddr930, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr931, align 8
  %945 = load [2 x i64], ptr %taddr931, align 8
  store %any %940, ptr %varargslots932, align 8
  %ptradd933 = getelementptr inbounds i8, ptr %varargslots932, i64 16
  store %any %942, ptr %ptradd933, align 8
  %946 = insertvalue %"any[]" undef, ptr %varargslots932, 0
  %"$$temp934" = insertvalue %"any[]" %946, i64 2, 1
  store %"any[]" %"$$temp934", ptr %taddr935, align 8
  %947 = load [2 x i64], ptr %taddr935, align 8
  call void @std.core.builtin.panicf([2 x i64] %943, [2 x i64] %944, [2 x i64] %945, i32 161, [2 x i64] %947), !dbg !2929
  unreachable, !dbg !2929

panic943:                                         ; preds = %loop.body940
  store i64 %sext941, ptr %taddr944, align 8
  %948 = insertvalue %any undef, ptr %taddr944, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr945, align 8
  %950 = load [2 x i64], ptr %taddr945, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr946, align 8
  %951 = load [2 x i64], ptr %taddr946, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr947, align 8
  %952 = load [2 x i64], ptr %taddr947, align 8
  store %any %949, ptr %varargslots948, align 8
  %953 = insertvalue %"any[]" undef, ptr %varargslots948, 0
  %"$$temp949" = insertvalue %"any[]" %953, i64 1, 1
  store %"any[]" %"$$temp949", ptr %taddr950, align 8
  %954 = load [2 x i64], ptr %taddr950, align 8
  call void @std.core.builtin.panicf([2 x i64] %950, [2 x i64] %951, [2 x i64] %952, i32 165, [2 x i64] %954), !dbg !2940
  unreachable, !dbg !2940

panic953:                                         ; preds = %checkok951
  store i64 128, ptr %taddr954, align 8
  %955 = insertvalue %any undef, ptr %taddr954, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext941, ptr %taddr955, align 8
  %957 = insertvalue %any undef, ptr %taddr955, 0
  %958 = insertvalue %any %957, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr956, align 8
  %959 = load [2 x i64], ptr %taddr956, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr957, align 8
  %960 = load [2 x i64], ptr %taddr957, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr958, align 8
  %961 = load [2 x i64], ptr %taddr958, align 8
  store %any %956, ptr %varargslots959, align 8
  %ptradd960 = getelementptr inbounds i8, ptr %varargslots959, i64 16
  store %any %958, ptr %ptradd960, align 8
  %962 = insertvalue %"any[]" undef, ptr %varargslots959, 0
  %"$$temp961" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp961", ptr %taddr962, align 8
  %963 = load [2 x i64], ptr %taddr962, align 8
  call void @std.core.builtin.panicf([2 x i64] %959, [2 x i64] %960, [2 x i64] %961, i32 165, [2 x i64] %963), !dbg !2940
  unreachable, !dbg !2940

panic966:                                         ; preds = %checkok963
  store %"char[]" { ptr @.panic_msg.85, i64 10 }, ptr %taddr967, align 8
  %964 = load [2 x i64], ptr %taddr967, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr968, align 8
  %965 = load [2 x i64], ptr %taddr968, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr969, align 8
  %966 = load [2 x i64], ptr %taddr969, align 8
  %967 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %967([2 x i64] %964, [2 x i64] %965, [2 x i64] %966, i32 165), !dbg !2942
  unreachable, !dbg !2942

panic974:                                         ; preds = %checkok970
  store i64 %sext972, ptr %taddr975, align 8
  %968 = insertvalue %any undef, ptr %taddr975, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr976, align 8
  %970 = load [2 x i64], ptr %taddr976, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr977, align 8
  %971 = load [2 x i64], ptr %taddr977, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr978, align 8
  %972 = load [2 x i64], ptr %taddr978, align 8
  store %any %969, ptr %varargslots979, align 8
  %973 = insertvalue %"any[]" undef, ptr %varargslots979, 0
  %"$$temp980" = insertvalue %"any[]" %973, i64 1, 1
  store %"any[]" %"$$temp980", ptr %taddr981, align 8
  %974 = load [2 x i64], ptr %taddr981, align 8
  call void @std.core.builtin.panicf([2 x i64] %970, [2 x i64] %971, [2 x i64] %972, i32 166, [2 x i64] %974), !dbg !2943
  unreachable, !dbg !2943

panic984:                                         ; preds = %checkok982
  store i64 128, ptr %taddr985, align 8
  %975 = insertvalue %any undef, ptr %taddr985, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext972, ptr %taddr986, align 8
  %977 = insertvalue %any undef, ptr %taddr986, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr987, align 8
  %979 = load [2 x i64], ptr %taddr987, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr988, align 8
  %980 = load [2 x i64], ptr %taddr988, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr989, align 8
  %981 = load [2 x i64], ptr %taddr989, align 8
  store %any %976, ptr %varargslots990, align 8
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %978, ptr %ptradd991, align 8
  %982 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %982, i64 2, 1
  store %"any[]" %"$$temp992", ptr %taddr993, align 8
  %983 = load [2 x i64], ptr %taddr993, align 8
  call void @std.core.builtin.panicf([2 x i64] %979, [2 x i64] %980, [2 x i64] %981, i32 166, [2 x i64] %983), !dbg !2943
  unreachable, !dbg !2943

panic998:                                         ; preds = %checkok994
  store i64 %sext996, ptr %taddr999, align 8
  %984 = insertvalue %any undef, ptr %taddr999, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1000, align 8
  %986 = load [2 x i64], ptr %taddr1000, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1001, align 8
  %987 = load [2 x i64], ptr %taddr1001, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1002, align 8
  %988 = load [2 x i64], ptr %taddr1002, align 8
  store %any %985, ptr %varargslots1003, align 8
  %989 = insertvalue %"any[]" undef, ptr %varargslots1003, 0
  %"$$temp1004" = insertvalue %"any[]" %989, i64 1, 1
  store %"any[]" %"$$temp1004", ptr %taddr1005, align 8
  %990 = load [2 x i64], ptr %taddr1005, align 8
  call void @std.core.builtin.panicf([2 x i64] %986, [2 x i64] %987, [2 x i64] %988, i32 166, [2 x i64] %990), !dbg !2944
  unreachable, !dbg !2944

panic1008:                                        ; preds = %checkok1006
  store i64 128, ptr %taddr1009, align 8
  %991 = insertvalue %any undef, ptr %taddr1009, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext996, ptr %taddr1010, align 8
  %993 = insertvalue %any undef, ptr %taddr1010, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1011, align 8
  %995 = load [2 x i64], ptr %taddr1011, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1012, align 8
  %996 = load [2 x i64], ptr %taddr1012, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1013, align 8
  %997 = load [2 x i64], ptr %taddr1013, align 8
  store %any %992, ptr %varargslots1014, align 8
  %ptradd1015 = getelementptr inbounds i8, ptr %varargslots1014, i64 16
  store %any %994, ptr %ptradd1015, align 8
  %998 = insertvalue %"any[]" undef, ptr %varargslots1014, 0
  %"$$temp1016" = insertvalue %"any[]" %998, i64 2, 1
  store %"any[]" %"$$temp1016", ptr %taddr1017, align 8
  %999 = load [2 x i64], ptr %taddr1017, align 8
  call void @std.core.builtin.panicf([2 x i64] %995, [2 x i64] %996, [2 x i64] %997, i32 166, [2 x i64] %999), !dbg !2944
  unreachable, !dbg !2944

panic1021:                                        ; preds = %checkok1018
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr1022, align 8
  %1000 = load [2 x i64], ptr %taddr1022, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1023, align 8
  %1001 = load [2 x i64], ptr %taddr1023, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1024, align 8
  %1002 = load [2 x i64], ptr %taddr1024, align 8
  %1003 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1003([2 x i64] %1000, [2 x i64] %1001, [2 x i64] %1002, i32 166), !dbg !2946
  unreachable, !dbg !2946

panic1028:                                        ; preds = %checkok1025
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr1029, align 8
  %1004 = load [2 x i64], ptr %taddr1029, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1030, align 8
  %1005 = load [2 x i64], ptr %taddr1030, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1031, align 8
  %1006 = load [2 x i64], ptr %taddr1031, align 8
  %1007 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1007([2 x i64] %1004, [2 x i64] %1005, [2 x i64] %1006, i32 167), !dbg !2949
  unreachable, !dbg !2949

panic1039:                                        ; preds = %and.rhs1036
  store i64 %sext1037, ptr %taddr1040, align 8
  %1008 = insertvalue %any undef, ptr %taddr1040, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1041, align 8
  %1010 = load [2 x i64], ptr %taddr1041, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1042, align 8
  %1011 = load [2 x i64], ptr %taddr1042, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1043, align 8
  %1012 = load [2 x i64], ptr %taddr1043, align 8
  store %any %1009, ptr %varargslots1044, align 8
  %1013 = insertvalue %"any[]" undef, ptr %varargslots1044, 0
  %"$$temp1045" = insertvalue %"any[]" %1013, i64 1, 1
  store %"any[]" %"$$temp1045", ptr %taddr1046, align 8
  %1014 = load [2 x i64], ptr %taddr1046, align 8
  call void @std.core.builtin.panicf([2 x i64] %1010, [2 x i64] %1011, [2 x i64] %1012, i32 168, [2 x i64] %1014), !dbg !2953
  unreachable, !dbg !2953

panic1049:                                        ; preds = %checkok1047
  store i64 128, ptr %taddr1050, align 8
  %1015 = insertvalue %any undef, ptr %taddr1050, 0
  %1016 = insertvalue %any %1015, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1037, ptr %taddr1051, align 8
  %1017 = insertvalue %any undef, ptr %taddr1051, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1052, align 8
  %1019 = load [2 x i64], ptr %taddr1052, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1053, align 8
  %1020 = load [2 x i64], ptr %taddr1053, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1054, align 8
  %1021 = load [2 x i64], ptr %taddr1054, align 8
  store %any %1016, ptr %varargslots1055, align 8
  %ptradd1056 = getelementptr inbounds i8, ptr %varargslots1055, i64 16
  store %any %1018, ptr %ptradd1056, align 8
  %1022 = insertvalue %"any[]" undef, ptr %varargslots1055, 0
  %"$$temp1057" = insertvalue %"any[]" %1022, i64 2, 1
  store %"any[]" %"$$temp1057", ptr %taddr1058, align 8
  %1023 = load [2 x i64], ptr %taddr1058, align 8
  call void @std.core.builtin.panicf([2 x i64] %1019, [2 x i64] %1020, [2 x i64] %1021, i32 168, [2 x i64] %1023), !dbg !2953
  unreachable, !dbg !2953

panic1076:                                        ; preds = %if.then1072
  store i64 %sext1074, ptr %taddr1077, align 8
  %1024 = insertvalue %any undef, ptr %taddr1077, 0
  %1025 = insertvalue %any %1024, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1078, align 8
  %1026 = load [2 x i64], ptr %taddr1078, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1079, align 8
  %1027 = load [2 x i64], ptr %taddr1079, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1080, align 8
  %1028 = load [2 x i64], ptr %taddr1080, align 8
  store %any %1025, ptr %varargslots1081, align 8
  %1029 = insertvalue %"any[]" undef, ptr %varargslots1081, 0
  %"$$temp1082" = insertvalue %"any[]" %1029, i64 1, 1
  store %"any[]" %"$$temp1082", ptr %taddr1083, align 8
  %1030 = load [2 x i64], ptr %taddr1083, align 8
  call void @std.core.builtin.panicf([2 x i64] %1026, [2 x i64] %1027, [2 x i64] %1028, i32 174, [2 x i64] %1030), !dbg !2959
  unreachable, !dbg !2959

panic1086:                                        ; preds = %checkok1084
  store i64 128, ptr %taddr1087, align 8
  %1031 = insertvalue %any undef, ptr %taddr1087, 0
  %1032 = insertvalue %any %1031, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1074, ptr %taddr1088, align 8
  %1033 = insertvalue %any undef, ptr %taddr1088, 0
  %1034 = insertvalue %any %1033, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1089, align 8
  %1035 = load [2 x i64], ptr %taddr1089, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1090, align 8
  %1036 = load [2 x i64], ptr %taddr1090, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1091, align 8
  %1037 = load [2 x i64], ptr %taddr1091, align 8
  store %any %1032, ptr %varargslots1092, align 8
  %ptradd1093 = getelementptr inbounds i8, ptr %varargslots1092, i64 16
  store %any %1034, ptr %ptradd1093, align 8
  %1038 = insertvalue %"any[]" undef, ptr %varargslots1092, 0
  %"$$temp1094" = insertvalue %"any[]" %1038, i64 2, 1
  store %"any[]" %"$$temp1094", ptr %taddr1095, align 8
  %1039 = load [2 x i64], ptr %taddr1095, align 8
  call void @std.core.builtin.panicf([2 x i64] %1035, [2 x i64] %1036, [2 x i64] %1037, i32 174, [2 x i64] %1039), !dbg !2959
  unreachable, !dbg !2959

panic1109:                                        ; preds = %and.rhs1106
  store i64 %sext1107, ptr %taddr1110, align 8
  %1040 = insertvalue %any undef, ptr %taddr1110, 0
  %1041 = insertvalue %any %1040, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1111, align 8
  %1042 = load [2 x i64], ptr %taddr1111, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1112, align 8
  %1043 = load [2 x i64], ptr %taddr1112, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1113, align 8
  %1044 = load [2 x i64], ptr %taddr1113, align 8
  store %any %1041, ptr %varargslots1114, align 8
  %1045 = insertvalue %"any[]" undef, ptr %varargslots1114, 0
  %"$$temp1115" = insertvalue %"any[]" %1045, i64 1, 1
  store %"any[]" %"$$temp1115", ptr %taddr1116, align 8
  %1046 = load [2 x i64], ptr %taddr1116, align 8
  call void @std.core.builtin.panicf([2 x i64] %1042, [2 x i64] %1043, [2 x i64] %1044, i32 179, [2 x i64] %1046), !dbg !2968
  unreachable, !dbg !2968

panic1119:                                        ; preds = %checkok1117
  store i64 128, ptr %taddr1120, align 8
  %1047 = insertvalue %any undef, ptr %taddr1120, 0
  %1048 = insertvalue %any %1047, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1107, ptr %taddr1121, align 8
  %1049 = insertvalue %any undef, ptr %taddr1121, 0
  %1050 = insertvalue %any %1049, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1122, align 8
  %1051 = load [2 x i64], ptr %taddr1122, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1123, align 8
  %1052 = load [2 x i64], ptr %taddr1123, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1124, align 8
  %1053 = load [2 x i64], ptr %taddr1124, align 8
  store %any %1048, ptr %varargslots1125, align 8
  %ptradd1126 = getelementptr inbounds i8, ptr %varargslots1125, i64 16
  store %any %1050, ptr %ptradd1126, align 8
  %1054 = insertvalue %"any[]" undef, ptr %varargslots1125, 0
  %"$$temp1127" = insertvalue %"any[]" %1054, i64 2, 1
  store %"any[]" %"$$temp1127", ptr %taddr1128, align 8
  %1055 = load [2 x i64], ptr %taddr1128, align 8
  call void @std.core.builtin.panicf([2 x i64] %1051, [2 x i64] %1052, [2 x i64] %1053, i32 179, [2 x i64] %1055), !dbg !2968
  unreachable, !dbg !2968

panic1145:                                        ; preds = %loop.body1141
  store i64 %sext1143, ptr %taddr1146, align 8
  %1056 = insertvalue %any undef, ptr %taddr1146, 0
  %1057 = insertvalue %any %1056, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1147, align 8
  %1058 = load [2 x i64], ptr %taddr1147, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1148, align 8
  %1059 = load [2 x i64], ptr %taddr1148, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1149, align 8
  %1060 = load [2 x i64], ptr %taddr1149, align 8
  store %any %1057, ptr %varargslots1150, align 8
  %1061 = insertvalue %"any[]" undef, ptr %varargslots1150, 0
  %"$$temp1151" = insertvalue %"any[]" %1061, i64 1, 1
  store %"any[]" %"$$temp1151", ptr %taddr1152, align 8
  %1062 = load [2 x i64], ptr %taddr1152, align 8
  call void @std.core.builtin.panicf([2 x i64] %1058, [2 x i64] %1059, [2 x i64] %1060, i32 185, [2 x i64] %1062), !dbg !2980
  unreachable, !dbg !2980

panic1155:                                        ; preds = %checkok1153
  store i64 128, ptr %taddr1156, align 8
  %1063 = insertvalue %any undef, ptr %taddr1156, 0
  %1064 = insertvalue %any %1063, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1143, ptr %taddr1157, align 8
  %1065 = insertvalue %any undef, ptr %taddr1157, 0
  %1066 = insertvalue %any %1065, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1158, align 8
  %1067 = load [2 x i64], ptr %taddr1158, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1159, align 8
  %1068 = load [2 x i64], ptr %taddr1159, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1160, align 8
  %1069 = load [2 x i64], ptr %taddr1160, align 8
  store %any %1064, ptr %varargslots1161, align 8
  %ptradd1162 = getelementptr inbounds i8, ptr %varargslots1161, i64 16
  store %any %1066, ptr %ptradd1162, align 8
  %1070 = insertvalue %"any[]" undef, ptr %varargslots1161, 0
  %"$$temp1163" = insertvalue %"any[]" %1070, i64 2, 1
  store %"any[]" %"$$temp1163", ptr %taddr1164, align 8
  %1071 = load [2 x i64], ptr %taddr1164, align 8
  call void @std.core.builtin.panicf([2 x i64] %1067, [2 x i64] %1068, [2 x i64] %1069, i32 185, [2 x i64] %1071), !dbg !2980
  unreachable, !dbg !2980

panic1176:                                        ; preds = %if.then1171
  store i64 %sext1174, ptr %taddr1177, align 8
  %1072 = insertvalue %any undef, ptr %taddr1177, 0
  %1073 = insertvalue %any %1072, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1178, align 8
  %1074 = load [2 x i64], ptr %taddr1178, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1179, align 8
  %1075 = load [2 x i64], ptr %taddr1179, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1180, align 8
  %1076 = load [2 x i64], ptr %taddr1180, align 8
  store %any %1073, ptr %varargslots1181, align 8
  %1077 = insertvalue %"any[]" undef, ptr %varargslots1181, 0
  %"$$temp1182" = insertvalue %"any[]" %1077, i64 1, 1
  store %"any[]" %"$$temp1182", ptr %taddr1183, align 8
  %1078 = load [2 x i64], ptr %taddr1183, align 8
  call void @std.core.builtin.panicf([2 x i64] %1074, [2 x i64] %1075, [2 x i64] %1076, i32 189, [2 x i64] %1078), !dbg !2987
  unreachable, !dbg !2987

panic1186:                                        ; preds = %checkok1184
  store i64 128, ptr %taddr1187, align 8
  %1079 = insertvalue %any undef, ptr %taddr1187, 0
  %1080 = insertvalue %any %1079, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1174, ptr %taddr1188, align 8
  %1081 = insertvalue %any undef, ptr %taddr1188, 0
  %1082 = insertvalue %any %1081, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1189, align 8
  %1083 = load [2 x i64], ptr %taddr1189, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1190, align 8
  %1084 = load [2 x i64], ptr %taddr1190, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1191, align 8
  %1085 = load [2 x i64], ptr %taddr1191, align 8
  store %any %1080, ptr %varargslots1192, align 8
  %ptradd1193 = getelementptr inbounds i8, ptr %varargslots1192, i64 16
  store %any %1082, ptr %ptradd1193, align 8
  %1086 = insertvalue %"any[]" undef, ptr %varargslots1192, 0
  %"$$temp1194" = insertvalue %"any[]" %1086, i64 2, 1
  store %"any[]" %"$$temp1194", ptr %taddr1195, align 8
  %1087 = load [2 x i64], ptr %taddr1195, align 8
  call void @std.core.builtin.panicf([2 x i64] %1083, [2 x i64] %1084, [2 x i64] %1085, i32 189, [2 x i64] %1087), !dbg !2987
  unreachable, !dbg !2987

panic1203:                                        ; preds = %if.else1200
  store i64 %sext1201, ptr %taddr1204, align 8
  %1088 = insertvalue %any undef, ptr %taddr1204, 0
  %1089 = insertvalue %any %1088, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1205, align 8
  %1090 = load [2 x i64], ptr %taddr1205, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1206, align 8
  %1091 = load [2 x i64], ptr %taddr1206, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1207, align 8
  %1092 = load [2 x i64], ptr %taddr1207, align 8
  store %any %1089, ptr %varargslots1208, align 8
  %1093 = insertvalue %"any[]" undef, ptr %varargslots1208, 0
  %"$$temp1209" = insertvalue %"any[]" %1093, i64 1, 1
  store %"any[]" %"$$temp1209", ptr %taddr1210, align 8
  %1094 = load [2 x i64], ptr %taddr1210, align 8
  call void @std.core.builtin.panicf([2 x i64] %1090, [2 x i64] %1091, [2 x i64] %1092, i32 194, [2 x i64] %1094), !dbg !2992
  unreachable, !dbg !2992

panic1213:                                        ; preds = %checkok1211
  store i64 128, ptr %taddr1214, align 8
  %1095 = insertvalue %any undef, ptr %taddr1214, 0
  %1096 = insertvalue %any %1095, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1201, ptr %taddr1215, align 8
  %1097 = insertvalue %any undef, ptr %taddr1215, 0
  %1098 = insertvalue %any %1097, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1216, align 8
  %1099 = load [2 x i64], ptr %taddr1216, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1217, align 8
  %1100 = load [2 x i64], ptr %taddr1217, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1218, align 8
  %1101 = load [2 x i64], ptr %taddr1218, align 8
  store %any %1096, ptr %varargslots1219, align 8
  %ptradd1220 = getelementptr inbounds i8, ptr %varargslots1219, i64 16
  store %any %1098, ptr %ptradd1220, align 8
  %1102 = insertvalue %"any[]" undef, ptr %varargslots1219, 0
  %"$$temp1221" = insertvalue %"any[]" %1102, i64 2, 1
  store %"any[]" %"$$temp1221", ptr %taddr1222, align 8
  %1103 = load [2 x i64], ptr %taddr1222, align 8
  call void @std.core.builtin.panicf([2 x i64] %1099, [2 x i64] %1100, [2 x i64] %1101, i32 194, [2 x i64] %1103), !dbg !2992
  unreachable, !dbg !2992

panic1237:                                        ; preds = %and.rhs1234
  store i64 %sext1235, ptr %taddr1238, align 8
  %1104 = insertvalue %any undef, ptr %taddr1238, 0
  %1105 = insertvalue %any %1104, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1239, align 8
  %1106 = load [2 x i64], ptr %taddr1239, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1240, align 8
  %1107 = load [2 x i64], ptr %taddr1240, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1241, align 8
  %1108 = load [2 x i64], ptr %taddr1241, align 8
  store %any %1105, ptr %varargslots1242, align 8
  %1109 = insertvalue %"any[]" undef, ptr %varargslots1242, 0
  %"$$temp1243" = insertvalue %"any[]" %1109, i64 1, 1
  store %"any[]" %"$$temp1243", ptr %taddr1244, align 8
  %1110 = load [2 x i64], ptr %taddr1244, align 8
  call void @std.core.builtin.panicf([2 x i64] %1106, [2 x i64] %1107, [2 x i64] %1108, i32 196, [2 x i64] %1110), !dbg !2998
  unreachable, !dbg !2998

panic1247:                                        ; preds = %checkok1245
  store i64 128, ptr %taddr1248, align 8
  %1111 = insertvalue %any undef, ptr %taddr1248, 0
  %1112 = insertvalue %any %1111, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1235, ptr %taddr1249, align 8
  %1113 = insertvalue %any undef, ptr %taddr1249, 0
  %1114 = insertvalue %any %1113, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1250, align 8
  %1115 = load [2 x i64], ptr %taddr1250, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1251, align 8
  %1116 = load [2 x i64], ptr %taddr1251, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1252, align 8
  %1117 = load [2 x i64], ptr %taddr1252, align 8
  store %any %1112, ptr %varargslots1253, align 8
  %ptradd1254 = getelementptr inbounds i8, ptr %varargslots1253, i64 16
  store %any %1114, ptr %ptradd1254, align 8
  %1118 = insertvalue %"any[]" undef, ptr %varargslots1253, 0
  %"$$temp1255" = insertvalue %"any[]" %1118, i64 2, 1
  store %"any[]" %"$$temp1255", ptr %taddr1256, align 8
  %1119 = load [2 x i64], ptr %taddr1256, align 8
  call void @std.core.builtin.panicf([2 x i64] %1115, [2 x i64] %1116, [2 x i64] %1117, i32 196, [2 x i64] %1119), !dbg !2998
  unreachable, !dbg !2998

panic1283:                                        ; preds = %if.then1276
  store i64 %sext1281, ptr %taddr1284, align 8
  %1120 = insertvalue %any undef, ptr %taddr1284, 0
  %1121 = insertvalue %any %1120, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1285, align 8
  %1122 = load [2 x i64], ptr %taddr1285, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1286, align 8
  %1123 = load [2 x i64], ptr %taddr1286, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1287, align 8
  %1124 = load [2 x i64], ptr %taddr1287, align 8
  store %any %1121, ptr %varargslots1288, align 8
  %1125 = insertvalue %"any[]" undef, ptr %varargslots1288, 0
  %"$$temp1289" = insertvalue %"any[]" %1125, i64 1, 1
  store %"any[]" %"$$temp1289", ptr %taddr1290, align 8
  %1126 = load [2 x i64], ptr %taddr1290, align 8
  call void @std.core.builtin.panicf([2 x i64] %1122, [2 x i64] %1123, [2 x i64] %1124, i32 206, [2 x i64] %1126), !dbg !3012
  unreachable, !dbg !3012

panic1293:                                        ; preds = %checkok1291
  store i64 128, ptr %taddr1294, align 8
  %1127 = insertvalue %any undef, ptr %taddr1294, 0
  %1128 = insertvalue %any %1127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1281, ptr %taddr1295, align 8
  %1129 = insertvalue %any undef, ptr %taddr1295, 0
  %1130 = insertvalue %any %1129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1296, align 8
  %1131 = load [2 x i64], ptr %taddr1296, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1297, align 8
  %1132 = load [2 x i64], ptr %taddr1297, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1298, align 8
  %1133 = load [2 x i64], ptr %taddr1298, align 8
  store %any %1128, ptr %varargslots1299, align 8
  %ptradd1300 = getelementptr inbounds i8, ptr %varargslots1299, i64 16
  store %any %1130, ptr %ptradd1300, align 8
  %1134 = insertvalue %"any[]" undef, ptr %varargslots1299, 0
  %"$$temp1301" = insertvalue %"any[]" %1134, i64 2, 1
  store %"any[]" %"$$temp1301", ptr %taddr1302, align 8
  %1135 = load [2 x i64], ptr %taddr1302, align 8
  call void @std.core.builtin.panicf([2 x i64] %1131, [2 x i64] %1132, [2 x i64] %1133, i32 206, [2 x i64] %1135), !dbg !3012
  unreachable, !dbg !3012

panic1307:                                        ; preds = %checkok1303
  store i64 %sext1305, ptr %taddr1308, align 8
  %1136 = insertvalue %any undef, ptr %taddr1308, 0
  %1137 = insertvalue %any %1136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1309, align 8
  %1138 = load [2 x i64], ptr %taddr1309, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1310, align 8
  %1139 = load [2 x i64], ptr %taddr1310, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1311, align 8
  %1140 = load [2 x i64], ptr %taddr1311, align 8
  store %any %1137, ptr %varargslots1312, align 8
  %1141 = insertvalue %"any[]" undef, ptr %varargslots1312, 0
  %"$$temp1313" = insertvalue %"any[]" %1141, i64 1, 1
  store %"any[]" %"$$temp1313", ptr %taddr1314, align 8
  %1142 = load [2 x i64], ptr %taddr1314, align 8
  call void @std.core.builtin.panicf([2 x i64] %1138, [2 x i64] %1139, [2 x i64] %1140, i32 206, [2 x i64] %1142), !dbg !3013
  unreachable, !dbg !3013

panic1317:                                        ; preds = %checkok1315
  store i64 128, ptr %taddr1318, align 8
  %1143 = insertvalue %any undef, ptr %taddr1318, 0
  %1144 = insertvalue %any %1143, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1305, ptr %taddr1319, align 8
  %1145 = insertvalue %any undef, ptr %taddr1319, 0
  %1146 = insertvalue %any %1145, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1320, align 8
  %1147 = load [2 x i64], ptr %taddr1320, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1321, align 8
  %1148 = load [2 x i64], ptr %taddr1321, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1322, align 8
  %1149 = load [2 x i64], ptr %taddr1322, align 8
  store %any %1144, ptr %varargslots1323, align 8
  %ptradd1324 = getelementptr inbounds i8, ptr %varargslots1323, i64 16
  store %any %1146, ptr %ptradd1324, align 8
  %1150 = insertvalue %"any[]" undef, ptr %varargslots1323, 0
  %"$$temp1325" = insertvalue %"any[]" %1150, i64 2, 1
  store %"any[]" %"$$temp1325", ptr %taddr1326, align 8
  %1151 = load [2 x i64], ptr %taddr1326, align 8
  call void @std.core.builtin.panicf([2 x i64] %1147, [2 x i64] %1148, [2 x i64] %1149, i32 206, [2 x i64] %1151), !dbg !3013
  unreachable, !dbg !3013

panic1333:                                        ; preds = %if.exit1330
  store i64 %sext1331, ptr %taddr1334, align 8
  %1152 = insertvalue %any undef, ptr %taddr1334, 0
  %1153 = insertvalue %any %1152, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1335, align 8
  %1154 = load [2 x i64], ptr %taddr1335, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1336, align 8
  %1155 = load [2 x i64], ptr %taddr1336, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1337, align 8
  %1156 = load [2 x i64], ptr %taddr1337, align 8
  store %any %1153, ptr %varargslots1338, align 8
  %1157 = insertvalue %"any[]" undef, ptr %varargslots1338, 0
  %"$$temp1339" = insertvalue %"any[]" %1157, i64 1, 1
  store %"any[]" %"$$temp1339", ptr %taddr1340, align 8
  %1158 = load [2 x i64], ptr %taddr1340, align 8
  call void @std.core.builtin.panicf([2 x i64] %1154, [2 x i64] %1155, [2 x i64] %1156, i32 208, [2 x i64] %1158), !dbg !3015
  unreachable, !dbg !3015

panic1343:                                        ; preds = %checkok1341
  store i64 128, ptr %taddr1344, align 8
  %1159 = insertvalue %any undef, ptr %taddr1344, 0
  %1160 = insertvalue %any %1159, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1331, ptr %taddr1345, align 8
  %1161 = insertvalue %any undef, ptr %taddr1345, 0
  %1162 = insertvalue %any %1161, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1346, align 8
  %1163 = load [2 x i64], ptr %taddr1346, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1347, align 8
  %1164 = load [2 x i64], ptr %taddr1347, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1348, align 8
  %1165 = load [2 x i64], ptr %taddr1348, align 8
  store %any %1160, ptr %varargslots1349, align 8
  %ptradd1350 = getelementptr inbounds i8, ptr %varargslots1349, i64 16
  store %any %1162, ptr %ptradd1350, align 8
  %1166 = insertvalue %"any[]" undef, ptr %varargslots1349, 0
  %"$$temp1351" = insertvalue %"any[]" %1166, i64 2, 1
  store %"any[]" %"$$temp1351", ptr %taddr1352, align 8
  %1167 = load [2 x i64], ptr %taddr1352, align 8
  call void @std.core.builtin.panicf([2 x i64] %1163, [2 x i64] %1164, [2 x i64] %1165, i32 208, [2 x i64] %1167), !dbg !3015
  unreachable, !dbg !3015

panic1368:                                        ; preds = %or.rhs1365
  store i64 %sext1366, ptr %taddr1369, align 8
  %1168 = insertvalue %any undef, ptr %taddr1369, 0
  %1169 = insertvalue %any %1168, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1370, align 8
  %1170 = load [2 x i64], ptr %taddr1370, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1371, align 8
  %1171 = load [2 x i64], ptr %taddr1371, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1372, align 8
  %1172 = load [2 x i64], ptr %taddr1372, align 8
  store %any %1169, ptr %varargslots1373, align 8
  %1173 = insertvalue %"any[]" undef, ptr %varargslots1373, 0
  %"$$temp1374" = insertvalue %"any[]" %1173, i64 1, 1
  store %"any[]" %"$$temp1374", ptr %taddr1375, align 8
  %1174 = load [2 x i64], ptr %taddr1375, align 8
  call void @std.core.builtin.panicf([2 x i64] %1170, [2 x i64] %1171, [2 x i64] %1172, i32 221, [2 x i64] %1174), !dbg !3036
  unreachable, !dbg !3036

panic1378:                                        ; preds = %checkok1376
  store i64 128, ptr %taddr1379, align 8
  %1175 = insertvalue %any undef, ptr %taddr1379, 0
  %1176 = insertvalue %any %1175, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1366, ptr %taddr1380, align 8
  %1177 = insertvalue %any undef, ptr %taddr1380, 0
  %1178 = insertvalue %any %1177, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1381, align 8
  %1179 = load [2 x i64], ptr %taddr1381, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1382, align 8
  %1180 = load [2 x i64], ptr %taddr1382, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1383, align 8
  %1181 = load [2 x i64], ptr %taddr1383, align 8
  store %any %1176, ptr %varargslots1384, align 8
  %ptradd1385 = getelementptr inbounds i8, ptr %varargslots1384, i64 16
  store %any %1178, ptr %ptradd1385, align 8
  %1182 = insertvalue %"any[]" undef, ptr %varargslots1384, 0
  %"$$temp1386" = insertvalue %"any[]" %1182, i64 2, 1
  store %"any[]" %"$$temp1386", ptr %taddr1387, align 8
  %1183 = load [2 x i64], ptr %taddr1387, align 8
  call void @std.core.builtin.panicf([2 x i64] %1179, [2 x i64] %1180, [2 x i64] %1181, i32 221, [2 x i64] %1183), !dbg !3036
  unreachable, !dbg !3036

panic1392:                                        ; preds = %checkok1388
  store i64 %sext1390, ptr %taddr1393, align 8
  %1184 = insertvalue %any undef, ptr %taddr1393, 0
  %1185 = insertvalue %any %1184, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1394, align 8
  %1186 = load [2 x i64], ptr %taddr1394, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1395, align 8
  %1187 = load [2 x i64], ptr %taddr1395, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1396, align 8
  %1188 = load [2 x i64], ptr %taddr1396, align 8
  store %any %1185, ptr %varargslots1397, align 8
  %1189 = insertvalue %"any[]" undef, ptr %varargslots1397, 0
  %"$$temp1398" = insertvalue %"any[]" %1189, i64 1, 1
  store %"any[]" %"$$temp1398", ptr %taddr1399, align 8
  %1190 = load [2 x i64], ptr %taddr1399, align 8
  call void @std.core.builtin.panicf([2 x i64] %1186, [2 x i64] %1187, [2 x i64] %1188, i32 221, [2 x i64] %1190), !dbg !3037
  unreachable, !dbg !3037

panic1402:                                        ; preds = %checkok1400
  store i64 2, ptr %taddr1403, align 8
  %1191 = insertvalue %any undef, ptr %taddr1403, 0
  %1192 = insertvalue %any %1191, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1404, align 8
  %1193 = insertvalue %any undef, ptr %taddr1404, 0
  %1194 = insertvalue %any %1193, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1405, align 8
  %1195 = load [2 x i64], ptr %taddr1405, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1406, align 8
  %1196 = load [2 x i64], ptr %taddr1406, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1407, align 8
  %1197 = load [2 x i64], ptr %taddr1407, align 8
  store %any %1192, ptr %varargslots1408, align 8
  %ptradd1409 = getelementptr inbounds i8, ptr %varargslots1408, i64 16
  store %any %1194, ptr %ptradd1409, align 8
  %1198 = insertvalue %"any[]" undef, ptr %varargslots1408, 0
  %"$$temp1410" = insertvalue %"any[]" %1198, i64 2, 1
  store %"any[]" %"$$temp1410", ptr %taddr1411, align 8
  %1199 = load [2 x i64], ptr %taddr1411, align 8
  call void @std.core.builtin.panicf([2 x i64] %1195, [2 x i64] %1196, [2 x i64] %1197, i32 221, [2 x i64] %1199), !dbg !3037
  unreachable, !dbg !3037

panic1423:                                        ; preds = %if.exit1418
  store i64 %sext1421, ptr %taddr1424, align 8
  %1200 = insertvalue %any undef, ptr %taddr1424, 0
  %1201 = insertvalue %any %1200, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1425, align 8
  %1202 = load [2 x i64], ptr %taddr1425, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1426, align 8
  %1203 = load [2 x i64], ptr %taddr1426, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1427, align 8
  %1204 = load [2 x i64], ptr %taddr1427, align 8
  store %any %1201, ptr %varargslots1428, align 8
  %1205 = insertvalue %"any[]" undef, ptr %varargslots1428, 0
  %"$$temp1429" = insertvalue %"any[]" %1205, i64 1, 1
  store %"any[]" %"$$temp1429", ptr %taddr1430, align 8
  %1206 = load [2 x i64], ptr %taddr1430, align 8
  call void @std.core.builtin.panicf([2 x i64] %1202, [2 x i64] %1203, [2 x i64] %1204, i32 226, [2 x i64] %1206), !dbg !3042
  unreachable, !dbg !3042

panic1433:                                        ; preds = %checkok1431
  store i64 128, ptr %taddr1434, align 8
  %1207 = insertvalue %any undef, ptr %taddr1434, 0
  %1208 = insertvalue %any %1207, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1421, ptr %taddr1435, align 8
  %1209 = insertvalue %any undef, ptr %taddr1435, 0
  %1210 = insertvalue %any %1209, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1436, align 8
  %1211 = load [2 x i64], ptr %taddr1436, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1437, align 8
  %1212 = load [2 x i64], ptr %taddr1437, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1438, align 8
  %1213 = load [2 x i64], ptr %taddr1438, align 8
  store %any %1208, ptr %varargslots1439, align 8
  %ptradd1440 = getelementptr inbounds i8, ptr %varargslots1439, i64 16
  store %any %1210, ptr %ptradd1440, align 8
  %1214 = insertvalue %"any[]" undef, ptr %varargslots1439, 0
  %"$$temp1441" = insertvalue %"any[]" %1214, i64 2, 1
  store %"any[]" %"$$temp1441", ptr %taddr1442, align 8
  %1215 = load [2 x i64], ptr %taddr1442, align 8
  call void @std.core.builtin.panicf([2 x i64] %1211, [2 x i64] %1212, [2 x i64] %1213, i32 226, [2 x i64] %1215), !dbg !3042
  unreachable, !dbg !3042

panic1447:                                        ; preds = %checkok1443
  store i64 %sext1445, ptr %taddr1448, align 8
  %1216 = insertvalue %any undef, ptr %taddr1448, 0
  %1217 = insertvalue %any %1216, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1449, align 8
  %1218 = load [2 x i64], ptr %taddr1449, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1450, align 8
  %1219 = load [2 x i64], ptr %taddr1450, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1451, align 8
  %1220 = load [2 x i64], ptr %taddr1451, align 8
  store %any %1217, ptr %varargslots1452, align 8
  %1221 = insertvalue %"any[]" undef, ptr %varargslots1452, 0
  %"$$temp1453" = insertvalue %"any[]" %1221, i64 1, 1
  store %"any[]" %"$$temp1453", ptr %taddr1454, align 8
  %1222 = load [2 x i64], ptr %taddr1454, align 8
  call void @std.core.builtin.panicf([2 x i64] %1218, [2 x i64] %1219, [2 x i64] %1220, i32 226, [2 x i64] %1222), !dbg !3044
  unreachable, !dbg !3044

panic1457:                                        ; preds = %checkok1455
  store i64 2, ptr %taddr1458, align 8
  %1223 = insertvalue %any undef, ptr %taddr1458, 0
  %1224 = insertvalue %any %1223, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1445, ptr %taddr1459, align 8
  %1225 = insertvalue %any undef, ptr %taddr1459, 0
  %1226 = insertvalue %any %1225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1460, align 8
  %1227 = load [2 x i64], ptr %taddr1460, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1461, align 8
  %1228 = load [2 x i64], ptr %taddr1461, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1462, align 8
  %1229 = load [2 x i64], ptr %taddr1462, align 8
  store %any %1224, ptr %varargslots1463, align 8
  %ptradd1464 = getelementptr inbounds i8, ptr %varargslots1463, i64 16
  store %any %1226, ptr %ptradd1464, align 8
  %1230 = insertvalue %"any[]" undef, ptr %varargslots1463, 0
  %"$$temp1465" = insertvalue %"any[]" %1230, i64 2, 1
  store %"any[]" %"$$temp1465", ptr %taddr1466, align 8
  %1231 = load [2 x i64], ptr %taddr1466, align 8
  call void @std.core.builtin.panicf([2 x i64] %1227, [2 x i64] %1228, [2 x i64] %1229, i32 226, [2 x i64] %1231), !dbg !3044
  unreachable, !dbg !3044

panic1491:                                        ; preds = %loop.body1487
  store i64 %sext1489, ptr %taddr1492, align 8
  %1232 = insertvalue %any undef, ptr %taddr1492, 0
  %1233 = insertvalue %any %1232, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1493, align 8
  %1234 = load [2 x i64], ptr %taddr1493, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1494, align 8
  %1235 = load [2 x i64], ptr %taddr1494, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1495, align 8
  %1236 = load [2 x i64], ptr %taddr1495, align 8
  store %any %1233, ptr %varargslots1496, align 8
  %1237 = insertvalue %"any[]" undef, ptr %varargslots1496, 0
  %"$$temp1497" = insertvalue %"any[]" %1237, i64 1, 1
  store %"any[]" %"$$temp1497", ptr %taddr1498, align 8
  %1238 = load [2 x i64], ptr %taddr1498, align 8
  call void @std.core.builtin.panicf([2 x i64] %1234, [2 x i64] %1235, [2 x i64] %1236, i32 233, [2 x i64] %1238), !dbg !3062
  unreachable, !dbg !3062

panic1501:                                        ; preds = %checkok1499
  store i64 128, ptr %taddr1502, align 8
  %1239 = insertvalue %any undef, ptr %taddr1502, 0
  %1240 = insertvalue %any %1239, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1489, ptr %taddr1503, align 8
  %1241 = insertvalue %any undef, ptr %taddr1503, 0
  %1242 = insertvalue %any %1241, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1504, align 8
  %1243 = load [2 x i64], ptr %taddr1504, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1505, align 8
  %1244 = load [2 x i64], ptr %taddr1505, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1506, align 8
  %1245 = load [2 x i64], ptr %taddr1506, align 8
  store %any %1240, ptr %varargslots1507, align 8
  %ptradd1508 = getelementptr inbounds i8, ptr %varargslots1507, i64 16
  store %any %1242, ptr %ptradd1508, align 8
  %1246 = insertvalue %"any[]" undef, ptr %varargslots1507, 0
  %"$$temp1509" = insertvalue %"any[]" %1246, i64 2, 1
  store %"any[]" %"$$temp1509", ptr %taddr1510, align 8
  %1247 = load [2 x i64], ptr %taddr1510, align 8
  call void @std.core.builtin.panicf([2 x i64] %1243, [2 x i64] %1244, [2 x i64] %1245, i32 233, [2 x i64] %1247), !dbg !3062
  unreachable, !dbg !3062

panic1513:                                        ; preds = %checkok1511
  store i32 %507, ptr %taddr1514, align 4
  %1248 = insertvalue %any undef, ptr %taddr1514, 0
  %1249 = insertvalue %any %1248, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1515, align 8
  %1250 = load [2 x i64], ptr %taddr1515, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1516, align 8
  %1251 = load [2 x i64], ptr %taddr1516, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1517, align 8
  %1252 = load [2 x i64], ptr %taddr1517, align 8
  store %any %1249, ptr %varargslots1518, align 8
  %1253 = insertvalue %"any[]" undef, ptr %varargslots1518, 0
  %"$$temp1519" = insertvalue %"any[]" %1253, i64 1, 1
  store %"any[]" %"$$temp1519", ptr %taddr1520, align 8
  %1254 = load [2 x i64], ptr %taddr1520, align 8
  call void @std.core.builtin.panicf([2 x i64] %1250, [2 x i64] %1251, [2 x i64] %1252, i32 233, [2 x i64] %1254), !dbg !3064
  unreachable, !dbg !3064

panic1523:                                        ; preds = %checkok1521
  store i32 %507, ptr %taddr1524, align 4
  %1255 = insertvalue %any undef, ptr %taddr1524, 0
  %1256 = insertvalue %any %1255, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1525, align 8
  %1257 = load [2 x i64], ptr %taddr1525, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1526, align 8
  %1258 = load [2 x i64], ptr %taddr1526, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1527, align 8
  %1259 = load [2 x i64], ptr %taddr1527, align 8
  store %any %1256, ptr %varargslots1528, align 8
  %1260 = insertvalue %"any[]" undef, ptr %varargslots1528, 0
  %"$$temp1529" = insertvalue %"any[]" %1260, i64 1, 1
  store %"any[]" %"$$temp1529", ptr %taddr1530, align 8
  %1261 = load [2 x i64], ptr %taddr1530, align 8
  call void @std.core.builtin.panicf([2 x i64] %1257, [2 x i64] %1258, [2 x i64] %1259, i32 233, [2 x i64] %1261), !dbg !3064
  unreachable, !dbg !3064

panic1537:                                        ; preds = %checkok1531
  store i64 %sext1535, ptr %taddr1538, align 8
  %1262 = insertvalue %any undef, ptr %taddr1538, 0
  %1263 = insertvalue %any %1262, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1539, align 8
  %1264 = load [2 x i64], ptr %taddr1539, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1540, align 8
  %1265 = load [2 x i64], ptr %taddr1540, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1541, align 8
  %1266 = load [2 x i64], ptr %taddr1541, align 8
  store %any %1263, ptr %varargslots1542, align 8
  %1267 = insertvalue %"any[]" undef, ptr %varargslots1542, 0
  %"$$temp1543" = insertvalue %"any[]" %1267, i64 1, 1
  store %"any[]" %"$$temp1543", ptr %taddr1544, align 8
  %1268 = load [2 x i64], ptr %taddr1544, align 8
  call void @std.core.builtin.panicf([2 x i64] %1264, [2 x i64] %1265, [2 x i64] %1266, i32 234, [2 x i64] %1268), !dbg !3066
  unreachable, !dbg !3066

panic1547:                                        ; preds = %checkok1545
  store i64 128, ptr %taddr1548, align 8
  %1269 = insertvalue %any undef, ptr %taddr1548, 0
  %1270 = insertvalue %any %1269, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1535, ptr %taddr1549, align 8
  %1271 = insertvalue %any undef, ptr %taddr1549, 0
  %1272 = insertvalue %any %1271, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1550, align 8
  %1273 = load [2 x i64], ptr %taddr1550, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1551, align 8
  %1274 = load [2 x i64], ptr %taddr1551, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1552, align 8
  %1275 = load [2 x i64], ptr %taddr1552, align 8
  store %any %1270, ptr %varargslots1553, align 8
  %ptradd1554 = getelementptr inbounds i8, ptr %varargslots1553, i64 16
  store %any %1272, ptr %ptradd1554, align 8
  %1276 = insertvalue %"any[]" undef, ptr %varargslots1553, 0
  %"$$temp1555" = insertvalue %"any[]" %1276, i64 2, 1
  store %"any[]" %"$$temp1555", ptr %taddr1556, align 8
  %1277 = load [2 x i64], ptr %taddr1556, align 8
  call void @std.core.builtin.panicf([2 x i64] %1273, [2 x i64] %1274, [2 x i64] %1275, i32 234, [2 x i64] %1277), !dbg !3066
  unreachable, !dbg !3066

panic1561:                                        ; preds = %checkok1557
  store i64 %sext1559, ptr %taddr1562, align 8
  %1278 = insertvalue %any undef, ptr %taddr1562, 0
  %1279 = insertvalue %any %1278, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1563, align 8
  %1280 = load [2 x i64], ptr %taddr1563, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1564, align 8
  %1281 = load [2 x i64], ptr %taddr1564, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1565, align 8
  %1282 = load [2 x i64], ptr %taddr1565, align 8
  store %any %1279, ptr %varargslots1566, align 8
  %1283 = insertvalue %"any[]" undef, ptr %varargslots1566, 0
  %"$$temp1567" = insertvalue %"any[]" %1283, i64 1, 1
  store %"any[]" %"$$temp1567", ptr %taddr1568, align 8
  %1284 = load [2 x i64], ptr %taddr1568, align 8
  call void @std.core.builtin.panicf([2 x i64] %1280, [2 x i64] %1281, [2 x i64] %1282, i32 234, [2 x i64] %1284), !dbg !3067
  unreachable, !dbg !3067

panic1571:                                        ; preds = %checkok1569
  store i64 128, ptr %taddr1572, align 8
  %1285 = insertvalue %any undef, ptr %taddr1572, 0
  %1286 = insertvalue %any %1285, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1559, ptr %taddr1573, align 8
  %1287 = insertvalue %any undef, ptr %taddr1573, 0
  %1288 = insertvalue %any %1287, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1574, align 8
  %1289 = load [2 x i64], ptr %taddr1574, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1575, align 8
  %1290 = load [2 x i64], ptr %taddr1575, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1576, align 8
  %1291 = load [2 x i64], ptr %taddr1576, align 8
  store %any %1286, ptr %varargslots1577, align 8
  %ptradd1578 = getelementptr inbounds i8, ptr %varargslots1577, i64 16
  store %any %1288, ptr %ptradd1578, align 8
  %1292 = insertvalue %"any[]" undef, ptr %varargslots1577, 0
  %"$$temp1579" = insertvalue %"any[]" %1292, i64 2, 1
  store %"any[]" %"$$temp1579", ptr %taddr1580, align 8
  %1293 = load [2 x i64], ptr %taddr1580, align 8
  call void @std.core.builtin.panicf([2 x i64] %1289, [2 x i64] %1290, [2 x i64] %1291, i32 234, [2 x i64] %1293), !dbg !3067
  unreachable, !dbg !3067

panic1584:                                        ; preds = %checkok1581
  store i32 %518, ptr %taddr1585, align 4
  %1294 = insertvalue %any undef, ptr %taddr1585, 0
  %1295 = insertvalue %any %1294, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1586, align 8
  %1296 = load [2 x i64], ptr %taddr1586, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1587, align 8
  %1297 = load [2 x i64], ptr %taddr1587, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1588, align 8
  %1298 = load [2 x i64], ptr %taddr1588, align 8
  store %any %1295, ptr %varargslots1589, align 8
  %1299 = insertvalue %"any[]" undef, ptr %varargslots1589, 0
  %"$$temp1590" = insertvalue %"any[]" %1299, i64 1, 1
  store %"any[]" %"$$temp1590", ptr %taddr1591, align 8
  %1300 = load [2 x i64], ptr %taddr1591, align 8
  call void @std.core.builtin.panicf([2 x i64] %1296, [2 x i64] %1297, [2 x i64] %1298, i32 234, [2 x i64] %1300), !dbg !3069
  unreachable, !dbg !3069

panic1596:                                        ; preds = %checkok1592
  store i32 %522, ptr %taddr1597, align 4
  %1301 = insertvalue %any undef, ptr %taddr1597, 0
  %1302 = insertvalue %any %1301, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1598, align 8
  %1303 = load [2 x i64], ptr %taddr1598, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1599, align 8
  %1304 = load [2 x i64], ptr %taddr1599, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1600, align 8
  %1305 = load [2 x i64], ptr %taddr1600, align 8
  store %any %1302, ptr %varargslots1601, align 8
  %1306 = insertvalue %"any[]" undef, ptr %varargslots1601, 0
  %"$$temp1602" = insertvalue %"any[]" %1306, i64 1, 1
  store %"any[]" %"$$temp1602", ptr %taddr1603, align 8
  %1307 = load [2 x i64], ptr %taddr1603, align 8
  call void @std.core.builtin.panicf([2 x i64] %1303, [2 x i64] %1304, [2 x i64] %1305, i32 235, [2 x i64] %1307), !dbg !3072
  unreachable, !dbg !3072

panic1606:                                        ; preds = %checkok1604
  store i32 %522, ptr %taddr1607, align 4
  %1308 = insertvalue %any undef, ptr %taddr1607, 0
  %1309 = insertvalue %any %1308, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1608, align 8
  %1310 = load [2 x i64], ptr %taddr1608, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1609, align 8
  %1311 = load [2 x i64], ptr %taddr1609, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1610, align 8
  %1312 = load [2 x i64], ptr %taddr1610, align 8
  store %any %1309, ptr %varargslots1611, align 8
  %1313 = insertvalue %"any[]" undef, ptr %varargslots1611, 0
  %"$$temp1612" = insertvalue %"any[]" %1313, i64 1, 1
  store %"any[]" %"$$temp1612", ptr %taddr1613, align 8
  %1314 = load [2 x i64], ptr %taddr1613, align 8
  call void @std.core.builtin.panicf([2 x i64] %1310, [2 x i64] %1311, [2 x i64] %1312, i32 235, [2 x i64] %1314), !dbg !3072
  unreachable, !dbg !3072

panic1620:                                        ; preds = %and.rhs1617
  store i64 %sext1618, ptr %taddr1621, align 8
  %1315 = insertvalue %any undef, ptr %taddr1621, 0
  %1316 = insertvalue %any %1315, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1622, align 8
  %1317 = load [2 x i64], ptr %taddr1622, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1623, align 8
  %1318 = load [2 x i64], ptr %taddr1623, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1624, align 8
  %1319 = load [2 x i64], ptr %taddr1624, align 8
  store %any %1316, ptr %varargslots1625, align 8
  %1320 = insertvalue %"any[]" undef, ptr %varargslots1625, 0
  %"$$temp1626" = insertvalue %"any[]" %1320, i64 1, 1
  store %"any[]" %"$$temp1626", ptr %taddr1627, align 8
  %1321 = load [2 x i64], ptr %taddr1627, align 8
  call void @std.core.builtin.panicf([2 x i64] %1317, [2 x i64] %1318, [2 x i64] %1319, i32 236, [2 x i64] %1321), !dbg !3076
  unreachable, !dbg !3076

panic1630:                                        ; preds = %checkok1628
  store i64 128, ptr %taddr1631, align 8
  %1322 = insertvalue %any undef, ptr %taddr1631, 0
  %1323 = insertvalue %any %1322, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1618, ptr %taddr1632, align 8
  %1324 = insertvalue %any undef, ptr %taddr1632, 0
  %1325 = insertvalue %any %1324, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1633, align 8
  %1326 = load [2 x i64], ptr %taddr1633, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1634, align 8
  %1327 = load [2 x i64], ptr %taddr1634, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1635, align 8
  %1328 = load [2 x i64], ptr %taddr1635, align 8
  store %any %1323, ptr %varargslots1636, align 8
  %ptradd1637 = getelementptr inbounds i8, ptr %varargslots1636, i64 16
  store %any %1325, ptr %ptradd1637, align 8
  %1329 = insertvalue %"any[]" undef, ptr %varargslots1636, 0
  %"$$temp1638" = insertvalue %"any[]" %1329, i64 2, 1
  store %"any[]" %"$$temp1638", ptr %taddr1639, align 8
  %1330 = load [2 x i64], ptr %taddr1639, align 8
  call void @std.core.builtin.panicf([2 x i64] %1326, [2 x i64] %1327, [2 x i64] %1328, i32 236, [2 x i64] %1330), !dbg !3076
  unreachable, !dbg !3076

panic1662:                                        ; preds = %if.then1659
  store i64 %sext1660, ptr %taddr1663, align 8
  %1331 = insertvalue %any undef, ptr %taddr1663, 0
  %1332 = insertvalue %any %1331, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1664, align 8
  %1333 = load [2 x i64], ptr %taddr1664, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1665, align 8
  %1334 = load [2 x i64], ptr %taddr1665, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1666, align 8
  %1335 = load [2 x i64], ptr %taddr1666, align 8
  store %any %1332, ptr %varargslots1667, align 8
  %1336 = insertvalue %"any[]" undef, ptr %varargslots1667, 0
  %"$$temp1668" = insertvalue %"any[]" %1336, i64 1, 1
  store %"any[]" %"$$temp1668", ptr %taddr1669, align 8
  %1337 = load [2 x i64], ptr %taddr1669, align 8
  call void @std.core.builtin.panicf([2 x i64] %1333, [2 x i64] %1334, [2 x i64] %1335, i32 247, [2 x i64] %1337), !dbg !3086
  unreachable, !dbg !3086

panic1672:                                        ; preds = %checkok1670
  store i64 128, ptr %taddr1673, align 8
  %1338 = insertvalue %any undef, ptr %taddr1673, 0
  %1339 = insertvalue %any %1338, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1660, ptr %taddr1674, align 8
  %1340 = insertvalue %any undef, ptr %taddr1674, 0
  %1341 = insertvalue %any %1340, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1675, align 8
  %1342 = load [2 x i64], ptr %taddr1675, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1676, align 8
  %1343 = load [2 x i64], ptr %taddr1676, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1677, align 8
  %1344 = load [2 x i64], ptr %taddr1677, align 8
  store %any %1339, ptr %varargslots1678, align 8
  %ptradd1679 = getelementptr inbounds i8, ptr %varargslots1678, i64 16
  store %any %1341, ptr %ptradd1679, align 8
  %1345 = insertvalue %"any[]" undef, ptr %varargslots1678, 0
  %"$$temp1680" = insertvalue %"any[]" %1345, i64 2, 1
  store %"any[]" %"$$temp1680", ptr %taddr1681, align 8
  %1346 = load [2 x i64], ptr %taddr1681, align 8
  call void @std.core.builtin.panicf([2 x i64] %1342, [2 x i64] %1343, [2 x i64] %1344, i32 247, [2 x i64] %1346), !dbg !3086
  unreachable, !dbg !3086

panic1691:                                        ; preds = %if.else1686
  store i64 %sext1689, ptr %taddr1692, align 8
  %1347 = insertvalue %any undef, ptr %taddr1692, 0
  %1348 = insertvalue %any %1347, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1693, align 8
  %1349 = load [2 x i64], ptr %taddr1693, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1694, align 8
  %1350 = load [2 x i64], ptr %taddr1694, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1695, align 8
  %1351 = load [2 x i64], ptr %taddr1695, align 8
  store %any %1348, ptr %varargslots1696, align 8
  %1352 = insertvalue %"any[]" undef, ptr %varargslots1696, 0
  %"$$temp1697" = insertvalue %"any[]" %1352, i64 1, 1
  store %"any[]" %"$$temp1697", ptr %taddr1698, align 8
  %1353 = load [2 x i64], ptr %taddr1698, align 8
  call void @std.core.builtin.panicf([2 x i64] %1349, [2 x i64] %1350, [2 x i64] %1351, i32 252, [2 x i64] %1353), !dbg !3090
  unreachable, !dbg !3090

panic1701:                                        ; preds = %checkok1699
  store i64 128, ptr %taddr1702, align 8
  %1354 = insertvalue %any undef, ptr %taddr1702, 0
  %1355 = insertvalue %any %1354, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1689, ptr %taddr1703, align 8
  %1356 = insertvalue %any undef, ptr %taddr1703, 0
  %1357 = insertvalue %any %1356, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1704, align 8
  %1358 = load [2 x i64], ptr %taddr1704, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1705, align 8
  %1359 = load [2 x i64], ptr %taddr1705, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1706, align 8
  %1360 = load [2 x i64], ptr %taddr1706, align 8
  store %any %1355, ptr %varargslots1707, align 8
  %ptradd1708 = getelementptr inbounds i8, ptr %varargslots1707, i64 16
  store %any %1357, ptr %ptradd1708, align 8
  %1361 = insertvalue %"any[]" undef, ptr %varargslots1707, 0
  %"$$temp1709" = insertvalue %"any[]" %1361, i64 2, 1
  store %"any[]" %"$$temp1709", ptr %taddr1710, align 8
  %1362 = load [2 x i64], ptr %taddr1710, align 8
  call void @std.core.builtin.panicf([2 x i64] %1358, [2 x i64] %1359, [2 x i64] %1360, i32 252, [2 x i64] %1362), !dbg !3090
  unreachable, !dbg !3090

panic1731:                                        ; preds = %if.then1725
  store i64 %sext1729, ptr %taddr1732, align 8
  %1363 = insertvalue %any undef, ptr %taddr1732, 0
  %1364 = insertvalue %any %1363, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1733, align 8
  %1365 = load [2 x i64], ptr %taddr1733, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1734, align 8
  %1366 = load [2 x i64], ptr %taddr1734, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1735, align 8
  %1367 = load [2 x i64], ptr %taddr1735, align 8
  store %any %1364, ptr %varargslots1736, align 8
  %1368 = insertvalue %"any[]" undef, ptr %varargslots1736, 0
  %"$$temp1737" = insertvalue %"any[]" %1368, i64 1, 1
  store %"any[]" %"$$temp1737", ptr %taddr1738, align 8
  %1369 = load [2 x i64], ptr %taddr1738, align 8
  call void @std.core.builtin.panicf([2 x i64] %1365, [2 x i64] %1366, [2 x i64] %1367, i32 262, [2 x i64] %1369), !dbg !3105
  unreachable, !dbg !3105

panic1741:                                        ; preds = %checkok1739
  store i64 128, ptr %taddr1742, align 8
  %1370 = insertvalue %any undef, ptr %taddr1742, 0
  %1371 = insertvalue %any %1370, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1729, ptr %taddr1743, align 8
  %1372 = insertvalue %any undef, ptr %taddr1743, 0
  %1373 = insertvalue %any %1372, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1744, align 8
  %1374 = load [2 x i64], ptr %taddr1744, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1745, align 8
  %1375 = load [2 x i64], ptr %taddr1745, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1746, align 8
  %1376 = load [2 x i64], ptr %taddr1746, align 8
  store %any %1371, ptr %varargslots1747, align 8
  %ptradd1748 = getelementptr inbounds i8, ptr %varargslots1747, i64 16
  store %any %1373, ptr %ptradd1748, align 8
  %1377 = insertvalue %"any[]" undef, ptr %varargslots1747, 0
  %"$$temp1749" = insertvalue %"any[]" %1377, i64 2, 1
  store %"any[]" %"$$temp1749", ptr %taddr1750, align 8
  %1378 = load [2 x i64], ptr %taddr1750, align 8
  call void @std.core.builtin.panicf([2 x i64] %1374, [2 x i64] %1375, [2 x i64] %1376, i32 262, [2 x i64] %1378), !dbg !3105
  unreachable, !dbg !3105

panic1759:                                        ; preds = %if.exit1753
  store i64 %sext1757, ptr %taddr1760, align 8
  %1379 = insertvalue %any undef, ptr %taddr1760, 0
  %1380 = insertvalue %any %1379, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1761, align 8
  %1381 = load [2 x i64], ptr %taddr1761, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1762, align 8
  %1382 = load [2 x i64], ptr %taddr1762, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1763, align 8
  %1383 = load [2 x i64], ptr %taddr1763, align 8
  store %any %1380, ptr %varargslots1764, align 8
  %1384 = insertvalue %"any[]" undef, ptr %varargslots1764, 0
  %"$$temp1765" = insertvalue %"any[]" %1384, i64 1, 1
  store %"any[]" %"$$temp1765", ptr %taddr1766, align 8
  %1385 = load [2 x i64], ptr %taddr1766, align 8
  call void @std.core.builtin.panicf([2 x i64] %1381, [2 x i64] %1382, [2 x i64] %1383, i32 263, [2 x i64] %1385), !dbg !3109
  unreachable, !dbg !3109

panic1769:                                        ; preds = %checkok1767
  store i64 128, ptr %taddr1770, align 8
  %1386 = insertvalue %any undef, ptr %taddr1770, 0
  %1387 = insertvalue %any %1386, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1757, ptr %taddr1771, align 8
  %1388 = insertvalue %any undef, ptr %taddr1771, 0
  %1389 = insertvalue %any %1388, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1772, align 8
  %1390 = load [2 x i64], ptr %taddr1772, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1773, align 8
  %1391 = load [2 x i64], ptr %taddr1773, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1774, align 8
  %1392 = load [2 x i64], ptr %taddr1774, align 8
  store %any %1387, ptr %varargslots1775, align 8
  %ptradd1776 = getelementptr inbounds i8, ptr %varargslots1775, i64 16
  store %any %1389, ptr %ptradd1776, align 8
  %1393 = insertvalue %"any[]" undef, ptr %varargslots1775, 0
  %"$$temp1777" = insertvalue %"any[]" %1393, i64 2, 1
  store %"any[]" %"$$temp1777", ptr %taddr1778, align 8
  %1394 = load [2 x i64], ptr %taddr1778, align 8
  call void @std.core.builtin.panicf([2 x i64] %1390, [2 x i64] %1391, [2 x i64] %1392, i32 263, [2 x i64] %1394), !dbg !3109
  unreachable, !dbg !3109

panic1815:                                        ; preds = %if.then1802
  store %"char[]" { ptr @.panic_msg.85, i64 10 }, ptr %taddr1816, align 8
  %1395 = load [2 x i64], ptr %taddr1816, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1817, align 8
  %1396 = load [2 x i64], ptr %taddr1817, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1818, align 8
  %1397 = load [2 x i64], ptr %taddr1818, align 8
  %1398 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1398([2 x i64] %1395, [2 x i64] %1396, [2 x i64] %1397, i32 284), !dbg !3146
  unreachable, !dbg !3146

panic1831:                                        ; preds = %if.then1826
  store i64 %sext1829, ptr %taddr1832, align 8
  %1399 = insertvalue %any undef, ptr %taddr1832, 0
  %1400 = insertvalue %any %1399, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1833, align 8
  %1401 = load [2 x i64], ptr %taddr1833, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1834, align 8
  %1402 = load [2 x i64], ptr %taddr1834, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1835, align 8
  %1403 = load [2 x i64], ptr %taddr1835, align 8
  store %any %1400, ptr %varargslots1836, align 8
  %1404 = insertvalue %"any[]" undef, ptr %varargslots1836, 0
  %"$$temp1837" = insertvalue %"any[]" %1404, i64 1, 1
  store %"any[]" %"$$temp1837", ptr %taddr1838, align 8
  %1405 = load [2 x i64], ptr %taddr1838, align 8
  call void @std.core.builtin.panicf([2 x i64] %1401, [2 x i64] %1402, [2 x i64] %1403, i32 292, [2 x i64] %1405), !dbg !3163
  unreachable, !dbg !3163

panic1841:                                        ; preds = %checkok1839
  store i64 128, ptr %taddr1842, align 8
  %1406 = insertvalue %any undef, ptr %taddr1842, 0
  %1407 = insertvalue %any %1406, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1829, ptr %taddr1843, align 8
  %1408 = insertvalue %any undef, ptr %taddr1843, 0
  %1409 = insertvalue %any %1408, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1844, align 8
  %1410 = load [2 x i64], ptr %taddr1844, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1845, align 8
  %1411 = load [2 x i64], ptr %taddr1845, align 8
  store %"char[]" { ptr @.func.76, i64 9 }, ptr %taddr1846, align 8
  %1412 = load [2 x i64], ptr %taddr1846, align 8
  store %any %1407, ptr %varargslots1847, align 8
  %ptradd1848 = getelementptr inbounds i8, ptr %varargslots1847, i64 16
  store %any %1409, ptr %ptradd1848, align 8
  %1413 = insertvalue %"any[]" undef, ptr %varargslots1847, 0
  %"$$temp1849" = insertvalue %"any[]" %1413, i64 2, 1
  store %"any[]" %"$$temp1849", ptr %taddr1850, align 8
  %1414 = load [2 x i64], ptr %taddr1850, align 8
  call void @std.core.builtin.panicf([2 x i64] %1410, [2 x i64] %1411, [2 x i64] %1412, i32 292, [2 x i64] %1414), !dbg !3163
  unreachable, !dbg !3163
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.String.to_float(ptr %0, [2 x i64] %1) #0 !dbg !3224 {
entry:
  %s = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  %chars = alloca %"char[]", align 8
  %blockret = alloca float, align 4
  %sign = alloca i32, align 4
  %taddr = alloca i64, align 8
  %taddr2 = alloca i64, align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %taddr5 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr7 = alloca %"any[]", align 8
  %taddr9 = alloca i64, align 8
  %taddr10 = alloca i64, align 8
  %taddr11 = alloca %"char[]", align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %varargslots14 = alloca [2 x %any], align 8
  %taddr17 = alloca %"any[]", align 8
  %taddr24 = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca %"char[]", align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %varargslots29 = alloca [2 x %any], align 8
  %taddr32 = alloca %"any[]", align 8
  %switch = alloca i8, align 1
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 8
  %taddr45 = alloca %"any[]", align 8
  %cmp.idx = alloca i64, align 8
  %cmp.idx55 = alloca i64, align 8
  %cmp.idx69 = alloca i64, align 8
  %cmp.idx81 = alloca i64, align 8
  %taddr100 = alloca i64, align 8
  %taddr101 = alloca i64, align 8
  %taddr102 = alloca %"char[]", align 8
  %taddr103 = alloca %"char[]", align 8
  %taddr104 = alloca %"char[]", align 8
  %varargslots105 = alloca [2 x %any], align 8
  %taddr108 = alloca %"any[]", align 8
  %taddr117 = alloca i64, align 8
  %taddr118 = alloca i64, align 8
  %taddr119 = alloca %"char[]", align 8
  %taddr120 = alloca %"char[]", align 8
  %taddr121 = alloca %"char[]", align 8
  %varargslots122 = alloca [2 x %any], align 8
  %taddr125 = alloca %"any[]", align 8
  %taddr134 = alloca i64, align 8
  %taddr135 = alloca i64, align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr137 = alloca %"char[]", align 8
  %taddr138 = alloca %"char[]", align 8
  %varargslots139 = alloca [2 x %any], align 8
  %taddr142 = alloca %"any[]", align 8
  %chars146 = alloca %"char[]", align 8
  %sign147 = alloca i32, align 4
  %blockret148 = alloca double, align 8
  %scale = alloca double, align 8
  %x = alloca i32, align 4
  %rp = alloca i64, align 8
  %dc = alloca i64, align 8
  %c = alloca i8, align 1
  %got_rad = alloca i8, align 1
  %got_digit = alloca i8, align 1
  %got_tail = alloca i8, align 1
  %len = alloca i64, align 8
  %last_char = alloca i64, align 8
  %index = alloca i64, align 8
  %y = alloca double, align 8
  %taddr154 = alloca i64, align 8
  %taddr155 = alloca i64, align 8
  %taddr156 = alloca %"char[]", align 8
  %taddr157 = alloca %"char[]", align 8
  %taddr158 = alloca %"char[]", align 8
  %varargslots159 = alloca [2 x %any], align 8
  %taddr162 = alloca %"any[]", align 8
  %taddr185 = alloca i64, align 8
  %taddr186 = alloca i64, align 8
  %taddr187 = alloca %"char[]", align 8
  %taddr188 = alloca %"char[]", align 8
  %taddr189 = alloca %"char[]", align 8
  %varargslots190 = alloca [2 x %any], align 8
  %taddr193 = alloca %"any[]", align 8
  %taddr208 = alloca i64, align 8
  %taddr209 = alloca i64, align 8
  %taddr210 = alloca %"char[]", align 8
  %taddr211 = alloca %"char[]", align 8
  %taddr212 = alloca %"char[]", align 8
  %varargslots213 = alloca [2 x %any], align 8
  %taddr216 = alloca %"any[]", align 8
  %d = alloca i32, align 4
  %blockret247 = alloca i32, align 4
  %switch257 = alloca i8, align 1
  %taddr289 = alloca i64, align 8
  %taddr290 = alloca i64, align 8
  %taddr291 = alloca %"char[]", align 8
  %taddr292 = alloca %"char[]", align 8
  %taddr293 = alloca %"char[]", align 8
  %varargslots294 = alloca [2 x %any], align 8
  %taddr297 = alloca %"any[]", align 8
  %e2 = alloca i64, align 8
  %e2val = alloca i64, align 8
  %taddr322 = alloca i64, align 8
  %taddr323 = alloca i64, align 8
  %taddr324 = alloca %"char[]", align 8
  %taddr325 = alloca %"char[]", align 8
  %taddr326 = alloca %"char[]", align 8
  %varargslots327 = alloca [2 x %any], align 8
  %taddr330 = alloca %"any[]", align 8
  %taddr333 = alloca i64, align 8
  %taddr334 = alloca %"char[]", align 8
  %taddr335 = alloca %"char[]", align 8
  %taddr336 = alloca %"char[]", align 8
  %varargslots337 = alloca [1 x %any], align 8
  %taddr339 = alloca %"any[]", align 8
  %retparam = alloca i64, align 8
  %taddr343 = alloca %"char[]", align 8
  %error_var = alloca i64, align 8
  %bits = alloca i32, align 4
  %bias = alloca double, align 8
  %x385 = alloca double, align 8
  %n = alloca i32, align 4
  %mag = alloca double, align 8
  %sgn = alloca double, align 8
  %x389 = alloca double, align 8
  %y390 = alloca double, align 8
  %x415 = alloca double, align 8
  %n417 = alloca i32, align 4
  %chars421 = alloca %"char[]", align 8
  %sign422 = alloca i32, align 4
  %blockret423 = alloca double, align 8
  %taddr426 = alloca %"char[]", align 8
  %taddr427 = alloca %"char[]", align 8
  %taddr428 = alloca %"char[]", align 8
  %x429 = alloca [128 x i32], align 4
  %emax = alloca i32, align 4
  %index430 = alloca i64, align 8
  %got_digit431 = alloca i8, align 1
  %taddr435 = alloca i64, align 8
  %taddr436 = alloca i64, align 8
  %taddr437 = alloca %"char[]", align 8
  %taddr438 = alloca %"char[]", align 8
  %taddr439 = alloca %"char[]", align 8
  %varargslots440 = alloca [2 x %any], align 8
  %taddr443 = alloca %"any[]", align 8
  %got_rad446 = alloca i8, align 1
  %lrp = alloca i64, align 8
  %dc447 = alloca i64, align 8
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %lnz = alloca i32, align 4
  %len448 = alloca i64, align 8
  %last_char450 = alloca i64, align 8
  %taddr454 = alloca %"char[]", align 8
  %taddr455 = alloca %"char[]", align 8
  %taddr456 = alloca %"char[]", align 8
  %c458 = alloca i8, align 1
  %taddr463 = alloca i64, align 8
  %taddr464 = alloca i64, align 8
  %taddr465 = alloca %"char[]", align 8
  %taddr466 = alloca %"char[]", align 8
  %taddr467 = alloca %"char[]", align 8
  %varargslots468 = alloca [2 x %any], align 8
  %taddr471 = alloca %"any[]", align 8
  %taddr499 = alloca i64, align 8
  %taddr500 = alloca i64, align 8
  %taddr501 = alloca %"char[]", align 8
  %taddr502 = alloca %"char[]", align 8
  %taddr503 = alloca %"char[]", align 8
  %varargslots504 = alloca [2 x %any], align 8
  %taddr507 = alloca %"any[]", align 8
  %taddr522 = alloca i64, align 8
  %taddr523 = alloca i64, align 8
  %taddr524 = alloca %"char[]", align 8
  %taddr525 = alloca %"char[]", align 8
  %taddr526 = alloca %"char[]", align 8
  %varargslots527 = alloca [2 x %any], align 8
  %taddr530 = alloca %"any[]", align 8
  %switch550 = alloca i8, align 1
  %taddr570 = alloca i64, align 8
  %taddr571 = alloca %"char[]", align 8
  %taddr572 = alloca %"char[]", align 8
  %taddr573 = alloca %"char[]", align 8
  %varargslots574 = alloca [1 x %any], align 8
  %taddr576 = alloca %"any[]", align 8
  %taddr580 = alloca i64, align 8
  %taddr581 = alloca i64, align 8
  %taddr582 = alloca %"char[]", align 8
  %taddr583 = alloca %"char[]", align 8
  %taddr584 = alloca %"char[]", align 8
  %varargslots585 = alloca [2 x %any], align 8
  %taddr588 = alloca %"any[]", align 8
  %taddr593 = alloca i64, align 8
  %taddr594 = alloca %"char[]", align 8
  %taddr595 = alloca %"char[]", align 8
  %taddr596 = alloca %"char[]", align 8
  %varargslots597 = alloca [1 x %any], align 8
  %taddr599 = alloca %"any[]", align 8
  %taddr603 = alloca i64, align 8
  %taddr604 = alloca i64, align 8
  %taddr605 = alloca %"char[]", align 8
  %taddr606 = alloca %"char[]", align 8
  %taddr607 = alloca %"char[]", align 8
  %varargslots608 = alloca [2 x %any], align 8
  %taddr611 = alloca %"any[]", align 8
  %taddr622 = alloca i64, align 8
  %taddr623 = alloca %"char[]", align 8
  %taddr624 = alloca %"char[]", align 8
  %taddr625 = alloca %"char[]", align 8
  %varargslots626 = alloca [1 x %any], align 8
  %taddr628 = alloca %"any[]", align 8
  %taddr632 = alloca i64, align 8
  %taddr633 = alloca i64, align 8
  %taddr634 = alloca %"char[]", align 8
  %taddr635 = alloca %"char[]", align 8
  %taddr636 = alloca %"char[]", align 8
  %varargslots637 = alloca [2 x %any], align 8
  %taddr640 = alloca %"any[]", align 8
  %taddr664 = alloca %"char[]", align 8
  %taddr665 = alloca %"char[]", align 8
  %taddr666 = alloca %"char[]", align 8
  %taddr672 = alloca i64, align 8
  %taddr673 = alloca i64, align 8
  %taddr674 = alloca %"char[]", align 8
  %taddr675 = alloca %"char[]", align 8
  %taddr676 = alloca %"char[]", align 8
  %varargslots677 = alloca [2 x %any], align 8
  %taddr680 = alloca %"any[]", align 8
  %e10 = alloca i64, align 8
  %taddr702 = alloca i64, align 8
  %taddr703 = alloca i64, align 8
  %taddr704 = alloca %"char[]", align 8
  %taddr705 = alloca %"char[]", align 8
  %taddr706 = alloca %"char[]", align 8
  %varargslots707 = alloca [2 x %any], align 8
  %taddr710 = alloca %"any[]", align 8
  %taddr714 = alloca i64, align 8
  %taddr715 = alloca %"char[]", align 8
  %taddr716 = alloca %"char[]", align 8
  %taddr717 = alloca %"char[]", align 8
  %varargslots718 = alloca [1 x %any], align 8
  %taddr720 = alloca %"any[]", align 8
  %retparam724 = alloca i64, align 8
  %taddr725 = alloca %"char[]", align 8
  %error_var729 = alloca i64, align 8
  %taddr775 = alloca i64, align 8
  %taddr776 = alloca %"char[]", align 8
  %taddr777 = alloca %"char[]", align 8
  %taddr778 = alloca %"char[]", align 8
  %varargslots779 = alloca [1 x %any], align 8
  %taddr781 = alloca %"any[]", align 8
  %taddr785 = alloca i64, align 8
  %taddr786 = alloca i64, align 8
  %taddr787 = alloca %"char[]", align 8
  %taddr788 = alloca %"char[]", align 8
  %taddr789 = alloca %"char[]", align 8
  %varargslots790 = alloca [2 x %any], align 8
  %taddr793 = alloca %"any[]", align 8
  %a = alloca i32, align 4
  %z = alloca i32, align 4
  %e2801 = alloca i32, align 4
  %rp802 = alloca i64, align 8
  %taddr827 = alloca i64, align 8
  %taddr828 = alloca %"char[]", align 8
  %taddr829 = alloca %"char[]", align 8
  %taddr830 = alloca %"char[]", align 8
  %varargslots831 = alloca [1 x %any], align 8
  %taddr833 = alloca %"any[]", align 8
  %taddr837 = alloca i64, align 8
  %taddr838 = alloca i64, align 8
  %taddr839 = alloca %"char[]", align 8
  %taddr840 = alloca %"char[]", align 8
  %taddr841 = alloca %"char[]", align 8
  %varargslots842 = alloca [2 x %any], align 8
  %taddr845 = alloca %"any[]", align 8
  %taddr850 = alloca %"char[]", align 8
  %taddr851 = alloca %"char[]", align 8
  %taddr852 = alloca %"char[]", align 8
  %bitlim = alloca i32, align 4
  %taddr863 = alloca i32, align 4
  %taddr864 = alloca %"char[]", align 8
  %taddr865 = alloca %"char[]", align 8
  %taddr866 = alloca %"char[]", align 8
  %varargslots867 = alloca [1 x %any], align 8
  %taddr869 = alloca %"any[]", align 8
  %taddr882 = alloca i64, align 8
  %taddr883 = alloca %"char[]", align 8
  %taddr884 = alloca %"char[]", align 8
  %taddr885 = alloca %"char[]", align 8
  %varargslots886 = alloca [1 x %any], align 8
  %taddr888 = alloca %"any[]", align 8
  %taddr892 = alloca i64, align 8
  %taddr893 = alloca i64, align 8
  %taddr894 = alloca %"char[]", align 8
  %taddr895 = alloca %"char[]", align 8
  %taddr896 = alloca %"char[]", align 8
  %varargslots897 = alloca [2 x %any], align 8
  %taddr900 = alloca %"any[]", align 8
  %rpm9 = alloca i64, align 8
  %p10 = alloca i32, align 4
  %taddr917 = alloca i64, align 8
  %taddr918 = alloca %"char[]", align 8
  %taddr919 = alloca %"char[]", align 8
  %taddr920 = alloca %"char[]", align 8
  %varargslots921 = alloca [1 x %any], align 8
  %taddr923 = alloca %"any[]", align 8
  %taddr927 = alloca i64, align 8
  %taddr928 = alloca i64, align 8
  %taddr929 = alloca %"char[]", align 8
  %taddr930 = alloca %"char[]", align 8
  %taddr931 = alloca %"char[]", align 8
  %varargslots932 = alloca [2 x %any], align 8
  %taddr935 = alloca %"any[]", align 8
  %carry = alloca i32, align 4
  %tmp = alloca i32, align 4
  %taddr944 = alloca i64, align 8
  %taddr945 = alloca %"char[]", align 8
  %taddr946 = alloca %"char[]", align 8
  %taddr947 = alloca %"char[]", align 8
  %varargslots948 = alloca [1 x %any], align 8
  %taddr950 = alloca %"any[]", align 8
  %taddr954 = alloca i64, align 8
  %taddr955 = alloca i64, align 8
  %taddr956 = alloca %"char[]", align 8
  %taddr957 = alloca %"char[]", align 8
  %taddr958 = alloca %"char[]", align 8
  %varargslots959 = alloca [2 x %any], align 8
  %taddr962 = alloca %"any[]", align 8
  %taddr967 = alloca %"char[]", align 8
  %taddr968 = alloca %"char[]", align 8
  %taddr969 = alloca %"char[]", align 8
  %taddr975 = alloca i64, align 8
  %taddr976 = alloca %"char[]", align 8
  %taddr977 = alloca %"char[]", align 8
  %taddr978 = alloca %"char[]", align 8
  %varargslots979 = alloca [1 x %any], align 8
  %taddr981 = alloca %"any[]", align 8
  %taddr985 = alloca i64, align 8
  %taddr986 = alloca i64, align 8
  %taddr987 = alloca %"char[]", align 8
  %taddr988 = alloca %"char[]", align 8
  %taddr989 = alloca %"char[]", align 8
  %varargslots990 = alloca [2 x %any], align 8
  %taddr993 = alloca %"any[]", align 8
  %taddr999 = alloca i64, align 8
  %taddr1000 = alloca %"char[]", align 8
  %taddr1001 = alloca %"char[]", align 8
  %taddr1002 = alloca %"char[]", align 8
  %varargslots1003 = alloca [1 x %any], align 8
  %taddr1005 = alloca %"any[]", align 8
  %taddr1009 = alloca i64, align 8
  %taddr1010 = alloca i64, align 8
  %taddr1011 = alloca %"char[]", align 8
  %taddr1012 = alloca %"char[]", align 8
  %taddr1013 = alloca %"char[]", align 8
  %varargslots1014 = alloca [2 x %any], align 8
  %taddr1017 = alloca %"any[]", align 8
  %taddr1022 = alloca %"char[]", align 8
  %taddr1023 = alloca %"char[]", align 8
  %taddr1024 = alloca %"char[]", align 8
  %taddr1029 = alloca %"char[]", align 8
  %taddr1030 = alloca %"char[]", align 8
  %taddr1031 = alloca %"char[]", align 8
  %taddr1040 = alloca i64, align 8
  %taddr1041 = alloca %"char[]", align 8
  %taddr1042 = alloca %"char[]", align 8
  %taddr1043 = alloca %"char[]", align 8
  %varargslots1044 = alloca [1 x %any], align 8
  %taddr1046 = alloca %"any[]", align 8
  %taddr1050 = alloca i64, align 8
  %taddr1051 = alloca i64, align 8
  %taddr1052 = alloca %"char[]", align 8
  %taddr1053 = alloca %"char[]", align 8
  %taddr1054 = alloca %"char[]", align 8
  %varargslots1055 = alloca [2 x %any], align 8
  %taddr1058 = alloca %"any[]", align 8
  %taddr1077 = alloca i64, align 8
  %taddr1078 = alloca %"char[]", align 8
  %taddr1079 = alloca %"char[]", align 8
  %taddr1080 = alloca %"char[]", align 8
  %varargslots1081 = alloca [1 x %any], align 8
  %taddr1083 = alloca %"any[]", align 8
  %taddr1087 = alloca i64, align 8
  %taddr1088 = alloca i64, align 8
  %taddr1089 = alloca %"char[]", align 8
  %taddr1090 = alloca %"char[]", align 8
  %taddr1091 = alloca %"char[]", align 8
  %varargslots1092 = alloca [2 x %any], align 8
  %taddr1095 = alloca %"any[]", align 8
  %taddr1110 = alloca i64, align 8
  %taddr1111 = alloca %"char[]", align 8
  %taddr1112 = alloca %"char[]", align 8
  %taddr1113 = alloca %"char[]", align 8
  %varargslots1114 = alloca [1 x %any], align 8
  %taddr1116 = alloca %"any[]", align 8
  %taddr1120 = alloca i64, align 8
  %taddr1121 = alloca i64, align 8
  %taddr1122 = alloca %"char[]", align 8
  %taddr1123 = alloca %"char[]", align 8
  %taddr1124 = alloca %"char[]", align 8
  %varargslots1125 = alloca [2 x %any], align 8
  %taddr1128 = alloca %"any[]", align 8
  %carry1137 = alloca i32, align 4
  %tmp1142 = alloca i64, align 8
  %taddr1146 = alloca i64, align 8
  %taddr1147 = alloca %"char[]", align 8
  %taddr1148 = alloca %"char[]", align 8
  %taddr1149 = alloca %"char[]", align 8
  %varargslots1150 = alloca [1 x %any], align 8
  %taddr1152 = alloca %"any[]", align 8
  %taddr1156 = alloca i64, align 8
  %taddr1157 = alloca i64, align 8
  %taddr1158 = alloca %"char[]", align 8
  %taddr1159 = alloca %"char[]", align 8
  %taddr1160 = alloca %"char[]", align 8
  %varargslots1161 = alloca [2 x %any], align 8
  %taddr1164 = alloca %"any[]", align 8
  %taddr1177 = alloca i64, align 8
  %taddr1178 = alloca %"char[]", align 8
  %taddr1179 = alloca %"char[]", align 8
  %taddr1180 = alloca %"char[]", align 8
  %varargslots1181 = alloca [1 x %any], align 8
  %taddr1183 = alloca %"any[]", align 8
  %taddr1187 = alloca i64, align 8
  %taddr1188 = alloca i64, align 8
  %taddr1189 = alloca %"char[]", align 8
  %taddr1190 = alloca %"char[]", align 8
  %taddr1191 = alloca %"char[]", align 8
  %varargslots1192 = alloca [2 x %any], align 8
  %taddr1195 = alloca %"any[]", align 8
  %taddr1204 = alloca i64, align 8
  %taddr1205 = alloca %"char[]", align 8
  %taddr1206 = alloca %"char[]", align 8
  %taddr1207 = alloca %"char[]", align 8
  %varargslots1208 = alloca [1 x %any], align 8
  %taddr1210 = alloca %"any[]", align 8
  %taddr1214 = alloca i64, align 8
  %taddr1215 = alloca i64, align 8
  %taddr1216 = alloca %"char[]", align 8
  %taddr1217 = alloca %"char[]", align 8
  %taddr1218 = alloca %"char[]", align 8
  %varargslots1219 = alloca [2 x %any], align 8
  %taddr1222 = alloca %"any[]", align 8
  %taddr1238 = alloca i64, align 8
  %taddr1239 = alloca %"char[]", align 8
  %taddr1240 = alloca %"char[]", align 8
  %taddr1241 = alloca %"char[]", align 8
  %varargslots1242 = alloca [1 x %any], align 8
  %taddr1244 = alloca %"any[]", align 8
  %taddr1248 = alloca i64, align 8
  %taddr1249 = alloca i64, align 8
  %taddr1250 = alloca %"char[]", align 8
  %taddr1251 = alloca %"char[]", align 8
  %taddr1252 = alloca %"char[]", align 8
  %varargslots1253 = alloca [2 x %any], align 8
  %taddr1256 = alloca %"any[]", align 8
  %taddr1284 = alloca i64, align 8
  %taddr1285 = alloca %"char[]", align 8
  %taddr1286 = alloca %"char[]", align 8
  %taddr1287 = alloca %"char[]", align 8
  %varargslots1288 = alloca [1 x %any], align 8
  %taddr1290 = alloca %"any[]", align 8
  %taddr1294 = alloca i64, align 8
  %taddr1295 = alloca i64, align 8
  %taddr1296 = alloca %"char[]", align 8
  %taddr1297 = alloca %"char[]", align 8
  %taddr1298 = alloca %"char[]", align 8
  %varargslots1299 = alloca [2 x %any], align 8
  %taddr1302 = alloca %"any[]", align 8
  %taddr1308 = alloca i64, align 8
  %taddr1309 = alloca %"char[]", align 8
  %taddr1310 = alloca %"char[]", align 8
  %taddr1311 = alloca %"char[]", align 8
  %varargslots1312 = alloca [1 x %any], align 8
  %taddr1314 = alloca %"any[]", align 8
  %taddr1318 = alloca i64, align 8
  %taddr1319 = alloca i64, align 8
  %taddr1320 = alloca %"char[]", align 8
  %taddr1321 = alloca %"char[]", align 8
  %taddr1322 = alloca %"char[]", align 8
  %varargslots1323 = alloca [2 x %any], align 8
  %taddr1326 = alloca %"any[]", align 8
  %taddr1334 = alloca i64, align 8
  %taddr1335 = alloca %"char[]", align 8
  %taddr1336 = alloca %"char[]", align 8
  %taddr1337 = alloca %"char[]", align 8
  %varargslots1338 = alloca [1 x %any], align 8
  %taddr1340 = alloca %"any[]", align 8
  %taddr1344 = alloca i64, align 8
  %taddr1345 = alloca i64, align 8
  %taddr1346 = alloca %"char[]", align 8
  %taddr1347 = alloca %"char[]", align 8
  %taddr1348 = alloca %"char[]", align 8
  %varargslots1349 = alloca [2 x %any], align 8
  %taddr1352 = alloca %"any[]", align 8
  %carry1358 = alloca i32, align 4
  %sh = alloca i32, align 4
  %i = alloca i32, align 4
  %taddr1369 = alloca i64, align 8
  %taddr1370 = alloca %"char[]", align 8
  %taddr1371 = alloca %"char[]", align 8
  %taddr1372 = alloca %"char[]", align 8
  %varargslots1373 = alloca [1 x %any], align 8
  %taddr1375 = alloca %"any[]", align 8
  %taddr1379 = alloca i64, align 8
  %taddr1380 = alloca i64, align 8
  %taddr1381 = alloca %"char[]", align 8
  %taddr1382 = alloca %"char[]", align 8
  %taddr1383 = alloca %"char[]", align 8
  %varargslots1384 = alloca [2 x %any], align 8
  %taddr1387 = alloca %"any[]", align 8
  %taddr1393 = alloca i64, align 8
  %taddr1394 = alloca %"char[]", align 8
  %taddr1395 = alloca %"char[]", align 8
  %taddr1396 = alloca %"char[]", align 8
  %varargslots1397 = alloca [1 x %any], align 8
  %taddr1399 = alloca %"any[]", align 8
  %taddr1403 = alloca i64, align 8
  %taddr1404 = alloca i64, align 8
  %taddr1405 = alloca %"char[]", align 8
  %taddr1406 = alloca %"char[]", align 8
  %taddr1407 = alloca %"char[]", align 8
  %varargslots1408 = alloca [2 x %any], align 8
  %taddr1411 = alloca %"any[]", align 8
  %taddr1424 = alloca i64, align 8
  %taddr1425 = alloca %"char[]", align 8
  %taddr1426 = alloca %"char[]", align 8
  %taddr1427 = alloca %"char[]", align 8
  %varargslots1428 = alloca [1 x %any], align 8
  %taddr1430 = alloca %"any[]", align 8
  %taddr1434 = alloca i64, align 8
  %taddr1435 = alloca i64, align 8
  %taddr1436 = alloca %"char[]", align 8
  %taddr1437 = alloca %"char[]", align 8
  %taddr1438 = alloca %"char[]", align 8
  %varargslots1439 = alloca [2 x %any], align 8
  %taddr1442 = alloca %"any[]", align 8
  %taddr1448 = alloca i64, align 8
  %taddr1449 = alloca %"char[]", align 8
  %taddr1450 = alloca %"char[]", align 8
  %taddr1451 = alloca %"char[]", align 8
  %varargslots1452 = alloca [1 x %any], align 8
  %taddr1454 = alloca %"any[]", align 8
  %taddr1458 = alloca i64, align 8
  %taddr1459 = alloca i64, align 8
  %taddr1460 = alloca %"char[]", align 8
  %taddr1461 = alloca %"char[]", align 8
  %taddr1462 = alloca %"char[]", align 8
  %varargslots1463 = alloca [2 x %any], align 8
  %taddr1466 = alloca %"any[]", align 8
  %tmp1488 = alloca i32, align 4
  %taddr1492 = alloca i64, align 8
  %taddr1493 = alloca %"char[]", align 8
  %taddr1494 = alloca %"char[]", align 8
  %taddr1495 = alloca %"char[]", align 8
  %varargslots1496 = alloca [1 x %any], align 8
  %taddr1498 = alloca %"any[]", align 8
  %taddr1502 = alloca i64, align 8
  %taddr1503 = alloca i64, align 8
  %taddr1504 = alloca %"char[]", align 8
  %taddr1505 = alloca %"char[]", align 8
  %taddr1506 = alloca %"char[]", align 8
  %varargslots1507 = alloca [2 x %any], align 8
  %taddr1510 = alloca %"any[]", align 8
  %taddr1514 = alloca i32, align 4
  %taddr1515 = alloca %"char[]", align 8
  %taddr1516 = alloca %"char[]", align 8
  %taddr1517 = alloca %"char[]", align 8
  %varargslots1518 = alloca [1 x %any], align 8
  %taddr1520 = alloca %"any[]", align 8
  %taddr1524 = alloca i32, align 4
  %taddr1525 = alloca %"char[]", align 8
  %taddr1526 = alloca %"char[]", align 8
  %taddr1527 = alloca %"char[]", align 8
  %varargslots1528 = alloca [1 x %any], align 8
  %taddr1530 = alloca %"any[]", align 8
  %taddr1538 = alloca i64, align 8
  %taddr1539 = alloca %"char[]", align 8
  %taddr1540 = alloca %"char[]", align 8
  %taddr1541 = alloca %"char[]", align 8
  %varargslots1542 = alloca [1 x %any], align 8
  %taddr1544 = alloca %"any[]", align 8
  %taddr1548 = alloca i64, align 8
  %taddr1549 = alloca i64, align 8
  %taddr1550 = alloca %"char[]", align 8
  %taddr1551 = alloca %"char[]", align 8
  %taddr1552 = alloca %"char[]", align 8
  %varargslots1553 = alloca [2 x %any], align 8
  %taddr1556 = alloca %"any[]", align 8
  %taddr1562 = alloca i64, align 8
  %taddr1563 = alloca %"char[]", align 8
  %taddr1564 = alloca %"char[]", align 8
  %taddr1565 = alloca %"char[]", align 8
  %varargslots1566 = alloca [1 x %any], align 8
  %taddr1568 = alloca %"any[]", align 8
  %taddr1572 = alloca i64, align 8
  %taddr1573 = alloca i64, align 8
  %taddr1574 = alloca %"char[]", align 8
  %taddr1575 = alloca %"char[]", align 8
  %taddr1576 = alloca %"char[]", align 8
  %varargslots1577 = alloca [2 x %any], align 8
  %taddr1580 = alloca %"any[]", align 8
  %taddr1585 = alloca i32, align 4
  %taddr1586 = alloca %"char[]", align 8
  %taddr1587 = alloca %"char[]", align 8
  %taddr1588 = alloca %"char[]", align 8
  %varargslots1589 = alloca [1 x %any], align 8
  %taddr1591 = alloca %"any[]", align 8
  %taddr1597 = alloca i32, align 4
  %taddr1598 = alloca %"char[]", align 8
  %taddr1599 = alloca %"char[]", align 8
  %taddr1600 = alloca %"char[]", align 8
  %varargslots1601 = alloca [1 x %any], align 8
  %taddr1603 = alloca %"any[]", align 8
  %taddr1607 = alloca i32, align 4
  %taddr1608 = alloca %"char[]", align 8
  %taddr1609 = alloca %"char[]", align 8
  %taddr1610 = alloca %"char[]", align 8
  %varargslots1611 = alloca [1 x %any], align 8
  %taddr1613 = alloca %"any[]", align 8
  %taddr1621 = alloca i64, align 8
  %taddr1622 = alloca %"char[]", align 8
  %taddr1623 = alloca %"char[]", align 8
  %taddr1624 = alloca %"char[]", align 8
  %varargslots1625 = alloca [1 x %any], align 8
  %taddr1627 = alloca %"any[]", align 8
  %taddr1631 = alloca i64, align 8
  %taddr1632 = alloca i64, align 8
  %taddr1633 = alloca %"char[]", align 8
  %taddr1634 = alloca %"char[]", align 8
  %taddr1635 = alloca %"char[]", align 8
  %varargslots1636 = alloca [2 x %any], align 8
  %taddr1639 = alloca %"any[]", align 8
  %taddr1663 = alloca i64, align 8
  %taddr1664 = alloca %"char[]", align 8
  %taddr1665 = alloca %"char[]", align 8
  %taddr1666 = alloca %"char[]", align 8
  %varargslots1667 = alloca [1 x %any], align 8
  %taddr1669 = alloca %"any[]", align 8
  %taddr1673 = alloca i64, align 8
  %taddr1674 = alloca i64, align 8
  %taddr1675 = alloca %"char[]", align 8
  %taddr1676 = alloca %"char[]", align 8
  %taddr1677 = alloca %"char[]", align 8
  %varargslots1678 = alloca [2 x %any], align 8
  %taddr1681 = alloca %"any[]", align 8
  %taddr1692 = alloca i64, align 8
  %taddr1693 = alloca %"char[]", align 8
  %taddr1694 = alloca %"char[]", align 8
  %taddr1695 = alloca %"char[]", align 8
  %varargslots1696 = alloca [1 x %any], align 8
  %taddr1698 = alloca %"any[]", align 8
  %taddr1702 = alloca i64, align 8
  %taddr1703 = alloca i64, align 8
  %taddr1704 = alloca %"char[]", align 8
  %taddr1705 = alloca %"char[]", align 8
  %taddr1706 = alloca %"char[]", align 8
  %varargslots1707 = alloca [2 x %any], align 8
  %taddr1710 = alloca %"any[]", align 8
  %y1717 = alloca double, align 8
  %i1718 = alloca i32, align 4
  %taddr1732 = alloca i64, align 8
  %taddr1733 = alloca %"char[]", align 8
  %taddr1734 = alloca %"char[]", align 8
  %taddr1735 = alloca %"char[]", align 8
  %varargslots1736 = alloca [1 x %any], align 8
  %taddr1738 = alloca %"any[]", align 8
  %taddr1742 = alloca i64, align 8
  %taddr1743 = alloca i64, align 8
  %taddr1744 = alloca %"char[]", align 8
  %taddr1745 = alloca %"char[]", align 8
  %taddr1746 = alloca %"char[]", align 8
  %varargslots1747 = alloca [2 x %any], align 8
  %taddr1750 = alloca %"any[]", align 8
  %taddr1760 = alloca i64, align 8
  %taddr1761 = alloca %"char[]", align 8
  %taddr1762 = alloca %"char[]", align 8
  %taddr1763 = alloca %"char[]", align 8
  %varargslots1764 = alloca [1 x %any], align 8
  %taddr1766 = alloca %"any[]", align 8
  %taddr1770 = alloca i64, align 8
  %taddr1771 = alloca i64, align 8
  %taddr1772 = alloca %"char[]", align 8
  %taddr1773 = alloca %"char[]", align 8
  %taddr1774 = alloca %"char[]", align 8
  %varargslots1775 = alloca [2 x %any], align 8
  %taddr1778 = alloca %"any[]", align 8
  %denormal = alloca i8, align 1
  %bits1787 = alloca i32, align 4
  %bias1800 = alloca double, align 8
  %frac = alloca double, align 8
  %x1803 = alloca double, align 8
  %n1806 = alloca i32, align 4
  %mag1807 = alloca double, align 8
  %sgn1808 = alloca double, align 8
  %x1809 = alloca double, align 8
  %y1810 = alloca double, align 8
  %x1811 = alloca double, align 8
  %n1813 = alloca i32, align 4
  %taddr1816 = alloca %"char[]", align 8
  %taddr1817 = alloca %"char[]", align 8
  %taddr1818 = alloca %"char[]", align 8
  %t = alloca i32, align 4
  %taddr1832 = alloca i64, align 8
  %taddr1833 = alloca %"char[]", align 8
  %taddr1834 = alloca %"char[]", align 8
  %taddr1835 = alloca %"char[]", align 8
  %varargslots1836 = alloca [1 x %any], align 8
  %taddr1838 = alloca %"any[]", align 8
  %taddr1842 = alloca i64, align 8
  %taddr1843 = alloca i64, align 8
  %taddr1844 = alloca %"char[]", align 8
  %taddr1845 = alloca %"char[]", align 8
  %taddr1846 = alloca %"char[]", align 8
  %varargslots1847 = alloca [2 x %any], align 8
  %taddr1850 = alloca %"any[]", align 8
  %switch1853 = alloca i8, align 1
  %x1916 = alloca double, align 8
  %x1944 = alloca double, align 8
  %n1945 = alloca i32, align 4
  store [2 x i64] %1, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !3229, metadata !DIExpression()), !dbg !3230
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars, ptr align 8 %s, i32 16, i1 false)
  call void @llvm.dbg.declare(metadata ptr %sign, metadata !3231, metadata !DIExpression()), !dbg !3233
  store i32 1, ptr %sign, align 4, !dbg !3235
  br label %loop.cond, !dbg !3236

loop.cond:                                        ; preds = %checkok18, %entry
  %ptradd = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3237
  %2 = load i64, ptr %ptradd, align 8, !dbg !3237
  %i2b = icmp ne i64 %2, 0, !dbg !3237
  br i1 %i2b, label %and.rhs, label %and.phi, !dbg !3237

and.rhs:                                          ; preds = %loop.cond
  %ptradd1 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3239
  %3 = load i64, ptr %ptradd1, align 8, !dbg !3239
  %4 = load ptr, ptr %chars, align 8, !dbg !3239
  %ge = icmp sge i64 0, %3, !dbg !3240
  %5 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !3240
  br i1 %5, label %panic, label %checkok, !dbg !3240

checkok:                                          ; preds = %and.rhs
  %6 = load i8, ptr %4, align 1, !dbg !3240
  %eq = icmp eq i8 %6, 32, !dbg !3239
  br label %and.phi, !dbg !3239

and.phi:                                          ; preds = %checkok, %loop.cond
  %val = phi i1 [ false, %loop.cond ], [ %eq, %checkok ], !dbg !3239
  br i1 %val, label %loop.body, label %loop.exit, !dbg !3239

loop.body:                                        ; preds = %and.phi
  %7 = load %"char[]", ptr %chars, align 8, !dbg !3241
  %8 = extractvalue %"char[]" %7, 0, !dbg !3241
  %9 = extractvalue %"char[]" %7, 1, !dbg !3242
  %gt = icmp sgt i64 1, %9, !dbg !3242
  %10 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !3242
  br i1 %10, label %panic8, label %checkok18, !dbg !3242

checkok18:                                        ; preds = %loop.body
  %size = sub i64 %9, 1, !dbg !3241
  %ptradd19 = getelementptr inbounds i8, ptr %8, i64 1, !dbg !3241
  %11 = insertvalue %"char[]" undef, ptr %ptradd19, 0, !dbg !3241
  %12 = insertvalue %"char[]" %11, i64 %size, 1, !dbg !3241
  store %"char[]" %12, ptr %chars, align 8, !dbg !3241
  br label %loop.cond, !dbg !3241

loop.exit:                                        ; preds = %and.phi
  %ptradd20 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3243
  %13 = load i64, ptr %ptradd20, align 8, !dbg !3243
  %i2nb = icmp eq i64 %13, 0, !dbg !3243
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !3243

if.then:                                          ; preds = %loop.exit
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3244
  br label %err_retblock, !dbg !3244

if.exit:                                          ; preds = %loop.exit
  %ptradd21 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3245
  %14 = load i64, ptr %ptradd21, align 8, !dbg !3245
  %15 = load ptr, ptr %chars, align 8, !dbg !3245
  %ge22 = icmp sge i64 0, %14, !dbg !3247
  %16 = call i1 @llvm.expect.i1(i1 %ge22, i1 false), !dbg !3247
  br i1 %16, label %panic23, label %checkok33, !dbg !3247

checkok33:                                        ; preds = %if.exit
  %17 = load i8, ptr %15, align 1
  store i8 %17, ptr %switch, align 1
  br label %switch.entry

switch.entry:                                     ; preds = %checkok33
  %18 = load i8, ptr %switch, align 1
  switch i8 %18, label %switch.exit [
    i8 45, label %switch.case
    i8 43, label %switch.case34
  ]

switch.case:                                      ; preds = %switch.entry
  store i32 -1, ptr %sign, align 4, !dbg !3248
  br label %switch.case34, !dbg !3250

switch.case34:                                    ; preds = %switch.entry, %switch.case
  %19 = load %"char[]", ptr %chars, align 8, !dbg !3251
  %20 = extractvalue %"char[]" %19, 0, !dbg !3251
  %21 = extractvalue %"char[]" %19, 1, !dbg !3253
  %gt35 = icmp sgt i64 1, %21, !dbg !3253
  %22 = call i1 @llvm.expect.i1(i1 %gt35, i1 false), !dbg !3253
  br i1 %22, label %panic36, label %checkok46, !dbg !3253

checkok46:                                        ; preds = %switch.case34
  %size47 = sub i64 %21, 1, !dbg !3251
  %ptradd48 = getelementptr inbounds i8, ptr %20, i64 1, !dbg !3251
  %23 = insertvalue %"char[]" undef, ptr %ptradd48, 0, !dbg !3251
  %24 = insertvalue %"char[]" %23, i64 %size47, 1, !dbg !3251
  store %"char[]" %24, ptr %chars, align 8, !dbg !3251
  br label %switch.exit, !dbg !3251

switch.exit:                                      ; preds = %checkok46, %switch.entry
  %25 = load %"char[]", ptr %chars, align 8, !dbg !3254
  %26 = extractvalue %"char[]" %25, 1, !dbg !3254
  %27 = extractvalue %"char[]" %25, 0, !dbg !3254
  %eq49 = icmp eq i64 %26, 8, !dbg !3254
  br i1 %eq49, label %slice_cmp_values, label %slice_cmp_exit, !dbg !3254

slice_cmp_values:                                 ; preds = %switch.exit
  store i64 0, ptr %cmp.idx, align 8
  br label %slice_loop_start

slice_loop_start:                                 ; preds = %slice_loop_comparison, %slice_cmp_values
  %28 = load i64, ptr %cmp.idx, align 8
  %lt = icmp slt i64 %28, %26
  br i1 %lt, label %slice_loop_comparison, label %slice_cmp_exit

slice_loop_comparison:                            ; preds = %slice_loop_start
  %ptradd50 = getelementptr inbounds i8, ptr %27, i64 %28
  %ptradd51 = getelementptr inbounds i8, ptr @.str.87, i64 %28
  %29 = load i8, ptr %ptradd50, align 1
  %30 = load i8, ptr %ptradd51, align 1
  %eq52 = icmp eq i8 %29, %30
  %31 = add i64 %28, 1
  store i64 %31, ptr %cmp.idx, align 8
  br i1 %eq52, label %slice_loop_start, label %slice_cmp_exit

slice_cmp_exit:                                   ; preds = %slice_loop_comparison, %slice_loop_start, %switch.exit
  %slice_cmp_phi = phi i1 [ true, %slice_loop_start ], [ false, %switch.exit ], [ false, %slice_loop_comparison ]
  br i1 %slice_cmp_phi, label %or.phi, label %or.rhs

or.rhs:                                           ; preds = %slice_cmp_exit
  %32 = load %"char[]", ptr %chars, align 8, !dbg !3255
  %33 = extractvalue %"char[]" %32, 1, !dbg !3255
  %34 = extractvalue %"char[]" %32, 0, !dbg !3255
  %eq53 = icmp eq i64 %33, 8, !dbg !3255
  br i1 %eq53, label %slice_cmp_values54, label %slice_cmp_exit62, !dbg !3255

slice_cmp_values54:                               ; preds = %or.rhs
  store i64 0, ptr %cmp.idx55, align 8
  br label %slice_loop_start56

slice_loop_start56:                               ; preds = %slice_loop_comparison58, %slice_cmp_values54
  %35 = load i64, ptr %cmp.idx55, align 8
  %lt57 = icmp slt i64 %35, %33
  br i1 %lt57, label %slice_loop_comparison58, label %slice_cmp_exit62

slice_loop_comparison58:                          ; preds = %slice_loop_start56
  %ptradd59 = getelementptr inbounds i8, ptr %34, i64 %35
  %ptradd60 = getelementptr inbounds i8, ptr @.str.88, i64 %35
  %36 = load i8, ptr %ptradd59, align 1
  %37 = load i8, ptr %ptradd60, align 1
  %eq61 = icmp eq i8 %36, %37
  %38 = add i64 %35, 1
  store i64 %38, ptr %cmp.idx55, align 8
  br i1 %eq61, label %slice_loop_start56, label %slice_cmp_exit62

slice_cmp_exit62:                                 ; preds = %slice_loop_comparison58, %slice_loop_start56, %or.rhs
  %slice_cmp_phi63 = phi i1 [ true, %slice_loop_start56 ], [ false, %or.rhs ], [ false, %slice_loop_comparison58 ]
  br label %or.phi

or.phi:                                           ; preds = %slice_cmp_exit62, %slice_cmp_exit
  %val64 = phi i1 [ true, %slice_cmp_exit ], [ %slice_cmp_phi63, %slice_cmp_exit62 ]
  br i1 %val64, label %if.then65, label %if.exit66

if.then65:                                        ; preds = %or.phi
  %39 = load i32, ptr %sign, align 4, !dbg !3256
  %sifp = sitofp i32 %39 to float, !dbg !3256
  %fmul = fmul float %sifp, 0x7FF0000000000000, !dbg !3256
  store float %fmul, ptr %blockret, align 4, !dbg !3256
  br label %expr_block.exit1949, !dbg !3256

if.exit66:                                        ; preds = %or.phi
  %40 = load %"char[]", ptr %chars, align 8, !dbg !3257
  %41 = extractvalue %"char[]" %40, 1, !dbg !3257
  %42 = extractvalue %"char[]" %40, 0, !dbg !3257
  %eq67 = icmp eq i64 %41, 3, !dbg !3257
  br i1 %eq67, label %slice_cmp_values68, label %slice_cmp_exit76, !dbg !3257

slice_cmp_values68:                               ; preds = %if.exit66
  store i64 0, ptr %cmp.idx69, align 8
  br label %slice_loop_start70

slice_loop_start70:                               ; preds = %slice_loop_comparison72, %slice_cmp_values68
  %43 = load i64, ptr %cmp.idx69, align 8
  %lt71 = icmp slt i64 %43, %41
  br i1 %lt71, label %slice_loop_comparison72, label %slice_cmp_exit76

slice_loop_comparison72:                          ; preds = %slice_loop_start70
  %ptradd73 = getelementptr inbounds i8, ptr %42, i64 %43
  %ptradd74 = getelementptr inbounds i8, ptr @.str.89, i64 %43
  %44 = load i8, ptr %ptradd73, align 1
  %45 = load i8, ptr %ptradd74, align 1
  %eq75 = icmp eq i8 %44, %45
  %46 = add i64 %43, 1
  store i64 %46, ptr %cmp.idx69, align 8
  br i1 %eq75, label %slice_loop_start70, label %slice_cmp_exit76

slice_cmp_exit76:                                 ; preds = %slice_loop_comparison72, %slice_loop_start70, %if.exit66
  %slice_cmp_phi77 = phi i1 [ true, %slice_loop_start70 ], [ false, %if.exit66 ], [ false, %slice_loop_comparison72 ]
  br i1 %slice_cmp_phi77, label %or.phi90, label %or.rhs78

or.rhs78:                                         ; preds = %slice_cmp_exit76
  %47 = load %"char[]", ptr %chars, align 8, !dbg !3258
  %48 = extractvalue %"char[]" %47, 1, !dbg !3258
  %49 = extractvalue %"char[]" %47, 0, !dbg !3258
  %eq79 = icmp eq i64 %48, 3, !dbg !3258
  br i1 %eq79, label %slice_cmp_values80, label %slice_cmp_exit88, !dbg !3258

slice_cmp_values80:                               ; preds = %or.rhs78
  store i64 0, ptr %cmp.idx81, align 8
  br label %slice_loop_start82

slice_loop_start82:                               ; preds = %slice_loop_comparison84, %slice_cmp_values80
  %50 = load i64, ptr %cmp.idx81, align 8
  %lt83 = icmp slt i64 %50, %48
  br i1 %lt83, label %slice_loop_comparison84, label %slice_cmp_exit88

slice_loop_comparison84:                          ; preds = %slice_loop_start82
  %ptradd85 = getelementptr inbounds i8, ptr %49, i64 %50
  %ptradd86 = getelementptr inbounds i8, ptr @.str.90, i64 %50
  %51 = load i8, ptr %ptradd85, align 1
  %52 = load i8, ptr %ptradd86, align 1
  %eq87 = icmp eq i8 %51, %52
  %53 = add i64 %50, 1
  store i64 %53, ptr %cmp.idx81, align 8
  br i1 %eq87, label %slice_loop_start82, label %slice_cmp_exit88

slice_cmp_exit88:                                 ; preds = %slice_loop_comparison84, %slice_loop_start82, %or.rhs78
  %slice_cmp_phi89 = phi i1 [ true, %slice_loop_start82 ], [ false, %or.rhs78 ], [ false, %slice_loop_comparison84 ]
  br label %or.phi90

or.phi90:                                         ; preds = %slice_cmp_exit88, %slice_cmp_exit76
  %val91 = phi i1 [ true, %slice_cmp_exit76 ], [ %slice_cmp_phi89, %slice_cmp_exit88 ]
  br i1 %val91, label %if.then92, label %if.exit93

if.then92:                                        ; preds = %or.phi90
  store float 0x7FF8000000000000, ptr %blockret, align 4, !dbg !3259
  br label %expr_block.exit1949, !dbg !3259

if.exit93:                                        ; preds = %or.phi90
  %ptradd94 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3260
  %54 = load i64, ptr %ptradd94, align 8, !dbg !3260
  %lt95 = icmp ult i64 2, %54, !dbg !3260
  br i1 %lt95, label %and.rhs96, label %and.phi111, !dbg !3260

and.rhs96:                                        ; preds = %if.exit93
  %ptradd97 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3261
  %55 = load i64, ptr %ptradd97, align 8, !dbg !3261
  %56 = load ptr, ptr %chars, align 8, !dbg !3261
  %ge98 = icmp sge i64 0, %55, !dbg !3262
  %57 = call i1 @llvm.expect.i1(i1 %ge98, i1 false), !dbg !3262
  br i1 %57, label %panic99, label %checkok109, !dbg !3262

checkok109:                                       ; preds = %and.rhs96
  %58 = load i8, ptr %56, align 1, !dbg !3262
  %eq110 = icmp eq i8 %58, 48, !dbg !3261
  br label %and.phi111, !dbg !3261

and.phi111:                                       ; preds = %checkok109, %if.exit93
  %val112 = phi i1 [ false, %if.exit93 ], [ %eq110, %checkok109 ], !dbg !3261
  br i1 %val112, label %and.rhs113, label %and.phi129, !dbg !3261

and.rhs113:                                       ; preds = %and.phi111
  %ptradd114 = getelementptr inbounds i8, ptr %chars, i64 8, !dbg !3263
  %59 = load i64, ptr %ptradd114, align 8, !dbg !3263
  %60 = load ptr, ptr %chars, align 8, !dbg !3263
  %ge115 = icmp sge i64 1, %59, !dbg !3264
  %61 = call i1 @llvm.expect.i1(i1 %ge115, i1 false), !dbg !3264
  br i1 %61, label %panic116, label %checkok126, !dbg !3264

checkok126:                                       ; preds = %and.rhs113
  %ptradd127 = getelementptr inbounds i8, ptr %60, i64 1, !dbg !3264
  %62 = load i8, ptr %ptradd127, align 1, !dbg !3264
  %zext = zext i8 %62 to i32, !dbg !3264
  %or = or i32 %zext, 32, !dbg !3263
  %eq128 = icmp eq i32 %or, 120, !dbg !3263
  %check = icmp sge i32 %or, 0, !dbg !3263
  %siui-eq = and i1 %check, %eq128, !dbg !3263
  br label %and.phi129, !dbg !3263

and.phi129:                                       ; preds = %checkok126, %and.phi111
  %val130 = phi i1 [ false, %and.phi111 ], [ %siui-eq, %checkok126 ], !dbg !3263
  br i1 %val130, label %if.then131, label %if.exit420, !dbg !3263

if.then131:                                       ; preds = %and.phi129
  %63 = load %"char[]", ptr %chars, align 8, !dbg !3265
  %64 = extractvalue %"char[]" %63, 0, !dbg !3265
  %65 = extractvalue %"char[]" %63, 1, !dbg !3267
  %gt132 = icmp sgt i64 2, %65, !dbg !3267
  %66 = call i1 @llvm.expect.i1(i1 %gt132, i1 false), !dbg !3267
  br i1 %66, label %panic133, label %checkok143, !dbg !3267

checkok143:                                       ; preds = %if.then131
  %size144 = sub i64 %65, 2, !dbg !3268
  %ptradd145 = getelementptr inbounds i8, ptr %64, i64 2, !dbg !3268
  %67 = insertvalue %"char[]" undef, ptr %ptradd145, 0, !dbg !3268
  %68 = insertvalue %"char[]" %67, i64 %size144, 1, !dbg !3268
  store %"char[]" %68, ptr %chars146, align 8
  %69 = load i32, ptr %sign, align 4
  store i32 %69, ptr %sign147, align 4
  call void @llvm.dbg.declare(metadata ptr %scale, metadata !3269, metadata !DIExpression()), !dbg !3271
  store double 1.000000e+00, ptr %scale, align 8, !dbg !3273
  call void @llvm.dbg.declare(metadata ptr %x, metadata !3274, metadata !DIExpression()), !dbg !3275
  store i32 0, ptr %x, align 4, !dbg !3275
  call void @llvm.dbg.declare(metadata ptr %rp, metadata !3276, metadata !DIExpression()), !dbg !3277
  store i64 0, ptr %rp, align 8, !dbg !3277
  call void @llvm.dbg.declare(metadata ptr %dc, metadata !3278, metadata !DIExpression()), !dbg !3279
  store i64 0, ptr %dc, align 8, !dbg !3279
  call void @llvm.dbg.declare(metadata ptr %c, metadata !3280, metadata !DIExpression()), !dbg !3281
  call void @llvm.dbg.declare(metadata ptr %got_rad, metadata !3282, metadata !DIExpression()), !dbg !3283
  store i8 0, ptr %got_rad, align 1, !dbg !3283
  call void @llvm.dbg.declare(metadata ptr %got_digit, metadata !3284, metadata !DIExpression()), !dbg !3285
  store i8 0, ptr %got_digit, align 1, !dbg !3285
  call void @llvm.dbg.declare(metadata ptr %got_tail, metadata !3286, metadata !DIExpression()), !dbg !3287
  store i8 0, ptr %got_tail, align 1, !dbg !3287
  call void @llvm.dbg.declare(metadata ptr %len, metadata !3288, metadata !DIExpression()), !dbg !3289
  %ptradd149 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !3290
  %70 = load i64, ptr %ptradd149, align 8, !dbg !3290
  store i64 %70, ptr %len, align 8, !dbg !3290
  call void @llvm.dbg.declare(metadata ptr %last_char, metadata !3291, metadata !DIExpression()), !dbg !3292
  %71 = load i64, ptr %len, align 8, !dbg !3293
  %sub = sub i64 %71, 1, !dbg !3293
  store i64 %sub, ptr %last_char, align 8, !dbg !3293
  call void @llvm.dbg.declare(metadata ptr %index, metadata !3294, metadata !DIExpression()), !dbg !3295
  store i64 0, ptr %index, align 8, !dbg !3295
  call void @llvm.dbg.declare(metadata ptr %y, metadata !3296, metadata !DIExpression()), !dbg !3297
  store double 0.000000e+00, ptr %y, align 8, !dbg !3297
  br label %loop.cond150, !dbg !3298

loop.cond150:                                     ; preds = %if.exit169, %checkok143
  %ptradd151 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !3299
  %72 = load i64, ptr %ptradd151, align 8, !dbg !3299
  %73 = load ptr, ptr %chars146, align 8, !dbg !3299
  %74 = load i64, ptr %index, align 8, !dbg !3301
  %ge152 = icmp uge i64 %74, %72, !dbg !3301
  %75 = call i1 @llvm.expect.i1(i1 %ge152, i1 false), !dbg !3301
  br i1 %75, label %panic153, label %checkok163, !dbg !3301

checkok163:                                       ; preds = %loop.cond150
  %ptradd164 = getelementptr inbounds i8, ptr %73, i64 %74, !dbg !3301
  %76 = load i8, ptr %ptradd164, align 1, !dbg !3301
  store i8 %76, ptr %c, align 1, !dbg !3301
  %eq165 = icmp eq i8 %76, 48, !dbg !3302
  br i1 %eq165, label %loop.body166, label %loop.exit170, !dbg !3302

loop.body166:                                     ; preds = %checkok163
  %77 = load i64, ptr %index, align 8, !dbg !3303
  %78 = load i64, ptr %last_char, align 8, !dbg !3305
  %eq167 = icmp eq i64 %77, %78, !dbg !3303
  br i1 %eq167, label %if.then168, label %if.exit169, !dbg !3303

if.then168:                                       ; preds = %loop.body166
  store double 0.000000e+00, ptr %blockret148, align 8, !dbg !3306
  br label %expr_block.exit419, !dbg !3306

if.exit169:                                       ; preds = %loop.body166
  %79 = load i64, ptr %index, align 8, !dbg !3307
  %add = add i64 %79, 1, !dbg !3307
  store i64 %add, ptr %index, align 8, !dbg !3307
  br label %loop.cond150, !dbg !3307

loop.exit170:                                     ; preds = %checkok163
  %80 = load i8, ptr %c, align 1, !dbg !3308
  %eq171 = icmp eq i8 %80, 46, !dbg !3308
  br i1 %eq171, label %if.then172, label %if.exit226, !dbg !3308

if.then172:                                       ; preds = %loop.exit170
  store i8 1, ptr %got_rad, align 1, !dbg !3309
  %81 = load i64, ptr %index, align 8, !dbg !3311
  %82 = load i64, ptr %last_char, align 8, !dbg !3312
  %eq173 = icmp eq i64 %81, %82, !dbg !3311
  br i1 %eq173, label %if.then174, label %if.exit179, !dbg !3311

if.then174:                                       ; preds = %if.then172
  %83 = load i8, ptr %got_digit, align 1, !dbg !3313
  %84 = trunc i8 %83 to i1, !dbg !3313
  %not = xor i1 %84, true, !dbg !3313
  br i1 %not, label %if.then175, label %if.exit176, !dbg !3313

if.then175:                                       ; preds = %if.then174
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3315
  br label %err_retblock, !dbg !3315

if.exit176:                                       ; preds = %if.then174
  %85 = load i32, ptr %sign147, align 4, !dbg !3316
  %sifp177 = sitofp i32 %85 to double, !dbg !3316
  %fmul178 = fmul double %sifp177, 0.000000e+00, !dbg !3316
  store double %fmul178, ptr %blockret148, align 8, !dbg !3316
  br label %expr_block.exit419, !dbg !3316

if.exit179:                                       ; preds = %if.then172
  %86 = load i64, ptr %index, align 8, !dbg !3317
  %87 = load i64, ptr %last_char, align 8, !dbg !3318
  %neq = icmp ne i64 %86, %87, !dbg !3317
  br i1 %neq, label %and.rhs180, label %and.phi197, !dbg !3317

and.rhs180:                                       ; preds = %if.exit179
  %ptradd181 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !3319
  %88 = load i64, ptr %ptradd181, align 8, !dbg !3319
  %89 = load ptr, ptr %chars146, align 8, !dbg !3319
  %90 = load i64, ptr %index, align 8, !dbg !3320
  %add182 = add i64 %90, 1, !dbg !3320
  store i64 %add182, ptr %index, align 8, !dbg !3320
  %ge183 = icmp uge i64 %add182, %88, !dbg !3320
  %91 = call i1 @llvm.expect.i1(i1 %ge183, i1 false), !dbg !3320
  br i1 %91, label %panic184, label %checkok194, !dbg !3320

checkok194:                                       ; preds = %and.rhs180
  %ptradd195 = getelementptr inbounds i8, ptr %89, i64 %add182, !dbg !3321
  %92 = load i8, ptr %ptradd195, align 1, !dbg !3321
  store i8 %92, ptr %c, align 1, !dbg !3321
  %eq196 = icmp eq i8 %92, 48, !dbg !3322
  br label %and.phi197, !dbg !3322

and.phi197:                                       ; preds = %checkok194, %if.exit179
  %val198 = phi i1 [ false, %if.exit179 ], [ %eq196, %checkok194 ], !dbg !3322
  br i1 %val198, label %if.then199, label %if.exit225, !dbg !3322

if.then199:                                       ; preds = %and.phi197
  %93 = load i64, ptr %rp, align 8, !dbg !3323
  %sub200 = sub i64 %93, 1, !dbg !3323
  store i64 %sub200, ptr %rp, align 8, !dbg !3323
  store i8 1, ptr %got_digit, align 1, !dbg !3325
  br label %loop.cond201, !dbg !3326

loop.cond201:                                     ; preds = %loop.body222, %if.then199
  %94 = load i64, ptr %last_char, align 8, !dbg !3327
  %95 = load i64, ptr %index, align 8, !dbg !3329
  %neq202 = icmp ne i64 %94, %95, !dbg !3327
  br i1 %neq202, label %and.rhs203, label %and.phi220, !dbg !3327

and.rhs203:                                       ; preds = %loop.cond201
  %ptradd204 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !3330
  %96 = load i64, ptr %ptradd204, align 8, !dbg !3330
  %97 = load ptr, ptr %chars146, align 8, !dbg !3330
  %98 = load i64, ptr %index, align 8, !dbg !3331
  %add205 = add i64 %98, 1, !dbg !3331
  store i64 %add205, ptr %index, align 8, !dbg !3331
  %ge206 = icmp uge i64 %add205, %96, !dbg !3331
  %99 = call i1 @llvm.expect.i1(i1 %ge206, i1 false), !dbg !3331
  br i1 %99, label %panic207, label %checkok217, !dbg !3331

checkok217:                                       ; preds = %and.rhs203
  %ptradd218 = getelementptr inbounds i8, ptr %97, i64 %add205, !dbg !3332
  %100 = load i8, ptr %ptradd218, align 1, !dbg !3332
  store i8 %100, ptr %c, align 1, !dbg !3332
  %eq219 = icmp eq i8 %100, 48, !dbg !3333
  br label %and.phi220, !dbg !3333

and.phi220:                                       ; preds = %checkok217, %loop.cond201
  %val221 = phi i1 [ false, %loop.cond201 ], [ %eq219, %checkok217 ], !dbg !3333
  br i1 %val221, label %loop.body222, label %loop.exit224, !dbg !3333

loop.body222:                                     ; preds = %and.phi220
  %101 = load i64, ptr %rp, align 8, !dbg !3334
  %sub223 = sub i64 %101, 1, !dbg !3334
  store i64 %sub223, ptr %rp, align 8, !dbg !3334
  br label %loop.cond201, !dbg !3334

loop.exit224:                                     ; preds = %and.phi220
  br label %if.exit225, !dbg !3334

if.exit225:                                       ; preds = %loop.exit224, %and.phi197
  br label %if.exit226, !dbg !3334

if.exit226:                                       ; preds = %if.exit225, %loop.exit170
  br label %loop.cond227, !dbg !3336

loop.cond227:                                     ; preds = %checkok298, %if.exit226
  %102 = load i8, ptr %c, align 1, !dbg !3337
  %zext228 = zext i8 %102 to i32, !dbg !3337
  %sub229 = sub i32 %zext228, 48, !dbg !3337
  %lt230 = icmp ult i32 %sub229, 10, !dbg !3337
  br i1 %lt230, label %or.phi236, label %or.rhs231, !dbg !3337

or.rhs231:                                        ; preds = %loop.cond227
  %103 = load i8, ptr %c, align 1, !dbg !3339
  %zext232 = zext i8 %103 to i32, !dbg !3339
  %or233 = or i32 %zext232, 32, !dbg !3339
  %sub234 = sub i32 %or233, 97, !dbg !3339
  %lt235 = icmp slt i32 %sub234, 6, !dbg !3339
  %siui-lt = or i1 false, %lt235, !dbg !3339
  br label %or.phi236, !dbg !3339

or.phi236:                                        ; preds = %or.rhs231, %loop.cond227
  %val237 = phi i1 [ true, %loop.cond227 ], [ %siui-lt, %or.rhs231 ], !dbg !3339
  br i1 %val237, label %or.phi240, label %or.rhs238, !dbg !3339

or.rhs238:                                        ; preds = %or.phi236
  %104 = load i8, ptr %c, align 1, !dbg !3340
  %eq239 = icmp eq i8 %104, 46, !dbg !3340
  br label %or.phi240, !dbg !3340

or.phi240:                                        ; preds = %or.rhs238, %or.phi236
  %val241 = phi i1 [ true, %or.phi236 ], [ %eq239, %or.rhs238 ], !dbg !3340
  br i1 %val241, label %loop.body242, label %loop.exit300, !dbg !3340

loop.body242:                                     ; preds = %or.phi240
  %105 = load i8, ptr %c, align 1, !dbg !3341
  %eq243 = icmp eq i8 %105, 46, !dbg !3341
  br i1 %eq243, label %if.then244, label %if.else, !dbg !3341

if.then244:                                       ; preds = %loop.body242
  %106 = load i8, ptr %got_rad, align 1, !dbg !3343
  %107 = trunc i8 %106 to i1, !dbg !3343
  br i1 %107, label %if.then245, label %if.exit246, !dbg !3343

if.then245:                                       ; preds = %if.then244
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3345
  br label %err_retblock, !dbg !3345

if.exit246:                                       ; preds = %if.then244
  store i8 1, ptr %got_rad, align 1, !dbg !3346
  %108 = load i64, ptr %dc, align 8, !dbg !3347
  store i64 %108, ptr %rp, align 8, !dbg !3347
  br label %if.exit281, !dbg !3347

if.else:                                          ; preds = %loop.body242
  store i8 1, ptr %got_digit, align 1, !dbg !3348
  call void @llvm.dbg.declare(metadata ptr %d, metadata !3350, metadata !DIExpression()), !dbg !3351
  %109 = load i8, ptr %c, align 1, !dbg !3352
  %gt248 = icmp ugt i8 %109, 57, !dbg !3352
  br i1 %gt248, label %if.then249, label %if.exit254, !dbg !3352

if.then249:                                       ; preds = %if.else
  %110 = load i8, ptr %c, align 1, !dbg !3354
  %zext250 = zext i8 %110 to i32, !dbg !3354
  %or251 = or i32 %zext250, 32, !dbg !3354
  %add252 = add i32 %or251, 10, !dbg !3354
  %sub253 = sub i32 %add252, 97, !dbg !3354
  store i32 %sub253, ptr %blockret247, align 4, !dbg !3354
  br label %expr_block.exit, !dbg !3354

if.exit254:                                       ; preds = %if.else
  %111 = load i8, ptr %c, align 1, !dbg !3355
  %zext255 = zext i8 %111 to i32, !dbg !3355
  %sub256 = sub i32 %zext255, 48, !dbg !3355
  store i32 %sub256, ptr %blockret247, align 4, !dbg !3355
  br label %expr_block.exit, !dbg !3355

expr_block.exit:                                  ; preds = %if.exit254, %if.then249
  %112 = load i32, ptr %blockret247, align 4, !dbg !3355
  store i32 %112, ptr %d, align 4, !dbg !3355
  store i8 1, ptr %switch257, align 1
  br label %switch.entry258

switch.entry258:                                  ; preds = %expr_block.exit
  %113 = load i8, ptr %switch257, align 1
  %114 = trunc i8 %113 to i1
  %115 = load i64, ptr %dc, align 8, !dbg !3356
  %lt259 = icmp slt i64 %115, 8, !dbg !3356
  %eq260 = icmp eq i1 %lt259, %114, !dbg !3356
  br i1 %eq260, label %switch.case261, label %next_if, !dbg !3356

switch.case261:                                   ; preds = %switch.entry258
  %116 = load i32, ptr %x, align 4, !dbg !3358
  %mul = mul i32 %116, 16, !dbg !3358
  %117 = load i32, ptr %d, align 4, !dbg !3360
  %add262 = add i32 %mul, %117, !dbg !3358
  store i32 %add262, ptr %x, align 4, !dbg !3358
  br label %switch.exit279, !dbg !3358

next_if:                                          ; preds = %switch.entry258
  %118 = load i64, ptr %dc, align 8, !dbg !3361
  %lt263 = icmp slt i64 %118, 14, !dbg !3361
  %eq264 = icmp eq i1 %lt263, %114, !dbg !3361
  br i1 %eq264, label %switch.case265, label %next_if268, !dbg !3361

switch.case265:                                   ; preds = %next_if
  %119 = load double, ptr %y, align 8, !dbg !3362
  %120 = load i32, ptr %d, align 4, !dbg !3364
  %sifp266 = sitofp i32 %120 to double, !dbg !3364
  %121 = load double, ptr %scale, align 8, !dbg !3365
  %fdiv = fdiv double %121, 1.600000e+01, !dbg !3365
  store double %fdiv, ptr %scale, align 8, !dbg !3365
  %fmul267 = fmul double %sifp266, %fdiv, !dbg !3364
  %fadd = fadd double %119, %fmul267, !dbg !3362
  store double %fadd, ptr %y, align 8, !dbg !3362
  store i8 1, ptr %got_tail, align 1, !dbg !3366
  br label %switch.exit279, !dbg !3366

next_if268:                                       ; preds = %next_if
  %122 = load i32, ptr %d, align 4, !dbg !3367
  %i2b269 = icmp ne i32 %122, 0, !dbg !3367
  br i1 %i2b269, label %and.rhs270, label %and.phi272, !dbg !3367

and.rhs270:                                       ; preds = %next_if268
  %123 = load i8, ptr %got_tail, align 1, !dbg !3368
  %124 = trunc i8 %123 to i1, !dbg !3368
  %not271 = xor i1 %124, true, !dbg !3368
  br label %and.phi272, !dbg !3368

and.phi272:                                       ; preds = %and.rhs270, %next_if268
  %val273 = phi i1 [ false, %next_if268 ], [ %not271, %and.rhs270 ], !dbg !3368
  %eq274 = icmp eq i1 %val273, %114, !dbg !3368
  br i1 %eq274, label %switch.case275, label %next_if278, !dbg !3368

switch.case275:                                   ; preds = %and.phi272
  %125 = load double, ptr %y, align 8, !dbg !3369
  %126 = load double, ptr %scale, align 8, !dbg !3371
  %fmul276 = fmul double 5.000000e-01, %126, !dbg !3372
  %fadd277 = fadd double %125, %fmul276, !dbg !3369
  store double %fadd277, ptr %y, align 8, !dbg !3369
  store i8 1, ptr %got_tail, align 1, !dbg !3373
  br label %switch.exit279, !dbg !3373

next_if278:                                       ; preds = %and.phi272
  br label %switch.exit279, !dbg !3373

switch.exit279:                                   ; preds = %next_if278, %switch.case275, %switch.case265, %switch.case261
  %127 = load i64, ptr %dc, align 8, !dbg !3374
  %add280 = add i64 %127, 1, !dbg !3374
  store i64 %add280, ptr %dc, align 8, !dbg !3374
  br label %if.exit281, !dbg !3374

if.exit281:                                       ; preds = %switch.exit279, %if.exit246
  %128 = load i64, ptr %index, align 8, !dbg !3375
  %129 = load i64, ptr %last_char, align 8, !dbg !3376
  %eq282 = icmp eq i64 %128, %129, !dbg !3375
  br i1 %eq282, label %if.then283, label %if.exit284, !dbg !3375

if.then283:                                       ; preds = %if.exit281
  br label %loop.exit300, !dbg !3377

if.exit284:                                       ; preds = %if.exit281
  %ptradd285 = getelementptr inbounds i8, ptr %chars146, i64 8, !dbg !3378
  %130 = load i64, ptr %ptradd285, align 8, !dbg !3378
  %131 = load ptr, ptr %chars146, align 8, !dbg !3378
  %132 = load i64, ptr %index, align 8, !dbg !3379
  %add286 = add i64 %132, 1, !dbg !3379
  store i64 %add286, ptr %index, align 8, !dbg !3379
  %ge287 = icmp uge i64 %add286, %130, !dbg !3379
  %133 = call i1 @llvm.expect.i1(i1 %ge287, i1 false), !dbg !3379
  br i1 %133, label %panic288, label %checkok298, !dbg !3379

checkok298:                                       ; preds = %if.exit284
  %ptradd299 = getelementptr inbounds i8, ptr %131, i64 %add286, !dbg !3380
  %134 = load i8, ptr %ptradd299, align 1, !dbg !3380
  store i8 %134, ptr %c, align 1, !dbg !3380
  br label %loop.cond227, !dbg !3380

loop.exit300:                                     ; preds = %if.then283, %or.phi240
  %135 = load i8, ptr %got_digit, align 1, !dbg !3381
  %136 = trunc i8 %135 to i1, !dbg !3381
  %not301 = xor i1 %136, true, !dbg !3381
  br i1 %not301, label %if.then302, label %if.exit303, !dbg !3381

if.then302:                                       ; preds = %loop.exit300
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3382
  br label %err_retblock, !dbg !3382

if.exit303:                                       ; preds = %loop.exit300
  %137 = load i8, ptr %got_rad, align 1, !dbg !3383
  %138 = trunc i8 %137 to i1, !dbg !3383
  %not304 = xor i1 %138, true, !dbg !3383
  br i1 %not304, label %if.then305, label %if.exit306, !dbg !3383

if.then305:                                       ; preds = %if.exit303
  %139 = load i64, ptr %dc, align 8, !dbg !3384
  store i64 %139, ptr %rp, align 8, !dbg !3384
  br label %if.exit306, !dbg !3384

if.exit306:                                       ; preds = %if.then305, %if.exit303
  br label %loop.cond307, !dbg !3385

loop.cond307:                                     ; preds = %loop.body309, %if.exit306
  %140 = load i64, ptr %dc, align 8, !dbg !3386
  %lt308 = icmp slt i64 %140, 8, !dbg !3386
  br i1 %lt308, label %loop.body309, label %loop.exit312, !dbg !3386

loop.body309:                                     ; preds = %loop.cond307
  %141 = load i32, ptr %x, align 4, !dbg !3388
  %mul310 = mul i32 %141, 16, !dbg !3388
  store i32 %mul310, ptr %x, align 4, !dbg !3388
  %142 = load i64, ptr %dc, align 8, !dbg !3389
  %add311 = add i64 %142, 1, !dbg !3389
  store i64 %add311, ptr %dc, align 8, !dbg !3389
  br label %loop.cond307, !dbg !3389

loop.exit312:                                     ; preds = %loop.cond307
  call void @llvm.dbg.declare(metadata ptr %e2, metadata !3390, metadata !DIExpression()), !dbg !3391
  store i64 0, ptr %e2, align 8, !dbg !3391
  %143 = load i8, ptr %c, align 1, !dbg !3392
  %zext313 = zext i8 %143 to i32, !dbg !3392
  %or314 = or i32 %zext313, 32, !dbg !3392
  %eq315 = icmp eq i32 %or314, 112, !dbg !3392
  %check316 = icmp sge i32 %or314, 0, !dbg !3392
  %siui-eq317 = and i1 %check316, %eq315, !dbg !3392
  br i1 %siui-eq317, label %if.then318, label %if.exit344, !dbg !3392

if.then318:                                       ; preds = %loop.exit312
  call void @llvm.dbg.declare(metadata ptr %e2val, metadata !3393, metadata !DIExpression()), !dbg !3395
  %144 = load %"char[]", ptr %chars146, align 8, !dbg !3396
  %145 = extractvalue %"char[]" %144, 0, !dbg !3396
  %146 = load i64, ptr %index, align 8, !dbg !3397
  %add319 = add i64 %146, 1, !dbg !3397
  %147 = extractvalue %"char[]" %144, 1, !dbg !3397
  %gt320 = icmp sgt i64 %add319, %147, !dbg !3397
  %148 = call i1 @llvm.expect.i1(i1 %gt320, i1 false), !dbg !3397
  br i1 %148, label %panic321, label %checkok331, !dbg !3397

checkok331:                                       ; preds = %if.then318
  %underflow = icmp slt i64 %add319, 0, !dbg !3398
  %149 = call i1 @llvm.expect.i1(i1 %underflow, i1 false), !dbg !3398
  br i1 %149, label %panic332, label %checkok340, !dbg !3398

checkok340:                                       ; preds = %checkok331
  %size341 = sub i64 %147, %add319, !dbg !3397
  %ptradd342 = getelementptr inbounds i8, ptr %145, i64 %add319, !dbg !3397
  %150 = insertvalue %"char[]" undef, ptr %ptradd342, 0, !dbg !3397
  %151 = insertvalue %"char[]" %150, i64 %size341, 1, !dbg !3397
  store %"char[]" %151, ptr %taddr343, align 8
  %152 = load [2 x i64], ptr %taddr343, align 8
  %153 = call i64 @std.core.String.to_long(ptr %retparam, [2 x i64] %152, i32 10), !dbg !3399
  %not_err = icmp eq i64 %153, 0, !dbg !3399
  %154 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !3399
  br i1 %154, label %after_check, label %else_block, !dbg !3399

after_check:                                      ; preds = %checkok340
  %155 = load i64, ptr %retparam, align 8, !dbg !3399
  br label %phi_block, !dbg !3399

else_block:                                       ; preds = %checkok340
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var, align 8, !dbg !3400
  br label %guard_block, !dbg !3400

guard_block:                                      ; preds = %else_block
  %156 = load i64, ptr %error_var, align 8, !dbg !3400
  store i64 %156, ptr %reterr, align 8, !dbg !3400
  br label %err_retblock, !dbg !3400

phi_block:                                        ; preds = %after_check
  store i64 %155, ptr %e2val, align 8, !dbg !3400
  %157 = load i64, ptr %e2val, align 8, !dbg !3401
  store i64 %157, ptr %e2, align 8, !dbg !3401
  br label %if.exit344, !dbg !3401

if.exit344:                                       ; preds = %phi_block, %loop.exit312
  %158 = load i64, ptr %e2, align 8, !dbg !3402
  %159 = load i64, ptr %rp, align 8, !dbg !3403
  %mul345 = mul i64 4, %159, !dbg !3404
  %sub346 = sub i64 %mul345, 32, !dbg !3404
  %add347 = add i64 %158, %sub346, !dbg !3402
  store i64 %add347, ptr %e2, align 8, !dbg !3402
  %160 = load i32, ptr %x, align 4, !dbg !3405
  %i2nb348 = icmp eq i32 %160, 0, !dbg !3405
  br i1 %i2nb348, label %if.then349, label %if.exit352, !dbg !3405

if.then349:                                       ; preds = %if.exit344
  %161 = load i32, ptr %sign147, align 4, !dbg !3406
  %sifp350 = sitofp i32 %161 to double, !dbg !3406
  %fmul351 = fmul double %sifp350, 0.000000e+00, !dbg !3406
  store double %fmul351, ptr %blockret148, align 8, !dbg !3406
  br label %expr_block.exit419, !dbg !3406

if.exit352:                                       ; preds = %if.exit344
  %162 = load i64, ptr %e2, align 8, !dbg !3407
  %gt353 = icmp sgt i64 %162, 149, !dbg !3407
  br i1 %gt353, label %if.then354, label %if.exit355, !dbg !3407

if.then354:                                       ; preds = %if.exit352
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3408
  br label %err_retblock, !dbg !3408

if.exit355:                                       ; preds = %if.exit352
  %163 = load i64, ptr %e2, align 8, !dbg !3409
  %lt356 = icmp slt i64 %163, -255, !dbg !3409
  br i1 %lt356, label %if.then357, label %if.exit358, !dbg !3409

if.then357:                                       ; preds = %if.exit355
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3410
  br label %err_retblock, !dbg !3410

if.exit358:                                       ; preds = %if.exit355
  br label %loop.cond359, !dbg !3411

loop.cond359:                                     ; preds = %if.exit370, %if.exit358
  %164 = load i32, ptr %x, align 4, !dbg !3412
  %lt360 = icmp ult i32 %164, -2147483648, !dbg !3412
  br i1 %lt360, label %loop.body361, label %loop.exit372, !dbg !3412

loop.body361:                                     ; preds = %loop.cond359
  %165 = load double, ptr %y, align 8, !dbg !3414
  %ge362 = fcmp oge double %165, 5.000000e-01, !dbg !3414
  br i1 %ge362, label %if.then363, label %if.else367, !dbg !3414

if.then363:                                       ; preds = %loop.body361
  %166 = load i32, ptr %x, align 4, !dbg !3416
  %167 = load i32, ptr %x, align 4, !dbg !3418
  %add364 = add i32 %167, 1, !dbg !3418
  %add365 = add i32 %166, %add364, !dbg !3416
  store i32 %add365, ptr %x, align 4, !dbg !3416
  %168 = load double, ptr %y, align 8, !dbg !3419
  %169 = load double, ptr %y, align 8, !dbg !3420
  %fsub = fsub double %169, 1.000000e+00, !dbg !3420
  %fadd366 = fadd double %168, %fsub, !dbg !3419
  store double %fadd366, ptr %y, align 8, !dbg !3419
  br label %if.exit370, !dbg !3419

if.else367:                                       ; preds = %loop.body361
  %170 = load i32, ptr %x, align 4, !dbg !3421
  %171 = load i32, ptr %x, align 4, !dbg !3423
  %add368 = add i32 %170, %171, !dbg !3421
  store i32 %add368, ptr %x, align 4, !dbg !3421
  %172 = load double, ptr %y, align 8, !dbg !3424
  %173 = load double, ptr %y, align 8, !dbg !3425
  %fadd369 = fadd double %172, %173, !dbg !3424
  store double %fadd369, ptr %y, align 8, !dbg !3424
  br label %if.exit370, !dbg !3424

if.exit370:                                       ; preds = %if.else367, %if.then363
  %174 = load i64, ptr %e2, align 8, !dbg !3426
  %sub371 = sub i64 %174, 1, !dbg !3426
  store i64 %sub371, ptr %e2, align 8, !dbg !3426
  br label %loop.cond359, !dbg !3426

loop.exit372:                                     ; preds = %loop.cond359
  call void @llvm.dbg.declare(metadata ptr %bits, metadata !3427, metadata !DIExpression()), !dbg !3428
  store i32 24, ptr %bits, align 4, !dbg !3429
  %175 = load i64, ptr %e2, align 8, !dbg !3430
  %add373 = add i64 32, %175, !dbg !3431
  %sub374 = sub i64 %add373, -149, !dbg !3431
  %gt375 = icmp sgt i64 24, %sub374, !dbg !3432
  br i1 %gt375, label %if.then376, label %if.exit382, !dbg !3432

if.then376:                                       ; preds = %loop.exit372
  %176 = load i64, ptr %e2, align 8, !dbg !3433
  %add377 = add i64 32, %176, !dbg !3435
  %sub378 = sub i64 %add377, -149, !dbg !3436
  %trunc = trunc i64 %sub378 to i32, !dbg !3436
  store i32 %trunc, ptr %bits, align 4, !dbg !3436
  %177 = load i32, ptr %bits, align 4, !dbg !3437
  %lt379 = icmp slt i32 %177, 0, !dbg !3437
  br i1 %lt379, label %if.then380, label %if.exit381, !dbg !3437

if.then380:                                       ; preds = %if.then376
  store i32 0, ptr %bits, align 4, !dbg !3438
  br label %if.exit381, !dbg !3438

if.exit381:                                       ; preds = %if.then380, %if.then376
  br label %if.exit382, !dbg !3438

if.exit382:                                       ; preds = %if.exit381, %loop.exit372
  call void @llvm.dbg.declare(metadata ptr %bias, metadata !3439, metadata !DIExpression()), !dbg !3440
  store double 0.000000e+00, ptr %bias, align 8, !dbg !3440
  %178 = load i32, ptr %bits, align 4, !dbg !3441
  %lt383 = icmp slt i32 %178, 53, !dbg !3441
  br i1 %lt383, label %if.then384, label %if.exit391, !dbg !3441

if.then384:                                       ; preds = %if.exit382
  store double 1.000000e+00, ptr %x385, align 8
  %179 = load i32, ptr %bits, align 4, !dbg !3442
  %sub386 = sub i32 85, %179, !dbg !3444
  %sub387 = sub i32 %sub386, 1, !dbg !3444
  store i32 %sub387, ptr %n, align 4
  %180 = load double, ptr %x385, align 8, !dbg !3445
  %181 = load i32, ptr %n, align 4, !dbg !3445
  %182 = call double @scalbn(double %180, i32 %181), !dbg !3448
  store double %182, ptr %mag, align 8
  %183 = load i32, ptr %sign147, align 4, !dbg !3449
  %sifp388 = sitofp i32 %183 to double, !dbg !3449
  store double %sifp388, ptr %sgn, align 8
  %184 = load double, ptr %mag, align 8
  store double %184, ptr %x389, align 8
  %185 = load double, ptr %sgn, align 8
  store double %185, ptr %y390, align 8
  %186 = load double, ptr %x389, align 8, !dbg !3450
  %187 = load double, ptr %sgn, align 8, !dbg !3455
  %188 = call double @llvm.copysign.f64(double %186, double %187), !dbg !3455
  store double %188, ptr %bias, align 8, !dbg !3455
  br label %if.exit391, !dbg !3455

if.exit391:                                       ; preds = %if.then384, %if.exit382
  %189 = load i32, ptr %bits, align 4, !dbg !3456
  %lt392 = icmp slt i32 %189, 32, !dbg !3456
  br i1 %lt392, label %and.rhs393, label %and.phi395, !dbg !3456

and.rhs393:                                       ; preds = %if.exit391
  %190 = load double, ptr %y, align 8, !dbg !3457
  %neq394 = fcmp one double %190, 0.000000e+00, !dbg !3457
  br label %and.phi395, !dbg !3457

and.phi395:                                       ; preds = %and.rhs393, %if.exit391
  %val396 = phi i1 [ false, %if.exit391 ], [ %neq394, %and.rhs393 ], !dbg !3457
  br i1 %val396, label %and.rhs397, label %and.phi399, !dbg !3457

and.rhs397:                                       ; preds = %and.phi395
  %191 = load i32, ptr %x, align 4, !dbg !3458
  %and = and i32 %191, 1, !dbg !3459
  %i2nb398 = icmp eq i32 %and, 0, !dbg !3459
  br label %and.phi399, !dbg !3459

and.phi399:                                       ; preds = %and.rhs397, %and.phi395
  %val400 = phi i1 [ false, %and.phi395 ], [ %i2nb398, %and.rhs397 ], !dbg !3459
  br i1 %val400, label %if.then401, label %if.exit403, !dbg !3459

if.then401:                                       ; preds = %and.phi399
  %192 = load i32, ptr %x, align 4, !dbg !3460
  %add402 = add i32 %192, 1, !dbg !3460
  store i32 %add402, ptr %x, align 4, !dbg !3460
  store double 0.000000e+00, ptr %y, align 8, !dbg !3462
  br label %if.exit403, !dbg !3462

if.exit403:                                       ; preds = %if.then401, %and.phi399
  %193 = load double, ptr %bias, align 8, !dbg !3463
  %194 = load i32, ptr %sign147, align 4, !dbg !3464
  %sifp404 = sitofp i32 %194 to double, !dbg !3464
  %195 = load i32, ptr %x, align 4, !dbg !3465
  %uifp = uitofp i32 %195 to double, !dbg !3465
  %fmul405 = fmul double %sifp404, %uifp, !dbg !3464
  %fadd406 = fadd double %193, %fmul405, !dbg !3463
  %196 = load i32, ptr %sign147, align 4, !dbg !3466
  %sifp407 = sitofp i32 %196 to double, !dbg !3466
  %197 = load double, ptr %y, align 8, !dbg !3467
  %fmul408 = fmul double %sifp407, %197, !dbg !3466
  %fadd409 = fadd double %fadd406, %fmul408, !dbg !3463
  store double %fadd409, ptr %y, align 8, !dbg !3463
  %198 = load double, ptr %y, align 8, !dbg !3468
  %199 = load double, ptr %bias, align 8, !dbg !3469
  %fsub410 = fsub double %198, %199, !dbg !3468
  store double %fsub410, ptr %y, align 8, !dbg !3468
  %200 = load double, ptr %y, align 8, !dbg !3470
  %neq411 = fcmp one double %200, 0.000000e+00, !dbg !3470
  %not412 = xor i1 %neq411, true, !dbg !3470
  br i1 %not412, label %if.then413, label %if.exit414, !dbg !3470

if.then413:                                       ; preds = %if.exit403
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3471
  br label %err_retblock, !dbg !3471

if.exit414:                                       ; preds = %if.exit403
  %201 = load double, ptr %y, align 8
  store double %201, ptr %x415, align 8
  %202 = load i64, ptr %e2, align 8, !dbg !3472
  %trunc416 = trunc i64 %202 to i32, !dbg !3472
  store i32 %trunc416, ptr %n417, align 4
  %203 = load double, ptr %x415, align 8, !dbg !3473
  %204 = load i32, ptr %n417, align 4, !dbg !3473
  %205 = call double @scalbn(double %203, i32 %204), !dbg !3476
  store double %205, ptr %blockret148, align 8, !dbg !3476
  br label %expr_block.exit419, !dbg !3476

expr_block.exit419:                               ; preds = %if.exit414, %if.then349, %if.exit176, %if.then168
  %206 = load double, ptr %blockret148, align 8, !dbg !3476
  %fpfptrunc = fptrunc double %206 to float, !dbg !3476
  store float %fpfptrunc, ptr %blockret, align 4, !dbg !3476
  br label %expr_block.exit1949, !dbg !3476

if.exit420:                                       ; preds = %and.phi129
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %chars421, ptr align 8 %chars, i32 16, i1 false)
  %207 = load i32, ptr %sign, align 4
  store i32 %207, ptr %sign422, align 4
  %ptradd424 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3477
  %208 = load i64, ptr %ptradd424, align 8, !dbg !3477
  %lt425 = icmp ult i64 0, %208, !dbg !3477
  br i1 %lt425, label %assert_ok, label %assert_fail, !dbg !3477

assert_fail:                                      ; preds = %if.exit420
  store %"char[]" { ptr @.panic_msg.81, i64 34 }, ptr %taddr426, align 8
  %209 = load [2 x i64], ptr %taddr426, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr427, align 8
  %210 = load [2 x i64], ptr %taddr427, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr428, align 8
  %211 = load [2 x i64], ptr %taddr428, align 8
  %212 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %212([2 x i64] %209, [2 x i64] %210, [2 x i64] %211, i32 35), !dbg !3477
  unreachable, !dbg !3477

assert_ok:                                        ; preds = %if.exit420
  call void @llvm.dbg.declare(metadata ptr %x429, metadata !3481, metadata !DIExpression()), !dbg !3482
  call void @llvm.memset.p0.i64(ptr align 4 %x429, i8 0, i64 512, i1 false), !dbg !3482
  call void @llvm.dbg.declare(metadata ptr %emax, metadata !3483, metadata !DIExpression()), !dbg !3484
  store i32 128, ptr %emax, align 4, !dbg !3485
  call void @llvm.dbg.declare(metadata ptr %index430, metadata !3486, metadata !DIExpression()), !dbg !3487
  store i64 0, ptr %index430, align 8, !dbg !3487
  call void @llvm.dbg.declare(metadata ptr %got_digit431, metadata !3488, metadata !DIExpression()), !dbg !3489
  %ptradd432 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3490
  %213 = load i64, ptr %ptradd432, align 8, !dbg !3490
  %214 = load ptr, ptr %chars421, align 8, !dbg !3490
  %ge433 = icmp sge i64 0, %213, !dbg !3491
  %215 = call i1 @llvm.expect.i1(i1 %ge433, i1 false), !dbg !3491
  br i1 %215, label %panic434, label %checkok444, !dbg !3491

checkok444:                                       ; preds = %assert_ok
  %216 = load i8, ptr %214, align 1, !dbg !3491
  %eq445 = icmp eq i8 %216, 48, !dbg !3490
  %217 = zext i1 %eq445 to i8, !dbg !3490
  store i8 %217, ptr %got_digit431, align 1, !dbg !3490
  call void @llvm.dbg.declare(metadata ptr %got_rad446, metadata !3492, metadata !DIExpression()), !dbg !3493
  store i8 0, ptr %got_rad446, align 1, !dbg !3493
  call void @llvm.dbg.declare(metadata ptr %lrp, metadata !3494, metadata !DIExpression()), !dbg !3495
  store i64 0, ptr %lrp, align 8, !dbg !3495
  call void @llvm.dbg.declare(metadata ptr %dc447, metadata !3496, metadata !DIExpression()), !dbg !3497
  store i64 0, ptr %dc447, align 8, !dbg !3497
  call void @llvm.dbg.declare(metadata ptr %k, metadata !3498, metadata !DIExpression()), !dbg !3499
  store i32 0, ptr %k, align 4, !dbg !3499
  call void @llvm.dbg.declare(metadata ptr %j, metadata !3500, metadata !DIExpression()), !dbg !3501
  store i32 0, ptr %j, align 4, !dbg !3501
  call void @llvm.dbg.declare(metadata ptr %lnz, metadata !3502, metadata !DIExpression()), !dbg !3503
  store i32 0, ptr %lnz, align 4, !dbg !3503
  call void @llvm.dbg.declare(metadata ptr %len448, metadata !3504, metadata !DIExpression()), !dbg !3505
  %ptradd449 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3506
  %218 = load i64, ptr %ptradd449, align 8, !dbg !3506
  store i64 %218, ptr %len448, align 8, !dbg !3506
  call void @llvm.dbg.declare(metadata ptr %last_char450, metadata !3507, metadata !DIExpression()), !dbg !3508
  %219 = load i64, ptr %len448, align 8, !dbg !3509
  %sub451 = sub i64 %219, 1, !dbg !3509
  store i64 %sub451, ptr %last_char450, align 8, !dbg !3509
  %220 = load i64, ptr %len448, align 8, !dbg !3510
  %i2b452 = icmp ne i64 %220, 0, !dbg !3510
  br i1 %i2b452, label %assert_ok457, label %assert_fail453, !dbg !3510

assert_fail453:                                   ; preds = %checkok444
  store %"char[]" { ptr @.panic_msg.82, i64 16 }, ptr %taddr454, align 8
  %221 = load [2 x i64], ptr %taddr454, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr455, align 8
  %222 = load [2 x i64], ptr %taddr455, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr456, align 8
  %223 = load [2 x i64], ptr %taddr456, align 8
  %224 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %224([2 x i64] %221, [2 x i64] %222, [2 x i64] %223, i32 52), !dbg !3510
  unreachable, !dbg !3510

assert_ok457:                                     ; preds = %checkok444
  call void @llvm.dbg.declare(metadata ptr %c458, metadata !3511, metadata !DIExpression()), !dbg !3512
  br label %loop.cond459, !dbg !3513

loop.cond459:                                     ; preds = %if.exit480, %assert_ok457
  %ptradd460 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3514
  %225 = load i64, ptr %ptradd460, align 8, !dbg !3514
  %226 = load ptr, ptr %chars421, align 8, !dbg !3514
  %227 = load i64, ptr %index430, align 8, !dbg !3516
  %ge461 = icmp uge i64 %227, %225, !dbg !3516
  %228 = call i1 @llvm.expect.i1(i1 %ge461, i1 false), !dbg !3516
  br i1 %228, label %panic462, label %checkok472, !dbg !3516

checkok472:                                       ; preds = %loop.cond459
  %ptradd473 = getelementptr inbounds i8, ptr %226, i64 %227, !dbg !3516
  %229 = load i8, ptr %ptradd473, align 1, !dbg !3516
  store i8 %229, ptr %c458, align 1, !dbg !3516
  %eq474 = icmp eq i8 %229, 48, !dbg !3517
  br i1 %eq474, label %loop.body475, label %loop.exit482, !dbg !3517

loop.body475:                                     ; preds = %checkok472
  %230 = load i64, ptr %index430, align 8, !dbg !3518
  %231 = load i64, ptr %last_char450, align 8, !dbg !3520
  %eq476 = icmp eq i64 %230, %231, !dbg !3518
  br i1 %eq476, label %if.then477, label %if.exit480, !dbg !3518

if.then477:                                       ; preds = %loop.body475
  %232 = load i32, ptr %sign422, align 4, !dbg !3521
  %sifp478 = sitofp i32 %232 to double, !dbg !3521
  %fmul479 = fmul double %sifp478, 0.000000e+00, !dbg !3521
  store double %fmul479, ptr %blockret423, align 8, !dbg !3521
  br label %expr_block.exit1947, !dbg !3521

if.exit480:                                       ; preds = %loop.body475
  %233 = load i64, ptr %index430, align 8, !dbg !3522
  %add481 = add i64 %233, 1, !dbg !3522
  store i64 %add481, ptr %index430, align 8, !dbg !3522
  br label %loop.cond459, !dbg !3522

loop.exit482:                                     ; preds = %checkok472
  %234 = load i8, ptr %c458, align 1, !dbg !3523
  %eq483 = icmp eq i8 %234, 46, !dbg !3523
  br i1 %eq483, label %if.then484, label %if.exit540, !dbg !3523

if.then484:                                       ; preds = %loop.exit482
  store i8 1, ptr %got_rad446, align 1, !dbg !3524
  %235 = load i64, ptr %index430, align 8, !dbg !3526
  %236 = load i64, ptr %last_char450, align 8, !dbg !3527
  %eq485 = icmp eq i64 %235, %236, !dbg !3526
  br i1 %eq485, label %if.then486, label %if.exit492, !dbg !3526

if.then486:                                       ; preds = %if.then484
  %237 = load i8, ptr %got_digit431, align 1, !dbg !3528
  %238 = trunc i8 %237 to i1, !dbg !3528
  %not487 = xor i1 %238, true, !dbg !3528
  br i1 %not487, label %if.then488, label %if.exit489, !dbg !3528

if.then488:                                       ; preds = %if.then486
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3530
  br label %err_retblock, !dbg !3530

if.exit489:                                       ; preds = %if.then486
  %239 = load i32, ptr %sign422, align 4, !dbg !3531
  %sifp490 = sitofp i32 %239 to double, !dbg !3531
  %fmul491 = fmul double %sifp490, 0.000000e+00, !dbg !3531
  store double %fmul491, ptr %blockret423, align 8, !dbg !3531
  br label %expr_block.exit1947, !dbg !3531

if.exit492:                                       ; preds = %if.then484
  %240 = load i64, ptr %index430, align 8, !dbg !3532
  %241 = load i64, ptr %last_char450, align 8, !dbg !3533
  %neq493 = icmp ne i64 %240, %241, !dbg !3532
  br i1 %neq493, label %and.rhs494, label %and.phi511, !dbg !3532

and.rhs494:                                       ; preds = %if.exit492
  %ptradd495 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3534
  %242 = load i64, ptr %ptradd495, align 8, !dbg !3534
  %243 = load ptr, ptr %chars421, align 8, !dbg !3534
  %244 = load i64, ptr %index430, align 8, !dbg !3535
  %add496 = add i64 %244, 1, !dbg !3535
  store i64 %add496, ptr %index430, align 8, !dbg !3535
  %ge497 = icmp uge i64 %add496, %242, !dbg !3535
  %245 = call i1 @llvm.expect.i1(i1 %ge497, i1 false), !dbg !3535
  br i1 %245, label %panic498, label %checkok508, !dbg !3535

checkok508:                                       ; preds = %and.rhs494
  %ptradd509 = getelementptr inbounds i8, ptr %243, i64 %add496, !dbg !3536
  %246 = load i8, ptr %ptradd509, align 1, !dbg !3536
  store i8 %246, ptr %c458, align 1, !dbg !3536
  %eq510 = icmp eq i8 %246, 48, !dbg !3537
  br label %and.phi511, !dbg !3537

and.phi511:                                       ; preds = %checkok508, %if.exit492
  %val512 = phi i1 [ false, %if.exit492 ], [ %eq510, %checkok508 ], !dbg !3537
  br i1 %val512, label %if.then513, label %if.exit539, !dbg !3537

if.then513:                                       ; preds = %and.phi511
  %247 = load i64, ptr %lrp, align 8, !dbg !3538
  %sub514 = sub i64 %247, 1, !dbg !3538
  store i64 %sub514, ptr %lrp, align 8, !dbg !3538
  store i8 1, ptr %got_digit431, align 1, !dbg !3540
  br label %loop.cond515, !dbg !3541

loop.cond515:                                     ; preds = %loop.body536, %if.then513
  %248 = load i64, ptr %last_char450, align 8, !dbg !3542
  %249 = load i64, ptr %index430, align 8, !dbg !3544
  %neq516 = icmp ne i64 %248, %249, !dbg !3542
  br i1 %neq516, label %and.rhs517, label %and.phi534, !dbg !3542

and.rhs517:                                       ; preds = %loop.cond515
  %ptradd518 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3545
  %250 = load i64, ptr %ptradd518, align 8, !dbg !3545
  %251 = load ptr, ptr %chars421, align 8, !dbg !3545
  %252 = load i64, ptr %index430, align 8, !dbg !3546
  %add519 = add i64 %252, 1, !dbg !3546
  store i64 %add519, ptr %index430, align 8, !dbg !3546
  %ge520 = icmp uge i64 %add519, %250, !dbg !3546
  %253 = call i1 @llvm.expect.i1(i1 %ge520, i1 false), !dbg !3546
  br i1 %253, label %panic521, label %checkok531, !dbg !3546

checkok531:                                       ; preds = %and.rhs517
  %ptradd532 = getelementptr inbounds i8, ptr %251, i64 %add519, !dbg !3547
  %254 = load i8, ptr %ptradd532, align 1, !dbg !3547
  store i8 %254, ptr %c458, align 1, !dbg !3547
  %eq533 = icmp eq i8 %254, 48, !dbg !3548
  br label %and.phi534, !dbg !3548

and.phi534:                                       ; preds = %checkok531, %loop.cond515
  %val535 = phi i1 [ false, %loop.cond515 ], [ %eq533, %checkok531 ], !dbg !3548
  br i1 %val535, label %loop.body536, label %loop.exit538, !dbg !3548

loop.body536:                                     ; preds = %and.phi534
  %255 = load i64, ptr %lrp, align 8, !dbg !3549
  %sub537 = sub i64 %255, 1, !dbg !3549
  store i64 %sub537, ptr %lrp, align 8, !dbg !3549
  br label %loop.cond515, !dbg !3549

loop.exit538:                                     ; preds = %and.phi534
  br label %if.exit539, !dbg !3549

if.exit539:                                       ; preds = %loop.exit538, %and.phi511
  br label %if.exit540, !dbg !3549

if.exit540:                                       ; preds = %if.exit539, %loop.exit482
  br label %loop.cond541, !dbg !3551

loop.cond541:                                     ; preds = %checkok681, %if.exit540
  %256 = load i8, ptr %c458, align 1, !dbg !3552
  %zext542 = zext i8 %256 to i32, !dbg !3552
  %sub543 = sub i32 %zext542, 48, !dbg !3552
  %lt544 = icmp ult i32 %sub543, 10, !dbg !3552
  br i1 %lt544, label %or.phi547, label %or.rhs545, !dbg !3552

or.rhs545:                                        ; preds = %loop.cond541
  %257 = load i8, ptr %c458, align 1, !dbg !3554
  %eq546 = icmp eq i8 %257, 46, !dbg !3554
  br label %or.phi547, !dbg !3554

or.phi547:                                        ; preds = %or.rhs545, %loop.cond541
  %val548 = phi i1 [ true, %loop.cond541 ], [ %eq546, %or.rhs545 ], !dbg !3554
  br i1 %val548, label %loop.body549, label %loop.exit683, !dbg !3554

loop.body549:                                     ; preds = %or.phi547
  store i8 1, ptr %switch550, align 1
  br label %switch.entry551

switch.entry551:                                  ; preds = %loop.body549
  %258 = load i8, ptr %switch550, align 1
  %259 = trunc i8 %258 to i1
  %260 = load i8, ptr %c458, align 1, !dbg !3555
  %eq552 = icmp eq i8 %260, 46, !dbg !3555
  %eq553 = icmp eq i1 %eq552, %259, !dbg !3555
  br i1 %eq553, label %switch.case554, label %next_if557, !dbg !3555

switch.case554:                                   ; preds = %switch.entry551
  %261 = load i8, ptr %got_rad446, align 1, !dbg !3558
  %262 = trunc i8 %261 to i1, !dbg !3558
  br i1 %262, label %if.then555, label %if.exit556, !dbg !3558

if.then555:                                       ; preds = %switch.case554
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3560
  br label %err_retblock, !dbg !3560

if.exit556:                                       ; preds = %switch.case554
  store i8 1, ptr %got_rad446, align 1, !dbg !3561
  %263 = load i64, ptr %dc447, align 8, !dbg !3562
  store i64 %263, ptr %lrp, align 8, !dbg !3562
  br label %switch.exit658, !dbg !3562

next_if557:                                       ; preds = %switch.entry551
  %264 = load i32, ptr %k, align 4, !dbg !3563
  %lt558 = icmp slt i32 %264, 125, !dbg !3563
  %eq559 = icmp eq i1 %lt558, %259, !dbg !3563
  br i1 %eq559, label %switch.case560, label %next_if651, !dbg !3563

switch.case560:                                   ; preds = %next_if557
  %265 = load i64, ptr %dc447, align 8, !dbg !3564
  %add561 = add i64 %265, 1, !dbg !3564
  store i64 %add561, ptr %dc447, align 8, !dbg !3564
  %266 = load i8, ptr %c458, align 1, !dbg !3566
  %neq562 = icmp ne i8 %266, 48, !dbg !3566
  br i1 %neq562, label %if.then563, label %if.exit565, !dbg !3566

if.then563:                                       ; preds = %switch.case560
  %267 = load i64, ptr %dc447, align 8, !dbg !3567
  %trunc564 = trunc i64 %267 to i32, !dbg !3567
  store i32 %trunc564, ptr %lnz, align 4, !dbg !3567
  br label %if.exit565, !dbg !3567

if.exit565:                                       ; preds = %if.then563, %switch.case560
  %268 = load i32, ptr %j, align 4, !dbg !3568
  %i2b566 = icmp ne i32 %268, 0, !dbg !3568
  br i1 %i2b566, label %if.then567, label %if.else618, !dbg !3568

if.then567:                                       ; preds = %if.exit565
  %269 = load i32, ptr %k, align 4, !dbg !3569
  %sext = sext i32 %269 to i64, !dbg !3569
  %lt568 = icmp slt i64 %sext, 0, !dbg !3569
  %270 = call i1 @llvm.expect.i1(i1 %lt568, i1 false), !dbg !3569
  br i1 %270, label %panic569, label %checkok577, !dbg !3569

checkok577:                                       ; preds = %if.then567
  %ge578 = icmp sge i64 %sext, 128, !dbg !3569
  %271 = call i1 @llvm.expect.i1(i1 %ge578, i1 false), !dbg !3569
  br i1 %271, label %panic579, label %checkok589, !dbg !3569

checkok589:                                       ; preds = %checkok577
  %ptroffset = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext, !dbg !3569
  %272 = load i32, ptr %k, align 4, !dbg !3571
  %sext590 = sext i32 %272 to i64, !dbg !3571
  %lt591 = icmp slt i64 %sext590, 0, !dbg !3571
  %273 = call i1 @llvm.expect.i1(i1 %lt591, i1 false), !dbg !3571
  br i1 %273, label %panic592, label %checkok600, !dbg !3571

checkok600:                                       ; preds = %checkok589
  %ge601 = icmp sge i64 %sext590, 128, !dbg !3571
  %274 = call i1 @llvm.expect.i1(i1 %ge601, i1 false), !dbg !3571
  br i1 %274, label %panic602, label %checkok612, !dbg !3571

checkok612:                                       ; preds = %checkok600
  %ptroffset613 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext590, !dbg !3571
  %275 = load i32, ptr %ptroffset613, align 4, !dbg !3571
  %mul614 = mul i32 %275, 10, !dbg !3572
  %276 = load i8, ptr %c458, align 1, !dbg !3573
  %zext615 = zext i8 %276 to i32, !dbg !3573
  %add616 = add i32 %mul614, %zext615, !dbg !3572
  %sub617 = sub i32 %add616, 48, !dbg !3572
  store i32 %sub617, ptr %ptroffset, align 4, !dbg !3572
  br label %if.exit645, !dbg !3572

if.else618:                                       ; preds = %if.exit565
  %277 = load i32, ptr %k, align 4, !dbg !3574
  %sext619 = sext i32 %277 to i64, !dbg !3574
  %lt620 = icmp slt i64 %sext619, 0, !dbg !3574
  %278 = call i1 @llvm.expect.i1(i1 %lt620, i1 false), !dbg !3574
  br i1 %278, label %panic621, label %checkok629, !dbg !3574

checkok629:                                       ; preds = %if.else618
  %ge630 = icmp sge i64 %sext619, 128, !dbg !3574
  %279 = call i1 @llvm.expect.i1(i1 %ge630, i1 false), !dbg !3574
  br i1 %279, label %panic631, label %checkok641, !dbg !3574

checkok641:                                       ; preds = %checkok629
  %ptroffset642 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext619, !dbg !3574
  %280 = load i8, ptr %c458, align 1, !dbg !3576
  %zext643 = zext i8 %280 to i32, !dbg !3576
  %sub644 = sub i32 %zext643, 48, !dbg !3576
  store i32 %sub644, ptr %ptroffset642, align 4, !dbg !3576
  br label %if.exit645, !dbg !3576

if.exit645:                                       ; preds = %checkok641, %checkok612
  %281 = load i32, ptr %j, align 4, !dbg !3577
  %add646 = add i32 %281, 1, !dbg !3577
  store i32 %add646, ptr %j, align 4, !dbg !3577
  %eq647 = icmp eq i32 %add646, 9, !dbg !3578
  br i1 %eq647, label %if.then648, label %if.exit650, !dbg !3578

if.then648:                                       ; preds = %if.exit645
  %282 = load i32, ptr %k, align 4, !dbg !3579
  %add649 = add i32 %282, 1, !dbg !3579
  store i32 %add649, ptr %k, align 4, !dbg !3579
  store i32 0, ptr %j, align 4, !dbg !3581
  br label %if.exit650, !dbg !3581

if.exit650:                                       ; preds = %if.then648, %if.exit645
  store i8 1, ptr %got_digit431, align 1, !dbg !3582
  br label %switch.exit658, !dbg !3582

next_if651:                                       ; preds = %next_if557
  br label %switch.default, !dbg !3582

switch.default:                                   ; preds = %next_if651
  %283 = load i64, ptr %dc447, align 8, !dbg !3583
  %add652 = add i64 %283, 1, !dbg !3583
  store i64 %add652, ptr %dc447, align 8, !dbg !3583
  %284 = load i8, ptr %c458, align 1, !dbg !3585
  %neq653 = icmp ne i8 %284, 48, !dbg !3585
  br i1 %neq653, label %if.then654, label %if.exit657, !dbg !3585

if.then654:                                       ; preds = %switch.default
  %ptradd655 = getelementptr inbounds i8, ptr %x429, i64 496, !dbg !3586
  %285 = load i32, ptr %ptradd655, align 4, !dbg !3586
  %or656 = or i32 %285, 1, !dbg !3587
  store i32 %or656, ptr %ptradd655, align 4, !dbg !3587
  br label %if.exit657, !dbg !3587

if.exit657:                                       ; preds = %if.then654, %switch.default
  br label %switch.exit658, !dbg !3587

switch.exit658:                                   ; preds = %if.exit657, %if.exit650, %if.exit556
  %286 = load i64, ptr %index430, align 8, !dbg !3588
  %287 = load i64, ptr %last_char450, align 8, !dbg !3589
  %eq659 = icmp eq i64 %286, %287, !dbg !3588
  br i1 %eq659, label %if.then660, label %if.exit661, !dbg !3588

if.then660:                                       ; preds = %switch.exit658
  br label %loop.exit683, !dbg !3590

if.exit661:                                       ; preds = %switch.exit658
  %288 = load i64, ptr %index430, align 8, !dbg !3591
  %289 = load i64, ptr %last_char450, align 8, !dbg !3592
  %lt662 = icmp ult i64 %288, %289, !dbg !3591
  br i1 %lt662, label %assert_ok667, label %assert_fail663, !dbg !3591

assert_fail663:                                   ; preds = %if.exit661
  store %"char[]" { ptr @.panic_msg.82, i64 16 }, ptr %taddr664, align 8
  %290 = load [2 x i64], ptr %taddr664, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr665, align 8
  %291 = load [2 x i64], ptr %taddr665, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr666, align 8
  %292 = load [2 x i64], ptr %taddr666, align 8
  %293 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %293([2 x i64] %290, [2 x i64] %291, [2 x i64] %292, i32 112), !dbg !3591
  unreachable, !dbg !3591

assert_ok667:                                     ; preds = %if.exit661
  %ptradd668 = getelementptr inbounds i8, ptr %chars421, i64 8, !dbg !3593
  %294 = load i64, ptr %ptradd668, align 8, !dbg !3593
  %295 = load ptr, ptr %chars421, align 8, !dbg !3593
  %296 = load i64, ptr %index430, align 8, !dbg !3594
  %add669 = add i64 %296, 1, !dbg !3594
  store i64 %add669, ptr %index430, align 8, !dbg !3594
  %ge670 = icmp uge i64 %add669, %294, !dbg !3594
  %297 = call i1 @llvm.expect.i1(i1 %ge670, i1 false), !dbg !3594
  br i1 %297, label %panic671, label %checkok681, !dbg !3594

checkok681:                                       ; preds = %assert_ok667
  %ptradd682 = getelementptr inbounds i8, ptr %295, i64 %add669, !dbg !3595
  %298 = load i8, ptr %ptradd682, align 1, !dbg !3595
  store i8 %298, ptr %c458, align 1, !dbg !3595
  br label %loop.cond541, !dbg !3595

loop.exit683:                                     ; preds = %if.then660, %or.phi547
  %299 = load i8, ptr %got_rad446, align 1, !dbg !3596
  %300 = trunc i8 %299 to i1, !dbg !3596
  %not684 = xor i1 %300, true, !dbg !3596
  br i1 %not684, label %if.then685, label %if.exit686, !dbg !3596

if.then685:                                       ; preds = %loop.exit683
  %301 = load i64, ptr %dc447, align 8, !dbg !3597
  store i64 %301, ptr %lrp, align 8, !dbg !3597
  br label %if.exit686, !dbg !3597

if.exit686:                                       ; preds = %if.then685, %loop.exit683
  %302 = load i8, ptr %got_digit431, align 1, !dbg !3598
  %303 = trunc i8 %302 to i1, !dbg !3598
  %not687 = xor i1 %303, true, !dbg !3598
  br i1 %not687, label %if.then688, label %if.exit689, !dbg !3598

if.then688:                                       ; preds = %if.exit686
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3599
  br label %err_retblock, !dbg !3599

if.exit689:                                       ; preds = %if.exit686
  %304 = load i8, ptr %c458, align 1, !dbg !3600
  %zext690 = zext i8 %304 to i32, !dbg !3600
  %or691 = or i32 %zext690, 32, !dbg !3600
  %eq692 = icmp eq i32 %or691, 101, !dbg !3600
  %check693 = icmp sge i32 %or691, 0, !dbg !3600
  %siui-eq694 = and i1 %check693, %eq692, !dbg !3600
  br i1 %siui-eq694, label %if.then695, label %if.else733, !dbg !3600

if.then695:                                       ; preds = %if.exit689
  %305 = load i64, ptr %last_char450, align 8, !dbg !3601
  %306 = load i64, ptr %index430, align 8, !dbg !3603
  %eq696 = icmp eq i64 %305, %306, !dbg !3601
  br i1 %eq696, label %if.then697, label %if.exit698, !dbg !3601

if.then697:                                       ; preds = %if.then695
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3604
  br label %err_retblock, !dbg !3604

if.exit698:                                       ; preds = %if.then695
  call void @llvm.dbg.declare(metadata ptr %e10, metadata !3605, metadata !DIExpression()), !dbg !3606
  %307 = load %"char[]", ptr %chars421, align 8, !dbg !3607
  %308 = extractvalue %"char[]" %307, 0, !dbg !3607
  %309 = load i64, ptr %index430, align 8, !dbg !3608
  %add699 = add i64 %309, 1, !dbg !3608
  %310 = extractvalue %"char[]" %307, 1, !dbg !3608
  %gt700 = icmp sgt i64 %add699, %310, !dbg !3608
  %311 = call i1 @llvm.expect.i1(i1 %gt700, i1 false), !dbg !3608
  br i1 %311, label %panic701, label %checkok711, !dbg !3608

checkok711:                                       ; preds = %if.exit698
  %underflow712 = icmp slt i64 %add699, 0, !dbg !3609
  %312 = call i1 @llvm.expect.i1(i1 %underflow712, i1 false), !dbg !3609
  br i1 %312, label %panic713, label %checkok721, !dbg !3609

checkok721:                                       ; preds = %checkok711
  %size722 = sub i64 %310, %add699, !dbg !3608
  %ptradd723 = getelementptr inbounds i8, ptr %308, i64 %add699, !dbg !3608
  %313 = insertvalue %"char[]" undef, ptr %ptradd723, 0, !dbg !3608
  %314 = insertvalue %"char[]" %313, i64 %size722, 1, !dbg !3608
  store %"char[]" %314, ptr %taddr725, align 8
  %315 = load [2 x i64], ptr %taddr725, align 8
  %316 = call i64 @std.core.String.to_long(ptr %retparam724, [2 x i64] %315, i32 10), !dbg !3610
  %not_err726 = icmp eq i64 %316, 0, !dbg !3610
  %317 = call i1 @llvm.expect.i1(i1 %not_err726, i1 true), !dbg !3610
  br i1 %317, label %after_check727, label %else_block728, !dbg !3610

after_check727:                                   ; preds = %checkok721
  %318 = load i64, ptr %retparam724, align 8, !dbg !3610
  br label %phi_block731, !dbg !3610

else_block728:                                    ; preds = %checkok721
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %error_var729, align 8, !dbg !3611
  br label %guard_block730, !dbg !3611

guard_block730:                                   ; preds = %else_block728
  %319 = load i64, ptr %error_var729, align 8, !dbg !3611
  store i64 %319, ptr %reterr, align 8, !dbg !3611
  br label %err_retblock, !dbg !3611

phi_block731:                                     ; preds = %after_check727
  store i64 %318, ptr %e10, align 8, !dbg !3611
  %320 = load i64, ptr %lrp, align 8, !dbg !3612
  %321 = load i64, ptr %e10, align 8, !dbg !3613
  %add732 = add i64 %320, %321, !dbg !3612
  store i64 %add732, ptr %lrp, align 8, !dbg !3612
  br label %if.exit737, !dbg !3612

if.else733:                                       ; preds = %if.exit689
  %322 = load i64, ptr %index430, align 8, !dbg !3614
  %323 = load i64, ptr %last_char450, align 8, !dbg !3615
  %neq734 = icmp ne i64 %322, %323, !dbg !3614
  br i1 %neq734, label %if.then735, label %if.exit736, !dbg !3614

if.then735:                                       ; preds = %if.else733
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3616
  br label %err_retblock, !dbg !3616

if.exit736:                                       ; preds = %if.else733
  br label %if.exit737, !dbg !3616

if.exit737:                                       ; preds = %if.exit736, %phi_block731
  %324 = load i32, ptr %x429, align 4, !dbg !3618
  %i2nb738 = icmp eq i32 %324, 0, !dbg !3618
  br i1 %i2nb738, label %if.then739, label %if.exit742, !dbg !3618

if.then739:                                       ; preds = %if.exit737
  %325 = load i32, ptr %sign422, align 4, !dbg !3619
  %sifp740 = sitofp i32 %325 to double, !dbg !3619
  %fmul741 = fmul double %sifp740, 0.000000e+00, !dbg !3619
  store double %fmul741, ptr %blockret423, align 8, !dbg !3619
  br label %expr_block.exit1947, !dbg !3619

if.exit742:                                       ; preds = %if.exit737
  %326 = load i64, ptr %lrp, align 8, !dbg !3620
  %327 = load i64, ptr %dc447, align 8, !dbg !3621
  %eq743 = icmp eq i64 %326, %327, !dbg !3620
  br i1 %eq743, label %and.rhs744, label %and.phi746, !dbg !3620

and.rhs744:                                       ; preds = %if.exit742
  %328 = load i64, ptr %dc447, align 8, !dbg !3622
  %lt745 = icmp slt i64 %328, 10, !dbg !3622
  br label %and.phi746, !dbg !3622

and.phi746:                                       ; preds = %and.rhs744, %if.exit742
  %val747 = phi i1 [ false, %if.exit742 ], [ %lt745, %and.rhs744 ], !dbg !3622
  br i1 %val747, label %and.rhs748, label %and.phi754, !dbg !3622

and.rhs748:                                       ; preds = %and.phi746
  br i1 false, label %or.phi752, label %or.rhs749, !dbg !3623

or.rhs749:                                        ; preds = %and.rhs748
  %329 = load i32, ptr %x429, align 4, !dbg !3624
  %zext750 = zext i32 %329 to i64, !dbg !3624
  %lshr = lshr i64 %zext750, 24, !dbg !3625
  %330 = freeze i64 %lshr, !dbg !3625
  %eq751 = icmp eq i64 0, %330, !dbg !3625
  br label %or.phi752, !dbg !3625

or.phi752:                                        ; preds = %or.rhs749, %and.rhs748
  %val753 = phi i1 [ true, %and.rhs748 ], [ %eq751, %or.rhs749 ], !dbg !3625
  br label %and.phi754, !dbg !3625

and.phi754:                                       ; preds = %or.phi752, %and.phi746
  %val755 = phi i1 [ false, %and.phi746 ], [ %val753, %or.phi752 ], !dbg !3625
  br i1 %val755, label %if.then756, label %if.exit760, !dbg !3625

if.then756:                                       ; preds = %and.phi754
  %331 = load i32, ptr %sign422, align 4, !dbg !3626
  %sifp757 = sitofp i32 %331 to double, !dbg !3626
  %332 = load i32, ptr %x429, align 4, !dbg !3627
  %uifp758 = uitofp i32 %332 to double, !dbg !3627
  %fmul759 = fmul double %sifp757, %uifp758, !dbg !3626
  store double %fmul759, ptr %blockret423, align 8, !dbg !3626
  br label %expr_block.exit1947, !dbg !3626

if.exit760:                                       ; preds = %and.phi754
  %333 = load i64, ptr %lrp, align 8, !dbg !3628
  %gt761 = icmp sgt i64 %333, 74, !dbg !3628
  br i1 %gt761, label %if.then762, label %if.exit763, !dbg !3628

if.then762:                                       ; preds = %if.exit760
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3629
  br label %err_retblock, !dbg !3629

if.exit763:                                       ; preds = %if.exit760
  %334 = load i64, ptr %lrp, align 8, !dbg !3630
  %lt764 = icmp slt i64 %334, -255, !dbg !3630
  br i1 %lt764, label %if.then765, label %if.exit766, !dbg !3630

if.then765:                                       ; preds = %if.exit763
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$FLOAT_OUT_OF_RANGE" to i64), ptr %reterr, align 8, !dbg !3631
  br label %err_retblock, !dbg !3631

if.exit766:                                       ; preds = %if.exit763
  %335 = load i32, ptr %j, align 4, !dbg !3632
  %i2b767 = icmp ne i32 %335, 0, !dbg !3632
  br i1 %i2b767, label %if.then768, label %if.exit800, !dbg !3632

if.then768:                                       ; preds = %if.exit766
  br label %loop.cond769, !dbg !3633

loop.cond769:                                     ; preds = %checkok794, %if.then768
  %336 = load i32, ptr %j, align 4, !dbg !3635
  %lt770 = icmp slt i32 %336, 9, !dbg !3635
  br i1 %lt770, label %loop.body771, label %loop.exit798, !dbg !3635

loop.body771:                                     ; preds = %loop.cond769
  %337 = load i32, ptr %k, align 4, !dbg !3637
  %sext772 = sext i32 %337 to i64, !dbg !3637
  %lt773 = icmp slt i64 %sext772, 0, !dbg !3637
  %338 = call i1 @llvm.expect.i1(i1 %lt773, i1 false), !dbg !3637
  br i1 %338, label %panic774, label %checkok782, !dbg !3637

checkok782:                                       ; preds = %loop.body771
  %ge783 = icmp sge i64 %sext772, 128, !dbg !3637
  %339 = call i1 @llvm.expect.i1(i1 %ge783, i1 false), !dbg !3637
  br i1 %339, label %panic784, label %checkok794, !dbg !3637

checkok794:                                       ; preds = %checkok782
  %ptroffset795 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext772, !dbg !3637
  %340 = load i32, ptr %ptroffset795, align 4, !dbg !3637
  %mul796 = mul i32 %340, 10, !dbg !3638
  store i32 %mul796, ptr %ptroffset795, align 4, !dbg !3638
  %341 = load i32, ptr %j, align 4, !dbg !3639
  %add797 = add i32 %341, 1, !dbg !3639
  store i32 %add797, ptr %j, align 4, !dbg !3639
  br label %loop.cond769, !dbg !3639

loop.exit798:                                     ; preds = %loop.cond769
  %342 = load i32, ptr %k, align 4, !dbg !3640
  %add799 = add i32 %342, 1, !dbg !3640
  store i32 %add799, ptr %k, align 4, !dbg !3640
  store i32 0, ptr %j, align 4, !dbg !3641
  br label %if.exit800, !dbg !3641

if.exit800:                                       ; preds = %loop.exit798, %if.exit766
  call void @llvm.dbg.declare(metadata ptr %a, metadata !3642, metadata !DIExpression()), !dbg !3643
  store i32 0, ptr %a, align 4, !dbg !3643
  call void @llvm.dbg.declare(metadata ptr %z, metadata !3644, metadata !DIExpression()), !dbg !3645
  %343 = load i32, ptr %k, align 4, !dbg !3646
  store i32 %343, ptr %z, align 4, !dbg !3646
  call void @llvm.dbg.declare(metadata ptr %e2801, metadata !3647, metadata !DIExpression()), !dbg !3648
  store i32 0, ptr %e2801, align 4, !dbg !3648
  call void @llvm.dbg.declare(metadata ptr %rp802, metadata !3649, metadata !DIExpression()), !dbg !3650
  %344 = load i64, ptr %lrp, align 8, !dbg !3651
  store i64 %344, ptr %rp802, align 8, !dbg !3651
  %345 = load i32, ptr %lnz, align 4, !dbg !3652
  %lt803 = icmp slt i32 %345, 9, !dbg !3652
  br i1 %lt803, label %and.rhs804, label %and.phi806, !dbg !3652

and.rhs804:                                       ; preds = %if.exit800
  %346 = load i32, ptr %lnz, align 4, !dbg !3653
  %sext805 = sext i32 %346 to i64, !dbg !3653
  %347 = load i64, ptr %rp802, align 8, !dbg !3654
  %le = icmp sle i64 %sext805, %347, !dbg !3653
  br label %and.phi806, !dbg !3653

and.phi806:                                       ; preds = %and.rhs804, %if.exit800
  %val807 = phi i1 [ false, %if.exit800 ], [ %le, %and.rhs804 ], !dbg !3653
  br i1 %val807, label %and.rhs808, label %and.phi810, !dbg !3653

and.rhs808:                                       ; preds = %and.phi806
  %348 = load i64, ptr %rp802, align 8, !dbg !3655
  %lt809 = icmp slt i64 %348, 18, !dbg !3655
  br label %and.phi810, !dbg !3655

and.phi810:                                       ; preds = %and.rhs808, %and.phi806
  %val811 = phi i1 [ false, %and.phi806 ], [ %lt809, %and.rhs808 ], !dbg !3655
  br i1 %val811, label %if.then812, label %if.exit906, !dbg !3655

if.then812:                                       ; preds = %and.phi810
  %349 = load i64, ptr %rp802, align 8, !dbg !3656
  %eq813 = icmp eq i64 %349, 9, !dbg !3656
  br i1 %eq813, label %if.then814, label %if.exit818, !dbg !3656

if.then814:                                       ; preds = %if.then812
  %350 = load i32, ptr %sign422, align 4, !dbg !3658
  %sifp815 = sitofp i32 %350 to double, !dbg !3658
  %351 = load i32, ptr %x429, align 4, !dbg !3659
  %uifp816 = uitofp i32 %351 to double, !dbg !3659
  %fmul817 = fmul double %sifp815, %uifp816, !dbg !3658
  store double %fmul817, ptr %blockret423, align 8, !dbg !3658
  br label %expr_block.exit1947, !dbg !3658

if.exit818:                                       ; preds = %if.then812
  %352 = load i64, ptr %rp802, align 8, !dbg !3660
  %lt819 = icmp slt i64 %352, 9, !dbg !3660
  br i1 %lt819, label %if.then820, label %if.exit855, !dbg !3660

if.then820:                                       ; preds = %if.exit818
  %353 = load i32, ptr %sign422, align 4, !dbg !3661
  %sifp821 = sitofp i32 %353 to double, !dbg !3661
  %354 = load i32, ptr %x429, align 4, !dbg !3662
  %uifp822 = uitofp i32 %354 to double, !dbg !3662
  %fmul823 = fmul double %sifp821, %uifp822, !dbg !3661
  %355 = load i64, ptr %rp802, align 8, !dbg !3663
  %sub824 = sub i64 8, %355, !dbg !3664
  %lt825 = icmp slt i64 %sub824, 0, !dbg !3664
  %356 = call i1 @llvm.expect.i1(i1 %lt825, i1 false), !dbg !3664
  br i1 %356, label %panic826, label %checkok834, !dbg !3664

checkok834:                                       ; preds = %if.then820
  %ge835 = icmp sge i64 %sub824, 8, !dbg !3664
  %357 = call i1 @llvm.expect.i1(i1 %ge835, i1 false), !dbg !3664
  br i1 %357, label %panic836, label %checkok846, !dbg !3664

checkok846:                                       ; preds = %checkok834
  %ptroffset847 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub824, !dbg !3664
  %358 = load i32, ptr %ptroffset847, align 4, !dbg !3664
  %sifp848 = sitofp i32 %358 to double, !dbg !3664
  %zero = fcmp ueq double %sifp848, 0.000000e+00, !dbg !3661
  %359 = call i1 @llvm.expect.i1(i1 %zero, i1 false), !dbg !3661
  br i1 %359, label %panic849, label %checkok853, !dbg !3661

checkok853:                                       ; preds = %checkok846
  %fdiv854 = fdiv double %fmul823, %sifp848, !dbg !3661
  store double %fdiv854, ptr %blockret423, align 8, !dbg !3661
  br label %expr_block.exit1947, !dbg !3661

if.exit855:                                       ; preds = %if.exit818
  call void @llvm.dbg.declare(metadata ptr %bitlim, metadata !3665, metadata !DIExpression()), !dbg !3666
  %360 = load i64, ptr %rp802, align 8, !dbg !3667
  %sub856 = sub i64 %360, 9, !dbg !3668
  %trunc857 = trunc i64 %sub856 to i32, !dbg !3668
  %mul858 = mul i32 3, %trunc857, !dbg !3669
  %sub859 = sub i32 24, %mul858, !dbg !3670
  store i32 %sub859, ptr %bitlim, align 4, !dbg !3670
  %361 = load i32, ptr %bitlim, align 4, !dbg !3671
  %gt860 = icmp sgt i32 %361, 30, !dbg !3671
  br i1 %gt860, label %or.phi873, label %or.rhs861, !dbg !3671

or.rhs861:                                        ; preds = %if.exit855
  %362 = load i32, ptr %x429, align 4, !dbg !3672
  %363 = load i32, ptr %bitlim, align 4, !dbg !3673
  %shift_exceeds = icmp uge i32 %363, 32, !dbg !3674
  %364 = call i1 @llvm.expect.i1(i1 %shift_exceeds, i1 false), !dbg !3674
  br i1 %364, label %panic862, label %checkok870, !dbg !3674

checkok870:                                       ; preds = %or.rhs861
  %lshr871 = lshr i32 %362, %363, !dbg !3674
  %365 = freeze i32 %lshr871, !dbg !3674
  %eq872 = icmp eq i32 0, %365, !dbg !3674
  br label %or.phi873, !dbg !3674

or.phi873:                                        ; preds = %checkok870, %if.exit855
  %val874 = phi i1 [ true, %if.exit855 ], [ %eq872, %checkok870 ], !dbg !3674
  br i1 %val874, label %if.then875, label %if.exit905, !dbg !3674

if.then875:                                       ; preds = %or.phi873
  %366 = load i32, ptr %sign422, align 4, !dbg !3675
  %sifp876 = sitofp i32 %366 to double, !dbg !3675
  %367 = load i32, ptr %x429, align 4, !dbg !3676
  %uifp877 = uitofp i32 %367 to double, !dbg !3676
  %fmul878 = fmul double %sifp876, %uifp877, !dbg !3675
  %368 = load i64, ptr %rp802, align 8, !dbg !3677
  %sub879 = sub i64 %368, 10, !dbg !3677
  %lt880 = icmp slt i64 %sub879, 0, !dbg !3677
  %369 = call i1 @llvm.expect.i1(i1 %lt880, i1 false), !dbg !3677
  br i1 %369, label %panic881, label %checkok889, !dbg !3677

checkok889:                                       ; preds = %if.then875
  %ge890 = icmp sge i64 %sub879, 8, !dbg !3677
  %370 = call i1 @llvm.expect.i1(i1 %ge890, i1 false), !dbg !3677
  br i1 %370, label %panic891, label %checkok901, !dbg !3677

checkok901:                                       ; preds = %checkok889
  %ptroffset902 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub879, !dbg !3677
  %371 = load i32, ptr %ptroffset902, align 4, !dbg !3677
  %sifp903 = sitofp i32 %371 to double, !dbg !3677
  %fmul904 = fmul double %fmul878, %sifp903, !dbg !3675
  store double %fmul904, ptr %blockret423, align 8, !dbg !3675
  br label %expr_block.exit1947, !dbg !3675

if.exit905:                                       ; preds = %or.phi873
  br label %if.exit906, !dbg !3675

if.exit906:                                       ; preds = %if.exit905, %and.phi810
  %372 = load i64, ptr %rp802, align 8, !dbg !3678
  %smod = srem i64 %372, 9, !dbg !3678
  %i2b907 = icmp ne i64 %smod, 0, !dbg !3678
  br i1 %i2b907, label %if.then908, label %if.exit1101, !dbg !3678

if.then908:                                       ; preds = %if.exit906
  call void @llvm.dbg.declare(metadata ptr %rpm9, metadata !3679, metadata !DIExpression()), !dbg !3681
  %373 = load i64, ptr %rp802, align 8, !dbg !3682
  %ge909 = icmp sge i64 %373, 0, !dbg !3682
  br i1 %ge909, label %cond.lhs, label %cond.rhs, !dbg !3682

cond.lhs:                                         ; preds = %if.then908
  %374 = load i64, ptr %rp802, align 8, !dbg !3683
  %smod910 = srem i64 %374, 9, !dbg !3683
  br label %cond.phi, !dbg !3683

cond.rhs:                                         ; preds = %if.then908
  %375 = load i64, ptr %rp802, align 8, !dbg !3684
  %smod911 = srem i64 %375, 9, !dbg !3684
  %add912 = add i64 %smod911, 9, !dbg !3684
  br label %cond.phi, !dbg !3684

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val913 = phi i64 [ %smod910, %cond.lhs ], [ %add912, %cond.rhs ], !dbg !3684
  store i64 %val913, ptr %rpm9, align 8, !dbg !3684
  call void @llvm.dbg.declare(metadata ptr %p10, metadata !3685, metadata !DIExpression()), !dbg !3686
  %376 = load i64, ptr %rpm9, align 8, !dbg !3687
  %sub914 = sub i64 8, %376, !dbg !3688
  %lt915 = icmp slt i64 %sub914, 0, !dbg !3688
  %377 = call i1 @llvm.expect.i1(i1 %lt915, i1 false), !dbg !3688
  br i1 %377, label %panic916, label %checkok924, !dbg !3688

checkok924:                                       ; preds = %cond.phi
  %ge925 = icmp sge i64 %sub914, 8, !dbg !3688
  %378 = call i1 @llvm.expect.i1(i1 %ge925, i1 false), !dbg !3688
  br i1 %378, label %panic926, label %checkok936, !dbg !3688

checkok936:                                       ; preds = %checkok924
  %ptroffset937 = getelementptr inbounds [4 x i8], ptr @to_float.P10S, i64 %sub914, !dbg !3688
  %379 = load i32, ptr %ptroffset937, align 4, !dbg !3688
  store i32 %379, ptr %p10, align 4, !dbg !3688
  call void @llvm.dbg.declare(metadata ptr %carry, metadata !3689, metadata !DIExpression()), !dbg !3690
  store i32 0, ptr %carry, align 4, !dbg !3691
  %380 = load i32, ptr %a, align 4, !dbg !3692
  store i32 %380, ptr %k, align 4, !dbg !3692
  br label %loop.cond938, !dbg !3692

loop.cond938:                                     ; preds = %if.exit1068, %checkok936
  %381 = load i32, ptr %k, align 4, !dbg !3694
  %382 = load i32, ptr %z, align 4, !dbg !3695
  %neq939 = icmp ne i32 %381, %382, !dbg !3694
  br i1 %neq939, label %loop.body940, label %loop.exit1070, !dbg !3694

loop.body940:                                     ; preds = %loop.cond938
  call void @llvm.dbg.declare(metadata ptr %tmp, metadata !3696, metadata !DIExpression()), !dbg !3698
  %383 = load i32, ptr %k, align 4, !dbg !3699
  %sext941 = sext i32 %383 to i64, !dbg !3699
  %lt942 = icmp slt i64 %sext941, 0, !dbg !3699
  %384 = call i1 @llvm.expect.i1(i1 %lt942, i1 false), !dbg !3699
  br i1 %384, label %panic943, label %checkok951, !dbg !3699

checkok951:                                       ; preds = %loop.body940
  %ge952 = icmp sge i64 %sext941, 128, !dbg !3699
  %385 = call i1 @llvm.expect.i1(i1 %ge952, i1 false), !dbg !3699
  br i1 %385, label %panic953, label %checkok963, !dbg !3699

checkok963:                                       ; preds = %checkok951
  %ptroffset964 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext941, !dbg !3699
  %386 = load i32, ptr %ptroffset964, align 4, !dbg !3699
  %387 = load i32, ptr %p10, align 4, !dbg !3700
  %zero965 = icmp eq i32 %387, 0, !dbg !3701
  %388 = call i1 @llvm.expect.i1(i1 %zero965, i1 false), !dbg !3701
  br i1 %388, label %panic966, label %checkok970, !dbg !3701

checkok970:                                       ; preds = %checkok963
  %smod971 = srem i32 %386, %387, !dbg !3701
  store i32 %smod971, ptr %tmp, align 4, !dbg !3701
  %389 = load i32, ptr %k, align 4, !dbg !3702
  %sext972 = sext i32 %389 to i64, !dbg !3702
  %lt973 = icmp slt i64 %sext972, 0, !dbg !3702
  %390 = call i1 @llvm.expect.i1(i1 %lt973, i1 false), !dbg !3702
  br i1 %390, label %panic974, label %checkok982, !dbg !3702

checkok982:                                       ; preds = %checkok970
  %ge983 = icmp sge i64 %sext972, 128, !dbg !3702
  %391 = call i1 @llvm.expect.i1(i1 %ge983, i1 false), !dbg !3702
  br i1 %391, label %panic984, label %checkok994, !dbg !3702

checkok994:                                       ; preds = %checkok982
  %ptroffset995 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext972, !dbg !3702
  %392 = load i32, ptr %k, align 4, !dbg !3703
  %sext996 = sext i32 %392 to i64, !dbg !3703
  %lt997 = icmp slt i64 %sext996, 0, !dbg !3703
  %393 = call i1 @llvm.expect.i1(i1 %lt997, i1 false), !dbg !3703
  br i1 %393, label %panic998, label %checkok1006, !dbg !3703

checkok1006:                                      ; preds = %checkok994
  %ge1007 = icmp sge i64 %sext996, 128, !dbg !3703
  %394 = call i1 @llvm.expect.i1(i1 %ge1007, i1 false), !dbg !3703
  br i1 %394, label %panic1008, label %checkok1018, !dbg !3703

checkok1018:                                      ; preds = %checkok1006
  %ptroffset1019 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext996, !dbg !3703
  %395 = load i32, ptr %ptroffset1019, align 4, !dbg !3703
  %396 = load i32, ptr %p10, align 4, !dbg !3704
  %zero1020 = icmp eq i32 %396, 0, !dbg !3705
  %397 = call i1 @llvm.expect.i1(i1 %zero1020, i1 false), !dbg !3705
  br i1 %397, label %panic1021, label %checkok1025, !dbg !3705

checkok1025:                                      ; preds = %checkok1018
  %sdiv = sdiv i32 %395, %396, !dbg !3705
  %398 = load i32, ptr %carry, align 4, !dbg !3706
  %add1026 = add i32 %sdiv, %398, !dbg !3705
  store i32 %add1026, ptr %ptroffset995, align 4, !dbg !3705
  %399 = load i32, ptr %p10, align 4, !dbg !3707
  %zero1027 = icmp eq i32 %399, 0, !dbg !3708
  %400 = call i1 @llvm.expect.i1(i1 %zero1027, i1 false), !dbg !3708
  br i1 %400, label %panic1028, label %checkok1032, !dbg !3708

checkok1032:                                      ; preds = %checkok1025
  %sdiv1033 = sdiv i32 1000000000, %399, !dbg !3708
  %401 = load i32, ptr %tmp, align 4, !dbg !3709
  %mul1034 = mul i32 %sdiv1033, %401, !dbg !3708
  store i32 %mul1034, ptr %carry, align 4, !dbg !3708
  %402 = load i32, ptr %k, align 4, !dbg !3710
  %403 = load i32, ptr %a, align 4, !dbg !3711
  %eq1035 = icmp eq i32 %402, %403, !dbg !3710
  br i1 %eq1035, label %and.rhs1036, label %and.phi1062, !dbg !3710

and.rhs1036:                                      ; preds = %checkok1032
  %404 = load i32, ptr %k, align 4, !dbg !3712
  %sext1037 = sext i32 %404 to i64, !dbg !3712
  %lt1038 = icmp slt i64 %sext1037, 0, !dbg !3712
  %405 = call i1 @llvm.expect.i1(i1 %lt1038, i1 false), !dbg !3712
  br i1 %405, label %panic1039, label %checkok1047, !dbg !3712

checkok1047:                                      ; preds = %and.rhs1036
  %ge1048 = icmp sge i64 %sext1037, 128, !dbg !3712
  %406 = call i1 @llvm.expect.i1(i1 %ge1048, i1 false), !dbg !3712
  br i1 %406, label %panic1049, label %checkok1059, !dbg !3712

checkok1059:                                      ; preds = %checkok1047
  %ptroffset1060 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1037, !dbg !3712
  %407 = load i32, ptr %ptroffset1060, align 4, !dbg !3712
  %i2nb1061 = icmp eq i32 %407, 0, !dbg !3712
  br label %and.phi1062, !dbg !3712

and.phi1062:                                      ; preds = %checkok1059, %checkok1032
  %val1063 = phi i1 [ false, %checkok1032 ], [ %i2nb1061, %checkok1059 ], !dbg !3712
  br i1 %val1063, label %if.then1064, label %if.exit1068, !dbg !3712

if.then1064:                                      ; preds = %and.phi1062
  %408 = load i32, ptr %a, align 4, !dbg !3713
  %add1065 = add i32 %408, 1, !dbg !3713
  %and1066 = and i32 %add1065, 127, !dbg !3713
  store i32 %and1066, ptr %a, align 4, !dbg !3713
  %409 = load i64, ptr %rp802, align 8, !dbg !3715
  %sub1067 = sub i64 %409, 9, !dbg !3715
  store i64 %sub1067, ptr %rp802, align 8, !dbg !3715
  br label %if.exit1068, !dbg !3715

if.exit1068:                                      ; preds = %if.then1064, %and.phi1062
  %410 = load i32, ptr %k, align 4, !dbg !3716
  %add1069 = add i32 %410, 1, !dbg !3716
  store i32 %add1069, ptr %k, align 4, !dbg !3716
  br label %loop.cond938, !dbg !3716

loop.exit1070:                                    ; preds = %loop.cond938
  %411 = load i32, ptr %carry, align 4, !dbg !3717
  %i2b1071 = icmp ne i32 %411, 0, !dbg !3717
  br i1 %i2b1071, label %if.then1072, label %if.exit1098, !dbg !3717

if.then1072:                                      ; preds = %loop.exit1070
  %412 = load i32, ptr %z, align 4, !dbg !3718
  %add1073 = add i32 %412, 1, !dbg !3718
  store i32 %add1073, ptr %z, align 4, !dbg !3718
  %sext1074 = sext i32 %412 to i64, !dbg !3718
  %lt1075 = icmp slt i64 %sext1074, 0, !dbg !3718
  %413 = call i1 @llvm.expect.i1(i1 %lt1075, i1 false), !dbg !3718
  br i1 %413, label %panic1076, label %checkok1084, !dbg !3718

checkok1084:                                      ; preds = %if.then1072
  %ge1085 = icmp sge i64 %sext1074, 128, !dbg !3718
  %414 = call i1 @llvm.expect.i1(i1 %ge1085, i1 false), !dbg !3718
  br i1 %414, label %panic1086, label %checkok1096, !dbg !3718

checkok1096:                                      ; preds = %checkok1084
  %ptroffset1097 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1074, !dbg !3718
  %415 = load i32, ptr %carry, align 4, !dbg !3719
  store i32 %415, ptr %ptroffset1097, align 4, !dbg !3719
  br label %if.exit1098, !dbg !3719

if.exit1098:                                      ; preds = %checkok1096, %loop.exit1070
  %416 = load i64, ptr %rp802, align 8, !dbg !3720
  %417 = load i64, ptr %rpm9, align 8, !dbg !3721
  %sub1099 = sub i64 9, %417, !dbg !3722
  %add1100 = add i64 %416, %sub1099, !dbg !3720
  store i64 %add1100, ptr %rp802, align 8, !dbg !3720
  br label %if.exit1101, !dbg !3720

if.exit1101:                                      ; preds = %if.exit1098, %if.exit906
  br label %loop.cond1102, !dbg !3723

loop.cond1102:                                    ; preds = %if.exit1355, %if.exit1101
  %418 = load i64, ptr %rp802, align 8, !dbg !3724
  %lt1103 = icmp slt i64 %418, 18, !dbg !3724
  br i1 %lt1103, label %or.phi1134, label %or.rhs1104, !dbg !3724

or.rhs1104:                                       ; preds = %loop.cond1102
  %419 = load i64, ptr %rp802, align 8, !dbg !3726
  %eq1105 = icmp eq i64 %419, 18, !dbg !3726
  br i1 %eq1105, label %and.rhs1106, label %and.phi1132, !dbg !3726

and.rhs1106:                                      ; preds = %or.rhs1104
  %420 = load i32, ptr %a, align 4, !dbg !3727
  %sext1107 = sext i32 %420 to i64, !dbg !3727
  %lt1108 = icmp slt i64 %sext1107, 0, !dbg !3727
  %421 = call i1 @llvm.expect.i1(i1 %lt1108, i1 false), !dbg !3727
  br i1 %421, label %panic1109, label %checkok1117, !dbg !3727

checkok1117:                                      ; preds = %and.rhs1106
  %ge1118 = icmp sge i64 %sext1107, 128, !dbg !3727
  %422 = call i1 @llvm.expect.i1(i1 %ge1118, i1 false), !dbg !3727
  br i1 %422, label %panic1119, label %checkok1129, !dbg !3727

checkok1129:                                      ; preds = %checkok1117
  %ptroffset1130 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1107, !dbg !3727
  %423 = load i32, ptr %ptroffset1130, align 4, !dbg !3727
  %lt1131 = icmp ult i32 %423, 9007199, !dbg !3728
  br label %and.phi1132, !dbg !3728

and.phi1132:                                      ; preds = %checkok1129, %or.rhs1104
  %val1133 = phi i1 [ false, %or.rhs1104 ], [ %lt1131, %checkok1129 ], !dbg !3728
  br label %or.phi1134, !dbg !3728

or.phi1134:                                       ; preds = %and.phi1132, %loop.cond1102
  %val1135 = phi i1 [ true, %loop.cond1102 ], [ %val1133, %and.phi1132 ], !dbg !3728
  br i1 %val1135, label %loop.body1136, label %loop.exit1356, !dbg !3728

loop.body1136:                                    ; preds = %or.phi1134
  call void @llvm.dbg.declare(metadata ptr %carry1137, metadata !3729, metadata !DIExpression()), !dbg !3731
  store i32 0, ptr %carry1137, align 4, !dbg !3732
  %424 = load i32, ptr %e2801, align 4, !dbg !3733
  %sub1138 = sub i32 %424, 29, !dbg !3733
  store i32 %sub1138, ptr %e2801, align 4, !dbg !3733
  %425 = load i32, ptr %z, align 4, !dbg !3734
  %sub1139 = sub i32 %425, 1, !dbg !3734
  %and1140 = and i32 %sub1139, 127, !dbg !3734
  store i32 %and1140, ptr %k, align 4, !dbg !3734
  br label %loop.body1141, !dbg !3734

loop.body1141:                                    ; preds = %if.exit1266, %loop.body1136
  call void @llvm.dbg.declare(metadata ptr %tmp1142, metadata !3736, metadata !DIExpression()), !dbg !3738
  %426 = load i32, ptr %k, align 4, !dbg !3739
  %sext1143 = sext i32 %426 to i64, !dbg !3739
  %lt1144 = icmp slt i64 %sext1143, 0, !dbg !3739
  %427 = call i1 @llvm.expect.i1(i1 %lt1144, i1 false), !dbg !3739
  br i1 %427, label %panic1145, label %checkok1153, !dbg !3739

checkok1153:                                      ; preds = %loop.body1141
  %ge1154 = icmp sge i64 %sext1143, 128, !dbg !3739
  %428 = call i1 @llvm.expect.i1(i1 %ge1154, i1 false), !dbg !3739
  br i1 %428, label %panic1155, label %checkok1165, !dbg !3739

checkok1165:                                      ; preds = %checkok1153
  %ptroffset1166 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1143, !dbg !3739
  %429 = load i32, ptr %ptroffset1166, align 4, !dbg !3739
  %zext1167 = zext i32 %429 to i64, !dbg !3739
  %shl = shl i64 %zext1167, 29, !dbg !3740
  %430 = freeze i64 %shl, !dbg !3740
  %431 = load i32, ptr %carry1137, align 4, !dbg !3741
  %zext1168 = zext i32 %431 to i64, !dbg !3741
  %add1169 = add i64 %430, %zext1168, !dbg !3740
  store i64 %add1169, ptr %tmp1142, align 8, !dbg !3740
  %432 = load i64, ptr %tmp1142, align 8, !dbg !3742
  %lt1170 = icmp ult i64 1000000000, %432, !dbg !3742
  br i1 %lt1170, label %if.then1171, label %if.else1200, !dbg !3742

if.then1171:                                      ; preds = %checkok1165
  %433 = load i64, ptr %tmp1142, align 8, !dbg !3743
  %sdiv1172 = sdiv i64 %433, 1000000000, !dbg !3745
  %trunc1173 = trunc i64 %sdiv1172 to i32, !dbg !3745
  store i32 %trunc1173, ptr %carry1137, align 4, !dbg !3745
  %434 = load i32, ptr %k, align 4, !dbg !3746
  %sext1174 = sext i32 %434 to i64, !dbg !3746
  %lt1175 = icmp slt i64 %sext1174, 0, !dbg !3746
  %435 = call i1 @llvm.expect.i1(i1 %lt1175, i1 false), !dbg !3746
  br i1 %435, label %panic1176, label %checkok1184, !dbg !3746

checkok1184:                                      ; preds = %if.then1171
  %ge1185 = icmp sge i64 %sext1174, 128, !dbg !3746
  %436 = call i1 @llvm.expect.i1(i1 %ge1185, i1 false), !dbg !3746
  br i1 %436, label %panic1186, label %checkok1196, !dbg !3746

checkok1196:                                      ; preds = %checkok1184
  %ptroffset1197 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1174, !dbg !3746
  %437 = load i64, ptr %tmp1142, align 8, !dbg !3747
  %smod1198 = srem i64 %437, 1000000000, !dbg !3748
  %trunc1199 = trunc i64 %smod1198 to i32, !dbg !3748
  store i32 %trunc1199, ptr %ptroffset1197, align 4, !dbg !3748
  br label %if.exit1226, !dbg !3748

if.else1200:                                      ; preds = %checkok1165
  store i32 0, ptr %carry1137, align 4, !dbg !3749
  %438 = load i32, ptr %k, align 4, !dbg !3751
  %sext1201 = sext i32 %438 to i64, !dbg !3751
  %lt1202 = icmp slt i64 %sext1201, 0, !dbg !3751
  %439 = call i1 @llvm.expect.i1(i1 %lt1202, i1 false), !dbg !3751
  br i1 %439, label %panic1203, label %checkok1211, !dbg !3751

checkok1211:                                      ; preds = %if.else1200
  %ge1212 = icmp sge i64 %sext1201, 128, !dbg !3751
  %440 = call i1 @llvm.expect.i1(i1 %ge1212, i1 false), !dbg !3751
  br i1 %440, label %panic1213, label %checkok1223, !dbg !3751

checkok1223:                                      ; preds = %checkok1211
  %ptroffset1224 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1201, !dbg !3751
  %441 = load i64, ptr %tmp1142, align 8, !dbg !3752
  %trunc1225 = trunc i64 %441 to i32, !dbg !3752
  store i32 %trunc1225, ptr %ptroffset1224, align 4, !dbg !3752
  br label %if.exit1226, !dbg !3752

if.exit1226:                                      ; preds = %checkok1223, %checkok1196
  %442 = load i32, ptr %k, align 4, !dbg !3753
  %443 = load i32, ptr %z, align 4, !dbg !3754
  %sub1227 = sub i32 %443, 1, !dbg !3754
  %and1228 = and i32 %sub1227, 127, !dbg !3754
  %eq1229 = icmp eq i32 %442, %and1228, !dbg !3753
  br i1 %eq1229, label %and.rhs1230, label %and.phi1232, !dbg !3753

and.rhs1230:                                      ; preds = %if.exit1226
  %444 = load i32, ptr %k, align 4, !dbg !3755
  %445 = load i32, ptr %a, align 4, !dbg !3756
  %neq1231 = icmp ne i32 %444, %445, !dbg !3755
  br label %and.phi1232, !dbg !3755

and.phi1232:                                      ; preds = %and.rhs1230, %if.exit1226
  %val1233 = phi i1 [ false, %if.exit1226 ], [ %neq1231, %and.rhs1230 ], !dbg !3755
  br i1 %val1233, label %and.rhs1234, label %and.phi1260, !dbg !3755

and.rhs1234:                                      ; preds = %and.phi1232
  %446 = load i32, ptr %k, align 4, !dbg !3757
  %sext1235 = sext i32 %446 to i64, !dbg !3757
  %lt1236 = icmp slt i64 %sext1235, 0, !dbg !3757
  %447 = call i1 @llvm.expect.i1(i1 %lt1236, i1 false), !dbg !3757
  br i1 %447, label %panic1237, label %checkok1245, !dbg !3757

checkok1245:                                      ; preds = %and.rhs1234
  %ge1246 = icmp sge i64 %sext1235, 128, !dbg !3757
  %448 = call i1 @llvm.expect.i1(i1 %ge1246, i1 false), !dbg !3757
  br i1 %448, label %panic1247, label %checkok1257, !dbg !3757

checkok1257:                                      ; preds = %checkok1245
  %ptroffset1258 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1235, !dbg !3757
  %449 = load i32, ptr %ptroffset1258, align 4, !dbg !3757
  %i2nb1259 = icmp eq i32 %449, 0, !dbg !3757
  br label %and.phi1260, !dbg !3757

and.phi1260:                                      ; preds = %checkok1257, %and.phi1232
  %val1261 = phi i1 [ false, %and.phi1232 ], [ %i2nb1259, %checkok1257 ], !dbg !3757
  br i1 %val1261, label %if.then1262, label %if.exit1263, !dbg !3757

if.then1262:                                      ; preds = %and.phi1260
  %450 = load i32, ptr %k, align 4, !dbg !3758
  store i32 %450, ptr %z, align 4, !dbg !3758
  br label %if.exit1263, !dbg !3758

if.exit1263:                                      ; preds = %if.then1262, %and.phi1260
  %451 = load i32, ptr %k, align 4, !dbg !3759
  %452 = load i32, ptr %a, align 4, !dbg !3760
  %eq1264 = icmp eq i32 %451, %452, !dbg !3759
  br i1 %eq1264, label %if.then1265, label %if.exit1266, !dbg !3759

if.then1265:                                      ; preds = %if.exit1263
  br label %loop.exit1269, !dbg !3761

if.exit1266:                                      ; preds = %if.exit1263
  %453 = load i32, ptr %k, align 4, !dbg !3762
  %sub1267 = sub i32 %453, 1, !dbg !3762
  %and1268 = and i32 %sub1267, 127, !dbg !3762
  store i32 %and1268, ptr %k, align 4, !dbg !3762
  br label %loop.body1141, !dbg !3762

loop.exit1269:                                    ; preds = %if.then1265
  %454 = load i32, ptr %carry1137, align 4, !dbg !3763
  %i2b1270 = icmp ne i32 %454, 0, !dbg !3763
  br i1 %i2b1270, label %if.then1271, label %if.exit1355, !dbg !3763

if.then1271:                                      ; preds = %loop.exit1269
  %455 = load i64, ptr %rp802, align 8, !dbg !3764
  %add1272 = add i64 %455, 9, !dbg !3764
  store i64 %add1272, ptr %rp802, align 8, !dbg !3764
  %456 = load i32, ptr %a, align 4, !dbg !3766
  %sub1273 = sub i32 %456, 1, !dbg !3766
  %and1274 = and i32 %sub1273, 127, !dbg !3766
  store i32 %and1274, ptr %a, align 4, !dbg !3766
  %457 = load i32, ptr %a, align 4, !dbg !3767
  %458 = load i32, ptr %z, align 4, !dbg !3768
  %eq1275 = icmp eq i32 %457, %458, !dbg !3767
  br i1 %eq1275, label %if.then1276, label %if.exit1330, !dbg !3767

if.then1276:                                      ; preds = %if.then1271
  %459 = load i32, ptr %z, align 4, !dbg !3769
  %sub1277 = sub i32 %459, 1, !dbg !3769
  %and1278 = and i32 %sub1277, 127, !dbg !3769
  store i32 %and1278, ptr %z, align 4, !dbg !3769
  %460 = load i32, ptr %z, align 4, !dbg !3771
  %sub1279 = sub i32 %460, 1, !dbg !3771
  %and1280 = and i32 %sub1279, 127, !dbg !3771
  %sext1281 = sext i32 %and1280 to i64, !dbg !3771
  %lt1282 = icmp slt i64 %sext1281, 0, !dbg !3771
  %461 = call i1 @llvm.expect.i1(i1 %lt1282, i1 false), !dbg !3771
  br i1 %461, label %panic1283, label %checkok1291, !dbg !3771

checkok1291:                                      ; preds = %if.then1276
  %ge1292 = icmp sge i64 %sext1281, 128, !dbg !3771
  %462 = call i1 @llvm.expect.i1(i1 %ge1292, i1 false), !dbg !3771
  br i1 %462, label %panic1293, label %checkok1303, !dbg !3771

checkok1303:                                      ; preds = %checkok1291
  %ptroffset1304 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1281, !dbg !3771
  %463 = load i32, ptr %ptroffset1304, align 4, !dbg !3771
  %464 = load i32, ptr %z, align 4, !dbg !3772
  %sext1305 = sext i32 %464 to i64, !dbg !3772
  %lt1306 = icmp slt i64 %sext1305, 0, !dbg !3772
  %465 = call i1 @llvm.expect.i1(i1 %lt1306, i1 false), !dbg !3772
  br i1 %465, label %panic1307, label %checkok1315, !dbg !3772

checkok1315:                                      ; preds = %checkok1303
  %ge1316 = icmp sge i64 %sext1305, 128, !dbg !3772
  %466 = call i1 @llvm.expect.i1(i1 %ge1316, i1 false), !dbg !3772
  br i1 %466, label %panic1317, label %checkok1327, !dbg !3772

checkok1327:                                      ; preds = %checkok1315
  %ptroffset1328 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1305, !dbg !3772
  %467 = load i32, ptr %ptroffset1328, align 4, !dbg !3772
  %or1329 = or i32 %463, %467, !dbg !3773
  store i32 %or1329, ptr %ptroffset1304, align 4, !dbg !3773
  br label %if.exit1330, !dbg !3773

if.exit1330:                                      ; preds = %checkok1327, %if.then1271
  %468 = load i32, ptr %a, align 4, !dbg !3774
  %sext1331 = sext i32 %468 to i64, !dbg !3774
  %lt1332 = icmp slt i64 %sext1331, 0, !dbg !3774
  %469 = call i1 @llvm.expect.i1(i1 %lt1332, i1 false), !dbg !3774
  br i1 %469, label %panic1333, label %checkok1341, !dbg !3774

checkok1341:                                      ; preds = %if.exit1330
  %ge1342 = icmp sge i64 %sext1331, 128, !dbg !3774
  %470 = call i1 @llvm.expect.i1(i1 %ge1342, i1 false), !dbg !3774
  br i1 %470, label %panic1343, label %checkok1353, !dbg !3774

checkok1353:                                      ; preds = %checkok1341
  %ptroffset1354 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1331, !dbg !3774
  %471 = load i32, ptr %carry1137, align 4, !dbg !3775
  store i32 %471, ptr %ptroffset1354, align 4, !dbg !3775
  br label %if.exit1355, !dbg !3775

if.exit1355:                                      ; preds = %checkok1353, %loop.exit1269
  br label %loop.cond1102, !dbg !3775

loop.exit1356:                                    ; preds = %or.phi1134
  br label %loop.body1357, !dbg !3776

loop.body1357:                                    ; preds = %if.exit1715, %loop.exit1356
  call void @llvm.dbg.declare(metadata ptr %carry1358, metadata !3777, metadata !DIExpression()), !dbg !3780
  store i32 0, ptr %carry1358, align 4, !dbg !3781
  call void @llvm.dbg.declare(metadata ptr %sh, metadata !3782, metadata !DIExpression()), !dbg !3783
  store i32 1, ptr %sh, align 4, !dbg !3784
  call void @llvm.dbg.declare(metadata ptr %i, metadata !3785, metadata !DIExpression()), !dbg !3786
  store i32 0, ptr %i, align 4, !dbg !3786
  store i32 0, ptr %i, align 4, !dbg !3787
  br label %loop.cond1359, !dbg !3787

loop.cond1359:                                    ; preds = %if.exit1471, %loop.body1357
  %472 = load i32, ptr %i, align 4, !dbg !3789
  %lt1360 = icmp slt i32 %472, 2, !dbg !3789
  br i1 %lt1360, label %loop.body1361, label %loop.exit1473, !dbg !3789

loop.body1361:                                    ; preds = %loop.cond1359
  %473 = load i32, ptr %a, align 4, !dbg !3790
  %474 = load i32, ptr %i, align 4, !dbg !3792
  %add1362 = add i32 %473, %474, !dbg !3790
  %and1363 = and i32 %add1362, 127, !dbg !3790
  store i32 %and1363, ptr %k, align 4, !dbg !3790
  %475 = load i32, ptr %k, align 4, !dbg !3793
  %476 = load i32, ptr %z, align 4, !dbg !3794
  %eq1364 = icmp eq i32 %475, %476, !dbg !3793
  br i1 %eq1364, label %or.phi1415, label %or.rhs1365, !dbg !3793

or.rhs1365:                                       ; preds = %loop.body1361
  %477 = load i32, ptr %k, align 4, !dbg !3795
  %sext1366 = sext i32 %477 to i64, !dbg !3795
  %lt1367 = icmp slt i64 %sext1366, 0, !dbg !3795
  %478 = call i1 @llvm.expect.i1(i1 %lt1367, i1 false), !dbg !3795
  br i1 %478, label %panic1368, label %checkok1376, !dbg !3795

checkok1376:                                      ; preds = %or.rhs1365
  %ge1377 = icmp sge i64 %sext1366, 128, !dbg !3795
  %479 = call i1 @llvm.expect.i1(i1 %ge1377, i1 false), !dbg !3795
  br i1 %479, label %panic1378, label %checkok1388, !dbg !3795

checkok1388:                                      ; preds = %checkok1376
  %ptroffset1389 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1366, !dbg !3795
  %480 = load i32, ptr %ptroffset1389, align 4, !dbg !3795
  %481 = load i32, ptr %i, align 4, !dbg !3796
  %sext1390 = sext i32 %481 to i64, !dbg !3796
  %lt1391 = icmp slt i64 %sext1390, 0, !dbg !3796
  %482 = call i1 @llvm.expect.i1(i1 %lt1391, i1 false), !dbg !3796
  br i1 %482, label %panic1392, label %checkok1400, !dbg !3796

checkok1400:                                      ; preds = %checkok1388
  %ge1401 = icmp sge i64 %sext1390, 2, !dbg !3796
  %483 = call i1 @llvm.expect.i1(i1 %ge1401, i1 false), !dbg !3796
  br i1 %483, label %panic1402, label %checkok1412, !dbg !3796

checkok1412:                                      ; preds = %checkok1400
  %ptroffset1413 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1390, !dbg !3796
  %484 = load i32, ptr %ptroffset1413, align 4, !dbg !3796
  %lt1414 = icmp ult i32 %480, %484, !dbg !3797
  br label %or.phi1415, !dbg !3797

or.phi1415:                                       ; preds = %checkok1412, %loop.body1361
  %val1416 = phi i1 [ true, %loop.body1361 ], [ %lt1414, %checkok1412 ], !dbg !3797
  br i1 %val1416, label %if.then1417, label %if.exit1418, !dbg !3797

if.then1417:                                      ; preds = %or.phi1415
  store i32 2, ptr %i, align 4, !dbg !3798
  br label %loop.exit1473, !dbg !3800

if.exit1418:                                      ; preds = %or.phi1415
  %485 = load i32, ptr %a, align 4, !dbg !3801
  %486 = load i32, ptr %i, align 4, !dbg !3802
  %add1419 = add i32 %485, %486, !dbg !3801
  %and1420 = and i32 %add1419, 127, !dbg !3801
  %sext1421 = sext i32 %and1420 to i64, !dbg !3801
  %lt1422 = icmp slt i64 %sext1421, 0, !dbg !3801
  %487 = call i1 @llvm.expect.i1(i1 %lt1422, i1 false), !dbg !3801
  br i1 %487, label %panic1423, label %checkok1431, !dbg !3801

checkok1431:                                      ; preds = %if.exit1418
  %ge1432 = icmp sge i64 %sext1421, 128, !dbg !3801
  %488 = call i1 @llvm.expect.i1(i1 %ge1432, i1 false), !dbg !3801
  br i1 %488, label %panic1433, label %checkok1443, !dbg !3801

checkok1443:                                      ; preds = %checkok1431
  %ptroffset1444 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1421, !dbg !3801
  %489 = load i32, ptr %ptroffset1444, align 4, !dbg !3801
  %490 = load i32, ptr %i, align 4, !dbg !3803
  %sext1445 = sext i32 %490 to i64, !dbg !3803
  %lt1446 = icmp slt i64 %sext1445, 0, !dbg !3803
  %491 = call i1 @llvm.expect.i1(i1 %lt1446, i1 false), !dbg !3803
  br i1 %491, label %panic1447, label %checkok1455, !dbg !3803

checkok1455:                                      ; preds = %checkok1443
  %ge1456 = icmp sge i64 %sext1445, 2, !dbg !3803
  %492 = call i1 @llvm.expect.i1(i1 %ge1456, i1 false), !dbg !3803
  br i1 %492, label %panic1457, label %checkok1467, !dbg !3803

checkok1467:                                      ; preds = %checkok1455
  %ptroffset1468 = getelementptr inbounds [4 x i8], ptr @to_float.TH, i64 %sext1445, !dbg !3803
  %493 = load i32, ptr %ptroffset1468, align 4, !dbg !3803
  %gt1469 = icmp ugt i32 %489, %493, !dbg !3804
  br i1 %gt1469, label %if.then1470, label %if.exit1471, !dbg !3804

if.then1470:                                      ; preds = %checkok1467
  br label %loop.exit1473, !dbg !3805

if.exit1471:                                      ; preds = %checkok1467
  %494 = load i32, ptr %i, align 4, !dbg !3806
  %add1472 = add i32 %494, 1, !dbg !3806
  store i32 %add1472, ptr %i, align 4, !dbg !3806
  br label %loop.cond1359, !dbg !3806

loop.exit1473:                                    ; preds = %if.then1470, %if.then1417, %loop.cond1359
  %495 = load i32, ptr %i, align 4, !dbg !3807
  %eq1474 = icmp eq i32 %495, 2, !dbg !3807
  br i1 %eq1474, label %and.rhs1475, label %and.phi1477, !dbg !3807

and.rhs1475:                                      ; preds = %loop.exit1473
  %496 = load i64, ptr %rp802, align 8, !dbg !3808
  %eq1476 = icmp eq i64 %496, 18, !dbg !3808
  br label %and.phi1477, !dbg !3808

and.phi1477:                                      ; preds = %and.rhs1475, %loop.exit1473
  %val1478 = phi i1 [ false, %loop.exit1473 ], [ %eq1476, %and.rhs1475 ], !dbg !3808
  br i1 %val1478, label %if.then1479, label %if.exit1480, !dbg !3808

if.then1479:                                      ; preds = %and.phi1477
  br label %loop.exit1716, !dbg !3809

if.exit1480:                                      ; preds = %and.phi1477
  %497 = load i64, ptr %rp802, align 8, !dbg !3810
  %gt1481 = icmp sgt i64 %497, 27, !dbg !3810
  br i1 %gt1481, label %if.then1482, label %if.exit1483, !dbg !3810

if.then1482:                                      ; preds = %if.exit1480
  store i32 9, ptr %sh, align 4, !dbg !3811
  br label %if.exit1483, !dbg !3811

if.exit1483:                                      ; preds = %if.then1482, %if.exit1480
  %498 = load i32, ptr %e2801, align 4, !dbg !3812
  %499 = load i32, ptr %sh, align 4, !dbg !3813
  %add1484 = add i32 %498, %499, !dbg !3812
  store i32 %add1484, ptr %e2801, align 4, !dbg !3812
  %500 = load i32, ptr %a, align 4, !dbg !3814
  store i32 %500, ptr %k, align 4, !dbg !3814
  br label %loop.cond1485, !dbg !3814

loop.cond1485:                                    ; preds = %if.exit1650, %if.exit1483
  %501 = load i32, ptr %k, align 4, !dbg !3816
  %502 = load i32, ptr %z, align 4, !dbg !3817
  %neq1486 = icmp ne i32 %501, %502, !dbg !3816
  br i1 %neq1486, label %loop.body1487, label %loop.exit1653, !dbg !3816

loop.body1487:                                    ; preds = %loop.cond1485
  call void @llvm.dbg.declare(metadata ptr %tmp1488, metadata !3818, metadata !DIExpression()), !dbg !3820
  %503 = load i32, ptr %k, align 4, !dbg !3821
  %sext1489 = sext i32 %503 to i64, !dbg !3821
  %lt1490 = icmp slt i64 %sext1489, 0, !dbg !3821
  %504 = call i1 @llvm.expect.i1(i1 %lt1490, i1 false), !dbg !3821
  br i1 %504, label %panic1491, label %checkok1499, !dbg !3821

checkok1499:                                      ; preds = %loop.body1487
  %ge1500 = icmp sge i64 %sext1489, 128, !dbg !3821
  %505 = call i1 @llvm.expect.i1(i1 %ge1500, i1 false), !dbg !3821
  br i1 %505, label %panic1501, label %checkok1511, !dbg !3821

checkok1511:                                      ; preds = %checkok1499
  %ptroffset1512 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1489, !dbg !3821
  %506 = load i32, ptr %ptroffset1512, align 4, !dbg !3821
  %507 = load i32, ptr %sh, align 4, !dbg !3822
  %shift_underflow = icmp slt i32 %507, 0, !dbg !3823
  %508 = call i1 @llvm.expect.i1(i1 %shift_underflow, i1 false), !dbg !3823
  br i1 %508, label %panic1513, label %checkok1521, !dbg !3823

checkok1521:                                      ; preds = %checkok1511
  %shift_exceeds1522 = icmp sge i32 %507, 32, !dbg !3823
  %509 = call i1 @llvm.expect.i1(i1 %shift_exceeds1522, i1 false), !dbg !3823
  br i1 %509, label %panic1523, label %checkok1531, !dbg !3823

checkok1531:                                      ; preds = %checkok1521
  %shl1532 = shl i32 1, %507, !dbg !3823
  %510 = freeze i32 %shl1532, !dbg !3823
  %sub1533 = sub i32 %510, 1, !dbg !3823
  %and1534 = and i32 %506, %sub1533, !dbg !3824
  store i32 %and1534, ptr %tmp1488, align 4, !dbg !3824
  %511 = load i32, ptr %k, align 4, !dbg !3825
  %sext1535 = sext i32 %511 to i64, !dbg !3825
  %lt1536 = icmp slt i64 %sext1535, 0, !dbg !3825
  %512 = call i1 @llvm.expect.i1(i1 %lt1536, i1 false), !dbg !3825
  br i1 %512, label %panic1537, label %checkok1545, !dbg !3825

checkok1545:                                      ; preds = %checkok1531
  %ge1546 = icmp sge i64 %sext1535, 128, !dbg !3825
  %513 = call i1 @llvm.expect.i1(i1 %ge1546, i1 false), !dbg !3825
  br i1 %513, label %panic1547, label %checkok1557, !dbg !3825

checkok1557:                                      ; preds = %checkok1545
  %ptroffset1558 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1535, !dbg !3825
  %514 = load i32, ptr %k, align 4, !dbg !3826
  %sext1559 = sext i32 %514 to i64, !dbg !3826
  %lt1560 = icmp slt i64 %sext1559, 0, !dbg !3826
  %515 = call i1 @llvm.expect.i1(i1 %lt1560, i1 false), !dbg !3826
  br i1 %515, label %panic1561, label %checkok1569, !dbg !3826

checkok1569:                                      ; preds = %checkok1557
  %ge1570 = icmp sge i64 %sext1559, 128, !dbg !3826
  %516 = call i1 @llvm.expect.i1(i1 %ge1570, i1 false), !dbg !3826
  br i1 %516, label %panic1571, label %checkok1581, !dbg !3826

checkok1581:                                      ; preds = %checkok1569
  %ptroffset1582 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1559, !dbg !3826
  %517 = load i32, ptr %ptroffset1582, align 4, !dbg !3826
  %518 = load i32, ptr %sh, align 4, !dbg !3827
  %shift_exceeds1583 = icmp uge i32 %518, 32, !dbg !3828
  %519 = call i1 @llvm.expect.i1(i1 %shift_exceeds1583, i1 false), !dbg !3828
  br i1 %519, label %panic1584, label %checkok1592, !dbg !3828

checkok1592:                                      ; preds = %checkok1581
  %lshr1593 = lshr i32 %517, %518, !dbg !3828
  %520 = freeze i32 %lshr1593, !dbg !3828
  %521 = load i32, ptr %carry1358, align 4, !dbg !3829
  %add1594 = add i32 %520, %521, !dbg !3828
  store i32 %add1594, ptr %ptroffset1558, align 4, !dbg !3828
  %522 = load i32, ptr %sh, align 4, !dbg !3830
  %shift_underflow1595 = icmp slt i32 %522, 0, !dbg !3831
  %523 = call i1 @llvm.expect.i1(i1 %shift_underflow1595, i1 false), !dbg !3831
  br i1 %523, label %panic1596, label %checkok1604, !dbg !3831

checkok1604:                                      ; preds = %checkok1592
  %shift_exceeds1605 = icmp sge i32 %522, 32, !dbg !3831
  %524 = call i1 @llvm.expect.i1(i1 %shift_exceeds1605, i1 false), !dbg !3831
  br i1 %524, label %panic1606, label %checkok1614, !dbg !3831

checkok1614:                                      ; preds = %checkok1604
  %ashr = ashr i32 1000000000, %522, !dbg !3831
  %525 = freeze i32 %ashr, !dbg !3831
  %526 = load i32, ptr %tmp1488, align 4, !dbg !3832
  %mul1615 = mul i32 %525, %526, !dbg !3831
  store i32 %mul1615, ptr %carry1358, align 4, !dbg !3831
  %527 = load i32, ptr %k, align 4, !dbg !3833
  %528 = load i32, ptr %a, align 4, !dbg !3834
  %eq1616 = icmp eq i32 %527, %528, !dbg !3833
  br i1 %eq1616, label %and.rhs1617, label %and.phi1643, !dbg !3833

and.rhs1617:                                      ; preds = %checkok1614
  %529 = load i32, ptr %k, align 4, !dbg !3835
  %sext1618 = sext i32 %529 to i64, !dbg !3835
  %lt1619 = icmp slt i64 %sext1618, 0, !dbg !3835
  %530 = call i1 @llvm.expect.i1(i1 %lt1619, i1 false), !dbg !3835
  br i1 %530, label %panic1620, label %checkok1628, !dbg !3835

checkok1628:                                      ; preds = %and.rhs1617
  %ge1629 = icmp sge i64 %sext1618, 128, !dbg !3835
  %531 = call i1 @llvm.expect.i1(i1 %ge1629, i1 false), !dbg !3835
  br i1 %531, label %panic1630, label %checkok1640, !dbg !3835

checkok1640:                                      ; preds = %checkok1628
  %ptroffset1641 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1618, !dbg !3835
  %532 = load i32, ptr %ptroffset1641, align 4, !dbg !3835
  %i2nb1642 = icmp eq i32 %532, 0, !dbg !3835
  br label %and.phi1643, !dbg !3835

and.phi1643:                                      ; preds = %checkok1640, %checkok1614
  %val1644 = phi i1 [ false, %checkok1614 ], [ %i2nb1642, %checkok1640 ], !dbg !3835
  br i1 %val1644, label %if.then1645, label %if.exit1650, !dbg !3835

if.then1645:                                      ; preds = %and.phi1643
  %533 = load i32, ptr %a, align 4, !dbg !3836
  %add1646 = add i32 %533, 1, !dbg !3836
  %and1647 = and i32 %add1646, 127, !dbg !3836
  store i32 %and1647, ptr %a, align 4, !dbg !3836
  %534 = load i32, ptr %i, align 4, !dbg !3838
  %sub1648 = sub i32 %534, 1, !dbg !3838
  store i32 %sub1648, ptr %i, align 4, !dbg !3838
  %535 = load i64, ptr %rp802, align 8, !dbg !3839
  %sub1649 = sub i64 %535, 9, !dbg !3839
  store i64 %sub1649, ptr %rp802, align 8, !dbg !3839
  br label %if.exit1650, !dbg !3839

if.exit1650:                                      ; preds = %if.then1645, %and.phi1643
  %536 = load i32, ptr %k, align 4, !dbg !3840
  %add1651 = add i32 %536, 1, !dbg !3840
  %and1652 = and i32 %add1651, 127, !dbg !3840
  store i32 %and1652, ptr %k, align 4, !dbg !3840
  br label %loop.cond1485, !dbg !3840

loop.exit1653:                                    ; preds = %loop.cond1485
  %537 = load i32, ptr %carry1358, align 4, !dbg !3841
  %i2b1654 = icmp ne i32 %537, 0, !dbg !3841
  br i1 %i2b1654, label %if.then1655, label %if.exit1715, !dbg !3841

if.then1655:                                      ; preds = %loop.exit1653
  %538 = load i32, ptr %z, align 4, !dbg !3842
  %add1656 = add i32 %538, 1, !dbg !3842
  %and1657 = and i32 %add1656, 127, !dbg !3842
  %539 = load i32, ptr %a, align 4, !dbg !3844
  %neq1658 = icmp ne i32 %and1657, %539, !dbg !3842
  br i1 %neq1658, label %if.then1659, label %if.else1686, !dbg !3842

if.then1659:                                      ; preds = %if.then1655
  %540 = load i32, ptr %z, align 4, !dbg !3845
  %sext1660 = sext i32 %540 to i64, !dbg !3845
  %lt1661 = icmp slt i64 %sext1660, 0, !dbg !3845
  %541 = call i1 @llvm.expect.i1(i1 %lt1661, i1 false), !dbg !3845
  br i1 %541, label %panic1662, label %checkok1670, !dbg !3845

checkok1670:                                      ; preds = %if.then1659
  %ge1671 = icmp sge i64 %sext1660, 128, !dbg !3845
  %542 = call i1 @llvm.expect.i1(i1 %ge1671, i1 false), !dbg !3845
  br i1 %542, label %panic1672, label %checkok1682, !dbg !3845

checkok1682:                                      ; preds = %checkok1670
  %ptroffset1683 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1660, !dbg !3845
  %543 = load i32, ptr %carry1358, align 4, !dbg !3847
  store i32 %543, ptr %ptroffset1683, align 4, !dbg !3847
  %544 = load i32, ptr %z, align 4, !dbg !3848
  %add1684 = add i32 %544, 1, !dbg !3848
  %and1685 = and i32 %add1684, 127, !dbg !3848
  store i32 %and1685, ptr %z, align 4, !dbg !3848
  br label %if.exit1714, !dbg !3848

if.else1686:                                      ; preds = %if.then1655
  %545 = load i32, ptr %z, align 4, !dbg !3849
  %sub1687 = sub i32 %545, 1, !dbg !3849
  %and1688 = and i32 %sub1687, 127, !dbg !3849
  %sext1689 = sext i32 %and1688 to i64, !dbg !3849
  %lt1690 = icmp slt i64 %sext1689, 0, !dbg !3849
  %546 = call i1 @llvm.expect.i1(i1 %lt1690, i1 false), !dbg !3849
  br i1 %546, label %panic1691, label %checkok1699, !dbg !3849

checkok1699:                                      ; preds = %if.else1686
  %ge1700 = icmp sge i64 %sext1689, 128, !dbg !3849
  %547 = call i1 @llvm.expect.i1(i1 %ge1700, i1 false), !dbg !3849
  br i1 %547, label %panic1701, label %checkok1711, !dbg !3849

checkok1711:                                      ; preds = %checkok1699
  %ptroffset1712 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1689, !dbg !3849
  %548 = load i32, ptr %ptroffset1712, align 4, !dbg !3849
  %or1713 = or i32 %548, 1, !dbg !3851
  store i32 %or1713, ptr %ptroffset1712, align 4, !dbg !3851
  br label %if.exit1714, !dbg !3851

if.exit1714:                                      ; preds = %checkok1711, %checkok1682
  br label %if.exit1715, !dbg !3851

if.exit1715:                                      ; preds = %if.exit1714, %loop.exit1653
  br label %loop.body1357, !dbg !3851

loop.exit1716:                                    ; preds = %if.then1479
  call void @llvm.dbg.declare(metadata ptr %y1717, metadata !3852, metadata !DIExpression()), !dbg !3853
  store double 0.000000e+00, ptr %y1717, align 8, !dbg !3853
  call void @llvm.dbg.declare(metadata ptr %i1718, metadata !3854, metadata !DIExpression()), !dbg !3855
  store i32 0, ptr %i1718, align 4, !dbg !3855
  store i32 0, ptr %i1718, align 4, !dbg !3856
  br label %loop.cond1719, !dbg !3856

loop.cond1719:                                    ; preds = %checkok1779, %loop.exit1716
  %549 = load i32, ptr %i1718, align 4, !dbg !3858
  %lt1720 = icmp slt i32 %549, 2, !dbg !3858
  br i1 %lt1720, label %loop.body1721, label %loop.exit1784, !dbg !3858

loop.body1721:                                    ; preds = %loop.cond1719
  %550 = load i32, ptr %a, align 4, !dbg !3859
  %551 = load i32, ptr %i1718, align 4, !dbg !3861
  %add1722 = add i32 %550, %551, !dbg !3859
  %and1723 = and i32 %add1722, 127, !dbg !3859
  %552 = load i32, ptr %z, align 4, !dbg !3862
  %eq1724 = icmp eq i32 %and1723, %552, !dbg !3859
  br i1 %eq1724, label %if.then1725, label %if.exit1753, !dbg !3859

if.then1725:                                      ; preds = %loop.body1721
  %553 = load i32, ptr %z, align 4, !dbg !3863
  %add1726 = add i32 %553, 1, !dbg !3863
  %and1727 = and i32 %add1726, 127, !dbg !3863
  store i32 %and1727, ptr %z, align 4, !dbg !3863
  %sub1728 = sub i32 %and1727, 1, !dbg !3864
  %sext1729 = sext i32 %sub1728 to i64, !dbg !3864
  %lt1730 = icmp slt i64 %sext1729, 0, !dbg !3864
  %554 = call i1 @llvm.expect.i1(i1 %lt1730, i1 false), !dbg !3864
  br i1 %554, label %panic1731, label %checkok1739, !dbg !3864

checkok1739:                                      ; preds = %if.then1725
  %ge1740 = icmp sge i64 %sext1729, 128, !dbg !3864
  %555 = call i1 @llvm.expect.i1(i1 %ge1740, i1 false), !dbg !3864
  br i1 %555, label %panic1741, label %checkok1751, !dbg !3864

checkok1751:                                      ; preds = %checkok1739
  %ptroffset1752 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1729, !dbg !3864
  store i32 0, ptr %ptroffset1752, align 4, !dbg !3865
  br label %if.exit1753, !dbg !3865

if.exit1753:                                      ; preds = %checkok1751, %loop.body1721
  %556 = load double, ptr %y1717, align 8, !dbg !3866
  %fmul1754 = fmul double 1.000000e+09, %556, !dbg !3867
  %557 = load i32, ptr %a, align 4, !dbg !3868
  %558 = load i32, ptr %i1718, align 4, !dbg !3869
  %add1755 = add i32 %557, %558, !dbg !3868
  %and1756 = and i32 %add1755, 127, !dbg !3868
  %sext1757 = sext i32 %and1756 to i64, !dbg !3868
  %lt1758 = icmp slt i64 %sext1757, 0, !dbg !3868
  %559 = call i1 @llvm.expect.i1(i1 %lt1758, i1 false), !dbg !3868
  br i1 %559, label %panic1759, label %checkok1767, !dbg !3868

checkok1767:                                      ; preds = %if.exit1753
  %ge1768 = icmp sge i64 %sext1757, 128, !dbg !3868
  %560 = call i1 @llvm.expect.i1(i1 %ge1768, i1 false), !dbg !3868
  br i1 %560, label %panic1769, label %checkok1779, !dbg !3868

checkok1779:                                      ; preds = %checkok1767
  %ptroffset1780 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1757, !dbg !3868
  %561 = load i32, ptr %ptroffset1780, align 4, !dbg !3868
  %uifp1781 = uitofp i32 %561 to double, !dbg !3868
  %fadd1782 = fadd double %fmul1754, %uifp1781, !dbg !3867
  store double %fadd1782, ptr %y1717, align 8, !dbg !3867
  %562 = load i32, ptr %i1718, align 4, !dbg !3870
  %add1783 = add i32 %562, 1, !dbg !3870
  store i32 %add1783, ptr %i1718, align 4, !dbg !3870
  br label %loop.cond1719, !dbg !3870

loop.exit1784:                                    ; preds = %loop.cond1719
  %563 = load double, ptr %y1717, align 8, !dbg !3871
  %564 = load i32, ptr %sign422, align 4, !dbg !3872
  %sifp1785 = sitofp i32 %564 to double, !dbg !3872
  %fmul1786 = fmul double %563, %sifp1785, !dbg !3871
  store double %fmul1786, ptr %y1717, align 8, !dbg !3871
  call void @llvm.dbg.declare(metadata ptr %denormal, metadata !3873, metadata !DIExpression()), !dbg !3874
  store i8 0, ptr %denormal, align 1, !dbg !3874
  call void @llvm.dbg.declare(metadata ptr %bits1787, metadata !3875, metadata !DIExpression()), !dbg !3876
  store i32 24, ptr %bits1787, align 4, !dbg !3877
  %565 = load i32, ptr %bits1787, align 4, !dbg !3878
  %566 = load i32, ptr %e2801, align 4, !dbg !3879
  %add1788 = add i32 53, %566, !dbg !3880
  %sub1789 = sub i32 %add1788, -149, !dbg !3880
  %lt1790 = icmp slt i32 %sub1789, %565, !dbg !3878
  %check1791 = icmp slt i32 %565, 0, !dbg !3878
  %siui-lt1792 = or i1 %check1791, %lt1790, !dbg !3878
  br i1 %siui-lt1792, label %if.then1793, label %if.exit1799, !dbg !3878

if.then1793:                                      ; preds = %loop.exit1784
  %567 = load i32, ptr %e2801, align 4, !dbg !3881
  %add1794 = add i32 53, %567, !dbg !3883
  %sub1795 = sub i32 %add1794, -149, !dbg !3883
  store i32 %sub1795, ptr %bits1787, align 4, !dbg !3883
  %568 = load i32, ptr %bits1787, align 4, !dbg !3884
  %gt1796 = icmp ugt i32 0, %568, !dbg !3884
  br i1 %gt1796, label %if.then1797, label %if.exit1798, !dbg !3884

if.then1797:                                      ; preds = %if.then1793
  store i32 0, ptr %bits1787, align 4, !dbg !3885
  br label %if.exit1798, !dbg !3885

if.exit1798:                                      ; preds = %if.then1797, %if.then1793
  store i8 1, ptr %denormal, align 1, !dbg !3886
  br label %if.exit1799, !dbg !3886

if.exit1799:                                      ; preds = %if.exit1798, %loop.exit1784
  call void @llvm.dbg.declare(metadata ptr %bias1800, metadata !3887, metadata !DIExpression()), !dbg !3888
  store double 0.000000e+00, ptr %bias1800, align 8, !dbg !3888
  call void @llvm.dbg.declare(metadata ptr %frac, metadata !3889, metadata !DIExpression()), !dbg !3890
  store double 0.000000e+00, ptr %frac, align 8, !dbg !3890
  %569 = load i32, ptr %bits1787, align 4, !dbg !3891
  %gt1801 = icmp ugt i32 53, %569, !dbg !3891
  br i1 %gt1801, label %if.then1802, label %if.exit1822, !dbg !3891

if.then1802:                                      ; preds = %if.exit1799
  store double 1.000000e+00, ptr %x1803, align 8
  %570 = load i32, ptr %bits1787, align 4, !dbg !3892
  %sub1804 = sub i32 106, %570, !dbg !3894
  %sub1805 = sub i32 %sub1804, 1, !dbg !3894
  store i32 %sub1805, ptr %n1806, align 4
  %571 = load double, ptr %x1803, align 8, !dbg !3895
  %572 = load i32, ptr %n1806, align 4, !dbg !3895
  %573 = call double @scalbn(double %571, i32 %572), !dbg !3898
  store double %573, ptr %mag1807, align 8
  %574 = load double, ptr %y1717, align 8
  store double %574, ptr %sgn1808, align 8
  %575 = load double, ptr %mag1807, align 8
  store double %575, ptr %x1809, align 8
  %576 = load double, ptr %sgn1808, align 8
  store double %576, ptr %y1810, align 8
  %577 = load double, ptr %x1809, align 8, !dbg !3899
  %578 = load double, ptr %sgn1808, align 8, !dbg !3904
  %579 = call double @llvm.copysign.f64(double %577, double %578), !dbg !3904
  store double %579, ptr %bias1800, align 8, !dbg !3904
  %580 = load double, ptr %y1717, align 8, !dbg !3905
  store double 1.000000e+00, ptr %x1811, align 8
  %581 = load i32, ptr %bits1787, align 4, !dbg !3906
  %sub1812 = sub i32 53, %581, !dbg !3907
  store i32 %sub1812, ptr %n1813, align 4
  %582 = load double, ptr %x1811, align 8, !dbg !3908
  %583 = load i32, ptr %n1813, align 4, !dbg !3908
  %584 = call double @scalbn(double %582, i32 %583), !dbg !3911
  %zero1814 = fcmp ueq double %584, 0.000000e+00, !dbg !3905
  %585 = call i1 @llvm.expect.i1(i1 %zero1814, i1 false), !dbg !3905
  br i1 %585, label %panic1815, label %checkok1819, !dbg !3905

checkok1819:                                      ; preds = %if.then1802
  %fmod = frem double %580, %584, !dbg !3905
  store double %fmod, ptr %frac, align 8, !dbg !3905
  %586 = load double, ptr %y1717, align 8, !dbg !3912
  %587 = load double, ptr %frac, align 8, !dbg !3913
  %fsub1820 = fsub double %586, %587, !dbg !3912
  store double %fsub1820, ptr %y1717, align 8, !dbg !3912
  %588 = load double, ptr %y1717, align 8, !dbg !3914
  %589 = load double, ptr %bias1800, align 8, !dbg !3915
  %fadd1821 = fadd double %588, %589, !dbg !3914
  store double %fadd1821, ptr %y1717, align 8, !dbg !3914
  br label %if.exit1822, !dbg !3914

if.exit1822:                                      ; preds = %checkok1819, %if.exit1799
  %590 = load i32, ptr %a, align 4, !dbg !3916
  %591 = load i32, ptr %i1718, align 4, !dbg !3917
  %add1823 = add i32 %590, %591, !dbg !3916
  %and1824 = and i32 %add1823, 127, !dbg !3916
  %592 = load i32, ptr %z, align 4, !dbg !3918
  %neq1825 = icmp ne i32 %and1824, %592, !dbg !3916
  br i1 %neq1825, label %if.then1826, label %if.exit1908, !dbg !3916

if.then1826:                                      ; preds = %if.exit1822
  call void @llvm.dbg.declare(metadata ptr %t, metadata !3919, metadata !DIExpression()), !dbg !3921
  %593 = load i32, ptr %a, align 4, !dbg !3922
  %594 = load i32, ptr %i1718, align 4, !dbg !3923
  %add1827 = add i32 %593, %594, !dbg !3922
  %and1828 = and i32 %add1827, 127, !dbg !3922
  %sext1829 = sext i32 %and1828 to i64, !dbg !3922
  %lt1830 = icmp slt i64 %sext1829, 0, !dbg !3922
  %595 = call i1 @llvm.expect.i1(i1 %lt1830, i1 false), !dbg !3922
  br i1 %595, label %panic1831, label %checkok1839, !dbg !3922

checkok1839:                                      ; preds = %if.then1826
  %ge1840 = icmp sge i64 %sext1829, 128, !dbg !3922
  %596 = call i1 @llvm.expect.i1(i1 %ge1840, i1 false), !dbg !3922
  br i1 %596, label %panic1841, label %checkok1851, !dbg !3922

checkok1851:                                      ; preds = %checkok1839
  %ptroffset1852 = getelementptr inbounds [4 x i8], ptr %x429, i64 %sext1829, !dbg !3922
  %597 = load i32, ptr %ptroffset1852, align 4, !dbg !3922
  store i32 %597, ptr %t, align 4, !dbg !3922
  store i8 1, ptr %switch1853, align 1
  br label %switch.entry1854

switch.entry1854:                                 ; preds = %checkok1851
  %598 = load i8, ptr %switch1853, align 1
  %599 = trunc i8 %598 to i1
  %600 = load i32, ptr %t, align 4, !dbg !3924
  %gt1855 = icmp ugt i32 500000000, %600, !dbg !3924
  br i1 %gt1855, label %and.rhs1856, label %and.phi1865, !dbg !3924

and.rhs1856:                                      ; preds = %switch.entry1854
  %601 = load i32, ptr %t, align 4, !dbg !3926
  %i2b1857 = icmp ne i32 %601, 0, !dbg !3926
  br i1 %i2b1857, label %or.phi1863, label %or.rhs1858, !dbg !3926

or.rhs1858:                                       ; preds = %and.rhs1856
  %602 = load i32, ptr %a, align 4, !dbg !3927
  %603 = load i32, ptr %i1718, align 4, !dbg !3928
  %add1859 = add i32 %602, %603, !dbg !3927
  %add1860 = add i32 %add1859, 1, !dbg !3927
  %and1861 = and i32 %add1860, 127, !dbg !3927
  %604 = load i32, ptr %z, align 4, !dbg !3929
  %neq1862 = icmp ne i32 %and1861, %604, !dbg !3927
  br label %or.phi1863, !dbg !3927

or.phi1863:                                       ; preds = %or.rhs1858, %and.rhs1856
  %val1864 = phi i1 [ true, %and.rhs1856 ], [ %neq1862, %or.rhs1858 ], !dbg !3927
  br label %and.phi1865, !dbg !3927

and.phi1865:                                      ; preds = %or.phi1863, %switch.entry1854
  %val1866 = phi i1 [ false, %switch.entry1854 ], [ %val1864, %or.phi1863 ], !dbg !3927
  %eq1867 = icmp eq i1 %val1866, %599, !dbg !3927
  br i1 %eq1867, label %switch.case1868, label %next_if1872, !dbg !3927

switch.case1868:                                  ; preds = %and.phi1865
  %605 = load double, ptr %frac, align 8, !dbg !3930
  %606 = load i32, ptr %sign422, align 4, !dbg !3932
  %sifp1869 = sitofp i32 %606 to double, !dbg !3932
  %fmul1870 = fmul double 2.500000e-01, %sifp1869, !dbg !3933
  %fadd1871 = fadd double %605, %fmul1870, !dbg !3930
  store double %fadd1871, ptr %frac, align 8, !dbg !3930
  br label %switch.exit1897, !dbg !3930

next_if1872:                                      ; preds = %and.phi1865
  %607 = load i32, ptr %t, align 4, !dbg !3934
  %lt1873 = icmp ult i32 500000000, %607, !dbg !3934
  %eq1874 = icmp eq i1 %lt1873, %599, !dbg !3934
  br i1 %eq1874, label %switch.case1875, label %next_if1879, !dbg !3934

switch.case1875:                                  ; preds = %next_if1872
  %608 = load double, ptr %frac, align 8, !dbg !3935
  %609 = load i32, ptr %sign422, align 4, !dbg !3937
  %sifp1876 = sitofp i32 %609 to double, !dbg !3937
  %fmul1877 = fmul double 7.500000e-01, %sifp1876, !dbg !3938
  %fadd1878 = fadd double %608, %fmul1877, !dbg !3935
  store double %fadd1878, ptr %frac, align 8, !dbg !3935
  br label %switch.exit1897, !dbg !3935

next_if1879:                                      ; preds = %next_if1872
  %610 = load i32, ptr %t, align 4, !dbg !3939
  %eq1880 = icmp eq i32 500000000, %610, !dbg !3939
  %eq1881 = icmp eq i1 %eq1880, %599, !dbg !3939
  br i1 %eq1881, label %switch.case1882, label %next_if1896, !dbg !3939

switch.case1882:                                  ; preds = %next_if1879
  %611 = load i32, ptr %a, align 4, !dbg !3940
  %612 = load i32, ptr %i1718, align 4, !dbg !3942
  %add1883 = add i32 %611, %612, !dbg !3940
  %add1884 = add i32 %add1883, 1, !dbg !3940
  %and1885 = and i32 %add1884, 127, !dbg !3940
  %613 = load i32, ptr %z, align 4, !dbg !3943
  %eq1886 = icmp eq i32 %and1885, %613, !dbg !3940
  br i1 %eq1886, label %if.then1887, label %if.else1891, !dbg !3940

if.then1887:                                      ; preds = %switch.case1882
  %614 = load double, ptr %frac, align 8, !dbg !3944
  %615 = load i32, ptr %sign422, align 4, !dbg !3946
  %sifp1888 = sitofp i32 %615 to double, !dbg !3946
  %fmul1889 = fmul double 5.000000e-01, %sifp1888, !dbg !3947
  %fadd1890 = fadd double %614, %fmul1889, !dbg !3944
  store double %fadd1890, ptr %frac, align 8, !dbg !3944
  br label %if.exit1895, !dbg !3944

if.else1891:                                      ; preds = %switch.case1882
  %616 = load double, ptr %frac, align 8, !dbg !3948
  %617 = load i32, ptr %sign422, align 4, !dbg !3950
  %sifp1892 = sitofp i32 %617 to double, !dbg !3950
  %fmul1893 = fmul double 7.500000e-01, %sifp1892, !dbg !3951
  %fadd1894 = fadd double %616, %fmul1893, !dbg !3948
  store double %fadd1894, ptr %frac, align 8, !dbg !3948
  br label %if.exit1895, !dbg !3948

if.exit1895:                                      ; preds = %if.else1891, %if.then1887
  br label %switch.exit1897, !dbg !3948

next_if1896:                                      ; preds = %next_if1879
  br label %switch.exit1897, !dbg !3948

switch.exit1897:                                  ; preds = %next_if1896, %if.exit1895, %switch.case1875, %switch.case1868
  %618 = load i32, ptr %bits1787, align 4, !dbg !3952
  %sub1898 = sub i32 53, %618, !dbg !3953
  %ge1899 = icmp sge i32 %sub1898, 2, !dbg !3953
  br i1 %ge1899, label %and.rhs1900, label %and.phi1904, !dbg !3953

and.rhs1900:                                      ; preds = %switch.exit1897
  %619 = load double, ptr %frac, align 8, !dbg !3954
  %fmod1901 = frem double %619, 1.000000e+00, !dbg !3954
  %neq1902 = fcmp one double %fmod1901, 0.000000e+00, !dbg !3954
  %not1903 = xor i1 %neq1902, true, !dbg !3954
  br label %and.phi1904, !dbg !3954

and.phi1904:                                      ; preds = %and.rhs1900, %switch.exit1897
  %val1905 = phi i1 [ false, %switch.exit1897 ], [ %not1903, %and.rhs1900 ], !dbg !3954
  br i1 %val1905, label %if.then1906, label %if.exit1907, !dbg !3954

if.then1906:                                      ; preds = %and.phi1904
  %620 = load double, ptr %frac, align 8, !dbg !3955
  %fincdec = fadd double %620, 1.000000e+00, !dbg !3955
  store double %fincdec, ptr %frac, align 8, !dbg !3955
  br label %if.exit1907, !dbg !3955

if.exit1907:                                      ; preds = %if.then1906, %and.phi1904
  br label %if.exit1908, !dbg !3955

if.exit1908:                                      ; preds = %if.exit1907, %if.exit1822
  %621 = load double, ptr %y1717, align 8, !dbg !3956
  %622 = load double, ptr %frac, align 8, !dbg !3957
  %fadd1909 = fadd double %621, %622, !dbg !3956
  store double %fadd1909, ptr %y1717, align 8, !dbg !3956
  %623 = load double, ptr %y1717, align 8, !dbg !3958
  %624 = load double, ptr %bias1800, align 8, !dbg !3959
  %fsub1910 = fsub double %623, %624, !dbg !3958
  store double %fsub1910, ptr %y1717, align 8, !dbg !3958
  %625 = load i32, ptr %e2801, align 4, !dbg !3960
  %add1911 = add i32 %625, 53, !dbg !3960
  %and1912 = and i32 %add1911, 2147483647, !dbg !3960
  %626 = load i32, ptr %emax, align 4, !dbg !3961
  %sub1913 = sub i32 %626, 5, !dbg !3961
  %gt1914 = icmp sgt i32 %and1912, %sub1913, !dbg !3960
  br i1 %gt1914, label %if.then1915, label %if.exit1943, !dbg !3960

if.then1915:                                      ; preds = %if.exit1908
  %627 = load double, ptr %y1717, align 8
  store double %627, ptr %x1916, align 8
  %628 = load double, ptr %x1916, align 8, !dbg !3962
  %629 = call double @llvm.fabs.f64(double %628), !dbg !3962
  %ge1917 = fcmp oge double %629, 0x4340000000000000, !dbg !3964
  br i1 %ge1917, label %if.then1918, label %if.exit1931, !dbg !3964

if.then1918:                                      ; preds = %if.then1915
  %630 = load i8, ptr %denormal, align 1, !dbg !3966
  %631 = trunc i8 %630 to i1, !dbg !3966
  br i1 %631, label %and.rhs1919, label %and.phi1925, !dbg !3966

and.rhs1919:                                      ; preds = %if.then1918
  %632 = load i32, ptr %bits1787, align 4, !dbg !3968
  %633 = load i32, ptr %e2801, align 4, !dbg !3969
  %add1920 = add i32 53, %633, !dbg !3970
  %sub1921 = sub i32 %add1920, -149, !dbg !3970
  %eq1922 = icmp eq i32 %sub1921, %632, !dbg !3968
  %check1923 = icmp sge i32 %sub1921, 0, !dbg !3968
  %siui-eq1924 = and i1 %check1923, %eq1922, !dbg !3968
  br label %and.phi1925, !dbg !3968

and.phi1925:                                      ; preds = %and.rhs1919, %if.then1918
  %val1926 = phi i1 [ false, %if.then1918 ], [ %siui-eq1924, %and.rhs1919 ], !dbg !3968
  br i1 %val1926, label %if.then1927, label %if.exit1928, !dbg !3968

if.then1927:                                      ; preds = %and.phi1925
  store i8 0, ptr %denormal, align 1, !dbg !3971
  br label %if.exit1928, !dbg !3971

if.exit1928:                                      ; preds = %if.then1927, %and.phi1925
  %634 = load double, ptr %y1717, align 8, !dbg !3972
  %fmul1929 = fmul double %634, 5.000000e-01, !dbg !3972
  store double %fmul1929, ptr %y1717, align 8, !dbg !3972
  %635 = load i32, ptr %e2801, align 4, !dbg !3973
  %add1930 = add i32 %635, 1, !dbg !3973
  store i32 %add1930, ptr %e2801, align 4, !dbg !3973
  br label %if.exit1931, !dbg !3973

if.exit1931:                                      ; preds = %if.exit1928, %if.then1915
  %636 = load i32, ptr %e2801, align 4, !dbg !3974
  %add1932 = add i32 %636, 53, !dbg !3974
  %637 = load i32, ptr %emax, align 4, !dbg !3975
  %gt1933 = icmp sgt i32 %add1932, %637, !dbg !3974
  br i1 %gt1933, label %or.phi1939, label %or.rhs1934, !dbg !3974

or.rhs1934:                                       ; preds = %if.exit1931
  %638 = load i8, ptr %denormal, align 1, !dbg !3976
  %639 = trunc i8 %638 to i1, !dbg !3976
  br i1 %639, label %and.rhs1935, label %and.phi1937, !dbg !3976

and.rhs1935:                                      ; preds = %or.rhs1934
  %640 = load double, ptr %frac, align 8, !dbg !3977
  %neq1936 = fcmp one double %640, 0.000000e+00, !dbg !3977
  br label %and.phi1937, !dbg !3977

and.phi1937:                                      ; preds = %and.rhs1935, %or.rhs1934
  %val1938 = phi i1 [ false, %or.rhs1934 ], [ %neq1936, %and.rhs1935 ], !dbg !3977
  br label %or.phi1939, !dbg !3977

or.phi1939:                                       ; preds = %and.phi1937, %if.exit1931
  %val1940 = phi i1 [ true, %if.exit1931 ], [ %val1938, %and.phi1937 ], !dbg !3977
  br i1 %val1940, label %if.then1941, label %if.exit1942, !dbg !3977

if.then1941:                                      ; preds = %or.phi1939
  store i64 ptrtoint (ptr @"std.core.string.NumberConversion$MALFORMED_FLOAT" to i64), ptr %reterr, align 8, !dbg !3978
  br label %err_retblock, !dbg !3978

if.exit1942:                                      ; preds = %or.phi1939
  br label %if.exit1943, !dbg !3978

if.exit1943:                                      ; preds = %if.exit1942, %if.exit1908
  %641 = load double, ptr %y1717, align 8
  store double %641, ptr %x1944, align 8
  %642 = load i32, ptr %e2801, align 4
  store i32 %642, ptr %n1945, align 4
  %643 = load double, ptr %x1944, align 8, !dbg !3979
  %644 = load i32, ptr %n1945, align 4, !dbg !3979
  %645 = call double @scalbn(double %643, i32 %644), !dbg !3982
  store double %645, ptr %blockret423, align 8, !dbg !3982
  br label %expr_block.exit1947, !dbg !3982

expr_block.exit1947:                              ; preds = %if.exit1943, %checkok901, %checkok853, %if.then814, %if.then756, %if.then739, %if.exit489, %if.then477
  %646 = load double, ptr %blockret423, align 8, !dbg !3982
  %fpfptrunc1948 = fptrunc double %646 to float, !dbg !3982
  store float %fpfptrunc1948, ptr %blockret, align 4, !dbg !3982
  br label %expr_block.exit1949, !dbg !3982

expr_block.exit1949:                              ; preds = %expr_block.exit1947, %expr_block.exit419, %if.then92, %if.then65
  %647 = load float, ptr %blockret, align 4, !dbg !3982
  store float %647, ptr %0, align 4, !dbg !3982
  ret i64 0, !dbg !3982

err_retblock:                                     ; preds = %if.then1941, %if.then765, %if.then762, %if.then735, %guard_block730, %if.then697, %if.then688, %if.then555, %if.then488, %if.then413, %if.then357, %if.then354, %guard_block, %if.then302, %if.then245, %if.then175, %if.then
  %648 = load i64, ptr %reterr, align 8, !dbg !3982
  ret i64 %648, !dbg !3982

panic:                                            ; preds = %and.rhs
  store i64 %3, ptr %taddr, align 8
  %649 = insertvalue %any undef, ptr %taddr, 0
  %650 = insertvalue %any %649, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr2, align 8
  %651 = insertvalue %any undef, ptr %taddr2, 0
  %652 = insertvalue %any %651, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr3, align 8
  %653 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr4, align 8
  %654 = load [2 x i64], ptr %taddr4, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr5, align 8
  %655 = load [2 x i64], ptr %taddr5, align 8
  store %any %650, ptr %varargslots, align 8
  %ptradd6 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %652, ptr %ptradd6, align 8
  %656 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %656, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr7, align 8
  %657 = load [2 x i64], ptr %taddr7, align 8
  call void @std.core.builtin.panicf([2 x i64] %653, [2 x i64] %654, [2 x i64] %655, i32 468, [2 x i64] %657), !dbg !3240
  unreachable, !dbg !3240

panic8:                                           ; preds = %loop.body
  store i64 %9, ptr %taddr9, align 8
  %658 = insertvalue %any undef, ptr %taddr9, 0
  %659 = insertvalue %any %658, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr10, align 8
  %660 = insertvalue %any undef, ptr %taddr10, 0
  %661 = insertvalue %any %660, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr11, align 8
  %662 = load [2 x i64], ptr %taddr11, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr12, align 8
  %663 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr13, align 8
  %664 = load [2 x i64], ptr %taddr13, align 8
  store %any %659, ptr %varargslots14, align 8
  %ptradd15 = getelementptr inbounds i8, ptr %varargslots14, i64 16
  store %any %661, ptr %ptradd15, align 8
  %665 = insertvalue %"any[]" undef, ptr %varargslots14, 0
  %"$$temp16" = insertvalue %"any[]" %665, i64 2, 1
  store %"any[]" %"$$temp16", ptr %taddr17, align 8
  %666 = load [2 x i64], ptr %taddr17, align 8
  call void @std.core.builtin.panicf([2 x i64] %662, [2 x i64] %663, [2 x i64] %664, i32 468, [2 x i64] %666), !dbg !3241
  unreachable, !dbg !3241

panic23:                                          ; preds = %if.exit
  store i64 %14, ptr %taddr24, align 8
  %667 = insertvalue %any undef, ptr %taddr24, 0
  %668 = insertvalue %any %667, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr25, align 8
  %669 = insertvalue %any undef, ptr %taddr25, 0
  %670 = insertvalue %any %669, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr26, align 8
  %671 = load [2 x i64], ptr %taddr26, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr27, align 8
  %672 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr28, align 8
  %673 = load [2 x i64], ptr %taddr28, align 8
  store %any %668, ptr %varargslots29, align 8
  %ptradd30 = getelementptr inbounds i8, ptr %varargslots29, i64 16
  store %any %670, ptr %ptradd30, align 8
  %674 = insertvalue %"any[]" undef, ptr %varargslots29, 0
  %"$$temp31" = insertvalue %"any[]" %674, i64 2, 1
  store %"any[]" %"$$temp31", ptr %taddr32, align 8
  %675 = load [2 x i64], ptr %taddr32, align 8
  call void @std.core.builtin.panicf([2 x i64] %671, [2 x i64] %672, [2 x i64] %673, i32 470, [2 x i64] %675), !dbg !3247
  unreachable, !dbg !3247

panic36:                                          ; preds = %switch.case34
  store i64 %21, ptr %taddr37, align 8
  %676 = insertvalue %any undef, ptr %taddr37, 0
  %677 = insertvalue %any %676, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr38, align 8
  %678 = insertvalue %any undef, ptr %taddr38, 0
  %679 = insertvalue %any %678, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr39, align 8
  %680 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr40, align 8
  %681 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr41, align 8
  %682 = load [2 x i64], ptr %taddr41, align 8
  store %any %677, ptr %varargslots42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %679, ptr %ptradd43, align 8
  %683 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %683, i64 2, 1
  store %"any[]" %"$$temp44", ptr %taddr45, align 8
  %684 = load [2 x i64], ptr %taddr45, align 8
  call void @std.core.builtin.panicf([2 x i64] %680, [2 x i64] %681, [2 x i64] %682, i32 476, [2 x i64] %684), !dbg !3251
  unreachable, !dbg !3251

panic99:                                          ; preds = %and.rhs96
  store i64 %55, ptr %taddr100, align 8
  %685 = insertvalue %any undef, ptr %taddr100, 0
  %686 = insertvalue %any %685, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr101, align 8
  %687 = insertvalue %any undef, ptr %taddr101, 0
  %688 = insertvalue %any %687, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr102, align 8
  %689 = load [2 x i64], ptr %taddr102, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr103, align 8
  %690 = load [2 x i64], ptr %taddr103, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr104, align 8
  %691 = load [2 x i64], ptr %taddr104, align 8
  store %any %686, ptr %varargslots105, align 8
  %ptradd106 = getelementptr inbounds i8, ptr %varargslots105, i64 16
  store %any %688, ptr %ptradd106, align 8
  %692 = insertvalue %"any[]" undef, ptr %varargslots105, 0
  %"$$temp107" = insertvalue %"any[]" %692, i64 2, 1
  store %"any[]" %"$$temp107", ptr %taddr108, align 8
  %693 = load [2 x i64], ptr %taddr108, align 8
  call void @std.core.builtin.panicf([2 x i64] %689, [2 x i64] %690, [2 x i64] %691, i32 481, [2 x i64] %693), !dbg !3262
  unreachable, !dbg !3262

panic116:                                         ; preds = %and.rhs113
  store i64 %59, ptr %taddr117, align 8
  %694 = insertvalue %any undef, ptr %taddr117, 0
  %695 = insertvalue %any %694, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr118, align 8
  %696 = insertvalue %any undef, ptr %taddr118, 0
  %697 = insertvalue %any %696, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr119, align 8
  %698 = load [2 x i64], ptr %taddr119, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr120, align 8
  %699 = load [2 x i64], ptr %taddr120, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr121, align 8
  %700 = load [2 x i64], ptr %taddr121, align 8
  store %any %695, ptr %varargslots122, align 8
  %ptradd123 = getelementptr inbounds i8, ptr %varargslots122, i64 16
  store %any %697, ptr %ptradd123, align 8
  %701 = insertvalue %"any[]" undef, ptr %varargslots122, 0
  %"$$temp124" = insertvalue %"any[]" %701, i64 2, 1
  store %"any[]" %"$$temp124", ptr %taddr125, align 8
  %702 = load [2 x i64], ptr %taddr125, align 8
  call void @std.core.builtin.panicf([2 x i64] %698, [2 x i64] %699, [2 x i64] %700, i32 481, [2 x i64] %702), !dbg !3264
  unreachable, !dbg !3264

panic133:                                         ; preds = %if.then131
  store i64 %65, ptr %taddr134, align 8
  %703 = insertvalue %any undef, ptr %taddr134, 0
  %704 = insertvalue %any %703, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 2, ptr %taddr135, align 8
  %705 = insertvalue %any undef, ptr %taddr135, 0
  %706 = insertvalue %any %705, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr136, align 8
  %707 = load [2 x i64], ptr %taddr136, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr137, align 8
  %708 = load [2 x i64], ptr %taddr137, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr138, align 8
  %709 = load [2 x i64], ptr %taddr138, align 8
  store %any %704, ptr %varargslots139, align 8
  %ptradd140 = getelementptr inbounds i8, ptr %varargslots139, i64 16
  store %any %706, ptr %ptradd140, align 8
  %710 = insertvalue %"any[]" undef, ptr %varargslots139, 0
  %"$$temp141" = insertvalue %"any[]" %710, i64 2, 1
  store %"any[]" %"$$temp141", ptr %taddr142, align 8
  %711 = load [2 x i64], ptr %taddr142, align 8
  call void @std.core.builtin.panicf([2 x i64] %707, [2 x i64] %708, [2 x i64] %709, i32 483, [2 x i64] %711), !dbg !3268
  unreachable, !dbg !3268

panic153:                                         ; preds = %loop.cond150
  store i64 %72, ptr %taddr154, align 8
  %712 = insertvalue %any undef, ptr %taddr154, 0
  %713 = insertvalue %any %712, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %74, ptr %taddr155, align 8
  %714 = insertvalue %any undef, ptr %taddr155, 0
  %715 = insertvalue %any %714, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr156, align 8
  %716 = load [2 x i64], ptr %taddr156, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr157, align 8
  %717 = load [2 x i64], ptr %taddr157, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr158, align 8
  %718 = load [2 x i64], ptr %taddr158, align 8
  store %any %713, ptr %varargslots159, align 8
  %ptradd160 = getelementptr inbounds i8, ptr %varargslots159, i64 16
  store %any %715, ptr %ptradd160, align 8
  %719 = insertvalue %"any[]" undef, ptr %varargslots159, 0
  %"$$temp161" = insertvalue %"any[]" %719, i64 2, 1
  store %"any[]" %"$$temp161", ptr %taddr162, align 8
  %720 = load [2 x i64], ptr %taddr162, align 8
  call void @std.core.builtin.panicf([2 x i64] %716, [2 x i64] %717, [2 x i64] %718, i32 344, [2 x i64] %720), !dbg !3301
  unreachable, !dbg !3301

panic184:                                         ; preds = %and.rhs180
  store i64 %88, ptr %taddr185, align 8
  %721 = insertvalue %any undef, ptr %taddr185, 0
  %722 = insertvalue %any %721, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add182, ptr %taddr186, align 8
  %723 = insertvalue %any undef, ptr %taddr186, 0
  %724 = insertvalue %any %723, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr187, align 8
  %725 = load [2 x i64], ptr %taddr187, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr188, align 8
  %726 = load [2 x i64], ptr %taddr188, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr189, align 8
  %727 = load [2 x i64], ptr %taddr189, align 8
  store %any %722, ptr %varargslots190, align 8
  %ptradd191 = getelementptr inbounds i8, ptr %varargslots190, i64 16
  store %any %724, ptr %ptradd191, align 8
  %728 = insertvalue %"any[]" undef, ptr %varargslots190, 0
  %"$$temp192" = insertvalue %"any[]" %728, i64 2, 1
  store %"any[]" %"$$temp192", ptr %taddr193, align 8
  %729 = load [2 x i64], ptr %taddr193, align 8
  call void @std.core.builtin.panicf([2 x i64] %725, [2 x i64] %726, [2 x i64] %727, i32 357, [2 x i64] %729), !dbg !3321
  unreachable, !dbg !3321

panic207:                                         ; preds = %and.rhs203
  store i64 %96, ptr %taddr208, align 8
  %730 = insertvalue %any undef, ptr %taddr208, 0
  %731 = insertvalue %any %730, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add205, ptr %taddr209, align 8
  %732 = insertvalue %any undef, ptr %taddr209, 0
  %733 = insertvalue %any %732, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr210, align 8
  %734 = load [2 x i64], ptr %taddr210, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr211, align 8
  %735 = load [2 x i64], ptr %taddr211, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr212, align 8
  %736 = load [2 x i64], ptr %taddr212, align 8
  store %any %731, ptr %varargslots213, align 8
  %ptradd214 = getelementptr inbounds i8, ptr %varargslots213, i64 16
  store %any %733, ptr %ptradd214, align 8
  %737 = insertvalue %"any[]" undef, ptr %varargslots213, 0
  %"$$temp215" = insertvalue %"any[]" %737, i64 2, 1
  store %"any[]" %"$$temp215", ptr %taddr216, align 8
  %738 = load [2 x i64], ptr %taddr216, align 8
  call void @std.core.builtin.panicf([2 x i64] %734, [2 x i64] %735, [2 x i64] %736, i32 361, [2 x i64] %738), !dbg !3332
  unreachable, !dbg !3332

panic288:                                         ; preds = %if.exit284
  store i64 %130, ptr %taddr289, align 8
  %739 = insertvalue %any undef, ptr %taddr289, 0
  %740 = insertvalue %any %739, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add286, ptr %taddr290, align 8
  %741 = insertvalue %any undef, ptr %taddr290, 0
  %742 = insertvalue %any %741, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr291, align 8
  %743 = load [2 x i64], ptr %taddr291, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr292, align 8
  %744 = load [2 x i64], ptr %taddr292, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr293, align 8
  %745 = load [2 x i64], ptr %taddr293, align 8
  store %any %740, ptr %varargslots294, align 8
  %ptradd295 = getelementptr inbounds i8, ptr %varargslots294, i64 16
  store %any %742, ptr %ptradd295, align 8
  %746 = insertvalue %"any[]" undef, ptr %varargslots294, 0
  %"$$temp296" = insertvalue %"any[]" %746, i64 2, 1
  store %"any[]" %"$$temp296", ptr %taddr297, align 8
  %747 = load [2 x i64], ptr %taddr297, align 8
  call void @std.core.builtin.panicf([2 x i64] %743, [2 x i64] %744, [2 x i64] %745, i32 397, [2 x i64] %747), !dbg !3380
  unreachable, !dbg !3380

panic321:                                         ; preds = %if.then318
  store i64 %147, ptr %taddr322, align 8
  %748 = insertvalue %any undef, ptr %taddr322, 0
  %749 = insertvalue %any %748, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add319, ptr %taddr323, align 8
  %750 = insertvalue %any undef, ptr %taddr323, 0
  %751 = insertvalue %any %750, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr324, align 8
  %752 = load [2 x i64], ptr %taddr324, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr325, align 8
  %753 = load [2 x i64], ptr %taddr325, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr326, align 8
  %754 = load [2 x i64], ptr %taddr326, align 8
  store %any %749, ptr %varargslots327, align 8
  %ptradd328 = getelementptr inbounds i8, ptr %varargslots327, i64 16
  store %any %751, ptr %ptradd328, align 8
  %755 = insertvalue %"any[]" undef, ptr %varargslots327, 0
  %"$$temp329" = insertvalue %"any[]" %755, i64 2, 1
  store %"any[]" %"$$temp329", ptr %taddr330, align 8
  %756 = load [2 x i64], ptr %taddr330, align 8
  call void @std.core.builtin.panicf([2 x i64] %752, [2 x i64] %753, [2 x i64] %754, i32 406, [2 x i64] %756), !dbg !3398
  unreachable, !dbg !3398

panic332:                                         ; preds = %checkok331
  store i64 %add319, ptr %taddr333, align 8
  %757 = insertvalue %any undef, ptr %taddr333, 0
  %758 = insertvalue %any %757, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 22 }, ptr %taddr334, align 8
  %759 = load [2 x i64], ptr %taddr334, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr335, align 8
  %760 = load [2 x i64], ptr %taddr335, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr336, align 8
  %761 = load [2 x i64], ptr %taddr336, align 8
  store %any %758, ptr %varargslots337, align 8
  %762 = insertvalue %"any[]" undef, ptr %varargslots337, 0
  %"$$temp338" = insertvalue %"any[]" %762, i64 1, 1
  store %"any[]" %"$$temp338", ptr %taddr339, align 8
  %763 = load [2 x i64], ptr %taddr339, align 8
  call void @std.core.builtin.panicf([2 x i64] %759, [2 x i64] %760, [2 x i64] %761, i32 406, [2 x i64] %763), !dbg !3397
  unreachable, !dbg !3397

panic434:                                         ; preds = %assert_ok
  store i64 %213, ptr %taddr435, align 8
  %764 = insertvalue %any undef, ptr %taddr435, 0
  %765 = insertvalue %any %764, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr436, align 8
  %766 = insertvalue %any undef, ptr %taddr436, 0
  %767 = insertvalue %any %766, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr437, align 8
  %768 = load [2 x i64], ptr %taddr437, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr438, align 8
  %769 = load [2 x i64], ptr %taddr438, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr439, align 8
  %770 = load [2 x i64], ptr %taddr439, align 8
  store %any %765, ptr %varargslots440, align 8
  %ptradd441 = getelementptr inbounds i8, ptr %varargslots440, i64 16
  store %any %767, ptr %ptradd441, align 8
  %771 = insertvalue %"any[]" undef, ptr %varargslots440, 0
  %"$$temp442" = insertvalue %"any[]" %771, i64 2, 1
  store %"any[]" %"$$temp442", ptr %taddr443, align 8
  %772 = load [2 x i64], ptr %taddr443, align 8
  call void @std.core.builtin.panicf([2 x i64] %768, [2 x i64] %769, [2 x i64] %770, i32 45, [2 x i64] %772), !dbg !3491
  unreachable, !dbg !3491

panic462:                                         ; preds = %loop.cond459
  store i64 %225, ptr %taddr463, align 8
  %773 = insertvalue %any undef, ptr %taddr463, 0
  %774 = insertvalue %any %773, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %227, ptr %taddr464, align 8
  %775 = insertvalue %any undef, ptr %taddr464, 0
  %776 = insertvalue %any %775, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr465, align 8
  %777 = load [2 x i64], ptr %taddr465, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr466, align 8
  %778 = load [2 x i64], ptr %taddr466, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr467, align 8
  %779 = load [2 x i64], ptr %taddr467, align 8
  store %any %774, ptr %varargslots468, align 8
  %ptradd469 = getelementptr inbounds i8, ptr %varargslots468, i64 16
  store %any %776, ptr %ptradd469, align 8
  %780 = insertvalue %"any[]" undef, ptr %varargslots468, 0
  %"$$temp470" = insertvalue %"any[]" %780, i64 2, 1
  store %"any[]" %"$$temp470", ptr %taddr471, align 8
  %781 = load [2 x i64], ptr %taddr471, align 8
  call void @std.core.builtin.panicf([2 x i64] %777, [2 x i64] %778, [2 x i64] %779, i32 56, [2 x i64] %781), !dbg !3516
  unreachable, !dbg !3516

panic498:                                         ; preds = %and.rhs494
  store i64 %242, ptr %taddr499, align 8
  %782 = insertvalue %any undef, ptr %taddr499, 0
  %783 = insertvalue %any %782, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add496, ptr %taddr500, align 8
  %784 = insertvalue %any undef, ptr %taddr500, 0
  %785 = insertvalue %any %784, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr501, align 8
  %786 = load [2 x i64], ptr %taddr501, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr502, align 8
  %787 = load [2 x i64], ptr %taddr502, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr503, align 8
  %788 = load [2 x i64], ptr %taddr503, align 8
  store %any %783, ptr %varargslots504, align 8
  %ptradd505 = getelementptr inbounds i8, ptr %varargslots504, i64 16
  store %any %785, ptr %ptradd505, align 8
  %789 = insertvalue %"any[]" undef, ptr %varargslots504, 0
  %"$$temp506" = insertvalue %"any[]" %789, i64 2, 1
  store %"any[]" %"$$temp506", ptr %taddr507, align 8
  %790 = load [2 x i64], ptr %taddr507, align 8
  call void @std.core.builtin.panicf([2 x i64] %786, [2 x i64] %787, [2 x i64] %788, i32 70, [2 x i64] %790), !dbg !3536
  unreachable, !dbg !3536

panic521:                                         ; preds = %and.rhs517
  store i64 %250, ptr %taddr522, align 8
  %791 = insertvalue %any undef, ptr %taddr522, 0
  %792 = insertvalue %any %791, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add519, ptr %taddr523, align 8
  %793 = insertvalue %any undef, ptr %taddr523, 0
  %794 = insertvalue %any %793, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr524, align 8
  %795 = load [2 x i64], ptr %taddr524, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr525, align 8
  %796 = load [2 x i64], ptr %taddr525, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr526, align 8
  %797 = load [2 x i64], ptr %taddr526, align 8
  store %any %792, ptr %varargslots527, align 8
  %ptradd528 = getelementptr inbounds i8, ptr %varargslots527, i64 16
  store %any %794, ptr %ptradd528, align 8
  %798 = insertvalue %"any[]" undef, ptr %varargslots527, 0
  %"$$temp529" = insertvalue %"any[]" %798, i64 2, 1
  store %"any[]" %"$$temp529", ptr %taddr530, align 8
  %799 = load [2 x i64], ptr %taddr530, align 8
  call void @std.core.builtin.panicf([2 x i64] %795, [2 x i64] %796, [2 x i64] %797, i32 74, [2 x i64] %799), !dbg !3547
  unreachable, !dbg !3547

panic569:                                         ; preds = %if.then567
  store i64 %sext, ptr %taddr570, align 8
  %800 = insertvalue %any undef, ptr %taddr570, 0
  %801 = insertvalue %any %800, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr571, align 8
  %802 = load [2 x i64], ptr %taddr571, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr572, align 8
  %803 = load [2 x i64], ptr %taddr572, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr573, align 8
  %804 = load [2 x i64], ptr %taddr573, align 8
  store %any %801, ptr %varargslots574, align 8
  %805 = insertvalue %"any[]" undef, ptr %varargslots574, 0
  %"$$temp575" = insertvalue %"any[]" %805, i64 1, 1
  store %"any[]" %"$$temp575", ptr %taddr576, align 8
  %806 = load [2 x i64], ptr %taddr576, align 8
  call void @std.core.builtin.panicf([2 x i64] %802, [2 x i64] %803, [2 x i64] %804, i32 94, [2 x i64] %806), !dbg !3569
  unreachable, !dbg !3569

panic579:                                         ; preds = %checkok577
  store i64 128, ptr %taddr580, align 8
  %807 = insertvalue %any undef, ptr %taddr580, 0
  %808 = insertvalue %any %807, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext, ptr %taddr581, align 8
  %809 = insertvalue %any undef, ptr %taddr581, 0
  %810 = insertvalue %any %809, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr582, align 8
  %811 = load [2 x i64], ptr %taddr582, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr583, align 8
  %812 = load [2 x i64], ptr %taddr583, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr584, align 8
  %813 = load [2 x i64], ptr %taddr584, align 8
  store %any %808, ptr %varargslots585, align 8
  %ptradd586 = getelementptr inbounds i8, ptr %varargslots585, i64 16
  store %any %810, ptr %ptradd586, align 8
  %814 = insertvalue %"any[]" undef, ptr %varargslots585, 0
  %"$$temp587" = insertvalue %"any[]" %814, i64 2, 1
  store %"any[]" %"$$temp587", ptr %taddr588, align 8
  %815 = load [2 x i64], ptr %taddr588, align 8
  call void @std.core.builtin.panicf([2 x i64] %811, [2 x i64] %812, [2 x i64] %813, i32 94, [2 x i64] %815), !dbg !3569
  unreachable, !dbg !3569

panic592:                                         ; preds = %checkok589
  store i64 %sext590, ptr %taddr593, align 8
  %816 = insertvalue %any undef, ptr %taddr593, 0
  %817 = insertvalue %any %816, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr594, align 8
  %818 = load [2 x i64], ptr %taddr594, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr595, align 8
  %819 = load [2 x i64], ptr %taddr595, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr596, align 8
  %820 = load [2 x i64], ptr %taddr596, align 8
  store %any %817, ptr %varargslots597, align 8
  %821 = insertvalue %"any[]" undef, ptr %varargslots597, 0
  %"$$temp598" = insertvalue %"any[]" %821, i64 1, 1
  store %"any[]" %"$$temp598", ptr %taddr599, align 8
  %822 = load [2 x i64], ptr %taddr599, align 8
  call void @std.core.builtin.panicf([2 x i64] %818, [2 x i64] %819, [2 x i64] %820, i32 94, [2 x i64] %822), !dbg !3571
  unreachable, !dbg !3571

panic602:                                         ; preds = %checkok600
  store i64 128, ptr %taddr603, align 8
  %823 = insertvalue %any undef, ptr %taddr603, 0
  %824 = insertvalue %any %823, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext590, ptr %taddr604, align 8
  %825 = insertvalue %any undef, ptr %taddr604, 0
  %826 = insertvalue %any %825, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr605, align 8
  %827 = load [2 x i64], ptr %taddr605, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr606, align 8
  %828 = load [2 x i64], ptr %taddr606, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr607, align 8
  %829 = load [2 x i64], ptr %taddr607, align 8
  store %any %824, ptr %varargslots608, align 8
  %ptradd609 = getelementptr inbounds i8, ptr %varargslots608, i64 16
  store %any %826, ptr %ptradd609, align 8
  %830 = insertvalue %"any[]" undef, ptr %varargslots608, 0
  %"$$temp610" = insertvalue %"any[]" %830, i64 2, 1
  store %"any[]" %"$$temp610", ptr %taddr611, align 8
  %831 = load [2 x i64], ptr %taddr611, align 8
  call void @std.core.builtin.panicf([2 x i64] %827, [2 x i64] %828, [2 x i64] %829, i32 94, [2 x i64] %831), !dbg !3571
  unreachable, !dbg !3571

panic621:                                         ; preds = %if.else618
  store i64 %sext619, ptr %taddr622, align 8
  %832 = insertvalue %any undef, ptr %taddr622, 0
  %833 = insertvalue %any %832, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr623, align 8
  %834 = load [2 x i64], ptr %taddr623, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr624, align 8
  %835 = load [2 x i64], ptr %taddr624, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr625, align 8
  %836 = load [2 x i64], ptr %taddr625, align 8
  store %any %833, ptr %varargslots626, align 8
  %837 = insertvalue %"any[]" undef, ptr %varargslots626, 0
  %"$$temp627" = insertvalue %"any[]" %837, i64 1, 1
  store %"any[]" %"$$temp627", ptr %taddr628, align 8
  %838 = load [2 x i64], ptr %taddr628, align 8
  call void @std.core.builtin.panicf([2 x i64] %834, [2 x i64] %835, [2 x i64] %836, i32 98, [2 x i64] %838), !dbg !3574
  unreachable, !dbg !3574

panic631:                                         ; preds = %checkok629
  store i64 128, ptr %taddr632, align 8
  %839 = insertvalue %any undef, ptr %taddr632, 0
  %840 = insertvalue %any %839, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext619, ptr %taddr633, align 8
  %841 = insertvalue %any undef, ptr %taddr633, 0
  %842 = insertvalue %any %841, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr634, align 8
  %843 = load [2 x i64], ptr %taddr634, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr635, align 8
  %844 = load [2 x i64], ptr %taddr635, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr636, align 8
  %845 = load [2 x i64], ptr %taddr636, align 8
  store %any %840, ptr %varargslots637, align 8
  %ptradd638 = getelementptr inbounds i8, ptr %varargslots637, i64 16
  store %any %842, ptr %ptradd638, align 8
  %846 = insertvalue %"any[]" undef, ptr %varargslots637, 0
  %"$$temp639" = insertvalue %"any[]" %846, i64 2, 1
  store %"any[]" %"$$temp639", ptr %taddr640, align 8
  %847 = load [2 x i64], ptr %taddr640, align 8
  call void @std.core.builtin.panicf([2 x i64] %843, [2 x i64] %844, [2 x i64] %845, i32 98, [2 x i64] %847), !dbg !3574
  unreachable, !dbg !3574

panic671:                                         ; preds = %assert_ok667
  store i64 %294, ptr %taddr672, align 8
  %848 = insertvalue %any undef, ptr %taddr672, 0
  %849 = insertvalue %any %848, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %add669, ptr %taddr673, align 8
  %850 = insertvalue %any undef, ptr %taddr673, 0
  %851 = insertvalue %any %850, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr674, align 8
  %852 = load [2 x i64], ptr %taddr674, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr675, align 8
  %853 = load [2 x i64], ptr %taddr675, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr676, align 8
  %854 = load [2 x i64], ptr %taddr676, align 8
  store %any %849, ptr %varargslots677, align 8
  %ptradd678 = getelementptr inbounds i8, ptr %varargslots677, i64 16
  store %any %851, ptr %ptradd678, align 8
  %855 = insertvalue %"any[]" undef, ptr %varargslots677, 0
  %"$$temp679" = insertvalue %"any[]" %855, i64 2, 1
  store %"any[]" %"$$temp679", ptr %taddr680, align 8
  %856 = load [2 x i64], ptr %taddr680, align 8
  call void @std.core.builtin.panicf([2 x i64] %852, [2 x i64] %853, [2 x i64] %854, i32 113, [2 x i64] %856), !dbg !3595
  unreachable, !dbg !3595

panic701:                                         ; preds = %if.exit698
  store i64 %310, ptr %taddr702, align 8
  %857 = insertvalue %any undef, ptr %taddr702, 0
  %858 = insertvalue %any %857, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %add699, ptr %taddr703, align 8
  %859 = insertvalue %any undef, ptr %taddr703, 0
  %860 = insertvalue %any %859, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr704, align 8
  %861 = load [2 x i64], ptr %taddr704, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr705, align 8
  %862 = load [2 x i64], ptr %taddr705, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr706, align 8
  %863 = load [2 x i64], ptr %taddr706, align 8
  store %any %858, ptr %varargslots707, align 8
  %ptradd708 = getelementptr inbounds i8, ptr %varargslots707, i64 16
  store %any %860, ptr %ptradd708, align 8
  %864 = insertvalue %"any[]" undef, ptr %varargslots707, 0
  %"$$temp709" = insertvalue %"any[]" %864, i64 2, 1
  store %"any[]" %"$$temp709", ptr %taddr710, align 8
  %865 = load [2 x i64], ptr %taddr710, align 8
  call void @std.core.builtin.panicf([2 x i64] %861, [2 x i64] %862, [2 x i64] %863, i32 120, [2 x i64] %865), !dbg !3609
  unreachable, !dbg !3609

panic713:                                         ; preds = %checkok711
  store i64 %add699, ptr %taddr714, align 8
  %866 = insertvalue %any undef, ptr %taddr714, 0
  %867 = insertvalue %any %866, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.80, i64 22 }, ptr %taddr715, align 8
  %868 = load [2 x i64], ptr %taddr715, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr716, align 8
  %869 = load [2 x i64], ptr %taddr716, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr717, align 8
  %870 = load [2 x i64], ptr %taddr717, align 8
  store %any %867, ptr %varargslots718, align 8
  %871 = insertvalue %"any[]" undef, ptr %varargslots718, 0
  %"$$temp719" = insertvalue %"any[]" %871, i64 1, 1
  store %"any[]" %"$$temp719", ptr %taddr720, align 8
  %872 = load [2 x i64], ptr %taddr720, align 8
  call void @std.core.builtin.panicf([2 x i64] %868, [2 x i64] %869, [2 x i64] %870, i32 120, [2 x i64] %872), !dbg !3608
  unreachable, !dbg !3608

panic774:                                         ; preds = %loop.body771
  store i64 %sext772, ptr %taddr775, align 8
  %873 = insertvalue %any undef, ptr %taddr775, 0
  %874 = insertvalue %any %873, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr776, align 8
  %875 = load [2 x i64], ptr %taddr776, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr777, align 8
  %876 = load [2 x i64], ptr %taddr777, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr778, align 8
  %877 = load [2 x i64], ptr %taddr778, align 8
  store %any %874, ptr %varargslots779, align 8
  %878 = insertvalue %"any[]" undef, ptr %varargslots779, 0
  %"$$temp780" = insertvalue %"any[]" %878, i64 1, 1
  store %"any[]" %"$$temp780", ptr %taddr781, align 8
  %879 = load [2 x i64], ptr %taddr781, align 8
  call void @std.core.builtin.panicf([2 x i64] %875, [2 x i64] %876, [2 x i64] %877, i32 138, [2 x i64] %879), !dbg !3637
  unreachable, !dbg !3637

panic784:                                         ; preds = %checkok782
  store i64 128, ptr %taddr785, align 8
  %880 = insertvalue %any undef, ptr %taddr785, 0
  %881 = insertvalue %any %880, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext772, ptr %taddr786, align 8
  %882 = insertvalue %any undef, ptr %taddr786, 0
  %883 = insertvalue %any %882, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr787, align 8
  %884 = load [2 x i64], ptr %taddr787, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr788, align 8
  %885 = load [2 x i64], ptr %taddr788, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr789, align 8
  %886 = load [2 x i64], ptr %taddr789, align 8
  store %any %881, ptr %varargslots790, align 8
  %ptradd791 = getelementptr inbounds i8, ptr %varargslots790, i64 16
  store %any %883, ptr %ptradd791, align 8
  %887 = insertvalue %"any[]" undef, ptr %varargslots790, 0
  %"$$temp792" = insertvalue %"any[]" %887, i64 2, 1
  store %"any[]" %"$$temp792", ptr %taddr793, align 8
  %888 = load [2 x i64], ptr %taddr793, align 8
  call void @std.core.builtin.panicf([2 x i64] %884, [2 x i64] %885, [2 x i64] %886, i32 138, [2 x i64] %888), !dbg !3637
  unreachable, !dbg !3637

panic826:                                         ; preds = %if.then820
  store i64 %sub824, ptr %taddr827, align 8
  %889 = insertvalue %any undef, ptr %taddr827, 0
  %890 = insertvalue %any %889, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr828, align 8
  %891 = load [2 x i64], ptr %taddr828, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr829, align 8
  %892 = load [2 x i64], ptr %taddr829, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr830, align 8
  %893 = load [2 x i64], ptr %taddr830, align 8
  store %any %890, ptr %varargslots831, align 8
  %894 = insertvalue %"any[]" undef, ptr %varargslots831, 0
  %"$$temp832" = insertvalue %"any[]" %894, i64 1, 1
  store %"any[]" %"$$temp832", ptr %taddr833, align 8
  %895 = load [2 x i64], ptr %taddr833, align 8
  call void @std.core.builtin.panicf([2 x i64] %891, [2 x i64] %892, [2 x i64] %893, i32 152, [2 x i64] %895), !dbg !3664
  unreachable, !dbg !3664

panic836:                                         ; preds = %checkok834
  store i64 8, ptr %taddr837, align 8
  %896 = insertvalue %any undef, ptr %taddr837, 0
  %897 = insertvalue %any %896, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub824, ptr %taddr838, align 8
  %898 = insertvalue %any undef, ptr %taddr838, 0
  %899 = insertvalue %any %898, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr839, align 8
  %900 = load [2 x i64], ptr %taddr839, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr840, align 8
  %901 = load [2 x i64], ptr %taddr840, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr841, align 8
  %902 = load [2 x i64], ptr %taddr841, align 8
  store %any %897, ptr %varargslots842, align 8
  %ptradd843 = getelementptr inbounds i8, ptr %varargslots842, i64 16
  store %any %899, ptr %ptradd843, align 8
  %903 = insertvalue %"any[]" undef, ptr %varargslots842, 0
  %"$$temp844" = insertvalue %"any[]" %903, i64 2, 1
  store %"any[]" %"$$temp844", ptr %taddr845, align 8
  %904 = load [2 x i64], ptr %taddr845, align 8
  call void @std.core.builtin.panicf([2 x i64] %900, [2 x i64] %901, [2 x i64] %902, i32 152, [2 x i64] %904), !dbg !3664
  unreachable, !dbg !3664

panic849:                                         ; preds = %checkok846
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr850, align 8
  %905 = load [2 x i64], ptr %taddr850, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr851, align 8
  %906 = load [2 x i64], ptr %taddr851, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr852, align 8
  %907 = load [2 x i64], ptr %taddr852, align 8
  %908 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %908([2 x i64] %905, [2 x i64] %906, [2 x i64] %907, i32 152), !dbg !3661
  unreachable, !dbg !3661

panic862:                                         ; preds = %or.rhs861
  store i32 %363, ptr %taddr863, align 4
  %909 = insertvalue %any undef, ptr %taddr863, 0
  %910 = insertvalue %any %909, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr864, align 8
  %911 = load [2 x i64], ptr %taddr864, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr865, align 8
  %912 = load [2 x i64], ptr %taddr865, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr866, align 8
  %913 = load [2 x i64], ptr %taddr866, align 8
  store %any %910, ptr %varargslots867, align 8
  %914 = insertvalue %"any[]" undef, ptr %varargslots867, 0
  %"$$temp868" = insertvalue %"any[]" %914, i64 1, 1
  store %"any[]" %"$$temp868", ptr %taddr869, align 8
  %915 = load [2 x i64], ptr %taddr869, align 8
  call void @std.core.builtin.panicf([2 x i64] %911, [2 x i64] %912, [2 x i64] %913, i32 154, [2 x i64] %915), !dbg !3674
  unreachable, !dbg !3674

panic881:                                         ; preds = %if.then875
  store i64 %sub879, ptr %taddr882, align 8
  %916 = insertvalue %any undef, ptr %taddr882, 0
  %917 = insertvalue %any %916, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr883, align 8
  %918 = load [2 x i64], ptr %taddr883, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr884, align 8
  %919 = load [2 x i64], ptr %taddr884, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr885, align 8
  %920 = load [2 x i64], ptr %taddr885, align 8
  store %any %917, ptr %varargslots886, align 8
  %921 = insertvalue %"any[]" undef, ptr %varargslots886, 0
  %"$$temp887" = insertvalue %"any[]" %921, i64 1, 1
  store %"any[]" %"$$temp887", ptr %taddr888, align 8
  %922 = load [2 x i64], ptr %taddr888, align 8
  call void @std.core.builtin.panicf([2 x i64] %918, [2 x i64] %919, [2 x i64] %920, i32 154, [2 x i64] %922), !dbg !3677
  unreachable, !dbg !3677

panic891:                                         ; preds = %checkok889
  store i64 8, ptr %taddr892, align 8
  %923 = insertvalue %any undef, ptr %taddr892, 0
  %924 = insertvalue %any %923, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub879, ptr %taddr893, align 8
  %925 = insertvalue %any undef, ptr %taddr893, 0
  %926 = insertvalue %any %925, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr894, align 8
  %927 = load [2 x i64], ptr %taddr894, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr895, align 8
  %928 = load [2 x i64], ptr %taddr895, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr896, align 8
  %929 = load [2 x i64], ptr %taddr896, align 8
  store %any %924, ptr %varargslots897, align 8
  %ptradd898 = getelementptr inbounds i8, ptr %varargslots897, i64 16
  store %any %926, ptr %ptradd898, align 8
  %930 = insertvalue %"any[]" undef, ptr %varargslots897, 0
  %"$$temp899" = insertvalue %"any[]" %930, i64 2, 1
  store %"any[]" %"$$temp899", ptr %taddr900, align 8
  %931 = load [2 x i64], ptr %taddr900, align 8
  call void @std.core.builtin.panicf([2 x i64] %927, [2 x i64] %928, [2 x i64] %929, i32 154, [2 x i64] %931), !dbg !3677
  unreachable, !dbg !3677

panic916:                                         ; preds = %cond.phi
  store i64 %sub914, ptr %taddr917, align 8
  %932 = insertvalue %any undef, ptr %taddr917, 0
  %933 = insertvalue %any %932, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr918, align 8
  %934 = load [2 x i64], ptr %taddr918, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr919, align 8
  %935 = load [2 x i64], ptr %taddr919, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr920, align 8
  %936 = load [2 x i64], ptr %taddr920, align 8
  store %any %933, ptr %varargslots921, align 8
  %937 = insertvalue %"any[]" undef, ptr %varargslots921, 0
  %"$$temp922" = insertvalue %"any[]" %937, i64 1, 1
  store %"any[]" %"$$temp922", ptr %taddr923, align 8
  %938 = load [2 x i64], ptr %taddr923, align 8
  call void @std.core.builtin.panicf([2 x i64] %934, [2 x i64] %935, [2 x i64] %936, i32 161, [2 x i64] %938), !dbg !3688
  unreachable, !dbg !3688

panic926:                                         ; preds = %checkok924
  store i64 8, ptr %taddr927, align 8
  %939 = insertvalue %any undef, ptr %taddr927, 0
  %940 = insertvalue %any %939, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sub914, ptr %taddr928, align 8
  %941 = insertvalue %any undef, ptr %taddr928, 0
  %942 = insertvalue %any %941, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr929, align 8
  %943 = load [2 x i64], ptr %taddr929, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr930, align 8
  %944 = load [2 x i64], ptr %taddr930, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr931, align 8
  %945 = load [2 x i64], ptr %taddr931, align 8
  store %any %940, ptr %varargslots932, align 8
  %ptradd933 = getelementptr inbounds i8, ptr %varargslots932, i64 16
  store %any %942, ptr %ptradd933, align 8
  %946 = insertvalue %"any[]" undef, ptr %varargslots932, 0
  %"$$temp934" = insertvalue %"any[]" %946, i64 2, 1
  store %"any[]" %"$$temp934", ptr %taddr935, align 8
  %947 = load [2 x i64], ptr %taddr935, align 8
  call void @std.core.builtin.panicf([2 x i64] %943, [2 x i64] %944, [2 x i64] %945, i32 161, [2 x i64] %947), !dbg !3688
  unreachable, !dbg !3688

panic943:                                         ; preds = %loop.body940
  store i64 %sext941, ptr %taddr944, align 8
  %948 = insertvalue %any undef, ptr %taddr944, 0
  %949 = insertvalue %any %948, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr945, align 8
  %950 = load [2 x i64], ptr %taddr945, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr946, align 8
  %951 = load [2 x i64], ptr %taddr946, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr947, align 8
  %952 = load [2 x i64], ptr %taddr947, align 8
  store %any %949, ptr %varargslots948, align 8
  %953 = insertvalue %"any[]" undef, ptr %varargslots948, 0
  %"$$temp949" = insertvalue %"any[]" %953, i64 1, 1
  store %"any[]" %"$$temp949", ptr %taddr950, align 8
  %954 = load [2 x i64], ptr %taddr950, align 8
  call void @std.core.builtin.panicf([2 x i64] %950, [2 x i64] %951, [2 x i64] %952, i32 165, [2 x i64] %954), !dbg !3699
  unreachable, !dbg !3699

panic953:                                         ; preds = %checkok951
  store i64 128, ptr %taddr954, align 8
  %955 = insertvalue %any undef, ptr %taddr954, 0
  %956 = insertvalue %any %955, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext941, ptr %taddr955, align 8
  %957 = insertvalue %any undef, ptr %taddr955, 0
  %958 = insertvalue %any %957, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr956, align 8
  %959 = load [2 x i64], ptr %taddr956, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr957, align 8
  %960 = load [2 x i64], ptr %taddr957, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr958, align 8
  %961 = load [2 x i64], ptr %taddr958, align 8
  store %any %956, ptr %varargslots959, align 8
  %ptradd960 = getelementptr inbounds i8, ptr %varargslots959, i64 16
  store %any %958, ptr %ptradd960, align 8
  %962 = insertvalue %"any[]" undef, ptr %varargslots959, 0
  %"$$temp961" = insertvalue %"any[]" %962, i64 2, 1
  store %"any[]" %"$$temp961", ptr %taddr962, align 8
  %963 = load [2 x i64], ptr %taddr962, align 8
  call void @std.core.builtin.panicf([2 x i64] %959, [2 x i64] %960, [2 x i64] %961, i32 165, [2 x i64] %963), !dbg !3699
  unreachable, !dbg !3699

panic966:                                         ; preds = %checkok963
  store %"char[]" { ptr @.panic_msg.85, i64 10 }, ptr %taddr967, align 8
  %964 = load [2 x i64], ptr %taddr967, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr968, align 8
  %965 = load [2 x i64], ptr %taddr968, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr969, align 8
  %966 = load [2 x i64], ptr %taddr969, align 8
  %967 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %967([2 x i64] %964, [2 x i64] %965, [2 x i64] %966, i32 165), !dbg !3701
  unreachable, !dbg !3701

panic974:                                         ; preds = %checkok970
  store i64 %sext972, ptr %taddr975, align 8
  %968 = insertvalue %any undef, ptr %taddr975, 0
  %969 = insertvalue %any %968, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr976, align 8
  %970 = load [2 x i64], ptr %taddr976, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr977, align 8
  %971 = load [2 x i64], ptr %taddr977, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr978, align 8
  %972 = load [2 x i64], ptr %taddr978, align 8
  store %any %969, ptr %varargslots979, align 8
  %973 = insertvalue %"any[]" undef, ptr %varargslots979, 0
  %"$$temp980" = insertvalue %"any[]" %973, i64 1, 1
  store %"any[]" %"$$temp980", ptr %taddr981, align 8
  %974 = load [2 x i64], ptr %taddr981, align 8
  call void @std.core.builtin.panicf([2 x i64] %970, [2 x i64] %971, [2 x i64] %972, i32 166, [2 x i64] %974), !dbg !3702
  unreachable, !dbg !3702

panic984:                                         ; preds = %checkok982
  store i64 128, ptr %taddr985, align 8
  %975 = insertvalue %any undef, ptr %taddr985, 0
  %976 = insertvalue %any %975, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext972, ptr %taddr986, align 8
  %977 = insertvalue %any undef, ptr %taddr986, 0
  %978 = insertvalue %any %977, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr987, align 8
  %979 = load [2 x i64], ptr %taddr987, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr988, align 8
  %980 = load [2 x i64], ptr %taddr988, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr989, align 8
  %981 = load [2 x i64], ptr %taddr989, align 8
  store %any %976, ptr %varargslots990, align 8
  %ptradd991 = getelementptr inbounds i8, ptr %varargslots990, i64 16
  store %any %978, ptr %ptradd991, align 8
  %982 = insertvalue %"any[]" undef, ptr %varargslots990, 0
  %"$$temp992" = insertvalue %"any[]" %982, i64 2, 1
  store %"any[]" %"$$temp992", ptr %taddr993, align 8
  %983 = load [2 x i64], ptr %taddr993, align 8
  call void @std.core.builtin.panicf([2 x i64] %979, [2 x i64] %980, [2 x i64] %981, i32 166, [2 x i64] %983), !dbg !3702
  unreachable, !dbg !3702

panic998:                                         ; preds = %checkok994
  store i64 %sext996, ptr %taddr999, align 8
  %984 = insertvalue %any undef, ptr %taddr999, 0
  %985 = insertvalue %any %984, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1000, align 8
  %986 = load [2 x i64], ptr %taddr1000, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1001, align 8
  %987 = load [2 x i64], ptr %taddr1001, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1002, align 8
  %988 = load [2 x i64], ptr %taddr1002, align 8
  store %any %985, ptr %varargslots1003, align 8
  %989 = insertvalue %"any[]" undef, ptr %varargslots1003, 0
  %"$$temp1004" = insertvalue %"any[]" %989, i64 1, 1
  store %"any[]" %"$$temp1004", ptr %taddr1005, align 8
  %990 = load [2 x i64], ptr %taddr1005, align 8
  call void @std.core.builtin.panicf([2 x i64] %986, [2 x i64] %987, [2 x i64] %988, i32 166, [2 x i64] %990), !dbg !3703
  unreachable, !dbg !3703

panic1008:                                        ; preds = %checkok1006
  store i64 128, ptr %taddr1009, align 8
  %991 = insertvalue %any undef, ptr %taddr1009, 0
  %992 = insertvalue %any %991, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext996, ptr %taddr1010, align 8
  %993 = insertvalue %any undef, ptr %taddr1010, 0
  %994 = insertvalue %any %993, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1011, align 8
  %995 = load [2 x i64], ptr %taddr1011, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1012, align 8
  %996 = load [2 x i64], ptr %taddr1012, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1013, align 8
  %997 = load [2 x i64], ptr %taddr1013, align 8
  store %any %992, ptr %varargslots1014, align 8
  %ptradd1015 = getelementptr inbounds i8, ptr %varargslots1014, i64 16
  store %any %994, ptr %ptradd1015, align 8
  %998 = insertvalue %"any[]" undef, ptr %varargslots1014, 0
  %"$$temp1016" = insertvalue %"any[]" %998, i64 2, 1
  store %"any[]" %"$$temp1016", ptr %taddr1017, align 8
  %999 = load [2 x i64], ptr %taddr1017, align 8
  call void @std.core.builtin.panicf([2 x i64] %995, [2 x i64] %996, [2 x i64] %997, i32 166, [2 x i64] %999), !dbg !3703
  unreachable, !dbg !3703

panic1021:                                        ; preds = %checkok1018
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr1022, align 8
  %1000 = load [2 x i64], ptr %taddr1022, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1023, align 8
  %1001 = load [2 x i64], ptr %taddr1023, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1024, align 8
  %1002 = load [2 x i64], ptr %taddr1024, align 8
  %1003 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1003([2 x i64] %1000, [2 x i64] %1001, [2 x i64] %1002, i32 166), !dbg !3705
  unreachable, !dbg !3705

panic1028:                                        ; preds = %checkok1025
  store %"char[]" { ptr @.panic_msg.83, i64 17 }, ptr %taddr1029, align 8
  %1004 = load [2 x i64], ptr %taddr1029, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1030, align 8
  %1005 = load [2 x i64], ptr %taddr1030, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1031, align 8
  %1006 = load [2 x i64], ptr %taddr1031, align 8
  %1007 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1007([2 x i64] %1004, [2 x i64] %1005, [2 x i64] %1006, i32 167), !dbg !3708
  unreachable, !dbg !3708

panic1039:                                        ; preds = %and.rhs1036
  store i64 %sext1037, ptr %taddr1040, align 8
  %1008 = insertvalue %any undef, ptr %taddr1040, 0
  %1009 = insertvalue %any %1008, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1041, align 8
  %1010 = load [2 x i64], ptr %taddr1041, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1042, align 8
  %1011 = load [2 x i64], ptr %taddr1042, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1043, align 8
  %1012 = load [2 x i64], ptr %taddr1043, align 8
  store %any %1009, ptr %varargslots1044, align 8
  %1013 = insertvalue %"any[]" undef, ptr %varargslots1044, 0
  %"$$temp1045" = insertvalue %"any[]" %1013, i64 1, 1
  store %"any[]" %"$$temp1045", ptr %taddr1046, align 8
  %1014 = load [2 x i64], ptr %taddr1046, align 8
  call void @std.core.builtin.panicf([2 x i64] %1010, [2 x i64] %1011, [2 x i64] %1012, i32 168, [2 x i64] %1014), !dbg !3712
  unreachable, !dbg !3712

panic1049:                                        ; preds = %checkok1047
  store i64 128, ptr %taddr1050, align 8
  %1015 = insertvalue %any undef, ptr %taddr1050, 0
  %1016 = insertvalue %any %1015, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1037, ptr %taddr1051, align 8
  %1017 = insertvalue %any undef, ptr %taddr1051, 0
  %1018 = insertvalue %any %1017, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1052, align 8
  %1019 = load [2 x i64], ptr %taddr1052, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1053, align 8
  %1020 = load [2 x i64], ptr %taddr1053, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1054, align 8
  %1021 = load [2 x i64], ptr %taddr1054, align 8
  store %any %1016, ptr %varargslots1055, align 8
  %ptradd1056 = getelementptr inbounds i8, ptr %varargslots1055, i64 16
  store %any %1018, ptr %ptradd1056, align 8
  %1022 = insertvalue %"any[]" undef, ptr %varargslots1055, 0
  %"$$temp1057" = insertvalue %"any[]" %1022, i64 2, 1
  store %"any[]" %"$$temp1057", ptr %taddr1058, align 8
  %1023 = load [2 x i64], ptr %taddr1058, align 8
  call void @std.core.builtin.panicf([2 x i64] %1019, [2 x i64] %1020, [2 x i64] %1021, i32 168, [2 x i64] %1023), !dbg !3712
  unreachable, !dbg !3712

panic1076:                                        ; preds = %if.then1072
  store i64 %sext1074, ptr %taddr1077, align 8
  %1024 = insertvalue %any undef, ptr %taddr1077, 0
  %1025 = insertvalue %any %1024, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1078, align 8
  %1026 = load [2 x i64], ptr %taddr1078, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1079, align 8
  %1027 = load [2 x i64], ptr %taddr1079, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1080, align 8
  %1028 = load [2 x i64], ptr %taddr1080, align 8
  store %any %1025, ptr %varargslots1081, align 8
  %1029 = insertvalue %"any[]" undef, ptr %varargslots1081, 0
  %"$$temp1082" = insertvalue %"any[]" %1029, i64 1, 1
  store %"any[]" %"$$temp1082", ptr %taddr1083, align 8
  %1030 = load [2 x i64], ptr %taddr1083, align 8
  call void @std.core.builtin.panicf([2 x i64] %1026, [2 x i64] %1027, [2 x i64] %1028, i32 174, [2 x i64] %1030), !dbg !3718
  unreachable, !dbg !3718

panic1086:                                        ; preds = %checkok1084
  store i64 128, ptr %taddr1087, align 8
  %1031 = insertvalue %any undef, ptr %taddr1087, 0
  %1032 = insertvalue %any %1031, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1074, ptr %taddr1088, align 8
  %1033 = insertvalue %any undef, ptr %taddr1088, 0
  %1034 = insertvalue %any %1033, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1089, align 8
  %1035 = load [2 x i64], ptr %taddr1089, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1090, align 8
  %1036 = load [2 x i64], ptr %taddr1090, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1091, align 8
  %1037 = load [2 x i64], ptr %taddr1091, align 8
  store %any %1032, ptr %varargslots1092, align 8
  %ptradd1093 = getelementptr inbounds i8, ptr %varargslots1092, i64 16
  store %any %1034, ptr %ptradd1093, align 8
  %1038 = insertvalue %"any[]" undef, ptr %varargslots1092, 0
  %"$$temp1094" = insertvalue %"any[]" %1038, i64 2, 1
  store %"any[]" %"$$temp1094", ptr %taddr1095, align 8
  %1039 = load [2 x i64], ptr %taddr1095, align 8
  call void @std.core.builtin.panicf([2 x i64] %1035, [2 x i64] %1036, [2 x i64] %1037, i32 174, [2 x i64] %1039), !dbg !3718
  unreachable, !dbg !3718

panic1109:                                        ; preds = %and.rhs1106
  store i64 %sext1107, ptr %taddr1110, align 8
  %1040 = insertvalue %any undef, ptr %taddr1110, 0
  %1041 = insertvalue %any %1040, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1111, align 8
  %1042 = load [2 x i64], ptr %taddr1111, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1112, align 8
  %1043 = load [2 x i64], ptr %taddr1112, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1113, align 8
  %1044 = load [2 x i64], ptr %taddr1113, align 8
  store %any %1041, ptr %varargslots1114, align 8
  %1045 = insertvalue %"any[]" undef, ptr %varargslots1114, 0
  %"$$temp1115" = insertvalue %"any[]" %1045, i64 1, 1
  store %"any[]" %"$$temp1115", ptr %taddr1116, align 8
  %1046 = load [2 x i64], ptr %taddr1116, align 8
  call void @std.core.builtin.panicf([2 x i64] %1042, [2 x i64] %1043, [2 x i64] %1044, i32 179, [2 x i64] %1046), !dbg !3727
  unreachable, !dbg !3727

panic1119:                                        ; preds = %checkok1117
  store i64 128, ptr %taddr1120, align 8
  %1047 = insertvalue %any undef, ptr %taddr1120, 0
  %1048 = insertvalue %any %1047, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1107, ptr %taddr1121, align 8
  %1049 = insertvalue %any undef, ptr %taddr1121, 0
  %1050 = insertvalue %any %1049, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1122, align 8
  %1051 = load [2 x i64], ptr %taddr1122, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1123, align 8
  %1052 = load [2 x i64], ptr %taddr1123, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1124, align 8
  %1053 = load [2 x i64], ptr %taddr1124, align 8
  store %any %1048, ptr %varargslots1125, align 8
  %ptradd1126 = getelementptr inbounds i8, ptr %varargslots1125, i64 16
  store %any %1050, ptr %ptradd1126, align 8
  %1054 = insertvalue %"any[]" undef, ptr %varargslots1125, 0
  %"$$temp1127" = insertvalue %"any[]" %1054, i64 2, 1
  store %"any[]" %"$$temp1127", ptr %taddr1128, align 8
  %1055 = load [2 x i64], ptr %taddr1128, align 8
  call void @std.core.builtin.panicf([2 x i64] %1051, [2 x i64] %1052, [2 x i64] %1053, i32 179, [2 x i64] %1055), !dbg !3727
  unreachable, !dbg !3727

panic1145:                                        ; preds = %loop.body1141
  store i64 %sext1143, ptr %taddr1146, align 8
  %1056 = insertvalue %any undef, ptr %taddr1146, 0
  %1057 = insertvalue %any %1056, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1147, align 8
  %1058 = load [2 x i64], ptr %taddr1147, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1148, align 8
  %1059 = load [2 x i64], ptr %taddr1148, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1149, align 8
  %1060 = load [2 x i64], ptr %taddr1149, align 8
  store %any %1057, ptr %varargslots1150, align 8
  %1061 = insertvalue %"any[]" undef, ptr %varargslots1150, 0
  %"$$temp1151" = insertvalue %"any[]" %1061, i64 1, 1
  store %"any[]" %"$$temp1151", ptr %taddr1152, align 8
  %1062 = load [2 x i64], ptr %taddr1152, align 8
  call void @std.core.builtin.panicf([2 x i64] %1058, [2 x i64] %1059, [2 x i64] %1060, i32 185, [2 x i64] %1062), !dbg !3739
  unreachable, !dbg !3739

panic1155:                                        ; preds = %checkok1153
  store i64 128, ptr %taddr1156, align 8
  %1063 = insertvalue %any undef, ptr %taddr1156, 0
  %1064 = insertvalue %any %1063, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1143, ptr %taddr1157, align 8
  %1065 = insertvalue %any undef, ptr %taddr1157, 0
  %1066 = insertvalue %any %1065, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1158, align 8
  %1067 = load [2 x i64], ptr %taddr1158, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1159, align 8
  %1068 = load [2 x i64], ptr %taddr1159, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1160, align 8
  %1069 = load [2 x i64], ptr %taddr1160, align 8
  store %any %1064, ptr %varargslots1161, align 8
  %ptradd1162 = getelementptr inbounds i8, ptr %varargslots1161, i64 16
  store %any %1066, ptr %ptradd1162, align 8
  %1070 = insertvalue %"any[]" undef, ptr %varargslots1161, 0
  %"$$temp1163" = insertvalue %"any[]" %1070, i64 2, 1
  store %"any[]" %"$$temp1163", ptr %taddr1164, align 8
  %1071 = load [2 x i64], ptr %taddr1164, align 8
  call void @std.core.builtin.panicf([2 x i64] %1067, [2 x i64] %1068, [2 x i64] %1069, i32 185, [2 x i64] %1071), !dbg !3739
  unreachable, !dbg !3739

panic1176:                                        ; preds = %if.then1171
  store i64 %sext1174, ptr %taddr1177, align 8
  %1072 = insertvalue %any undef, ptr %taddr1177, 0
  %1073 = insertvalue %any %1072, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1178, align 8
  %1074 = load [2 x i64], ptr %taddr1178, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1179, align 8
  %1075 = load [2 x i64], ptr %taddr1179, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1180, align 8
  %1076 = load [2 x i64], ptr %taddr1180, align 8
  store %any %1073, ptr %varargslots1181, align 8
  %1077 = insertvalue %"any[]" undef, ptr %varargslots1181, 0
  %"$$temp1182" = insertvalue %"any[]" %1077, i64 1, 1
  store %"any[]" %"$$temp1182", ptr %taddr1183, align 8
  %1078 = load [2 x i64], ptr %taddr1183, align 8
  call void @std.core.builtin.panicf([2 x i64] %1074, [2 x i64] %1075, [2 x i64] %1076, i32 189, [2 x i64] %1078), !dbg !3746
  unreachable, !dbg !3746

panic1186:                                        ; preds = %checkok1184
  store i64 128, ptr %taddr1187, align 8
  %1079 = insertvalue %any undef, ptr %taddr1187, 0
  %1080 = insertvalue %any %1079, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1174, ptr %taddr1188, align 8
  %1081 = insertvalue %any undef, ptr %taddr1188, 0
  %1082 = insertvalue %any %1081, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1189, align 8
  %1083 = load [2 x i64], ptr %taddr1189, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1190, align 8
  %1084 = load [2 x i64], ptr %taddr1190, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1191, align 8
  %1085 = load [2 x i64], ptr %taddr1191, align 8
  store %any %1080, ptr %varargslots1192, align 8
  %ptradd1193 = getelementptr inbounds i8, ptr %varargslots1192, i64 16
  store %any %1082, ptr %ptradd1193, align 8
  %1086 = insertvalue %"any[]" undef, ptr %varargslots1192, 0
  %"$$temp1194" = insertvalue %"any[]" %1086, i64 2, 1
  store %"any[]" %"$$temp1194", ptr %taddr1195, align 8
  %1087 = load [2 x i64], ptr %taddr1195, align 8
  call void @std.core.builtin.panicf([2 x i64] %1083, [2 x i64] %1084, [2 x i64] %1085, i32 189, [2 x i64] %1087), !dbg !3746
  unreachable, !dbg !3746

panic1203:                                        ; preds = %if.else1200
  store i64 %sext1201, ptr %taddr1204, align 8
  %1088 = insertvalue %any undef, ptr %taddr1204, 0
  %1089 = insertvalue %any %1088, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1205, align 8
  %1090 = load [2 x i64], ptr %taddr1205, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1206, align 8
  %1091 = load [2 x i64], ptr %taddr1206, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1207, align 8
  %1092 = load [2 x i64], ptr %taddr1207, align 8
  store %any %1089, ptr %varargslots1208, align 8
  %1093 = insertvalue %"any[]" undef, ptr %varargslots1208, 0
  %"$$temp1209" = insertvalue %"any[]" %1093, i64 1, 1
  store %"any[]" %"$$temp1209", ptr %taddr1210, align 8
  %1094 = load [2 x i64], ptr %taddr1210, align 8
  call void @std.core.builtin.panicf([2 x i64] %1090, [2 x i64] %1091, [2 x i64] %1092, i32 194, [2 x i64] %1094), !dbg !3751
  unreachable, !dbg !3751

panic1213:                                        ; preds = %checkok1211
  store i64 128, ptr %taddr1214, align 8
  %1095 = insertvalue %any undef, ptr %taddr1214, 0
  %1096 = insertvalue %any %1095, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1201, ptr %taddr1215, align 8
  %1097 = insertvalue %any undef, ptr %taddr1215, 0
  %1098 = insertvalue %any %1097, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1216, align 8
  %1099 = load [2 x i64], ptr %taddr1216, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1217, align 8
  %1100 = load [2 x i64], ptr %taddr1217, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1218, align 8
  %1101 = load [2 x i64], ptr %taddr1218, align 8
  store %any %1096, ptr %varargslots1219, align 8
  %ptradd1220 = getelementptr inbounds i8, ptr %varargslots1219, i64 16
  store %any %1098, ptr %ptradd1220, align 8
  %1102 = insertvalue %"any[]" undef, ptr %varargslots1219, 0
  %"$$temp1221" = insertvalue %"any[]" %1102, i64 2, 1
  store %"any[]" %"$$temp1221", ptr %taddr1222, align 8
  %1103 = load [2 x i64], ptr %taddr1222, align 8
  call void @std.core.builtin.panicf([2 x i64] %1099, [2 x i64] %1100, [2 x i64] %1101, i32 194, [2 x i64] %1103), !dbg !3751
  unreachable, !dbg !3751

panic1237:                                        ; preds = %and.rhs1234
  store i64 %sext1235, ptr %taddr1238, align 8
  %1104 = insertvalue %any undef, ptr %taddr1238, 0
  %1105 = insertvalue %any %1104, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1239, align 8
  %1106 = load [2 x i64], ptr %taddr1239, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1240, align 8
  %1107 = load [2 x i64], ptr %taddr1240, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1241, align 8
  %1108 = load [2 x i64], ptr %taddr1241, align 8
  store %any %1105, ptr %varargslots1242, align 8
  %1109 = insertvalue %"any[]" undef, ptr %varargslots1242, 0
  %"$$temp1243" = insertvalue %"any[]" %1109, i64 1, 1
  store %"any[]" %"$$temp1243", ptr %taddr1244, align 8
  %1110 = load [2 x i64], ptr %taddr1244, align 8
  call void @std.core.builtin.panicf([2 x i64] %1106, [2 x i64] %1107, [2 x i64] %1108, i32 196, [2 x i64] %1110), !dbg !3757
  unreachable, !dbg !3757

panic1247:                                        ; preds = %checkok1245
  store i64 128, ptr %taddr1248, align 8
  %1111 = insertvalue %any undef, ptr %taddr1248, 0
  %1112 = insertvalue %any %1111, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1235, ptr %taddr1249, align 8
  %1113 = insertvalue %any undef, ptr %taddr1249, 0
  %1114 = insertvalue %any %1113, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1250, align 8
  %1115 = load [2 x i64], ptr %taddr1250, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1251, align 8
  %1116 = load [2 x i64], ptr %taddr1251, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1252, align 8
  %1117 = load [2 x i64], ptr %taddr1252, align 8
  store %any %1112, ptr %varargslots1253, align 8
  %ptradd1254 = getelementptr inbounds i8, ptr %varargslots1253, i64 16
  store %any %1114, ptr %ptradd1254, align 8
  %1118 = insertvalue %"any[]" undef, ptr %varargslots1253, 0
  %"$$temp1255" = insertvalue %"any[]" %1118, i64 2, 1
  store %"any[]" %"$$temp1255", ptr %taddr1256, align 8
  %1119 = load [2 x i64], ptr %taddr1256, align 8
  call void @std.core.builtin.panicf([2 x i64] %1115, [2 x i64] %1116, [2 x i64] %1117, i32 196, [2 x i64] %1119), !dbg !3757
  unreachable, !dbg !3757

panic1283:                                        ; preds = %if.then1276
  store i64 %sext1281, ptr %taddr1284, align 8
  %1120 = insertvalue %any undef, ptr %taddr1284, 0
  %1121 = insertvalue %any %1120, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1285, align 8
  %1122 = load [2 x i64], ptr %taddr1285, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1286, align 8
  %1123 = load [2 x i64], ptr %taddr1286, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1287, align 8
  %1124 = load [2 x i64], ptr %taddr1287, align 8
  store %any %1121, ptr %varargslots1288, align 8
  %1125 = insertvalue %"any[]" undef, ptr %varargslots1288, 0
  %"$$temp1289" = insertvalue %"any[]" %1125, i64 1, 1
  store %"any[]" %"$$temp1289", ptr %taddr1290, align 8
  %1126 = load [2 x i64], ptr %taddr1290, align 8
  call void @std.core.builtin.panicf([2 x i64] %1122, [2 x i64] %1123, [2 x i64] %1124, i32 206, [2 x i64] %1126), !dbg !3771
  unreachable, !dbg !3771

panic1293:                                        ; preds = %checkok1291
  store i64 128, ptr %taddr1294, align 8
  %1127 = insertvalue %any undef, ptr %taddr1294, 0
  %1128 = insertvalue %any %1127, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1281, ptr %taddr1295, align 8
  %1129 = insertvalue %any undef, ptr %taddr1295, 0
  %1130 = insertvalue %any %1129, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1296, align 8
  %1131 = load [2 x i64], ptr %taddr1296, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1297, align 8
  %1132 = load [2 x i64], ptr %taddr1297, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1298, align 8
  %1133 = load [2 x i64], ptr %taddr1298, align 8
  store %any %1128, ptr %varargslots1299, align 8
  %ptradd1300 = getelementptr inbounds i8, ptr %varargslots1299, i64 16
  store %any %1130, ptr %ptradd1300, align 8
  %1134 = insertvalue %"any[]" undef, ptr %varargslots1299, 0
  %"$$temp1301" = insertvalue %"any[]" %1134, i64 2, 1
  store %"any[]" %"$$temp1301", ptr %taddr1302, align 8
  %1135 = load [2 x i64], ptr %taddr1302, align 8
  call void @std.core.builtin.panicf([2 x i64] %1131, [2 x i64] %1132, [2 x i64] %1133, i32 206, [2 x i64] %1135), !dbg !3771
  unreachable, !dbg !3771

panic1307:                                        ; preds = %checkok1303
  store i64 %sext1305, ptr %taddr1308, align 8
  %1136 = insertvalue %any undef, ptr %taddr1308, 0
  %1137 = insertvalue %any %1136, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1309, align 8
  %1138 = load [2 x i64], ptr %taddr1309, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1310, align 8
  %1139 = load [2 x i64], ptr %taddr1310, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1311, align 8
  %1140 = load [2 x i64], ptr %taddr1311, align 8
  store %any %1137, ptr %varargslots1312, align 8
  %1141 = insertvalue %"any[]" undef, ptr %varargslots1312, 0
  %"$$temp1313" = insertvalue %"any[]" %1141, i64 1, 1
  store %"any[]" %"$$temp1313", ptr %taddr1314, align 8
  %1142 = load [2 x i64], ptr %taddr1314, align 8
  call void @std.core.builtin.panicf([2 x i64] %1138, [2 x i64] %1139, [2 x i64] %1140, i32 206, [2 x i64] %1142), !dbg !3772
  unreachable, !dbg !3772

panic1317:                                        ; preds = %checkok1315
  store i64 128, ptr %taddr1318, align 8
  %1143 = insertvalue %any undef, ptr %taddr1318, 0
  %1144 = insertvalue %any %1143, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1305, ptr %taddr1319, align 8
  %1145 = insertvalue %any undef, ptr %taddr1319, 0
  %1146 = insertvalue %any %1145, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1320, align 8
  %1147 = load [2 x i64], ptr %taddr1320, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1321, align 8
  %1148 = load [2 x i64], ptr %taddr1321, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1322, align 8
  %1149 = load [2 x i64], ptr %taddr1322, align 8
  store %any %1144, ptr %varargslots1323, align 8
  %ptradd1324 = getelementptr inbounds i8, ptr %varargslots1323, i64 16
  store %any %1146, ptr %ptradd1324, align 8
  %1150 = insertvalue %"any[]" undef, ptr %varargslots1323, 0
  %"$$temp1325" = insertvalue %"any[]" %1150, i64 2, 1
  store %"any[]" %"$$temp1325", ptr %taddr1326, align 8
  %1151 = load [2 x i64], ptr %taddr1326, align 8
  call void @std.core.builtin.panicf([2 x i64] %1147, [2 x i64] %1148, [2 x i64] %1149, i32 206, [2 x i64] %1151), !dbg !3772
  unreachable, !dbg !3772

panic1333:                                        ; preds = %if.exit1330
  store i64 %sext1331, ptr %taddr1334, align 8
  %1152 = insertvalue %any undef, ptr %taddr1334, 0
  %1153 = insertvalue %any %1152, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1335, align 8
  %1154 = load [2 x i64], ptr %taddr1335, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1336, align 8
  %1155 = load [2 x i64], ptr %taddr1336, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1337, align 8
  %1156 = load [2 x i64], ptr %taddr1337, align 8
  store %any %1153, ptr %varargslots1338, align 8
  %1157 = insertvalue %"any[]" undef, ptr %varargslots1338, 0
  %"$$temp1339" = insertvalue %"any[]" %1157, i64 1, 1
  store %"any[]" %"$$temp1339", ptr %taddr1340, align 8
  %1158 = load [2 x i64], ptr %taddr1340, align 8
  call void @std.core.builtin.panicf([2 x i64] %1154, [2 x i64] %1155, [2 x i64] %1156, i32 208, [2 x i64] %1158), !dbg !3774
  unreachable, !dbg !3774

panic1343:                                        ; preds = %checkok1341
  store i64 128, ptr %taddr1344, align 8
  %1159 = insertvalue %any undef, ptr %taddr1344, 0
  %1160 = insertvalue %any %1159, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1331, ptr %taddr1345, align 8
  %1161 = insertvalue %any undef, ptr %taddr1345, 0
  %1162 = insertvalue %any %1161, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1346, align 8
  %1163 = load [2 x i64], ptr %taddr1346, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1347, align 8
  %1164 = load [2 x i64], ptr %taddr1347, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1348, align 8
  %1165 = load [2 x i64], ptr %taddr1348, align 8
  store %any %1160, ptr %varargslots1349, align 8
  %ptradd1350 = getelementptr inbounds i8, ptr %varargslots1349, i64 16
  store %any %1162, ptr %ptradd1350, align 8
  %1166 = insertvalue %"any[]" undef, ptr %varargslots1349, 0
  %"$$temp1351" = insertvalue %"any[]" %1166, i64 2, 1
  store %"any[]" %"$$temp1351", ptr %taddr1352, align 8
  %1167 = load [2 x i64], ptr %taddr1352, align 8
  call void @std.core.builtin.panicf([2 x i64] %1163, [2 x i64] %1164, [2 x i64] %1165, i32 208, [2 x i64] %1167), !dbg !3774
  unreachable, !dbg !3774

panic1368:                                        ; preds = %or.rhs1365
  store i64 %sext1366, ptr %taddr1369, align 8
  %1168 = insertvalue %any undef, ptr %taddr1369, 0
  %1169 = insertvalue %any %1168, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1370, align 8
  %1170 = load [2 x i64], ptr %taddr1370, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1371, align 8
  %1171 = load [2 x i64], ptr %taddr1371, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1372, align 8
  %1172 = load [2 x i64], ptr %taddr1372, align 8
  store %any %1169, ptr %varargslots1373, align 8
  %1173 = insertvalue %"any[]" undef, ptr %varargslots1373, 0
  %"$$temp1374" = insertvalue %"any[]" %1173, i64 1, 1
  store %"any[]" %"$$temp1374", ptr %taddr1375, align 8
  %1174 = load [2 x i64], ptr %taddr1375, align 8
  call void @std.core.builtin.panicf([2 x i64] %1170, [2 x i64] %1171, [2 x i64] %1172, i32 221, [2 x i64] %1174), !dbg !3795
  unreachable, !dbg !3795

panic1378:                                        ; preds = %checkok1376
  store i64 128, ptr %taddr1379, align 8
  %1175 = insertvalue %any undef, ptr %taddr1379, 0
  %1176 = insertvalue %any %1175, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1366, ptr %taddr1380, align 8
  %1177 = insertvalue %any undef, ptr %taddr1380, 0
  %1178 = insertvalue %any %1177, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1381, align 8
  %1179 = load [2 x i64], ptr %taddr1381, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1382, align 8
  %1180 = load [2 x i64], ptr %taddr1382, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1383, align 8
  %1181 = load [2 x i64], ptr %taddr1383, align 8
  store %any %1176, ptr %varargslots1384, align 8
  %ptradd1385 = getelementptr inbounds i8, ptr %varargslots1384, i64 16
  store %any %1178, ptr %ptradd1385, align 8
  %1182 = insertvalue %"any[]" undef, ptr %varargslots1384, 0
  %"$$temp1386" = insertvalue %"any[]" %1182, i64 2, 1
  store %"any[]" %"$$temp1386", ptr %taddr1387, align 8
  %1183 = load [2 x i64], ptr %taddr1387, align 8
  call void @std.core.builtin.panicf([2 x i64] %1179, [2 x i64] %1180, [2 x i64] %1181, i32 221, [2 x i64] %1183), !dbg !3795
  unreachable, !dbg !3795

panic1392:                                        ; preds = %checkok1388
  store i64 %sext1390, ptr %taddr1393, align 8
  %1184 = insertvalue %any undef, ptr %taddr1393, 0
  %1185 = insertvalue %any %1184, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1394, align 8
  %1186 = load [2 x i64], ptr %taddr1394, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1395, align 8
  %1187 = load [2 x i64], ptr %taddr1395, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1396, align 8
  %1188 = load [2 x i64], ptr %taddr1396, align 8
  store %any %1185, ptr %varargslots1397, align 8
  %1189 = insertvalue %"any[]" undef, ptr %varargslots1397, 0
  %"$$temp1398" = insertvalue %"any[]" %1189, i64 1, 1
  store %"any[]" %"$$temp1398", ptr %taddr1399, align 8
  %1190 = load [2 x i64], ptr %taddr1399, align 8
  call void @std.core.builtin.panicf([2 x i64] %1186, [2 x i64] %1187, [2 x i64] %1188, i32 221, [2 x i64] %1190), !dbg !3796
  unreachable, !dbg !3796

panic1402:                                        ; preds = %checkok1400
  store i64 2, ptr %taddr1403, align 8
  %1191 = insertvalue %any undef, ptr %taddr1403, 0
  %1192 = insertvalue %any %1191, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1390, ptr %taddr1404, align 8
  %1193 = insertvalue %any undef, ptr %taddr1404, 0
  %1194 = insertvalue %any %1193, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1405, align 8
  %1195 = load [2 x i64], ptr %taddr1405, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1406, align 8
  %1196 = load [2 x i64], ptr %taddr1406, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1407, align 8
  %1197 = load [2 x i64], ptr %taddr1407, align 8
  store %any %1192, ptr %varargslots1408, align 8
  %ptradd1409 = getelementptr inbounds i8, ptr %varargslots1408, i64 16
  store %any %1194, ptr %ptradd1409, align 8
  %1198 = insertvalue %"any[]" undef, ptr %varargslots1408, 0
  %"$$temp1410" = insertvalue %"any[]" %1198, i64 2, 1
  store %"any[]" %"$$temp1410", ptr %taddr1411, align 8
  %1199 = load [2 x i64], ptr %taddr1411, align 8
  call void @std.core.builtin.panicf([2 x i64] %1195, [2 x i64] %1196, [2 x i64] %1197, i32 221, [2 x i64] %1199), !dbg !3796
  unreachable, !dbg !3796

panic1423:                                        ; preds = %if.exit1418
  store i64 %sext1421, ptr %taddr1424, align 8
  %1200 = insertvalue %any undef, ptr %taddr1424, 0
  %1201 = insertvalue %any %1200, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1425, align 8
  %1202 = load [2 x i64], ptr %taddr1425, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1426, align 8
  %1203 = load [2 x i64], ptr %taddr1426, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1427, align 8
  %1204 = load [2 x i64], ptr %taddr1427, align 8
  store %any %1201, ptr %varargslots1428, align 8
  %1205 = insertvalue %"any[]" undef, ptr %varargslots1428, 0
  %"$$temp1429" = insertvalue %"any[]" %1205, i64 1, 1
  store %"any[]" %"$$temp1429", ptr %taddr1430, align 8
  %1206 = load [2 x i64], ptr %taddr1430, align 8
  call void @std.core.builtin.panicf([2 x i64] %1202, [2 x i64] %1203, [2 x i64] %1204, i32 226, [2 x i64] %1206), !dbg !3801
  unreachable, !dbg !3801

panic1433:                                        ; preds = %checkok1431
  store i64 128, ptr %taddr1434, align 8
  %1207 = insertvalue %any undef, ptr %taddr1434, 0
  %1208 = insertvalue %any %1207, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1421, ptr %taddr1435, align 8
  %1209 = insertvalue %any undef, ptr %taddr1435, 0
  %1210 = insertvalue %any %1209, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1436, align 8
  %1211 = load [2 x i64], ptr %taddr1436, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1437, align 8
  %1212 = load [2 x i64], ptr %taddr1437, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1438, align 8
  %1213 = load [2 x i64], ptr %taddr1438, align 8
  store %any %1208, ptr %varargslots1439, align 8
  %ptradd1440 = getelementptr inbounds i8, ptr %varargslots1439, i64 16
  store %any %1210, ptr %ptradd1440, align 8
  %1214 = insertvalue %"any[]" undef, ptr %varargslots1439, 0
  %"$$temp1441" = insertvalue %"any[]" %1214, i64 2, 1
  store %"any[]" %"$$temp1441", ptr %taddr1442, align 8
  %1215 = load [2 x i64], ptr %taddr1442, align 8
  call void @std.core.builtin.panicf([2 x i64] %1211, [2 x i64] %1212, [2 x i64] %1213, i32 226, [2 x i64] %1215), !dbg !3801
  unreachable, !dbg !3801

panic1447:                                        ; preds = %checkok1443
  store i64 %sext1445, ptr %taddr1448, align 8
  %1216 = insertvalue %any undef, ptr %taddr1448, 0
  %1217 = insertvalue %any %1216, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1449, align 8
  %1218 = load [2 x i64], ptr %taddr1449, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1450, align 8
  %1219 = load [2 x i64], ptr %taddr1450, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1451, align 8
  %1220 = load [2 x i64], ptr %taddr1451, align 8
  store %any %1217, ptr %varargslots1452, align 8
  %1221 = insertvalue %"any[]" undef, ptr %varargslots1452, 0
  %"$$temp1453" = insertvalue %"any[]" %1221, i64 1, 1
  store %"any[]" %"$$temp1453", ptr %taddr1454, align 8
  %1222 = load [2 x i64], ptr %taddr1454, align 8
  call void @std.core.builtin.panicf([2 x i64] %1218, [2 x i64] %1219, [2 x i64] %1220, i32 226, [2 x i64] %1222), !dbg !3803
  unreachable, !dbg !3803

panic1457:                                        ; preds = %checkok1455
  store i64 2, ptr %taddr1458, align 8
  %1223 = insertvalue %any undef, ptr %taddr1458, 0
  %1224 = insertvalue %any %1223, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1445, ptr %taddr1459, align 8
  %1225 = insertvalue %any undef, ptr %taddr1459, 0
  %1226 = insertvalue %any %1225, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1460, align 8
  %1227 = load [2 x i64], ptr %taddr1460, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1461, align 8
  %1228 = load [2 x i64], ptr %taddr1461, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1462, align 8
  %1229 = load [2 x i64], ptr %taddr1462, align 8
  store %any %1224, ptr %varargslots1463, align 8
  %ptradd1464 = getelementptr inbounds i8, ptr %varargslots1463, i64 16
  store %any %1226, ptr %ptradd1464, align 8
  %1230 = insertvalue %"any[]" undef, ptr %varargslots1463, 0
  %"$$temp1465" = insertvalue %"any[]" %1230, i64 2, 1
  store %"any[]" %"$$temp1465", ptr %taddr1466, align 8
  %1231 = load [2 x i64], ptr %taddr1466, align 8
  call void @std.core.builtin.panicf([2 x i64] %1227, [2 x i64] %1228, [2 x i64] %1229, i32 226, [2 x i64] %1231), !dbg !3803
  unreachable, !dbg !3803

panic1491:                                        ; preds = %loop.body1487
  store i64 %sext1489, ptr %taddr1492, align 8
  %1232 = insertvalue %any undef, ptr %taddr1492, 0
  %1233 = insertvalue %any %1232, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1493, align 8
  %1234 = load [2 x i64], ptr %taddr1493, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1494, align 8
  %1235 = load [2 x i64], ptr %taddr1494, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1495, align 8
  %1236 = load [2 x i64], ptr %taddr1495, align 8
  store %any %1233, ptr %varargslots1496, align 8
  %1237 = insertvalue %"any[]" undef, ptr %varargslots1496, 0
  %"$$temp1497" = insertvalue %"any[]" %1237, i64 1, 1
  store %"any[]" %"$$temp1497", ptr %taddr1498, align 8
  %1238 = load [2 x i64], ptr %taddr1498, align 8
  call void @std.core.builtin.panicf([2 x i64] %1234, [2 x i64] %1235, [2 x i64] %1236, i32 233, [2 x i64] %1238), !dbg !3821
  unreachable, !dbg !3821

panic1501:                                        ; preds = %checkok1499
  store i64 128, ptr %taddr1502, align 8
  %1239 = insertvalue %any undef, ptr %taddr1502, 0
  %1240 = insertvalue %any %1239, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1489, ptr %taddr1503, align 8
  %1241 = insertvalue %any undef, ptr %taddr1503, 0
  %1242 = insertvalue %any %1241, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1504, align 8
  %1243 = load [2 x i64], ptr %taddr1504, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1505, align 8
  %1244 = load [2 x i64], ptr %taddr1505, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1506, align 8
  %1245 = load [2 x i64], ptr %taddr1506, align 8
  store %any %1240, ptr %varargslots1507, align 8
  %ptradd1508 = getelementptr inbounds i8, ptr %varargslots1507, i64 16
  store %any %1242, ptr %ptradd1508, align 8
  %1246 = insertvalue %"any[]" undef, ptr %varargslots1507, 0
  %"$$temp1509" = insertvalue %"any[]" %1246, i64 2, 1
  store %"any[]" %"$$temp1509", ptr %taddr1510, align 8
  %1247 = load [2 x i64], ptr %taddr1510, align 8
  call void @std.core.builtin.panicf([2 x i64] %1243, [2 x i64] %1244, [2 x i64] %1245, i32 233, [2 x i64] %1247), !dbg !3821
  unreachable, !dbg !3821

panic1513:                                        ; preds = %checkok1511
  store i32 %507, ptr %taddr1514, align 4
  %1248 = insertvalue %any undef, ptr %taddr1514, 0
  %1249 = insertvalue %any %1248, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1515, align 8
  %1250 = load [2 x i64], ptr %taddr1515, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1516, align 8
  %1251 = load [2 x i64], ptr %taddr1516, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1517, align 8
  %1252 = load [2 x i64], ptr %taddr1517, align 8
  store %any %1249, ptr %varargslots1518, align 8
  %1253 = insertvalue %"any[]" undef, ptr %varargslots1518, 0
  %"$$temp1519" = insertvalue %"any[]" %1253, i64 1, 1
  store %"any[]" %"$$temp1519", ptr %taddr1520, align 8
  %1254 = load [2 x i64], ptr %taddr1520, align 8
  call void @std.core.builtin.panicf([2 x i64] %1250, [2 x i64] %1251, [2 x i64] %1252, i32 233, [2 x i64] %1254), !dbg !3823
  unreachable, !dbg !3823

panic1523:                                        ; preds = %checkok1521
  store i32 %507, ptr %taddr1524, align 4
  %1255 = insertvalue %any undef, ptr %taddr1524, 0
  %1256 = insertvalue %any %1255, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1525, align 8
  %1257 = load [2 x i64], ptr %taddr1525, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1526, align 8
  %1258 = load [2 x i64], ptr %taddr1526, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1527, align 8
  %1259 = load [2 x i64], ptr %taddr1527, align 8
  store %any %1256, ptr %varargslots1528, align 8
  %1260 = insertvalue %"any[]" undef, ptr %varargslots1528, 0
  %"$$temp1529" = insertvalue %"any[]" %1260, i64 1, 1
  store %"any[]" %"$$temp1529", ptr %taddr1530, align 8
  %1261 = load [2 x i64], ptr %taddr1530, align 8
  call void @std.core.builtin.panicf([2 x i64] %1257, [2 x i64] %1258, [2 x i64] %1259, i32 233, [2 x i64] %1261), !dbg !3823
  unreachable, !dbg !3823

panic1537:                                        ; preds = %checkok1531
  store i64 %sext1535, ptr %taddr1538, align 8
  %1262 = insertvalue %any undef, ptr %taddr1538, 0
  %1263 = insertvalue %any %1262, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1539, align 8
  %1264 = load [2 x i64], ptr %taddr1539, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1540, align 8
  %1265 = load [2 x i64], ptr %taddr1540, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1541, align 8
  %1266 = load [2 x i64], ptr %taddr1541, align 8
  store %any %1263, ptr %varargslots1542, align 8
  %1267 = insertvalue %"any[]" undef, ptr %varargslots1542, 0
  %"$$temp1543" = insertvalue %"any[]" %1267, i64 1, 1
  store %"any[]" %"$$temp1543", ptr %taddr1544, align 8
  %1268 = load [2 x i64], ptr %taddr1544, align 8
  call void @std.core.builtin.panicf([2 x i64] %1264, [2 x i64] %1265, [2 x i64] %1266, i32 234, [2 x i64] %1268), !dbg !3825
  unreachable, !dbg !3825

panic1547:                                        ; preds = %checkok1545
  store i64 128, ptr %taddr1548, align 8
  %1269 = insertvalue %any undef, ptr %taddr1548, 0
  %1270 = insertvalue %any %1269, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1535, ptr %taddr1549, align 8
  %1271 = insertvalue %any undef, ptr %taddr1549, 0
  %1272 = insertvalue %any %1271, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1550, align 8
  %1273 = load [2 x i64], ptr %taddr1550, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1551, align 8
  %1274 = load [2 x i64], ptr %taddr1551, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1552, align 8
  %1275 = load [2 x i64], ptr %taddr1552, align 8
  store %any %1270, ptr %varargslots1553, align 8
  %ptradd1554 = getelementptr inbounds i8, ptr %varargslots1553, i64 16
  store %any %1272, ptr %ptradd1554, align 8
  %1276 = insertvalue %"any[]" undef, ptr %varargslots1553, 0
  %"$$temp1555" = insertvalue %"any[]" %1276, i64 2, 1
  store %"any[]" %"$$temp1555", ptr %taddr1556, align 8
  %1277 = load [2 x i64], ptr %taddr1556, align 8
  call void @std.core.builtin.panicf([2 x i64] %1273, [2 x i64] %1274, [2 x i64] %1275, i32 234, [2 x i64] %1277), !dbg !3825
  unreachable, !dbg !3825

panic1561:                                        ; preds = %checkok1557
  store i64 %sext1559, ptr %taddr1562, align 8
  %1278 = insertvalue %any undef, ptr %taddr1562, 0
  %1279 = insertvalue %any %1278, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1563, align 8
  %1280 = load [2 x i64], ptr %taddr1563, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1564, align 8
  %1281 = load [2 x i64], ptr %taddr1564, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1565, align 8
  %1282 = load [2 x i64], ptr %taddr1565, align 8
  store %any %1279, ptr %varargslots1566, align 8
  %1283 = insertvalue %"any[]" undef, ptr %varargslots1566, 0
  %"$$temp1567" = insertvalue %"any[]" %1283, i64 1, 1
  store %"any[]" %"$$temp1567", ptr %taddr1568, align 8
  %1284 = load [2 x i64], ptr %taddr1568, align 8
  call void @std.core.builtin.panicf([2 x i64] %1280, [2 x i64] %1281, [2 x i64] %1282, i32 234, [2 x i64] %1284), !dbg !3826
  unreachable, !dbg !3826

panic1571:                                        ; preds = %checkok1569
  store i64 128, ptr %taddr1572, align 8
  %1285 = insertvalue %any undef, ptr %taddr1572, 0
  %1286 = insertvalue %any %1285, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1559, ptr %taddr1573, align 8
  %1287 = insertvalue %any undef, ptr %taddr1573, 0
  %1288 = insertvalue %any %1287, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1574, align 8
  %1289 = load [2 x i64], ptr %taddr1574, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1575, align 8
  %1290 = load [2 x i64], ptr %taddr1575, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1576, align 8
  %1291 = load [2 x i64], ptr %taddr1576, align 8
  store %any %1286, ptr %varargslots1577, align 8
  %ptradd1578 = getelementptr inbounds i8, ptr %varargslots1577, i64 16
  store %any %1288, ptr %ptradd1578, align 8
  %1292 = insertvalue %"any[]" undef, ptr %varargslots1577, 0
  %"$$temp1579" = insertvalue %"any[]" %1292, i64 2, 1
  store %"any[]" %"$$temp1579", ptr %taddr1580, align 8
  %1293 = load [2 x i64], ptr %taddr1580, align 8
  call void @std.core.builtin.panicf([2 x i64] %1289, [2 x i64] %1290, [2 x i64] %1291, i32 234, [2 x i64] %1293), !dbg !3826
  unreachable, !dbg !3826

panic1584:                                        ; preds = %checkok1581
  store i32 %518, ptr %taddr1585, align 4
  %1294 = insertvalue %any undef, ptr %taddr1585, 0
  %1295 = insertvalue %any %1294, i64 ptrtoint (ptr @"$ct.uint" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1586, align 8
  %1296 = load [2 x i64], ptr %taddr1586, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1587, align 8
  %1297 = load [2 x i64], ptr %taddr1587, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1588, align 8
  %1298 = load [2 x i64], ptr %taddr1588, align 8
  store %any %1295, ptr %varargslots1589, align 8
  %1299 = insertvalue %"any[]" undef, ptr %varargslots1589, 0
  %"$$temp1590" = insertvalue %"any[]" %1299, i64 1, 1
  store %"any[]" %"$$temp1590", ptr %taddr1591, align 8
  %1300 = load [2 x i64], ptr %taddr1591, align 8
  call void @std.core.builtin.panicf([2 x i64] %1296, [2 x i64] %1297, [2 x i64] %1298, i32 234, [2 x i64] %1300), !dbg !3828
  unreachable, !dbg !3828

panic1596:                                        ; preds = %checkok1592
  store i32 %522, ptr %taddr1597, align 4
  %1301 = insertvalue %any undef, ptr %taddr1597, 0
  %1302 = insertvalue %any %1301, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1598, align 8
  %1303 = load [2 x i64], ptr %taddr1598, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1599, align 8
  %1304 = load [2 x i64], ptr %taddr1599, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1600, align 8
  %1305 = load [2 x i64], ptr %taddr1600, align 8
  store %any %1302, ptr %varargslots1601, align 8
  %1306 = insertvalue %"any[]" undef, ptr %varargslots1601, 0
  %"$$temp1602" = insertvalue %"any[]" %1306, i64 1, 1
  store %"any[]" %"$$temp1602", ptr %taddr1603, align 8
  %1307 = load [2 x i64], ptr %taddr1603, align 8
  call void @std.core.builtin.panicf([2 x i64] %1303, [2 x i64] %1304, [2 x i64] %1305, i32 235, [2 x i64] %1307), !dbg !3831
  unreachable, !dbg !3831

panic1606:                                        ; preds = %checkok1604
  store i32 %522, ptr %taddr1607, align 4
  %1308 = insertvalue %any undef, ptr %taddr1607, 0
  %1309 = insertvalue %any %1308, i64 ptrtoint (ptr @"$ct.int" to i64), 1
  store %"char[]" { ptr @.panic_msg.84, i64 35 }, ptr %taddr1608, align 8
  %1310 = load [2 x i64], ptr %taddr1608, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1609, align 8
  %1311 = load [2 x i64], ptr %taddr1609, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1610, align 8
  %1312 = load [2 x i64], ptr %taddr1610, align 8
  store %any %1309, ptr %varargslots1611, align 8
  %1313 = insertvalue %"any[]" undef, ptr %varargslots1611, 0
  %"$$temp1612" = insertvalue %"any[]" %1313, i64 1, 1
  store %"any[]" %"$$temp1612", ptr %taddr1613, align 8
  %1314 = load [2 x i64], ptr %taddr1613, align 8
  call void @std.core.builtin.panicf([2 x i64] %1310, [2 x i64] %1311, [2 x i64] %1312, i32 235, [2 x i64] %1314), !dbg !3831
  unreachable, !dbg !3831

panic1620:                                        ; preds = %and.rhs1617
  store i64 %sext1618, ptr %taddr1621, align 8
  %1315 = insertvalue %any undef, ptr %taddr1621, 0
  %1316 = insertvalue %any %1315, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1622, align 8
  %1317 = load [2 x i64], ptr %taddr1622, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1623, align 8
  %1318 = load [2 x i64], ptr %taddr1623, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1624, align 8
  %1319 = load [2 x i64], ptr %taddr1624, align 8
  store %any %1316, ptr %varargslots1625, align 8
  %1320 = insertvalue %"any[]" undef, ptr %varargslots1625, 0
  %"$$temp1626" = insertvalue %"any[]" %1320, i64 1, 1
  store %"any[]" %"$$temp1626", ptr %taddr1627, align 8
  %1321 = load [2 x i64], ptr %taddr1627, align 8
  call void @std.core.builtin.panicf([2 x i64] %1317, [2 x i64] %1318, [2 x i64] %1319, i32 236, [2 x i64] %1321), !dbg !3835
  unreachable, !dbg !3835

panic1630:                                        ; preds = %checkok1628
  store i64 128, ptr %taddr1631, align 8
  %1322 = insertvalue %any undef, ptr %taddr1631, 0
  %1323 = insertvalue %any %1322, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1618, ptr %taddr1632, align 8
  %1324 = insertvalue %any undef, ptr %taddr1632, 0
  %1325 = insertvalue %any %1324, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1633, align 8
  %1326 = load [2 x i64], ptr %taddr1633, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1634, align 8
  %1327 = load [2 x i64], ptr %taddr1634, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1635, align 8
  %1328 = load [2 x i64], ptr %taddr1635, align 8
  store %any %1323, ptr %varargslots1636, align 8
  %ptradd1637 = getelementptr inbounds i8, ptr %varargslots1636, i64 16
  store %any %1325, ptr %ptradd1637, align 8
  %1329 = insertvalue %"any[]" undef, ptr %varargslots1636, 0
  %"$$temp1638" = insertvalue %"any[]" %1329, i64 2, 1
  store %"any[]" %"$$temp1638", ptr %taddr1639, align 8
  %1330 = load [2 x i64], ptr %taddr1639, align 8
  call void @std.core.builtin.panicf([2 x i64] %1326, [2 x i64] %1327, [2 x i64] %1328, i32 236, [2 x i64] %1330), !dbg !3835
  unreachable, !dbg !3835

panic1662:                                        ; preds = %if.then1659
  store i64 %sext1660, ptr %taddr1663, align 8
  %1331 = insertvalue %any undef, ptr %taddr1663, 0
  %1332 = insertvalue %any %1331, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1664, align 8
  %1333 = load [2 x i64], ptr %taddr1664, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1665, align 8
  %1334 = load [2 x i64], ptr %taddr1665, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1666, align 8
  %1335 = load [2 x i64], ptr %taddr1666, align 8
  store %any %1332, ptr %varargslots1667, align 8
  %1336 = insertvalue %"any[]" undef, ptr %varargslots1667, 0
  %"$$temp1668" = insertvalue %"any[]" %1336, i64 1, 1
  store %"any[]" %"$$temp1668", ptr %taddr1669, align 8
  %1337 = load [2 x i64], ptr %taddr1669, align 8
  call void @std.core.builtin.panicf([2 x i64] %1333, [2 x i64] %1334, [2 x i64] %1335, i32 247, [2 x i64] %1337), !dbg !3845
  unreachable, !dbg !3845

panic1672:                                        ; preds = %checkok1670
  store i64 128, ptr %taddr1673, align 8
  %1338 = insertvalue %any undef, ptr %taddr1673, 0
  %1339 = insertvalue %any %1338, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1660, ptr %taddr1674, align 8
  %1340 = insertvalue %any undef, ptr %taddr1674, 0
  %1341 = insertvalue %any %1340, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1675, align 8
  %1342 = load [2 x i64], ptr %taddr1675, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1676, align 8
  %1343 = load [2 x i64], ptr %taddr1676, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1677, align 8
  %1344 = load [2 x i64], ptr %taddr1677, align 8
  store %any %1339, ptr %varargslots1678, align 8
  %ptradd1679 = getelementptr inbounds i8, ptr %varargslots1678, i64 16
  store %any %1341, ptr %ptradd1679, align 8
  %1345 = insertvalue %"any[]" undef, ptr %varargslots1678, 0
  %"$$temp1680" = insertvalue %"any[]" %1345, i64 2, 1
  store %"any[]" %"$$temp1680", ptr %taddr1681, align 8
  %1346 = load [2 x i64], ptr %taddr1681, align 8
  call void @std.core.builtin.panicf([2 x i64] %1342, [2 x i64] %1343, [2 x i64] %1344, i32 247, [2 x i64] %1346), !dbg !3845
  unreachable, !dbg !3845

panic1691:                                        ; preds = %if.else1686
  store i64 %sext1689, ptr %taddr1692, align 8
  %1347 = insertvalue %any undef, ptr %taddr1692, 0
  %1348 = insertvalue %any %1347, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1693, align 8
  %1349 = load [2 x i64], ptr %taddr1693, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1694, align 8
  %1350 = load [2 x i64], ptr %taddr1694, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1695, align 8
  %1351 = load [2 x i64], ptr %taddr1695, align 8
  store %any %1348, ptr %varargslots1696, align 8
  %1352 = insertvalue %"any[]" undef, ptr %varargslots1696, 0
  %"$$temp1697" = insertvalue %"any[]" %1352, i64 1, 1
  store %"any[]" %"$$temp1697", ptr %taddr1698, align 8
  %1353 = load [2 x i64], ptr %taddr1698, align 8
  call void @std.core.builtin.panicf([2 x i64] %1349, [2 x i64] %1350, [2 x i64] %1351, i32 252, [2 x i64] %1353), !dbg !3849
  unreachable, !dbg !3849

panic1701:                                        ; preds = %checkok1699
  store i64 128, ptr %taddr1702, align 8
  %1354 = insertvalue %any undef, ptr %taddr1702, 0
  %1355 = insertvalue %any %1354, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1689, ptr %taddr1703, align 8
  %1356 = insertvalue %any undef, ptr %taddr1703, 0
  %1357 = insertvalue %any %1356, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1704, align 8
  %1358 = load [2 x i64], ptr %taddr1704, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1705, align 8
  %1359 = load [2 x i64], ptr %taddr1705, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1706, align 8
  %1360 = load [2 x i64], ptr %taddr1706, align 8
  store %any %1355, ptr %varargslots1707, align 8
  %ptradd1708 = getelementptr inbounds i8, ptr %varargslots1707, i64 16
  store %any %1357, ptr %ptradd1708, align 8
  %1361 = insertvalue %"any[]" undef, ptr %varargslots1707, 0
  %"$$temp1709" = insertvalue %"any[]" %1361, i64 2, 1
  store %"any[]" %"$$temp1709", ptr %taddr1710, align 8
  %1362 = load [2 x i64], ptr %taddr1710, align 8
  call void @std.core.builtin.panicf([2 x i64] %1358, [2 x i64] %1359, [2 x i64] %1360, i32 252, [2 x i64] %1362), !dbg !3849
  unreachable, !dbg !3849

panic1731:                                        ; preds = %if.then1725
  store i64 %sext1729, ptr %taddr1732, align 8
  %1363 = insertvalue %any undef, ptr %taddr1732, 0
  %1364 = insertvalue %any %1363, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1733, align 8
  %1365 = load [2 x i64], ptr %taddr1733, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1734, align 8
  %1366 = load [2 x i64], ptr %taddr1734, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1735, align 8
  %1367 = load [2 x i64], ptr %taddr1735, align 8
  store %any %1364, ptr %varargslots1736, align 8
  %1368 = insertvalue %"any[]" undef, ptr %varargslots1736, 0
  %"$$temp1737" = insertvalue %"any[]" %1368, i64 1, 1
  store %"any[]" %"$$temp1737", ptr %taddr1738, align 8
  %1369 = load [2 x i64], ptr %taddr1738, align 8
  call void @std.core.builtin.panicf([2 x i64] %1365, [2 x i64] %1366, [2 x i64] %1367, i32 262, [2 x i64] %1369), !dbg !3864
  unreachable, !dbg !3864

panic1741:                                        ; preds = %checkok1739
  store i64 128, ptr %taddr1742, align 8
  %1370 = insertvalue %any undef, ptr %taddr1742, 0
  %1371 = insertvalue %any %1370, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1729, ptr %taddr1743, align 8
  %1372 = insertvalue %any undef, ptr %taddr1743, 0
  %1373 = insertvalue %any %1372, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1744, align 8
  %1374 = load [2 x i64], ptr %taddr1744, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1745, align 8
  %1375 = load [2 x i64], ptr %taddr1745, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1746, align 8
  %1376 = load [2 x i64], ptr %taddr1746, align 8
  store %any %1371, ptr %varargslots1747, align 8
  %ptradd1748 = getelementptr inbounds i8, ptr %varargslots1747, i64 16
  store %any %1373, ptr %ptradd1748, align 8
  %1377 = insertvalue %"any[]" undef, ptr %varargslots1747, 0
  %"$$temp1749" = insertvalue %"any[]" %1377, i64 2, 1
  store %"any[]" %"$$temp1749", ptr %taddr1750, align 8
  %1378 = load [2 x i64], ptr %taddr1750, align 8
  call void @std.core.builtin.panicf([2 x i64] %1374, [2 x i64] %1375, [2 x i64] %1376, i32 262, [2 x i64] %1378), !dbg !3864
  unreachable, !dbg !3864

panic1759:                                        ; preds = %if.exit1753
  store i64 %sext1757, ptr %taddr1760, align 8
  %1379 = insertvalue %any undef, ptr %taddr1760, 0
  %1380 = insertvalue %any %1379, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1761, align 8
  %1381 = load [2 x i64], ptr %taddr1761, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1762, align 8
  %1382 = load [2 x i64], ptr %taddr1762, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1763, align 8
  %1383 = load [2 x i64], ptr %taddr1763, align 8
  store %any %1380, ptr %varargslots1764, align 8
  %1384 = insertvalue %"any[]" undef, ptr %varargslots1764, 0
  %"$$temp1765" = insertvalue %"any[]" %1384, i64 1, 1
  store %"any[]" %"$$temp1765", ptr %taddr1766, align 8
  %1385 = load [2 x i64], ptr %taddr1766, align 8
  call void @std.core.builtin.panicf([2 x i64] %1381, [2 x i64] %1382, [2 x i64] %1383, i32 263, [2 x i64] %1385), !dbg !3868
  unreachable, !dbg !3868

panic1769:                                        ; preds = %checkok1767
  store i64 128, ptr %taddr1770, align 8
  %1386 = insertvalue %any undef, ptr %taddr1770, 0
  %1387 = insertvalue %any %1386, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1757, ptr %taddr1771, align 8
  %1388 = insertvalue %any undef, ptr %taddr1771, 0
  %1389 = insertvalue %any %1388, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1772, align 8
  %1390 = load [2 x i64], ptr %taddr1772, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1773, align 8
  %1391 = load [2 x i64], ptr %taddr1773, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1774, align 8
  %1392 = load [2 x i64], ptr %taddr1774, align 8
  store %any %1387, ptr %varargslots1775, align 8
  %ptradd1776 = getelementptr inbounds i8, ptr %varargslots1775, i64 16
  store %any %1389, ptr %ptradd1776, align 8
  %1393 = insertvalue %"any[]" undef, ptr %varargslots1775, 0
  %"$$temp1777" = insertvalue %"any[]" %1393, i64 2, 1
  store %"any[]" %"$$temp1777", ptr %taddr1778, align 8
  %1394 = load [2 x i64], ptr %taddr1778, align 8
  call void @std.core.builtin.panicf([2 x i64] %1390, [2 x i64] %1391, [2 x i64] %1392, i32 263, [2 x i64] %1394), !dbg !3868
  unreachable, !dbg !3868

panic1815:                                        ; preds = %if.then1802
  store %"char[]" { ptr @.panic_msg.85, i64 10 }, ptr %taddr1816, align 8
  %1395 = load [2 x i64], ptr %taddr1816, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1817, align 8
  %1396 = load [2 x i64], ptr %taddr1817, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1818, align 8
  %1397 = load [2 x i64], ptr %taddr1818, align 8
  %1398 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %1398([2 x i64] %1395, [2 x i64] %1396, [2 x i64] %1397, i32 284), !dbg !3905
  unreachable, !dbg !3905

panic1831:                                        ; preds = %if.then1826
  store i64 %sext1829, ptr %taddr1832, align 8
  %1399 = insertvalue %any undef, ptr %taddr1832, 0
  %1400 = insertvalue %any %1399, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.27, i64 38 }, ptr %taddr1833, align 8
  %1401 = load [2 x i64], ptr %taddr1833, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1834, align 8
  %1402 = load [2 x i64], ptr %taddr1834, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1835, align 8
  %1403 = load [2 x i64], ptr %taddr1835, align 8
  store %any %1400, ptr %varargslots1836, align 8
  %1404 = insertvalue %"any[]" undef, ptr %varargslots1836, 0
  %"$$temp1837" = insertvalue %"any[]" %1404, i64 1, 1
  store %"any[]" %"$$temp1837", ptr %taddr1838, align 8
  %1405 = load [2 x i64], ptr %taddr1838, align 8
  call void @std.core.builtin.panicf([2 x i64] %1401, [2 x i64] %1402, [2 x i64] %1403, i32 292, [2 x i64] %1405), !dbg !3922
  unreachable, !dbg !3922

panic1841:                                        ; preds = %checkok1839
  store i64 128, ptr %taddr1842, align 8
  %1406 = insertvalue %any undef, ptr %taddr1842, 0
  %1407 = insertvalue %any %1406, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %sext1829, ptr %taddr1843, align 8
  %1408 = insertvalue %any undef, ptr %taddr1843, 0
  %1409 = insertvalue %any %1408, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr1844, align 8
  %1410 = load [2 x i64], ptr %taddr1844, align 8
  store %"char[]" { ptr @.file.75, i64 17 }, ptr %taddr1845, align 8
  %1411 = load [2 x i64], ptr %taddr1845, align 8
  store %"char[]" { ptr @.func.86, i64 8 }, ptr %taddr1846, align 8
  %1412 = load [2 x i64], ptr %taddr1846, align 8
  store %any %1407, ptr %varargslots1847, align 8
  %ptradd1848 = getelementptr inbounds i8, ptr %varargslots1847, i64 16
  store %any %1409, ptr %ptradd1848, align 8
  %1413 = insertvalue %"any[]" undef, ptr %varargslots1847, 0
  %"$$temp1849" = insertvalue %"any[]" %1413, i64 2, 1
  store %"any[]" %"$$temp1849", ptr %taddr1850, align 8
  %1414 = load [2 x i64], ptr %taddr1850, align 8
  call void @std.core.builtin.panicf([2 x i64] %1410, [2 x i64] %1411, [2 x i64] %1412, i32 292, [2 x i64] %1414), !dbg !3922
  unreachable, !dbg !3922
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.splitter(ptr noalias sret(%Splitter) align 8 %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3983 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store [2 x i64] %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !3993, metadata !DIExpression()), !dbg !3994
  store [2 x i64] %2, ptr %split, align 8
  call void @llvm.dbg.declare(metadata ptr %split, metadata !3995, metadata !DIExpression()), !dbg !3996
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !3997
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !3997
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %split, i32 16, i1 false), !dbg !3998
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !3998
  ret void, !dbg !3998
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.String.tokenize(ptr noalias sret(%Splitter) align 8 %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !3999 {
entry:
  %self = alloca %"char[]", align 8
  %split = alloca %"char[]", align 8
  %literal = alloca %Splitter, align 8
  store [2 x i64] %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4000, metadata !DIExpression()), !dbg !4001
  store [2 x i64] %2, ptr %split, align 8
  call void @llvm.dbg.declare(metadata ptr %split, metadata !4002, metadata !DIExpression()), !dbg !4003
  call void @llvm.memset.p0.i64(ptr align 8 %literal, i8 0, i64 48, i1 false)
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %literal, ptr align 8 %self, i32 16, i1 false), !dbg !4004
  %ptradd = getelementptr inbounds i8, ptr %literal, i64 16, !dbg !4004
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %ptradd, ptr align 8 %split, i32 16, i1 false), !dbg !4005
  %ptradd1 = getelementptr inbounds i8, ptr %literal, i64 40, !dbg !4005
  store i8 1, ptr %ptradd1, align 8, !dbg !4006
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %literal, i32 48, i1 false), !dbg !4006
  ret void, !dbg !4006
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak void @std.core.string.Splitter.reset(ptr %0) #0 !dbg !4007 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %1 = icmp eq ptr %0, null, !dbg !4011
  %2 = call i1 @llvm.expect.i1(i1 %1, i1 false), !dbg !4011
  br i1 %2, label %panic, label %checkok, !dbg !4011

checkok:                                          ; preds = %entry
  store ptr %0, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4012, metadata !DIExpression()), !dbg !4013
  %3 = load ptr, ptr %self, align 8, !dbg !4014
  %ptradd = getelementptr inbounds i8, ptr %3, i64 32, !dbg !4014
  store i64 0, ptr %ptradd, align 8, !dbg !4015
  ret void, !dbg !4015

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.91, i64 62 }, ptr %taddr, align 8
  %4 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %5 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.92, i64 5 }, ptr %taddr2, align 8
  %6 = load [2 x i64], ptr %taddr2, align 8
  %7 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %7([2 x i64] %4, [2 x i64] %5, [2 x i64] %6, i32 847), !dbg !4013
  unreachable, !dbg !4013
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.Splitter.next(ptr %0, ptr %1) #0 !dbg !4016 {
entry:
  %taddr = alloca %"char[]", align 8
  %taddr1 = alloca %"char[]", align 8
  %taddr2 = alloca %"char[]", align 8
  %self = alloca ptr, align 8
  %len = alloca i64, align 8
  %current = alloca i64, align 8
  %remaining = alloca %"char[]", align 8
  %taddr5 = alloca i64, align 8
  %taddr6 = alloca i64, align 8
  %taddr7 = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %varargslots = alloca [2 x %any], align 8
  %taddr11 = alloca %"any[]", align 8
  %next = alloca i64, align 8
  %next.f = alloca i64, align 8
  %retparam = alloca i64, align 8
  %reterr = alloca i64, align 8
  %taddr25 = alloca i64, align 8
  %taddr26 = alloca i64, align 8
  %taddr27 = alloca %"char[]", align 8
  %taddr28 = alloca %"char[]", align 8
  %taddr29 = alloca %"char[]", align 8
  %varargslots30 = alloca [2 x %any], align 8
  %taddr33 = alloca %"any[]", align 8
  %taddr37 = alloca i64, align 8
  %taddr38 = alloca i64, align 8
  %taddr39 = alloca %"char[]", align 8
  %taddr40 = alloca %"char[]", align 8
  %taddr41 = alloca %"char[]", align 8
  %varargslots42 = alloca [2 x %any], align 8
  %taddr45 = alloca %"any[]", align 8
  %reterr50 = alloca i64, align 8
  %2 = icmp eq ptr %1, null, !dbg !4019
  %3 = call i1 @llvm.expect.i1(i1 %2, i1 false), !dbg !4019
  br i1 %3, label %panic, label %checkok, !dbg !4019

checkok:                                          ; preds = %entry
  store ptr %1, ptr %self, align 8
  call void @llvm.dbg.declare(metadata ptr %self, metadata !4020, metadata !DIExpression()), !dbg !4021
  br label %loop.body, !dbg !4022

loop.body:                                        ; preds = %if.then21, %checkok
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4023, metadata !DIExpression()), !dbg !4026
  %4 = load ptr, ptr %self, align 8, !dbg !4027
  %ptradd = getelementptr inbounds i8, ptr %4, i64 8, !dbg !4027
  %5 = load i64, ptr %ptradd, align 8, !dbg !4027
  store i64 %5, ptr %len, align 8, !dbg !4027
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4028, metadata !DIExpression()), !dbg !4029
  %6 = load ptr, ptr %self, align 8, !dbg !4030
  %ptradd3 = getelementptr inbounds i8, ptr %6, i64 32, !dbg !4030
  %7 = load i64, ptr %ptradd3, align 8, !dbg !4030
  store i64 %7, ptr %current, align 8, !dbg !4030
  %8 = load i64, ptr %current, align 8, !dbg !4031
  %9 = load i64, ptr %len, align 8, !dbg !4032
  %ge = icmp uge i64 %8, %9, !dbg !4031
  br i1 %ge, label %if.then, label %if.exit, !dbg !4031

if.then:                                          ; preds = %loop.body
  ret i64 ptrtoint (ptr @"std.core.builtin.IteratorResult$NO_MORE_ELEMENT" to i64), !dbg !4033

if.exit:                                          ; preds = %loop.body
  call void @llvm.dbg.declare(metadata ptr %remaining, metadata !4034, metadata !DIExpression()), !dbg !4035
  %10 = load ptr, ptr %self, align 8, !dbg !4036
  %11 = load %"char[]", ptr %10, align 8, !dbg !4036
  %12 = extractvalue %"char[]" %11, 0, !dbg !4036
  %13 = load i64, ptr %current, align 8, !dbg !4037
  %14 = extractvalue %"char[]" %11, 1, !dbg !4037
  %gt = icmp ugt i64 %13, %14, !dbg !4037
  %15 = call i1 @llvm.expect.i1(i1 %gt, i1 false), !dbg !4037
  br i1 %15, label %panic4, label %checkok12, !dbg !4037

checkok12:                                        ; preds = %if.exit
  %size = sub i64 %14, %13, !dbg !4036
  %ptradd13 = getelementptr inbounds i8, ptr %12, i64 %13, !dbg !4036
  %16 = insertvalue %"char[]" undef, ptr %ptradd13, 0, !dbg !4036
  %17 = insertvalue %"char[]" %16, i64 %size, 1, !dbg !4036
  store %"char[]" %17, ptr %remaining, align 8, !dbg !4036
  call void @llvm.dbg.declare(metadata ptr %next, metadata !4038, metadata !DIExpression()), !dbg !4039
  %18 = load ptr, ptr %self, align 8, !dbg !4040
  %ptradd14 = getelementptr inbounds i8, ptr %18, i64 16, !dbg !4040
  %19 = load [2 x i64], ptr %remaining, align 8
  %20 = load [2 x i64], ptr %ptradd14, align 8
  %21 = call i64 @std.core.String.index_of(ptr %retparam, [2 x i64] %19, [2 x i64] %20), !dbg !4041
  %not_err = icmp eq i64 %21, 0, !dbg !4041
  %22 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4041
  br i1 %22, label %after_check, label %assign_optional, !dbg !4041

assign_optional:                                  ; preds = %checkok12
  store i64 %21, ptr %next.f, align 8, !dbg !4041
  br label %after_assign, !dbg !4041

after_check:                                      ; preds = %checkok12
  %23 = load i64, ptr %retparam, align 8, !dbg !4041
  store i64 %23, ptr %next, align 8, !dbg !4041
  store i64 0, ptr %next.f, align 8, !dbg !4041
  br label %after_assign, !dbg !4041

after_assign:                                     ; preds = %after_check, %assign_optional
  %load.err = load i64, ptr %next.f, align 8, !dbg !4042
  %result = icmp eq i64 %load.err, 0, !dbg !4042
  br i1 %result, label %if.then15, label %if.exit48, !dbg !4042

if.then15:                                        ; preds = %after_assign
  %24 = load ptr, ptr %self, align 8, !dbg !4043
  %ptradd16 = getelementptr inbounds i8, ptr %24, i64 32, !dbg !4043
  %25 = load i64, ptr %current, align 8, !dbg !4045
  %26 = load i64, ptr %next, align 8, !dbg !4046
  %add = add i64 %25, %26, !dbg !4045
  %27 = load ptr, ptr %self, align 8, !dbg !4047
  %ptradd17 = getelementptr inbounds i8, ptr %27, i64 16, !dbg !4047
  %ptradd18 = getelementptr inbounds i8, ptr %ptradd17, i64 8, !dbg !4047
  %28 = load i64, ptr %ptradd18, align 8, !dbg !4047
  %add19 = add i64 %add, %28, !dbg !4045
  store i64 %add19, ptr %ptradd16, align 8, !dbg !4045
  %29 = load i64, ptr %next, align 8, !dbg !4048
  %i2nb = icmp eq i64 %29, 0, !dbg !4048
  br i1 %i2nb, label %and.rhs, label %and.phi, !dbg !4048

and.rhs:                                          ; preds = %if.then15
  %30 = load ptr, ptr %self, align 8, !dbg !4049
  %ptradd20 = getelementptr inbounds i8, ptr %30, i64 40, !dbg !4049
  %31 = load i8, ptr %ptradd20, align 8, !dbg !4049
  %32 = trunc i8 %31 to i1, !dbg !4049
  br label %and.phi, !dbg !4049

and.phi:                                          ; preds = %and.rhs, %if.then15
  %val = phi i1 [ false, %if.then15 ], [ %32, %and.rhs ], !dbg !4049
  br i1 %val, label %if.then21, label %if.exit22, !dbg !4049

if.then21:                                        ; preds = %and.phi
  br label %loop.body, !dbg !4050

if.exit22:                                        ; preds = %and.phi
  %33 = load %"char[]", ptr %remaining, align 8, !dbg !4051
  %34 = extractvalue %"char[]" %33, 0, !dbg !4051
  %35 = extractvalue %"char[]" %33, 1, !dbg !4052
  %gt23 = icmp ugt i64 0, %35, !dbg !4052
  %36 = call i1 @llvm.expect.i1(i1 %gt23, i1 false), !dbg !4052
  br i1 %36, label %panic24, label %checkok34, !dbg !4052

checkok34:                                        ; preds = %if.exit22
  %37 = load i64, ptr %next, align 8, !dbg !4053
  %add35 = add i64 0, %37, !dbg !4053
  %lt = icmp ult i64 %35, %add35, !dbg !4053
  %sub = sub i64 %add35, 1, !dbg !4053
  %38 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4053
  br i1 %38, label %panic36, label %checkok46, !dbg !4053

checkok46:                                        ; preds = %checkok34
  %size47 = sub i64 %add35, 0, !dbg !4051
  %39 = insertvalue %"char[]" undef, ptr %34, 0, !dbg !4051
  %40 = insertvalue %"char[]" %39, i64 %size47, 1, !dbg !4051
  store %"char[]" %40, ptr %0, align 8, !dbg !4051
  ret i64 0, !dbg !4051

if.exit48:                                        ; preds = %after_assign
  %41 = load ptr, ptr %self, align 8, !dbg !4054
  %ptradd49 = getelementptr inbounds i8, ptr %41, i64 32, !dbg !4054
  %42 = load i64, ptr %len, align 8, !dbg !4055
  store i64 %42, ptr %ptradd49, align 8, !dbg !4055
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %remaining, i32 16, i1 false), !dbg !4056
  ret i64 0, !dbg !4056

panic:                                            ; preds = %entry
  store %"char[]" { ptr @.panic_msg.91, i64 62 }, ptr %taddr, align 8
  %43 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr1, align 8
  %44 = load [2 x i64], ptr %taddr1, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr2, align 8
  %45 = load [2 x i64], ptr %taddr2, align 8
  %46 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %46([2 x i64] %43, [2 x i64] %44, [2 x i64] %45, i32 852), !dbg !4021
  unreachable, !dbg !4021

panic4:                                           ; preds = %if.exit
  store i64 %14, ptr %taddr5, align 8
  %47 = insertvalue %any undef, ptr %taddr5, 0
  %48 = insertvalue %any %47, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %13, ptr %taddr6, align 8
  %49 = insertvalue %any undef, ptr %taddr6, 0
  %50 = insertvalue %any %49, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr7, align 8
  %51 = load [2 x i64], ptr %taddr7, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr8, align 8
  %52 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr9, align 8
  %53 = load [2 x i64], ptr %taddr9, align 8
  store %any %48, ptr %varargslots, align 8
  %ptradd10 = getelementptr inbounds i8, ptr %varargslots, i64 16
  store %any %50, ptr %ptradd10, align 8
  %54 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %54, i64 2, 1
  store %"any[]" %"$$temp", ptr %taddr11, align 8
  %55 = load [2 x i64], ptr %taddr11, align 8
  call void @std.core.builtin.panicf([2 x i64] %51, [2 x i64] %52, [2 x i64] %53, i32 859, [2 x i64] %55), !dbg !4036
  unreachable, !dbg !4036

panic24:                                          ; preds = %if.exit22
  store i64 %35, ptr %taddr25, align 8
  %56 = insertvalue %any undef, ptr %taddr25, 0
  %57 = insertvalue %any %56, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 0, ptr %taddr26, align 8
  %58 = insertvalue %any undef, ptr %taddr26, 0
  %59 = insertvalue %any %58, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr27, align 8
  %60 = load [2 x i64], ptr %taddr27, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr28, align 8
  %61 = load [2 x i64], ptr %taddr28, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr29, align 8
  %62 = load [2 x i64], ptr %taddr29, align 8
  store %any %57, ptr %varargslots30, align 8
  %ptradd31 = getelementptr inbounds i8, ptr %varargslots30, i64 16
  store %any %59, ptr %ptradd31, align 8
  %63 = insertvalue %"any[]" undef, ptr %varargslots30, 0
  %"$$temp32" = insertvalue %"any[]" %63, i64 2, 1
  store %"any[]" %"$$temp32", ptr %taddr33, align 8
  %64 = load [2 x i64], ptr %taddr33, align 8
  call void @std.core.builtin.panicf([2 x i64] %60, [2 x i64] %61, [2 x i64] %62, i32 865, [2 x i64] %64), !dbg !4051
  unreachable, !dbg !4051

panic36:                                          ; preds = %checkok34
  store i64 %sub, ptr %taddr37, align 8
  %65 = insertvalue %any undef, ptr %taddr37, 0
  %66 = insertvalue %any %65, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %35, ptr %taddr38, align 8
  %67 = insertvalue %any undef, ptr %taddr38, 0
  %68 = insertvalue %any %67, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr39, align 8
  %69 = load [2 x i64], ptr %taddr39, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr40, align 8
  %70 = load [2 x i64], ptr %taddr40, align 8
  store %"char[]" { ptr @.func.93, i64 4 }, ptr %taddr41, align 8
  %71 = load [2 x i64], ptr %taddr41, align 8
  store %any %66, ptr %varargslots42, align 8
  %ptradd43 = getelementptr inbounds i8, ptr %varargslots42, i64 16
  store %any %68, ptr %ptradd43, align 8
  %72 = insertvalue %"any[]" undef, ptr %varargslots42, 0
  %"$$temp44" = insertvalue %"any[]" %72, i64 2, 1
  store %"any[]" %"$$temp44", ptr %taddr45, align 8
  %73 = load [2 x i64], ptr %taddr45, align 8
  call void @std.core.builtin.panicf([2 x i64] %69, [2 x i64] %70, [2 x i64] %71, i32 865, [2 x i64] %73), !dbg !4051
  unreachable, !dbg !4051
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.core.string.tformat_zstr([2 x i64] %0, [2 x i64] %1) #0 !dbg !4057 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %0, ptr %fmt, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4069, metadata !DIExpression()), !dbg !4070
  store [2 x i64] %1, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4071, metadata !DIExpression()), !dbg !4072
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4073, metadata !DIExpression()), !dbg !4077
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4078
  %2 = load i64, ptr %ptradd, align 8, !dbg !4078
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4079
  %3 = load i64, ptr %ptradd1, align 8, !dbg !4079
  %mul = mul i64 %3, 8, !dbg !4079
  %add = add i64 %2, %mul, !dbg !4078
  %4 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4080
  store ptr %4, ptr %str, align 8, !dbg !4080
  %5 = load [2 x i64], ptr %fmt, align 8
  %6 = load [2 x i64], ptr %args, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, [2 x i64] %5, [2 x i64] %6), !dbg !4081
  %8 = call ptr @std.core.dstring.DString.zstr_view(ptr %str), !dbg !4082
  ret ptr %8, !dbg !4082
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.format([2 x i64] %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4083 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  %taddr = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %fmt, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4086, metadata !DIExpression()), !dbg !4087
  store [2 x i64] %1, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4088, metadata !DIExpression()), !dbg !4089
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4090, metadata !DIExpression()), !dbg !4091
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4092, metadata !DIExpression()), !dbg !4114
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4116
  %i2nb = icmp eq ptr %3, null, !dbg !4116
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4116

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4119
  br label %if.exit, !dbg !4119

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4121
  store ptr %4, ptr %current, align 8, !dbg !4121
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4122, metadata !DIExpression()), !dbg !4123
  %5 = load ptr, ptr %current, align 8, !dbg !4124
  store ptr %5, ptr %original, align 8, !dbg !4124
  %6 = load ptr, ptr %current, align 8, !dbg !4125
  %7 = load ptr, ptr %allocator, align 8, !dbg !4126
  %eq = icmp eq ptr %6, %7, !dbg !4125
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !4125

if.then1:                                         ; preds = %if.exit
  %8 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4127
  store ptr %8, ptr %current, align 8, !dbg !4127
  br label %if.exit2, !dbg !4127

if.exit2:                                         ; preds = %if.then1, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4128, metadata !DIExpression()), !dbg !4129
  %9 = load ptr, ptr %current, align 8, !dbg !4130
  %ptradd = getelementptr inbounds i8, ptr %9, i64 24, !dbg !4130
  %10 = load i64, ptr %ptradd, align 8, !dbg !4130
  store i64 %10, ptr %mark, align 8, !dbg !4130
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4131, metadata !DIExpression()), !dbg !4133
  %ptradd3 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4134
  %11 = load i64, ptr %ptradd3, align 8, !dbg !4134
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4135
  %12 = load i64, ptr %ptradd4, align 8, !dbg !4135
  %mul = mul i64 %12, 8, !dbg !4135
  %add = add i64 %11, %mul, !dbg !4134
  %13 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4136
  store ptr %13, ptr %str, align 8, !dbg !4136
  %14 = load [2 x i64], ptr %fmt, align 8
  %15 = load [2 x i64], ptr %args, align 8
  %16 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, [2 x i64] %14, [2 x i64] %15), !dbg !4137
  %17 = load ptr, ptr %str, align 8, !dbg !4138
  %18 = load [2 x i64], ptr %allocator, align 8, !dbg !4138
  %19 = call [2 x i64] @std.core.dstring.DString.copy_str(ptr %17, [2 x i64] %18), !dbg !4139
  store [2 x i64] %19, ptr %result, align 8
  %20 = load %"char[]", ptr %result, align 8
  %21 = load ptr, ptr %current, align 8, !dbg !4140
  %22 = load i64, ptr %mark, align 8, !dbg !4140
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %21, i64 %22), !dbg !4142
  %23 = load ptr, ptr %original, align 8, !dbg !4143
  store ptr %23, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4143
  store %"char[]" %20, ptr %taddr, align 8
  %24 = load [2 x i64], ptr %taddr, align 8
  ret [2 x i64] %24
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.new_format([2 x i64] %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4144 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %taddr = alloca %any, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %fmt, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4145, metadata !DIExpression()), !dbg !4146
  store [2 x i64] %1, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4147, metadata !DIExpression()), !dbg !4148
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4149, metadata !DIExpression()), !dbg !4150
  %3 = load %any, ptr %allocator, align 8, !dbg !4151
  %4 = extractvalue %any %3, 0, !dbg !4151
  %i2b = icmp ne ptr %4, null, !dbg !4151
  br i1 %i2b, label %cond.lhs, label %cond.rhs, !dbg !4151

cond.lhs:                                         ; preds = %entry
  br label %cond.phi, !dbg !4151

cond.rhs:                                         ; preds = %entry
  %5 = load %any, ptr @std.core.mem.allocator.thread_allocator, align 8, !dbg !4152
  br label %cond.phi, !dbg !4152

cond.phi:                                         ; preds = %cond.rhs, %cond.lhs
  %val = phi %any [ %3, %cond.lhs ], [ %5, %cond.rhs ], !dbg !4152
  %6 = load [2 x i64], ptr %fmt, align 8, !dbg !4152
  %7 = load [2 x i64], ptr %args, align 8, !dbg !4152
  store %any %val, ptr %taddr, align 8
  %8 = load [2 x i64], ptr %taddr, align 8
  %9 = call [2 x i64] @std.core.string.format([2 x i64] %6, [2 x i64] %7, [2 x i64] %8), !dbg !4155
  store [2 x i64] %9, ptr %result, align 8
  %10 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %10
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.tformat([2 x i64] %0, [2 x i64] %1) #0 !dbg !4156 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  %result = alloca %"char[]", align 8
  store [2 x i64] %0, ptr %fmt, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4159, metadata !DIExpression()), !dbg !4160
  store [2 x i64] %1, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4161, metadata !DIExpression()), !dbg !4162
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4163, metadata !DIExpression()), !dbg !4164
  %ptradd = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4165
  %2 = load i64, ptr %ptradd, align 8, !dbg !4165
  %ptradd1 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4166
  %3 = load i64, ptr %ptradd1, align 8, !dbg !4166
  %mul = mul i64 %3, 8, !dbg !4166
  %add = add i64 %2, %mul, !dbg !4165
  %4 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4167
  store ptr %4, ptr %str, align 8, !dbg !4167
  %5 = load [2 x i64], ptr %fmt, align 8
  %6 = load [2 x i64], ptr %args, align 8
  %7 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, [2 x i64] %5, [2 x i64] %6), !dbg !4168
  %8 = load ptr, ptr %str, align 8, !dbg !4169
  %9 = call [2 x i64] @std.core.dstring.DString.str_view(ptr %8), !dbg !4169
  store [2 x i64] %9, ptr %result, align 8
  %10 = load [2 x i64], ptr %result, align 8
  ret [2 x i64] %10
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak ptr @std.core.string.new_format_zstr([2 x i64] %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4170 {
entry:
  %fmt = alloca %"char[]", align 8
  %args = alloca %"any[]", align 8
  %allocator = alloca %any, align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %str = alloca ptr, align 8
  %retparam = alloca i64, align 8
  store [2 x i64] %0, ptr %fmt, align 8
  call void @llvm.dbg.declare(metadata ptr %fmt, metadata !4173, metadata !DIExpression()), !dbg !4174
  store [2 x i64] %1, ptr %args, align 8
  call void @llvm.dbg.declare(metadata ptr %args, metadata !4175, metadata !DIExpression()), !dbg !4176
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4177, metadata !DIExpression()), !dbg !4178
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4179, metadata !DIExpression()), !dbg !4181
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4183
  %i2nb = icmp eq ptr %3, null, !dbg !4183
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4183

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4186
  br label %if.exit, !dbg !4186

if.exit:                                          ; preds = %if.then, %entry
  %4 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4188
  store ptr %4, ptr %current, align 8, !dbg !4188
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4189, metadata !DIExpression()), !dbg !4190
  %5 = load ptr, ptr %current, align 8, !dbg !4191
  store ptr %5, ptr %original, align 8, !dbg !4191
  %6 = load ptr, ptr %current, align 8, !dbg !4192
  %7 = load ptr, ptr %allocator, align 8, !dbg !4193
  %eq = icmp eq ptr %6, %7, !dbg !4192
  br i1 %eq, label %if.then1, label %if.exit2, !dbg !4192

if.then1:                                         ; preds = %if.exit
  %8 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4194
  store ptr %8, ptr %current, align 8, !dbg !4194
  br label %if.exit2, !dbg !4194

if.exit2:                                         ; preds = %if.then1, %if.exit
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4195, metadata !DIExpression()), !dbg !4196
  %9 = load ptr, ptr %current, align 8, !dbg !4197
  %ptradd = getelementptr inbounds i8, ptr %9, i64 24, !dbg !4197
  %10 = load i64, ptr %ptradd, align 8, !dbg !4197
  store i64 %10, ptr %mark, align 8, !dbg !4197
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4198, metadata !DIExpression()), !dbg !4200
  %ptradd3 = getelementptr inbounds i8, ptr %fmt, i64 8, !dbg !4201
  %11 = load i64, ptr %ptradd3, align 8, !dbg !4201
  %ptradd4 = getelementptr inbounds i8, ptr %args, i64 8, !dbg !4202
  %12 = load i64, ptr %ptradd4, align 8, !dbg !4202
  %mul = mul i64 %12, 8, !dbg !4202
  %add = add i64 %11, %mul, !dbg !4201
  %13 = call ptr @std.core.dstring.temp_with_capacity(i64 %add), !dbg !4203
  store ptr %13, ptr %str, align 8, !dbg !4203
  %14 = load [2 x i64], ptr %fmt, align 8
  %15 = load [2 x i64], ptr %args, align 8
  %16 = call i64 @std.core.dstring.DString.appendf(ptr %retparam, ptr %str, [2 x i64] %14, [2 x i64] %15), !dbg !4204
  %17 = load ptr, ptr %str, align 8, !dbg !4205
  %18 = load [2 x i64], ptr %allocator, align 8, !dbg !4205
  %19 = call ptr @std.core.dstring.DString.copy_zstr(ptr %17, [2 x i64] %18), !dbg !4206
  %20 = load ptr, ptr %current, align 8, !dbg !4207
  %21 = load i64, ptr %mark, align 8, !dbg !4207
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %20, i64 %21), !dbg !4209
  %22 = load ptr, ptr %original, align 8, !dbg !4210
  store ptr %22, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4210
  ret ptr %19, !dbg !4211
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak [2 x i64] @std.core.string.join_new([2 x i64] %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4212 {
entry:
  %s = alloca %"char[][]", align 8
  %joiner = alloca %"char[]", align 8
  %allocator = alloca %any, align 8
  %allocator1 = alloca %any, align 8
  %elements = alloca i64, align 8
  %error_var = alloca i64, align 8
  %allocator2 = alloca %any, align 8
  %elements3 = alloca i64, align 8
  %allocator4 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr8 = alloca %"char[]", align 8
  %taddr9 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %taddr10 = alloca ptr, align 8
  %taddr12 = alloca %"char[]", align 8
  %taddr13 = alloca %"char[]", align 8
  %taddr14 = alloca %"char[]", align 8
  %varargslots = alloca [1 x %any], align 8
  %taddr15 = alloca %"any[]", align 8
  %taddr16 = alloca %"char[]", align 8
  %taddr17 = alloca i64, align 8
  %taddr18 = alloca i64, align 8
  %taddr19 = alloca %"char[]", align 8
  %taddr20 = alloca %"char[]", align 8
  %taddr21 = alloca %"char[]", align 8
  %varargslots22 = alloca [2 x %any], align 8
  %taddr25 = alloca %"any[]", align 8
  %taddr27 = alloca i64, align 8
  %taddr28 = alloca i64, align 8
  %taddr29 = alloca %"char[]", align 8
  %taddr30 = alloca %"char[]", align 8
  %taddr31 = alloca %"char[]", align 8
  %varargslots32 = alloca [2 x %any], align 8
  %taddr35 = alloca %"any[]", align 8
  %taddr37 = alloca %"char[]", align 8
  %total_size = alloca i64, align 8
  %.anon = alloca i64, align 8
  %str = alloca ptr, align 8
  %taddr46 = alloca i64, align 8
  %taddr47 = alloca i64, align 8
  %taddr48 = alloca %"char[]", align 8
  %taddr49 = alloca %"char[]", align 8
  %taddr50 = alloca %"char[]", align 8
  %varargslots51 = alloca [2 x %any], align 8
  %taddr54 = alloca %"any[]", align 8
  %taddr57 = alloca %"char[]", align 8
  %taddr58 = alloca %"char[]", align 8
  %taddr59 = alloca %"char[]", align 8
  %current = alloca ptr, align 8
  %original = alloca ptr, align 8
  %mark = alloca i64, align 8
  %res = alloca ptr, align 8
  %self = alloca ptr, align 8
  %taddr73 = alloca i64, align 8
  %taddr74 = alloca i64, align 8
  %taddr75 = alloca %"char[]", align 8
  %taddr76 = alloca %"char[]", align 8
  %taddr77 = alloca %"char[]", align 8
  %varargslots78 = alloca [2 x %any], align 8
  %taddr81 = alloca %"any[]", align 8
  %value = alloca %"char[]", align 8
  %taddr85 = alloca i64, align 8
  %taddr86 = alloca i64, align 8
  %taddr87 = alloca %"char[]", align 8
  %taddr88 = alloca %"char[]", align 8
  %taddr89 = alloca %"char[]", align 8
  %varargslots90 = alloca [2 x %any], align 8
  %taddr93 = alloca %"any[]", align 8
  %taddr97 = alloca %"char[][]", align 8
  %taddr100 = alloca %"char[]", align 8
  %taddr101 = alloca %"char[]", align 8
  %taddr102 = alloca %"char[]", align 8
  %.anon105 = alloca i64, align 8
  %str109 = alloca ptr, align 8
  %taddr112 = alloca %"char[]", align 8
  %taddr113 = alloca %"char[]", align 8
  %taddr114 = alloca %"char[]", align 8
  %taddr119 = alloca i64, align 8
  %taddr120 = alloca i64, align 8
  %taddr121 = alloca %"char[]", align 8
  %taddr122 = alloca %"char[]", align 8
  %taddr123 = alloca %"char[]", align 8
  %varargslots124 = alloca [2 x %any], align 8
  %taddr127 = alloca %"any[]", align 8
  %self130 = alloca ptr, align 8
  %value131 = alloca %"char[]", align 8
  %self132 = alloca ptr, align 8
  %taddr135 = alloca %"char[]", align 8
  %taddr136 = alloca %"char[]", align 8
  %taddr137 = alloca %"char[]", align 8
  %value139 = alloca %"char[]", align 8
  %result = alloca %"char[]", align 8
  %taddr142 = alloca %"char[]", align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %0, ptr %s, align 8
  call void @llvm.dbg.declare(metadata ptr %s, metadata !4215, metadata !DIExpression()), !dbg !4216
  store [2 x i64] %1, ptr %joiner, align 8
  call void @llvm.dbg.declare(metadata ptr %joiner, metadata !4217, metadata !DIExpression()), !dbg !4218
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4219, metadata !DIExpression()), !dbg !4220
  %ptradd = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4221
  %3 = load i64, ptr %ptradd, align 8, !dbg !4221
  %neq = icmp ne i64 %3, 0, !dbg !4221
  %not = xor i1 %neq, true, !dbg !4221
  br i1 %not, label %if.then, label %if.exit38, !dbg !4221

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  store i64 2, ptr %elements, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator2, ptr align 8 %allocator1, i32 16, i1 false)
  %4 = load i64, ptr %elements, align 8
  store i64 %4, ptr %elements3, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator4, ptr align 8 %allocator2, i32 16, i1 false)
  %5 = load i64, ptr %elements3, align 8, !dbg !4222
  %mul = mul i64 1, %5, !dbg !4228
  store i64 %mul, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !4229
  %i2nb = icmp eq i64 %6, 0, !dbg !4229
  br i1 %i2nb, label %if.then5, label %if.exit, !dbg !4229

if.then5:                                         ; preds = %if.then
  store ptr null, ptr %blockret, align 8, !dbg !4232
  br label %expr_block.exit, !dbg !4232

if.exit:                                          ; preds = %if.then
  %ptradd6 = getelementptr inbounds i8, ptr %allocator4, i64 8, !dbg !4233
  %7 = load i64, ptr %ptradd6, align 8, !dbg !4233
  %8 = inttoptr i64 %7 to ptr, !dbg !4233
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd7 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd7, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr8, align 8
  %15 = load [2 x i64], ptr %taddr8, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr9, align 8
  %16 = load [2 x i64], ptr %taddr9, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 80), !dbg !4235
  unreachable, !dbg !4235

match:                                            ; preds = %12
  %18 = load ptr, ptr %allocator4, align 8
  %19 = load i64, ptr %size, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, i64 %19, i32 1, i64 0), !dbg !4235
  %not_err = icmp eq i64 %20, 0, !dbg !4235
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4235
  br i1 %21, label %after_check, label %assign_optional, !dbg !4235

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !4235
  br label %panic_block, !dbg !4235

after_check:                                      ; preds = %match
  %22 = load ptr, ptr %retparam, align 8, !dbg !4235
  store ptr %22, ptr %blockret, align 8, !dbg !4235
  br label %expr_block.exit, !dbg !4235

expr_block.exit:                                  ; preds = %after_check, %if.then5
  %23 = load ptr, ptr %blockret, align 8, !dbg !4235
  store ptr %23, ptr %taddr10, align 8
  %24 = load ptr, ptr %taddr10, align 8
  %25 = load i64, ptr %elements3, align 8, !dbg !4236
  %add = add i64 0, %25, !dbg !4236
  %size11 = sub i64 %add, 0, !dbg !4236
  %26 = insertvalue %"char[]" undef, ptr %24, 0, !dbg !4236
  %27 = insertvalue %"char[]" %26, i64 %size11, 1, !dbg !4236
  br label %noerr_block, !dbg !4236

panic_block:                                      ; preds = %assign_optional
  %28 = insertvalue %any undef, ptr %error_var, 0, !dbg !4236
  %29 = insertvalue %any %28, i64 ptrtoint (ptr @"$ct.anyfault" to i64), 1, !dbg !4236
  store %"char[]" { ptr @.panic_msg.16, i64 36 }, ptr %taddr12, align 8
  %30 = load [2 x i64], ptr %taddr12, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr13, align 8
  %31 = load [2 x i64], ptr %taddr13, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr14, align 8
  %32 = load [2 x i64], ptr %taddr14, align 8
  store %any %29, ptr %varargslots, align 8
  %33 = insertvalue %"any[]" undef, ptr %varargslots, 0
  %"$$temp" = insertvalue %"any[]" %33, i64 1, 1
  store %"any[]" %"$$temp", ptr %taddr15, align 8
  %34 = load [2 x i64], ptr %taddr15, align 8
  call void @std.core.builtin.panicf([2 x i64] %30, [2 x i64] %31, [2 x i64] %32, i32 244, [2 x i64] %34), !dbg !4224
  unreachable, !dbg !4224

noerr_block:                                      ; preds = %expr_block.exit
  store %"char[]" %27, ptr %taddr16, align 8
  %35 = load %"char[]", ptr %taddr16, align 8
  %36 = extractvalue %"char[]" %35, 0
  %37 = extractvalue %"char[]" %35, 1
  %gt = icmp sgt i64 0, %37
  %38 = call i1 @llvm.expect.i1(i1 %gt, i1 false)
  br i1 %38, label %panic, label %checkok

checkok:                                          ; preds = %noerr_block
  %lt = icmp slt i64 %37, 0, !dbg !4237
  %39 = call i1 @llvm.expect.i1(i1 %lt, i1 false), !dbg !4237
  br i1 %39, label %panic26, label %checkok36, !dbg !4237

checkok36:                                        ; preds = %checkok
  %40 = insertvalue %"char[]" undef, ptr %36, 0, !dbg !4237
  %41 = insertvalue %"char[]" %40, i64 0, 1, !dbg !4237
  store %"char[]" %41, ptr %taddr37, align 8
  %42 = load [2 x i64], ptr %taddr37, align 8
  ret [2 x i64] %42

if.exit38:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata ptr %total_size, metadata !4238, metadata !DIExpression()), !dbg !4239
  %ptradd39 = getelementptr inbounds i8, ptr %joiner, i64 8, !dbg !4240
  %43 = load i64, ptr %ptradd39, align 8, !dbg !4240
  %ptradd40 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4241
  %44 = load i64, ptr %ptradd40, align 8, !dbg !4241
  %mul41 = mul i64 %43, %44, !dbg !4240
  store i64 %mul41, ptr %total_size, align 8, !dbg !4240
  %ptradd42 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4242
  %45 = load i64, ptr %ptradd42, align 8, !dbg !4242
  call void @llvm.dbg.declare(metadata ptr %.anon, metadata !4244, metadata !DIExpression()), !dbg !4242
  store i64 0, ptr %.anon, align 8, !dbg !4242
  br label %loop.cond, !dbg !4242

loop.cond:                                        ; preds = %checkok60, %if.exit38
  %46 = load i64, ptr %.anon, align 8, !dbg !4242
  %lt43 = icmp ult i64 %46, %45, !dbg !4242
  br i1 %lt43, label %loop.body, label %loop.exit, !dbg !4242

loop.body:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %str, metadata !4245, metadata !DIExpression()), !dbg !4247
  %ptradd44 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4248
  %47 = load i64, ptr %ptradd44, align 8, !dbg !4248
  %48 = load ptr, ptr %s, align 8, !dbg !4248
  %49 = load i64, ptr %.anon, align 8, !dbg !4248
  %ge = icmp uge i64 %49, %47, !dbg !4248
  %50 = call i1 @llvm.expect.i1(i1 %ge, i1 false), !dbg !4248
  br i1 %50, label %panic45, label %checkok55, !dbg !4248

checkok55:                                        ; preds = %loop.body
  %ptroffset = getelementptr inbounds [16 x i8], ptr %48, i64 %49, !dbg !4248
  store ptr %ptroffset, ptr %str, align 8, !dbg !4248
  %51 = load i64, ptr %total_size, align 8, !dbg !4249
  %52 = load ptr, ptr %str, align 8, !dbg !4251
  %checknull = icmp eq ptr %52, null, !dbg !4251
  %53 = call i1 @llvm.expect.i1(i1 %checknull, i1 false), !dbg !4251
  br i1 %53, label %panic56, label %checkok60, !dbg !4251

checkok60:                                        ; preds = %checkok55
  %ptradd61 = getelementptr inbounds i8, ptr %52, i64 8, !dbg !4251
  %54 = load i64, ptr %ptradd61, align 8, !dbg !4251
  %add62 = add i64 %51, %54, !dbg !4249
  store i64 %add62, ptr %total_size, align 8, !dbg !4249
  %55 = load i64, ptr %.anon, align 8, !dbg !4242
  %addnuw = add nuw i64 %55, 1, !dbg !4242
  store i64 %addnuw, ptr %.anon, align 8, !dbg !4242
  br label %loop.cond, !dbg !4242

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %current, metadata !4252, metadata !DIExpression()), !dbg !4254
  %56 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4256
  %i2nb64 = icmp eq ptr %56, null, !dbg !4256
  br i1 %i2nb64, label %if.then65, label %if.exit66, !dbg !4256

if.then65:                                        ; preds = %loop.exit
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4259
  br label %if.exit66, !dbg !4259

if.exit66:                                        ; preds = %if.then65, %loop.exit
  %57 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4261
  store ptr %57, ptr %current, align 8, !dbg !4261
  call void @llvm.dbg.declare(metadata ptr %original, metadata !4262, metadata !DIExpression()), !dbg !4263
  %58 = load ptr, ptr %current, align 8, !dbg !4264
  store ptr %58, ptr %original, align 8, !dbg !4264
  %59 = load ptr, ptr %current, align 8, !dbg !4265
  %60 = load ptr, ptr %allocator, align 8, !dbg !4266
  %eq = icmp eq ptr %59, %60, !dbg !4265
  br i1 %eq, label %if.then67, label %if.exit68, !dbg !4265

if.then67:                                        ; preds = %if.exit66
  %61 = call ptr @std.core.mem.allocator.temp_allocator_next(), !dbg !4267
  store ptr %61, ptr %current, align 8, !dbg !4267
  br label %if.exit68, !dbg !4267

if.exit68:                                        ; preds = %if.then67, %if.exit66
  call void @llvm.dbg.declare(metadata ptr %mark, metadata !4268, metadata !DIExpression()), !dbg !4269
  %62 = load ptr, ptr %current, align 8, !dbg !4270
  %ptradd69 = getelementptr inbounds i8, ptr %62, i64 24, !dbg !4270
  %63 = load i64, ptr %ptradd69, align 8, !dbg !4270
  store i64 %63, ptr %mark, align 8, !dbg !4270
  call void @llvm.dbg.declare(metadata ptr %res, metadata !4271, metadata !DIExpression()), !dbg !4273
  %64 = load i64, ptr %total_size, align 8, !dbg !4274
  %65 = call ptr @std.core.dstring.temp_with_capacity(i64 %64), !dbg !4275
  store ptr %65, ptr %res, align 8, !dbg !4275
  store ptr %res, ptr %self, align 8
  %ptradd70 = getelementptr inbounds i8, ptr %s, i64 8, !dbg !4276
  %66 = load i64, ptr %ptradd70, align 8, !dbg !4276
  %67 = load ptr, ptr %s, align 8, !dbg !4276
  %ge71 = icmp sge i64 0, %66, !dbg !4277
  %68 = call i1 @llvm.expect.i1(i1 %ge71, i1 false), !dbg !4277
  br i1 %68, label %panic72, label %checkok82, !dbg !4277

checkok82:                                        ; preds = %if.exit68
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value, ptr align 8 %67, i32 16, i1 false)
  %69 = load ptr, ptr %self, align 8, !dbg !4278
  %70 = load [2 x i64], ptr %value, align 8, !dbg !4278
  call void @std.core.dstring.DString.append_chars(ptr %69, [2 x i64] %70), !dbg !4282
  %71 = load %"char[][]", ptr %s, align 8, !dbg !4283
  %72 = extractvalue %"char[][]" %71, 0, !dbg !4283
  %73 = extractvalue %"char[][]" %71, 1, !dbg !4285
  %gt83 = icmp sgt i64 1, %73, !dbg !4285
  %74 = call i1 @llvm.expect.i1(i1 %gt83, i1 false), !dbg !4285
  br i1 %74, label %panic84, label %checkok94, !dbg !4285

checkok94:                                        ; preds = %checkok82
  %size95 = sub i64 %73, 1, !dbg !4283
  %ptradd96 = getelementptr inbounds i8, ptr %72, i64 16, !dbg !4283
  %75 = insertvalue %"char[][]" undef, ptr %ptradd96, 0, !dbg !4283
  %76 = insertvalue %"char[][]" %75, i64 %size95, 1, !dbg !4283
  store %"char[][]" %76, ptr %taddr97, align 8
  %checknull98 = icmp eq ptr %taddr97, null, !dbg !4283
  %77 = call i1 @llvm.expect.i1(i1 %checknull98, i1 false), !dbg !4283
  br i1 %77, label %panic99, label %checkok103, !dbg !4283

checkok103:                                       ; preds = %checkok94
  %ptradd104 = getelementptr inbounds i8, ptr %taddr97, i64 8, !dbg !4283
  %78 = load i64, ptr %ptradd104, align 8, !dbg !4283
  call void @llvm.dbg.declare(metadata ptr %.anon105, metadata !4286, metadata !DIExpression()), !dbg !4283
  store i64 0, ptr %.anon105, align 8, !dbg !4283
  br label %loop.cond106, !dbg !4283

loop.cond106:                                     ; preds = %checkok138, %checkok103
  %79 = load i64, ptr %.anon105, align 8, !dbg !4283
  %lt107 = icmp ult i64 %79, %78, !dbg !4283
  br i1 %lt107, label %loop.body108, label %loop.exit141, !dbg !4283

loop.body108:                                     ; preds = %loop.cond106
  call void @llvm.dbg.declare(metadata ptr %str109, metadata !4287, metadata !DIExpression()), !dbg !4289
  %checknull110 = icmp eq ptr %taddr97, null, !dbg !4290
  %80 = call i1 @llvm.expect.i1(i1 %checknull110, i1 false), !dbg !4290
  br i1 %80, label %panic111, label %checkok115, !dbg !4290

checkok115:                                       ; preds = %loop.body108
  %ptradd116 = getelementptr inbounds i8, ptr %taddr97, i64 8, !dbg !4290
  %81 = load i64, ptr %ptradd116, align 8, !dbg !4290
  %82 = load ptr, ptr %taddr97, align 8, !dbg !4290
  %83 = load i64, ptr %.anon105, align 8, !dbg !4290
  %ge117 = icmp uge i64 %83, %81, !dbg !4290
  %84 = call i1 @llvm.expect.i1(i1 %ge117, i1 false), !dbg !4290
  br i1 %84, label %panic118, label %checkok128, !dbg !4290

checkok128:                                       ; preds = %checkok115
  %ptroffset129 = getelementptr inbounds [16 x i8], ptr %82, i64 %83, !dbg !4290
  store ptr %ptroffset129, ptr %str109, align 8, !dbg !4290
  store ptr %res, ptr %self130, align 8
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value131, ptr align 8 %joiner, i32 16, i1 false)
  %85 = load ptr, ptr %self130, align 8, !dbg !4291
  %86 = load [2 x i64], ptr %value131, align 8, !dbg !4291
  call void @std.core.dstring.DString.append_chars(ptr %85, [2 x i64] %86), !dbg !4295
  store ptr %res, ptr %self132, align 8
  %87 = load ptr, ptr %str109, align 8, !dbg !4296
  %checknull133 = icmp eq ptr %87, null, !dbg !4296
  %88 = call i1 @llvm.expect.i1(i1 %checknull133, i1 false), !dbg !4296
  br i1 %88, label %panic134, label %checkok138, !dbg !4296

checkok138:                                       ; preds = %checkok128
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %value139, ptr align 8 %87, i32 16, i1 false)
  %89 = load ptr, ptr %self132, align 8, !dbg !4297
  %90 = load [2 x i64], ptr %value139, align 8, !dbg !4297
  call void @std.core.dstring.DString.append_chars(ptr %89, [2 x i64] %90), !dbg !4300
  %91 = load i64, ptr %.anon105, align 8, !dbg !4283
  %addnuw140 = add nuw i64 %91, 1, !dbg !4283
  store i64 %addnuw140, ptr %.anon105, align 8, !dbg !4283
  br label %loop.cond106, !dbg !4283

loop.exit141:                                     ; preds = %loop.cond106
  %92 = load ptr, ptr %res, align 8, !dbg !4301
  %93 = load [2 x i64], ptr %allocator, align 8, !dbg !4301
  %94 = call [2 x i64] @std.core.dstring.DString.copy_str(ptr %92, [2 x i64] %93), !dbg !4302
  store [2 x i64] %94, ptr %result, align 8
  %95 = load %"char[]", ptr %result, align 8
  %96 = load ptr, ptr %current, align 8, !dbg !4303
  %97 = load i64, ptr %mark, align 8, !dbg !4303
  call void @std.core.mem.allocator.TempAllocator.reset(ptr %96, i64 %97), !dbg !4305
  %98 = load ptr, ptr %original, align 8, !dbg !4306
  store ptr %98, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4306
  store %"char[]" %95, ptr %taddr142, align 8
  %99 = load [2 x i64], ptr %taddr142, align 8
  ret [2 x i64] %99

panic:                                            ; preds = %noerr_block
  store i64 %37, ptr %taddr17, align 8
  %100 = insertvalue %any undef, ptr %taddr17, 0
  %101 = insertvalue %any %100, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr18, align 8
  %102 = insertvalue %any undef, ptr %taddr18, 0
  %103 = insertvalue %any %102, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr19, align 8
  %104 = load [2 x i64], ptr %taddr19, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr20, align 8
  %105 = load [2 x i64], ptr %taddr20, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr21, align 8
  %106 = load [2 x i64], ptr %taddr21, align 8
  store %any %101, ptr %varargslots22, align 8
  %ptradd23 = getelementptr inbounds i8, ptr %varargslots22, i64 16
  store %any %103, ptr %ptradd23, align 8
  %107 = insertvalue %"any[]" undef, ptr %varargslots22, 0
  %"$$temp24" = insertvalue %"any[]" %107, i64 2, 1
  store %"any[]" %"$$temp24", ptr %taddr25, align 8
  %108 = load [2 x i64], ptr %taddr25, align 8
  call void @std.core.builtin.panicf([2 x i64] %104, [2 x i64] %105, [2 x i64] %106, i32 118, [2 x i64] %108), !dbg !4237
  unreachable, !dbg !4237

panic26:                                          ; preds = %checkok
  store i64 -1, ptr %taddr27, align 8
  %109 = insertvalue %any undef, ptr %taddr27, 0
  %110 = insertvalue %any %109, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 %37, ptr %taddr28, align 8
  %111 = insertvalue %any undef, ptr %taddr28, 0
  %112 = insertvalue %any %111, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.19, i64 60 }, ptr %taddr29, align 8
  %113 = load [2 x i64], ptr %taddr29, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr30, align 8
  %114 = load [2 x i64], ptr %taddr30, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr31, align 8
  %115 = load [2 x i64], ptr %taddr31, align 8
  store %any %110, ptr %varargslots32, align 8
  %ptradd33 = getelementptr inbounds i8, ptr %varargslots32, i64 16
  store %any %112, ptr %ptradd33, align 8
  %116 = insertvalue %"any[]" undef, ptr %varargslots32, 0
  %"$$temp34" = insertvalue %"any[]" %116, i64 2, 1
  store %"any[]" %"$$temp34", ptr %taddr35, align 8
  %117 = load [2 x i64], ptr %taddr35, align 8
  call void @std.core.builtin.panicf([2 x i64] %113, [2 x i64] %114, [2 x i64] %115, i32 118, [2 x i64] %117), !dbg !4237
  unreachable, !dbg !4237

panic45:                                          ; preds = %loop.body
  store i64 %47, ptr %taddr46, align 8
  %118 = insertvalue %any undef, ptr %taddr46, 0
  %119 = insertvalue %any %118, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %49, ptr %taddr47, align 8
  %120 = insertvalue %any undef, ptr %taddr47, 0
  %121 = insertvalue %any %120, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr48, align 8
  %122 = load [2 x i64], ptr %taddr48, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr49, align 8
  %123 = load [2 x i64], ptr %taddr49, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr50, align 8
  %124 = load [2 x i64], ptr %taddr50, align 8
  store %any %119, ptr %varargslots51, align 8
  %ptradd52 = getelementptr inbounds i8, ptr %varargslots51, i64 16
  store %any %121, ptr %ptradd52, align 8
  %125 = insertvalue %"any[]" undef, ptr %varargslots51, 0
  %"$$temp53" = insertvalue %"any[]" %125, i64 2, 1
  store %"any[]" %"$$temp53", ptr %taddr54, align 8
  %126 = load [2 x i64], ptr %taddr54, align 8
  call void @std.core.builtin.panicf([2 x i64] %122, [2 x i64] %123, [2 x i64] %124, i32 122, [2 x i64] %126), !dbg !4248
  unreachable, !dbg !4248

panic56:                                          ; preds = %checkok55
  store %"char[]" { ptr @.panic_msg.21, i64 44 }, ptr %taddr57, align 8
  %127 = load [2 x i64], ptr %taddr57, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr58, align 8
  %128 = load [2 x i64], ptr %taddr58, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr59, align 8
  %129 = load [2 x i64], ptr %taddr59, align 8
  %130 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %130([2 x i64] %127, [2 x i64] %128, [2 x i64] %129, i32 124), !dbg !4251
  unreachable, !dbg !4251

panic72:                                          ; preds = %if.exit68
  store i64 %66, ptr %taddr73, align 8
  %131 = insertvalue %any undef, ptr %taddr73, 0
  %132 = insertvalue %any %131, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 0, ptr %taddr74, align 8
  %133 = insertvalue %any undef, ptr %taddr74, 0
  %134 = insertvalue %any %133, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr75, align 8
  %135 = load [2 x i64], ptr %taddr75, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr76, align 8
  %136 = load [2 x i64], ptr %taddr76, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr77, align 8
  %137 = load [2 x i64], ptr %taddr77, align 8
  store %any %132, ptr %varargslots78, align 8
  %ptradd79 = getelementptr inbounds i8, ptr %varargslots78, i64 16
  store %any %134, ptr %ptradd79, align 8
  %138 = insertvalue %"any[]" undef, ptr %varargslots78, 0
  %"$$temp80" = insertvalue %"any[]" %138, i64 2, 1
  store %"any[]" %"$$temp80", ptr %taddr81, align 8
  %139 = load [2 x i64], ptr %taddr81, align 8
  call void @std.core.builtin.panicf([2 x i64] %135, [2 x i64] %136, [2 x i64] %137, i32 129, [2 x i64] %139), !dbg !4277
  unreachable, !dbg !4277

panic84:                                          ; preds = %checkok82
  store i64 %73, ptr %taddr85, align 8
  %140 = insertvalue %any undef, ptr %taddr85, 0
  %141 = insertvalue %any %140, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store i64 1, ptr %taddr86, align 8
  %142 = insertvalue %any undef, ptr %taddr86, 0
  %143 = insertvalue %any %142, i64 ptrtoint (ptr @"$ct.long" to i64), 1
  store %"char[]" { ptr @.panic_msg.17, i64 61 }, ptr %taddr87, align 8
  %144 = load [2 x i64], ptr %taddr87, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr88, align 8
  %145 = load [2 x i64], ptr %taddr88, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr89, align 8
  %146 = load [2 x i64], ptr %taddr89, align 8
  store %any %141, ptr %varargslots90, align 8
  %ptradd91 = getelementptr inbounds i8, ptr %varargslots90, i64 16
  store %any %143, ptr %ptradd91, align 8
  %147 = insertvalue %"any[]" undef, ptr %varargslots90, 0
  %"$$temp92" = insertvalue %"any[]" %147, i64 2, 1
  store %"any[]" %"$$temp92", ptr %taddr93, align 8
  %148 = load [2 x i64], ptr %taddr93, align 8
  call void @std.core.builtin.panicf([2 x i64] %144, [2 x i64] %145, [2 x i64] %146, i32 130, [2 x i64] %148), !dbg !4283
  unreachable, !dbg !4283

panic99:                                          ; preds = %checkok94
  store %"char[]" { ptr @.panic_msg.22, i64 47 }, ptr %taddr100, align 8
  %149 = load [2 x i64], ptr %taddr100, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr101, align 8
  %150 = load [2 x i64], ptr %taddr101, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr102, align 8
  %151 = load [2 x i64], ptr %taddr102, align 8
  %152 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %152([2 x i64] %149, [2 x i64] %150, [2 x i64] %151, i32 130), !dbg !4283
  unreachable, !dbg !4283

panic111:                                         ; preds = %loop.body108
  store %"char[]" { ptr @.panic_msg.22, i64 47 }, ptr %taddr112, align 8
  %153 = load [2 x i64], ptr %taddr112, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr113, align 8
  %154 = load [2 x i64], ptr %taddr113, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr114, align 8
  %155 = load [2 x i64], ptr %taddr114, align 8
  %156 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %156([2 x i64] %153, [2 x i64] %154, [2 x i64] %155, i32 130), !dbg !4290
  unreachable, !dbg !4290

panic118:                                         ; preds = %checkok115
  store i64 %81, ptr %taddr119, align 8
  %157 = insertvalue %any undef, ptr %taddr119, 0
  %158 = insertvalue %any %157, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store i64 %83, ptr %taddr120, align 8
  %159 = insertvalue %any undef, ptr %taddr120, 0
  %160 = insertvalue %any %159, i64 ptrtoint (ptr @"$ct.ulong" to i64), 1
  store %"char[]" { ptr @.panic_msg.20, i64 59 }, ptr %taddr121, align 8
  %161 = load [2 x i64], ptr %taddr121, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr122, align 8
  %162 = load [2 x i64], ptr %taddr122, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr123, align 8
  %163 = load [2 x i64], ptr %taddr123, align 8
  store %any %158, ptr %varargslots124, align 8
  %ptradd125 = getelementptr inbounds i8, ptr %varargslots124, i64 16
  store %any %160, ptr %ptradd125, align 8
  %164 = insertvalue %"any[]" undef, ptr %varargslots124, 0
  %"$$temp126" = insertvalue %"any[]" %164, i64 2, 1
  store %"any[]" %"$$temp126", ptr %taddr127, align 8
  %165 = load [2 x i64], ptr %taddr127, align 8
  call void @std.core.builtin.panicf([2 x i64] %161, [2 x i64] %162, [2 x i64] %163, i32 130, [2 x i64] %165), !dbg !4290
  unreachable, !dbg !4290

panic134:                                         ; preds = %checkok128
  store %"char[]" { ptr @.panic_msg.21, i64 44 }, ptr %taddr135, align 8
  %166 = load [2 x i64], ptr %taddr135, align 8
  store %"char[]" { ptr @.file.18, i64 9 }, ptr %taddr136, align 8
  %167 = load [2 x i64], ptr %taddr136, align 8
  store %"char[]" { ptr @.func, i64 8 }, ptr %taddr137, align 8
  %168 = load [2 x i64], ptr %taddr137, align 8
  %169 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %169([2 x i64] %166, [2 x i64] %167, [2 x i64] %168, i32 133), !dbg !4296
  unreachable, !dbg !4296
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.new_from_utf32(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4307 {
entry:
  %utf32 = alloca %"uint[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %utf32, align 8
  call void @llvm.dbg.declare(metadata ptr %utf32, metadata !4314, metadata !DIExpression()), !dbg !4315
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4316, metadata !DIExpression()), !dbg !4317
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4318, metadata !DIExpression()), !dbg !4319
  %3 = load [2 x i64], ptr %utf32, align 8, !dbg !4320
  %4 = call i64 @std.core.string.conv.utf8len_for_utf32([2 x i64] %3), !dbg !4321
  store i64 %4, ptr %len, align 8, !dbg !4321
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4322, metadata !DIExpression()), !dbg !4323
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !4324
  %add = add i64 %5, 1, !dbg !4324
  store i64 %add, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !4325
  %i2nb = icmp eq i64 %6, 0, !dbg !4325
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4325

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4328
  br label %expr_block.exit, !dbg !4328

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !4329
  %7 = load i64, ptr %ptradd, align 8, !dbg !4329
  %8 = inttoptr i64 %7 to ptr, !dbg !4329
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr3, align 8
  %15 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.23, i64 14 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 68), !dbg !4331
  unreachable, !dbg !4331

match:                                            ; preds = %12
  %18 = load ptr, ptr %allocator1, align 8
  %19 = load i64, ptr %size, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, i64 %19, i32 0, i64 0), !dbg !4331
  %not_err = icmp eq i64 %20, 0, !dbg !4331
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4331
  br i1 %21, label %after_check, label %assign_optional, !dbg !4331

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !4331
  br label %guard_block, !dbg !4331

after_check:                                      ; preds = %match
  %22 = load ptr, ptr %retparam, align 8, !dbg !4331
  store ptr %22, ptr %blockret, align 8, !dbg !4331
  br label %expr_block.exit, !dbg !4331

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4331

guard_block:                                      ; preds = %assign_optional
  %23 = load i64, ptr %error_var, align 8, !dbg !4331
  ret i64 %23, !dbg !4331

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !4331
  store ptr %24, ptr %data, align 8, !dbg !4331
  %25 = load [2 x i64], ptr %utf32, align 8, !dbg !4332
  %26 = load ptr, ptr %data, align 8, !dbg !4332
  call void @std.core.string.conv.utf32to8_unsafe([2 x i64] %25, ptr %26), !dbg !4333
  %27 = load ptr, ptr %data, align 8, !dbg !4334
  %28 = load i64, ptr %len, align 8, !dbg !4335
  %ptradd5 = getelementptr inbounds i8, ptr %27, i64 %28, !dbg !4335
  store i8 0, ptr %ptradd5, align 1, !dbg !4336
  %29 = load ptr, ptr %data, align 8, !dbg !4337
  %30 = load i64, ptr %len, align 8, !dbg !4338
  %add6 = add i64 0, %30, !dbg !4338
  %size7 = sub i64 %add6, 0, !dbg !4338
  %31 = insertvalue %"char[]" undef, ptr %29, 0, !dbg !4338
  %32 = insertvalue %"char[]" %31, i64 %size7, 1, !dbg !4338
  store %"char[]" %32, ptr %0, align 8, !dbg !4338
  ret i64 0, !dbg !4338
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.new_from_utf16(ptr %0, [2 x i64] %1, [2 x i64] %2) #0 !dbg !4339 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %allocator = alloca %any, align 8
  %len = alloca i64, align 8
  %data = alloca ptr, align 8
  %error_var = alloca i64, align 8
  %allocator1 = alloca %any, align 8
  %size = alloca i64, align 8
  %blockret = alloca ptr, align 8
  %.inlinecache = alloca ptr, align 8
  %.cachedtype = alloca ptr, align 8
  %taddr = alloca %"char[]", align 8
  %taddr3 = alloca %"char[]", align 8
  %taddr4 = alloca %"char[]", align 8
  %retparam = alloca ptr, align 8
  %error_var5 = alloca i64, align 8
  %allocator10 = alloca %any, align 8
  %ptr = alloca ptr, align 8
  %.inlinecache15 = alloca ptr, align 8
  %.cachedtype16 = alloca ptr, align 8
  %taddr24 = alloca %"char[]", align 8
  %taddr25 = alloca %"char[]", align 8
  %taddr26 = alloca %"char[]", align 8
  %reterr = alloca i64, align 8
  store ptr null, ptr %.cachedtype16, align 8
  store ptr null, ptr %.cachedtype, align 8
  store [2 x i64] %1, ptr %utf16, align 8
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4346, metadata !DIExpression()), !dbg !4347
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata ptr %len, metadata !4350, metadata !DIExpression()), !dbg !4351
  %3 = load [2 x i64], ptr %utf16, align 8, !dbg !4352
  %4 = call i64 @std.core.string.conv.utf8len_for_utf16([2 x i64] %3), !dbg !4353
  store i64 %4, ptr %len, align 8, !dbg !4353
  call void @llvm.dbg.declare(metadata ptr %data, metadata !4354, metadata !DIExpression()), !dbg !4355
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator1, ptr align 8 %allocator, i32 16, i1 false)
  %5 = load i64, ptr %len, align 8, !dbg !4356
  %add = add i64 %5, 1, !dbg !4356
  store i64 %add, ptr %size, align 8
  %6 = load i64, ptr %size, align 8, !dbg !4357
  %i2nb = icmp eq i64 %6, 0, !dbg !4357
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4357

if.then:                                          ; preds = %entry
  store ptr null, ptr %blockret, align 8, !dbg !4360
  br label %expr_block.exit, !dbg !4360

if.exit:                                          ; preds = %entry
  %ptradd = getelementptr inbounds i8, ptr %allocator1, i64 8, !dbg !4361
  %7 = load i64, ptr %ptradd, align 8, !dbg !4361
  %8 = inttoptr i64 %7 to ptr, !dbg !4361
  %type = load ptr, ptr %.cachedtype, align 8
  %9 = icmp eq ptr %8, %type
  br i1 %9, label %cache_hit, label %cache_miss

cache_miss:                                       ; preds = %if.exit
  %ptradd2 = getelementptr inbounds i8, ptr %8, i64 16
  %10 = load ptr, ptr %ptradd2, align 8
  %11 = call ptr @.dyn_search(ptr %10, ptr @"$sel.acquire")
  store ptr %11, ptr %.inlinecache, align 8
  store ptr %8, ptr %.cachedtype, align 8
  br label %12

cache_hit:                                        ; preds = %if.exit
  %cache_hit_fn = load ptr, ptr %.inlinecache, align 8
  br label %12

12:                                               ; preds = %cache_hit, %cache_miss
  %fn_phi = phi ptr [ %cache_hit_fn, %cache_hit ], [ %11, %cache_miss ]
  %13 = icmp eq ptr %fn_phi, null
  br i1 %13, label %missing_function, label %match

missing_function:                                 ; preds = %12
  store %"char[]" { ptr @.panic_msg, i64 44 }, ptr %taddr, align 8
  %14 = load [2 x i64], ptr %taddr, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr3, align 8
  %15 = load [2 x i64], ptr %taddr3, align 8
  store %"char[]" { ptr @.func.24, i64 14 }, ptr %taddr4, align 8
  %16 = load [2 x i64], ptr %taddr4, align 8
  %17 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %17([2 x i64] %14, [2 x i64] %15, [2 x i64] %16, i32 68), !dbg !4363
  unreachable, !dbg !4363

match:                                            ; preds = %12
  %18 = load ptr, ptr %allocator1, align 8
  %19 = load i64, ptr %size, align 8
  %20 = call i64 %fn_phi(ptr %retparam, ptr %18, i64 %19, i32 0, i64 0), !dbg !4363
  %not_err = icmp eq i64 %20, 0, !dbg !4363
  %21 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4363
  br i1 %21, label %after_check, label %assign_optional, !dbg !4363

assign_optional:                                  ; preds = %match
  store i64 %20, ptr %error_var, align 8, !dbg !4363
  br label %guard_block, !dbg !4363

after_check:                                      ; preds = %match
  %22 = load ptr, ptr %retparam, align 8, !dbg !4363
  store ptr %22, ptr %blockret, align 8, !dbg !4363
  br label %expr_block.exit, !dbg !4363

expr_block.exit:                                  ; preds = %after_check, %if.then
  br label %noerr_block, !dbg !4363

guard_block:                                      ; preds = %assign_optional
  %23 = load i64, ptr %error_var, align 8, !dbg !4363
  ret i64 %23, !dbg !4363

noerr_block:                                      ; preds = %expr_block.exit
  %24 = load ptr, ptr %blockret, align 8, !dbg !4363
  store ptr %24, ptr %data, align 8, !dbg !4363
  %25 = load [2 x i64], ptr %utf16, align 8, !dbg !4364
  %26 = load ptr, ptr %data, align 8, !dbg !4364
  %27 = call i64 @std.core.string.conv.utf16to8_unsafe([2 x i64] %25, ptr %26), !dbg !4365
  %not_err6 = icmp eq i64 %27, 0, !dbg !4365
  %28 = call i1 @llvm.expect.i1(i1 %not_err6, i1 true), !dbg !4365
  br i1 %28, label %after_check8, label %assign_optional7, !dbg !4365

assign_optional7:                                 ; preds = %noerr_block
  store i64 %27, ptr %error_var5, align 8, !dbg !4365
  br label %guard_block9, !dbg !4365

after_check8:                                     ; preds = %noerr_block
  br label %noerr_block29, !dbg !4365

guard_block9:                                     ; preds = %assign_optional7
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %allocator10, ptr align 8 %allocator, i32 16, i1 false)
  %29 = load ptr, ptr %data, align 8, !dbg !4366
  store ptr %29, ptr %ptr, align 8
  %30 = load ptr, ptr %ptr, align 8, !dbg !4368
  %i2nb11 = icmp eq ptr %30, null, !dbg !4368
  br i1 %i2nb11, label %if.then12, label %if.exit13, !dbg !4368

if.then12:                                        ; preds = %guard_block9
  br label %expr_block.exit28, !dbg !4371

if.exit13:                                        ; preds = %guard_block9
  %ptradd14 = getelementptr inbounds i8, ptr %allocator10, i64 8, !dbg !4372
  %31 = load i64, ptr %ptradd14, align 8, !dbg !4372
  %32 = inttoptr i64 %31 to ptr, !dbg !4372
  %type17 = load ptr, ptr %.cachedtype16, align 8
  %33 = icmp eq ptr %32, %type17
  br i1 %33, label %cache_hit20, label %cache_miss18

cache_miss18:                                     ; preds = %if.exit13
  %ptradd19 = getelementptr inbounds i8, ptr %32, i64 16
  %34 = load ptr, ptr %ptradd19, align 8
  %35 = call ptr @.dyn_search(ptr %34, ptr @"$sel.release")
  store ptr %35, ptr %.inlinecache15, align 8
  store ptr %32, ptr %.cachedtype16, align 8
  br label %36

cache_hit20:                                      ; preds = %if.exit13
  %cache_hit_fn21 = load ptr, ptr %.inlinecache15, align 8
  br label %36

36:                                               ; preds = %cache_hit20, %cache_miss18
  %fn_phi22 = phi ptr [ %cache_hit_fn21, %cache_hit20 ], [ %35, %cache_miss18 ]
  %37 = icmp eq ptr %fn_phi22, null
  br i1 %37, label %missing_function23, label %match27

missing_function23:                               ; preds = %36
  store %"char[]" { ptr @.panic_msg.25, i64 44 }, ptr %taddr24, align 8
  %38 = load [2 x i64], ptr %taddr24, align 8
  store %"char[]" { ptr @.file, i64 16 }, ptr %taddr25, align 8
  %39 = load [2 x i64], ptr %taddr25, align 8
  store %"char[]" { ptr @.func.24, i64 14 }, ptr %taddr26, align 8
  %40 = load [2 x i64], ptr %taddr26, align 8
  %41 = load ptr, ptr @std.core.builtin.panic, align 8
  call void %41([2 x i64] %38, [2 x i64] %39, [2 x i64] %40, i32 105), !dbg !4373
  unreachable, !dbg !4373

match27:                                          ; preds = %36
  %42 = load ptr, ptr %allocator10, align 8, !dbg !4373
  %43 = load ptr, ptr %ptr, align 8, !dbg !4373
  call void %fn_phi22(ptr %42, ptr %43, i8 0), !dbg !4373
  br label %expr_block.exit28, !dbg !4373

expr_block.exit28:                                ; preds = %match27, %if.then12
  %44 = load i64, ptr %error_var5, align 8, !dbg !4373
  ret i64 %44, !dbg !4373

noerr_block29:                                    ; preds = %after_check8
  %45 = load ptr, ptr %data, align 8, !dbg !4374
  %46 = load i64, ptr %len, align 8, !dbg !4375
  %ptradd30 = getelementptr inbounds i8, ptr %45, i64 %46, !dbg !4375
  store i8 0, ptr %ptradd30, align 1, !dbg !4376
  %47 = load ptr, ptr %data, align 8, !dbg !4377
  %48 = load i64, ptr %len, align 8, !dbg !4378
  %add31 = add i64 0, %48, !dbg !4378
  %size32 = sub i64 %add31, 0, !dbg !4378
  %49 = insertvalue %"char[]" undef, ptr %47, 0, !dbg !4378
  %50 = insertvalue %"char[]" %49, i64 %size32, 1, !dbg !4378
  store %"char[]" %50, ptr %0, align 8, !dbg !4378
  ret i64 0, !dbg !4378
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.new_from_wstring(ptr %0, ptr %1, [2 x i64] %2) #0 !dbg !4379 {
entry:
  %wstring = alloca ptr, align 8
  %allocator = alloca %any, align 8
  %utf16_len = alloca i64, align 8
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4382, metadata !DIExpression()), !dbg !4383
  store [2 x i64] %2, ptr %allocator, align 8
  call void @llvm.dbg.declare(metadata ptr %allocator, metadata !4384, metadata !DIExpression()), !dbg !4385
  call void @llvm.dbg.declare(metadata ptr %utf16_len, metadata !4386, metadata !DIExpression()), !dbg !4387
  store i64 0, ptr %utf16_len, align 8, !dbg !4387
  br label %loop.cond, !dbg !4388

loop.cond:                                        ; preds = %loop.body, %entry
  %3 = load ptr, ptr %wstring, align 8, !dbg !4389
  %4 = load i64, ptr %utf16_len, align 8, !dbg !4391
  %ptroffset = getelementptr inbounds [2 x i8], ptr %3, i64 %4, !dbg !4391
  %5 = load i16, ptr %ptroffset, align 2, !dbg !4391
  %zext = zext i16 %5 to i32, !dbg !4391
  %neq = icmp ne i32 0, %zext, !dbg !4389
  br i1 %neq, label %loop.body, label %loop.exit, !dbg !4389

loop.body:                                        ; preds = %loop.cond
  %6 = load i64, ptr %utf16_len, align 8, !dbg !4392
  %add = add i64 %6, 1, !dbg !4392
  store i64 %add, ptr %utf16_len, align 8, !dbg !4392
  br label %loop.cond, !dbg !4392

loop.exit:                                        ; preds = %loop.cond
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4393, metadata !DIExpression()), !dbg !4394
  %7 = load ptr, ptr %wstring, align 8, !dbg !4395
  %8 = load i64, ptr %utf16_len, align 8, !dbg !4396
  %add1 = add i64 0, %8, !dbg !4396
  %size = sub i64 %add1, 0, !dbg !4396
  %9 = insertvalue %"ushort[]" undef, ptr %7, 0, !dbg !4396
  %10 = insertvalue %"ushort[]" %9, i64 %size, 1, !dbg !4396
  store %"ushort[]" %10, ptr %utf16, align 8, !dbg !4396
  %11 = load [2 x i64], ptr %utf16, align 8
  %12 = load [2 x i64], ptr %allocator, align 8
  %13 = call i64 @std.core.string.new_from_utf16(ptr %retparam, [2 x i64] %11, [2 x i64] %12), !dbg !4397
  %not_err = icmp eq i64 %13, 0, !dbg !4397
  %14 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4397
  br i1 %14, label %after_check, label %assign_optional, !dbg !4397

assign_optional:                                  ; preds = %loop.exit
  store i64 %13, ptr %reterr, align 8, !dbg !4397
  br label %err_retblock, !dbg !4397

after_check:                                      ; preds = %loop.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4397
  ret i64 0, !dbg !4397

err_retblock:                                     ; preds = %assign_optional
  %15 = load i64, ptr %reterr, align 8, !dbg !4397
  ret i64 %15, !dbg !4397
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.temp_from_wstring(ptr %0, ptr %1) #0 !dbg !4398 {
entry:
  %wstring = alloca ptr, align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store ptr %1, ptr %wstring, align 8
  call void @llvm.dbg.declare(metadata ptr %wstring, metadata !4401, metadata !DIExpression()), !dbg !4402
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4403
  %i2nb = icmp eq ptr %2, null, !dbg !4403
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4403

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4406
  br label %if.exit, !dbg !4406

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4408
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4405
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4405
  %6 = load ptr, ptr %wstring, align 8
  store %any %5, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  %8 = call i64 @std.core.string.new_from_wstring(ptr %retparam, ptr %6, [2 x i64] %7) #5, !dbg !4409
  %not_err = icmp eq i64 %8, 0, !dbg !4409
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4409
  br i1 %9, label %after_check, label %assign_optional, !dbg !4409

assign_optional:                                  ; preds = %if.exit
  store i64 %8, ptr %reterr, align 8, !dbg !4409
  br label %err_retblock, !dbg !4409

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4409
  ret i64 0, !dbg !4409

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !4409
  ret i64 %10, !dbg !4409
}

; Function Attrs: nounwind ssp uwtable(sync)
define weak i64 @std.core.string.temp_from_utf16(ptr %0, [2 x i64] %1) #0 !dbg !4410 {
entry:
  %utf16 = alloca %"ushort[]", align 8
  %reterr = alloca i64, align 8
  %retparam = alloca %"char[]", align 8
  %taddr = alloca %any, align 8
  store [2 x i64] %1, ptr %utf16, align 8
  call void @llvm.dbg.declare(metadata ptr %utf16, metadata !4413, metadata !DIExpression()), !dbg !4414
  %2 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4415
  %i2nb = icmp eq ptr %2, null, !dbg !4415
  br i1 %i2nb, label %if.then, label %if.exit, !dbg !4415

if.then:                                          ; preds = %entry
  call void @std.core.mem.allocator.init_default_temp_allocators(), !dbg !4418
  br label %if.exit, !dbg !4418

if.exit:                                          ; preds = %if.then, %entry
  %3 = load ptr, ptr @std.core.mem.allocator.thread_temp_allocator, align 8, !dbg !4420
  %4 = insertvalue %any undef, ptr %3, 0, !dbg !4417
  %5 = insertvalue %any %4, i64 ptrtoint (ptr @"$ct.std.core.mem.allocator.TempAllocator" to i64), 1, !dbg !4417
  %6 = load [2 x i64], ptr %utf16, align 8
  store %any %5, ptr %taddr, align 8
  %7 = load [2 x i64], ptr %taddr, align 8
  %8 = call i64 @std.core.string.new_from_utf16(ptr %retparam, [2 x i64] %6, [2 x i64] %7) #5, !dbg !4421
  %not_err = icmp eq i64 %8, 0, !dbg !4421
  %9 = call i1 @llvm.expect.i1(i1 %not_err, i1 true), !dbg !4421
  br i1 %9, label %after_check, label %assign_optional, !dbg !4421

assign_optional:                                  ; preds = %if.exit
  store i64 %8, ptr %reterr, align 8, !dbg !4421
  br label %err_retblock, !dbg !4421

after_check:                                      ; preds = %if.exit
  call void @llvm.memcpy.p0.p0.i32(ptr align 8 %0, ptr align 8 %retparam, i32 16, i1 false), !dbg !4421
  ret i64 0, !dbg !4421

err_retblock:                                     ; preds = %assign_optional
  %10 = load i64, ptr %reterr, align 8, !dbg !4421
  ret i64 %10, !dbg !4421
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.dstring.temp_with_capacity(i64) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.dstring.DString.appendf(ptr, ptr, [2 x i64], [2 x i64]) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i1 @llvm.expect.i1(i1, i1) #2

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.dstring.DString.zstr_view(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.init_default_temp_allocators() #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.mem.allocator.temp_allocator_next() #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak [2 x i64] @std.core.dstring.DString.copy_str(ptr, [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.mem.allocator.TempAllocator.reset(ptr, i64) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak [2 x i64] @std.core.dstring.DString.str_view(ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak ptr @std.core.dstring.DString.copy_zstr(ptr, [2 x i64]) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #3

define weak ptr @.dyn_search(ptr %0, ptr %1) unnamed_addr {
entry:
  br label %check

check:                                            ; preds = %no_match, %entry
  %2 = phi ptr [ %0, %entry ], [ %9, %no_match ]
  %3 = icmp eq ptr %2, null
  br i1 %3, label %missing_function, label %compare

missing_function:                                 ; preds = %check
  ret ptr null

compare:                                          ; preds = %check
  %4 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = icmp eq ptr %5, %1
  br i1 %6, label %match, label %no_match

match:                                            ; preds = %compare
  %7 = load ptr, ptr %2, align 8
  ret ptr %7

no_match:                                         ; preds = %compare
  %8 = getelementptr inbounds { ptr, ptr, ptr }, ptr %2, i32 0, i32 2
  %9 = load ptr, ptr %8, align 8
  br label %check
}

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.builtin.panicf([2 x i64], [2 x i64], [2 x i64], i32, [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.dstring.DString.append_chars(ptr, [2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf32([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak void @std.core.string.conv.utf32to8_unsafe([2 x i64], ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8len_for_utf16([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf16to8_unsafe([2 x i64], ptr) #0

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf16len_for_utf8([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8to16_unsafe([2 x i64], ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8_codepoints([2 x i64]) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i64 @std.core.string.conv.utf8to32_unsafe([2 x i64], ptr) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i8 @std.ascii.char.is_upper(i8) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare extern_weak i8 @std.ascii.char.is_lower(i8) #0

; Function Attrs: nounwind ssp uwtable(sync)
declare double @scalbn(double, i32) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.copysign.f64(double, double) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fabs.f64(double) #1

attributes #0 = { nounwind ssp uwtable(sync) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #5 = { alwaysinline }

!llvm.module.flags = !{!48, !49, !50, !51, !52, !53}
!llvm.dbg.cu = !{!54}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "SURROGATE_OFFSET", linkageName: "std.core.string.SURROGATE_OFFSET", scope: !2, file: !2, line: 18, type: !3, isLocal: true, isDefinition: true, align: 4)
!2 = !DIFile(filename: "string.c3", directory: "/opt/homebrew/lib/c3/std/core")
!3 = !DIBasicType(name: "uint", size: 32, encoding: DW_ATE_unsigned)
!4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
!5 = distinct !DIGlobalVariable(name: "SURROGATE_GENERIC_MASK", linkageName: "std.core.string.SURROGATE_GENERIC_MASK", scope: !2, file: !2, line: 19, type: !3, isLocal: true, isDefinition: true, align: 4)
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "SURROGATE_MASK", linkageName: "std.core.string.SURROGATE_MASK", scope: !2, file: !2, line: 20, type: !3, isLocal: true, isDefinition: true, align: 4)
!8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
!9 = distinct !DIGlobalVariable(name: "SURROGATE_CODEPOINT_MASK", linkageName: "std.core.string.SURROGATE_CODEPOINT_MASK", scope: !2, file: !2, line: 21, type: !3, isLocal: true, isDefinition: true, align: 4)
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "SURROGATE_BITS", linkageName: "std.core.string.SURROGATE_BITS", scope: !2, file: !2, line: 22, type: !3, isLocal: true, isDefinition: true, align: 4)
!12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
!13 = distinct !DIGlobalVariable(name: "SURROGATE_LOW_VALUE", linkageName: "std.core.string.SURROGATE_LOW_VALUE", scope: !2, file: !2, line: 23, type: !3, isLocal: true, isDefinition: true, align: 4)
!14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
!15 = distinct !DIGlobalVariable(name: "SURROGATE_HIGH_VALUE", linkageName: "std.core.string.SURROGATE_HIGH_VALUE", scope: !2, file: !2, line: 24, type: !3, isLocal: true, isDefinition: true, align: 4)
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_double.BITS", scope: !2, file: !2, line: 460, type: !18, isLocal: true, isDefinition: true, align: 4)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_double.EMIN", scope: !2, file: !2, line: 461, type: !18, isLocal: true, isDefinition: true, align: 4)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_double.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 64, align: 32, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 2, lowerBound: 0)
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_double.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 4)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, align: 32, elements: !29)
!29 = !{!30}
!30 = !DISubrange(count: 8, lowerBound: 0)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "BITS", linkageName: "to_float.BITS", scope: !2, file: !2, line: 457, type: !18, isLocal: true, isDefinition: true, align: 4)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "EMIN", linkageName: "to_float.EMIN", scope: !2, file: !2, line: 458, type: !18, isLocal: true, isDefinition: true, align: 4)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "TH", linkageName: "to_float.TH", scope: !2, file: !2, line: 40, type: !23, isLocal: true, isDefinition: true, align: 4)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "P10S", linkageName: "to_float.P10S", scope: !2, file: !2, line: 43, type: !28, isLocal: true, isDefinition: true, align: 4)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "KMAX", linkageName: "std.core.string.KMAX", scope: !41, file: !41, line: 29, type: !18, isLocal: false, isDefinition: true, align: 4)
!41 = !DIFile(filename: "string_to_real.c3", directory: "/opt/homebrew/lib/c3/std/core")
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "MASK", linkageName: "std.core.string.MASK", scope: !41, file: !41, line: 30, type: !18, isLocal: false, isDefinition: true, align: 4)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "B1B_DIG", linkageName: "std.core.string.B1B_DIG", scope: !41, file: !41, line: 31, type: !18, isLocal: false, isDefinition: true, align: 4)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "B1B_MAX", linkageName: "std.core.string.B1B_MAX", scope: !41, file: !41, line: 32, type: !23, isLocal: false, isDefinition: true, align: 4)
!48 = !{i32 2, !"Dwarf Version", i32 4}
!49 = !{i32 2, !"Debug Info Version", i32 3}
!50 = !{i32 2, !"wchar_size", i32 4}
!51 = !{i32 4, !"PIC Level", i32 2}
!52 = !{i32 1, !"uwtable", i32 1}
!53 = !{i32 2, !"frame-pointer", i32 1}
!54 = distinct !DICompileUnit(language: DW_LANG_C11, file: !2, producer: "c3c", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, globals: !55, splitDebugInlining: false)
!55 = !{!0, !4, !6, !8, !10, !12, !14, !16, !19, !21, !26, !31, !33, !35, !37, !39, !42, !44, !46}
!56 = distinct !DISubprogram(name: "trim", linkageName: "std.core.String.trim", scope: !2, file: !2, line: 147, type: !57, scopeLine: 147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!57 = !DISubroutineType(types: !58)
!58 = !{!59, !59, !59}
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "String", baseType: !60)
!60 = !DICompositeType(tag: DW_TAG_structure_type, name: "char[]", size: 128, align: 64, elements: !61, identifier: "char[]")
!61 = !{!62, !65}
!62 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !60, baseType: !63, size: 64, align: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "char*", baseType: !64, size: 64, align: 64, dwarfAddressSpace: 0)
!64 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_unsigned_char)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !60, baseType: !66, size: 64, align: 64, offset: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "usz", baseType: !67)
!67 = !DIBasicType(name: "ulong", size: 64, encoding: DW_ATE_unsigned)
!68 = !{}
!69 = !DILocalVariable(name: "string", arg: 1, scope: !56, file: !2, line: 147, type: !59)
!70 = !DILocation(line: 147, column: 23, scope: !56)
!71 = !DILocalVariable(name: "to_trim", arg: 2, scope: !56, file: !2, line: 147, type: !59)
!72 = !DILocation(line: 147, column: 38, scope: !56)
!73 = !DILocation(line: 149, column: 29, scope: !56)
!74 = !DILocation(line: 149, column: 12, scope: !56)
!75 = !DILocation(line: 149, column: 49, scope: !56)
!76 = distinct !DISubprogram(name: "trim_left", linkageName: "std.core.String.trim_left", scope: !2, file: !2, line: 160, type: !57, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!77 = !DILocalVariable(name: "string", arg: 1, scope: !76, file: !2, line: 160, type: !59)
!78 = !DILocation(line: 160, column: 28, scope: !76)
!79 = !DILocalVariable(name: "to_trim", arg: 2, scope: !76, file: !2, line: 160, type: !59)
!80 = !DILocation(line: 160, column: 43, scope: !76)
!81 = !DILocalVariable(name: "start", scope: !76, file: !2, line: 162, type: !66, align: 8)
!82 = !DILocation(line: 162, column: 6, scope: !76)
!83 = !DILocation(line: 162, column: 14, scope: !76)
!84 = !DILocalVariable(name: "len", scope: !76, file: !2, line: 163, type: !66, align: 8)
!85 = !DILocation(line: 163, column: 6, scope: !76)
!86 = !DILocation(line: 163, column: 12, scope: !76)
!87 = !DILocation(line: 164, column: 2, scope: !76)
!88 = !DILocation(line: 164, column: 9, scope: !89)
!89 = distinct !DILexicalBlock(scope: !76, file: !2, line: 164, column: 2)
!90 = !DILocation(line: 164, column: 17, scope: !89)
!91 = !DILocation(line: 164, column: 36, scope: !89)
!92 = !DILocation(line: 164, column: 43, scope: !89)
!93 = !DILocation(line: 110, column: 16, scope: !94, inlinedAt: !96)
!94 = distinct !DILexicalBlock(scope: !95, file: !2, line: 110, column: 2)
!95 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!96 = !DILocation(line: 164, column: 24, scope: !89)
!97 = !DILocalVariable(name: ".temp", scope: !94, file: !2, line: 110, type: !66, align: 8)
!98 = !DILocalVariable(name: "ch", scope: !99, file: !2, line: 110, type: !64, align: 1)
!99 = distinct !DILexicalBlock(scope: !94, file: !2, line: 110, column: 21)
!100 = !DILocation(line: 110, column: 11, scope: !99, inlinedAt: !96)
!101 = !DILocation(line: 110, column: 16, scope: !99, inlinedAt: !96)
!102 = !DILocation(line: 110, column: 25, scope: !99, inlinedAt: !96)
!103 = !DILocation(line: 110, column: 31, scope: !99, inlinedAt: !96)
!104 = !DILocation(line: 110, column: 41, scope: !99, inlinedAt: !96)
!105 = !DILocation(line: 111, column: 9, scope: !95, inlinedAt: !96)
!106 = !DILocation(line: 164, column: 61, scope: !89)
!107 = !DILocation(line: 165, column: 6, scope: !76)
!108 = !DILocation(line: 165, column: 15, scope: !76)
!109 = !DILocation(line: 165, column: 27, scope: !76)
!110 = !DILocation(line: 166, column: 9, scope: !76)
!111 = !DILocation(line: 166, column: 16, scope: !76)
!112 = distinct !DISubprogram(name: "trim_right", linkageName: "std.core.String.trim_right", scope: !2, file: !2, line: 177, type: !57, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!113 = !DILocalVariable(name: "string", arg: 1, scope: !112, file: !2, line: 177, type: !59)
!114 = !DILocation(line: 177, column: 29, scope: !112)
!115 = !DILocalVariable(name: "to_trim", arg: 2, scope: !112, file: !2, line: 177, type: !59)
!116 = !DILocation(line: 177, column: 44, scope: !112)
!117 = !DILocalVariable(name: "len", scope: !112, file: !2, line: 179, type: !66, align: 8)
!118 = !DILocation(line: 179, column: 6, scope: !112)
!119 = !DILocation(line: 179, column: 12, scope: !112)
!120 = !DILocation(line: 180, column: 2, scope: !112)
!121 = !DILocation(line: 180, column: 9, scope: !122)
!122 = distinct !DILexicalBlock(scope: !112, file: !2, line: 180, column: 2)
!123 = !DILocation(line: 180, column: 32, scope: !122)
!124 = !DILocation(line: 180, column: 39, scope: !122)
!125 = !DILocation(line: 110, column: 16, scope: !126, inlinedAt: !128)
!126 = distinct !DILexicalBlock(scope: !127, file: !2, line: 110, column: 2)
!127 = distinct !DISubprogram(name: "char_in_set", linkageName: "char_in_set", scope: !2, file: !2, line: 108, scopeLine: 108, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!128 = !DILocation(line: 180, column: 20, scope: !122)
!129 = !DILocalVariable(name: ".temp", scope: !126, file: !2, line: 110, type: !66, align: 8)
!130 = !DILocalVariable(name: "ch", scope: !131, file: !2, line: 110, type: !64, align: 1)
!131 = distinct !DILexicalBlock(scope: !126, file: !2, line: 110, column: 21)
!132 = !DILocation(line: 110, column: 11, scope: !131, inlinedAt: !128)
!133 = !DILocation(line: 110, column: 16, scope: !131, inlinedAt: !128)
!134 = !DILocation(line: 110, column: 25, scope: !131, inlinedAt: !128)
!135 = !DILocation(line: 110, column: 31, scope: !131, inlinedAt: !128)
!136 = !DILocation(line: 110, column: 41, scope: !131, inlinedAt: !128)
!137 = !DILocation(line: 111, column: 9, scope: !127, inlinedAt: !128)
!138 = !DILocation(line: 180, column: 59, scope: !122)
!139 = !DILocation(line: 181, column: 9, scope: !112)
!140 = !DILocation(line: 181, column: 16, scope: !112)
!141 = !DILocation(line: 181, column: 17, scope: !112)
!142 = distinct !DISubprogram(name: "starts_with", linkageName: "std.core.String.starts_with", scope: !2, file: !2, line: 192, type: !143, scopeLine: 192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!143 = !DISubroutineType(types: !144)
!144 = !{!145, !59, !59}
!145 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!146 = !DILocalVariable(name: "string", arg: 1, scope: !142, file: !2, line: 192, type: !59)
!147 = !DILocation(line: 192, column: 28, scope: !142)
!148 = !DILocalVariable(name: "needle", arg: 2, scope: !142, file: !2, line: 192, type: !59)
!149 = !DILocation(line: 192, column: 43, scope: !142)
!150 = !DILocation(line: 194, column: 6, scope: !142)
!151 = !DILocation(line: 194, column: 19, scope: !142)
!152 = !DILocation(line: 194, column: 38, scope: !142)
!153 = !DILocation(line: 195, column: 6, scope: !142)
!154 = !DILocation(line: 195, column: 26, scope: !142)
!155 = !DILocation(line: 196, column: 9, scope: !142)
!156 = !DILocation(line: 196, column: 16, scope: !142)
!157 = !DILocation(line: 196, column: 17, scope: !142)
!158 = !DILocation(line: 196, column: 32, scope: !142)
!159 = distinct !DISubprogram(name: "ends_with", linkageName: "std.core.String.ends_with", scope: !2, file: !2, line: 207, type: !143, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!160 = !DILocalVariable(name: "string", arg: 1, scope: !159, file: !2, line: 207, type: !59)
!161 = !DILocation(line: 207, column: 26, scope: !159)
!162 = !DILocalVariable(name: "needle", arg: 2, scope: !159, file: !2, line: 207, type: !59)
!163 = !DILocation(line: 207, column: 41, scope: !159)
!164 = !DILocation(line: 209, column: 6, scope: !159)
!165 = !DILocation(line: 209, column: 19, scope: !159)
!166 = !DILocation(line: 209, column: 38, scope: !159)
!167 = !DILocation(line: 210, column: 6, scope: !159)
!168 = !DILocation(line: 210, column: 26, scope: !159)
!169 = !DILocation(line: 211, column: 9, scope: !159)
!170 = !DILocation(line: 211, column: 17, scope: !159)
!171 = !DILocation(line: 211, column: 34, scope: !159)
!172 = distinct !DISubprogram(name: "strip", linkageName: "std.core.String.strip", scope: !2, file: !2, line: 222, type: !57, scopeLine: 222, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!173 = !DILocalVariable(name: "string", arg: 1, scope: !172, file: !2, line: 222, type: !59)
!174 = !DILocation(line: 222, column: 24, scope: !172)
!175 = !DILocalVariable(name: "needle", arg: 2, scope: !172, file: !2, line: 222, type: !59)
!176 = !DILocation(line: 222, column: 39, scope: !172)
!177 = !DILocation(line: 224, column: 6, scope: !172)
!178 = !DILocation(line: 224, column: 41, scope: !172)
!179 = !DILocation(line: 224, column: 22, scope: !172)
!180 = !DILocation(line: 224, column: 57, scope: !172)
!181 = !DILocation(line: 225, column: 9, scope: !172)
!182 = !DILocation(line: 225, column: 16, scope: !172)
!183 = distinct !DISubprogram(name: "strip_end", linkageName: "std.core.String.strip_end", scope: !2, file: !2, line: 236, type: !57, scopeLine: 236, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!184 = !DILocalVariable(name: "string", arg: 1, scope: !183, file: !2, line: 236, type: !59)
!185 = !DILocation(line: 236, column: 28, scope: !183)
!186 = !DILocalVariable(name: "needle", arg: 2, scope: !183, file: !2, line: 236, type: !59)
!187 = !DILocation(line: 236, column: 43, scope: !183)
!188 = !DILocation(line: 238, column: 6, scope: !183)
!189 = !DILocation(line: 238, column: 39, scope: !183)
!190 = !DILocation(line: 238, column: 22, scope: !183)
!191 = !DILocation(line: 238, column: 55, scope: !183)
!192 = !DILocation(line: 240, column: 9, scope: !183)
!193 = !DILocation(line: 240, column: 16, scope: !183)
!194 = !DILocation(line: 240, column: 18, scope: !183)
!195 = !DILocation(line: 240, column: 31, scope: !183)
!196 = distinct !DISubprogram(name: "split", linkageName: "std.core.String.split", scope: !2, file: !2, line: 255, type: !197, scopeLine: 255, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!197 = !DISubroutineType(types: !198)
!198 = !{!199, !59, !59, !67, !204, !145}
!199 = !DICompositeType(tag: DW_TAG_structure_type, name: "String[]", size: 128, align: 64, elements: !200, identifier: "String[]")
!200 = !{!201, !203}
!201 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !199, baseType: !202, size: 64, align: 64)
!202 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String*", baseType: !59, size: 64, align: 64, dwarfAddressSpace: 0)
!203 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !199, baseType: !66, size: 64, align: 64, offset: 64)
!204 = !DICompositeType(tag: DW_TAG_structure_type, name: "Allocator", size: 128, align: 64, elements: !205, identifier: "Allocator")
!205 = !{!206, !208}
!206 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !204, baseType: !207, size: 64, align: 64)
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "void*", baseType: null, size: 64, align: 64, dwarfAddressSpace: 0)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !204, baseType: !209, size: 64, align: 64, offset: 64)
!209 = !DIBasicType(name: "typeid", size: 64, encoding: DW_ATE_address)
!210 = !DILocalVariable(name: "s", arg: 1, scope: !196, file: !2, line: 255, type: !59)
!211 = !DILocation(line: 255, column: 26, scope: !196)
!212 = !DILocalVariable(name: "needle", arg: 2, scope: !196, file: !2, line: 255, type: !59)
!213 = !DILocation(line: 255, column: 36, scope: !196)
!214 = !DILocalVariable(name: "max", arg: 3, scope: !196, file: !2, line: 255, type: !66)
!215 = !DILocation(line: 255, column: 48, scope: !196)
!216 = !DILocalVariable(name: "allocator", arg: 4, scope: !196, file: !2, line: 255, type: !204)
!217 = !DILocation(line: 255, column: 67, scope: !196)
!218 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !196, file: !2, line: 255, type: !145)
!219 = !DILocation(line: 255, column: 103, scope: !196)
!220 = !DILocation(line: 252, column: 11, scope: !221)
!221 = distinct !DILexicalBlock(scope: !196, file: !2, line: 256, column: 1)
!222 = !DILocalVariable(name: "capacity", scope: !196, file: !2, line: 257, type: !66, align: 8)
!223 = !DILocation(line: 257, column: 6, scope: !196)
!224 = !DILocation(line: 257, column: 17, scope: !196)
!225 = !DILocalVariable(name: "i", scope: !196, file: !2, line: 258, type: !66, align: 8)
!226 = !DILocation(line: 258, column: 6, scope: !196)
!227 = !DILocation(line: 258, column: 10, scope: !196)
!228 = !DILocalVariable(name: "holder", scope: !196, file: !2, line: 259, type: !202, align: 8)
!229 = !DILocation(line: 259, column: 10, scope: !196)
!230 = !DILocation(line: 286, column: 55, scope: !231, inlinedAt: !233)
!231 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !232, file: !232, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!232 = !DIFile(filename: "mem_allocator.c3", directory: "/opt/homebrew/lib/c3/std/core")
!233 = !DILocation(line: 269, column: 9, scope: !234, inlinedAt: !235)
!234 = distinct !DISubprogram(name: "alloc_array", linkageName: "alloc_array", scope: !232, file: !232, line: 267, scopeLine: 267, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!235 = !DILocation(line: 259, column: 19, scope: !196)
!236 = !DILocation(line: 286, column: 40, scope: !231, inlinedAt: !233)
!237 = !DILocation(line: 62, column: 6, scope: !238, inlinedAt: !239)
!238 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!239 = !DILocation(line: 286, column: 18, scope: !231, inlinedAt: !233)
!240 = !DILocation(line: 62, column: 20, scope: !238, inlinedAt: !239)
!241 = !DILocation(line: 28, column: 71, scope: !242, inlinedAt: !243)
!242 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!243 = !DILocation(line: 68, column: 10, scope: !238, inlinedAt: !239)
!244 = !DILocation(line: 286, column: 67, scope: !231, inlinedAt: !233)
!245 = !DILocalVariable(name: "no_more", scope: !196, file: !2, line: 260, type: !145, align: 1)
!246 = !DILocation(line: 260, column: 7, scope: !196)
!247 = !DILocation(line: 260, column: 17, scope: !196)
!248 = !DILocation(line: 261, column: 2, scope: !196)
!249 = !DILocation(line: 261, column: 10, scope: !250)
!250 = distinct !DILexicalBlock(scope: !196, file: !2, line: 261, column: 2)
!251 = !DILocalVariable(name: "index", scope: !252, file: !2, line: 263, type: !67, align: 8)
!252 = distinct !DILexicalBlock(scope: !250, file: !2, line: 262, column: 2)
!253 = !DILocation(line: 263, column: 8, scope: !252)
!254 = !DILocation(line: 263, column: 16, scope: !252)
!255 = !DILocation(line: 263, column: 21, scope: !252)
!256 = !DILocation(line: 263, column: 31, scope: !252)
!257 = !DILocation(line: 263, column: 55, scope: !252)
!258 = !DILocalVariable(name: "res", scope: !252, file: !2, line: 264, type: !59, align: 8)
!259 = !DILocation(line: 264, column: 10, scope: !252)
!260 = !DILocation(line: 265, column: 7, scope: !252)
!261 = !DILocation(line: 267, column: 10, scope: !262)
!262 = distinct !DILexicalBlock(scope: !252, file: !2, line: 266, column: 3)
!263 = !DILocation(line: 267, column: 12, scope: !262)
!264 = !DILocation(line: 267, column: 13, scope: !262)
!265 = !DILocation(line: 268, column: 8, scope: !262)
!266 = !DILocation(line: 268, column: 10, scope: !262)
!267 = !DILocation(line: 268, column: 18, scope: !262)
!268 = !DILocation(line: 272, column: 10, scope: !269)
!269 = distinct !DILexicalBlock(scope: !252, file: !2, line: 271, column: 3)
!270 = !DILocation(line: 273, column: 14, scope: !269)
!271 = !DILocation(line: 275, column: 7, scope: !252)
!272 = !DILocation(line: 275, column: 19, scope: !252)
!273 = !DILocation(line: 277, column: 10, scope: !274)
!274 = distinct !DILexicalBlock(scope: !252, file: !2, line: 276, column: 9)
!275 = !DILocation(line: 280, column: 7, scope: !252)
!276 = !DILocation(line: 280, column: 12, scope: !252)
!277 = !DILocation(line: 282, column: 4, scope: !278)
!278 = distinct !DILexicalBlock(scope: !252, file: !2, line: 281, column: 3)
!279 = !DILocation(line: 283, column: 43, scope: !278)
!280 = !DILocation(line: 283, column: 67, scope: !278)
!281 = !DILocation(line: 283, column: 51, scope: !278)
!282 = !DILocation(line: 90, column: 6, scope: !283, inlinedAt: !284)
!283 = distinct !DISubprogram(name: "realloc_try", linkageName: "realloc_try", scope: !232, file: !232, line: 88, scopeLine: 88, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!284 = !DILocation(line: 85, column: 9, scope: !285, inlinedAt: !286)
!285 = distinct !DISubprogram(name: "realloc", linkageName: "realloc", scope: !232, file: !232, line: 83, scopeLine: 83, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!286 = !DILocation(line: 283, column: 13, scope: !278)
!287 = !DILocation(line: 101, column: 6, scope: !288, inlinedAt: !289)
!288 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !232, file: !232, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!289 = !DILocation(line: 92, column: 3, scope: !290, inlinedAt: !284)
!290 = distinct !DILexicalBlock(scope: !283, file: !232, line: 91, column: 2)
!291 = !DILocation(line: 101, column: 18, scope: !288, inlinedAt: !289)
!292 = !DILocation(line: 105, column: 25, scope: !288, inlinedAt: !289)
!293 = !DILocation(line: 105, column: 2, scope: !288, inlinedAt: !289)
!294 = !DILocation(line: 93, column: 10, scope: !290, inlinedAt: !284)
!295 = !DILocation(line: 95, column: 6, scope: !283, inlinedAt: !284)
!296 = !DILocation(line: 28, column: 71, scope: !297, inlinedAt: !298)
!297 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!298 = !DILocation(line: 95, column: 19, scope: !283, inlinedAt: !284)
!299 = !DILocation(line: 35, column: 60, scope: !300, inlinedAt: !301)
!300 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 35, scopeLine: 35, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!301 = !DILocation(line: 96, column: 9, scope: !283, inlinedAt: !284)
!302 = !DILocation(line: 285, column: 3, scope: !252)
!303 = !DILocation(line: 285, column: 10, scope: !252)
!304 = !DILocation(line: 285, column: 17, scope: !252)
!305 = !DILocation(line: 287, column: 9, scope: !196)
!306 = !DILocation(line: 287, column: 17, scope: !196)
!307 = !DILocation(line: 253, column: 10, scope: !196)
!308 = distinct !DISubprogram(name: "new_split", linkageName: "std.core.String.new_split", scope: !2, file: !2, line: 301, type: !309, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!309 = !DISubroutineType(types: !310)
!310 = !{!199, !59, !59, !67, !145}
!311 = !DILocalVariable(name: "s", arg: 1, scope: !308, file: !2, line: 301, type: !59)
!312 = !DILocation(line: 301, column: 30, scope: !308)
!313 = !DILocalVariable(name: "needle", arg: 2, scope: !308, file: !2, line: 301, type: !59)
!314 = !DILocation(line: 301, column: 40, scope: !308)
!315 = !DILocalVariable(name: "max", arg: 3, scope: !308, file: !2, line: 301, type: !66)
!316 = !DILocation(line: 301, column: 52, scope: !308)
!317 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !308, file: !2, line: 301, type: !145)
!318 = !DILocation(line: 301, column: 66, scope: !308)
!319 = !DILocation(line: 298, column: 11, scope: !320)
!320 = distinct !DILexicalBlock(scope: !308, file: !2, line: 301, column: 81)
!321 = !DILocation(line: 301, column: 121, scope: !308)
!322 = !DILocation(line: 301, column: 81, scope: !308)
!323 = !DILocation(line: 299, column: 10, scope: !308)
!324 = distinct !DISubprogram(name: "tsplit", linkageName: "std.core.String.tsplit", scope: !2, file: !2, line: 312, type: !309, scopeLine: 312, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!325 = !DILocalVariable(name: "s", arg: 1, scope: !324, file: !2, line: 312, type: !59)
!326 = !DILocation(line: 312, column: 27, scope: !324)
!327 = !DILocalVariable(name: "needle", arg: 2, scope: !324, file: !2, line: 312, type: !59)
!328 = !DILocation(line: 312, column: 37, scope: !324)
!329 = !DILocalVariable(name: "max", arg: 3, scope: !324, file: !2, line: 312, type: !66)
!330 = !DILocation(line: 312, column: 49, scope: !324)
!331 = !DILocalVariable(name: "skip_empty", arg: 4, scope: !324, file: !2, line: 312, type: !145)
!332 = !DILocation(line: 312, column: 63, scope: !324)
!333 = !DILocation(line: 396, column: 6, scope: !334, inlinedAt: !335)
!334 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!335 = !DILocation(line: 312, column: 107, scope: !324)
!336 = !DILocation(line: 398, column: 3, scope: !337, inlinedAt: !335)
!337 = distinct !DILexicalBlock(scope: !334, file: !232, line: 397, column: 2)
!338 = !DILocation(line: 400, column: 9, scope: !334, inlinedAt: !335)
!339 = !DILocation(line: 312, column: 126, scope: !324)
!340 = !DILocation(line: 312, column: 86, scope: !324)
!341 = distinct !DISubprogram(name: "split_to_buffer", linkageName: "std.core.String.split_to_buffer", scope: !2, file: !2, line: 327, type: !342, scopeLine: 327, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!342 = !DISubroutineType(types: !343)
!343 = !{!344, !346, !59, !59, !199, !67, !145}
!344 = !DIDerivedType(tag: DW_TAG_typedef, name: "anyfault", baseType: !345)
!345 = !DIBasicType(name: "long", size: 64, encoding: DW_ATE_signed)
!346 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "String[]*", baseType: !199, size: 64, align: 64, dwarfAddressSpace: 0)
!347 = !DILocalVariable(name: "s", arg: 1, scope: !341, file: !2, line: 327, type: !59)
!348 = !DILocation(line: 327, column: 37, scope: !341)
!349 = !DILocalVariable(name: "needle", arg: 2, scope: !341, file: !2, line: 327, type: !59)
!350 = !DILocation(line: 327, column: 47, scope: !341)
!351 = !DILocalVariable(name: "buffer", arg: 3, scope: !341, file: !2, line: 327, type: !199)
!352 = !DILocation(line: 327, column: 64, scope: !341)
!353 = !DILocalVariable(name: "max", arg: 4, scope: !341, file: !2, line: 327, type: !66)
!354 = !DILocation(line: 327, column: 76, scope: !341)
!355 = !DILocalVariable(name: "skip_empty", arg: 5, scope: !341, file: !2, line: 327, type: !145)
!356 = !DILocation(line: 327, column: 90, scope: !341)
!357 = !DILocation(line: 323, column: 11, scope: !358)
!358 = distinct !DILexicalBlock(scope: !341, file: !2, line: 328, column: 1)
!359 = !DILocalVariable(name: "max_capacity", scope: !341, file: !2, line: 329, type: !66, align: 8)
!360 = !DILocation(line: 329, column: 6, scope: !341)
!361 = !DILocation(line: 329, column: 21, scope: !341)
!362 = !DILocalVariable(name: "i", scope: !341, file: !2, line: 330, type: !66, align: 8)
!363 = !DILocation(line: 330, column: 6, scope: !341)
!364 = !DILocation(line: 330, column: 10, scope: !341)
!365 = !DILocalVariable(name: "no_more", scope: !341, file: !2, line: 331, type: !145, align: 1)
!366 = !DILocation(line: 331, column: 7, scope: !341)
!367 = !DILocation(line: 331, column: 17, scope: !341)
!368 = !DILocation(line: 332, column: 2, scope: !341)
!369 = !DILocation(line: 332, column: 10, scope: !370)
!370 = distinct !DILexicalBlock(scope: !341, file: !2, line: 332, column: 2)
!371 = !DILocalVariable(name: "index", scope: !372, file: !2, line: 334, type: !67, align: 8)
!372 = distinct !DILexicalBlock(scope: !370, file: !2, line: 333, column: 2)
!373 = !DILocation(line: 334, column: 8, scope: !372)
!374 = !DILocation(line: 334, column: 16, scope: !372)
!375 = !DILocation(line: 334, column: 21, scope: !372)
!376 = !DILocation(line: 334, column: 31, scope: !372)
!377 = !DILocation(line: 334, column: 55, scope: !372)
!378 = !DILocalVariable(name: "res", scope: !372, file: !2, line: 335, type: !59, align: 8)
!379 = !DILocation(line: 335, column: 10, scope: !372)
!380 = !DILocation(line: 336, column: 7, scope: !372)
!381 = !DILocation(line: 338, column: 10, scope: !382)
!382 = distinct !DILexicalBlock(scope: !372, file: !2, line: 337, column: 3)
!383 = !DILocation(line: 338, column: 12, scope: !382)
!384 = !DILocation(line: 338, column: 13, scope: !382)
!385 = !DILocation(line: 339, column: 8, scope: !382)
!386 = !DILocation(line: 339, column: 10, scope: !382)
!387 = !DILocation(line: 339, column: 18, scope: !382)
!388 = !DILocation(line: 343, column: 10, scope: !389)
!389 = distinct !DILexicalBlock(scope: !372, file: !2, line: 342, column: 3)
!390 = !DILocation(line: 344, column: 14, scope: !389)
!391 = !DILocation(line: 346, column: 7, scope: !372)
!392 = !DILocation(line: 346, column: 19, scope: !372)
!393 = !DILocation(line: 348, column: 4, scope: !394)
!394 = distinct !DILexicalBlock(scope: !372, file: !2, line: 347, column: 3)
!395 = !DILocation(line: 350, column: 7, scope: !372)
!396 = !DILocation(line: 350, column: 12, scope: !372)
!397 = !DILocation(line: 352, column: 11, scope: !398)
!398 = distinct !DILexicalBlock(scope: !372, file: !2, line: 351, column: 3)
!399 = !DILocation(line: 354, column: 3, scope: !372)
!400 = !DILocation(line: 354, column: 10, scope: !372)
!401 = !DILocation(line: 354, column: 17, scope: !372)
!402 = !DILocation(line: 356, column: 9, scope: !341)
!403 = !DILocation(line: 356, column: 16, scope: !341)
!404 = !DILocation(line: 356, column: 17, scope: !341)
!405 = !DILocation(line: 324, column: 10, scope: !341)
!406 = distinct !DISubprogram(name: "contains", linkageName: "std.core.String.contains", scope: !2, file: !2, line: 367, type: !143, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!407 = !DILocalVariable(name: "s", arg: 1, scope: !406, file: !2, line: 367, type: !59)
!408 = !DILocation(line: 367, column: 25, scope: !406)
!409 = !DILocalVariable(name: "needle", arg: 2, scope: !406, file: !2, line: 367, type: !59)
!410 = !DILocation(line: 367, column: 35, scope: !406)
!411 = !DILocation(line: 366, column: 12, scope: !412, inlinedAt: !414)
!412 = distinct !DISubprogram(name: "@ok", linkageName: "@ok", scope: !413, file: !413, line: 364, scopeLine: 364, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!413 = !DIFile(filename: "builtin.c3", directory: "/opt/homebrew/lib/c3/std/core")
!414 = !DILocation(line: 369, column: 9, scope: !406)
!415 = !DILocation(line: 366, column: 26, scope: !412, inlinedAt: !414)
!416 = !DILocation(line: 367, column: 9, scope: !412, inlinedAt: !414)
!417 = distinct !DISubprogram(name: "index_of_char", linkageName: "std.core.String.index_of_char", scope: !2, file: !2, line: 382, type: !418, scopeLine: 382, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!418 = !DISubroutineType(types: !419)
!419 = !{!344, !420, !59, !64}
!420 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "usz*", baseType: !66, size: 64, align: 64, dwarfAddressSpace: 0)
!421 = !DILocalVariable(name: "s", arg: 1, scope: !417, file: !2, line: 382, type: !59)
!422 = !DILocation(line: 382, column: 30, scope: !417)
!423 = !DILocalVariable(name: "needle", arg: 2, scope: !417, file: !2, line: 382, type: !64)
!424 = !DILocation(line: 382, column: 38, scope: !417)
!425 = !DILocation(line: 384, column: 18, scope: !426)
!426 = distinct !DILexicalBlock(scope: !417, file: !2, line: 384, column: 2)
!427 = !DILocalVariable(name: ".temp", scope: !426, file: !2, line: 384, type: !66, align: 8)
!428 = !DILocation(line: 384, column: 11, scope: !426)
!429 = !DILocalVariable(name: "i", scope: !430, file: !2, line: 384, type: !66, align: 8)
!430 = distinct !DILexicalBlock(scope: !426, file: !2, line: 385, column: 2)
!431 = !DILocation(line: 384, column: 11, scope: !430)
!432 = !DILocalVariable(name: "c", scope: !430, file: !2, line: 384, type: !64, align: 1)
!433 = !DILocation(line: 384, column: 14, scope: !430)
!434 = !DILocation(line: 384, column: 18, scope: !430)
!435 = !DILocation(line: 386, column: 7, scope: !436)
!436 = distinct !DILexicalBlock(scope: !430, file: !2, line: 385, column: 2)
!437 = !DILocation(line: 386, column: 12, scope: !436)
!438 = !DILocation(line: 386, column: 27, scope: !436)
!439 = !DILocation(line: 378, column: 10, scope: !436)
!440 = !DILocation(line: 378, column: 19, scope: !436)
!441 = !DILocation(line: 388, column: 9, scope: !417)
!442 = distinct !DISubprogram(name: "index_of_chars", linkageName: "std.core.String.index_of_chars", scope: !2, file: !2, line: 401, type: !443, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!443 = !DISubroutineType(types: !444)
!444 = !{!344, !420, !59, !60}
!445 = !DILocalVariable(name: "s", arg: 1, scope: !442, file: !2, line: 401, type: !59)
!446 = !DILocation(line: 401, column: 38, scope: !442)
!447 = !DILocalVariable(name: "needle", arg: 2, scope: !442, file: !2, line: 401, type: !60)
!448 = !DILocation(line: 401, column: 48, scope: !442)
!449 = !DILocation(line: 403, column: 21, scope: !450)
!450 = distinct !DILexicalBlock(scope: !442, file: !2, line: 403, column: 5)
!451 = !DILocalVariable(name: ".temp", scope: !450, file: !2, line: 403, type: !66, align: 8)
!452 = !DILocation(line: 403, column: 14, scope: !450)
!453 = !DILocalVariable(name: "i", scope: !454, file: !2, line: 403, type: !66, align: 8)
!454 = distinct !DILexicalBlock(scope: !450, file: !2, line: 404, column: 5)
!455 = !DILocation(line: 403, column: 14, scope: !454)
!456 = !DILocalVariable(name: "c", scope: !454, file: !2, line: 403, type: !64, align: 1)
!457 = !DILocation(line: 403, column: 17, scope: !454)
!458 = !DILocation(line: 403, column: 21, scope: !454)
!459 = !DILocation(line: 405, column: 27, scope: !460)
!460 = distinct !DILexicalBlock(scope: !461, file: !2, line: 405, column: 9)
!461 = distinct !DILexicalBlock(scope: !454, file: !2, line: 404, column: 5)
!462 = !DILocalVariable(name: ".temp", scope: !460, file: !2, line: 405, type: !66, align: 8)
!463 = !DILocation(line: 405, column: 18, scope: !460)
!464 = !DILocalVariable(name: "j", scope: !465, file: !2, line: 405, type: !66, align: 8)
!465 = distinct !DILexicalBlock(scope: !460, file: !2, line: 406, column: 9)
!466 = !DILocation(line: 405, column: 18, scope: !465)
!467 = !DILocalVariable(name: "pin", scope: !465, file: !2, line: 405, type: !64, align: 1)
!468 = !DILocation(line: 405, column: 21, scope: !465)
!469 = !DILocation(line: 405, column: 27, scope: !465)
!470 = !DILocation(line: 407, column: 17, scope: !471)
!471 = distinct !DILexicalBlock(scope: !465, file: !2, line: 406, column: 9)
!472 = !DILocation(line: 407, column: 22, scope: !471)
!473 = !DILocation(line: 407, column: 34, scope: !471)
!474 = !DILocation(line: 397, column: 10, scope: !471)
!475 = !DILocation(line: 397, column: 19, scope: !471)
!476 = !DILocation(line: 411, column: 12, scope: !442)
!477 = distinct !DISubprogram(name: "index_of_char_from", linkageName: "std.core.String.index_of_char_from", scope: !2, file: !2, line: 425, type: !478, scopeLine: 425, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!478 = !DISubroutineType(types: !479)
!479 = !{!344, !420, !59, !64, !67}
!480 = !DILocalVariable(name: "s", arg: 1, scope: !477, file: !2, line: 425, type: !59)
!481 = !DILocation(line: 425, column: 35, scope: !477)
!482 = !DILocalVariable(name: "needle", arg: 2, scope: !477, file: !2, line: 425, type: !64)
!483 = !DILocation(line: 425, column: 43, scope: !477)
!484 = !DILocalVariable(name: "start_index", arg: 3, scope: !477, file: !2, line: 425, type: !66)
!485 = !DILocation(line: 425, column: 55, scope: !477)
!486 = !DILocalVariable(name: "len", scope: !477, file: !2, line: 427, type: !66, align: 8)
!487 = !DILocation(line: 427, column: 6, scope: !477)
!488 = !DILocation(line: 427, column: 12, scope: !477)
!489 = !DILocation(line: 428, column: 6, scope: !477)
!490 = !DILocation(line: 428, column: 13, scope: !477)
!491 = !DILocation(line: 428, column: 33, scope: !477)
!492 = !DILocalVariable(name: "i", scope: !493, file: !2, line: 429, type: !66, align: 8)
!493 = distinct !DILexicalBlock(scope: !477, file: !2, line: 429, column: 2)
!494 = !DILocation(line: 429, column: 11, scope: !493)
!495 = !DILocation(line: 429, column: 15, scope: !493)
!496 = !DILocation(line: 429, column: 28, scope: !493)
!497 = !DILocation(line: 429, column: 32, scope: !493)
!498 = !DILocation(line: 431, column: 7, scope: !499)
!499 = distinct !DILexicalBlock(scope: !493, file: !2, line: 430, column: 2)
!500 = !DILocation(line: 431, column: 9, scope: !499)
!501 = !DILocation(line: 431, column: 15, scope: !499)
!502 = !DILocation(line: 431, column: 30, scope: !499)
!503 = !DILocation(line: 421, column: 10, scope: !499)
!504 = !DILocation(line: 421, column: 19, scope: !499)
!505 = !DILocation(line: 429, column: 37, scope: !493)
!506 = !DILocation(line: 433, column: 9, scope: !477)
!507 = distinct !DISubprogram(name: "rindex_of_char", linkageName: "std.core.String.rindex_of_char", scope: !2, file: !2, line: 446, type: !418, scopeLine: 446, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!508 = !DILocalVariable(name: "s", arg: 1, scope: !507, file: !2, line: 446, type: !59)
!509 = !DILocation(line: 446, column: 31, scope: !507)
!510 = !DILocalVariable(name: "needle", arg: 2, scope: !507, file: !2, line: 446, type: !64)
!511 = !DILocation(line: 446, column: 39, scope: !507)
!512 = !DILocalVariable(name: ".temp", scope: !513, file: !2, line: 448, type: !66, align: 8)
!513 = distinct !DILexicalBlock(scope: !507, file: !2, line: 448, column: 2)
!514 = !DILocation(line: 448, column: 13, scope: !513)
!515 = !DILocation(line: 448, column: 20, scope: !513)
!516 = !DILocalVariable(name: "i", scope: !517, file: !2, line: 448, type: !66, align: 8)
!517 = distinct !DILexicalBlock(scope: !513, file: !2, line: 449, column: 2)
!518 = !DILocation(line: 448, column: 13, scope: !517)
!519 = !DILocalVariable(name: "c", scope: !517, file: !2, line: 448, type: !64, align: 1)
!520 = !DILocation(line: 448, column: 16, scope: !517)
!521 = !DILocation(line: 448, column: 20, scope: !517)
!522 = !DILocation(line: 450, column: 7, scope: !523)
!523 = distinct !DILexicalBlock(scope: !517, file: !2, line: 449, column: 2)
!524 = !DILocation(line: 450, column: 12, scope: !523)
!525 = !DILocation(line: 450, column: 27, scope: !523)
!526 = !DILocation(line: 442, column: 10, scope: !523)
!527 = !DILocation(line: 442, column: 19, scope: !523)
!528 = !DILocation(line: 452, column: 9, scope: !507)
!529 = distinct !DISubprogram(name: "index_of", linkageName: "std.core.String.index_of", scope: !2, file: !2, line: 466, type: !530, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!530 = !DISubroutineType(types: !531)
!531 = !{!344, !420, !59, !59}
!532 = !DILocalVariable(name: "s", arg: 1, scope: !529, file: !2, line: 466, type: !59)
!533 = !DILocation(line: 466, column: 25, scope: !529)
!534 = !DILocalVariable(name: "needle", arg: 2, scope: !529, file: !2, line: 466, type: !59)
!535 = !DILocation(line: 466, column: 35, scope: !529)
!536 = !DILocation(line: 462, column: 11, scope: !537)
!537 = distinct !DILexicalBlock(scope: !529, file: !2, line: 467, column: 1)
!538 = !DILocalVariable(name: "needed", scope: !529, file: !2, line: 468, type: !66, align: 8)
!539 = !DILocation(line: 468, column: 6, scope: !529)
!540 = !DILocation(line: 468, column: 15, scope: !529)
!541 = !DILocation(line: 469, column: 6, scope: !529)
!542 = !DILocation(line: 469, column: 20, scope: !529)
!543 = !DILocation(line: 469, column: 29, scope: !529)
!544 = !DILocalVariable(name: "first", scope: !545, file: !2, line: 471, type: !64, align: 1)
!545 = distinct !DILexicalBlock(scope: !529, file: !2, line: 470, column: 2)
!546 = !DILocation(line: 471, column: 8, scope: !545)
!547 = !DILocation(line: 471, column: 16, scope: !545)
!548 = !DILocation(line: 471, column: 23, scope: !545)
!549 = !DILocation(line: 472, column: 18, scope: !550)
!550 = distinct !DILexicalBlock(scope: !545, file: !2, line: 472, column: 3)
!551 = !DILocation(line: 472, column: 20, scope: !550)
!552 = !DILocation(line: 472, column: 23, scope: !550)
!553 = !DILocalVariable(name: ".temp", scope: !550, file: !2, line: 472, type: !66, align: 8)
!554 = !DILocation(line: 472, column: 12, scope: !550)
!555 = !DILocalVariable(name: "i", scope: !556, file: !2, line: 472, type: !66, align: 8)
!556 = distinct !DILexicalBlock(scope: !550, file: !2, line: 473, column: 3)
!557 = !DILocation(line: 472, column: 12, scope: !556)
!558 = !DILocalVariable(name: "c", scope: !556, file: !2, line: 472, type: !64, align: 1)
!559 = !DILocation(line: 472, column: 15, scope: !556)
!560 = !DILocation(line: 472, column: 18, scope: !556)
!561 = !DILocation(line: 474, column: 8, scope: !562)
!562 = distinct !DILexicalBlock(scope: !556, file: !2, line: 473, column: 3)
!563 = !DILocation(line: 474, column: 13, scope: !562)
!564 = !DILocation(line: 474, column: 22, scope: !562)
!565 = !DILocation(line: 474, column: 24, scope: !562)
!566 = !DILocation(line: 474, column: 26, scope: !562)
!567 = !DILocation(line: 474, column: 37, scope: !562)
!568 = !DILocation(line: 474, column: 52, scope: !562)
!569 = !DILocation(line: 461, column: 10, scope: !562)
!570 = !DILocation(line: 461, column: 19, scope: !562)
!571 = !DILocation(line: 477, column: 9, scope: !529)
!572 = distinct !DISubprogram(name: "rindex_of", linkageName: "std.core.String.rindex_of", scope: !2, file: !2, line: 491, type: !530, scopeLine: 491, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!573 = !DILocalVariable(name: "s", arg: 1, scope: !572, file: !2, line: 491, type: !59)
!574 = !DILocation(line: 491, column: 26, scope: !572)
!575 = !DILocalVariable(name: "needle", arg: 2, scope: !572, file: !2, line: 491, type: !59)
!576 = !DILocation(line: 491, column: 36, scope: !572)
!577 = !DILocation(line: 487, column: 11, scope: !578)
!578 = distinct !DILexicalBlock(scope: !572, file: !2, line: 492, column: 1)
!579 = !DILocalVariable(name: "needed", scope: !572, file: !2, line: 493, type: !66, align: 8)
!580 = !DILocation(line: 493, column: 6, scope: !572)
!581 = !DILocation(line: 493, column: 15, scope: !572)
!582 = !DILocation(line: 494, column: 6, scope: !572)
!583 = !DILocation(line: 494, column: 20, scope: !572)
!584 = !DILocation(line: 494, column: 29, scope: !572)
!585 = !DILocalVariable(name: "first", scope: !586, file: !2, line: 496, type: !64, align: 1)
!586 = distinct !DILexicalBlock(scope: !572, file: !2, line: 495, column: 2)
!587 = !DILocation(line: 496, column: 8, scope: !586)
!588 = !DILocation(line: 496, column: 16, scope: !586)
!589 = !DILocation(line: 496, column: 23, scope: !586)
!590 = !DILocation(line: 497, column: 20, scope: !591)
!591 = distinct !DILexicalBlock(scope: !586, file: !2, line: 497, column: 3)
!592 = !DILocation(line: 497, column: 22, scope: !591)
!593 = !DILocation(line: 497, column: 25, scope: !591)
!594 = !DILocalVariable(name: ".temp", scope: !591, file: !2, line: 497, type: !66, align: 8)
!595 = !DILocation(line: 497, column: 14, scope: !591)
!596 = !DILocalVariable(name: "i", scope: !597, file: !2, line: 497, type: !66, align: 8)
!597 = distinct !DILexicalBlock(scope: !591, file: !2, line: 498, column: 3)
!598 = !DILocation(line: 497, column: 14, scope: !597)
!599 = !DILocalVariable(name: "c", scope: !597, file: !2, line: 497, type: !64, align: 1)
!600 = !DILocation(line: 497, column: 17, scope: !597)
!601 = !DILocation(line: 497, column: 20, scope: !597)
!602 = !DILocation(line: 499, column: 8, scope: !603)
!603 = distinct !DILexicalBlock(scope: !597, file: !2, line: 498, column: 3)
!604 = !DILocation(line: 499, column: 13, scope: !603)
!605 = !DILocation(line: 499, column: 22, scope: !603)
!606 = !DILocation(line: 499, column: 24, scope: !603)
!607 = !DILocation(line: 499, column: 26, scope: !603)
!608 = !DILocation(line: 499, column: 37, scope: !603)
!609 = !DILocation(line: 499, column: 52, scope: !603)
!610 = !DILocation(line: 486, column: 10, scope: !603)
!611 = !DILocation(line: 486, column: 19, scope: !603)
!612 = !DILocation(line: 502, column: 9, scope: !572)
!613 = distinct !DISubprogram(name: "str_view", linkageName: "std.core.string.ZString.str_view", scope: !2, file: !2, line: 505, type: !614, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!614 = !DISubroutineType(types: !615)
!615 = !{!59, !616}
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "ZString", scope: !2, file: !2, line: 6, baseType: !63, align: 8)
!617 = !DILocalVariable(name: "str", arg: 1, scope: !613, file: !2, line: 505, type: !616)
!618 = !DILocation(line: 505, column: 28, scope: !613)
!619 = !DILocation(line: 507, column: 18, scope: !613)
!620 = !DILocation(line: 507, column: 23, scope: !613)
!621 = distinct !DISubprogram(name: "char_len", linkageName: "std.core.string.ZString.char_len", scope: !2, file: !2, line: 510, type: !622, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!622 = !DISubroutineType(types: !623)
!623 = !{!66, !616}
!624 = !DILocalVariable(name: "str", arg: 1, scope: !621, file: !2, line: 510, type: !616)
!625 = !DILocation(line: 510, column: 25, scope: !621)
!626 = !DILocalVariable(name: "len", scope: !621, file: !2, line: 512, type: !66, align: 8)
!627 = !DILocation(line: 512, column: 6, scope: !621)
!628 = !DILocation(line: 512, column: 12, scope: !621)
!629 = !DILocalVariable(name: "ptr", scope: !621, file: !2, line: 513, type: !63, align: 8)
!630 = !DILocation(line: 513, column: 8, scope: !621)
!631 = !DILocation(line: 513, column: 15, scope: !621)
!632 = !DILocation(line: 514, column: 2, scope: !621)
!633 = !DILocalVariable(name: "c", scope: !634, file: !2, line: 514, type: !64, align: 1)
!634 = distinct !DILexicalBlock(scope: !621, file: !2, line: 514, column: 2)
!635 = !DILocation(line: 514, column: 14, scope: !634)
!636 = !DILocation(line: 514, column: 18, scope: !634)
!637 = !DILocation(line: 514, column: 24, scope: !634)
!638 = !DILocation(line: 516, column: 7, scope: !639)
!639 = distinct !DILexicalBlock(scope: !634, file: !2, line: 515, column: 2)
!640 = !DILocation(line: 516, column: 25, scope: !639)
!641 = !DILocation(line: 518, column: 9, scope: !621)
!642 = distinct !DISubprogram(name: "len", linkageName: "std.core.string.ZString.len", scope: !2, file: !2, line: 521, type: !622, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!643 = !DILocalVariable(name: "str", arg: 1, scope: !642, file: !2, line: 521, type: !616)
!644 = !DILocation(line: 521, column: 20, scope: !642)
!645 = !DILocalVariable(name: "len", scope: !642, file: !2, line: 523, type: !66, align: 8)
!646 = !DILocation(line: 523, column: 6, scope: !642)
!647 = !DILocation(line: 523, column: 12, scope: !642)
!648 = !DILocalVariable(name: "ptr", scope: !642, file: !2, line: 524, type: !63, align: 8)
!649 = !DILocation(line: 524, column: 8, scope: !642)
!650 = !DILocation(line: 524, column: 15, scope: !642)
!651 = !DILocation(line: 525, column: 2, scope: !642)
!652 = !DILocalVariable(name: "c", scope: !653, file: !2, line: 525, type: !64, align: 1)
!653 = distinct !DILexicalBlock(scope: !642, file: !2, line: 525, column: 2)
!654 = !DILocation(line: 525, column: 14, scope: !653)
!655 = !DILocation(line: 525, column: 18, scope: !653)
!656 = !DILocation(line: 525, column: 24, scope: !653)
!657 = !DILocation(line: 525, column: 28, scope: !653)
!658 = !DILocation(line: 526, column: 9, scope: !642)
!659 = distinct !DISubprogram(name: "zstr_copy", linkageName: "std.core.String.zstr_copy", scope: !2, file: !2, line: 530, type: !660, scopeLine: 530, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!660 = !DISubroutineType(types: !661)
!661 = !{!616, !59, !204}
!662 = !DILocalVariable(name: "s", arg: 1, scope: !659, file: !2, line: 530, type: !59)
!663 = !DILocation(line: 530, column: 29, scope: !659)
!664 = !DILocalVariable(name: "allocator", arg: 2, scope: !659, file: !2, line: 530, type: !204)
!665 = !DILocation(line: 530, column: 42, scope: !659)
!666 = !DILocalVariable(name: "len", scope: !659, file: !2, line: 532, type: !66, align: 8)
!667 = !DILocation(line: 532, column: 6, scope: !659)
!668 = !DILocation(line: 532, column: 12, scope: !659)
!669 = !DILocalVariable(name: "str", scope: !659, file: !2, line: 533, type: !63, align: 8)
!670 = !DILocation(line: 533, column: 8, scope: !659)
!671 = !DILocation(line: 533, column: 43, scope: !659)
!672 = !DILocation(line: 62, column: 6, scope: !673, inlinedAt: !674)
!673 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!674 = !DILocation(line: 57, column: 9, scope: !675, inlinedAt: !676)
!675 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !232, file: !232, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!676 = !DILocation(line: 533, column: 14, scope: !659)
!677 = !DILocation(line: 62, column: 20, scope: !673, inlinedAt: !674)
!678 = !DILocation(line: 28, column: 71, scope: !679, inlinedAt: !680)
!679 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!680 = !DILocation(line: 68, column: 10, scope: !673, inlinedAt: !674)
!681 = !DILocation(line: 534, column: 12, scope: !659)
!682 = !DILocation(line: 534, column: 17, scope: !659)
!683 = !DILocation(line: 324, column: 11, scope: !684, inlinedAt: !687)
!684 = distinct !DILexicalBlock(scope: !686, file: !685, line: 327, column: 1)
!685 = !DIFile(filename: "mem.c3", directory: "/opt/homebrew/lib/c3/std/core")
!686 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !685, file: !685, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!687 = !DILocation(line: 534, column: 2, scope: !659)
!688 = !DILocation(line: 324, column: 23, scope: !684, inlinedAt: !687)
!689 = !DILocation(line: 324, column: 29, scope: !684, inlinedAt: !687)
!690 = !DILocation(line: 324, column: 36, scope: !684, inlinedAt: !687)
!691 = !DILocation(line: 324, column: 43, scope: !684, inlinedAt: !687)
!692 = !DILocation(line: 324, column: 49, scope: !684, inlinedAt: !687)
!693 = !DILocation(line: 324, column: 56, scope: !684, inlinedAt: !687)
!694 = !DILocation(line: 328, column: 11, scope: !686, inlinedAt: !687)
!695 = !DILocation(line: 328, column: 16, scope: !686, inlinedAt: !687)
!696 = !DILocation(line: 328, column: 21, scope: !686, inlinedAt: !687)
!697 = !DILocation(line: 328, column: 26, scope: !686, inlinedAt: !687)
!698 = !DILocation(line: 535, column: 2, scope: !659)
!699 = !DILocation(line: 535, column: 6, scope: !659)
!700 = !DILocation(line: 535, column: 13, scope: !659)
!701 = !DILocation(line: 536, column: 10, scope: !659)
!702 = distinct !DISubprogram(name: "concat", linkageName: "std.core.String.concat", scope: !2, file: !2, line: 539, type: !703, scopeLine: 539, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!703 = !DISubroutineType(types: !704)
!704 = !{!59, !59, !59, !204}
!705 = !DILocalVariable(name: "s1", arg: 1, scope: !702, file: !2, line: 539, type: !59)
!706 = !DILocation(line: 539, column: 25, scope: !702)
!707 = !DILocalVariable(name: "s2", arg: 2, scope: !702, file: !2, line: 539, type: !59)
!708 = !DILocation(line: 539, column: 36, scope: !702)
!709 = !DILocalVariable(name: "allocator", arg: 3, scope: !702, file: !2, line: 539, type: !204)
!710 = !DILocation(line: 539, column: 50, scope: !702)
!711 = !DILocalVariable(name: "full_len", scope: !702, file: !2, line: 541, type: !66, align: 8)
!712 = !DILocation(line: 541, column: 6, scope: !702)
!713 = !DILocation(line: 541, column: 17, scope: !702)
!714 = !DILocation(line: 541, column: 26, scope: !702)
!715 = !DILocalVariable(name: "str", scope: !702, file: !2, line: 542, type: !63, align: 8)
!716 = !DILocation(line: 542, column: 8, scope: !702)
!717 = !DILocation(line: 542, column: 43, scope: !702)
!718 = !DILocation(line: 62, column: 6, scope: !719, inlinedAt: !720)
!719 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!720 = !DILocation(line: 57, column: 9, scope: !721, inlinedAt: !722)
!721 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !232, file: !232, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!722 = !DILocation(line: 542, column: 14, scope: !702)
!723 = !DILocation(line: 62, column: 20, scope: !719, inlinedAt: !720)
!724 = !DILocation(line: 28, column: 71, scope: !725, inlinedAt: !726)
!725 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!726 = !DILocation(line: 68, column: 10, scope: !719, inlinedAt: !720)
!727 = !DILocalVariable(name: "s1_len", scope: !702, file: !2, line: 543, type: !66, align: 8)
!728 = !DILocation(line: 543, column: 6, scope: !702)
!729 = !DILocation(line: 543, column: 15, scope: !702)
!730 = !DILocation(line: 544, column: 12, scope: !702)
!731 = !DILocation(line: 544, column: 17, scope: !702)
!732 = !DILocation(line: 324, column: 11, scope: !733, inlinedAt: !735)
!733 = distinct !DILexicalBlock(scope: !734, file: !685, line: 327, column: 1)
!734 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !685, file: !685, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!735 = !DILocation(line: 544, column: 2, scope: !702)
!736 = !DILocation(line: 324, column: 23, scope: !733, inlinedAt: !735)
!737 = !DILocation(line: 324, column: 29, scope: !733, inlinedAt: !735)
!738 = !DILocation(line: 324, column: 36, scope: !733, inlinedAt: !735)
!739 = !DILocation(line: 324, column: 43, scope: !733, inlinedAt: !735)
!740 = !DILocation(line: 324, column: 49, scope: !733, inlinedAt: !735)
!741 = !DILocation(line: 324, column: 56, scope: !733, inlinedAt: !735)
!742 = !DILocation(line: 328, column: 11, scope: !734, inlinedAt: !735)
!743 = !DILocation(line: 328, column: 16, scope: !734, inlinedAt: !735)
!744 = !DILocation(line: 328, column: 21, scope: !734, inlinedAt: !735)
!745 = !DILocation(line: 328, column: 26, scope: !734, inlinedAt: !735)
!746 = !DILocation(line: 545, column: 12, scope: !702)
!747 = !DILocation(line: 545, column: 18, scope: !702)
!748 = !DILocation(line: 545, column: 26, scope: !702)
!749 = !DILocation(line: 545, column: 34, scope: !702)
!750 = !DILocation(line: 324, column: 11, scope: !751, inlinedAt: !753)
!751 = distinct !DILexicalBlock(scope: !752, file: !685, line: 327, column: 1)
!752 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !685, file: !685, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!753 = !DILocation(line: 545, column: 2, scope: !702)
!754 = !DILocation(line: 324, column: 23, scope: !751, inlinedAt: !753)
!755 = !DILocation(line: 324, column: 29, scope: !751, inlinedAt: !753)
!756 = !DILocation(line: 324, column: 36, scope: !751, inlinedAt: !753)
!757 = !DILocation(line: 324, column: 43, scope: !751, inlinedAt: !753)
!758 = !DILocation(line: 324, column: 49, scope: !751, inlinedAt: !753)
!759 = !DILocation(line: 324, column: 56, scope: !751, inlinedAt: !753)
!760 = !DILocation(line: 328, column: 11, scope: !752, inlinedAt: !753)
!761 = !DILocation(line: 328, column: 16, scope: !752, inlinedAt: !753)
!762 = !DILocation(line: 328, column: 21, scope: !752, inlinedAt: !753)
!763 = !DILocation(line: 328, column: 26, scope: !752, inlinedAt: !753)
!764 = !DILocation(line: 546, column: 2, scope: !702)
!765 = !DILocation(line: 546, column: 6, scope: !702)
!766 = !DILocation(line: 546, column: 18, scope: !702)
!767 = !DILocation(line: 547, column: 17, scope: !702)
!768 = !DILocation(line: 547, column: 22, scope: !702)
!769 = distinct !DISubprogram(name: "tconcat", linkageName: "std.core.String.tconcat", scope: !2, file: !2, line: 550, type: !57, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!770 = !DILocalVariable(name: "s1", arg: 1, scope: !769, file: !2, line: 550, type: !59)
!771 = !DILocation(line: 550, column: 26, scope: !769)
!772 = !DILocalVariable(name: "s2", arg: 2, scope: !769, file: !2, line: 550, type: !59)
!773 = !DILocation(line: 550, column: 37, scope: !769)
!774 = !DILocation(line: 396, column: 6, scope: !775, inlinedAt: !776)
!775 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!776 = !DILocation(line: 550, column: 58, scope: !769)
!777 = !DILocation(line: 398, column: 3, scope: !778, inlinedAt: !776)
!778 = distinct !DILexicalBlock(scope: !775, file: !232, line: 397, column: 2)
!779 = !DILocation(line: 400, column: 9, scope: !775, inlinedAt: !776)
!780 = !DILocation(line: 550, column: 44, scope: !769)
!781 = distinct !DISubprogram(name: "zstr_tcopy", linkageName: "std.core.String.zstr_tcopy", scope: !2, file: !2, line: 553, type: !782, scopeLine: 553, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!782 = !DISubroutineType(types: !783)
!783 = !{!616, !59}
!784 = !DILocalVariable(name: "s", arg: 1, scope: !781, file: !2, line: 553, type: !59)
!785 = !DILocation(line: 553, column: 30, scope: !781)
!786 = !DILocation(line: 396, column: 6, scope: !787, inlinedAt: !788)
!787 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!788 = !DILocation(line: 553, column: 48, scope: !781)
!789 = !DILocation(line: 398, column: 3, scope: !790, inlinedAt: !788)
!790 = distinct !DILexicalBlock(scope: !787, file: !232, line: 397, column: 2)
!791 = !DILocation(line: 400, column: 9, scope: !787, inlinedAt: !788)
!792 = !DILocation(line: 553, column: 36, scope: !781)
!793 = distinct !DISubprogram(name: "copy", linkageName: "std.core.String.copy", scope: !2, file: !2, line: 560, type: !794, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!794 = !DISubroutineType(types: !795)
!795 = !{!59, !59, !204}
!796 = !DILocalVariable(name: "s", arg: 1, scope: !793, file: !2, line: 560, type: !59)
!797 = !DILocation(line: 560, column: 23, scope: !793)
!798 = !DILocalVariable(name: "allocator", arg: 2, scope: !793, file: !2, line: 560, type: !204)
!799 = !DILocation(line: 560, column: 36, scope: !793)
!800 = !DILocalVariable(name: "len", scope: !793, file: !2, line: 562, type: !66, align: 8)
!801 = !DILocation(line: 562, column: 6, scope: !793)
!802 = !DILocation(line: 562, column: 12, scope: !793)
!803 = !DILocalVariable(name: "str", scope: !793, file: !2, line: 563, type: !63, align: 8)
!804 = !DILocation(line: 563, column: 8, scope: !793)
!805 = !DILocation(line: 563, column: 43, scope: !793)
!806 = !DILocation(line: 62, column: 6, scope: !807, inlinedAt: !808)
!807 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!808 = !DILocation(line: 57, column: 9, scope: !809, inlinedAt: !810)
!809 = distinct !DISubprogram(name: "malloc", linkageName: "malloc", scope: !232, file: !232, line: 55, scopeLine: 55, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!810 = !DILocation(line: 563, column: 14, scope: !793)
!811 = !DILocation(line: 62, column: 20, scope: !807, inlinedAt: !808)
!812 = !DILocation(line: 28, column: 71, scope: !813, inlinedAt: !814)
!813 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!814 = !DILocation(line: 68, column: 10, scope: !807, inlinedAt: !808)
!815 = !DILocation(line: 564, column: 12, scope: !793)
!816 = !DILocation(line: 564, column: 17, scope: !793)
!817 = !DILocation(line: 324, column: 11, scope: !818, inlinedAt: !820)
!818 = distinct !DILexicalBlock(scope: !819, file: !685, line: 327, column: 1)
!819 = distinct !DISubprogram(name: "copy", linkageName: "copy", scope: !685, file: !685, line: 326, scopeLine: 326, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!820 = !DILocation(line: 564, column: 2, scope: !793)
!821 = !DILocation(line: 324, column: 23, scope: !818, inlinedAt: !820)
!822 = !DILocation(line: 324, column: 29, scope: !818, inlinedAt: !820)
!823 = !DILocation(line: 324, column: 36, scope: !818, inlinedAt: !820)
!824 = !DILocation(line: 324, column: 43, scope: !818, inlinedAt: !820)
!825 = !DILocation(line: 324, column: 49, scope: !818, inlinedAt: !820)
!826 = !DILocation(line: 324, column: 56, scope: !818, inlinedAt: !820)
!827 = !DILocation(line: 328, column: 11, scope: !819, inlinedAt: !820)
!828 = !DILocation(line: 328, column: 16, scope: !819, inlinedAt: !820)
!829 = !DILocation(line: 328, column: 21, scope: !819, inlinedAt: !820)
!830 = !DILocation(line: 328, column: 26, scope: !819, inlinedAt: !820)
!831 = !DILocation(line: 565, column: 2, scope: !793)
!832 = !DILocation(line: 565, column: 6, scope: !793)
!833 = !DILocation(line: 565, column: 13, scope: !793)
!834 = !DILocation(line: 566, column: 17, scope: !793)
!835 = !DILocation(line: 566, column: 22, scope: !793)
!836 = distinct !DISubprogram(name: "free", linkageName: "std.core.String.free", scope: !2, file: !2, line: 569, type: !837, scopeLine: 569, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!837 = !DISubroutineType(types: !838)
!838 = !{null, !202, !204}
!839 = !DILocation(line: 570, column: 1, scope: !836)
!840 = !DILocalVariable(name: "s", arg: 1, scope: !836, file: !2, line: 569, type: !202)
!841 = !DILocation(line: 569, column: 21, scope: !836)
!842 = !DILocalVariable(name: "allocator", arg: 2, scope: !836, file: !2, line: 569, type: !204)
!843 = !DILocation(line: 569, column: 35, scope: !836)
!844 = !DILocation(line: 571, column: 7, scope: !836)
!845 = !DILocation(line: 571, column: 20, scope: !836)
!846 = !DILocation(line: 572, column: 29, scope: !836)
!847 = !DILocation(line: 101, column: 6, scope: !848, inlinedAt: !849)
!848 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !232, file: !232, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!849 = !DILocation(line: 572, column: 2, scope: !836)
!850 = !DILocation(line: 101, column: 18, scope: !848, inlinedAt: !849)
!851 = !DILocation(line: 105, column: 25, scope: !848, inlinedAt: !849)
!852 = !DILocation(line: 105, column: 2, scope: !848, inlinedAt: !849)
!853 = !DILocation(line: 573, column: 3, scope: !836)
!854 = !DILocation(line: 573, column: 7, scope: !836)
!855 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.String.tcopy", scope: !2, file: !2, line: 576, type: !856, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!856 = !DISubroutineType(types: !857)
!857 = !{!59, !59}
!858 = !DILocalVariable(name: "s", arg: 1, scope: !855, file: !2, line: 576, type: !59)
!859 = !DILocation(line: 576, column: 24, scope: !855)
!860 = !DILocation(line: 396, column: 6, scope: !861, inlinedAt: !862)
!861 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!862 = !DILocation(line: 576, column: 37, scope: !855)
!863 = !DILocation(line: 398, column: 3, scope: !864, inlinedAt: !862)
!864 = distinct !DILexicalBlock(scope: !861, file: !232, line: 397, column: 2)
!865 = !DILocation(line: 400, column: 9, scope: !861, inlinedAt: !862)
!866 = !DILocation(line: 576, column: 30, scope: !855)
!867 = distinct !DISubprogram(name: "copy", linkageName: "std.core.string.ZString.copy", scope: !2, file: !2, line: 578, type: !868, scopeLine: 578, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!868 = !DISubroutineType(types: !869)
!869 = !{!59, !616, !204}
!870 = !DILocalVariable(name: "z", arg: 1, scope: !867, file: !2, line: 578, type: !616)
!871 = !DILocation(line: 578, column: 24, scope: !867)
!872 = !DILocalVariable(name: "allocator", arg: 2, scope: !867, file: !2, line: 578, type: !204)
!873 = !DILocation(line: 578, column: 37, scope: !867)
!874 = !DILocation(line: 580, column: 9, scope: !867)
!875 = !DILocation(line: 580, column: 27, scope: !867)
!876 = distinct !DISubprogram(name: "tcopy", linkageName: "std.core.string.ZString.tcopy", scope: !2, file: !2, line: 583, type: !614, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!877 = !DILocalVariable(name: "z", arg: 1, scope: !876, file: !2, line: 583, type: !616)
!878 = !DILocation(line: 583, column: 25, scope: !876)
!879 = !DILocation(line: 585, column: 9, scope: !876)
!880 = !DILocation(line: 396, column: 6, scope: !881, inlinedAt: !882)
!881 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!882 = !DILocation(line: 585, column: 27, scope: !876)
!883 = !DILocation(line: 398, column: 3, scope: !884, inlinedAt: !882)
!884 = distinct !DILexicalBlock(scope: !881, file: !232, line: 397, column: 2)
!885 = !DILocation(line: 400, column: 9, scope: !881, inlinedAt: !882)
!886 = distinct !DISubprogram(name: "to_new_utf16", linkageName: "std.core.String.to_new_utf16", scope: !2, file: !2, line: 594, type: !887, scopeLine: 594, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!887 = !DISubroutineType(types: !888)
!888 = !{!344, !889, !59, !204}
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16[]*", baseType: !890, size: 64, align: 64, dwarfAddressSpace: 0)
!890 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char16[]", size: 128, align: 64, elements: !891, identifier: "Char16[]")
!891 = !{!892, !896}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !890, baseType: !893, size: 64, align: 64)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char16*", baseType: !894, size: 64, align: 64, dwarfAddressSpace: 0)
!894 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char16", scope: !2, file: !2, line: 9, baseType: !895, align: 2)
!895 = !DIBasicType(name: "ushort", size: 16, encoding: DW_ATE_unsigned)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !890, baseType: !66, size: 64, align: 64, offset: 64)
!897 = !DILocalVariable(name: "s", arg: 1, scope: !886, file: !2, line: 594, type: !59)
!898 = !DILocation(line: 594, column: 34, scope: !886)
!899 = !DILocalVariable(name: "allocator", arg: 2, scope: !886, file: !2, line: 594, type: !204)
!900 = !DILocation(line: 594, column: 47, scope: !886)
!901 = !DILocalVariable(name: "len16", scope: !886, file: !2, line: 596, type: !66, align: 8)
!902 = !DILocation(line: 596, column: 6, scope: !886)
!903 = !DILocation(line: 596, column: 38, scope: !886)
!904 = !DILocation(line: 596, column: 14, scope: !886)
!905 = !DILocalVariable(name: "data", scope: !886, file: !2, line: 597, type: !893, align: 8)
!906 = !DILocation(line: 597, column: 10, scope: !886)
!907 = !DILocation(line: 597, column: 63, scope: !886)
!908 = !DILocation(line: 286, column: 55, scope: !909, inlinedAt: !910)
!909 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !232, file: !232, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!910 = !DILocation(line: 597, column: 17, scope: !886)
!911 = !DILocation(line: 286, column: 40, scope: !909, inlinedAt: !910)
!912 = !DILocation(line: 62, column: 6, scope: !913, inlinedAt: !914)
!913 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!914 = !DILocation(line: 286, column: 18, scope: !909, inlinedAt: !910)
!915 = !DILocation(line: 62, column: 20, scope: !913, inlinedAt: !914)
!916 = !DILocation(line: 28, column: 71, scope: !917, inlinedAt: !918)
!917 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!918 = !DILocation(line: 68, column: 10, scope: !913, inlinedAt: !914)
!919 = !DILocation(line: 286, column: 67, scope: !909, inlinedAt: !910)
!920 = !DILocation(line: 598, column: 27, scope: !886)
!921 = !DILocation(line: 598, column: 2, scope: !886)
!922 = !DILocation(line: 599, column: 2, scope: !886)
!923 = !DILocation(line: 599, column: 7, scope: !886)
!924 = !DILocation(line: 599, column: 16, scope: !886)
!925 = !DILocation(line: 600, column: 9, scope: !886)
!926 = !DILocation(line: 600, column: 15, scope: !886)
!927 = distinct !DISubprogram(name: "to_temp_utf16", linkageName: "std.core.String.to_temp_utf16", scope: !2, file: !2, line: 609, type: !928, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!928 = !DISubroutineType(types: !929)
!929 = !{!344, !889, !59}
!930 = !DILocalVariable(name: "s", arg: 1, scope: !927, file: !2, line: 609, type: !59)
!931 = !DILocation(line: 609, column: 35, scope: !927)
!932 = !DILocation(line: 396, column: 6, scope: !933, inlinedAt: !934)
!933 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!934 = !DILocation(line: 611, column: 24, scope: !927)
!935 = !DILocation(line: 398, column: 3, scope: !936, inlinedAt: !934)
!936 = distinct !DILexicalBlock(scope: !933, file: !232, line: 397, column: 2)
!937 = !DILocation(line: 400, column: 9, scope: !933, inlinedAt: !934)
!938 = !DILocation(line: 611, column: 9, scope: !927)
!939 = distinct !DISubprogram(name: "to_wstring", linkageName: "std.core.String.to_wstring", scope: !2, file: !2, line: 614, type: !940, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!940 = !DISubroutineType(types: !941)
!941 = !{!344, !942, !59, !204}
!942 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "WString*", baseType: !943, size: 64, align: 64, dwarfAddressSpace: 0)
!943 = !DIDerivedType(tag: DW_TAG_typedef, name: "WString", scope: !2, file: !2, line: 7, baseType: !944, align: 8)
!944 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ushort*", baseType: !895, size: 64, align: 64, dwarfAddressSpace: 0)
!945 = !DILocalVariable(name: "s", arg: 1, scope: !939, file: !2, line: 614, type: !59)
!946 = !DILocation(line: 614, column: 31, scope: !939)
!947 = !DILocalVariable(name: "allocator", arg: 2, scope: !939, file: !2, line: 614, type: !204)
!948 = !DILocation(line: 614, column: 44, scope: !939)
!949 = !DILocation(line: 616, column: 10, scope: !939)
!950 = distinct !DISubprogram(name: "to_temp_wstring", linkageName: "std.core.String.to_temp_wstring", scope: !2, file: !2, line: 619, type: !951, scopeLine: 619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!951 = !DISubroutineType(types: !952)
!952 = !{!344, !942, !59}
!953 = !DILocalVariable(name: "s", arg: 1, scope: !950, file: !2, line: 619, type: !59)
!954 = !DILocation(line: 619, column: 36, scope: !950)
!955 = !DILocation(line: 396, column: 6, scope: !956, inlinedAt: !957)
!956 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!957 = !DILocation(line: 619, column: 55, scope: !950)
!958 = !DILocation(line: 398, column: 3, scope: !959, inlinedAt: !957)
!959 = distinct !DILexicalBlock(scope: !956, file: !232, line: 397, column: 2)
!960 = !DILocation(line: 400, column: 9, scope: !956, inlinedAt: !957)
!961 = !DILocation(line: 619, column: 42, scope: !950)
!962 = distinct !DISubprogram(name: "to_new_wstring", linkageName: "std.core.String.to_new_wstring", scope: !2, file: !2, line: 620, type: !951, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!963 = !DILocalVariable(name: "s", arg: 1, scope: !962, file: !2, line: 620, type: !59)
!964 = !DILocation(line: 620, column: 35, scope: !962)
!965 = !DILocation(line: 620, column: 41, scope: !962)
!966 = distinct !DISubprogram(name: "to_utf32", linkageName: "std.core.String.to_utf32", scope: !2, file: !2, line: 622, type: !967, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!967 = !DISubroutineType(types: !968)
!968 = !{!344, !969, !59, !204}
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32[]*", baseType: !970, size: 64, align: 64, dwarfAddressSpace: 0)
!970 = !DICompositeType(tag: DW_TAG_structure_type, name: "Char32[]", size: 128, align: 64, elements: !971, identifier: "Char32[]")
!971 = !{!972, !975}
!972 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !970, baseType: !973, size: 64, align: 64)
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Char32*", baseType: !974, size: 64, align: 64, dwarfAddressSpace: 0)
!974 = !DIDerivedType(tag: DW_TAG_typedef, name: "Char32", scope: !2, file: !2, line: 8, baseType: !3, align: 4)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !970, baseType: !66, size: 64, align: 64, offset: 64)
!976 = !DILocalVariable(name: "s", arg: 1, scope: !966, file: !2, line: 622, type: !59)
!977 = !DILocation(line: 622, column: 30, scope: !966)
!978 = !DILocalVariable(name: "allocator", arg: 2, scope: !966, file: !2, line: 622, type: !204)
!979 = !DILocation(line: 622, column: 43, scope: !966)
!980 = !DILocalVariable(name: "codepoints", scope: !966, file: !2, line: 624, type: !66, align: 8)
!981 = !DILocation(line: 624, column: 6, scope: !966)
!982 = !DILocation(line: 624, column: 41, scope: !966)
!983 = !DILocation(line: 624, column: 19, scope: !966)
!984 = !DILocalVariable(name: "data", scope: !966, file: !2, line: 625, type: !973, align: 8)
!985 = !DILocation(line: 625, column: 10, scope: !966)
!986 = !DILocation(line: 625, column: 63, scope: !966)
!987 = !DILocation(line: 286, column: 55, scope: !988, inlinedAt: !989)
!988 = distinct !DISubprogram(name: "alloc_array_try", linkageName: "alloc_array_try", scope: !232, file: !232, line: 284, scopeLine: 284, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!989 = !DILocation(line: 625, column: 17, scope: !966)
!990 = !DILocation(line: 286, column: 40, scope: !988, inlinedAt: !989)
!991 = !DILocation(line: 62, column: 6, scope: !992, inlinedAt: !993)
!992 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!993 = !DILocation(line: 286, column: 18, scope: !988, inlinedAt: !989)
!994 = !DILocation(line: 62, column: 20, scope: !992, inlinedAt: !993)
!995 = !DILocation(line: 28, column: 71, scope: !996, inlinedAt: !997)
!996 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!997 = !DILocation(line: 68, column: 10, scope: !992, inlinedAt: !993)
!998 = !DILocation(line: 286, column: 67, scope: !988, inlinedAt: !989)
!999 = !DILocation(line: 626, column: 27, scope: !966)
!1000 = !DILocation(line: 626, column: 2, scope: !966)
!1001 = !DILocation(line: 627, column: 2, scope: !966)
!1002 = !DILocation(line: 627, column: 7, scope: !966)
!1003 = !DILocation(line: 627, column: 21, scope: !966)
!1004 = !DILocation(line: 628, column: 9, scope: !966)
!1005 = !DILocation(line: 628, column: 15, scope: !966)
!1006 = distinct !DISubprogram(name: "to_new_utf32", linkageName: "std.core.String.to_new_utf32", scope: !2, file: !2, line: 631, type: !1007, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1007 = !DISubroutineType(types: !1008)
!1008 = !{!344, !969, !59}
!1009 = !DILocalVariable(name: "s", arg: 1, scope: !1006, file: !2, line: 631, type: !59)
!1010 = !DILocation(line: 631, column: 34, scope: !1006)
!1011 = !DILocation(line: 631, column: 40, scope: !1006)
!1012 = distinct !DISubprogram(name: "to_temp_utf32", linkageName: "std.core.String.to_temp_utf32", scope: !2, file: !2, line: 632, type: !1007, scopeLine: 632, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1013 = !DILocalVariable(name: "s", arg: 1, scope: !1012, file: !2, line: 632, type: !59)
!1014 = !DILocation(line: 632, column: 35, scope: !1012)
!1015 = !DILocation(line: 396, column: 6, scope: !1016, inlinedAt: !1017)
!1016 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1017 = !DILocation(line: 632, column: 52, scope: !1012)
!1018 = !DILocation(line: 398, column: 3, scope: !1019, inlinedAt: !1017)
!1019 = distinct !DILexicalBlock(scope: !1016, file: !232, line: 397, column: 2)
!1020 = !DILocation(line: 400, column: 9, scope: !1016, inlinedAt: !1017)
!1021 = !DILocation(line: 632, column: 41, scope: !1012)
!1022 = distinct !DISubprogram(name: "convert_ascii_to_lower", linkageName: "std.core.String.convert_ascii_to_lower", scope: !2, file: !2, line: 640, type: !1023, scopeLine: 640, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{null, !59}
!1025 = !DILocalVariable(name: "s", arg: 1, scope: !1022, file: !2, line: 640, type: !59)
!1026 = !DILocation(line: 640, column: 39, scope: !1022)
!1027 = !DILocation(line: 642, column: 16, scope: !1028)
!1028 = distinct !DILexicalBlock(scope: !1022, file: !2, line: 642, column: 2)
!1029 = !DILocalVariable(name: ".temp", scope: !1028, file: !2, line: 642, type: !66, align: 8)
!1030 = !DILocalVariable(name: "c", scope: !1031, file: !2, line: 642, type: !63, align: 8)
!1031 = distinct !DILexicalBlock(scope: !1028, file: !2, line: 642, column: 19)
!1032 = !DILocation(line: 642, column: 12, scope: !1031)
!1033 = !DILocation(line: 642, column: 16, scope: !1031)
!1034 = !DILocation(line: 642, column: 23, scope: !1031)
!1035 = !DILocation(line: 642, column: 44, scope: !1031)
!1036 = !DILocation(line: 642, column: 43, scope: !1031)
!1037 = distinct !DISubprogram(name: "new_ascii_to_lower", linkageName: "std.core.String.new_ascii_to_lower", scope: !2, file: !2, line: 645, type: !794, scopeLine: 645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1038 = !DILocalVariable(name: "s", arg: 1, scope: !1037, file: !2, line: 645, type: !59)
!1039 = !DILocation(line: 645, column: 37, scope: !1037)
!1040 = !DILocalVariable(name: "allocator", arg: 2, scope: !1037, file: !2, line: 645, type: !204)
!1041 = !DILocation(line: 645, column: 50, scope: !1037)
!1042 = !DILocalVariable(name: "copy", scope: !1037, file: !2, line: 647, type: !59, align: 8)
!1043 = !DILocation(line: 647, column: 9, scope: !1037)
!1044 = !DILocation(line: 647, column: 23, scope: !1037)
!1045 = !DILocation(line: 647, column: 16, scope: !1037)
!1046 = !DILocation(line: 648, column: 2, scope: !1037)
!1047 = !DILocation(line: 649, column: 9, scope: !1037)
!1048 = distinct !DISubprogram(name: "temp_ascii_to_lower", linkageName: "std.core.String.temp_ascii_to_lower", scope: !2, file: !2, line: 652, type: !856, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1049 = !DILocalVariable(name: "s", arg: 1, scope: !1048, file: !2, line: 652, type: !59)
!1050 = !DILocation(line: 652, column: 38, scope: !1048)
!1051 = !DILocation(line: 396, column: 6, scope: !1052, inlinedAt: !1053)
!1052 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1053 = !DILocation(line: 654, column: 30, scope: !1048)
!1054 = !DILocation(line: 398, column: 3, scope: !1055, inlinedAt: !1053)
!1055 = distinct !DILexicalBlock(scope: !1052, file: !232, line: 397, column: 2)
!1056 = !DILocation(line: 400, column: 9, scope: !1052, inlinedAt: !1053)
!1057 = !DILocation(line: 654, column: 9, scope: !1048)
!1058 = distinct !DISubprogram(name: "convert_ascii_to_upper", linkageName: "std.core.String.convert_ascii_to_upper", scope: !2, file: !2, line: 663, type: !1023, scopeLine: 663, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1059 = !DILocalVariable(name: "s", arg: 1, scope: !1058, file: !2, line: 663, type: !59)
!1060 = !DILocation(line: 663, column: 39, scope: !1058)
!1061 = !DILocation(line: 665, column: 16, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1058, file: !2, line: 665, column: 2)
!1063 = !DILocalVariable(name: ".temp", scope: !1062, file: !2, line: 665, type: !66, align: 8)
!1064 = !DILocalVariable(name: "c", scope: !1065, file: !2, line: 665, type: !63, align: 8)
!1065 = distinct !DILexicalBlock(scope: !1062, file: !2, line: 665, column: 19)
!1066 = !DILocation(line: 665, column: 12, scope: !1065)
!1067 = !DILocation(line: 665, column: 16, scope: !1065)
!1068 = !DILocation(line: 665, column: 23, scope: !1065)
!1069 = !DILocation(line: 665, column: 44, scope: !1065)
!1070 = !DILocation(line: 665, column: 43, scope: !1065)
!1071 = distinct !DISubprogram(name: "new_ascii_to_upper", linkageName: "std.core.String.new_ascii_to_upper", scope: !2, file: !2, line: 676, type: !794, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1072 = !DILocalVariable(name: "s", arg: 1, scope: !1071, file: !2, line: 676, type: !59)
!1073 = !DILocation(line: 676, column: 37, scope: !1071)
!1074 = !DILocalVariable(name: "allocator", arg: 2, scope: !1071, file: !2, line: 676, type: !204)
!1075 = !DILocation(line: 676, column: 50, scope: !1071)
!1076 = !DILocalVariable(name: "copy", scope: !1071, file: !2, line: 678, type: !59, align: 8)
!1077 = !DILocation(line: 678, column: 9, scope: !1071)
!1078 = !DILocation(line: 678, column: 23, scope: !1071)
!1079 = !DILocation(line: 678, column: 16, scope: !1071)
!1080 = !DILocation(line: 679, column: 2, scope: !1071)
!1081 = !DILocation(line: 680, column: 9, scope: !1071)
!1082 = distinct !DISubprogram(name: "iterator", linkageName: "std.core.String.iterator", scope: !2, file: !2, line: 683, type: !1083, scopeLine: 683, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1083 = !DISubroutineType(types: !1084)
!1084 = !{!1085, !59}
!1085 = !DICompositeType(tag: DW_TAG_structure_type, name: "StringIterator", scope: !2, file: !2, line: 3, size: 192, align: 64, elements: !1086, identifier: "std.core.string.iterator.StringIterator")
!1086 = !{!1087, !1088}
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "utf8", scope: !1085, file: !2, line: 5, baseType: !59, size: 128, align: 64)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1085, file: !2, line: 6, baseType: !66, size: 64, align: 64, offset: 128)
!1089 = !DILocalVariable(name: "s", arg: 1, scope: !1082, file: !2, line: 683, type: !59)
!1090 = !DILocation(line: 683, column: 35, scope: !1082)
!1091 = !DILocation(line: 685, column: 11, scope: !1082)
!1092 = !DILocation(line: 685, column: 14, scope: !1082)
!1093 = distinct !DISubprogram(name: "temp_ascii_to_upper", linkageName: "std.core.String.temp_ascii_to_upper", scope: !2, file: !2, line: 692, type: !856, scopeLine: 692, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1094 = !DILocalVariable(name: "s", arg: 1, scope: !1093, file: !2, line: 692, type: !59)
!1095 = !DILocation(line: 692, column: 38, scope: !1093)
!1096 = !DILocation(line: 396, column: 6, scope: !1097, inlinedAt: !1098)
!1097 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1098 = !DILocation(line: 694, column: 30, scope: !1093)
!1099 = !DILocation(line: 398, column: 3, scope: !1100, inlinedAt: !1098)
!1100 = distinct !DILexicalBlock(scope: !1097, file: !232, line: 397, column: 2)
!1101 = !DILocation(line: 400, column: 9, scope: !1097, inlinedAt: !1098)
!1102 = !DILocation(line: 694, column: 9, scope: !1093)
!1103 = distinct !DISubprogram(name: "utf8_codepoints", linkageName: "std.core.String.utf8_codepoints", scope: !2, file: !2, line: 728, type: !1104, scopeLine: 728, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1104 = !DISubroutineType(types: !1105)
!1105 = !{!66, !59}
!1106 = !DILocalVariable(name: "s", arg: 1, scope: !1103, file: !2, line: 728, type: !59)
!1107 = !DILocation(line: 728, column: 31, scope: !1103)
!1108 = !DILocalVariable(name: "len", scope: !1103, file: !2, line: 730, type: !66, align: 8)
!1109 = !DILocation(line: 730, column: 6, scope: !1103)
!1110 = !DILocation(line: 730, column: 12, scope: !1103)
!1111 = !DILocation(line: 731, column: 20, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1103, file: !2, line: 731, column: 2)
!1113 = !DILocalVariable(name: ".temp", scope: !1112, file: !2, line: 731, type: !66, align: 8)
!1114 = !DILocalVariable(name: "c", scope: !1115, file: !2, line: 731, type: !64, align: 1)
!1115 = distinct !DILexicalBlock(scope: !1112, file: !2, line: 732, column: 2)
!1116 = !DILocation(line: 731, column: 16, scope: !1115)
!1117 = !DILocation(line: 731, column: 20, scope: !1115)
!1118 = !DILocation(line: 733, column: 7, scope: !1119)
!1119 = distinct !DILexicalBlock(scope: !1115, file: !2, line: 732, column: 2)
!1120 = !DILocation(line: 733, column: 25, scope: !1119)
!1121 = !DILocation(line: 735, column: 9, scope: !1103)
!1122 = distinct !DISubprogram(name: "to_int128", linkageName: "std.core.String.to_int128", scope: !2, file: !2, line: 813, type: !1123, scopeLine: 813, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!344, !1125, !59, !18}
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int128*", baseType: !1126, size: 64, align: 64, dwarfAddressSpace: 0)
!1126 = !DIBasicType(name: "int128", size: 128, encoding: DW_ATE_signed)
!1127 = !DILocalVariable(name: "s", arg: 1, scope: !1122, file: !2, line: 813, type: !59)
!1128 = !DILocation(line: 813, column: 29, scope: !1122)
!1129 = !DILocalVariable(name: "base", arg: 2, scope: !1122, file: !2, line: 813, type: !18)
!1130 = !DILocation(line: 813, column: 36, scope: !1122)
!1131 = !DILocation(line: 740, column: 12, scope: !1132, inlinedAt: !1134)
!1132 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 743, column: 1)
!1133 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1134 = !DILocation(line: 813, column: 50, scope: !1122)
!1135 = !DILocation(line: 740, column: 26, scope: !1132, inlinedAt: !1134)
!1136 = !DILocation(line: 740, column: 39, scope: !1132, inlinedAt: !1134)
!1137 = !DILocalVariable(name: "len", scope: !1133, file: !2, line: 744, type: !66, align: 8)
!1138 = !DILocation(line: 744, column: 6, scope: !1133, inlinedAt: !1134)
!1139 = !DILocation(line: 744, column: 12, scope: !1133, inlinedAt: !1134)
!1140 = !DILocalVariable(name: "index", scope: !1133, file: !2, line: 745, type: !66, align: 8)
!1141 = !DILocation(line: 745, column: 6, scope: !1133, inlinedAt: !1134)
!1142 = !DILocation(line: 745, column: 14, scope: !1133, inlinedAt: !1134)
!1143 = !DILocalVariable(name: "ptr", scope: !1133, file: !2, line: 746, type: !63, align: 8)
!1144 = !DILocation(line: 746, column: 8, scope: !1133, inlinedAt: !1134)
!1145 = !DILocation(line: 746, column: 14, scope: !1133, inlinedAt: !1134)
!1146 = !DILocation(line: 747, column: 2, scope: !1133, inlinedAt: !1134)
!1147 = !DILocation(line: 747, column: 9, scope: !1148, inlinedAt: !1134)
!1148 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 747, column: 2)
!1149 = !DILocation(line: 747, column: 17, scope: !1148, inlinedAt: !1134)
!1150 = !DILocation(line: 747, column: 42, scope: !1148, inlinedAt: !1134)
!1151 = !DILocation(line: 747, column: 46, scope: !1148, inlinedAt: !1134)
!1152 = !DILocation(line: 16, column: 29, scope: !1153, inlinedAt: !1155)
!1153 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1154 = !DIFile(filename: "ascii.c3", directory: "/opt/homebrew/lib/c3/std")
!1155 = !DILocation(line: 747, column: 24, scope: !1148, inlinedAt: !1134)
!1156 = !DILocation(line: 16, column: 42, scope: !1153, inlinedAt: !1155)
!1157 = !DILocation(line: 747, column: 55, scope: !1148, inlinedAt: !1134)
!1158 = !DILocation(line: 748, column: 6, scope: !1133, inlinedAt: !1134)
!1159 = !DILocation(line: 748, column: 13, scope: !1133, inlinedAt: !1134)
!1160 = !DILocation(line: 748, column: 27, scope: !1133, inlinedAt: !1134)
!1161 = !DILocalVariable(name: "is_negative", scope: !1133, file: !2, line: 749, type: !145, align: 1)
!1162 = !DILocation(line: 749, column: 7, scope: !1133, inlinedAt: !1134)
!1163 = !DILocation(line: 750, column: 10, scope: !1164, inlinedAt: !1134)
!1164 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 750, column: 2)
!1165 = !DILocation(line: 750, column: 17, scope: !1164, inlinedAt: !1134)
!1166 = !DILocation(line: 753, column: 8, scope: !1167, inlinedAt: !1134)
!1167 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 753, column: 4)
!1168 = !DILocation(line: 754, column: 18, scope: !1167, inlinedAt: !1134)
!1169 = !DILocation(line: 755, column: 4, scope: !1167, inlinedAt: !1134)
!1170 = !DILocation(line: 757, column: 4, scope: !1171, inlinedAt: !1134)
!1171 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 757, column: 4)
!1172 = !DILocation(line: 759, column: 4, scope: !1173, inlinedAt: !1134)
!1173 = distinct !DILexicalBlock(scope: !1164, file: !2, line: 759, column: 4)
!1174 = !DILocation(line: 761, column: 6, scope: !1133, inlinedAt: !1134)
!1175 = !DILocation(line: 761, column: 13, scope: !1133, inlinedAt: !1134)
!1176 = !DILocation(line: 761, column: 27, scope: !1133, inlinedAt: !1134)
!1177 = !DILocalVariable(name: "base_used", scope: !1133, file: !2, line: 762, type: !1126, align: 16)
!1178 = !DILocation(line: 762, column: 8, scope: !1133, inlinedAt: !1134)
!1179 = !DILocation(line: 762, column: 21, scope: !1133, inlinedAt: !1134)
!1180 = !DILocation(line: 763, column: 6, scope: !1133, inlinedAt: !1134)
!1181 = !DILocation(line: 763, column: 13, scope: !1133, inlinedAt: !1134)
!1182 = !DILocation(line: 763, column: 30, scope: !1133, inlinedAt: !1134)
!1183 = !DILocation(line: 765, column: 3, scope: !1184, inlinedAt: !1134)
!1184 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 764, column: 2)
!1185 = !DILocation(line: 766, column: 7, scope: !1184, inlinedAt: !1134)
!1186 = !DILocation(line: 766, column: 16, scope: !1184, inlinedAt: !1134)
!1187 = !DILocation(line: 766, column: 29, scope: !1184, inlinedAt: !1134)
!1188 = !DILocation(line: 767, column: 11, scope: !1189, inlinedAt: !1134)
!1189 = distinct !DILexicalBlock(scope: !1184, file: !2, line: 767, column: 3)
!1190 = !DILocation(line: 767, column: 18, scope: !1189, inlinedAt: !1134)
!1191 = !DILocation(line: 771, column: 17, scope: !1192, inlinedAt: !1134)
!1192 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 771, column: 5)
!1193 = !DILocation(line: 772, column: 5, scope: !1192, inlinedAt: !1134)
!1194 = !DILocation(line: 775, column: 17, scope: !1195, inlinedAt: !1134)
!1195 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 775, column: 5)
!1196 = !DILocation(line: 776, column: 5, scope: !1195, inlinedAt: !1134)
!1197 = !DILocation(line: 779, column: 17, scope: !1198, inlinedAt: !1134)
!1198 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 779, column: 5)
!1199 = !DILocation(line: 780, column: 5, scope: !1198, inlinedAt: !1134)
!1200 = !DILocation(line: 782, column: 5, scope: !1201, inlinedAt: !1134)
!1201 = distinct !DILexicalBlock(scope: !1189, file: !2, line: 782, column: 5)
!1202 = !DILocation(line: 784, column: 7, scope: !1184, inlinedAt: !1134)
!1203 = !DILocation(line: 784, column: 14, scope: !1184, inlinedAt: !1134)
!1204 = !DILocation(line: 784, column: 28, scope: !1184, inlinedAt: !1134)
!1205 = !DILocalVariable(name: "value", scope: !1133, file: !2, line: 786, type: !1126, align: 16)
!1206 = !DILocation(line: 786, column: 8, scope: !1133, inlinedAt: !1134)
!1207 = !DILocation(line: 786, column: 16, scope: !1133, inlinedAt: !1134)
!1208 = !DILocation(line: 787, column: 2, scope: !1133, inlinedAt: !1134)
!1209 = !DILocation(line: 787, column: 9, scope: !1210, inlinedAt: !1134)
!1210 = distinct !DILexicalBlock(scope: !1133, file: !2, line: 787, column: 2)
!1211 = !DILocation(line: 787, column: 18, scope: !1210, inlinedAt: !1134)
!1212 = !DILocalVariable(name: "c", scope: !1213, file: !2, line: 789, type: !64, align: 1)
!1213 = distinct !DILexicalBlock(scope: !1210, file: !2, line: 788, column: 2)
!1214 = !DILocation(line: 789, column: 8, scope: !1213, inlinedAt: !1134)
!1215 = !DILocalVariable(name: "ch", scope: !1216, file: !2, line: 790, type: !64, align: 1)
!1216 = distinct !DILexicalBlock(scope: !1213, file: !2, line: 790, column: 4)
!1217 = !DILocation(line: 790, column: 9, scope: !1216, inlinedAt: !1134)
!1218 = !DILocation(line: 790, column: 14, scope: !1216, inlinedAt: !1134)
!1219 = !DILocation(line: 790, column: 21, scope: !1216, inlinedAt: !1134)
!1220 = !DILocation(line: 791, column: 8, scope: !1216, inlinedAt: !1134)
!1221 = !DILocation(line: 791, column: 27, scope: !1216, inlinedAt: !1134)
!1222 = !DILocation(line: 791, column: 51, scope: !1216, inlinedAt: !1134)
!1223 = !DILocation(line: 791, column: 45, scope: !1216, inlinedAt: !1134)
!1224 = !DILocation(line: 792, column: 8, scope: !1216, inlinedAt: !1134)
!1225 = !DILocation(line: 792, column: 33, scope: !1216, inlinedAt: !1134)
!1226 = !DILocation(line: 792, column: 27, scope: !1216, inlinedAt: !1134)
!1227 = !DILocation(line: 793, column: 8, scope: !1216, inlinedAt: !1134)
!1228 = !DILocation(line: 793, column: 25, scope: !1216, inlinedAt: !1134)
!1229 = !DILocation(line: 794, column: 8, scope: !1216, inlinedAt: !1134)
!1230 = !DILocation(line: 794, column: 25, scope: !1216, inlinedAt: !1134)
!1231 = !DILocation(line: 795, column: 18, scope: !1216, inlinedAt: !1134)
!1232 = !DILocation(line: 795, column: 12, scope: !1216, inlinedAt: !1134)
!1233 = !DILocation(line: 797, column: 7, scope: !1213, inlinedAt: !1134)
!1234 = !DILocation(line: 797, column: 12, scope: !1213, inlinedAt: !1134)
!1235 = !DILocation(line: 797, column: 30, scope: !1213, inlinedAt: !1134)
!1236 = !DILocation(line: 799, column: 8, scope: !1237, inlinedAt: !1134)
!1237 = distinct !DILexicalBlock(scope: !1213, file: !2, line: 799, column: 4)
!1238 = !DILocalVariable(name: "new_value", scope: !1239, file: !2, line: 801, type: !1126, align: 16)
!1239 = distinct !DILexicalBlock(scope: !1237, file: !2, line: 800, column: 4)
!1240 = !DILocation(line: 801, column: 11, scope: !1239, inlinedAt: !1134)
!1241 = !DILocation(line: 801, column: 23, scope: !1239, inlinedAt: !1134)
!1242 = !DILocation(line: 801, column: 31, scope: !1239, inlinedAt: !1134)
!1243 = !DILocation(line: 801, column: 43, scope: !1239, inlinedAt: !1134)
!1244 = !DILocation(line: 802, column: 9, scope: !1239, inlinedAt: !1134)
!1245 = !DILocation(line: 802, column: 21, scope: !1239, inlinedAt: !1134)
!1246 = !DILocation(line: 802, column: 35, scope: !1239, inlinedAt: !1134)
!1247 = !DILocation(line: 803, column: 12, scope: !1239, inlinedAt: !1134)
!1248 = !DILocalVariable(name: "new_value", scope: !1237, file: !2, line: 805, type: !1126, align: 16)
!1249 = !DILocation(line: 805, column: 10, scope: !1237, inlinedAt: !1134)
!1250 = !DILocation(line: 805, column: 22, scope: !1237, inlinedAt: !1134)
!1251 = !DILocation(line: 805, column: 30, scope: !1237, inlinedAt: !1134)
!1252 = !DILocation(line: 805, column: 42, scope: !1237, inlinedAt: !1134)
!1253 = !DILocation(line: 806, column: 8, scope: !1237, inlinedAt: !1134)
!1254 = !DILocation(line: 806, column: 20, scope: !1237, inlinedAt: !1134)
!1255 = !DILocation(line: 806, column: 34, scope: !1237, inlinedAt: !1134)
!1256 = !DILocation(line: 807, column: 11, scope: !1237, inlinedAt: !1134)
!1257 = !DILocation(line: 810, column: 9, scope: !1133, inlinedAt: !1134)
!1258 = distinct !DISubprogram(name: "to_long", linkageName: "std.core.String.to_long", scope: !2, file: !2, line: 814, type: !1259, scopeLine: 814, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1259 = !DISubroutineType(types: !1260)
!1260 = !{!344, !1261, !59, !18}
!1261 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "long*", baseType: !345, size: 64, align: 64, dwarfAddressSpace: 0)
!1262 = !DILocalVariable(name: "s", arg: 1, scope: !1258, file: !2, line: 814, type: !59)
!1263 = !DILocation(line: 814, column: 25, scope: !1258)
!1264 = !DILocalVariable(name: "base", arg: 2, scope: !1258, file: !2, line: 814, type: !18)
!1265 = !DILocation(line: 814, column: 32, scope: !1258)
!1266 = !DILocation(line: 740, column: 12, scope: !1267, inlinedAt: !1269)
!1267 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 743, column: 1)
!1268 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1269 = !DILocation(line: 814, column: 46, scope: !1258)
!1270 = !DILocation(line: 740, column: 26, scope: !1267, inlinedAt: !1269)
!1271 = !DILocation(line: 740, column: 39, scope: !1267, inlinedAt: !1269)
!1272 = !DILocalVariable(name: "len", scope: !1268, file: !2, line: 744, type: !66, align: 8)
!1273 = !DILocation(line: 744, column: 6, scope: !1268, inlinedAt: !1269)
!1274 = !DILocation(line: 744, column: 12, scope: !1268, inlinedAt: !1269)
!1275 = !DILocalVariable(name: "index", scope: !1268, file: !2, line: 745, type: !66, align: 8)
!1276 = !DILocation(line: 745, column: 6, scope: !1268, inlinedAt: !1269)
!1277 = !DILocation(line: 745, column: 14, scope: !1268, inlinedAt: !1269)
!1278 = !DILocalVariable(name: "ptr", scope: !1268, file: !2, line: 746, type: !63, align: 8)
!1279 = !DILocation(line: 746, column: 8, scope: !1268, inlinedAt: !1269)
!1280 = !DILocation(line: 746, column: 14, scope: !1268, inlinedAt: !1269)
!1281 = !DILocation(line: 747, column: 2, scope: !1268, inlinedAt: !1269)
!1282 = !DILocation(line: 747, column: 9, scope: !1283, inlinedAt: !1269)
!1283 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 747, column: 2)
!1284 = !DILocation(line: 747, column: 17, scope: !1283, inlinedAt: !1269)
!1285 = !DILocation(line: 747, column: 42, scope: !1283, inlinedAt: !1269)
!1286 = !DILocation(line: 747, column: 46, scope: !1283, inlinedAt: !1269)
!1287 = !DILocation(line: 16, column: 29, scope: !1288, inlinedAt: !1289)
!1288 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1289 = !DILocation(line: 747, column: 24, scope: !1283, inlinedAt: !1269)
!1290 = !DILocation(line: 16, column: 42, scope: !1288, inlinedAt: !1289)
!1291 = !DILocation(line: 747, column: 55, scope: !1283, inlinedAt: !1269)
!1292 = !DILocation(line: 748, column: 6, scope: !1268, inlinedAt: !1269)
!1293 = !DILocation(line: 748, column: 13, scope: !1268, inlinedAt: !1269)
!1294 = !DILocation(line: 748, column: 27, scope: !1268, inlinedAt: !1269)
!1295 = !DILocalVariable(name: "is_negative", scope: !1268, file: !2, line: 749, type: !145, align: 1)
!1296 = !DILocation(line: 749, column: 7, scope: !1268, inlinedAt: !1269)
!1297 = !DILocation(line: 750, column: 10, scope: !1298, inlinedAt: !1269)
!1298 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 750, column: 2)
!1299 = !DILocation(line: 750, column: 17, scope: !1298, inlinedAt: !1269)
!1300 = !DILocation(line: 753, column: 8, scope: !1301, inlinedAt: !1269)
!1301 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 753, column: 4)
!1302 = !DILocation(line: 754, column: 18, scope: !1301, inlinedAt: !1269)
!1303 = !DILocation(line: 755, column: 4, scope: !1301, inlinedAt: !1269)
!1304 = !DILocation(line: 757, column: 4, scope: !1305, inlinedAt: !1269)
!1305 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 757, column: 4)
!1306 = !DILocation(line: 759, column: 4, scope: !1307, inlinedAt: !1269)
!1307 = distinct !DILexicalBlock(scope: !1298, file: !2, line: 759, column: 4)
!1308 = !DILocation(line: 761, column: 6, scope: !1268, inlinedAt: !1269)
!1309 = !DILocation(line: 761, column: 13, scope: !1268, inlinedAt: !1269)
!1310 = !DILocation(line: 761, column: 27, scope: !1268, inlinedAt: !1269)
!1311 = !DILocalVariable(name: "base_used", scope: !1268, file: !2, line: 762, type: !345, align: 8)
!1312 = !DILocation(line: 762, column: 8, scope: !1268, inlinedAt: !1269)
!1313 = !DILocation(line: 762, column: 21, scope: !1268, inlinedAt: !1269)
!1314 = !DILocation(line: 763, column: 6, scope: !1268, inlinedAt: !1269)
!1315 = !DILocation(line: 763, column: 13, scope: !1268, inlinedAt: !1269)
!1316 = !DILocation(line: 763, column: 30, scope: !1268, inlinedAt: !1269)
!1317 = !DILocation(line: 765, column: 3, scope: !1318, inlinedAt: !1269)
!1318 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 764, column: 2)
!1319 = !DILocation(line: 766, column: 7, scope: !1318, inlinedAt: !1269)
!1320 = !DILocation(line: 766, column: 16, scope: !1318, inlinedAt: !1269)
!1321 = !DILocation(line: 766, column: 29, scope: !1318, inlinedAt: !1269)
!1322 = !DILocation(line: 767, column: 11, scope: !1323, inlinedAt: !1269)
!1323 = distinct !DILexicalBlock(scope: !1318, file: !2, line: 767, column: 3)
!1324 = !DILocation(line: 767, column: 18, scope: !1323, inlinedAt: !1269)
!1325 = !DILocation(line: 771, column: 17, scope: !1326, inlinedAt: !1269)
!1326 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 771, column: 5)
!1327 = !DILocation(line: 772, column: 5, scope: !1326, inlinedAt: !1269)
!1328 = !DILocation(line: 775, column: 17, scope: !1329, inlinedAt: !1269)
!1329 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 775, column: 5)
!1330 = !DILocation(line: 776, column: 5, scope: !1329, inlinedAt: !1269)
!1331 = !DILocation(line: 779, column: 17, scope: !1332, inlinedAt: !1269)
!1332 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 779, column: 5)
!1333 = !DILocation(line: 780, column: 5, scope: !1332, inlinedAt: !1269)
!1334 = !DILocation(line: 782, column: 5, scope: !1335, inlinedAt: !1269)
!1335 = distinct !DILexicalBlock(scope: !1323, file: !2, line: 782, column: 5)
!1336 = !DILocation(line: 784, column: 7, scope: !1318, inlinedAt: !1269)
!1337 = !DILocation(line: 784, column: 14, scope: !1318, inlinedAt: !1269)
!1338 = !DILocation(line: 784, column: 28, scope: !1318, inlinedAt: !1269)
!1339 = !DILocalVariable(name: "value", scope: !1268, file: !2, line: 786, type: !345, align: 8)
!1340 = !DILocation(line: 786, column: 8, scope: !1268, inlinedAt: !1269)
!1341 = !DILocation(line: 786, column: 16, scope: !1268, inlinedAt: !1269)
!1342 = !DILocation(line: 787, column: 2, scope: !1268, inlinedAt: !1269)
!1343 = !DILocation(line: 787, column: 9, scope: !1344, inlinedAt: !1269)
!1344 = distinct !DILexicalBlock(scope: !1268, file: !2, line: 787, column: 2)
!1345 = !DILocation(line: 787, column: 18, scope: !1344, inlinedAt: !1269)
!1346 = !DILocalVariable(name: "c", scope: !1347, file: !2, line: 789, type: !64, align: 1)
!1347 = distinct !DILexicalBlock(scope: !1344, file: !2, line: 788, column: 2)
!1348 = !DILocation(line: 789, column: 8, scope: !1347, inlinedAt: !1269)
!1349 = !DILocalVariable(name: "ch", scope: !1350, file: !2, line: 790, type: !64, align: 1)
!1350 = distinct !DILexicalBlock(scope: !1347, file: !2, line: 790, column: 4)
!1351 = !DILocation(line: 790, column: 9, scope: !1350, inlinedAt: !1269)
!1352 = !DILocation(line: 790, column: 14, scope: !1350, inlinedAt: !1269)
!1353 = !DILocation(line: 790, column: 21, scope: !1350, inlinedAt: !1269)
!1354 = !DILocation(line: 791, column: 8, scope: !1350, inlinedAt: !1269)
!1355 = !DILocation(line: 791, column: 27, scope: !1350, inlinedAt: !1269)
!1356 = !DILocation(line: 791, column: 51, scope: !1350, inlinedAt: !1269)
!1357 = !DILocation(line: 791, column: 45, scope: !1350, inlinedAt: !1269)
!1358 = !DILocation(line: 792, column: 8, scope: !1350, inlinedAt: !1269)
!1359 = !DILocation(line: 792, column: 33, scope: !1350, inlinedAt: !1269)
!1360 = !DILocation(line: 792, column: 27, scope: !1350, inlinedAt: !1269)
!1361 = !DILocation(line: 793, column: 8, scope: !1350, inlinedAt: !1269)
!1362 = !DILocation(line: 793, column: 25, scope: !1350, inlinedAt: !1269)
!1363 = !DILocation(line: 794, column: 8, scope: !1350, inlinedAt: !1269)
!1364 = !DILocation(line: 794, column: 25, scope: !1350, inlinedAt: !1269)
!1365 = !DILocation(line: 795, column: 18, scope: !1350, inlinedAt: !1269)
!1366 = !DILocation(line: 795, column: 12, scope: !1350, inlinedAt: !1269)
!1367 = !DILocation(line: 797, column: 7, scope: !1347, inlinedAt: !1269)
!1368 = !DILocation(line: 797, column: 12, scope: !1347, inlinedAt: !1269)
!1369 = !DILocation(line: 797, column: 30, scope: !1347, inlinedAt: !1269)
!1370 = !DILocation(line: 799, column: 8, scope: !1371, inlinedAt: !1269)
!1371 = distinct !DILexicalBlock(scope: !1347, file: !2, line: 799, column: 4)
!1372 = !DILocalVariable(name: "new_value", scope: !1373, file: !2, line: 801, type: !345, align: 8)
!1373 = distinct !DILexicalBlock(scope: !1371, file: !2, line: 800, column: 4)
!1374 = !DILocation(line: 801, column: 11, scope: !1373, inlinedAt: !1269)
!1375 = !DILocation(line: 801, column: 23, scope: !1373, inlinedAt: !1269)
!1376 = !DILocation(line: 801, column: 31, scope: !1373, inlinedAt: !1269)
!1377 = !DILocation(line: 801, column: 43, scope: !1373, inlinedAt: !1269)
!1378 = !DILocation(line: 802, column: 9, scope: !1373, inlinedAt: !1269)
!1379 = !DILocation(line: 802, column: 21, scope: !1373, inlinedAt: !1269)
!1380 = !DILocation(line: 802, column: 35, scope: !1373, inlinedAt: !1269)
!1381 = !DILocation(line: 803, column: 12, scope: !1373, inlinedAt: !1269)
!1382 = !DILocalVariable(name: "new_value", scope: !1371, file: !2, line: 805, type: !345, align: 8)
!1383 = !DILocation(line: 805, column: 10, scope: !1371, inlinedAt: !1269)
!1384 = !DILocation(line: 805, column: 22, scope: !1371, inlinedAt: !1269)
!1385 = !DILocation(line: 805, column: 30, scope: !1371, inlinedAt: !1269)
!1386 = !DILocation(line: 805, column: 42, scope: !1371, inlinedAt: !1269)
!1387 = !DILocation(line: 806, column: 8, scope: !1371, inlinedAt: !1269)
!1388 = !DILocation(line: 806, column: 20, scope: !1371, inlinedAt: !1269)
!1389 = !DILocation(line: 806, column: 34, scope: !1371, inlinedAt: !1269)
!1390 = !DILocation(line: 807, column: 11, scope: !1371, inlinedAt: !1269)
!1391 = !DILocation(line: 810, column: 9, scope: !1268, inlinedAt: !1269)
!1392 = distinct !DISubprogram(name: "to_int", linkageName: "std.core.String.to_int", scope: !2, file: !2, line: 815, type: !1393, scopeLine: 815, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1393 = !DISubroutineType(types: !1394)
!1394 = !{!344, !1395, !59, !18}
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "int*", baseType: !18, size: 64, align: 64, dwarfAddressSpace: 0)
!1396 = !DILocalVariable(name: "s", arg: 1, scope: !1392, file: !2, line: 815, type: !59)
!1397 = !DILocation(line: 815, column: 23, scope: !1392)
!1398 = !DILocalVariable(name: "base", arg: 2, scope: !1392, file: !2, line: 815, type: !18)
!1399 = !DILocation(line: 815, column: 30, scope: !1392)
!1400 = !DILocation(line: 740, column: 12, scope: !1401, inlinedAt: !1403)
!1401 = distinct !DILexicalBlock(scope: !1402, file: !2, line: 743, column: 1)
!1402 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1403 = !DILocation(line: 815, column: 44, scope: !1392)
!1404 = !DILocation(line: 740, column: 26, scope: !1401, inlinedAt: !1403)
!1405 = !DILocation(line: 740, column: 39, scope: !1401, inlinedAt: !1403)
!1406 = !DILocalVariable(name: "len", scope: !1402, file: !2, line: 744, type: !66, align: 8)
!1407 = !DILocation(line: 744, column: 6, scope: !1402, inlinedAt: !1403)
!1408 = !DILocation(line: 744, column: 12, scope: !1402, inlinedAt: !1403)
!1409 = !DILocalVariable(name: "index", scope: !1402, file: !2, line: 745, type: !66, align: 8)
!1410 = !DILocation(line: 745, column: 6, scope: !1402, inlinedAt: !1403)
!1411 = !DILocation(line: 745, column: 14, scope: !1402, inlinedAt: !1403)
!1412 = !DILocalVariable(name: "ptr", scope: !1402, file: !2, line: 746, type: !63, align: 8)
!1413 = !DILocation(line: 746, column: 8, scope: !1402, inlinedAt: !1403)
!1414 = !DILocation(line: 746, column: 14, scope: !1402, inlinedAt: !1403)
!1415 = !DILocation(line: 747, column: 2, scope: !1402, inlinedAt: !1403)
!1416 = !DILocation(line: 747, column: 9, scope: !1417, inlinedAt: !1403)
!1417 = distinct !DILexicalBlock(scope: !1402, file: !2, line: 747, column: 2)
!1418 = !DILocation(line: 747, column: 17, scope: !1417, inlinedAt: !1403)
!1419 = !DILocation(line: 747, column: 42, scope: !1417, inlinedAt: !1403)
!1420 = !DILocation(line: 747, column: 46, scope: !1417, inlinedAt: !1403)
!1421 = !DILocation(line: 16, column: 29, scope: !1422, inlinedAt: !1423)
!1422 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1423 = !DILocation(line: 747, column: 24, scope: !1417, inlinedAt: !1403)
!1424 = !DILocation(line: 16, column: 42, scope: !1422, inlinedAt: !1423)
!1425 = !DILocation(line: 747, column: 55, scope: !1417, inlinedAt: !1403)
!1426 = !DILocation(line: 748, column: 6, scope: !1402, inlinedAt: !1403)
!1427 = !DILocation(line: 748, column: 13, scope: !1402, inlinedAt: !1403)
!1428 = !DILocation(line: 748, column: 27, scope: !1402, inlinedAt: !1403)
!1429 = !DILocalVariable(name: "is_negative", scope: !1402, file: !2, line: 749, type: !145, align: 1)
!1430 = !DILocation(line: 749, column: 7, scope: !1402, inlinedAt: !1403)
!1431 = !DILocation(line: 750, column: 10, scope: !1432, inlinedAt: !1403)
!1432 = distinct !DILexicalBlock(scope: !1402, file: !2, line: 750, column: 2)
!1433 = !DILocation(line: 750, column: 17, scope: !1432, inlinedAt: !1403)
!1434 = !DILocation(line: 753, column: 8, scope: !1435, inlinedAt: !1403)
!1435 = distinct !DILexicalBlock(scope: !1432, file: !2, line: 753, column: 4)
!1436 = !DILocation(line: 754, column: 18, scope: !1435, inlinedAt: !1403)
!1437 = !DILocation(line: 755, column: 4, scope: !1435, inlinedAt: !1403)
!1438 = !DILocation(line: 757, column: 4, scope: !1439, inlinedAt: !1403)
!1439 = distinct !DILexicalBlock(scope: !1432, file: !2, line: 757, column: 4)
!1440 = !DILocation(line: 759, column: 4, scope: !1441, inlinedAt: !1403)
!1441 = distinct !DILexicalBlock(scope: !1432, file: !2, line: 759, column: 4)
!1442 = !DILocation(line: 761, column: 6, scope: !1402, inlinedAt: !1403)
!1443 = !DILocation(line: 761, column: 13, scope: !1402, inlinedAt: !1403)
!1444 = !DILocation(line: 761, column: 27, scope: !1402, inlinedAt: !1403)
!1445 = !DILocalVariable(name: "base_used", scope: !1402, file: !2, line: 762, type: !18, align: 4)
!1446 = !DILocation(line: 762, column: 8, scope: !1402, inlinedAt: !1403)
!1447 = !DILocation(line: 762, column: 21, scope: !1402, inlinedAt: !1403)
!1448 = !DILocation(line: 763, column: 6, scope: !1402, inlinedAt: !1403)
!1449 = !DILocation(line: 763, column: 13, scope: !1402, inlinedAt: !1403)
!1450 = !DILocation(line: 763, column: 30, scope: !1402, inlinedAt: !1403)
!1451 = !DILocation(line: 765, column: 3, scope: !1452, inlinedAt: !1403)
!1452 = distinct !DILexicalBlock(scope: !1402, file: !2, line: 764, column: 2)
!1453 = !DILocation(line: 766, column: 7, scope: !1452, inlinedAt: !1403)
!1454 = !DILocation(line: 766, column: 16, scope: !1452, inlinedAt: !1403)
!1455 = !DILocation(line: 766, column: 29, scope: !1452, inlinedAt: !1403)
!1456 = !DILocation(line: 767, column: 11, scope: !1457, inlinedAt: !1403)
!1457 = distinct !DILexicalBlock(scope: !1452, file: !2, line: 767, column: 3)
!1458 = !DILocation(line: 767, column: 18, scope: !1457, inlinedAt: !1403)
!1459 = !DILocation(line: 771, column: 17, scope: !1460, inlinedAt: !1403)
!1460 = distinct !DILexicalBlock(scope: !1457, file: !2, line: 771, column: 5)
!1461 = !DILocation(line: 772, column: 5, scope: !1460, inlinedAt: !1403)
!1462 = !DILocation(line: 775, column: 17, scope: !1463, inlinedAt: !1403)
!1463 = distinct !DILexicalBlock(scope: !1457, file: !2, line: 775, column: 5)
!1464 = !DILocation(line: 776, column: 5, scope: !1463, inlinedAt: !1403)
!1465 = !DILocation(line: 779, column: 17, scope: !1466, inlinedAt: !1403)
!1466 = distinct !DILexicalBlock(scope: !1457, file: !2, line: 779, column: 5)
!1467 = !DILocation(line: 780, column: 5, scope: !1466, inlinedAt: !1403)
!1468 = !DILocation(line: 782, column: 5, scope: !1469, inlinedAt: !1403)
!1469 = distinct !DILexicalBlock(scope: !1457, file: !2, line: 782, column: 5)
!1470 = !DILocation(line: 784, column: 7, scope: !1452, inlinedAt: !1403)
!1471 = !DILocation(line: 784, column: 14, scope: !1452, inlinedAt: !1403)
!1472 = !DILocation(line: 784, column: 28, scope: !1452, inlinedAt: !1403)
!1473 = !DILocalVariable(name: "value", scope: !1402, file: !2, line: 786, type: !18, align: 4)
!1474 = !DILocation(line: 786, column: 8, scope: !1402, inlinedAt: !1403)
!1475 = !DILocation(line: 786, column: 16, scope: !1402, inlinedAt: !1403)
!1476 = !DILocation(line: 787, column: 2, scope: !1402, inlinedAt: !1403)
!1477 = !DILocation(line: 787, column: 9, scope: !1478, inlinedAt: !1403)
!1478 = distinct !DILexicalBlock(scope: !1402, file: !2, line: 787, column: 2)
!1479 = !DILocation(line: 787, column: 18, scope: !1478, inlinedAt: !1403)
!1480 = !DILocalVariable(name: "c", scope: !1481, file: !2, line: 789, type: !64, align: 1)
!1481 = distinct !DILexicalBlock(scope: !1478, file: !2, line: 788, column: 2)
!1482 = !DILocation(line: 789, column: 8, scope: !1481, inlinedAt: !1403)
!1483 = !DILocalVariable(name: "ch", scope: !1484, file: !2, line: 790, type: !64, align: 1)
!1484 = distinct !DILexicalBlock(scope: !1481, file: !2, line: 790, column: 4)
!1485 = !DILocation(line: 790, column: 9, scope: !1484, inlinedAt: !1403)
!1486 = !DILocation(line: 790, column: 14, scope: !1484, inlinedAt: !1403)
!1487 = !DILocation(line: 790, column: 21, scope: !1484, inlinedAt: !1403)
!1488 = !DILocation(line: 791, column: 8, scope: !1484, inlinedAt: !1403)
!1489 = !DILocation(line: 791, column: 27, scope: !1484, inlinedAt: !1403)
!1490 = !DILocation(line: 791, column: 51, scope: !1484, inlinedAt: !1403)
!1491 = !DILocation(line: 791, column: 45, scope: !1484, inlinedAt: !1403)
!1492 = !DILocation(line: 792, column: 8, scope: !1484, inlinedAt: !1403)
!1493 = !DILocation(line: 792, column: 33, scope: !1484, inlinedAt: !1403)
!1494 = !DILocation(line: 792, column: 27, scope: !1484, inlinedAt: !1403)
!1495 = !DILocation(line: 793, column: 8, scope: !1484, inlinedAt: !1403)
!1496 = !DILocation(line: 793, column: 25, scope: !1484, inlinedAt: !1403)
!1497 = !DILocation(line: 794, column: 8, scope: !1484, inlinedAt: !1403)
!1498 = !DILocation(line: 794, column: 25, scope: !1484, inlinedAt: !1403)
!1499 = !DILocation(line: 795, column: 18, scope: !1484, inlinedAt: !1403)
!1500 = !DILocation(line: 795, column: 12, scope: !1484, inlinedAt: !1403)
!1501 = !DILocation(line: 797, column: 7, scope: !1481, inlinedAt: !1403)
!1502 = !DILocation(line: 797, column: 12, scope: !1481, inlinedAt: !1403)
!1503 = !DILocation(line: 797, column: 30, scope: !1481, inlinedAt: !1403)
!1504 = !DILocation(line: 799, column: 8, scope: !1505, inlinedAt: !1403)
!1505 = distinct !DILexicalBlock(scope: !1481, file: !2, line: 799, column: 4)
!1506 = !DILocalVariable(name: "new_value", scope: !1507, file: !2, line: 801, type: !18, align: 4)
!1507 = distinct !DILexicalBlock(scope: !1505, file: !2, line: 800, column: 4)
!1508 = !DILocation(line: 801, column: 11, scope: !1507, inlinedAt: !1403)
!1509 = !DILocation(line: 801, column: 23, scope: !1507, inlinedAt: !1403)
!1510 = !DILocation(line: 801, column: 31, scope: !1507, inlinedAt: !1403)
!1511 = !DILocation(line: 801, column: 43, scope: !1507, inlinedAt: !1403)
!1512 = !DILocation(line: 802, column: 9, scope: !1507, inlinedAt: !1403)
!1513 = !DILocation(line: 802, column: 21, scope: !1507, inlinedAt: !1403)
!1514 = !DILocation(line: 802, column: 35, scope: !1507, inlinedAt: !1403)
!1515 = !DILocation(line: 803, column: 12, scope: !1507, inlinedAt: !1403)
!1516 = !DILocalVariable(name: "new_value", scope: !1505, file: !2, line: 805, type: !18, align: 4)
!1517 = !DILocation(line: 805, column: 10, scope: !1505, inlinedAt: !1403)
!1518 = !DILocation(line: 805, column: 22, scope: !1505, inlinedAt: !1403)
!1519 = !DILocation(line: 805, column: 30, scope: !1505, inlinedAt: !1403)
!1520 = !DILocation(line: 805, column: 42, scope: !1505, inlinedAt: !1403)
!1521 = !DILocation(line: 806, column: 8, scope: !1505, inlinedAt: !1403)
!1522 = !DILocation(line: 806, column: 20, scope: !1505, inlinedAt: !1403)
!1523 = !DILocation(line: 806, column: 34, scope: !1505, inlinedAt: !1403)
!1524 = !DILocation(line: 807, column: 11, scope: !1505, inlinedAt: !1403)
!1525 = !DILocation(line: 810, column: 9, scope: !1402, inlinedAt: !1403)
!1526 = distinct !DISubprogram(name: "to_short", linkageName: "std.core.String.to_short", scope: !2, file: !2, line: 816, type: !1527, scopeLine: 816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1527 = !DISubroutineType(types: !1528)
!1528 = !{!344, !1529, !59, !18}
!1529 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "short*", baseType: !1530, size: 64, align: 64, dwarfAddressSpace: 0)
!1530 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1531 = !DILocalVariable(name: "s", arg: 1, scope: !1526, file: !2, line: 816, type: !59)
!1532 = !DILocation(line: 816, column: 27, scope: !1526)
!1533 = !DILocalVariable(name: "base", arg: 2, scope: !1526, file: !2, line: 816, type: !18)
!1534 = !DILocation(line: 816, column: 34, scope: !1526)
!1535 = !DILocation(line: 740, column: 12, scope: !1536, inlinedAt: !1538)
!1536 = distinct !DILexicalBlock(scope: !1537, file: !2, line: 743, column: 1)
!1537 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1538 = !DILocation(line: 816, column: 48, scope: !1526)
!1539 = !DILocation(line: 740, column: 26, scope: !1536, inlinedAt: !1538)
!1540 = !DILocation(line: 740, column: 39, scope: !1536, inlinedAt: !1538)
!1541 = !DILocalVariable(name: "len", scope: !1537, file: !2, line: 744, type: !66, align: 8)
!1542 = !DILocation(line: 744, column: 6, scope: !1537, inlinedAt: !1538)
!1543 = !DILocation(line: 744, column: 12, scope: !1537, inlinedAt: !1538)
!1544 = !DILocalVariable(name: "index", scope: !1537, file: !2, line: 745, type: !66, align: 8)
!1545 = !DILocation(line: 745, column: 6, scope: !1537, inlinedAt: !1538)
!1546 = !DILocation(line: 745, column: 14, scope: !1537, inlinedAt: !1538)
!1547 = !DILocalVariable(name: "ptr", scope: !1537, file: !2, line: 746, type: !63, align: 8)
!1548 = !DILocation(line: 746, column: 8, scope: !1537, inlinedAt: !1538)
!1549 = !DILocation(line: 746, column: 14, scope: !1537, inlinedAt: !1538)
!1550 = !DILocation(line: 747, column: 2, scope: !1537, inlinedAt: !1538)
!1551 = !DILocation(line: 747, column: 9, scope: !1552, inlinedAt: !1538)
!1552 = distinct !DILexicalBlock(scope: !1537, file: !2, line: 747, column: 2)
!1553 = !DILocation(line: 747, column: 17, scope: !1552, inlinedAt: !1538)
!1554 = !DILocation(line: 747, column: 42, scope: !1552, inlinedAt: !1538)
!1555 = !DILocation(line: 747, column: 46, scope: !1552, inlinedAt: !1538)
!1556 = !DILocation(line: 16, column: 29, scope: !1557, inlinedAt: !1558)
!1557 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1558 = !DILocation(line: 747, column: 24, scope: !1552, inlinedAt: !1538)
!1559 = !DILocation(line: 16, column: 42, scope: !1557, inlinedAt: !1558)
!1560 = !DILocation(line: 747, column: 55, scope: !1552, inlinedAt: !1538)
!1561 = !DILocation(line: 748, column: 6, scope: !1537, inlinedAt: !1538)
!1562 = !DILocation(line: 748, column: 13, scope: !1537, inlinedAt: !1538)
!1563 = !DILocation(line: 748, column: 27, scope: !1537, inlinedAt: !1538)
!1564 = !DILocalVariable(name: "is_negative", scope: !1537, file: !2, line: 749, type: !145, align: 1)
!1565 = !DILocation(line: 749, column: 7, scope: !1537, inlinedAt: !1538)
!1566 = !DILocation(line: 750, column: 10, scope: !1567, inlinedAt: !1538)
!1567 = distinct !DILexicalBlock(scope: !1537, file: !2, line: 750, column: 2)
!1568 = !DILocation(line: 750, column: 17, scope: !1567, inlinedAt: !1538)
!1569 = !DILocation(line: 753, column: 8, scope: !1570, inlinedAt: !1538)
!1570 = distinct !DILexicalBlock(scope: !1567, file: !2, line: 753, column: 4)
!1571 = !DILocation(line: 754, column: 18, scope: !1570, inlinedAt: !1538)
!1572 = !DILocation(line: 755, column: 4, scope: !1570, inlinedAt: !1538)
!1573 = !DILocation(line: 757, column: 4, scope: !1574, inlinedAt: !1538)
!1574 = distinct !DILexicalBlock(scope: !1567, file: !2, line: 757, column: 4)
!1575 = !DILocation(line: 759, column: 4, scope: !1576, inlinedAt: !1538)
!1576 = distinct !DILexicalBlock(scope: !1567, file: !2, line: 759, column: 4)
!1577 = !DILocation(line: 761, column: 6, scope: !1537, inlinedAt: !1538)
!1578 = !DILocation(line: 761, column: 13, scope: !1537, inlinedAt: !1538)
!1579 = !DILocation(line: 761, column: 27, scope: !1537, inlinedAt: !1538)
!1580 = !DILocalVariable(name: "base_used", scope: !1537, file: !2, line: 762, type: !1530, align: 2)
!1581 = !DILocation(line: 762, column: 8, scope: !1537, inlinedAt: !1538)
!1582 = !DILocation(line: 762, column: 21, scope: !1537, inlinedAt: !1538)
!1583 = !DILocation(line: 763, column: 6, scope: !1537, inlinedAt: !1538)
!1584 = !DILocation(line: 763, column: 13, scope: !1537, inlinedAt: !1538)
!1585 = !DILocation(line: 763, column: 30, scope: !1537, inlinedAt: !1538)
!1586 = !DILocation(line: 765, column: 3, scope: !1587, inlinedAt: !1538)
!1587 = distinct !DILexicalBlock(scope: !1537, file: !2, line: 764, column: 2)
!1588 = !DILocation(line: 766, column: 7, scope: !1587, inlinedAt: !1538)
!1589 = !DILocation(line: 766, column: 16, scope: !1587, inlinedAt: !1538)
!1590 = !DILocation(line: 766, column: 29, scope: !1587, inlinedAt: !1538)
!1591 = !DILocation(line: 767, column: 11, scope: !1592, inlinedAt: !1538)
!1592 = distinct !DILexicalBlock(scope: !1587, file: !2, line: 767, column: 3)
!1593 = !DILocation(line: 767, column: 18, scope: !1592, inlinedAt: !1538)
!1594 = !DILocation(line: 771, column: 17, scope: !1595, inlinedAt: !1538)
!1595 = distinct !DILexicalBlock(scope: !1592, file: !2, line: 771, column: 5)
!1596 = !DILocation(line: 772, column: 5, scope: !1595, inlinedAt: !1538)
!1597 = !DILocation(line: 775, column: 17, scope: !1598, inlinedAt: !1538)
!1598 = distinct !DILexicalBlock(scope: !1592, file: !2, line: 775, column: 5)
!1599 = !DILocation(line: 776, column: 5, scope: !1598, inlinedAt: !1538)
!1600 = !DILocation(line: 779, column: 17, scope: !1601, inlinedAt: !1538)
!1601 = distinct !DILexicalBlock(scope: !1592, file: !2, line: 779, column: 5)
!1602 = !DILocation(line: 780, column: 5, scope: !1601, inlinedAt: !1538)
!1603 = !DILocation(line: 782, column: 5, scope: !1604, inlinedAt: !1538)
!1604 = distinct !DILexicalBlock(scope: !1592, file: !2, line: 782, column: 5)
!1605 = !DILocation(line: 784, column: 7, scope: !1587, inlinedAt: !1538)
!1606 = !DILocation(line: 784, column: 14, scope: !1587, inlinedAt: !1538)
!1607 = !DILocation(line: 784, column: 28, scope: !1587, inlinedAt: !1538)
!1608 = !DILocalVariable(name: "value", scope: !1537, file: !2, line: 786, type: !1530, align: 2)
!1609 = !DILocation(line: 786, column: 8, scope: !1537, inlinedAt: !1538)
!1610 = !DILocation(line: 786, column: 16, scope: !1537, inlinedAt: !1538)
!1611 = !DILocation(line: 787, column: 2, scope: !1537, inlinedAt: !1538)
!1612 = !DILocation(line: 787, column: 9, scope: !1613, inlinedAt: !1538)
!1613 = distinct !DILexicalBlock(scope: !1537, file: !2, line: 787, column: 2)
!1614 = !DILocation(line: 787, column: 18, scope: !1613, inlinedAt: !1538)
!1615 = !DILocalVariable(name: "c", scope: !1616, file: !2, line: 789, type: !64, align: 1)
!1616 = distinct !DILexicalBlock(scope: !1613, file: !2, line: 788, column: 2)
!1617 = !DILocation(line: 789, column: 8, scope: !1616, inlinedAt: !1538)
!1618 = !DILocalVariable(name: "ch", scope: !1619, file: !2, line: 790, type: !64, align: 1)
!1619 = distinct !DILexicalBlock(scope: !1616, file: !2, line: 790, column: 4)
!1620 = !DILocation(line: 790, column: 9, scope: !1619, inlinedAt: !1538)
!1621 = !DILocation(line: 790, column: 14, scope: !1619, inlinedAt: !1538)
!1622 = !DILocation(line: 790, column: 21, scope: !1619, inlinedAt: !1538)
!1623 = !DILocation(line: 791, column: 8, scope: !1619, inlinedAt: !1538)
!1624 = !DILocation(line: 791, column: 27, scope: !1619, inlinedAt: !1538)
!1625 = !DILocation(line: 791, column: 51, scope: !1619, inlinedAt: !1538)
!1626 = !DILocation(line: 791, column: 45, scope: !1619, inlinedAt: !1538)
!1627 = !DILocation(line: 792, column: 8, scope: !1619, inlinedAt: !1538)
!1628 = !DILocation(line: 792, column: 33, scope: !1619, inlinedAt: !1538)
!1629 = !DILocation(line: 792, column: 27, scope: !1619, inlinedAt: !1538)
!1630 = !DILocation(line: 793, column: 8, scope: !1619, inlinedAt: !1538)
!1631 = !DILocation(line: 793, column: 25, scope: !1619, inlinedAt: !1538)
!1632 = !DILocation(line: 794, column: 8, scope: !1619, inlinedAt: !1538)
!1633 = !DILocation(line: 794, column: 25, scope: !1619, inlinedAt: !1538)
!1634 = !DILocation(line: 795, column: 18, scope: !1619, inlinedAt: !1538)
!1635 = !DILocation(line: 795, column: 12, scope: !1619, inlinedAt: !1538)
!1636 = !DILocation(line: 797, column: 7, scope: !1616, inlinedAt: !1538)
!1637 = !DILocation(line: 797, column: 12, scope: !1616, inlinedAt: !1538)
!1638 = !DILocation(line: 797, column: 30, scope: !1616, inlinedAt: !1538)
!1639 = !DILocation(line: 799, column: 8, scope: !1640, inlinedAt: !1538)
!1640 = distinct !DILexicalBlock(scope: !1616, file: !2, line: 799, column: 4)
!1641 = !DILocalVariable(name: "new_value", scope: !1642, file: !2, line: 801, type: !1530, align: 2)
!1642 = distinct !DILexicalBlock(scope: !1640, file: !2, line: 800, column: 4)
!1643 = !DILocation(line: 801, column: 11, scope: !1642, inlinedAt: !1538)
!1644 = !DILocation(line: 801, column: 23, scope: !1642, inlinedAt: !1538)
!1645 = !DILocation(line: 801, column: 31, scope: !1642, inlinedAt: !1538)
!1646 = !DILocation(line: 801, column: 43, scope: !1642, inlinedAt: !1538)
!1647 = !DILocation(line: 802, column: 9, scope: !1642, inlinedAt: !1538)
!1648 = !DILocation(line: 802, column: 21, scope: !1642, inlinedAt: !1538)
!1649 = !DILocation(line: 802, column: 35, scope: !1642, inlinedAt: !1538)
!1650 = !DILocation(line: 803, column: 12, scope: !1642, inlinedAt: !1538)
!1651 = !DILocalVariable(name: "new_value", scope: !1640, file: !2, line: 805, type: !1530, align: 2)
!1652 = !DILocation(line: 805, column: 10, scope: !1640, inlinedAt: !1538)
!1653 = !DILocation(line: 805, column: 22, scope: !1640, inlinedAt: !1538)
!1654 = !DILocation(line: 805, column: 30, scope: !1640, inlinedAt: !1538)
!1655 = !DILocation(line: 805, column: 42, scope: !1640, inlinedAt: !1538)
!1656 = !DILocation(line: 806, column: 8, scope: !1640, inlinedAt: !1538)
!1657 = !DILocation(line: 806, column: 20, scope: !1640, inlinedAt: !1538)
!1658 = !DILocation(line: 806, column: 34, scope: !1640, inlinedAt: !1538)
!1659 = !DILocation(line: 807, column: 11, scope: !1640, inlinedAt: !1538)
!1660 = !DILocation(line: 810, column: 9, scope: !1537, inlinedAt: !1538)
!1661 = distinct !DISubprogram(name: "to_ichar", linkageName: "std.core.String.to_ichar", scope: !2, file: !2, line: 817, type: !1662, scopeLine: 817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1662 = !DISubroutineType(types: !1663)
!1663 = !{!344, !1664, !59, !18}
!1664 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ichar*", baseType: !1665, size: 64, align: 64, dwarfAddressSpace: 0)
!1665 = !DIBasicType(name: "ichar", size: 8, encoding: DW_ATE_signed_char)
!1666 = !DILocalVariable(name: "s", arg: 1, scope: !1661, file: !2, line: 817, type: !59)
!1667 = !DILocation(line: 817, column: 27, scope: !1661)
!1668 = !DILocalVariable(name: "base", arg: 2, scope: !1661, file: !2, line: 817, type: !18)
!1669 = !DILocation(line: 817, column: 34, scope: !1661)
!1670 = !DILocation(line: 740, column: 12, scope: !1671, inlinedAt: !1673)
!1671 = distinct !DILexicalBlock(scope: !1672, file: !2, line: 743, column: 1)
!1672 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1673 = !DILocation(line: 817, column: 48, scope: !1661)
!1674 = !DILocation(line: 740, column: 26, scope: !1671, inlinedAt: !1673)
!1675 = !DILocation(line: 740, column: 39, scope: !1671, inlinedAt: !1673)
!1676 = !DILocalVariable(name: "len", scope: !1672, file: !2, line: 744, type: !66, align: 8)
!1677 = !DILocation(line: 744, column: 6, scope: !1672, inlinedAt: !1673)
!1678 = !DILocation(line: 744, column: 12, scope: !1672, inlinedAt: !1673)
!1679 = !DILocalVariable(name: "index", scope: !1672, file: !2, line: 745, type: !66, align: 8)
!1680 = !DILocation(line: 745, column: 6, scope: !1672, inlinedAt: !1673)
!1681 = !DILocation(line: 745, column: 14, scope: !1672, inlinedAt: !1673)
!1682 = !DILocalVariable(name: "ptr", scope: !1672, file: !2, line: 746, type: !63, align: 8)
!1683 = !DILocation(line: 746, column: 8, scope: !1672, inlinedAt: !1673)
!1684 = !DILocation(line: 746, column: 14, scope: !1672, inlinedAt: !1673)
!1685 = !DILocation(line: 747, column: 2, scope: !1672, inlinedAt: !1673)
!1686 = !DILocation(line: 747, column: 9, scope: !1687, inlinedAt: !1673)
!1687 = distinct !DILexicalBlock(scope: !1672, file: !2, line: 747, column: 2)
!1688 = !DILocation(line: 747, column: 17, scope: !1687, inlinedAt: !1673)
!1689 = !DILocation(line: 747, column: 42, scope: !1687, inlinedAt: !1673)
!1690 = !DILocation(line: 747, column: 46, scope: !1687, inlinedAt: !1673)
!1691 = !DILocation(line: 16, column: 29, scope: !1692, inlinedAt: !1693)
!1692 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1693 = !DILocation(line: 747, column: 24, scope: !1687, inlinedAt: !1673)
!1694 = !DILocation(line: 16, column: 42, scope: !1692, inlinedAt: !1693)
!1695 = !DILocation(line: 747, column: 55, scope: !1687, inlinedAt: !1673)
!1696 = !DILocation(line: 748, column: 6, scope: !1672, inlinedAt: !1673)
!1697 = !DILocation(line: 748, column: 13, scope: !1672, inlinedAt: !1673)
!1698 = !DILocation(line: 748, column: 27, scope: !1672, inlinedAt: !1673)
!1699 = !DILocalVariable(name: "is_negative", scope: !1672, file: !2, line: 749, type: !145, align: 1)
!1700 = !DILocation(line: 749, column: 7, scope: !1672, inlinedAt: !1673)
!1701 = !DILocation(line: 750, column: 10, scope: !1702, inlinedAt: !1673)
!1702 = distinct !DILexicalBlock(scope: !1672, file: !2, line: 750, column: 2)
!1703 = !DILocation(line: 750, column: 17, scope: !1702, inlinedAt: !1673)
!1704 = !DILocation(line: 753, column: 8, scope: !1705, inlinedAt: !1673)
!1705 = distinct !DILexicalBlock(scope: !1702, file: !2, line: 753, column: 4)
!1706 = !DILocation(line: 754, column: 18, scope: !1705, inlinedAt: !1673)
!1707 = !DILocation(line: 755, column: 4, scope: !1705, inlinedAt: !1673)
!1708 = !DILocation(line: 757, column: 4, scope: !1709, inlinedAt: !1673)
!1709 = distinct !DILexicalBlock(scope: !1702, file: !2, line: 757, column: 4)
!1710 = !DILocation(line: 759, column: 4, scope: !1711, inlinedAt: !1673)
!1711 = distinct !DILexicalBlock(scope: !1702, file: !2, line: 759, column: 4)
!1712 = !DILocation(line: 761, column: 6, scope: !1672, inlinedAt: !1673)
!1713 = !DILocation(line: 761, column: 13, scope: !1672, inlinedAt: !1673)
!1714 = !DILocation(line: 761, column: 27, scope: !1672, inlinedAt: !1673)
!1715 = !DILocalVariable(name: "base_used", scope: !1672, file: !2, line: 762, type: !1665, align: 1)
!1716 = !DILocation(line: 762, column: 8, scope: !1672, inlinedAt: !1673)
!1717 = !DILocation(line: 762, column: 21, scope: !1672, inlinedAt: !1673)
!1718 = !DILocation(line: 763, column: 6, scope: !1672, inlinedAt: !1673)
!1719 = !DILocation(line: 763, column: 13, scope: !1672, inlinedAt: !1673)
!1720 = !DILocation(line: 763, column: 30, scope: !1672, inlinedAt: !1673)
!1721 = !DILocation(line: 765, column: 3, scope: !1722, inlinedAt: !1673)
!1722 = distinct !DILexicalBlock(scope: !1672, file: !2, line: 764, column: 2)
!1723 = !DILocation(line: 766, column: 7, scope: !1722, inlinedAt: !1673)
!1724 = !DILocation(line: 766, column: 16, scope: !1722, inlinedAt: !1673)
!1725 = !DILocation(line: 766, column: 29, scope: !1722, inlinedAt: !1673)
!1726 = !DILocation(line: 767, column: 11, scope: !1727, inlinedAt: !1673)
!1727 = distinct !DILexicalBlock(scope: !1722, file: !2, line: 767, column: 3)
!1728 = !DILocation(line: 767, column: 18, scope: !1727, inlinedAt: !1673)
!1729 = !DILocation(line: 771, column: 17, scope: !1730, inlinedAt: !1673)
!1730 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 771, column: 5)
!1731 = !DILocation(line: 772, column: 5, scope: !1730, inlinedAt: !1673)
!1732 = !DILocation(line: 775, column: 17, scope: !1733, inlinedAt: !1673)
!1733 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 775, column: 5)
!1734 = !DILocation(line: 776, column: 5, scope: !1733, inlinedAt: !1673)
!1735 = !DILocation(line: 779, column: 17, scope: !1736, inlinedAt: !1673)
!1736 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 779, column: 5)
!1737 = !DILocation(line: 780, column: 5, scope: !1736, inlinedAt: !1673)
!1738 = !DILocation(line: 782, column: 5, scope: !1739, inlinedAt: !1673)
!1739 = distinct !DILexicalBlock(scope: !1727, file: !2, line: 782, column: 5)
!1740 = !DILocation(line: 784, column: 7, scope: !1722, inlinedAt: !1673)
!1741 = !DILocation(line: 784, column: 14, scope: !1722, inlinedAt: !1673)
!1742 = !DILocation(line: 784, column: 28, scope: !1722, inlinedAt: !1673)
!1743 = !DILocalVariable(name: "value", scope: !1672, file: !2, line: 786, type: !1665, align: 1)
!1744 = !DILocation(line: 786, column: 8, scope: !1672, inlinedAt: !1673)
!1745 = !DILocation(line: 786, column: 16, scope: !1672, inlinedAt: !1673)
!1746 = !DILocation(line: 787, column: 2, scope: !1672, inlinedAt: !1673)
!1747 = !DILocation(line: 787, column: 9, scope: !1748, inlinedAt: !1673)
!1748 = distinct !DILexicalBlock(scope: !1672, file: !2, line: 787, column: 2)
!1749 = !DILocation(line: 787, column: 18, scope: !1748, inlinedAt: !1673)
!1750 = !DILocalVariable(name: "c", scope: !1751, file: !2, line: 789, type: !64, align: 1)
!1751 = distinct !DILexicalBlock(scope: !1748, file: !2, line: 788, column: 2)
!1752 = !DILocation(line: 789, column: 8, scope: !1751, inlinedAt: !1673)
!1753 = !DILocalVariable(name: "ch", scope: !1754, file: !2, line: 790, type: !64, align: 1)
!1754 = distinct !DILexicalBlock(scope: !1751, file: !2, line: 790, column: 4)
!1755 = !DILocation(line: 790, column: 9, scope: !1754, inlinedAt: !1673)
!1756 = !DILocation(line: 790, column: 14, scope: !1754, inlinedAt: !1673)
!1757 = !DILocation(line: 790, column: 21, scope: !1754, inlinedAt: !1673)
!1758 = !DILocation(line: 791, column: 8, scope: !1754, inlinedAt: !1673)
!1759 = !DILocation(line: 791, column: 27, scope: !1754, inlinedAt: !1673)
!1760 = !DILocation(line: 791, column: 51, scope: !1754, inlinedAt: !1673)
!1761 = !DILocation(line: 791, column: 45, scope: !1754, inlinedAt: !1673)
!1762 = !DILocation(line: 792, column: 8, scope: !1754, inlinedAt: !1673)
!1763 = !DILocation(line: 792, column: 33, scope: !1754, inlinedAt: !1673)
!1764 = !DILocation(line: 792, column: 27, scope: !1754, inlinedAt: !1673)
!1765 = !DILocation(line: 793, column: 8, scope: !1754, inlinedAt: !1673)
!1766 = !DILocation(line: 793, column: 25, scope: !1754, inlinedAt: !1673)
!1767 = !DILocation(line: 794, column: 8, scope: !1754, inlinedAt: !1673)
!1768 = !DILocation(line: 794, column: 25, scope: !1754, inlinedAt: !1673)
!1769 = !DILocation(line: 795, column: 18, scope: !1754, inlinedAt: !1673)
!1770 = !DILocation(line: 795, column: 12, scope: !1754, inlinedAt: !1673)
!1771 = !DILocation(line: 797, column: 7, scope: !1751, inlinedAt: !1673)
!1772 = !DILocation(line: 797, column: 12, scope: !1751, inlinedAt: !1673)
!1773 = !DILocation(line: 797, column: 30, scope: !1751, inlinedAt: !1673)
!1774 = !DILocation(line: 799, column: 8, scope: !1775, inlinedAt: !1673)
!1775 = distinct !DILexicalBlock(scope: !1751, file: !2, line: 799, column: 4)
!1776 = !DILocalVariable(name: "new_value", scope: !1777, file: !2, line: 801, type: !1665, align: 1)
!1777 = distinct !DILexicalBlock(scope: !1775, file: !2, line: 800, column: 4)
!1778 = !DILocation(line: 801, column: 11, scope: !1777, inlinedAt: !1673)
!1779 = !DILocation(line: 801, column: 23, scope: !1777, inlinedAt: !1673)
!1780 = !DILocation(line: 801, column: 31, scope: !1777, inlinedAt: !1673)
!1781 = !DILocation(line: 801, column: 43, scope: !1777, inlinedAt: !1673)
!1782 = !DILocation(line: 802, column: 9, scope: !1777, inlinedAt: !1673)
!1783 = !DILocation(line: 802, column: 21, scope: !1777, inlinedAt: !1673)
!1784 = !DILocation(line: 802, column: 35, scope: !1777, inlinedAt: !1673)
!1785 = !DILocation(line: 803, column: 12, scope: !1777, inlinedAt: !1673)
!1786 = !DILocalVariable(name: "new_value", scope: !1775, file: !2, line: 805, type: !1665, align: 1)
!1787 = !DILocation(line: 805, column: 10, scope: !1775, inlinedAt: !1673)
!1788 = !DILocation(line: 805, column: 22, scope: !1775, inlinedAt: !1673)
!1789 = !DILocation(line: 805, column: 30, scope: !1775, inlinedAt: !1673)
!1790 = !DILocation(line: 805, column: 42, scope: !1775, inlinedAt: !1673)
!1791 = !DILocation(line: 806, column: 8, scope: !1775, inlinedAt: !1673)
!1792 = !DILocation(line: 806, column: 20, scope: !1775, inlinedAt: !1673)
!1793 = !DILocation(line: 806, column: 34, scope: !1775, inlinedAt: !1673)
!1794 = !DILocation(line: 807, column: 11, scope: !1775, inlinedAt: !1673)
!1795 = !DILocation(line: 810, column: 9, scope: !1672, inlinedAt: !1673)
!1796 = distinct !DISubprogram(name: "to_uint128", linkageName: "std.core.String.to_uint128", scope: !2, file: !2, line: 819, type: !1797, scopeLine: 819, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1797 = !DISubroutineType(types: !1798)
!1798 = !{!344, !1799, !59, !18}
!1799 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint128*", baseType: !1800, size: 64, align: 64, dwarfAddressSpace: 0)
!1800 = !DIBasicType(name: "uint128", size: 128, encoding: DW_ATE_unsigned)
!1801 = !DILocalVariable(name: "s", arg: 1, scope: !1796, file: !2, line: 819, type: !59)
!1802 = !DILocation(line: 819, column: 31, scope: !1796)
!1803 = !DILocalVariable(name: "base", arg: 2, scope: !1796, file: !2, line: 819, type: !18)
!1804 = !DILocation(line: 819, column: 38, scope: !1796)
!1805 = !DILocation(line: 740, column: 12, scope: !1806, inlinedAt: !1808)
!1806 = distinct !DILexicalBlock(scope: !1807, file: !2, line: 743, column: 1)
!1807 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1808 = !DILocation(line: 819, column: 52, scope: !1796)
!1809 = !DILocation(line: 740, column: 26, scope: !1806, inlinedAt: !1808)
!1810 = !DILocation(line: 740, column: 39, scope: !1806, inlinedAt: !1808)
!1811 = !DILocalVariable(name: "len", scope: !1807, file: !2, line: 744, type: !66, align: 8)
!1812 = !DILocation(line: 744, column: 6, scope: !1807, inlinedAt: !1808)
!1813 = !DILocation(line: 744, column: 12, scope: !1807, inlinedAt: !1808)
!1814 = !DILocalVariable(name: "index", scope: !1807, file: !2, line: 745, type: !66, align: 8)
!1815 = !DILocation(line: 745, column: 6, scope: !1807, inlinedAt: !1808)
!1816 = !DILocation(line: 745, column: 14, scope: !1807, inlinedAt: !1808)
!1817 = !DILocalVariable(name: "ptr", scope: !1807, file: !2, line: 746, type: !63, align: 8)
!1818 = !DILocation(line: 746, column: 8, scope: !1807, inlinedAt: !1808)
!1819 = !DILocation(line: 746, column: 14, scope: !1807, inlinedAt: !1808)
!1820 = !DILocation(line: 747, column: 2, scope: !1807, inlinedAt: !1808)
!1821 = !DILocation(line: 747, column: 9, scope: !1822, inlinedAt: !1808)
!1822 = distinct !DILexicalBlock(scope: !1807, file: !2, line: 747, column: 2)
!1823 = !DILocation(line: 747, column: 17, scope: !1822, inlinedAt: !1808)
!1824 = !DILocation(line: 747, column: 42, scope: !1822, inlinedAt: !1808)
!1825 = !DILocation(line: 747, column: 46, scope: !1822, inlinedAt: !1808)
!1826 = !DILocation(line: 16, column: 29, scope: !1827, inlinedAt: !1828)
!1827 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1828 = !DILocation(line: 747, column: 24, scope: !1822, inlinedAt: !1808)
!1829 = !DILocation(line: 16, column: 42, scope: !1827, inlinedAt: !1828)
!1830 = !DILocation(line: 747, column: 55, scope: !1822, inlinedAt: !1808)
!1831 = !DILocation(line: 748, column: 6, scope: !1807, inlinedAt: !1808)
!1832 = !DILocation(line: 748, column: 13, scope: !1807, inlinedAt: !1808)
!1833 = !DILocation(line: 748, column: 27, scope: !1807, inlinedAt: !1808)
!1834 = !DILocalVariable(name: "is_negative", scope: !1807, file: !2, line: 749, type: !145, align: 1)
!1835 = !DILocation(line: 749, column: 7, scope: !1807, inlinedAt: !1808)
!1836 = !DILocation(line: 750, column: 10, scope: !1837, inlinedAt: !1808)
!1837 = distinct !DILexicalBlock(scope: !1807, file: !2, line: 750, column: 2)
!1838 = !DILocation(line: 750, column: 17, scope: !1837, inlinedAt: !1808)
!1839 = !DILocation(line: 753, column: 8, scope: !1840, inlinedAt: !1808)
!1840 = distinct !DILexicalBlock(scope: !1837, file: !2, line: 753, column: 4)
!1841 = !DILocation(line: 753, column: 31, scope: !1840, inlinedAt: !1808)
!1842 = !DILocation(line: 757, column: 4, scope: !1843, inlinedAt: !1808)
!1843 = distinct !DILexicalBlock(scope: !1837, file: !2, line: 757, column: 4)
!1844 = !DILocation(line: 759, column: 4, scope: !1845, inlinedAt: !1808)
!1845 = distinct !DILexicalBlock(scope: !1837, file: !2, line: 759, column: 4)
!1846 = !DILocation(line: 761, column: 6, scope: !1807, inlinedAt: !1808)
!1847 = !DILocation(line: 761, column: 13, scope: !1807, inlinedAt: !1808)
!1848 = !DILocation(line: 761, column: 27, scope: !1807, inlinedAt: !1808)
!1849 = !DILocalVariable(name: "base_used", scope: !1807, file: !2, line: 762, type: !1800, align: 16)
!1850 = !DILocation(line: 762, column: 8, scope: !1807, inlinedAt: !1808)
!1851 = !DILocation(line: 762, column: 21, scope: !1807, inlinedAt: !1808)
!1852 = !DILocation(line: 763, column: 6, scope: !1807, inlinedAt: !1808)
!1853 = !DILocation(line: 763, column: 13, scope: !1807, inlinedAt: !1808)
!1854 = !DILocation(line: 763, column: 30, scope: !1807, inlinedAt: !1808)
!1855 = !DILocation(line: 765, column: 3, scope: !1856, inlinedAt: !1808)
!1856 = distinct !DILexicalBlock(scope: !1807, file: !2, line: 764, column: 2)
!1857 = !DILocation(line: 766, column: 7, scope: !1856, inlinedAt: !1808)
!1858 = !DILocation(line: 766, column: 16, scope: !1856, inlinedAt: !1808)
!1859 = !DILocation(line: 766, column: 29, scope: !1856, inlinedAt: !1808)
!1860 = !DILocation(line: 767, column: 11, scope: !1861, inlinedAt: !1808)
!1861 = distinct !DILexicalBlock(scope: !1856, file: !2, line: 767, column: 3)
!1862 = !DILocation(line: 767, column: 18, scope: !1861, inlinedAt: !1808)
!1863 = !DILocation(line: 771, column: 17, scope: !1864, inlinedAt: !1808)
!1864 = distinct !DILexicalBlock(scope: !1861, file: !2, line: 771, column: 5)
!1865 = !DILocation(line: 772, column: 5, scope: !1864, inlinedAt: !1808)
!1866 = !DILocation(line: 775, column: 17, scope: !1867, inlinedAt: !1808)
!1867 = distinct !DILexicalBlock(scope: !1861, file: !2, line: 775, column: 5)
!1868 = !DILocation(line: 776, column: 5, scope: !1867, inlinedAt: !1808)
!1869 = !DILocation(line: 779, column: 17, scope: !1870, inlinedAt: !1808)
!1870 = distinct !DILexicalBlock(scope: !1861, file: !2, line: 779, column: 5)
!1871 = !DILocation(line: 780, column: 5, scope: !1870, inlinedAt: !1808)
!1872 = !DILocation(line: 782, column: 5, scope: !1873, inlinedAt: !1808)
!1873 = distinct !DILexicalBlock(scope: !1861, file: !2, line: 782, column: 5)
!1874 = !DILocation(line: 784, column: 7, scope: !1856, inlinedAt: !1808)
!1875 = !DILocation(line: 784, column: 14, scope: !1856, inlinedAt: !1808)
!1876 = !DILocation(line: 784, column: 28, scope: !1856, inlinedAt: !1808)
!1877 = !DILocalVariable(name: "value", scope: !1807, file: !2, line: 786, type: !1800, align: 16)
!1878 = !DILocation(line: 786, column: 8, scope: !1807, inlinedAt: !1808)
!1879 = !DILocation(line: 786, column: 16, scope: !1807, inlinedAt: !1808)
!1880 = !DILocation(line: 787, column: 2, scope: !1807, inlinedAt: !1808)
!1881 = !DILocation(line: 787, column: 9, scope: !1882, inlinedAt: !1808)
!1882 = distinct !DILexicalBlock(scope: !1807, file: !2, line: 787, column: 2)
!1883 = !DILocation(line: 787, column: 18, scope: !1882, inlinedAt: !1808)
!1884 = !DILocalVariable(name: "c", scope: !1885, file: !2, line: 789, type: !64, align: 1)
!1885 = distinct !DILexicalBlock(scope: !1882, file: !2, line: 788, column: 2)
!1886 = !DILocation(line: 789, column: 8, scope: !1885, inlinedAt: !1808)
!1887 = !DILocalVariable(name: "ch", scope: !1888, file: !2, line: 790, type: !64, align: 1)
!1888 = distinct !DILexicalBlock(scope: !1885, file: !2, line: 790, column: 4)
!1889 = !DILocation(line: 790, column: 9, scope: !1888, inlinedAt: !1808)
!1890 = !DILocation(line: 790, column: 14, scope: !1888, inlinedAt: !1808)
!1891 = !DILocation(line: 790, column: 21, scope: !1888, inlinedAt: !1808)
!1892 = !DILocation(line: 791, column: 8, scope: !1888, inlinedAt: !1808)
!1893 = !DILocation(line: 791, column: 27, scope: !1888, inlinedAt: !1808)
!1894 = !DILocation(line: 791, column: 51, scope: !1888, inlinedAt: !1808)
!1895 = !DILocation(line: 791, column: 45, scope: !1888, inlinedAt: !1808)
!1896 = !DILocation(line: 792, column: 8, scope: !1888, inlinedAt: !1808)
!1897 = !DILocation(line: 792, column: 33, scope: !1888, inlinedAt: !1808)
!1898 = !DILocation(line: 792, column: 27, scope: !1888, inlinedAt: !1808)
!1899 = !DILocation(line: 793, column: 8, scope: !1888, inlinedAt: !1808)
!1900 = !DILocation(line: 793, column: 25, scope: !1888, inlinedAt: !1808)
!1901 = !DILocation(line: 794, column: 8, scope: !1888, inlinedAt: !1808)
!1902 = !DILocation(line: 794, column: 25, scope: !1888, inlinedAt: !1808)
!1903 = !DILocation(line: 795, column: 18, scope: !1888, inlinedAt: !1808)
!1904 = !DILocation(line: 795, column: 12, scope: !1888, inlinedAt: !1808)
!1905 = !DILocation(line: 797, column: 7, scope: !1885, inlinedAt: !1808)
!1906 = !DILocation(line: 797, column: 12, scope: !1885, inlinedAt: !1808)
!1907 = !DILocation(line: 797, column: 30, scope: !1885, inlinedAt: !1808)
!1908 = !DILocation(line: 799, column: 8, scope: !1909, inlinedAt: !1808)
!1909 = distinct !DILexicalBlock(scope: !1885, file: !2, line: 799, column: 4)
!1910 = !DILocalVariable(name: "new_value", scope: !1911, file: !2, line: 801, type: !1800, align: 16)
!1911 = distinct !DILexicalBlock(scope: !1909, file: !2, line: 800, column: 4)
!1912 = !DILocation(line: 801, column: 11, scope: !1911, inlinedAt: !1808)
!1913 = !DILocation(line: 801, column: 23, scope: !1911, inlinedAt: !1808)
!1914 = !DILocation(line: 801, column: 31, scope: !1911, inlinedAt: !1808)
!1915 = !DILocation(line: 801, column: 43, scope: !1911, inlinedAt: !1808)
!1916 = !DILocation(line: 802, column: 9, scope: !1911, inlinedAt: !1808)
!1917 = !DILocation(line: 802, column: 21, scope: !1911, inlinedAt: !1808)
!1918 = !DILocation(line: 802, column: 35, scope: !1911, inlinedAt: !1808)
!1919 = !DILocation(line: 803, column: 12, scope: !1911, inlinedAt: !1808)
!1920 = !DILocalVariable(name: "new_value", scope: !1909, file: !2, line: 805, type: !1800, align: 16)
!1921 = !DILocation(line: 805, column: 10, scope: !1909, inlinedAt: !1808)
!1922 = !DILocation(line: 805, column: 22, scope: !1909, inlinedAt: !1808)
!1923 = !DILocation(line: 805, column: 30, scope: !1909, inlinedAt: !1808)
!1924 = !DILocation(line: 805, column: 42, scope: !1909, inlinedAt: !1808)
!1925 = !DILocation(line: 806, column: 8, scope: !1909, inlinedAt: !1808)
!1926 = !DILocation(line: 806, column: 20, scope: !1909, inlinedAt: !1808)
!1927 = !DILocation(line: 806, column: 34, scope: !1909, inlinedAt: !1808)
!1928 = !DILocation(line: 807, column: 11, scope: !1909, inlinedAt: !1808)
!1929 = !DILocation(line: 810, column: 9, scope: !1807, inlinedAt: !1808)
!1930 = distinct !DISubprogram(name: "to_ulong", linkageName: "std.core.String.to_ulong", scope: !2, file: !2, line: 820, type: !1931, scopeLine: 820, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1931 = !DISubroutineType(types: !1932)
!1932 = !{!344, !1933, !59, !18}
!1933 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "ulong*", baseType: !67, size: 64, align: 64, dwarfAddressSpace: 0)
!1934 = !DILocalVariable(name: "s", arg: 1, scope: !1930, file: !2, line: 820, type: !59)
!1935 = !DILocation(line: 820, column: 27, scope: !1930)
!1936 = !DILocalVariable(name: "base", arg: 2, scope: !1930, file: !2, line: 820, type: !18)
!1937 = !DILocation(line: 820, column: 34, scope: !1930)
!1938 = !DILocation(line: 740, column: 12, scope: !1939, inlinedAt: !1941)
!1939 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 743, column: 1)
!1940 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!1941 = !DILocation(line: 820, column: 48, scope: !1930)
!1942 = !DILocation(line: 740, column: 26, scope: !1939, inlinedAt: !1941)
!1943 = !DILocation(line: 740, column: 39, scope: !1939, inlinedAt: !1941)
!1944 = !DILocalVariable(name: "len", scope: !1940, file: !2, line: 744, type: !66, align: 8)
!1945 = !DILocation(line: 744, column: 6, scope: !1940, inlinedAt: !1941)
!1946 = !DILocation(line: 744, column: 12, scope: !1940, inlinedAt: !1941)
!1947 = !DILocalVariable(name: "index", scope: !1940, file: !2, line: 745, type: !66, align: 8)
!1948 = !DILocation(line: 745, column: 6, scope: !1940, inlinedAt: !1941)
!1949 = !DILocation(line: 745, column: 14, scope: !1940, inlinedAt: !1941)
!1950 = !DILocalVariable(name: "ptr", scope: !1940, file: !2, line: 746, type: !63, align: 8)
!1951 = !DILocation(line: 746, column: 8, scope: !1940, inlinedAt: !1941)
!1952 = !DILocation(line: 746, column: 14, scope: !1940, inlinedAt: !1941)
!1953 = !DILocation(line: 747, column: 2, scope: !1940, inlinedAt: !1941)
!1954 = !DILocation(line: 747, column: 9, scope: !1955, inlinedAt: !1941)
!1955 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 747, column: 2)
!1956 = !DILocation(line: 747, column: 17, scope: !1955, inlinedAt: !1941)
!1957 = !DILocation(line: 747, column: 42, scope: !1955, inlinedAt: !1941)
!1958 = !DILocation(line: 747, column: 46, scope: !1955, inlinedAt: !1941)
!1959 = !DILocation(line: 16, column: 29, scope: !1960, inlinedAt: !1961)
!1960 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!1961 = !DILocation(line: 747, column: 24, scope: !1955, inlinedAt: !1941)
!1962 = !DILocation(line: 16, column: 42, scope: !1960, inlinedAt: !1961)
!1963 = !DILocation(line: 747, column: 55, scope: !1955, inlinedAt: !1941)
!1964 = !DILocation(line: 748, column: 6, scope: !1940, inlinedAt: !1941)
!1965 = !DILocation(line: 748, column: 13, scope: !1940, inlinedAt: !1941)
!1966 = !DILocation(line: 748, column: 27, scope: !1940, inlinedAt: !1941)
!1967 = !DILocalVariable(name: "is_negative", scope: !1940, file: !2, line: 749, type: !145, align: 1)
!1968 = !DILocation(line: 749, column: 7, scope: !1940, inlinedAt: !1941)
!1969 = !DILocation(line: 750, column: 10, scope: !1970, inlinedAt: !1941)
!1970 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 750, column: 2)
!1971 = !DILocation(line: 750, column: 17, scope: !1970, inlinedAt: !1941)
!1972 = !DILocation(line: 753, column: 8, scope: !1973, inlinedAt: !1941)
!1973 = distinct !DILexicalBlock(scope: !1970, file: !2, line: 753, column: 4)
!1974 = !DILocation(line: 753, column: 31, scope: !1973, inlinedAt: !1941)
!1975 = !DILocation(line: 757, column: 4, scope: !1976, inlinedAt: !1941)
!1976 = distinct !DILexicalBlock(scope: !1970, file: !2, line: 757, column: 4)
!1977 = !DILocation(line: 759, column: 4, scope: !1978, inlinedAt: !1941)
!1978 = distinct !DILexicalBlock(scope: !1970, file: !2, line: 759, column: 4)
!1979 = !DILocation(line: 761, column: 6, scope: !1940, inlinedAt: !1941)
!1980 = !DILocation(line: 761, column: 13, scope: !1940, inlinedAt: !1941)
!1981 = !DILocation(line: 761, column: 27, scope: !1940, inlinedAt: !1941)
!1982 = !DILocalVariable(name: "base_used", scope: !1940, file: !2, line: 762, type: !67, align: 8)
!1983 = !DILocation(line: 762, column: 8, scope: !1940, inlinedAt: !1941)
!1984 = !DILocation(line: 762, column: 21, scope: !1940, inlinedAt: !1941)
!1985 = !DILocation(line: 763, column: 6, scope: !1940, inlinedAt: !1941)
!1986 = !DILocation(line: 763, column: 13, scope: !1940, inlinedAt: !1941)
!1987 = !DILocation(line: 763, column: 30, scope: !1940, inlinedAt: !1941)
!1988 = !DILocation(line: 765, column: 3, scope: !1989, inlinedAt: !1941)
!1989 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 764, column: 2)
!1990 = !DILocation(line: 766, column: 7, scope: !1989, inlinedAt: !1941)
!1991 = !DILocation(line: 766, column: 16, scope: !1989, inlinedAt: !1941)
!1992 = !DILocation(line: 766, column: 29, scope: !1989, inlinedAt: !1941)
!1993 = !DILocation(line: 767, column: 11, scope: !1994, inlinedAt: !1941)
!1994 = distinct !DILexicalBlock(scope: !1989, file: !2, line: 767, column: 3)
!1995 = !DILocation(line: 767, column: 18, scope: !1994, inlinedAt: !1941)
!1996 = !DILocation(line: 771, column: 17, scope: !1997, inlinedAt: !1941)
!1997 = distinct !DILexicalBlock(scope: !1994, file: !2, line: 771, column: 5)
!1998 = !DILocation(line: 772, column: 5, scope: !1997, inlinedAt: !1941)
!1999 = !DILocation(line: 775, column: 17, scope: !2000, inlinedAt: !1941)
!2000 = distinct !DILexicalBlock(scope: !1994, file: !2, line: 775, column: 5)
!2001 = !DILocation(line: 776, column: 5, scope: !2000, inlinedAt: !1941)
!2002 = !DILocation(line: 779, column: 17, scope: !2003, inlinedAt: !1941)
!2003 = distinct !DILexicalBlock(scope: !1994, file: !2, line: 779, column: 5)
!2004 = !DILocation(line: 780, column: 5, scope: !2003, inlinedAt: !1941)
!2005 = !DILocation(line: 782, column: 5, scope: !2006, inlinedAt: !1941)
!2006 = distinct !DILexicalBlock(scope: !1994, file: !2, line: 782, column: 5)
!2007 = !DILocation(line: 784, column: 7, scope: !1989, inlinedAt: !1941)
!2008 = !DILocation(line: 784, column: 14, scope: !1989, inlinedAt: !1941)
!2009 = !DILocation(line: 784, column: 28, scope: !1989, inlinedAt: !1941)
!2010 = !DILocalVariable(name: "value", scope: !1940, file: !2, line: 786, type: !67, align: 8)
!2011 = !DILocation(line: 786, column: 8, scope: !1940, inlinedAt: !1941)
!2012 = !DILocation(line: 786, column: 16, scope: !1940, inlinedAt: !1941)
!2013 = !DILocation(line: 787, column: 2, scope: !1940, inlinedAt: !1941)
!2014 = !DILocation(line: 787, column: 9, scope: !2015, inlinedAt: !1941)
!2015 = distinct !DILexicalBlock(scope: !1940, file: !2, line: 787, column: 2)
!2016 = !DILocation(line: 787, column: 18, scope: !2015, inlinedAt: !1941)
!2017 = !DILocalVariable(name: "c", scope: !2018, file: !2, line: 789, type: !64, align: 1)
!2018 = distinct !DILexicalBlock(scope: !2015, file: !2, line: 788, column: 2)
!2019 = !DILocation(line: 789, column: 8, scope: !2018, inlinedAt: !1941)
!2020 = !DILocalVariable(name: "ch", scope: !2021, file: !2, line: 790, type: !64, align: 1)
!2021 = distinct !DILexicalBlock(scope: !2018, file: !2, line: 790, column: 4)
!2022 = !DILocation(line: 790, column: 9, scope: !2021, inlinedAt: !1941)
!2023 = !DILocation(line: 790, column: 14, scope: !2021, inlinedAt: !1941)
!2024 = !DILocation(line: 790, column: 21, scope: !2021, inlinedAt: !1941)
!2025 = !DILocation(line: 791, column: 8, scope: !2021, inlinedAt: !1941)
!2026 = !DILocation(line: 791, column: 27, scope: !2021, inlinedAt: !1941)
!2027 = !DILocation(line: 791, column: 51, scope: !2021, inlinedAt: !1941)
!2028 = !DILocation(line: 791, column: 45, scope: !2021, inlinedAt: !1941)
!2029 = !DILocation(line: 792, column: 8, scope: !2021, inlinedAt: !1941)
!2030 = !DILocation(line: 792, column: 33, scope: !2021, inlinedAt: !1941)
!2031 = !DILocation(line: 792, column: 27, scope: !2021, inlinedAt: !1941)
!2032 = !DILocation(line: 793, column: 8, scope: !2021, inlinedAt: !1941)
!2033 = !DILocation(line: 793, column: 25, scope: !2021, inlinedAt: !1941)
!2034 = !DILocation(line: 794, column: 8, scope: !2021, inlinedAt: !1941)
!2035 = !DILocation(line: 794, column: 25, scope: !2021, inlinedAt: !1941)
!2036 = !DILocation(line: 795, column: 18, scope: !2021, inlinedAt: !1941)
!2037 = !DILocation(line: 795, column: 12, scope: !2021, inlinedAt: !1941)
!2038 = !DILocation(line: 797, column: 7, scope: !2018, inlinedAt: !1941)
!2039 = !DILocation(line: 797, column: 12, scope: !2018, inlinedAt: !1941)
!2040 = !DILocation(line: 797, column: 30, scope: !2018, inlinedAt: !1941)
!2041 = !DILocation(line: 799, column: 8, scope: !2042, inlinedAt: !1941)
!2042 = distinct !DILexicalBlock(scope: !2018, file: !2, line: 799, column: 4)
!2043 = !DILocalVariable(name: "new_value", scope: !2044, file: !2, line: 801, type: !67, align: 8)
!2044 = distinct !DILexicalBlock(scope: !2042, file: !2, line: 800, column: 4)
!2045 = !DILocation(line: 801, column: 11, scope: !2044, inlinedAt: !1941)
!2046 = !DILocation(line: 801, column: 23, scope: !2044, inlinedAt: !1941)
!2047 = !DILocation(line: 801, column: 31, scope: !2044, inlinedAt: !1941)
!2048 = !DILocation(line: 801, column: 43, scope: !2044, inlinedAt: !1941)
!2049 = !DILocation(line: 802, column: 9, scope: !2044, inlinedAt: !1941)
!2050 = !DILocation(line: 802, column: 21, scope: !2044, inlinedAt: !1941)
!2051 = !DILocation(line: 802, column: 35, scope: !2044, inlinedAt: !1941)
!2052 = !DILocation(line: 803, column: 12, scope: !2044, inlinedAt: !1941)
!2053 = !DILocalVariable(name: "new_value", scope: !2042, file: !2, line: 805, type: !67, align: 8)
!2054 = !DILocation(line: 805, column: 10, scope: !2042, inlinedAt: !1941)
!2055 = !DILocation(line: 805, column: 22, scope: !2042, inlinedAt: !1941)
!2056 = !DILocation(line: 805, column: 30, scope: !2042, inlinedAt: !1941)
!2057 = !DILocation(line: 805, column: 42, scope: !2042, inlinedAt: !1941)
!2058 = !DILocation(line: 806, column: 8, scope: !2042, inlinedAt: !1941)
!2059 = !DILocation(line: 806, column: 20, scope: !2042, inlinedAt: !1941)
!2060 = !DILocation(line: 806, column: 34, scope: !2042, inlinedAt: !1941)
!2061 = !DILocation(line: 807, column: 11, scope: !2042, inlinedAt: !1941)
!2062 = !DILocation(line: 810, column: 9, scope: !1940, inlinedAt: !1941)
!2063 = distinct !DISubprogram(name: "to_uint", linkageName: "std.core.String.to_uint", scope: !2, file: !2, line: 821, type: !2064, scopeLine: 821, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2064 = !DISubroutineType(types: !2065)
!2065 = !{!344, !2066, !59, !18}
!2066 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "uint*", baseType: !3, size: 64, align: 64, dwarfAddressSpace: 0)
!2067 = !DILocalVariable(name: "s", arg: 1, scope: !2063, file: !2, line: 821, type: !59)
!2068 = !DILocation(line: 821, column: 25, scope: !2063)
!2069 = !DILocalVariable(name: "base", arg: 2, scope: !2063, file: !2, line: 821, type: !18)
!2070 = !DILocation(line: 821, column: 32, scope: !2063)
!2071 = !DILocation(line: 740, column: 12, scope: !2072, inlinedAt: !2074)
!2072 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 743, column: 1)
!2073 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2074 = !DILocation(line: 821, column: 46, scope: !2063)
!2075 = !DILocation(line: 740, column: 26, scope: !2072, inlinedAt: !2074)
!2076 = !DILocation(line: 740, column: 39, scope: !2072, inlinedAt: !2074)
!2077 = !DILocalVariable(name: "len", scope: !2073, file: !2, line: 744, type: !66, align: 8)
!2078 = !DILocation(line: 744, column: 6, scope: !2073, inlinedAt: !2074)
!2079 = !DILocation(line: 744, column: 12, scope: !2073, inlinedAt: !2074)
!2080 = !DILocalVariable(name: "index", scope: !2073, file: !2, line: 745, type: !66, align: 8)
!2081 = !DILocation(line: 745, column: 6, scope: !2073, inlinedAt: !2074)
!2082 = !DILocation(line: 745, column: 14, scope: !2073, inlinedAt: !2074)
!2083 = !DILocalVariable(name: "ptr", scope: !2073, file: !2, line: 746, type: !63, align: 8)
!2084 = !DILocation(line: 746, column: 8, scope: !2073, inlinedAt: !2074)
!2085 = !DILocation(line: 746, column: 14, scope: !2073, inlinedAt: !2074)
!2086 = !DILocation(line: 747, column: 2, scope: !2073, inlinedAt: !2074)
!2087 = !DILocation(line: 747, column: 9, scope: !2088, inlinedAt: !2074)
!2088 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 747, column: 2)
!2089 = !DILocation(line: 747, column: 17, scope: !2088, inlinedAt: !2074)
!2090 = !DILocation(line: 747, column: 42, scope: !2088, inlinedAt: !2074)
!2091 = !DILocation(line: 747, column: 46, scope: !2088, inlinedAt: !2074)
!2092 = !DILocation(line: 16, column: 29, scope: !2093, inlinedAt: !2094)
!2093 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2094 = !DILocation(line: 747, column: 24, scope: !2088, inlinedAt: !2074)
!2095 = !DILocation(line: 16, column: 42, scope: !2093, inlinedAt: !2094)
!2096 = !DILocation(line: 747, column: 55, scope: !2088, inlinedAt: !2074)
!2097 = !DILocation(line: 748, column: 6, scope: !2073, inlinedAt: !2074)
!2098 = !DILocation(line: 748, column: 13, scope: !2073, inlinedAt: !2074)
!2099 = !DILocation(line: 748, column: 27, scope: !2073, inlinedAt: !2074)
!2100 = !DILocalVariable(name: "is_negative", scope: !2073, file: !2, line: 749, type: !145, align: 1)
!2101 = !DILocation(line: 749, column: 7, scope: !2073, inlinedAt: !2074)
!2102 = !DILocation(line: 750, column: 10, scope: !2103, inlinedAt: !2074)
!2103 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 750, column: 2)
!2104 = !DILocation(line: 750, column: 17, scope: !2103, inlinedAt: !2074)
!2105 = !DILocation(line: 753, column: 8, scope: !2106, inlinedAt: !2074)
!2106 = distinct !DILexicalBlock(scope: !2103, file: !2, line: 753, column: 4)
!2107 = !DILocation(line: 753, column: 31, scope: !2106, inlinedAt: !2074)
!2108 = !DILocation(line: 757, column: 4, scope: !2109, inlinedAt: !2074)
!2109 = distinct !DILexicalBlock(scope: !2103, file: !2, line: 757, column: 4)
!2110 = !DILocation(line: 759, column: 4, scope: !2111, inlinedAt: !2074)
!2111 = distinct !DILexicalBlock(scope: !2103, file: !2, line: 759, column: 4)
!2112 = !DILocation(line: 761, column: 6, scope: !2073, inlinedAt: !2074)
!2113 = !DILocation(line: 761, column: 13, scope: !2073, inlinedAt: !2074)
!2114 = !DILocation(line: 761, column: 27, scope: !2073, inlinedAt: !2074)
!2115 = !DILocalVariable(name: "base_used", scope: !2073, file: !2, line: 762, type: !3, align: 4)
!2116 = !DILocation(line: 762, column: 8, scope: !2073, inlinedAt: !2074)
!2117 = !DILocation(line: 762, column: 21, scope: !2073, inlinedAt: !2074)
!2118 = !DILocation(line: 763, column: 6, scope: !2073, inlinedAt: !2074)
!2119 = !DILocation(line: 763, column: 13, scope: !2073, inlinedAt: !2074)
!2120 = !DILocation(line: 763, column: 30, scope: !2073, inlinedAt: !2074)
!2121 = !DILocation(line: 765, column: 3, scope: !2122, inlinedAt: !2074)
!2122 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 764, column: 2)
!2123 = !DILocation(line: 766, column: 7, scope: !2122, inlinedAt: !2074)
!2124 = !DILocation(line: 766, column: 16, scope: !2122, inlinedAt: !2074)
!2125 = !DILocation(line: 766, column: 29, scope: !2122, inlinedAt: !2074)
!2126 = !DILocation(line: 767, column: 11, scope: !2127, inlinedAt: !2074)
!2127 = distinct !DILexicalBlock(scope: !2122, file: !2, line: 767, column: 3)
!2128 = !DILocation(line: 767, column: 18, scope: !2127, inlinedAt: !2074)
!2129 = !DILocation(line: 771, column: 17, scope: !2130, inlinedAt: !2074)
!2130 = distinct !DILexicalBlock(scope: !2127, file: !2, line: 771, column: 5)
!2131 = !DILocation(line: 772, column: 5, scope: !2130, inlinedAt: !2074)
!2132 = !DILocation(line: 775, column: 17, scope: !2133, inlinedAt: !2074)
!2133 = distinct !DILexicalBlock(scope: !2127, file: !2, line: 775, column: 5)
!2134 = !DILocation(line: 776, column: 5, scope: !2133, inlinedAt: !2074)
!2135 = !DILocation(line: 779, column: 17, scope: !2136, inlinedAt: !2074)
!2136 = distinct !DILexicalBlock(scope: !2127, file: !2, line: 779, column: 5)
!2137 = !DILocation(line: 780, column: 5, scope: !2136, inlinedAt: !2074)
!2138 = !DILocation(line: 782, column: 5, scope: !2139, inlinedAt: !2074)
!2139 = distinct !DILexicalBlock(scope: !2127, file: !2, line: 782, column: 5)
!2140 = !DILocation(line: 784, column: 7, scope: !2122, inlinedAt: !2074)
!2141 = !DILocation(line: 784, column: 14, scope: !2122, inlinedAt: !2074)
!2142 = !DILocation(line: 784, column: 28, scope: !2122, inlinedAt: !2074)
!2143 = !DILocalVariable(name: "value", scope: !2073, file: !2, line: 786, type: !3, align: 4)
!2144 = !DILocation(line: 786, column: 8, scope: !2073, inlinedAt: !2074)
!2145 = !DILocation(line: 786, column: 16, scope: !2073, inlinedAt: !2074)
!2146 = !DILocation(line: 787, column: 2, scope: !2073, inlinedAt: !2074)
!2147 = !DILocation(line: 787, column: 9, scope: !2148, inlinedAt: !2074)
!2148 = distinct !DILexicalBlock(scope: !2073, file: !2, line: 787, column: 2)
!2149 = !DILocation(line: 787, column: 18, scope: !2148, inlinedAt: !2074)
!2150 = !DILocalVariable(name: "c", scope: !2151, file: !2, line: 789, type: !64, align: 1)
!2151 = distinct !DILexicalBlock(scope: !2148, file: !2, line: 788, column: 2)
!2152 = !DILocation(line: 789, column: 8, scope: !2151, inlinedAt: !2074)
!2153 = !DILocalVariable(name: "ch", scope: !2154, file: !2, line: 790, type: !64, align: 1)
!2154 = distinct !DILexicalBlock(scope: !2151, file: !2, line: 790, column: 4)
!2155 = !DILocation(line: 790, column: 9, scope: !2154, inlinedAt: !2074)
!2156 = !DILocation(line: 790, column: 14, scope: !2154, inlinedAt: !2074)
!2157 = !DILocation(line: 790, column: 21, scope: !2154, inlinedAt: !2074)
!2158 = !DILocation(line: 791, column: 8, scope: !2154, inlinedAt: !2074)
!2159 = !DILocation(line: 791, column: 27, scope: !2154, inlinedAt: !2074)
!2160 = !DILocation(line: 791, column: 51, scope: !2154, inlinedAt: !2074)
!2161 = !DILocation(line: 791, column: 45, scope: !2154, inlinedAt: !2074)
!2162 = !DILocation(line: 792, column: 8, scope: !2154, inlinedAt: !2074)
!2163 = !DILocation(line: 792, column: 33, scope: !2154, inlinedAt: !2074)
!2164 = !DILocation(line: 792, column: 27, scope: !2154, inlinedAt: !2074)
!2165 = !DILocation(line: 793, column: 8, scope: !2154, inlinedAt: !2074)
!2166 = !DILocation(line: 793, column: 25, scope: !2154, inlinedAt: !2074)
!2167 = !DILocation(line: 794, column: 8, scope: !2154, inlinedAt: !2074)
!2168 = !DILocation(line: 794, column: 25, scope: !2154, inlinedAt: !2074)
!2169 = !DILocation(line: 795, column: 18, scope: !2154, inlinedAt: !2074)
!2170 = !DILocation(line: 795, column: 12, scope: !2154, inlinedAt: !2074)
!2171 = !DILocation(line: 797, column: 7, scope: !2151, inlinedAt: !2074)
!2172 = !DILocation(line: 797, column: 12, scope: !2151, inlinedAt: !2074)
!2173 = !DILocation(line: 797, column: 30, scope: !2151, inlinedAt: !2074)
!2174 = !DILocation(line: 799, column: 8, scope: !2175, inlinedAt: !2074)
!2175 = distinct !DILexicalBlock(scope: !2151, file: !2, line: 799, column: 4)
!2176 = !DILocalVariable(name: "new_value", scope: !2177, file: !2, line: 801, type: !3, align: 4)
!2177 = distinct !DILexicalBlock(scope: !2175, file: !2, line: 800, column: 4)
!2178 = !DILocation(line: 801, column: 11, scope: !2177, inlinedAt: !2074)
!2179 = !DILocation(line: 801, column: 23, scope: !2177, inlinedAt: !2074)
!2180 = !DILocation(line: 801, column: 31, scope: !2177, inlinedAt: !2074)
!2181 = !DILocation(line: 801, column: 43, scope: !2177, inlinedAt: !2074)
!2182 = !DILocation(line: 802, column: 9, scope: !2177, inlinedAt: !2074)
!2183 = !DILocation(line: 802, column: 21, scope: !2177, inlinedAt: !2074)
!2184 = !DILocation(line: 802, column: 35, scope: !2177, inlinedAt: !2074)
!2185 = !DILocation(line: 803, column: 12, scope: !2177, inlinedAt: !2074)
!2186 = !DILocalVariable(name: "new_value", scope: !2175, file: !2, line: 805, type: !3, align: 4)
!2187 = !DILocation(line: 805, column: 10, scope: !2175, inlinedAt: !2074)
!2188 = !DILocation(line: 805, column: 22, scope: !2175, inlinedAt: !2074)
!2189 = !DILocation(line: 805, column: 30, scope: !2175, inlinedAt: !2074)
!2190 = !DILocation(line: 805, column: 42, scope: !2175, inlinedAt: !2074)
!2191 = !DILocation(line: 806, column: 8, scope: !2175, inlinedAt: !2074)
!2192 = !DILocation(line: 806, column: 20, scope: !2175, inlinedAt: !2074)
!2193 = !DILocation(line: 806, column: 34, scope: !2175, inlinedAt: !2074)
!2194 = !DILocation(line: 807, column: 11, scope: !2175, inlinedAt: !2074)
!2195 = !DILocation(line: 810, column: 9, scope: !2073, inlinedAt: !2074)
!2196 = distinct !DISubprogram(name: "to_ushort", linkageName: "std.core.String.to_ushort", scope: !2, file: !2, line: 822, type: !2197, scopeLine: 822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2197 = !DISubroutineType(types: !2198)
!2198 = !{!344, !944, !59, !18}
!2199 = !DILocalVariable(name: "s", arg: 1, scope: !2196, file: !2, line: 822, type: !59)
!2200 = !DILocation(line: 822, column: 29, scope: !2196)
!2201 = !DILocalVariable(name: "base", arg: 2, scope: !2196, file: !2, line: 822, type: !18)
!2202 = !DILocation(line: 822, column: 36, scope: !2196)
!2203 = !DILocation(line: 740, column: 12, scope: !2204, inlinedAt: !2206)
!2204 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 743, column: 1)
!2205 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2206 = !DILocation(line: 822, column: 50, scope: !2196)
!2207 = !DILocation(line: 740, column: 26, scope: !2204, inlinedAt: !2206)
!2208 = !DILocation(line: 740, column: 39, scope: !2204, inlinedAt: !2206)
!2209 = !DILocalVariable(name: "len", scope: !2205, file: !2, line: 744, type: !66, align: 8)
!2210 = !DILocation(line: 744, column: 6, scope: !2205, inlinedAt: !2206)
!2211 = !DILocation(line: 744, column: 12, scope: !2205, inlinedAt: !2206)
!2212 = !DILocalVariable(name: "index", scope: !2205, file: !2, line: 745, type: !66, align: 8)
!2213 = !DILocation(line: 745, column: 6, scope: !2205, inlinedAt: !2206)
!2214 = !DILocation(line: 745, column: 14, scope: !2205, inlinedAt: !2206)
!2215 = !DILocalVariable(name: "ptr", scope: !2205, file: !2, line: 746, type: !63, align: 8)
!2216 = !DILocation(line: 746, column: 8, scope: !2205, inlinedAt: !2206)
!2217 = !DILocation(line: 746, column: 14, scope: !2205, inlinedAt: !2206)
!2218 = !DILocation(line: 747, column: 2, scope: !2205, inlinedAt: !2206)
!2219 = !DILocation(line: 747, column: 9, scope: !2220, inlinedAt: !2206)
!2220 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 747, column: 2)
!2221 = !DILocation(line: 747, column: 17, scope: !2220, inlinedAt: !2206)
!2222 = !DILocation(line: 747, column: 42, scope: !2220, inlinedAt: !2206)
!2223 = !DILocation(line: 747, column: 46, scope: !2220, inlinedAt: !2206)
!2224 = !DILocation(line: 16, column: 29, scope: !2225, inlinedAt: !2226)
!2225 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2226 = !DILocation(line: 747, column: 24, scope: !2220, inlinedAt: !2206)
!2227 = !DILocation(line: 16, column: 42, scope: !2225, inlinedAt: !2226)
!2228 = !DILocation(line: 747, column: 55, scope: !2220, inlinedAt: !2206)
!2229 = !DILocation(line: 748, column: 6, scope: !2205, inlinedAt: !2206)
!2230 = !DILocation(line: 748, column: 13, scope: !2205, inlinedAt: !2206)
!2231 = !DILocation(line: 748, column: 27, scope: !2205, inlinedAt: !2206)
!2232 = !DILocalVariable(name: "is_negative", scope: !2205, file: !2, line: 749, type: !145, align: 1)
!2233 = !DILocation(line: 749, column: 7, scope: !2205, inlinedAt: !2206)
!2234 = !DILocation(line: 750, column: 10, scope: !2235, inlinedAt: !2206)
!2235 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 750, column: 2)
!2236 = !DILocation(line: 750, column: 17, scope: !2235, inlinedAt: !2206)
!2237 = !DILocation(line: 753, column: 8, scope: !2238, inlinedAt: !2206)
!2238 = distinct !DILexicalBlock(scope: !2235, file: !2, line: 753, column: 4)
!2239 = !DILocation(line: 753, column: 31, scope: !2238, inlinedAt: !2206)
!2240 = !DILocation(line: 757, column: 4, scope: !2241, inlinedAt: !2206)
!2241 = distinct !DILexicalBlock(scope: !2235, file: !2, line: 757, column: 4)
!2242 = !DILocation(line: 759, column: 4, scope: !2243, inlinedAt: !2206)
!2243 = distinct !DILexicalBlock(scope: !2235, file: !2, line: 759, column: 4)
!2244 = !DILocation(line: 761, column: 6, scope: !2205, inlinedAt: !2206)
!2245 = !DILocation(line: 761, column: 13, scope: !2205, inlinedAt: !2206)
!2246 = !DILocation(line: 761, column: 27, scope: !2205, inlinedAt: !2206)
!2247 = !DILocalVariable(name: "base_used", scope: !2205, file: !2, line: 762, type: !895, align: 2)
!2248 = !DILocation(line: 762, column: 8, scope: !2205, inlinedAt: !2206)
!2249 = !DILocation(line: 762, column: 21, scope: !2205, inlinedAt: !2206)
!2250 = !DILocation(line: 763, column: 6, scope: !2205, inlinedAt: !2206)
!2251 = !DILocation(line: 763, column: 13, scope: !2205, inlinedAt: !2206)
!2252 = !DILocation(line: 763, column: 30, scope: !2205, inlinedAt: !2206)
!2253 = !DILocation(line: 765, column: 3, scope: !2254, inlinedAt: !2206)
!2254 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 764, column: 2)
!2255 = !DILocation(line: 766, column: 7, scope: !2254, inlinedAt: !2206)
!2256 = !DILocation(line: 766, column: 16, scope: !2254, inlinedAt: !2206)
!2257 = !DILocation(line: 766, column: 29, scope: !2254, inlinedAt: !2206)
!2258 = !DILocation(line: 767, column: 11, scope: !2259, inlinedAt: !2206)
!2259 = distinct !DILexicalBlock(scope: !2254, file: !2, line: 767, column: 3)
!2260 = !DILocation(line: 767, column: 18, scope: !2259, inlinedAt: !2206)
!2261 = !DILocation(line: 771, column: 17, scope: !2262, inlinedAt: !2206)
!2262 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 771, column: 5)
!2263 = !DILocation(line: 772, column: 5, scope: !2262, inlinedAt: !2206)
!2264 = !DILocation(line: 775, column: 17, scope: !2265, inlinedAt: !2206)
!2265 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 775, column: 5)
!2266 = !DILocation(line: 776, column: 5, scope: !2265, inlinedAt: !2206)
!2267 = !DILocation(line: 779, column: 17, scope: !2268, inlinedAt: !2206)
!2268 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 779, column: 5)
!2269 = !DILocation(line: 780, column: 5, scope: !2268, inlinedAt: !2206)
!2270 = !DILocation(line: 782, column: 5, scope: !2271, inlinedAt: !2206)
!2271 = distinct !DILexicalBlock(scope: !2259, file: !2, line: 782, column: 5)
!2272 = !DILocation(line: 784, column: 7, scope: !2254, inlinedAt: !2206)
!2273 = !DILocation(line: 784, column: 14, scope: !2254, inlinedAt: !2206)
!2274 = !DILocation(line: 784, column: 28, scope: !2254, inlinedAt: !2206)
!2275 = !DILocalVariable(name: "value", scope: !2205, file: !2, line: 786, type: !895, align: 2)
!2276 = !DILocation(line: 786, column: 8, scope: !2205, inlinedAt: !2206)
!2277 = !DILocation(line: 786, column: 16, scope: !2205, inlinedAt: !2206)
!2278 = !DILocation(line: 787, column: 2, scope: !2205, inlinedAt: !2206)
!2279 = !DILocation(line: 787, column: 9, scope: !2280, inlinedAt: !2206)
!2280 = distinct !DILexicalBlock(scope: !2205, file: !2, line: 787, column: 2)
!2281 = !DILocation(line: 787, column: 18, scope: !2280, inlinedAt: !2206)
!2282 = !DILocalVariable(name: "c", scope: !2283, file: !2, line: 789, type: !64, align: 1)
!2283 = distinct !DILexicalBlock(scope: !2280, file: !2, line: 788, column: 2)
!2284 = !DILocation(line: 789, column: 8, scope: !2283, inlinedAt: !2206)
!2285 = !DILocalVariable(name: "ch", scope: !2286, file: !2, line: 790, type: !64, align: 1)
!2286 = distinct !DILexicalBlock(scope: !2283, file: !2, line: 790, column: 4)
!2287 = !DILocation(line: 790, column: 9, scope: !2286, inlinedAt: !2206)
!2288 = !DILocation(line: 790, column: 14, scope: !2286, inlinedAt: !2206)
!2289 = !DILocation(line: 790, column: 21, scope: !2286, inlinedAt: !2206)
!2290 = !DILocation(line: 791, column: 8, scope: !2286, inlinedAt: !2206)
!2291 = !DILocation(line: 791, column: 27, scope: !2286, inlinedAt: !2206)
!2292 = !DILocation(line: 791, column: 51, scope: !2286, inlinedAt: !2206)
!2293 = !DILocation(line: 791, column: 45, scope: !2286, inlinedAt: !2206)
!2294 = !DILocation(line: 792, column: 8, scope: !2286, inlinedAt: !2206)
!2295 = !DILocation(line: 792, column: 33, scope: !2286, inlinedAt: !2206)
!2296 = !DILocation(line: 792, column: 27, scope: !2286, inlinedAt: !2206)
!2297 = !DILocation(line: 793, column: 8, scope: !2286, inlinedAt: !2206)
!2298 = !DILocation(line: 793, column: 25, scope: !2286, inlinedAt: !2206)
!2299 = !DILocation(line: 794, column: 8, scope: !2286, inlinedAt: !2206)
!2300 = !DILocation(line: 794, column: 25, scope: !2286, inlinedAt: !2206)
!2301 = !DILocation(line: 795, column: 18, scope: !2286, inlinedAt: !2206)
!2302 = !DILocation(line: 795, column: 12, scope: !2286, inlinedAt: !2206)
!2303 = !DILocation(line: 797, column: 7, scope: !2283, inlinedAt: !2206)
!2304 = !DILocation(line: 797, column: 12, scope: !2283, inlinedAt: !2206)
!2305 = !DILocation(line: 797, column: 30, scope: !2283, inlinedAt: !2206)
!2306 = !DILocation(line: 799, column: 8, scope: !2307, inlinedAt: !2206)
!2307 = distinct !DILexicalBlock(scope: !2283, file: !2, line: 799, column: 4)
!2308 = !DILocalVariable(name: "new_value", scope: !2309, file: !2, line: 801, type: !895, align: 2)
!2309 = distinct !DILexicalBlock(scope: !2307, file: !2, line: 800, column: 4)
!2310 = !DILocation(line: 801, column: 11, scope: !2309, inlinedAt: !2206)
!2311 = !DILocation(line: 801, column: 23, scope: !2309, inlinedAt: !2206)
!2312 = !DILocation(line: 801, column: 31, scope: !2309, inlinedAt: !2206)
!2313 = !DILocation(line: 801, column: 43, scope: !2309, inlinedAt: !2206)
!2314 = !DILocation(line: 802, column: 9, scope: !2309, inlinedAt: !2206)
!2315 = !DILocation(line: 802, column: 21, scope: !2309, inlinedAt: !2206)
!2316 = !DILocation(line: 802, column: 35, scope: !2309, inlinedAt: !2206)
!2317 = !DILocation(line: 803, column: 12, scope: !2309, inlinedAt: !2206)
!2318 = !DILocalVariable(name: "new_value", scope: !2307, file: !2, line: 805, type: !895, align: 2)
!2319 = !DILocation(line: 805, column: 10, scope: !2307, inlinedAt: !2206)
!2320 = !DILocation(line: 805, column: 22, scope: !2307, inlinedAt: !2206)
!2321 = !DILocation(line: 805, column: 30, scope: !2307, inlinedAt: !2206)
!2322 = !DILocation(line: 805, column: 42, scope: !2307, inlinedAt: !2206)
!2323 = !DILocation(line: 806, column: 8, scope: !2307, inlinedAt: !2206)
!2324 = !DILocation(line: 806, column: 20, scope: !2307, inlinedAt: !2206)
!2325 = !DILocation(line: 806, column: 34, scope: !2307, inlinedAt: !2206)
!2326 = !DILocation(line: 807, column: 11, scope: !2307, inlinedAt: !2206)
!2327 = !DILocation(line: 810, column: 9, scope: !2205, inlinedAt: !2206)
!2328 = distinct !DISubprogram(name: "to_uchar", linkageName: "std.core.String.to_uchar", scope: !2, file: !2, line: 823, type: !2329, scopeLine: 823, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2329 = !DISubroutineType(types: !2330)
!2330 = !{!344, !63, !59, !18}
!2331 = !DILocalVariable(name: "s", arg: 1, scope: !2328, file: !2, line: 823, type: !59)
!2332 = !DILocation(line: 823, column: 26, scope: !2328)
!2333 = !DILocalVariable(name: "base", arg: 2, scope: !2328, file: !2, line: 823, type: !18)
!2334 = !DILocation(line: 823, column: 33, scope: !2328)
!2335 = !DILocation(line: 740, column: 12, scope: !2336, inlinedAt: !2338)
!2336 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 743, column: 1)
!2337 = distinct !DISubprogram(name: "to_integer", linkageName: "to_integer", scope: !2, file: !2, line: 742, scopeLine: 742, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2338 = !DILocation(line: 823, column: 47, scope: !2328)
!2339 = !DILocation(line: 740, column: 26, scope: !2336, inlinedAt: !2338)
!2340 = !DILocation(line: 740, column: 39, scope: !2336, inlinedAt: !2338)
!2341 = !DILocalVariable(name: "len", scope: !2337, file: !2, line: 744, type: !66, align: 8)
!2342 = !DILocation(line: 744, column: 6, scope: !2337, inlinedAt: !2338)
!2343 = !DILocation(line: 744, column: 12, scope: !2337, inlinedAt: !2338)
!2344 = !DILocalVariable(name: "index", scope: !2337, file: !2, line: 745, type: !66, align: 8)
!2345 = !DILocation(line: 745, column: 6, scope: !2337, inlinedAt: !2338)
!2346 = !DILocation(line: 745, column: 14, scope: !2337, inlinedAt: !2338)
!2347 = !DILocalVariable(name: "ptr", scope: !2337, file: !2, line: 746, type: !63, align: 8)
!2348 = !DILocation(line: 746, column: 8, scope: !2337, inlinedAt: !2338)
!2349 = !DILocation(line: 746, column: 14, scope: !2337, inlinedAt: !2338)
!2350 = !DILocation(line: 747, column: 2, scope: !2337, inlinedAt: !2338)
!2351 = !DILocation(line: 747, column: 9, scope: !2352, inlinedAt: !2338)
!2352 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 747, column: 2)
!2353 = !DILocation(line: 747, column: 17, scope: !2352, inlinedAt: !2338)
!2354 = !DILocation(line: 747, column: 42, scope: !2352, inlinedAt: !2338)
!2355 = !DILocation(line: 747, column: 46, scope: !2352, inlinedAt: !2338)
!2356 = !DILocation(line: 16, column: 29, scope: !2357, inlinedAt: !2358)
!2357 = distinct !DISubprogram(name: "is_blank_m", linkageName: "is_blank_m", scope: !1154, file: !1154, line: 16, scopeLine: 16, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2358 = !DILocation(line: 747, column: 24, scope: !2352, inlinedAt: !2338)
!2359 = !DILocation(line: 16, column: 42, scope: !2357, inlinedAt: !2358)
!2360 = !DILocation(line: 747, column: 55, scope: !2352, inlinedAt: !2338)
!2361 = !DILocation(line: 748, column: 6, scope: !2337, inlinedAt: !2338)
!2362 = !DILocation(line: 748, column: 13, scope: !2337, inlinedAt: !2338)
!2363 = !DILocation(line: 748, column: 27, scope: !2337, inlinedAt: !2338)
!2364 = !DILocalVariable(name: "is_negative", scope: !2337, file: !2, line: 749, type: !145, align: 1)
!2365 = !DILocation(line: 749, column: 7, scope: !2337, inlinedAt: !2338)
!2366 = !DILocation(line: 750, column: 10, scope: !2367, inlinedAt: !2338)
!2367 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 750, column: 2)
!2368 = !DILocation(line: 750, column: 17, scope: !2367, inlinedAt: !2338)
!2369 = !DILocation(line: 753, column: 8, scope: !2370, inlinedAt: !2338)
!2370 = distinct !DILexicalBlock(scope: !2367, file: !2, line: 753, column: 4)
!2371 = !DILocation(line: 753, column: 31, scope: !2370, inlinedAt: !2338)
!2372 = !DILocation(line: 757, column: 4, scope: !2373, inlinedAt: !2338)
!2373 = distinct !DILexicalBlock(scope: !2367, file: !2, line: 757, column: 4)
!2374 = !DILocation(line: 759, column: 4, scope: !2375, inlinedAt: !2338)
!2375 = distinct !DILexicalBlock(scope: !2367, file: !2, line: 759, column: 4)
!2376 = !DILocation(line: 761, column: 6, scope: !2337, inlinedAt: !2338)
!2377 = !DILocation(line: 761, column: 13, scope: !2337, inlinedAt: !2338)
!2378 = !DILocation(line: 761, column: 27, scope: !2337, inlinedAt: !2338)
!2379 = !DILocalVariable(name: "base_used", scope: !2337, file: !2, line: 762, type: !64, align: 1)
!2380 = !DILocation(line: 762, column: 8, scope: !2337, inlinedAt: !2338)
!2381 = !DILocation(line: 762, column: 21, scope: !2337, inlinedAt: !2338)
!2382 = !DILocation(line: 763, column: 6, scope: !2337, inlinedAt: !2338)
!2383 = !DILocation(line: 763, column: 13, scope: !2337, inlinedAt: !2338)
!2384 = !DILocation(line: 763, column: 30, scope: !2337, inlinedAt: !2338)
!2385 = !DILocation(line: 765, column: 3, scope: !2386, inlinedAt: !2338)
!2386 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 764, column: 2)
!2387 = !DILocation(line: 766, column: 7, scope: !2386, inlinedAt: !2338)
!2388 = !DILocation(line: 766, column: 16, scope: !2386, inlinedAt: !2338)
!2389 = !DILocation(line: 766, column: 29, scope: !2386, inlinedAt: !2338)
!2390 = !DILocation(line: 767, column: 11, scope: !2391, inlinedAt: !2338)
!2391 = distinct !DILexicalBlock(scope: !2386, file: !2, line: 767, column: 3)
!2392 = !DILocation(line: 767, column: 18, scope: !2391, inlinedAt: !2338)
!2393 = !DILocation(line: 771, column: 17, scope: !2394, inlinedAt: !2338)
!2394 = distinct !DILexicalBlock(scope: !2391, file: !2, line: 771, column: 5)
!2395 = !DILocation(line: 772, column: 5, scope: !2394, inlinedAt: !2338)
!2396 = !DILocation(line: 775, column: 17, scope: !2397, inlinedAt: !2338)
!2397 = distinct !DILexicalBlock(scope: !2391, file: !2, line: 775, column: 5)
!2398 = !DILocation(line: 776, column: 5, scope: !2397, inlinedAt: !2338)
!2399 = !DILocation(line: 779, column: 17, scope: !2400, inlinedAt: !2338)
!2400 = distinct !DILexicalBlock(scope: !2391, file: !2, line: 779, column: 5)
!2401 = !DILocation(line: 780, column: 5, scope: !2400, inlinedAt: !2338)
!2402 = !DILocation(line: 782, column: 5, scope: !2403, inlinedAt: !2338)
!2403 = distinct !DILexicalBlock(scope: !2391, file: !2, line: 782, column: 5)
!2404 = !DILocation(line: 784, column: 7, scope: !2386, inlinedAt: !2338)
!2405 = !DILocation(line: 784, column: 14, scope: !2386, inlinedAt: !2338)
!2406 = !DILocation(line: 784, column: 28, scope: !2386, inlinedAt: !2338)
!2407 = !DILocalVariable(name: "value", scope: !2337, file: !2, line: 786, type: !64, align: 1)
!2408 = !DILocation(line: 786, column: 8, scope: !2337, inlinedAt: !2338)
!2409 = !DILocation(line: 786, column: 16, scope: !2337, inlinedAt: !2338)
!2410 = !DILocation(line: 787, column: 2, scope: !2337, inlinedAt: !2338)
!2411 = !DILocation(line: 787, column: 9, scope: !2412, inlinedAt: !2338)
!2412 = distinct !DILexicalBlock(scope: !2337, file: !2, line: 787, column: 2)
!2413 = !DILocation(line: 787, column: 18, scope: !2412, inlinedAt: !2338)
!2414 = !DILocalVariable(name: "c", scope: !2415, file: !2, line: 789, type: !64, align: 1)
!2415 = distinct !DILexicalBlock(scope: !2412, file: !2, line: 788, column: 2)
!2416 = !DILocation(line: 789, column: 8, scope: !2415, inlinedAt: !2338)
!2417 = !DILocalVariable(name: "ch", scope: !2418, file: !2, line: 790, type: !64, align: 1)
!2418 = distinct !DILexicalBlock(scope: !2415, file: !2, line: 790, column: 4)
!2419 = !DILocation(line: 790, column: 9, scope: !2418, inlinedAt: !2338)
!2420 = !DILocation(line: 790, column: 14, scope: !2418, inlinedAt: !2338)
!2421 = !DILocation(line: 790, column: 21, scope: !2418, inlinedAt: !2338)
!2422 = !DILocation(line: 791, column: 8, scope: !2418, inlinedAt: !2338)
!2423 = !DILocation(line: 791, column: 27, scope: !2418, inlinedAt: !2338)
!2424 = !DILocation(line: 791, column: 51, scope: !2418, inlinedAt: !2338)
!2425 = !DILocation(line: 791, column: 45, scope: !2418, inlinedAt: !2338)
!2426 = !DILocation(line: 792, column: 8, scope: !2418, inlinedAt: !2338)
!2427 = !DILocation(line: 792, column: 33, scope: !2418, inlinedAt: !2338)
!2428 = !DILocation(line: 792, column: 27, scope: !2418, inlinedAt: !2338)
!2429 = !DILocation(line: 793, column: 8, scope: !2418, inlinedAt: !2338)
!2430 = !DILocation(line: 793, column: 25, scope: !2418, inlinedAt: !2338)
!2431 = !DILocation(line: 794, column: 8, scope: !2418, inlinedAt: !2338)
!2432 = !DILocation(line: 794, column: 25, scope: !2418, inlinedAt: !2338)
!2433 = !DILocation(line: 795, column: 18, scope: !2418, inlinedAt: !2338)
!2434 = !DILocation(line: 795, column: 12, scope: !2418, inlinedAt: !2338)
!2435 = !DILocation(line: 797, column: 7, scope: !2415, inlinedAt: !2338)
!2436 = !DILocation(line: 797, column: 12, scope: !2415, inlinedAt: !2338)
!2437 = !DILocation(line: 797, column: 30, scope: !2415, inlinedAt: !2338)
!2438 = !DILocation(line: 799, column: 8, scope: !2439, inlinedAt: !2338)
!2439 = distinct !DILexicalBlock(scope: !2415, file: !2, line: 799, column: 4)
!2440 = !DILocalVariable(name: "new_value", scope: !2441, file: !2, line: 801, type: !64, align: 1)
!2441 = distinct !DILexicalBlock(scope: !2439, file: !2, line: 800, column: 4)
!2442 = !DILocation(line: 801, column: 11, scope: !2441, inlinedAt: !2338)
!2443 = !DILocation(line: 801, column: 23, scope: !2441, inlinedAt: !2338)
!2444 = !DILocation(line: 801, column: 31, scope: !2441, inlinedAt: !2338)
!2445 = !DILocation(line: 801, column: 43, scope: !2441, inlinedAt: !2338)
!2446 = !DILocation(line: 802, column: 9, scope: !2441, inlinedAt: !2338)
!2447 = !DILocation(line: 802, column: 21, scope: !2441, inlinedAt: !2338)
!2448 = !DILocation(line: 802, column: 35, scope: !2441, inlinedAt: !2338)
!2449 = !DILocation(line: 803, column: 12, scope: !2441, inlinedAt: !2338)
!2450 = !DILocalVariable(name: "new_value", scope: !2439, file: !2, line: 805, type: !64, align: 1)
!2451 = !DILocation(line: 805, column: 10, scope: !2439, inlinedAt: !2338)
!2452 = !DILocation(line: 805, column: 22, scope: !2439, inlinedAt: !2338)
!2453 = !DILocation(line: 805, column: 30, scope: !2439, inlinedAt: !2338)
!2454 = !DILocation(line: 805, column: 42, scope: !2439, inlinedAt: !2338)
!2455 = !DILocation(line: 806, column: 8, scope: !2439, inlinedAt: !2338)
!2456 = !DILocation(line: 806, column: 20, scope: !2439, inlinedAt: !2338)
!2457 = !DILocation(line: 806, column: 34, scope: !2439, inlinedAt: !2338)
!2458 = !DILocation(line: 807, column: 11, scope: !2439, inlinedAt: !2338)
!2459 = !DILocation(line: 810, column: 9, scope: !2337, inlinedAt: !2338)
!2460 = distinct !DISubprogram(name: "to_double", linkageName: "std.core.String.to_double", scope: !2, file: !2, line: 825, type: !2461, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2461 = !DISubroutineType(types: !2462)
!2462 = !{!344, !2463, !59}
!2463 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "double*", baseType: !2464, size: 64, align: 64, dwarfAddressSpace: 0)
!2464 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2465 = !DILocalVariable(name: "s", arg: 1, scope: !2460, file: !2, line: 825, type: !59)
!2466 = !DILocation(line: 825, column: 29, scope: !2460)
!2467 = !DILocalVariable(name: "sign", scope: !2468, file: !2, line: 454, type: !18, align: 4)
!2468 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2469 = !DILocation(line: 454, column: 6, scope: !2468, inlinedAt: !2470)
!2470 = !DILocation(line: 825, column: 35, scope: !2460)
!2471 = !DILocation(line: 454, column: 13, scope: !2468, inlinedAt: !2470)
!2472 = !DILocation(line: 468, column: 2, scope: !2468, inlinedAt: !2470)
!2473 = !DILocation(line: 468, column: 9, scope: !2474, inlinedAt: !2470)
!2474 = distinct !DILexicalBlock(scope: !2468, file: !41, line: 468, column: 2)
!2475 = !DILocation(line: 468, column: 22, scope: !2474, inlinedAt: !2470)
!2476 = !DILocation(line: 468, column: 28, scope: !2474, inlinedAt: !2470)
!2477 = !DILocation(line: 468, column: 47, scope: !2474, inlinedAt: !2470)
!2478 = !DILocation(line: 468, column: 53, scope: !2474, inlinedAt: !2470)
!2479 = !DILocation(line: 469, column: 6, scope: !2468, inlinedAt: !2470)
!2480 = !DILocation(line: 469, column: 25, scope: !2468, inlinedAt: !2470)
!2481 = !DILocation(line: 470, column: 10, scope: !2482, inlinedAt: !2470)
!2482 = distinct !DILexicalBlock(scope: !2468, file: !41, line: 470, column: 2)
!2483 = !DILocation(line: 470, column: 16, scope: !2482, inlinedAt: !2470)
!2484 = !DILocation(line: 473, column: 11, scope: !2485, inlinedAt: !2470)
!2485 = distinct !DILexicalBlock(scope: !2482, file: !41, line: 473, column: 4)
!2486 = !DILocation(line: 474, column: 4, scope: !2485, inlinedAt: !2470)
!2487 = !DILocation(line: 476, column: 12, scope: !2488, inlinedAt: !2470)
!2488 = distinct !DILexicalBlock(scope: !2482, file: !41, line: 476, column: 4)
!2489 = !DILocation(line: 476, column: 18, scope: !2488, inlinedAt: !2470)
!2490 = !DILocation(line: 478, column: 6, scope: !2468, inlinedAt: !2470)
!2491 = !DILocation(line: 478, column: 29, scope: !2468, inlinedAt: !2470)
!2492 = !DILocation(line: 478, column: 57, scope: !2468, inlinedAt: !2470)
!2493 = !DILocation(line: 479, column: 6, scope: !2468, inlinedAt: !2470)
!2494 = !DILocation(line: 479, column: 24, scope: !2468, inlinedAt: !2470)
!2495 = !DILocation(line: 479, column: 47, scope: !2468, inlinedAt: !2470)
!2496 = !DILocation(line: 481, column: 6, scope: !2468, inlinedAt: !2470)
!2497 = !DILocation(line: 481, column: 23, scope: !2468, inlinedAt: !2470)
!2498 = !DILocation(line: 481, column: 29, scope: !2468, inlinedAt: !2470)
!2499 = !DILocation(line: 481, column: 43, scope: !2468, inlinedAt: !2470)
!2500 = !DILocation(line: 481, column: 49, scope: !2468, inlinedAt: !2470)
!2501 = !DILocation(line: 483, column: 34, scope: !2502, inlinedAt: !2470)
!2502 = distinct !DILexicalBlock(scope: !2468, file: !41, line: 482, column: 2)
!2503 = !DILocation(line: 483, column: 40, scope: !2502, inlinedAt: !2470)
!2504 = !DILocation(line: 483, column: 27, scope: !2502, inlinedAt: !2470)
!2505 = !DILocalVariable(name: "scale", scope: !2506, file: !2, line: 330, type: !2464, align: 8)
!2506 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2507 = !DILocation(line: 330, column: 9, scope: !2506, inlinedAt: !2508)
!2508 = !DILocation(line: 483, column: 11, scope: !2502, inlinedAt: !2470)
!2509 = !DILocation(line: 330, column: 17, scope: !2506, inlinedAt: !2508)
!2510 = !DILocalVariable(name: "x", scope: !2506, file: !2, line: 331, type: !3, align: 4)
!2511 = !DILocation(line: 331, column: 7, scope: !2506, inlinedAt: !2508)
!2512 = !DILocalVariable(name: "rp", scope: !2506, file: !2, line: 332, type: !345, align: 8)
!2513 = !DILocation(line: 332, column: 7, scope: !2506, inlinedAt: !2508)
!2514 = !DILocalVariable(name: "dc", scope: !2506, file: !2, line: 333, type: !345, align: 8)
!2515 = !DILocation(line: 333, column: 7, scope: !2506, inlinedAt: !2508)
!2516 = !DILocalVariable(name: "c", scope: !2506, file: !2, line: 334, type: !64, align: 1)
!2517 = !DILocation(line: 334, column: 7, scope: !2506, inlinedAt: !2508)
!2518 = !DILocalVariable(name: "got_rad", scope: !2506, file: !2, line: 335, type: !145, align: 1)
!2519 = !DILocation(line: 335, column: 7, scope: !2506, inlinedAt: !2508)
!2520 = !DILocalVariable(name: "got_digit", scope: !2506, file: !2, line: 336, type: !145, align: 1)
!2521 = !DILocation(line: 336, column: 7, scope: !2506, inlinedAt: !2508)
!2522 = !DILocalVariable(name: "got_tail", scope: !2506, file: !2, line: 337, type: !145, align: 1)
!2523 = !DILocation(line: 337, column: 7, scope: !2506, inlinedAt: !2508)
!2524 = !DILocalVariable(name: "len", scope: !2506, file: !2, line: 338, type: !66, align: 8)
!2525 = !DILocation(line: 338, column: 6, scope: !2506, inlinedAt: !2508)
!2526 = !DILocation(line: 338, column: 12, scope: !2506, inlinedAt: !2508)
!2527 = !DILocalVariable(name: "last_char", scope: !2506, file: !2, line: 339, type: !66, align: 8)
!2528 = !DILocation(line: 339, column: 6, scope: !2506, inlinedAt: !2508)
!2529 = !DILocation(line: 339, column: 18, scope: !2506, inlinedAt: !2508)
!2530 = !DILocalVariable(name: "index", scope: !2506, file: !2, line: 340, type: !66, align: 8)
!2531 = !DILocation(line: 340, column: 6, scope: !2506, inlinedAt: !2508)
!2532 = !DILocalVariable(name: "y", scope: !2506, file: !2, line: 341, type: !2464, align: 8)
!2533 = !DILocation(line: 341, column: 9, scope: !2506, inlinedAt: !2508)
!2534 = !DILocation(line: 344, column: 2, scope: !2506, inlinedAt: !2508)
!2535 = !DILocation(line: 344, column: 14, scope: !2536, inlinedAt: !2508)
!2536 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 344, column: 2)
!2537 = !DILocation(line: 344, column: 20, scope: !2536, inlinedAt: !2508)
!2538 = !DILocation(line: 344, column: 10, scope: !2536, inlinedAt: !2508)
!2539 = !DILocation(line: 346, column: 7, scope: !2540, inlinedAt: !2508)
!2540 = distinct !DILexicalBlock(scope: !2536, file: !41, line: 345, column: 2)
!2541 = !DILocation(line: 346, column: 16, scope: !2540, inlinedAt: !2508)
!2542 = !DILocation(line: 346, column: 34, scope: !2540, inlinedAt: !2508)
!2543 = !DILocation(line: 347, column: 3, scope: !2540, inlinedAt: !2508)
!2544 = !DILocation(line: 349, column: 6, scope: !2506, inlinedAt: !2508)
!2545 = !DILocation(line: 351, column: 13, scope: !2546, inlinedAt: !2508)
!2546 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 350, column: 2)
!2547 = !DILocation(line: 352, column: 7, scope: !2546, inlinedAt: !2508)
!2548 = !DILocation(line: 352, column: 16, scope: !2546, inlinedAt: !2508)
!2549 = !DILocation(line: 354, column: 9, scope: !2550, inlinedAt: !2508)
!2550 = distinct !DILexicalBlock(scope: !2546, file: !41, line: 353, column: 3)
!2551 = !DILocation(line: 354, column: 27, scope: !2550, inlinedAt: !2508)
!2552 = !DILocation(line: 355, column: 11, scope: !2550, inlinedAt: !2508)
!2553 = !DILocation(line: 357, column: 7, scope: !2546, inlinedAt: !2508)
!2554 = !DILocation(line: 357, column: 16, scope: !2546, inlinedAt: !2508)
!2555 = !DILocation(line: 357, column: 34, scope: !2546, inlinedAt: !2508)
!2556 = !DILocation(line: 357, column: 42, scope: !2546, inlinedAt: !2508)
!2557 = !DILocation(line: 357, column: 40, scope: !2546, inlinedAt: !2508)
!2558 = !DILocation(line: 357, column: 30, scope: !2546, inlinedAt: !2508)
!2559 = !DILocation(line: 359, column: 4, scope: !2560, inlinedAt: !2508)
!2560 = distinct !DILexicalBlock(scope: !2546, file: !41, line: 358, column: 3)
!2561 = !DILocation(line: 360, column: 16, scope: !2560, inlinedAt: !2508)
!2562 = !DILocation(line: 361, column: 4, scope: !2560, inlinedAt: !2508)
!2563 = !DILocation(line: 361, column: 11, scope: !2564, inlinedAt: !2508)
!2564 = distinct !DILexicalBlock(scope: !2560, file: !41, line: 361, column: 4)
!2565 = !DILocation(line: 361, column: 24, scope: !2564, inlinedAt: !2508)
!2566 = !DILocation(line: 361, column: 38, scope: !2564, inlinedAt: !2508)
!2567 = !DILocation(line: 361, column: 46, scope: !2564, inlinedAt: !2508)
!2568 = !DILocation(line: 361, column: 44, scope: !2564, inlinedAt: !2508)
!2569 = !DILocation(line: 361, column: 34, scope: !2564, inlinedAt: !2508)
!2570 = !DILocation(line: 363, column: 5, scope: !2571, inlinedAt: !2508)
!2571 = distinct !DILexicalBlock(scope: !2564, file: !41, line: 362, column: 4)
!2572 = !DILocation(line: 368, column: 2, scope: !2506, inlinedAt: !2508)
!2573 = !DILocation(line: 368, column: 10, scope: !2574, inlinedAt: !2508)
!2574 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 368, column: 2)
!2575 = !DILocation(line: 368, column: 30, scope: !2574, inlinedAt: !2508)
!2576 = !DILocation(line: 368, column: 53, scope: !2574, inlinedAt: !2508)
!2577 = !DILocation(line: 370, column: 7, scope: !2578, inlinedAt: !2508)
!2578 = distinct !DILexicalBlock(scope: !2574, file: !41, line: 369, column: 2)
!2579 = !DILocation(line: 372, column: 8, scope: !2580, inlinedAt: !2508)
!2580 = distinct !DILexicalBlock(scope: !2578, file: !41, line: 371, column: 3)
!2581 = !DILocation(line: 372, column: 24, scope: !2580, inlinedAt: !2508)
!2582 = !DILocation(line: 373, column: 14, scope: !2580, inlinedAt: !2508)
!2583 = !DILocation(line: 374, column: 9, scope: !2580, inlinedAt: !2508)
!2584 = !DILocation(line: 378, column: 16, scope: !2585, inlinedAt: !2508)
!2585 = distinct !DILexicalBlock(scope: !2578, file: !41, line: 377, column: 3)
!2586 = !DILocalVariable(name: "d", scope: !2585, file: !2, line: 379, type: !18, align: 4)
!2587 = !DILocation(line: 379, column: 8, scope: !2585, inlinedAt: !2508)
!2588 = !DILocation(line: 380, column: 9, scope: !2589, inlinedAt: !2508)
!2589 = distinct !DILexicalBlock(scope: !2585, file: !41, line: 380, column: 5)
!2590 = !DILocation(line: 380, column: 26, scope: !2589, inlinedAt: !2508)
!2591 = !DILocation(line: 381, column: 12, scope: !2589, inlinedAt: !2508)
!2592 = !DILocation(line: 385, column: 10, scope: !2593, inlinedAt: !2508)
!2593 = distinct !DILexicalBlock(scope: !2585, file: !41, line: 383, column: 4)
!2594 = !DILocation(line: 386, column: 10, scope: !2595, inlinedAt: !2508)
!2595 = distinct !DILexicalBlock(scope: !2593, file: !41, line: 386, column: 6)
!2596 = !DILocation(line: 386, column: 19, scope: !2595, inlinedAt: !2508)
!2597 = !DILocation(line: 387, column: 10, scope: !2593, inlinedAt: !2508)
!2598 = !DILocation(line: 388, column: 6, scope: !2599, inlinedAt: !2508)
!2599 = distinct !DILexicalBlock(scope: !2593, file: !41, line: 388, column: 6)
!2600 = !DILocation(line: 388, column: 11, scope: !2599, inlinedAt: !2508)
!2601 = !DILocation(line: 388, column: 16, scope: !2599, inlinedAt: !2508)
!2602 = !DILocation(line: 389, column: 17, scope: !2599, inlinedAt: !2508)
!2603 = !DILocation(line: 390, column: 10, scope: !2593, inlinedAt: !2508)
!2604 = !DILocation(line: 390, column: 16, scope: !2593, inlinedAt: !2508)
!2605 = !DILocation(line: 391, column: 6, scope: !2606, inlinedAt: !2508)
!2606 = distinct !DILexicalBlock(scope: !2593, file: !41, line: 391, column: 6)
!2607 = !DILocation(line: 391, column: 17, scope: !2606, inlinedAt: !2508)
!2608 = !DILocation(line: 391, column: 11, scope: !2606, inlinedAt: !2508)
!2609 = !DILocation(line: 392, column: 17, scope: !2606, inlinedAt: !2508)
!2610 = !DILocation(line: 394, column: 4, scope: !2585, inlinedAt: !2508)
!2611 = !DILocation(line: 396, column: 7, scope: !2578, inlinedAt: !2508)
!2612 = !DILocation(line: 396, column: 16, scope: !2578, inlinedAt: !2508)
!2613 = !DILocation(line: 396, column: 27, scope: !2578, inlinedAt: !2508)
!2614 = !DILocation(line: 397, column: 7, scope: !2578, inlinedAt: !2508)
!2615 = !DILocation(line: 397, column: 15, scope: !2578, inlinedAt: !2508)
!2616 = !DILocation(line: 397, column: 13, scope: !2578, inlinedAt: !2508)
!2617 = !DILocation(line: 399, column: 7, scope: !2506, inlinedAt: !2508)
!2618 = !DILocation(line: 399, column: 25, scope: !2506, inlinedAt: !2508)
!2619 = !DILocation(line: 400, column: 7, scope: !2506, inlinedAt: !2508)
!2620 = !DILocation(line: 400, column: 21, scope: !2506, inlinedAt: !2508)
!2621 = !DILocation(line: 401, column: 2, scope: !2506, inlinedAt: !2508)
!2622 = !DILocation(line: 401, column: 9, scope: !2623, inlinedAt: !2508)
!2623 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 401, column: 2)
!2624 = !DILocation(line: 401, column: 23, scope: !2623, inlinedAt: !2508)
!2625 = !DILocation(line: 401, column: 17, scope: !2623, inlinedAt: !2508)
!2626 = !DILocalVariable(name: "e2", scope: !2506, file: !2, line: 403, type: !345, align: 8)
!2627 = !DILocation(line: 403, column: 7, scope: !2506, inlinedAt: !2508)
!2628 = !DILocation(line: 404, column: 7, scope: !2506, inlinedAt: !2508)
!2629 = !DILocalVariable(name: "e2val", scope: !2630, file: !2, line: 406, type: !345, align: 8)
!2630 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 405, column: 2)
!2631 = !DILocation(line: 406, column: 8, scope: !2630, inlinedAt: !2508)
!2632 = !DILocation(line: 406, column: 39, scope: !2630, inlinedAt: !2508)
!2633 = !DILocation(line: 406, column: 45, scope: !2630, inlinedAt: !2508)
!2634 = !DILocation(line: 406, column: 32, scope: !2630, inlinedAt: !2508)
!2635 = !DILocation(line: 406, column: 16, scope: !2630, inlinedAt: !2508)
!2636 = !DILocation(line: 406, column: 63, scope: !2630, inlinedAt: !2508)
!2637 = !DILocation(line: 407, column: 8, scope: !2630, inlinedAt: !2508)
!2638 = !DILocation(line: 409, column: 2, scope: !2506, inlinedAt: !2508)
!2639 = !DILocation(line: 409, column: 12, scope: !2506, inlinedAt: !2508)
!2640 = !DILocation(line: 409, column: 8, scope: !2506, inlinedAt: !2508)
!2641 = !DILocation(line: 410, column: 6, scope: !2506, inlinedAt: !2508)
!2642 = !DILocation(line: 410, column: 17, scope: !2506, inlinedAt: !2508)
!2643 = !DILocation(line: 411, column: 6, scope: !2506, inlinedAt: !2508)
!2644 = !DILocation(line: 411, column: 26, scope: !2506, inlinedAt: !2508)
!2645 = !DILocation(line: 412, column: 6, scope: !2506, inlinedAt: !2508)
!2646 = !DILocation(line: 412, column: 53, scope: !2506, inlinedAt: !2508)
!2647 = !DILocation(line: 414, column: 2, scope: !2506, inlinedAt: !2508)
!2648 = !DILocation(line: 414, column: 9, scope: !2649, inlinedAt: !2508)
!2649 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 414, column: 2)
!2650 = !DILocation(line: 416, column: 7, scope: !2651, inlinedAt: !2508)
!2651 = distinct !DILexicalBlock(scope: !2649, file: !41, line: 415, column: 2)
!2652 = !DILocation(line: 418, column: 4, scope: !2653, inlinedAt: !2508)
!2653 = distinct !DILexicalBlock(scope: !2651, file: !41, line: 417, column: 3)
!2654 = !DILocation(line: 418, column: 9, scope: !2653, inlinedAt: !2508)
!2655 = !DILocation(line: 419, column: 4, scope: !2653, inlinedAt: !2508)
!2656 = !DILocation(line: 419, column: 9, scope: !2653, inlinedAt: !2508)
!2657 = !DILocation(line: 423, column: 4, scope: !2658, inlinedAt: !2508)
!2658 = distinct !DILexicalBlock(scope: !2651, file: !41, line: 422, column: 3)
!2659 = !DILocation(line: 423, column: 9, scope: !2658, inlinedAt: !2508)
!2660 = !DILocation(line: 424, column: 4, scope: !2658, inlinedAt: !2508)
!2661 = !DILocation(line: 424, column: 9, scope: !2658, inlinedAt: !2508)
!2662 = !DILocation(line: 426, column: 3, scope: !2651, inlinedAt: !2508)
!2663 = !DILocalVariable(name: "bits", scope: !2506, file: !2, line: 428, type: !18, align: 4)
!2664 = !DILocation(line: 428, column: 6, scope: !2506, inlinedAt: !2508)
!2665 = !DILocation(line: 428, column: 13, scope: !2506, inlinedAt: !2508)
!2666 = !DILocation(line: 429, column: 19, scope: !2506, inlinedAt: !2508)
!2667 = !DILocation(line: 429, column: 14, scope: !2506, inlinedAt: !2508)
!2668 = !DILocation(line: 429, column: 6, scope: !2506, inlinedAt: !2508)
!2669 = !DILocation(line: 431, column: 21, scope: !2670, inlinedAt: !2508)
!2670 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 430, column: 2)
!2671 = !DILocation(line: 431, column: 16, scope: !2670, inlinedAt: !2508)
!2672 = !DILocation(line: 431, column: 11, scope: !2670, inlinedAt: !2508)
!2673 = !DILocation(line: 432, column: 7, scope: !2670, inlinedAt: !2508)
!2674 = !DILocation(line: 432, column: 24, scope: !2670, inlinedAt: !2508)
!2675 = !DILocalVariable(name: "bias", scope: !2506, file: !2, line: 434, type: !2464, align: 8)
!2676 = !DILocation(line: 434, column: 9, scope: !2506, inlinedAt: !2508)
!2677 = !DILocation(line: 435, column: 6, scope: !2506, inlinedAt: !2508)
!2678 = !DILocation(line: 437, column: 70, scope: !2679, inlinedAt: !2508)
!2679 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 436, column: 2)
!2680 = !DILocation(line: 437, column: 41, scope: !2679, inlinedAt: !2508)
!2681 = !DILocation(line: 1061, column: 52, scope: !2682, inlinedAt: !2684)
!2682 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2683 = !DIFile(filename: "math.c3", directory: "/opt/homebrew/lib/c3/std/math")
!2684 = !DILocation(line: 437, column: 25, scope: !2679, inlinedAt: !2508)
!2685 = !DILocation(line: 1061, column: 41, scope: !2682, inlinedAt: !2684)
!2686 = !DILocation(line: 437, column: 82, scope: !2679, inlinedAt: !2508)
!2687 = !DILocation(line: 42, column: 10, scope: !2688, inlinedAt: !2690)
!2688 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2689, file: !2689, line: 30, scopeLine: 30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2689 = !DIFile(filename: "values.c3", directory: "/opt/homebrew/lib/c3/std/core")
!2690 = !DILocation(line: 310, column: 40, scope: !2691, inlinedAt: !2692)
!2691 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2683, file: !2683, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2692 = !DILocation(line: 437, column: 10, scope: !2679, inlinedAt: !2508)
!2693 = !DILocation(line: 310, column: 77, scope: !2691, inlinedAt: !2692)
!2694 = !DILocation(line: 440, column: 6, scope: !2506, inlinedAt: !2508)
!2695 = !DILocation(line: 440, column: 19, scope: !2506, inlinedAt: !2508)
!2696 = !DILocation(line: 440, column: 26, scope: !2506, inlinedAt: !2508)
!2697 = !DILocation(line: 440, column: 24, scope: !2506, inlinedAt: !2508)
!2698 = !DILocation(line: 442, column: 3, scope: !2699, inlinedAt: !2508)
!2699 = distinct !DILexicalBlock(scope: !2506, file: !41, line: 441, column: 2)
!2700 = !DILocation(line: 443, column: 7, scope: !2699, inlinedAt: !2508)
!2701 = !DILocation(line: 445, column: 6, scope: !2506, inlinedAt: !2508)
!2702 = !DILocation(line: 445, column: 13, scope: !2506, inlinedAt: !2508)
!2703 = !DILocation(line: 445, column: 21, scope: !2506, inlinedAt: !2508)
!2704 = !DILocation(line: 445, column: 32, scope: !2506, inlinedAt: !2508)
!2705 = !DILocation(line: 445, column: 39, scope: !2506, inlinedAt: !2508)
!2706 = !DILocation(line: 446, column: 2, scope: !2506, inlinedAt: !2508)
!2707 = !DILocation(line: 446, column: 7, scope: !2506, inlinedAt: !2508)
!2708 = !DILocation(line: 447, column: 7, scope: !2506, inlinedAt: !2508)
!2709 = !DILocation(line: 447, column: 17, scope: !2506, inlinedAt: !2508)
!2710 = !DILocation(line: 449, column: 26, scope: !2506, inlinedAt: !2508)
!2711 = !DILocation(line: 1061, column: 52, scope: !2712, inlinedAt: !2713)
!2712 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!2713 = !DILocation(line: 449, column: 9, scope: !2506, inlinedAt: !2508)
!2714 = !DILocation(line: 1061, column: 41, scope: !2712, inlinedAt: !2713)
!2715 = !DILocation(line: 35, column: 11, scope: !2716, inlinedAt: !2718)
!2716 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 38, column: 1)
!2717 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!2718 = !DILocation(line: 485, column: 10, scope: !2468, inlinedAt: !2470)
!2719 = !DILocalVariable(name: "x", scope: !2717, file: !2, line: 39, type: !2720, align: 4)
!2720 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3, size: 4096, align: 32, elements: !2721)
!2721 = !{!2722}
!2722 = !DISubrange(count: 128, lowerBound: 0)
!2723 = !DILocation(line: 39, column: 13, scope: !2717, inlinedAt: !2718)
!2724 = !DILocalVariable(name: "emax", scope: !2717, file: !2, line: 41, type: !18, align: 4)
!2725 = !DILocation(line: 41, column: 6, scope: !2717, inlinedAt: !2718)
!2726 = !DILocation(line: 41, column: 13, scope: !2717, inlinedAt: !2718)
!2727 = !DILocalVariable(name: "index", scope: !2717, file: !2, line: 44, type: !66, align: 8)
!2728 = !DILocation(line: 44, column: 6, scope: !2717, inlinedAt: !2718)
!2729 = !DILocalVariable(name: "got_digit", scope: !2717, file: !2, line: 45, type: !145, align: 1)
!2730 = !DILocation(line: 45, column: 7, scope: !2717, inlinedAt: !2718)
!2731 = !DILocation(line: 45, column: 19, scope: !2717, inlinedAt: !2718)
!2732 = !DILocation(line: 45, column: 25, scope: !2717, inlinedAt: !2718)
!2733 = !DILocalVariable(name: "got_rad", scope: !2717, file: !2, line: 46, type: !145, align: 1)
!2734 = !DILocation(line: 46, column: 7, scope: !2717, inlinedAt: !2718)
!2735 = !DILocalVariable(name: "lrp", scope: !2717, file: !2, line: 47, type: !345, align: 8)
!2736 = !DILocation(line: 47, column: 7, scope: !2717, inlinedAt: !2718)
!2737 = !DILocalVariable(name: "dc", scope: !2717, file: !2, line: 47, type: !345, align: 8)
!2738 = !DILocation(line: 47, column: 12, scope: !2717, inlinedAt: !2718)
!2739 = !DILocalVariable(name: "k", scope: !2717, file: !2, line: 48, type: !18, align: 4)
!2740 = !DILocation(line: 48, column: 6, scope: !2717, inlinedAt: !2718)
!2741 = !DILocalVariable(name: "j", scope: !2717, file: !2, line: 48, type: !18, align: 4)
!2742 = !DILocation(line: 48, column: 9, scope: !2717, inlinedAt: !2718)
!2743 = !DILocalVariable(name: "lnz", scope: !2717, file: !2, line: 48, type: !18, align: 4)
!2744 = !DILocation(line: 48, column: 12, scope: !2717, inlinedAt: !2718)
!2745 = !DILocalVariable(name: "len", scope: !2717, file: !2, line: 49, type: !66, align: 8)
!2746 = !DILocation(line: 49, column: 6, scope: !2717, inlinedAt: !2718)
!2747 = !DILocation(line: 49, column: 12, scope: !2717, inlinedAt: !2718)
!2748 = !DILocalVariable(name: "last_char", scope: !2717, file: !2, line: 50, type: !66, align: 8)
!2749 = !DILocation(line: 50, column: 6, scope: !2717, inlinedAt: !2718)
!2750 = !DILocation(line: 50, column: 18, scope: !2717, inlinedAt: !2718)
!2751 = !DILocation(line: 52, column: 9, scope: !2717, inlinedAt: !2718)
!2752 = !DILocalVariable(name: "c", scope: !2717, file: !2, line: 54, type: !64, align: 1)
!2753 = !DILocation(line: 54, column: 7, scope: !2717, inlinedAt: !2718)
!2754 = !DILocation(line: 56, column: 2, scope: !2717, inlinedAt: !2718)
!2755 = !DILocation(line: 56, column: 14, scope: !2756, inlinedAt: !2718)
!2756 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 56, column: 2)
!2757 = !DILocation(line: 56, column: 20, scope: !2756, inlinedAt: !2718)
!2758 = !DILocation(line: 56, column: 10, scope: !2756, inlinedAt: !2718)
!2759 = !DILocation(line: 58, column: 7, scope: !2760, inlinedAt: !2718)
!2760 = distinct !DILexicalBlock(scope: !2756, file: !41, line: 57, column: 2)
!2761 = !DILocation(line: 58, column: 16, scope: !2760, inlinedAt: !2718)
!2762 = !DILocation(line: 58, column: 34, scope: !2760, inlinedAt: !2718)
!2763 = !DILocation(line: 59, column: 3, scope: !2760, inlinedAt: !2718)
!2764 = !DILocation(line: 62, column: 6, scope: !2717, inlinedAt: !2718)
!2765 = !DILocation(line: 64, column: 13, scope: !2766, inlinedAt: !2718)
!2766 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 63, column: 2)
!2767 = !DILocation(line: 65, column: 7, scope: !2766, inlinedAt: !2718)
!2768 = !DILocation(line: 65, column: 16, scope: !2766, inlinedAt: !2718)
!2769 = !DILocation(line: 67, column: 9, scope: !2770, inlinedAt: !2718)
!2770 = distinct !DILexicalBlock(scope: !2766, file: !41, line: 66, column: 3)
!2771 = !DILocation(line: 67, column: 27, scope: !2770, inlinedAt: !2718)
!2772 = !DILocation(line: 68, column: 11, scope: !2770, inlinedAt: !2718)
!2773 = !DILocation(line: 70, column: 7, scope: !2766, inlinedAt: !2718)
!2774 = !DILocation(line: 70, column: 16, scope: !2766, inlinedAt: !2718)
!2775 = !DILocation(line: 70, column: 34, scope: !2766, inlinedAt: !2718)
!2776 = !DILocation(line: 70, column: 42, scope: !2766, inlinedAt: !2718)
!2777 = !DILocation(line: 70, column: 40, scope: !2766, inlinedAt: !2718)
!2778 = !DILocation(line: 70, column: 30, scope: !2766, inlinedAt: !2718)
!2779 = !DILocation(line: 72, column: 4, scope: !2780, inlinedAt: !2718)
!2780 = distinct !DILexicalBlock(scope: !2766, file: !41, line: 71, column: 3)
!2781 = !DILocation(line: 73, column: 16, scope: !2780, inlinedAt: !2718)
!2782 = !DILocation(line: 74, column: 4, scope: !2780, inlinedAt: !2718)
!2783 = !DILocation(line: 74, column: 11, scope: !2784, inlinedAt: !2718)
!2784 = distinct !DILexicalBlock(scope: !2780, file: !41, line: 74, column: 4)
!2785 = !DILocation(line: 74, column: 24, scope: !2784, inlinedAt: !2718)
!2786 = !DILocation(line: 74, column: 38, scope: !2784, inlinedAt: !2718)
!2787 = !DILocation(line: 74, column: 46, scope: !2784, inlinedAt: !2718)
!2788 = !DILocation(line: 74, column: 44, scope: !2784, inlinedAt: !2718)
!2789 = !DILocation(line: 74, column: 34, scope: !2784, inlinedAt: !2718)
!2790 = !DILocation(line: 76, column: 5, scope: !2791, inlinedAt: !2718)
!2791 = distinct !DILexicalBlock(scope: !2784, file: !41, line: 75, column: 4)
!2792 = !DILocation(line: 81, column: 2, scope: !2717, inlinedAt: !2718)
!2793 = !DILocation(line: 81, column: 9, scope: !2794, inlinedAt: !2718)
!2794 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 81, column: 2)
!2795 = !DILocation(line: 81, column: 26, scope: !2794, inlinedAt: !2718)
!2796 = !DILocation(line: 85, column: 9, scope: !2797, inlinedAt: !2718)
!2797 = distinct !DILexicalBlock(scope: !2798, file: !41, line: 83, column: 3)
!2798 = distinct !DILexicalBlock(scope: !2794, file: !41, line: 82, column: 2)
!2799 = !DILocation(line: 86, column: 9, scope: !2800, inlinedAt: !2718)
!2800 = distinct !DILexicalBlock(scope: !2797, file: !41, line: 86, column: 5)
!2801 = !DILocation(line: 86, column: 25, scope: !2800, inlinedAt: !2718)
!2802 = !DILocation(line: 87, column: 15, scope: !2800, inlinedAt: !2718)
!2803 = !DILocation(line: 88, column: 11, scope: !2800, inlinedAt: !2718)
!2804 = !DILocation(line: 89, column: 9, scope: !2797, inlinedAt: !2718)
!2805 = !DILocation(line: 90, column: 5, scope: !2806, inlinedAt: !2718)
!2806 = distinct !DILexicalBlock(scope: !2797, file: !41, line: 90, column: 5)
!2807 = !DILocation(line: 91, column: 9, scope: !2806, inlinedAt: !2718)
!2808 = !DILocation(line: 91, column: 26, scope: !2806, inlinedAt: !2718)
!2809 = !DILocation(line: 92, column: 9, scope: !2806, inlinedAt: !2718)
!2810 = !DILocation(line: 94, column: 8, scope: !2811, inlinedAt: !2718)
!2811 = distinct !DILexicalBlock(scope: !2806, file: !41, line: 93, column: 5)
!2812 = !DILocation(line: 94, column: 15, scope: !2811, inlinedAt: !2718)
!2813 = !DILocation(line: 94, column: 13, scope: !2811, inlinedAt: !2718)
!2814 = !DILocation(line: 94, column: 25, scope: !2811, inlinedAt: !2718)
!2815 = !DILocation(line: 98, column: 8, scope: !2816, inlinedAt: !2718)
!2816 = distinct !DILexicalBlock(scope: !2806, file: !41, line: 97, column: 5)
!2817 = !DILocation(line: 98, column: 13, scope: !2816, inlinedAt: !2718)
!2818 = !DILocation(line: 100, column: 11, scope: !2806, inlinedAt: !2718)
!2819 = !DILocation(line: 100, column: 9, scope: !2806, inlinedAt: !2718)
!2820 = !DILocation(line: 102, column: 6, scope: !2821, inlinedAt: !2718)
!2821 = distinct !DILexicalBlock(scope: !2806, file: !41, line: 101, column: 5)
!2822 = !DILocation(line: 103, column: 10, scope: !2821, inlinedAt: !2718)
!2823 = !DILocation(line: 105, column: 17, scope: !2806, inlinedAt: !2718)
!2824 = !DILocation(line: 107, column: 5, scope: !2825, inlinedAt: !2718)
!2825 = distinct !DILexicalBlock(scope: !2797, file: !41, line: 107, column: 5)
!2826 = !DILocation(line: 108, column: 9, scope: !2825, inlinedAt: !2718)
!2827 = !DILocation(line: 108, column: 21, scope: !2825, inlinedAt: !2718)
!2828 = !DILocation(line: 108, column: 19, scope: !2825, inlinedAt: !2718)
!2829 = !DILocation(line: 111, column: 7, scope: !2798, inlinedAt: !2718)
!2830 = !DILocation(line: 111, column: 16, scope: !2798, inlinedAt: !2718)
!2831 = !DILocation(line: 111, column: 27, scope: !2798, inlinedAt: !2718)
!2832 = !DILocation(line: 112, column: 10, scope: !2798, inlinedAt: !2718)
!2833 = !DILocation(line: 112, column: 18, scope: !2798, inlinedAt: !2718)
!2834 = !DILocation(line: 113, column: 7, scope: !2798, inlinedAt: !2718)
!2835 = !DILocation(line: 113, column: 15, scope: !2798, inlinedAt: !2718)
!2836 = !DILocation(line: 113, column: 13, scope: !2798, inlinedAt: !2718)
!2837 = !DILocation(line: 115, column: 7, scope: !2717, inlinedAt: !2718)
!2838 = !DILocation(line: 115, column: 22, scope: !2717, inlinedAt: !2718)
!2839 = !DILocation(line: 116, column: 7, scope: !2717, inlinedAt: !2718)
!2840 = !DILocation(line: 116, column: 25, scope: !2717, inlinedAt: !2718)
!2841 = !DILocation(line: 117, column: 7, scope: !2717, inlinedAt: !2718)
!2842 = !DILocation(line: 119, column: 7, scope: !2843, inlinedAt: !2718)
!2843 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 118, column: 2)
!2844 = !DILocation(line: 119, column: 20, scope: !2843, inlinedAt: !2718)
!2845 = !DILocation(line: 119, column: 34, scope: !2843, inlinedAt: !2718)
!2846 = !DILocalVariable(name: "e10", scope: !2843, file: !2, line: 120, type: !345, align: 8)
!2847 = !DILocation(line: 120, column: 8, scope: !2843, inlinedAt: !2718)
!2848 = !DILocation(line: 120, column: 37, scope: !2843, inlinedAt: !2718)
!2849 = !DILocation(line: 120, column: 43, scope: !2843, inlinedAt: !2718)
!2850 = !DILocation(line: 120, column: 30, scope: !2843, inlinedAt: !2718)
!2851 = !DILocation(line: 120, column: 14, scope: !2843, inlinedAt: !2718)
!2852 = !DILocation(line: 120, column: 60, scope: !2843, inlinedAt: !2718)
!2853 = !DILocation(line: 121, column: 3, scope: !2843, inlinedAt: !2718)
!2854 = !DILocation(line: 121, column: 10, scope: !2843, inlinedAt: !2718)
!2855 = !DILocation(line: 123, column: 11, scope: !2717, inlinedAt: !2718)
!2856 = !DILocation(line: 123, column: 20, scope: !2717, inlinedAt: !2718)
!2857 = !DILocation(line: 125, column: 10, scope: !2858, inlinedAt: !2718)
!2858 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 124, column: 2)
!2859 = !DILocation(line: 128, column: 9, scope: !2717, inlinedAt: !2718)
!2860 = !DILocation(line: 128, column: 20, scope: !2717, inlinedAt: !2718)
!2861 = !DILocation(line: 131, column: 6, scope: !2717, inlinedAt: !2718)
!2862 = !DILocation(line: 131, column: 13, scope: !2717, inlinedAt: !2718)
!2863 = !DILocation(line: 131, column: 19, scope: !2717, inlinedAt: !2718)
!2864 = !DILocation(line: 131, column: 31, scope: !2717, inlinedAt: !2718)
!2865 = !DILocation(line: 131, column: 54, scope: !2717, inlinedAt: !2718)
!2866 = !DILocation(line: 131, column: 46, scope: !2717, inlinedAt: !2718)
!2867 = !DILocation(line: 131, column: 80, scope: !2717, inlinedAt: !2718)
!2868 = !DILocation(line: 131, column: 97, scope: !2717, inlinedAt: !2718)
!2869 = !DILocation(line: 132, column: 6, scope: !2717, inlinedAt: !2718)
!2870 = !DILocation(line: 132, column: 32, scope: !2717, inlinedAt: !2718)
!2871 = !DILocation(line: 133, column: 6, scope: !2717, inlinedAt: !2718)
!2872 = !DILocation(line: 133, column: 54, scope: !2717, inlinedAt: !2718)
!2873 = !DILocation(line: 136, column: 6, scope: !2717, inlinedAt: !2718)
!2874 = !DILocation(line: 138, column: 3, scope: !2875, inlinedAt: !2718)
!2875 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 137, column: 2)
!2876 = !DILocation(line: 138, column: 10, scope: !2877, inlinedAt: !2718)
!2877 = distinct !DILexicalBlock(scope: !2875, file: !41, line: 138, column: 3)
!2878 = !DILocation(line: 138, column: 24, scope: !2877, inlinedAt: !2718)
!2879 = !DILocation(line: 138, column: 22, scope: !2877, inlinedAt: !2718)
!2880 = !DILocation(line: 138, column: 17, scope: !2877, inlinedAt: !2718)
!2881 = !DILocation(line: 139, column: 3, scope: !2875, inlinedAt: !2718)
!2882 = !DILocation(line: 140, column: 7, scope: !2875, inlinedAt: !2718)
!2883 = !DILocalVariable(name: "a", scope: !2717, file: !2, line: 143, type: !18, align: 4)
!2884 = !DILocation(line: 143, column: 6, scope: !2717, inlinedAt: !2718)
!2885 = !DILocalVariable(name: "z", scope: !2717, file: !2, line: 144, type: !18, align: 4)
!2886 = !DILocation(line: 144, column: 6, scope: !2717, inlinedAt: !2718)
!2887 = !DILocation(line: 144, column: 10, scope: !2717, inlinedAt: !2718)
!2888 = !DILocalVariable(name: "e2", scope: !2717, file: !2, line: 145, type: !18, align: 4)
!2889 = !DILocation(line: 145, column: 6, scope: !2717, inlinedAt: !2718)
!2890 = !DILocalVariable(name: "rp", scope: !2717, file: !2, line: 146, type: !345, align: 8)
!2891 = !DILocation(line: 146, column: 7, scope: !2717, inlinedAt: !2718)
!2892 = !DILocation(line: 146, column: 12, scope: !2717, inlinedAt: !2718)
!2893 = !DILocation(line: 149, column: 6, scope: !2717, inlinedAt: !2718)
!2894 = !DILocation(line: 149, column: 17, scope: !2717, inlinedAt: !2718)
!2895 = !DILocation(line: 149, column: 24, scope: !2717, inlinedAt: !2718)
!2896 = !DILocation(line: 149, column: 30, scope: !2717, inlinedAt: !2718)
!2897 = !DILocation(line: 151, column: 7, scope: !2898, inlinedAt: !2718)
!2898 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 150, column: 2)
!2899 = !DILocation(line: 151, column: 23, scope: !2898, inlinedAt: !2718)
!2900 = !DILocation(line: 151, column: 40, scope: !2898, inlinedAt: !2718)
!2901 = !DILocation(line: 152, column: 7, scope: !2898, inlinedAt: !2718)
!2902 = !DILocation(line: 152, column: 22, scope: !2898, inlinedAt: !2718)
!2903 = !DILocation(line: 152, column: 39, scope: !2898, inlinedAt: !2718)
!2904 = !DILocation(line: 152, column: 53, scope: !2898, inlinedAt: !2718)
!2905 = !DILocation(line: 152, column: 49, scope: !2898, inlinedAt: !2718)
!2906 = !DILocalVariable(name: "bitlim", scope: !2898, file: !2, line: 153, type: !18, align: 4)
!2907 = !DILocation(line: 153, column: 7, scope: !2898, inlinedAt: !2718)
!2908 = !DILocation(line: 153, column: 34, scope: !2898, inlinedAt: !2718)
!2909 = !DILocation(line: 153, column: 29, scope: !2898, inlinedAt: !2718)
!2910 = !DILocation(line: 153, column: 24, scope: !2898, inlinedAt: !2718)
!2911 = !DILocation(line: 153, column: 16, scope: !2898, inlinedAt: !2718)
!2912 = !DILocation(line: 154, column: 7, scope: !2898, inlinedAt: !2718)
!2913 = !DILocation(line: 154, column: 24, scope: !2898, inlinedAt: !2718)
!2914 = !DILocation(line: 154, column: 30, scope: !2898, inlinedAt: !2718)
!2915 = !DILocation(line: 154, column: 22, scope: !2898, inlinedAt: !2718)
!2916 = !DILocation(line: 154, column: 50, scope: !2898, inlinedAt: !2718)
!2917 = !DILocation(line: 154, column: 67, scope: !2898, inlinedAt: !2718)
!2918 = !DILocation(line: 154, column: 77, scope: !2898, inlinedAt: !2718)
!2919 = !DILocation(line: 158, column: 6, scope: !2717, inlinedAt: !2718)
!2920 = !DILocalVariable(name: "rpm9", scope: !2921, file: !2, line: 160, type: !345, align: 8)
!2921 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 159, column: 2)
!2922 = !DILocation(line: 160, column: 8, scope: !2921, inlinedAt: !2718)
!2923 = !DILocation(line: 160, column: 15, scope: !2921, inlinedAt: !2718)
!2924 = !DILocation(line: 160, column: 25, scope: !2921, inlinedAt: !2718)
!2925 = !DILocation(line: 160, column: 34, scope: !2921, inlinedAt: !2718)
!2926 = !DILocalVariable(name: "p10", scope: !2921, file: !2, line: 161, type: !18, align: 4)
!2927 = !DILocation(line: 161, column: 7, scope: !2921, inlinedAt: !2718)
!2928 = !DILocation(line: 161, column: 22, scope: !2921, inlinedAt: !2718)
!2929 = !DILocation(line: 161, column: 18, scope: !2921, inlinedAt: !2718)
!2930 = !DILocalVariable(name: "carry", scope: !2921, file: !2, line: 162, type: !3, align: 4)
!2931 = !DILocation(line: 162, column: 8, scope: !2921, inlinedAt: !2718)
!2932 = !DILocation(line: 162, column: 16, scope: !2921, inlinedAt: !2718)
!2933 = !DILocation(line: 163, column: 12, scope: !2934, inlinedAt: !2718)
!2934 = distinct !DILexicalBlock(scope: !2921, file: !41, line: 163, column: 3)
!2935 = !DILocation(line: 163, column: 15, scope: !2934, inlinedAt: !2718)
!2936 = !DILocation(line: 163, column: 20, scope: !2934, inlinedAt: !2718)
!2937 = !DILocalVariable(name: "tmp", scope: !2938, file: !2, line: 165, type: !3, align: 4)
!2938 = distinct !DILexicalBlock(scope: !2934, file: !41, line: 164, column: 3)
!2939 = !DILocation(line: 165, column: 9, scope: !2938, inlinedAt: !2718)
!2940 = !DILocation(line: 165, column: 17, scope: !2938, inlinedAt: !2718)
!2941 = !DILocation(line: 165, column: 22, scope: !2938, inlinedAt: !2718)
!2942 = !DILocation(line: 165, column: 15, scope: !2938, inlinedAt: !2718)
!2943 = !DILocation(line: 166, column: 6, scope: !2938, inlinedAt: !2718)
!2944 = !DILocation(line: 166, column: 13, scope: !2938, inlinedAt: !2718)
!2945 = !DILocation(line: 166, column: 18, scope: !2938, inlinedAt: !2718)
!2946 = !DILocation(line: 166, column: 11, scope: !2938, inlinedAt: !2718)
!2947 = !DILocation(line: 166, column: 24, scope: !2938, inlinedAt: !2718)
!2948 = !DILocation(line: 167, column: 25, scope: !2938, inlinedAt: !2718)
!2949 = !DILocation(line: 167, column: 12, scope: !2938, inlinedAt: !2718)
!2950 = !DILocation(line: 167, column: 31, scope: !2938, inlinedAt: !2718)
!2951 = !DILocation(line: 168, column: 8, scope: !2938, inlinedAt: !2718)
!2952 = !DILocation(line: 168, column: 13, scope: !2938, inlinedAt: !2718)
!2953 = !DILocation(line: 168, column: 21, scope: !2938, inlinedAt: !2718)
!2954 = !DILocation(line: 170, column: 10, scope: !2955, inlinedAt: !2718)
!2955 = distinct !DILexicalBlock(scope: !2938, file: !41, line: 169, column: 4)
!2956 = !DILocation(line: 171, column: 5, scope: !2955, inlinedAt: !2718)
!2957 = !DILocation(line: 163, column: 23, scope: !2934, inlinedAt: !2718)
!2958 = !DILocation(line: 174, column: 7, scope: !2921, inlinedAt: !2718)
!2959 = !DILocation(line: 174, column: 16, scope: !2921, inlinedAt: !2718)
!2960 = !DILocation(line: 174, column: 23, scope: !2921, inlinedAt: !2718)
!2961 = !DILocation(line: 175, column: 3, scope: !2921, inlinedAt: !2718)
!2962 = !DILocation(line: 175, column: 13, scope: !2921, inlinedAt: !2718)
!2963 = !DILocation(line: 175, column: 9, scope: !2921, inlinedAt: !2718)
!2964 = !DILocation(line: 179, column: 2, scope: !2717, inlinedAt: !2718)
!2965 = !DILocation(line: 179, column: 9, scope: !2966, inlinedAt: !2718)
!2966 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 179, column: 2)
!2967 = !DILocation(line: 179, column: 30, scope: !2966, inlinedAt: !2718)
!2968 = !DILocation(line: 179, column: 53, scope: !2966, inlinedAt: !2718)
!2969 = !DILocation(line: 179, column: 51, scope: !2966, inlinedAt: !2718)
!2970 = !DILocalVariable(name: "carry", scope: !2971, file: !2, line: 181, type: !3, align: 4)
!2971 = distinct !DILexicalBlock(scope: !2966, file: !41, line: 180, column: 2)
!2972 = !DILocation(line: 181, column: 8, scope: !2971, inlinedAt: !2718)
!2973 = !DILocation(line: 181, column: 16, scope: !2971, inlinedAt: !2718)
!2974 = !DILocation(line: 182, column: 3, scope: !2971, inlinedAt: !2718)
!2975 = !DILocation(line: 183, column: 13, scope: !2976, inlinedAt: !2718)
!2976 = distinct !DILexicalBlock(scope: !2971, file: !41, line: 183, column: 3)
!2977 = !DILocalVariable(name: "tmp", scope: !2978, file: !2, line: 185, type: !67, align: 8)
!2978 = distinct !DILexicalBlock(scope: !2976, file: !41, line: 184, column: 3)
!2979 = !DILocation(line: 185, column: 10, scope: !2978, inlinedAt: !2718)
!2980 = !DILocation(line: 185, column: 25, scope: !2978, inlinedAt: !2718)
!2981 = !DILocation(line: 185, column: 17, scope: !2978, inlinedAt: !2718)
!2982 = !DILocation(line: 185, column: 36, scope: !2978, inlinedAt: !2718)
!2983 = !DILocation(line: 186, column: 8, scope: !2978, inlinedAt: !2718)
!2984 = !DILocation(line: 188, column: 20, scope: !2985, inlinedAt: !2718)
!2985 = distinct !DILexicalBlock(scope: !2978, file: !41, line: 187, column: 4)
!2986 = !DILocation(line: 188, column: 14, scope: !2985, inlinedAt: !2718)
!2987 = !DILocation(line: 189, column: 7, scope: !2985, inlinedAt: !2718)
!2988 = !DILocation(line: 189, column: 19, scope: !2985, inlinedAt: !2718)
!2989 = !DILocation(line: 189, column: 13, scope: !2985, inlinedAt: !2718)
!2990 = !DILocation(line: 193, column: 13, scope: !2991, inlinedAt: !2718)
!2991 = distinct !DILexicalBlock(scope: !2978, file: !41, line: 192, column: 4)
!2992 = !DILocation(line: 194, column: 7, scope: !2991, inlinedAt: !2718)
!2993 = !DILocation(line: 194, column: 13, scope: !2991, inlinedAt: !2718)
!2994 = !DILocation(line: 196, column: 8, scope: !2978, inlinedAt: !2718)
!2995 = !DILocation(line: 196, column: 14, scope: !2978, inlinedAt: !2718)
!2996 = !DILocation(line: 196, column: 31, scope: !2978, inlinedAt: !2718)
!2997 = !DILocation(line: 196, column: 36, scope: !2978, inlinedAt: !2718)
!2998 = !DILocation(line: 196, column: 44, scope: !2978, inlinedAt: !2718)
!2999 = !DILocation(line: 196, column: 52, scope: !2978, inlinedAt: !2718)
!3000 = !DILocation(line: 197, column: 8, scope: !2978, inlinedAt: !2718)
!3001 = !DILocation(line: 197, column: 13, scope: !2978, inlinedAt: !2718)
!3002 = !DILocation(line: 197, column: 16, scope: !2978, inlinedAt: !2718)
!3003 = !DILocation(line: 183, column: 35, scope: !2976, inlinedAt: !2718)
!3004 = !DILocation(line: 199, column: 7, scope: !2971, inlinedAt: !2718)
!3005 = !DILocation(line: 201, column: 4, scope: !3006, inlinedAt: !2718)
!3006 = distinct !DILexicalBlock(scope: !2971, file: !41, line: 200, column: 3)
!3007 = !DILocation(line: 202, column: 9, scope: !3006, inlinedAt: !2718)
!3008 = !DILocation(line: 203, column: 8, scope: !3006, inlinedAt: !2718)
!3009 = !DILocation(line: 203, column: 13, scope: !3006, inlinedAt: !2718)
!3010 = !DILocation(line: 205, column: 10, scope: !3011, inlinedAt: !2718)
!3011 = distinct !DILexicalBlock(scope: !3006, file: !41, line: 204, column: 4)
!3012 = !DILocation(line: 206, column: 8, scope: !3011, inlinedAt: !2718)
!3013 = !DILocation(line: 206, column: 28, scope: !3011, inlinedAt: !2718)
!3014 = !DILocation(line: 206, column: 5, scope: !3011, inlinedAt: !2718)
!3015 = !DILocation(line: 208, column: 6, scope: !3006, inlinedAt: !2718)
!3016 = !DILocation(line: 208, column: 11, scope: !3006, inlinedAt: !2718)
!3017 = !DILocation(line: 213, column: 2, scope: !2717, inlinedAt: !2718)
!3018 = !DILocalVariable(name: "carry", scope: !3019, file: !2, line: 215, type: !3, align: 4)
!3019 = distinct !DILexicalBlock(scope: !3020, file: !41, line: 214, column: 2)
!3020 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 213, column: 2)
!3021 = !DILocation(line: 215, column: 8, scope: !3019, inlinedAt: !2718)
!3022 = !DILocation(line: 215, column: 16, scope: !3019, inlinedAt: !2718)
!3023 = !DILocalVariable(name: "sh", scope: !3019, file: !2, line: 216, type: !18, align: 4)
!3024 = !DILocation(line: 216, column: 7, scope: !3019, inlinedAt: !2718)
!3025 = !DILocation(line: 216, column: 12, scope: !3019, inlinedAt: !2718)
!3026 = !DILocalVariable(name: "i", scope: !3019, file: !2, line: 217, type: !18, align: 4)
!3027 = !DILocation(line: 217, column: 7, scope: !3019, inlinedAt: !2718)
!3028 = !DILocation(line: 218, column: 12, scope: !3029, inlinedAt: !2718)
!3029 = distinct !DILexicalBlock(scope: !3019, file: !41, line: 218, column: 3)
!3030 = !DILocation(line: 218, column: 15, scope: !3029, inlinedAt: !2718)
!3031 = !DILocation(line: 220, column: 9, scope: !3032, inlinedAt: !2718)
!3032 = distinct !DILexicalBlock(scope: !3029, file: !41, line: 219, column: 3)
!3033 = !DILocation(line: 220, column: 13, scope: !3032, inlinedAt: !2718)
!3034 = !DILocation(line: 221, column: 8, scope: !3032, inlinedAt: !2718)
!3035 = !DILocation(line: 221, column: 13, scope: !3032, inlinedAt: !2718)
!3036 = !DILocation(line: 221, column: 20, scope: !3032, inlinedAt: !2718)
!3037 = !DILocation(line: 221, column: 28, scope: !3032, inlinedAt: !2718)
!3038 = !DILocation(line: 221, column: 18, scope: !3032, inlinedAt: !2718)
!3039 = !DILocation(line: 223, column: 9, scope: !3040, inlinedAt: !2718)
!3040 = distinct !DILexicalBlock(scope: !3032, file: !41, line: 222, column: 4)
!3041 = !DILocation(line: 224, column: 5, scope: !3040, inlinedAt: !2718)
!3042 = !DILocation(line: 226, column: 11, scope: !3032, inlinedAt: !2718)
!3043 = !DILocation(line: 226, column: 15, scope: !3032, inlinedAt: !2718)
!3044 = !DILocation(line: 226, column: 31, scope: !3032, inlinedAt: !2718)
!3045 = !DILocation(line: 226, column: 8, scope: !3032, inlinedAt: !2718)
!3046 = !DILocation(line: 226, column: 35, scope: !3032, inlinedAt: !2718)
!3047 = !DILocation(line: 218, column: 28, scope: !3029, inlinedAt: !2718)
!3048 = !DILocation(line: 228, column: 7, scope: !3019, inlinedAt: !2718)
!3049 = !DILocation(line: 228, column: 23, scope: !3019, inlinedAt: !2718)
!3050 = !DILocation(line: 228, column: 42, scope: !3019, inlinedAt: !2718)
!3051 = !DILocation(line: 229, column: 7, scope: !3019, inlinedAt: !2718)
!3052 = !DILocation(line: 229, column: 34, scope: !3019, inlinedAt: !2718)
!3053 = !DILocation(line: 230, column: 3, scope: !3019, inlinedAt: !2718)
!3054 = !DILocation(line: 230, column: 9, scope: !3019, inlinedAt: !2718)
!3055 = !DILocation(line: 231, column: 12, scope: !3056, inlinedAt: !2718)
!3056 = distinct !DILexicalBlock(scope: !3019, file: !41, line: 231, column: 3)
!3057 = !DILocation(line: 231, column: 15, scope: !3056, inlinedAt: !2718)
!3058 = !DILocation(line: 231, column: 20, scope: !3056, inlinedAt: !2718)
!3059 = !DILocalVariable(name: "tmp", scope: !3060, file: !2, line: 233, type: !3, align: 4)
!3060 = distinct !DILexicalBlock(scope: !3056, file: !41, line: 232, column: 3)
!3061 = !DILocation(line: 233, column: 9, scope: !3060, inlinedAt: !2718)
!3062 = !DILocation(line: 233, column: 17, scope: !3060, inlinedAt: !2718)
!3063 = !DILocation(line: 233, column: 28, scope: !3060, inlinedAt: !2718)
!3064 = !DILocation(line: 233, column: 23, scope: !3060, inlinedAt: !2718)
!3065 = !DILocation(line: 233, column: 15, scope: !3060, inlinedAt: !2718)
!3066 = !DILocation(line: 234, column: 6, scope: !3060, inlinedAt: !2718)
!3067 = !DILocation(line: 234, column: 13, scope: !3060, inlinedAt: !2718)
!3068 = !DILocation(line: 234, column: 19, scope: !3060, inlinedAt: !2718)
!3069 = !DILocation(line: 234, column: 11, scope: !3060, inlinedAt: !2718)
!3070 = !DILocation(line: 234, column: 24, scope: !3060, inlinedAt: !2718)
!3071 = !DILocation(line: 235, column: 27, scope: !3060, inlinedAt: !2718)
!3072 = !DILocation(line: 235, column: 13, scope: !3060, inlinedAt: !2718)
!3073 = !DILocation(line: 235, column: 33, scope: !3060, inlinedAt: !2718)
!3074 = !DILocation(line: 236, column: 8, scope: !3060, inlinedAt: !2718)
!3075 = !DILocation(line: 236, column: 13, scope: !3060, inlinedAt: !2718)
!3076 = !DILocation(line: 236, column: 21, scope: !3060, inlinedAt: !2718)
!3077 = !DILocation(line: 238, column: 10, scope: !3078, inlinedAt: !2718)
!3078 = distinct !DILexicalBlock(scope: !3060, file: !41, line: 237, column: 4)
!3079 = !DILocation(line: 239, column: 5, scope: !3078, inlinedAt: !2718)
!3080 = !DILocation(line: 240, column: 5, scope: !3078, inlinedAt: !2718)
!3081 = !DILocation(line: 231, column: 28, scope: !3056, inlinedAt: !2718)
!3082 = !DILocation(line: 243, column: 7, scope: !3019, inlinedAt: !2718)
!3083 = !DILocation(line: 245, column: 9, scope: !3084, inlinedAt: !2718)
!3084 = distinct !DILexicalBlock(scope: !3019, file: !41, line: 244, column: 3)
!3085 = !DILocation(line: 245, column: 26, scope: !3084, inlinedAt: !2718)
!3086 = !DILocation(line: 247, column: 7, scope: !3087, inlinedAt: !2718)
!3087 = distinct !DILexicalBlock(scope: !3084, file: !41, line: 246, column: 4)
!3088 = !DILocation(line: 247, column: 12, scope: !3087, inlinedAt: !2718)
!3089 = !DILocation(line: 248, column: 10, scope: !3087, inlinedAt: !2718)
!3090 = !DILocation(line: 252, column: 8, scope: !3091, inlinedAt: !2718)
!3091 = distinct !DILexicalBlock(scope: !3084, file: !41, line: 251, column: 4)
!3092 = !DILocation(line: 252, column: 5, scope: !3091, inlinedAt: !2718)
!3093 = !DILocalVariable(name: "y", scope: !2717, file: !2, line: 258, type: !2464, align: 8)
!3094 = !DILocation(line: 258, column: 9, scope: !2717, inlinedAt: !2718)
!3095 = !DILocalVariable(name: "i", scope: !2717, file: !2, line: 259, type: !18, align: 4)
!3096 = !DILocation(line: 259, column: 6, scope: !2717, inlinedAt: !2718)
!3097 = !DILocation(line: 260, column: 11, scope: !3098, inlinedAt: !2718)
!3098 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 260, column: 2)
!3099 = !DILocation(line: 260, column: 14, scope: !3098, inlinedAt: !2718)
!3100 = !DILocation(line: 262, column: 8, scope: !3101, inlinedAt: !2718)
!3101 = distinct !DILexicalBlock(scope: !3098, file: !41, line: 261, column: 2)
!3102 = !DILocation(line: 262, column: 12, scope: !3101, inlinedAt: !2718)
!3103 = !DILocation(line: 262, column: 25, scope: !3101, inlinedAt: !2718)
!3104 = !DILocation(line: 262, column: 36, scope: !3101, inlinedAt: !2718)
!3105 = !DILocation(line: 262, column: 31, scope: !3101, inlinedAt: !2718)
!3106 = !DILocation(line: 262, column: 58, scope: !3101, inlinedAt: !2718)
!3107 = !DILocation(line: 263, column: 22, scope: !3101, inlinedAt: !2718)
!3108 = !DILocation(line: 263, column: 7, scope: !3101, inlinedAt: !2718)
!3109 = !DILocation(line: 263, column: 29, scope: !3101, inlinedAt: !2718)
!3110 = !DILocation(line: 263, column: 33, scope: !3101, inlinedAt: !2718)
!3111 = !DILocation(line: 260, column: 27, scope: !3098, inlinedAt: !2718)
!3112 = !DILocation(line: 266, column: 2, scope: !2717, inlinedAt: !2718)
!3113 = !DILocation(line: 266, column: 7, scope: !2717, inlinedAt: !2718)
!3114 = !DILocalVariable(name: "denormal", scope: !2717, file: !2, line: 268, type: !145, align: 1)
!3115 = !DILocation(line: 268, column: 7, scope: !2717, inlinedAt: !2718)
!3116 = !DILocalVariable(name: "bits", scope: !2717, file: !2, line: 270, type: !3, align: 4)
!3117 = !DILocation(line: 270, column: 7, scope: !2717, inlinedAt: !2718)
!3118 = !DILocation(line: 270, column: 14, scope: !2717, inlinedAt: !2718)
!3119 = !DILocation(line: 271, column: 6, scope: !2717, inlinedAt: !2718)
!3120 = !DILocation(line: 271, column: 37, scope: !2717, inlinedAt: !2718)
!3121 = !DILocation(line: 271, column: 13, scope: !2717, inlinedAt: !2718)
!3122 = !DILocation(line: 273, column: 34, scope: !3123, inlinedAt: !2718)
!3123 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 272, column: 2)
!3124 = !DILocation(line: 273, column: 10, scope: !3123, inlinedAt: !2718)
!3125 = !DILocation(line: 274, column: 7, scope: !3123, inlinedAt: !2718)
!3126 = !DILocation(line: 274, column: 24, scope: !3123, inlinedAt: !2718)
!3127 = !DILocation(line: 275, column: 14, scope: !3123, inlinedAt: !2718)
!3128 = !DILocalVariable(name: "bias", scope: !2717, file: !2, line: 279, type: !2464, align: 8)
!3129 = !DILocation(line: 279, column: 9, scope: !2717, inlinedAt: !2718)
!3130 = !DILocalVariable(name: "frac", scope: !2717, file: !2, line: 280, type: !2464, align: 8)
!3131 = !DILocation(line: 280, column: 9, scope: !2717, inlinedAt: !2718)
!3132 = !DILocation(line: 281, column: 6, scope: !2717, inlinedAt: !2718)
!3133 = !DILocation(line: 283, column: 69, scope: !3134, inlinedAt: !2718)
!3134 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 282, column: 2)
!3135 = !DILocation(line: 283, column: 41, scope: !3134, inlinedAt: !2718)
!3136 = !DILocation(line: 1061, column: 52, scope: !3137, inlinedAt: !3138)
!3137 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3138 = !DILocation(line: 283, column: 25, scope: !3134, inlinedAt: !2718)
!3139 = !DILocation(line: 1061, column: 41, scope: !3137, inlinedAt: !3138)
!3140 = !DILocation(line: 42, column: 10, scope: !3141, inlinedAt: !3142)
!3141 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2689, file: !2689, line: 30, scopeLine: 30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3142 = !DILocation(line: 310, column: 40, scope: !3143, inlinedAt: !3144)
!3143 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2683, file: !2683, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3144 = !DILocation(line: 283, column: 10, scope: !3134, inlinedAt: !2718)
!3145 = !DILocation(line: 310, column: 77, scope: !3143, inlinedAt: !3144)
!3146 = !DILocation(line: 284, column: 10, scope: !3134, inlinedAt: !2718)
!3147 = !DILocation(line: 284, column: 54, scope: !3134, inlinedAt: !2718)
!3148 = !DILocation(line: 284, column: 30, scope: !3134, inlinedAt: !2718)
!3149 = !DILocation(line: 1061, column: 52, scope: !3150, inlinedAt: !3151)
!3150 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3151 = !DILocation(line: 284, column: 14, scope: !3134, inlinedAt: !2718)
!3152 = !DILocation(line: 1061, column: 41, scope: !3150, inlinedAt: !3151)
!3153 = !DILocation(line: 285, column: 3, scope: !3134, inlinedAt: !2718)
!3154 = !DILocation(line: 285, column: 8, scope: !3134, inlinedAt: !2718)
!3155 = !DILocation(line: 286, column: 3, scope: !3134, inlinedAt: !2718)
!3156 = !DILocation(line: 286, column: 8, scope: !3134, inlinedAt: !2718)
!3157 = !DILocation(line: 290, column: 7, scope: !2717, inlinedAt: !2718)
!3158 = !DILocation(line: 290, column: 11, scope: !2717, inlinedAt: !2718)
!3159 = !DILocation(line: 290, column: 24, scope: !2717, inlinedAt: !2718)
!3160 = !DILocalVariable(name: "t", scope: !3161, file: !2, line: 292, type: !3, align: 4)
!3161 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 291, column: 2)
!3162 = !DILocation(line: 292, column: 8, scope: !3161, inlinedAt: !2718)
!3163 = !DILocation(line: 292, column: 15, scope: !3161, inlinedAt: !2718)
!3164 = !DILocation(line: 292, column: 19, scope: !3161, inlinedAt: !2718)
!3165 = !DILocation(line: 295, column: 9, scope: !3166, inlinedAt: !2718)
!3166 = distinct !DILexicalBlock(scope: !3161, file: !41, line: 293, column: 3)
!3167 = !DILocation(line: 295, column: 27, scope: !3166, inlinedAt: !2718)
!3168 = !DILocation(line: 295, column: 33, scope: !3166, inlinedAt: !2718)
!3169 = !DILocation(line: 295, column: 37, scope: !3166, inlinedAt: !2718)
!3170 = !DILocation(line: 295, column: 54, scope: !3166, inlinedAt: !2718)
!3171 = !DILocation(line: 296, column: 5, scope: !3172, inlinedAt: !2718)
!3172 = distinct !DILexicalBlock(scope: !3166, file: !41, line: 296, column: 5)
!3173 = !DILocation(line: 296, column: 20, scope: !3172, inlinedAt: !2718)
!3174 = !DILocation(line: 296, column: 13, scope: !3172, inlinedAt: !2718)
!3175 = !DILocation(line: 297, column: 9, scope: !3166, inlinedAt: !2718)
!3176 = !DILocation(line: 298, column: 5, scope: !3177, inlinedAt: !2718)
!3177 = distinct !DILexicalBlock(scope: !3166, file: !41, line: 298, column: 5)
!3178 = !DILocation(line: 298, column: 20, scope: !3177, inlinedAt: !2718)
!3179 = !DILocation(line: 298, column: 13, scope: !3177, inlinedAt: !2718)
!3180 = !DILocation(line: 299, column: 9, scope: !3166, inlinedAt: !2718)
!3181 = !DILocation(line: 300, column: 10, scope: !3182, inlinedAt: !2718)
!3182 = distinct !DILexicalBlock(scope: !3166, file: !41, line: 300, column: 5)
!3183 = !DILocation(line: 300, column: 14, scope: !3182, inlinedAt: !2718)
!3184 = !DILocation(line: 300, column: 31, scope: !3182, inlinedAt: !2718)
!3185 = !DILocation(line: 302, column: 6, scope: !3186, inlinedAt: !2718)
!3186 = distinct !DILexicalBlock(scope: !3182, file: !41, line: 301, column: 5)
!3187 = !DILocation(line: 302, column: 20, scope: !3186, inlinedAt: !2718)
!3188 = !DILocation(line: 302, column: 14, scope: !3186, inlinedAt: !2718)
!3189 = !DILocation(line: 306, column: 6, scope: !3190, inlinedAt: !2718)
!3190 = distinct !DILexicalBlock(scope: !3182, file: !41, line: 305, column: 5)
!3191 = !DILocation(line: 306, column: 21, scope: !3190, inlinedAt: !2718)
!3192 = !DILocation(line: 306, column: 14, scope: !3190, inlinedAt: !2718)
!3193 = !DILocation(line: 309, column: 31, scope: !3161, inlinedAt: !2718)
!3194 = !DILocation(line: 309, column: 7, scope: !3161, inlinedAt: !2718)
!3195 = !DILocation(line: 309, column: 46, scope: !3161, inlinedAt: !2718)
!3196 = !DILocation(line: 309, column: 57, scope: !3161, inlinedAt: !2718)
!3197 = !DILocation(line: 312, column: 2, scope: !2717, inlinedAt: !2718)
!3198 = !DILocation(line: 312, column: 7, scope: !2717, inlinedAt: !2718)
!3199 = !DILocation(line: 313, column: 2, scope: !2717, inlinedAt: !2718)
!3200 = !DILocation(line: 313, column: 7, scope: !2717, inlinedAt: !2718)
!3201 = !DILocation(line: 315, column: 8, scope: !2717, inlinedAt: !2718)
!3202 = !DILocation(line: 315, column: 49, scope: !2717, inlinedAt: !2718)
!3203 = !DILocation(line: 132, column: 23, scope: !3204, inlinedAt: !3205)
!3204 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2683, file: !2683, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3205 = !DILocation(line: 317, column: 7, scope: !3206, inlinedAt: !2718)
!3206 = distinct !DILexicalBlock(scope: !2717, file: !41, line: 316, column: 2)
!3207 = !DILocation(line: 319, column: 8, scope: !3208, inlinedAt: !2718)
!3208 = distinct !DILexicalBlock(scope: !3206, file: !41, line: 318, column: 3)
!3209 = !DILocation(line: 319, column: 20, scope: !3208, inlinedAt: !2718)
!3210 = !DILocation(line: 319, column: 52, scope: !3208, inlinedAt: !2718)
!3211 = !DILocation(line: 319, column: 28, scope: !3208, inlinedAt: !2718)
!3212 = !DILocation(line: 319, column: 75, scope: !3208, inlinedAt: !2718)
!3213 = !DILocation(line: 320, column: 4, scope: !3208, inlinedAt: !2718)
!3214 = !DILocation(line: 321, column: 4, scope: !3208, inlinedAt: !2718)
!3215 = !DILocation(line: 323, column: 7, scope: !3206, inlinedAt: !2718)
!3216 = !DILocation(line: 323, column: 36, scope: !3206, inlinedAt: !2718)
!3217 = !DILocation(line: 323, column: 45, scope: !3206, inlinedAt: !2718)
!3218 = !DILocation(line: 323, column: 57, scope: !3206, inlinedAt: !2718)
!3219 = !DILocation(line: 323, column: 71, scope: !3206, inlinedAt: !2718)
!3220 = !DILocation(line: 1061, column: 52, scope: !3221, inlinedAt: !3222)
!3221 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3222 = !DILocation(line: 325, column: 9, scope: !2717, inlinedAt: !2718)
!3223 = !DILocation(line: 1061, column: 41, scope: !3221, inlinedAt: !3222)
!3224 = distinct !DISubprogram(name: "to_float", linkageName: "std.core.String.to_float", scope: !2, file: !2, line: 826, type: !3225, scopeLine: 826, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3225 = !DISubroutineType(types: !3226)
!3226 = !{!344, !3227, !59}
!3227 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "float*", baseType: !3228, size: 64, align: 64, dwarfAddressSpace: 0)
!3228 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!3229 = !DILocalVariable(name: "s", arg: 1, scope: !3224, file: !2, line: 826, type: !59)
!3230 = !DILocation(line: 826, column: 27, scope: !3224)
!3231 = !DILocalVariable(name: "sign", scope: !3232, file: !2, line: 454, type: !18, align: 4)
!3232 = distinct !DISubprogram(name: "to_real", linkageName: "to_real", scope: !41, file: !41, line: 452, scopeLine: 452, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3233 = !DILocation(line: 454, column: 6, scope: !3232, inlinedAt: !3234)
!3234 = !DILocation(line: 826, column: 33, scope: !3224)
!3235 = !DILocation(line: 454, column: 13, scope: !3232, inlinedAt: !3234)
!3236 = !DILocation(line: 468, column: 2, scope: !3232, inlinedAt: !3234)
!3237 = !DILocation(line: 468, column: 9, scope: !3238, inlinedAt: !3234)
!3238 = distinct !DILexicalBlock(scope: !3232, file: !41, line: 468, column: 2)
!3239 = !DILocation(line: 468, column: 22, scope: !3238, inlinedAt: !3234)
!3240 = !DILocation(line: 468, column: 28, scope: !3238, inlinedAt: !3234)
!3241 = !DILocation(line: 468, column: 47, scope: !3238, inlinedAt: !3234)
!3242 = !DILocation(line: 468, column: 53, scope: !3238, inlinedAt: !3234)
!3243 = !DILocation(line: 469, column: 6, scope: !3232, inlinedAt: !3234)
!3244 = !DILocation(line: 469, column: 25, scope: !3232, inlinedAt: !3234)
!3245 = !DILocation(line: 470, column: 10, scope: !3246, inlinedAt: !3234)
!3246 = distinct !DILexicalBlock(scope: !3232, file: !41, line: 470, column: 2)
!3247 = !DILocation(line: 470, column: 16, scope: !3246, inlinedAt: !3234)
!3248 = !DILocation(line: 473, column: 11, scope: !3249, inlinedAt: !3234)
!3249 = distinct !DILexicalBlock(scope: !3246, file: !41, line: 473, column: 4)
!3250 = !DILocation(line: 474, column: 4, scope: !3249, inlinedAt: !3234)
!3251 = !DILocation(line: 476, column: 12, scope: !3252, inlinedAt: !3234)
!3252 = distinct !DILexicalBlock(scope: !3246, file: !41, line: 476, column: 4)
!3253 = !DILocation(line: 476, column: 18, scope: !3252, inlinedAt: !3234)
!3254 = !DILocation(line: 478, column: 6, scope: !3232, inlinedAt: !3234)
!3255 = !DILocation(line: 478, column: 29, scope: !3232, inlinedAt: !3234)
!3256 = !DILocation(line: 478, column: 57, scope: !3232, inlinedAt: !3234)
!3257 = !DILocation(line: 479, column: 6, scope: !3232, inlinedAt: !3234)
!3258 = !DILocation(line: 479, column: 24, scope: !3232, inlinedAt: !3234)
!3259 = !DILocation(line: 479, column: 47, scope: !3232, inlinedAt: !3234)
!3260 = !DILocation(line: 481, column: 6, scope: !3232, inlinedAt: !3234)
!3261 = !DILocation(line: 481, column: 23, scope: !3232, inlinedAt: !3234)
!3262 = !DILocation(line: 481, column: 29, scope: !3232, inlinedAt: !3234)
!3263 = !DILocation(line: 481, column: 43, scope: !3232, inlinedAt: !3234)
!3264 = !DILocation(line: 481, column: 49, scope: !3232, inlinedAt: !3234)
!3265 = !DILocation(line: 483, column: 34, scope: !3266, inlinedAt: !3234)
!3266 = distinct !DILexicalBlock(scope: !3232, file: !41, line: 482, column: 2)
!3267 = !DILocation(line: 483, column: 40, scope: !3266, inlinedAt: !3234)
!3268 = !DILocation(line: 483, column: 27, scope: !3266, inlinedAt: !3234)
!3269 = !DILocalVariable(name: "scale", scope: !3270, file: !2, line: 330, type: !2464, align: 8)
!3270 = distinct !DISubprogram(name: "hexfloat", linkageName: "hexfloat", scope: !41, file: !41, line: 328, scopeLine: 328, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3271 = !DILocation(line: 330, column: 9, scope: !3270, inlinedAt: !3272)
!3272 = !DILocation(line: 483, column: 11, scope: !3266, inlinedAt: !3234)
!3273 = !DILocation(line: 330, column: 17, scope: !3270, inlinedAt: !3272)
!3274 = !DILocalVariable(name: "x", scope: !3270, file: !2, line: 331, type: !3, align: 4)
!3275 = !DILocation(line: 331, column: 7, scope: !3270, inlinedAt: !3272)
!3276 = !DILocalVariable(name: "rp", scope: !3270, file: !2, line: 332, type: !345, align: 8)
!3277 = !DILocation(line: 332, column: 7, scope: !3270, inlinedAt: !3272)
!3278 = !DILocalVariable(name: "dc", scope: !3270, file: !2, line: 333, type: !345, align: 8)
!3279 = !DILocation(line: 333, column: 7, scope: !3270, inlinedAt: !3272)
!3280 = !DILocalVariable(name: "c", scope: !3270, file: !2, line: 334, type: !64, align: 1)
!3281 = !DILocation(line: 334, column: 7, scope: !3270, inlinedAt: !3272)
!3282 = !DILocalVariable(name: "got_rad", scope: !3270, file: !2, line: 335, type: !145, align: 1)
!3283 = !DILocation(line: 335, column: 7, scope: !3270, inlinedAt: !3272)
!3284 = !DILocalVariable(name: "got_digit", scope: !3270, file: !2, line: 336, type: !145, align: 1)
!3285 = !DILocation(line: 336, column: 7, scope: !3270, inlinedAt: !3272)
!3286 = !DILocalVariable(name: "got_tail", scope: !3270, file: !2, line: 337, type: !145, align: 1)
!3287 = !DILocation(line: 337, column: 7, scope: !3270, inlinedAt: !3272)
!3288 = !DILocalVariable(name: "len", scope: !3270, file: !2, line: 338, type: !66, align: 8)
!3289 = !DILocation(line: 338, column: 6, scope: !3270, inlinedAt: !3272)
!3290 = !DILocation(line: 338, column: 12, scope: !3270, inlinedAt: !3272)
!3291 = !DILocalVariable(name: "last_char", scope: !3270, file: !2, line: 339, type: !66, align: 8)
!3292 = !DILocation(line: 339, column: 6, scope: !3270, inlinedAt: !3272)
!3293 = !DILocation(line: 339, column: 18, scope: !3270, inlinedAt: !3272)
!3294 = !DILocalVariable(name: "index", scope: !3270, file: !2, line: 340, type: !66, align: 8)
!3295 = !DILocation(line: 340, column: 6, scope: !3270, inlinedAt: !3272)
!3296 = !DILocalVariable(name: "y", scope: !3270, file: !2, line: 341, type: !2464, align: 8)
!3297 = !DILocation(line: 341, column: 9, scope: !3270, inlinedAt: !3272)
!3298 = !DILocation(line: 344, column: 2, scope: !3270, inlinedAt: !3272)
!3299 = !DILocation(line: 344, column: 14, scope: !3300, inlinedAt: !3272)
!3300 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 344, column: 2)
!3301 = !DILocation(line: 344, column: 20, scope: !3300, inlinedAt: !3272)
!3302 = !DILocation(line: 344, column: 10, scope: !3300, inlinedAt: !3272)
!3303 = !DILocation(line: 346, column: 7, scope: !3304, inlinedAt: !3272)
!3304 = distinct !DILexicalBlock(scope: !3300, file: !41, line: 345, column: 2)
!3305 = !DILocation(line: 346, column: 16, scope: !3304, inlinedAt: !3272)
!3306 = !DILocation(line: 346, column: 34, scope: !3304, inlinedAt: !3272)
!3307 = !DILocation(line: 347, column: 3, scope: !3304, inlinedAt: !3272)
!3308 = !DILocation(line: 349, column: 6, scope: !3270, inlinedAt: !3272)
!3309 = !DILocation(line: 351, column: 13, scope: !3310, inlinedAt: !3272)
!3310 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 350, column: 2)
!3311 = !DILocation(line: 352, column: 7, scope: !3310, inlinedAt: !3272)
!3312 = !DILocation(line: 352, column: 16, scope: !3310, inlinedAt: !3272)
!3313 = !DILocation(line: 354, column: 9, scope: !3314, inlinedAt: !3272)
!3314 = distinct !DILexicalBlock(scope: !3310, file: !41, line: 353, column: 3)
!3315 = !DILocation(line: 354, column: 27, scope: !3314, inlinedAt: !3272)
!3316 = !DILocation(line: 355, column: 11, scope: !3314, inlinedAt: !3272)
!3317 = !DILocation(line: 357, column: 7, scope: !3310, inlinedAt: !3272)
!3318 = !DILocation(line: 357, column: 16, scope: !3310, inlinedAt: !3272)
!3319 = !DILocation(line: 357, column: 34, scope: !3310, inlinedAt: !3272)
!3320 = !DILocation(line: 357, column: 42, scope: !3310, inlinedAt: !3272)
!3321 = !DILocation(line: 357, column: 40, scope: !3310, inlinedAt: !3272)
!3322 = !DILocation(line: 357, column: 30, scope: !3310, inlinedAt: !3272)
!3323 = !DILocation(line: 359, column: 4, scope: !3324, inlinedAt: !3272)
!3324 = distinct !DILexicalBlock(scope: !3310, file: !41, line: 358, column: 3)
!3325 = !DILocation(line: 360, column: 16, scope: !3324, inlinedAt: !3272)
!3326 = !DILocation(line: 361, column: 4, scope: !3324, inlinedAt: !3272)
!3327 = !DILocation(line: 361, column: 11, scope: !3328, inlinedAt: !3272)
!3328 = distinct !DILexicalBlock(scope: !3324, file: !41, line: 361, column: 4)
!3329 = !DILocation(line: 361, column: 24, scope: !3328, inlinedAt: !3272)
!3330 = !DILocation(line: 361, column: 38, scope: !3328, inlinedAt: !3272)
!3331 = !DILocation(line: 361, column: 46, scope: !3328, inlinedAt: !3272)
!3332 = !DILocation(line: 361, column: 44, scope: !3328, inlinedAt: !3272)
!3333 = !DILocation(line: 361, column: 34, scope: !3328, inlinedAt: !3272)
!3334 = !DILocation(line: 363, column: 5, scope: !3335, inlinedAt: !3272)
!3335 = distinct !DILexicalBlock(scope: !3328, file: !41, line: 362, column: 4)
!3336 = !DILocation(line: 368, column: 2, scope: !3270, inlinedAt: !3272)
!3337 = !DILocation(line: 368, column: 10, scope: !3338, inlinedAt: !3272)
!3338 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 368, column: 2)
!3339 = !DILocation(line: 368, column: 30, scope: !3338, inlinedAt: !3272)
!3340 = !DILocation(line: 368, column: 53, scope: !3338, inlinedAt: !3272)
!3341 = !DILocation(line: 370, column: 7, scope: !3342, inlinedAt: !3272)
!3342 = distinct !DILexicalBlock(scope: !3338, file: !41, line: 369, column: 2)
!3343 = !DILocation(line: 372, column: 8, scope: !3344, inlinedAt: !3272)
!3344 = distinct !DILexicalBlock(scope: !3342, file: !41, line: 371, column: 3)
!3345 = !DILocation(line: 372, column: 24, scope: !3344, inlinedAt: !3272)
!3346 = !DILocation(line: 373, column: 14, scope: !3344, inlinedAt: !3272)
!3347 = !DILocation(line: 374, column: 9, scope: !3344, inlinedAt: !3272)
!3348 = !DILocation(line: 378, column: 16, scope: !3349, inlinedAt: !3272)
!3349 = distinct !DILexicalBlock(scope: !3342, file: !41, line: 377, column: 3)
!3350 = !DILocalVariable(name: "d", scope: !3349, file: !2, line: 379, type: !18, align: 4)
!3351 = !DILocation(line: 379, column: 8, scope: !3349, inlinedAt: !3272)
!3352 = !DILocation(line: 380, column: 9, scope: !3353, inlinedAt: !3272)
!3353 = distinct !DILexicalBlock(scope: !3349, file: !41, line: 380, column: 5)
!3354 = !DILocation(line: 380, column: 26, scope: !3353, inlinedAt: !3272)
!3355 = !DILocation(line: 381, column: 12, scope: !3353, inlinedAt: !3272)
!3356 = !DILocation(line: 385, column: 10, scope: !3357, inlinedAt: !3272)
!3357 = distinct !DILexicalBlock(scope: !3349, file: !41, line: 383, column: 4)
!3358 = !DILocation(line: 386, column: 10, scope: !3359, inlinedAt: !3272)
!3359 = distinct !DILexicalBlock(scope: !3357, file: !41, line: 386, column: 6)
!3360 = !DILocation(line: 386, column: 19, scope: !3359, inlinedAt: !3272)
!3361 = !DILocation(line: 387, column: 10, scope: !3357, inlinedAt: !3272)
!3362 = !DILocation(line: 388, column: 6, scope: !3363, inlinedAt: !3272)
!3363 = distinct !DILexicalBlock(scope: !3357, file: !41, line: 388, column: 6)
!3364 = !DILocation(line: 388, column: 11, scope: !3363, inlinedAt: !3272)
!3365 = !DILocation(line: 388, column: 16, scope: !3363, inlinedAt: !3272)
!3366 = !DILocation(line: 389, column: 17, scope: !3363, inlinedAt: !3272)
!3367 = !DILocation(line: 390, column: 10, scope: !3357, inlinedAt: !3272)
!3368 = !DILocation(line: 390, column: 16, scope: !3357, inlinedAt: !3272)
!3369 = !DILocation(line: 391, column: 6, scope: !3370, inlinedAt: !3272)
!3370 = distinct !DILexicalBlock(scope: !3357, file: !41, line: 391, column: 6)
!3371 = !DILocation(line: 391, column: 17, scope: !3370, inlinedAt: !3272)
!3372 = !DILocation(line: 391, column: 11, scope: !3370, inlinedAt: !3272)
!3373 = !DILocation(line: 392, column: 17, scope: !3370, inlinedAt: !3272)
!3374 = !DILocation(line: 394, column: 4, scope: !3349, inlinedAt: !3272)
!3375 = !DILocation(line: 396, column: 7, scope: !3342, inlinedAt: !3272)
!3376 = !DILocation(line: 396, column: 16, scope: !3342, inlinedAt: !3272)
!3377 = !DILocation(line: 396, column: 27, scope: !3342, inlinedAt: !3272)
!3378 = !DILocation(line: 397, column: 7, scope: !3342, inlinedAt: !3272)
!3379 = !DILocation(line: 397, column: 15, scope: !3342, inlinedAt: !3272)
!3380 = !DILocation(line: 397, column: 13, scope: !3342, inlinedAt: !3272)
!3381 = !DILocation(line: 399, column: 7, scope: !3270, inlinedAt: !3272)
!3382 = !DILocation(line: 399, column: 25, scope: !3270, inlinedAt: !3272)
!3383 = !DILocation(line: 400, column: 7, scope: !3270, inlinedAt: !3272)
!3384 = !DILocation(line: 400, column: 21, scope: !3270, inlinedAt: !3272)
!3385 = !DILocation(line: 401, column: 2, scope: !3270, inlinedAt: !3272)
!3386 = !DILocation(line: 401, column: 9, scope: !3387, inlinedAt: !3272)
!3387 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 401, column: 2)
!3388 = !DILocation(line: 401, column: 23, scope: !3387, inlinedAt: !3272)
!3389 = !DILocation(line: 401, column: 17, scope: !3387, inlinedAt: !3272)
!3390 = !DILocalVariable(name: "e2", scope: !3270, file: !2, line: 403, type: !345, align: 8)
!3391 = !DILocation(line: 403, column: 7, scope: !3270, inlinedAt: !3272)
!3392 = !DILocation(line: 404, column: 7, scope: !3270, inlinedAt: !3272)
!3393 = !DILocalVariable(name: "e2val", scope: !3394, file: !2, line: 406, type: !345, align: 8)
!3394 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 405, column: 2)
!3395 = !DILocation(line: 406, column: 8, scope: !3394, inlinedAt: !3272)
!3396 = !DILocation(line: 406, column: 39, scope: !3394, inlinedAt: !3272)
!3397 = !DILocation(line: 406, column: 45, scope: !3394, inlinedAt: !3272)
!3398 = !DILocation(line: 406, column: 32, scope: !3394, inlinedAt: !3272)
!3399 = !DILocation(line: 406, column: 16, scope: !3394, inlinedAt: !3272)
!3400 = !DILocation(line: 406, column: 63, scope: !3394, inlinedAt: !3272)
!3401 = !DILocation(line: 407, column: 8, scope: !3394, inlinedAt: !3272)
!3402 = !DILocation(line: 409, column: 2, scope: !3270, inlinedAt: !3272)
!3403 = !DILocation(line: 409, column: 12, scope: !3270, inlinedAt: !3272)
!3404 = !DILocation(line: 409, column: 8, scope: !3270, inlinedAt: !3272)
!3405 = !DILocation(line: 410, column: 6, scope: !3270, inlinedAt: !3272)
!3406 = !DILocation(line: 410, column: 17, scope: !3270, inlinedAt: !3272)
!3407 = !DILocation(line: 411, column: 6, scope: !3270, inlinedAt: !3272)
!3408 = !DILocation(line: 411, column: 26, scope: !3270, inlinedAt: !3272)
!3409 = !DILocation(line: 412, column: 6, scope: !3270, inlinedAt: !3272)
!3410 = !DILocation(line: 412, column: 53, scope: !3270, inlinedAt: !3272)
!3411 = !DILocation(line: 414, column: 2, scope: !3270, inlinedAt: !3272)
!3412 = !DILocation(line: 414, column: 9, scope: !3413, inlinedAt: !3272)
!3413 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 414, column: 2)
!3414 = !DILocation(line: 416, column: 7, scope: !3415, inlinedAt: !3272)
!3415 = distinct !DILexicalBlock(scope: !3413, file: !41, line: 415, column: 2)
!3416 = !DILocation(line: 418, column: 4, scope: !3417, inlinedAt: !3272)
!3417 = distinct !DILexicalBlock(scope: !3415, file: !41, line: 417, column: 3)
!3418 = !DILocation(line: 418, column: 9, scope: !3417, inlinedAt: !3272)
!3419 = !DILocation(line: 419, column: 4, scope: !3417, inlinedAt: !3272)
!3420 = !DILocation(line: 419, column: 9, scope: !3417, inlinedAt: !3272)
!3421 = !DILocation(line: 423, column: 4, scope: !3422, inlinedAt: !3272)
!3422 = distinct !DILexicalBlock(scope: !3415, file: !41, line: 422, column: 3)
!3423 = !DILocation(line: 423, column: 9, scope: !3422, inlinedAt: !3272)
!3424 = !DILocation(line: 424, column: 4, scope: !3422, inlinedAt: !3272)
!3425 = !DILocation(line: 424, column: 9, scope: !3422, inlinedAt: !3272)
!3426 = !DILocation(line: 426, column: 3, scope: !3415, inlinedAt: !3272)
!3427 = !DILocalVariable(name: "bits", scope: !3270, file: !2, line: 428, type: !18, align: 4)
!3428 = !DILocation(line: 428, column: 6, scope: !3270, inlinedAt: !3272)
!3429 = !DILocation(line: 428, column: 13, scope: !3270, inlinedAt: !3272)
!3430 = !DILocation(line: 429, column: 19, scope: !3270, inlinedAt: !3272)
!3431 = !DILocation(line: 429, column: 14, scope: !3270, inlinedAt: !3272)
!3432 = !DILocation(line: 429, column: 6, scope: !3270, inlinedAt: !3272)
!3433 = !DILocation(line: 431, column: 21, scope: !3434, inlinedAt: !3272)
!3434 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 430, column: 2)
!3435 = !DILocation(line: 431, column: 16, scope: !3434, inlinedAt: !3272)
!3436 = !DILocation(line: 431, column: 11, scope: !3434, inlinedAt: !3272)
!3437 = !DILocation(line: 432, column: 7, scope: !3434, inlinedAt: !3272)
!3438 = !DILocation(line: 432, column: 24, scope: !3434, inlinedAt: !3272)
!3439 = !DILocalVariable(name: "bias", scope: !3270, file: !2, line: 434, type: !2464, align: 8)
!3440 = !DILocation(line: 434, column: 9, scope: !3270, inlinedAt: !3272)
!3441 = !DILocation(line: 435, column: 6, scope: !3270, inlinedAt: !3272)
!3442 = !DILocation(line: 437, column: 70, scope: !3443, inlinedAt: !3272)
!3443 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 436, column: 2)
!3444 = !DILocation(line: 437, column: 41, scope: !3443, inlinedAt: !3272)
!3445 = !DILocation(line: 1061, column: 52, scope: !3446, inlinedAt: !3447)
!3446 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3447 = !DILocation(line: 437, column: 25, scope: !3443, inlinedAt: !3272)
!3448 = !DILocation(line: 1061, column: 41, scope: !3446, inlinedAt: !3447)
!3449 = !DILocation(line: 437, column: 82, scope: !3443, inlinedAt: !3272)
!3450 = !DILocation(line: 42, column: 10, scope: !3451, inlinedAt: !3452)
!3451 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2689, file: !2689, line: 30, scopeLine: 30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3452 = !DILocation(line: 310, column: 40, scope: !3453, inlinedAt: !3454)
!3453 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2683, file: !2683, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3454 = !DILocation(line: 437, column: 10, scope: !3443, inlinedAt: !3272)
!3455 = !DILocation(line: 310, column: 77, scope: !3453, inlinedAt: !3454)
!3456 = !DILocation(line: 440, column: 6, scope: !3270, inlinedAt: !3272)
!3457 = !DILocation(line: 440, column: 19, scope: !3270, inlinedAt: !3272)
!3458 = !DILocation(line: 440, column: 26, scope: !3270, inlinedAt: !3272)
!3459 = !DILocation(line: 440, column: 24, scope: !3270, inlinedAt: !3272)
!3460 = !DILocation(line: 442, column: 3, scope: !3461, inlinedAt: !3272)
!3461 = distinct !DILexicalBlock(scope: !3270, file: !41, line: 441, column: 2)
!3462 = !DILocation(line: 443, column: 7, scope: !3461, inlinedAt: !3272)
!3463 = !DILocation(line: 445, column: 6, scope: !3270, inlinedAt: !3272)
!3464 = !DILocation(line: 445, column: 13, scope: !3270, inlinedAt: !3272)
!3465 = !DILocation(line: 445, column: 21, scope: !3270, inlinedAt: !3272)
!3466 = !DILocation(line: 445, column: 32, scope: !3270, inlinedAt: !3272)
!3467 = !DILocation(line: 445, column: 39, scope: !3270, inlinedAt: !3272)
!3468 = !DILocation(line: 446, column: 2, scope: !3270, inlinedAt: !3272)
!3469 = !DILocation(line: 446, column: 7, scope: !3270, inlinedAt: !3272)
!3470 = !DILocation(line: 447, column: 7, scope: !3270, inlinedAt: !3272)
!3471 = !DILocation(line: 447, column: 17, scope: !3270, inlinedAt: !3272)
!3472 = !DILocation(line: 449, column: 26, scope: !3270, inlinedAt: !3272)
!3473 = !DILocation(line: 1061, column: 52, scope: !3474, inlinedAt: !3475)
!3474 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3475 = !DILocation(line: 449, column: 9, scope: !3270, inlinedAt: !3272)
!3476 = !DILocation(line: 1061, column: 41, scope: !3474, inlinedAt: !3475)
!3477 = !DILocation(line: 35, column: 11, scope: !3478, inlinedAt: !3480)
!3478 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 38, column: 1)
!3479 = distinct !DISubprogram(name: "decfloat", linkageName: "decfloat", scope: !41, file: !41, line: 37, scopeLine: 37, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3480 = !DILocation(line: 485, column: 10, scope: !3232, inlinedAt: !3234)
!3481 = !DILocalVariable(name: "x", scope: !3479, file: !2, line: 39, type: !2720, align: 4)
!3482 = !DILocation(line: 39, column: 13, scope: !3479, inlinedAt: !3480)
!3483 = !DILocalVariable(name: "emax", scope: !3479, file: !2, line: 41, type: !18, align: 4)
!3484 = !DILocation(line: 41, column: 6, scope: !3479, inlinedAt: !3480)
!3485 = !DILocation(line: 41, column: 13, scope: !3479, inlinedAt: !3480)
!3486 = !DILocalVariable(name: "index", scope: !3479, file: !2, line: 44, type: !66, align: 8)
!3487 = !DILocation(line: 44, column: 6, scope: !3479, inlinedAt: !3480)
!3488 = !DILocalVariable(name: "got_digit", scope: !3479, file: !2, line: 45, type: !145, align: 1)
!3489 = !DILocation(line: 45, column: 7, scope: !3479, inlinedAt: !3480)
!3490 = !DILocation(line: 45, column: 19, scope: !3479, inlinedAt: !3480)
!3491 = !DILocation(line: 45, column: 25, scope: !3479, inlinedAt: !3480)
!3492 = !DILocalVariable(name: "got_rad", scope: !3479, file: !2, line: 46, type: !145, align: 1)
!3493 = !DILocation(line: 46, column: 7, scope: !3479, inlinedAt: !3480)
!3494 = !DILocalVariable(name: "lrp", scope: !3479, file: !2, line: 47, type: !345, align: 8)
!3495 = !DILocation(line: 47, column: 7, scope: !3479, inlinedAt: !3480)
!3496 = !DILocalVariable(name: "dc", scope: !3479, file: !2, line: 47, type: !345, align: 8)
!3497 = !DILocation(line: 47, column: 12, scope: !3479, inlinedAt: !3480)
!3498 = !DILocalVariable(name: "k", scope: !3479, file: !2, line: 48, type: !18, align: 4)
!3499 = !DILocation(line: 48, column: 6, scope: !3479, inlinedAt: !3480)
!3500 = !DILocalVariable(name: "j", scope: !3479, file: !2, line: 48, type: !18, align: 4)
!3501 = !DILocation(line: 48, column: 9, scope: !3479, inlinedAt: !3480)
!3502 = !DILocalVariable(name: "lnz", scope: !3479, file: !2, line: 48, type: !18, align: 4)
!3503 = !DILocation(line: 48, column: 12, scope: !3479, inlinedAt: !3480)
!3504 = !DILocalVariable(name: "len", scope: !3479, file: !2, line: 49, type: !66, align: 8)
!3505 = !DILocation(line: 49, column: 6, scope: !3479, inlinedAt: !3480)
!3506 = !DILocation(line: 49, column: 12, scope: !3479, inlinedAt: !3480)
!3507 = !DILocalVariable(name: "last_char", scope: !3479, file: !2, line: 50, type: !66, align: 8)
!3508 = !DILocation(line: 50, column: 6, scope: !3479, inlinedAt: !3480)
!3509 = !DILocation(line: 50, column: 18, scope: !3479, inlinedAt: !3480)
!3510 = !DILocation(line: 52, column: 9, scope: !3479, inlinedAt: !3480)
!3511 = !DILocalVariable(name: "c", scope: !3479, file: !2, line: 54, type: !64, align: 1)
!3512 = !DILocation(line: 54, column: 7, scope: !3479, inlinedAt: !3480)
!3513 = !DILocation(line: 56, column: 2, scope: !3479, inlinedAt: !3480)
!3514 = !DILocation(line: 56, column: 14, scope: !3515, inlinedAt: !3480)
!3515 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 56, column: 2)
!3516 = !DILocation(line: 56, column: 20, scope: !3515, inlinedAt: !3480)
!3517 = !DILocation(line: 56, column: 10, scope: !3515, inlinedAt: !3480)
!3518 = !DILocation(line: 58, column: 7, scope: !3519, inlinedAt: !3480)
!3519 = distinct !DILexicalBlock(scope: !3515, file: !41, line: 57, column: 2)
!3520 = !DILocation(line: 58, column: 16, scope: !3519, inlinedAt: !3480)
!3521 = !DILocation(line: 58, column: 34, scope: !3519, inlinedAt: !3480)
!3522 = !DILocation(line: 59, column: 3, scope: !3519, inlinedAt: !3480)
!3523 = !DILocation(line: 62, column: 6, scope: !3479, inlinedAt: !3480)
!3524 = !DILocation(line: 64, column: 13, scope: !3525, inlinedAt: !3480)
!3525 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 63, column: 2)
!3526 = !DILocation(line: 65, column: 7, scope: !3525, inlinedAt: !3480)
!3527 = !DILocation(line: 65, column: 16, scope: !3525, inlinedAt: !3480)
!3528 = !DILocation(line: 67, column: 9, scope: !3529, inlinedAt: !3480)
!3529 = distinct !DILexicalBlock(scope: !3525, file: !41, line: 66, column: 3)
!3530 = !DILocation(line: 67, column: 27, scope: !3529, inlinedAt: !3480)
!3531 = !DILocation(line: 68, column: 11, scope: !3529, inlinedAt: !3480)
!3532 = !DILocation(line: 70, column: 7, scope: !3525, inlinedAt: !3480)
!3533 = !DILocation(line: 70, column: 16, scope: !3525, inlinedAt: !3480)
!3534 = !DILocation(line: 70, column: 34, scope: !3525, inlinedAt: !3480)
!3535 = !DILocation(line: 70, column: 42, scope: !3525, inlinedAt: !3480)
!3536 = !DILocation(line: 70, column: 40, scope: !3525, inlinedAt: !3480)
!3537 = !DILocation(line: 70, column: 30, scope: !3525, inlinedAt: !3480)
!3538 = !DILocation(line: 72, column: 4, scope: !3539, inlinedAt: !3480)
!3539 = distinct !DILexicalBlock(scope: !3525, file: !41, line: 71, column: 3)
!3540 = !DILocation(line: 73, column: 16, scope: !3539, inlinedAt: !3480)
!3541 = !DILocation(line: 74, column: 4, scope: !3539, inlinedAt: !3480)
!3542 = !DILocation(line: 74, column: 11, scope: !3543, inlinedAt: !3480)
!3543 = distinct !DILexicalBlock(scope: !3539, file: !41, line: 74, column: 4)
!3544 = !DILocation(line: 74, column: 24, scope: !3543, inlinedAt: !3480)
!3545 = !DILocation(line: 74, column: 38, scope: !3543, inlinedAt: !3480)
!3546 = !DILocation(line: 74, column: 46, scope: !3543, inlinedAt: !3480)
!3547 = !DILocation(line: 74, column: 44, scope: !3543, inlinedAt: !3480)
!3548 = !DILocation(line: 74, column: 34, scope: !3543, inlinedAt: !3480)
!3549 = !DILocation(line: 76, column: 5, scope: !3550, inlinedAt: !3480)
!3550 = distinct !DILexicalBlock(scope: !3543, file: !41, line: 75, column: 4)
!3551 = !DILocation(line: 81, column: 2, scope: !3479, inlinedAt: !3480)
!3552 = !DILocation(line: 81, column: 9, scope: !3553, inlinedAt: !3480)
!3553 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 81, column: 2)
!3554 = !DILocation(line: 81, column: 26, scope: !3553, inlinedAt: !3480)
!3555 = !DILocation(line: 85, column: 9, scope: !3556, inlinedAt: !3480)
!3556 = distinct !DILexicalBlock(scope: !3557, file: !41, line: 83, column: 3)
!3557 = distinct !DILexicalBlock(scope: !3553, file: !41, line: 82, column: 2)
!3558 = !DILocation(line: 86, column: 9, scope: !3559, inlinedAt: !3480)
!3559 = distinct !DILexicalBlock(scope: !3556, file: !41, line: 86, column: 5)
!3560 = !DILocation(line: 86, column: 25, scope: !3559, inlinedAt: !3480)
!3561 = !DILocation(line: 87, column: 15, scope: !3559, inlinedAt: !3480)
!3562 = !DILocation(line: 88, column: 11, scope: !3559, inlinedAt: !3480)
!3563 = !DILocation(line: 89, column: 9, scope: !3556, inlinedAt: !3480)
!3564 = !DILocation(line: 90, column: 5, scope: !3565, inlinedAt: !3480)
!3565 = distinct !DILexicalBlock(scope: !3556, file: !41, line: 90, column: 5)
!3566 = !DILocation(line: 91, column: 9, scope: !3565, inlinedAt: !3480)
!3567 = !DILocation(line: 91, column: 26, scope: !3565, inlinedAt: !3480)
!3568 = !DILocation(line: 92, column: 9, scope: !3565, inlinedAt: !3480)
!3569 = !DILocation(line: 94, column: 8, scope: !3570, inlinedAt: !3480)
!3570 = distinct !DILexicalBlock(scope: !3565, file: !41, line: 93, column: 5)
!3571 = !DILocation(line: 94, column: 15, scope: !3570, inlinedAt: !3480)
!3572 = !DILocation(line: 94, column: 13, scope: !3570, inlinedAt: !3480)
!3573 = !DILocation(line: 94, column: 25, scope: !3570, inlinedAt: !3480)
!3574 = !DILocation(line: 98, column: 8, scope: !3575, inlinedAt: !3480)
!3575 = distinct !DILexicalBlock(scope: !3565, file: !41, line: 97, column: 5)
!3576 = !DILocation(line: 98, column: 13, scope: !3575, inlinedAt: !3480)
!3577 = !DILocation(line: 100, column: 11, scope: !3565, inlinedAt: !3480)
!3578 = !DILocation(line: 100, column: 9, scope: !3565, inlinedAt: !3480)
!3579 = !DILocation(line: 102, column: 6, scope: !3580, inlinedAt: !3480)
!3580 = distinct !DILexicalBlock(scope: !3565, file: !41, line: 101, column: 5)
!3581 = !DILocation(line: 103, column: 10, scope: !3580, inlinedAt: !3480)
!3582 = !DILocation(line: 105, column: 17, scope: !3565, inlinedAt: !3480)
!3583 = !DILocation(line: 107, column: 5, scope: !3584, inlinedAt: !3480)
!3584 = distinct !DILexicalBlock(scope: !3556, file: !41, line: 107, column: 5)
!3585 = !DILocation(line: 108, column: 9, scope: !3584, inlinedAt: !3480)
!3586 = !DILocation(line: 108, column: 21, scope: !3584, inlinedAt: !3480)
!3587 = !DILocation(line: 108, column: 19, scope: !3584, inlinedAt: !3480)
!3588 = !DILocation(line: 111, column: 7, scope: !3557, inlinedAt: !3480)
!3589 = !DILocation(line: 111, column: 16, scope: !3557, inlinedAt: !3480)
!3590 = !DILocation(line: 111, column: 27, scope: !3557, inlinedAt: !3480)
!3591 = !DILocation(line: 112, column: 10, scope: !3557, inlinedAt: !3480)
!3592 = !DILocation(line: 112, column: 18, scope: !3557, inlinedAt: !3480)
!3593 = !DILocation(line: 113, column: 7, scope: !3557, inlinedAt: !3480)
!3594 = !DILocation(line: 113, column: 15, scope: !3557, inlinedAt: !3480)
!3595 = !DILocation(line: 113, column: 13, scope: !3557, inlinedAt: !3480)
!3596 = !DILocation(line: 115, column: 7, scope: !3479, inlinedAt: !3480)
!3597 = !DILocation(line: 115, column: 22, scope: !3479, inlinedAt: !3480)
!3598 = !DILocation(line: 116, column: 7, scope: !3479, inlinedAt: !3480)
!3599 = !DILocation(line: 116, column: 25, scope: !3479, inlinedAt: !3480)
!3600 = !DILocation(line: 117, column: 7, scope: !3479, inlinedAt: !3480)
!3601 = !DILocation(line: 119, column: 7, scope: !3602, inlinedAt: !3480)
!3602 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 118, column: 2)
!3603 = !DILocation(line: 119, column: 20, scope: !3602, inlinedAt: !3480)
!3604 = !DILocation(line: 119, column: 34, scope: !3602, inlinedAt: !3480)
!3605 = !DILocalVariable(name: "e10", scope: !3602, file: !2, line: 120, type: !345, align: 8)
!3606 = !DILocation(line: 120, column: 8, scope: !3602, inlinedAt: !3480)
!3607 = !DILocation(line: 120, column: 37, scope: !3602, inlinedAt: !3480)
!3608 = !DILocation(line: 120, column: 43, scope: !3602, inlinedAt: !3480)
!3609 = !DILocation(line: 120, column: 30, scope: !3602, inlinedAt: !3480)
!3610 = !DILocation(line: 120, column: 14, scope: !3602, inlinedAt: !3480)
!3611 = !DILocation(line: 120, column: 60, scope: !3602, inlinedAt: !3480)
!3612 = !DILocation(line: 121, column: 3, scope: !3602, inlinedAt: !3480)
!3613 = !DILocation(line: 121, column: 10, scope: !3602, inlinedAt: !3480)
!3614 = !DILocation(line: 123, column: 11, scope: !3479, inlinedAt: !3480)
!3615 = !DILocation(line: 123, column: 20, scope: !3479, inlinedAt: !3480)
!3616 = !DILocation(line: 125, column: 10, scope: !3617, inlinedAt: !3480)
!3617 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 124, column: 2)
!3618 = !DILocation(line: 128, column: 9, scope: !3479, inlinedAt: !3480)
!3619 = !DILocation(line: 128, column: 20, scope: !3479, inlinedAt: !3480)
!3620 = !DILocation(line: 131, column: 6, scope: !3479, inlinedAt: !3480)
!3621 = !DILocation(line: 131, column: 13, scope: !3479, inlinedAt: !3480)
!3622 = !DILocation(line: 131, column: 19, scope: !3479, inlinedAt: !3480)
!3623 = !DILocation(line: 131, column: 31, scope: !3479, inlinedAt: !3480)
!3624 = !DILocation(line: 131, column: 54, scope: !3479, inlinedAt: !3480)
!3625 = !DILocation(line: 131, column: 46, scope: !3479, inlinedAt: !3480)
!3626 = !DILocation(line: 131, column: 80, scope: !3479, inlinedAt: !3480)
!3627 = !DILocation(line: 131, column: 97, scope: !3479, inlinedAt: !3480)
!3628 = !DILocation(line: 132, column: 6, scope: !3479, inlinedAt: !3480)
!3629 = !DILocation(line: 132, column: 32, scope: !3479, inlinedAt: !3480)
!3630 = !DILocation(line: 133, column: 6, scope: !3479, inlinedAt: !3480)
!3631 = !DILocation(line: 133, column: 54, scope: !3479, inlinedAt: !3480)
!3632 = !DILocation(line: 136, column: 6, scope: !3479, inlinedAt: !3480)
!3633 = !DILocation(line: 138, column: 3, scope: !3634, inlinedAt: !3480)
!3634 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 137, column: 2)
!3635 = !DILocation(line: 138, column: 10, scope: !3636, inlinedAt: !3480)
!3636 = distinct !DILexicalBlock(scope: !3634, file: !41, line: 138, column: 3)
!3637 = !DILocation(line: 138, column: 24, scope: !3636, inlinedAt: !3480)
!3638 = !DILocation(line: 138, column: 22, scope: !3636, inlinedAt: !3480)
!3639 = !DILocation(line: 138, column: 17, scope: !3636, inlinedAt: !3480)
!3640 = !DILocation(line: 139, column: 3, scope: !3634, inlinedAt: !3480)
!3641 = !DILocation(line: 140, column: 7, scope: !3634, inlinedAt: !3480)
!3642 = !DILocalVariable(name: "a", scope: !3479, file: !2, line: 143, type: !18, align: 4)
!3643 = !DILocation(line: 143, column: 6, scope: !3479, inlinedAt: !3480)
!3644 = !DILocalVariable(name: "z", scope: !3479, file: !2, line: 144, type: !18, align: 4)
!3645 = !DILocation(line: 144, column: 6, scope: !3479, inlinedAt: !3480)
!3646 = !DILocation(line: 144, column: 10, scope: !3479, inlinedAt: !3480)
!3647 = !DILocalVariable(name: "e2", scope: !3479, file: !2, line: 145, type: !18, align: 4)
!3648 = !DILocation(line: 145, column: 6, scope: !3479, inlinedAt: !3480)
!3649 = !DILocalVariable(name: "rp", scope: !3479, file: !2, line: 146, type: !345, align: 8)
!3650 = !DILocation(line: 146, column: 7, scope: !3479, inlinedAt: !3480)
!3651 = !DILocation(line: 146, column: 12, scope: !3479, inlinedAt: !3480)
!3652 = !DILocation(line: 149, column: 6, scope: !3479, inlinedAt: !3480)
!3653 = !DILocation(line: 149, column: 17, scope: !3479, inlinedAt: !3480)
!3654 = !DILocation(line: 149, column: 24, scope: !3479, inlinedAt: !3480)
!3655 = !DILocation(line: 149, column: 30, scope: !3479, inlinedAt: !3480)
!3656 = !DILocation(line: 151, column: 7, scope: !3657, inlinedAt: !3480)
!3657 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 150, column: 2)
!3658 = !DILocation(line: 151, column: 23, scope: !3657, inlinedAt: !3480)
!3659 = !DILocation(line: 151, column: 40, scope: !3657, inlinedAt: !3480)
!3660 = !DILocation(line: 152, column: 7, scope: !3657, inlinedAt: !3480)
!3661 = !DILocation(line: 152, column: 22, scope: !3657, inlinedAt: !3480)
!3662 = !DILocation(line: 152, column: 39, scope: !3657, inlinedAt: !3480)
!3663 = !DILocation(line: 152, column: 53, scope: !3657, inlinedAt: !3480)
!3664 = !DILocation(line: 152, column: 49, scope: !3657, inlinedAt: !3480)
!3665 = !DILocalVariable(name: "bitlim", scope: !3657, file: !2, line: 153, type: !18, align: 4)
!3666 = !DILocation(line: 153, column: 7, scope: !3657, inlinedAt: !3480)
!3667 = !DILocation(line: 153, column: 34, scope: !3657, inlinedAt: !3480)
!3668 = !DILocation(line: 153, column: 29, scope: !3657, inlinedAt: !3480)
!3669 = !DILocation(line: 153, column: 24, scope: !3657, inlinedAt: !3480)
!3670 = !DILocation(line: 153, column: 16, scope: !3657, inlinedAt: !3480)
!3671 = !DILocation(line: 154, column: 7, scope: !3657, inlinedAt: !3480)
!3672 = !DILocation(line: 154, column: 24, scope: !3657, inlinedAt: !3480)
!3673 = !DILocation(line: 154, column: 30, scope: !3657, inlinedAt: !3480)
!3674 = !DILocation(line: 154, column: 22, scope: !3657, inlinedAt: !3480)
!3675 = !DILocation(line: 154, column: 50, scope: !3657, inlinedAt: !3480)
!3676 = !DILocation(line: 154, column: 67, scope: !3657, inlinedAt: !3480)
!3677 = !DILocation(line: 154, column: 77, scope: !3657, inlinedAt: !3480)
!3678 = !DILocation(line: 158, column: 6, scope: !3479, inlinedAt: !3480)
!3679 = !DILocalVariable(name: "rpm9", scope: !3680, file: !2, line: 160, type: !345, align: 8)
!3680 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 159, column: 2)
!3681 = !DILocation(line: 160, column: 8, scope: !3680, inlinedAt: !3480)
!3682 = !DILocation(line: 160, column: 15, scope: !3680, inlinedAt: !3480)
!3683 = !DILocation(line: 160, column: 25, scope: !3680, inlinedAt: !3480)
!3684 = !DILocation(line: 160, column: 34, scope: !3680, inlinedAt: !3480)
!3685 = !DILocalVariable(name: "p10", scope: !3680, file: !2, line: 161, type: !18, align: 4)
!3686 = !DILocation(line: 161, column: 7, scope: !3680, inlinedAt: !3480)
!3687 = !DILocation(line: 161, column: 22, scope: !3680, inlinedAt: !3480)
!3688 = !DILocation(line: 161, column: 18, scope: !3680, inlinedAt: !3480)
!3689 = !DILocalVariable(name: "carry", scope: !3680, file: !2, line: 162, type: !3, align: 4)
!3690 = !DILocation(line: 162, column: 8, scope: !3680, inlinedAt: !3480)
!3691 = !DILocation(line: 162, column: 16, scope: !3680, inlinedAt: !3480)
!3692 = !DILocation(line: 163, column: 12, scope: !3693, inlinedAt: !3480)
!3693 = distinct !DILexicalBlock(scope: !3680, file: !41, line: 163, column: 3)
!3694 = !DILocation(line: 163, column: 15, scope: !3693, inlinedAt: !3480)
!3695 = !DILocation(line: 163, column: 20, scope: !3693, inlinedAt: !3480)
!3696 = !DILocalVariable(name: "tmp", scope: !3697, file: !2, line: 165, type: !3, align: 4)
!3697 = distinct !DILexicalBlock(scope: !3693, file: !41, line: 164, column: 3)
!3698 = !DILocation(line: 165, column: 9, scope: !3697, inlinedAt: !3480)
!3699 = !DILocation(line: 165, column: 17, scope: !3697, inlinedAt: !3480)
!3700 = !DILocation(line: 165, column: 22, scope: !3697, inlinedAt: !3480)
!3701 = !DILocation(line: 165, column: 15, scope: !3697, inlinedAt: !3480)
!3702 = !DILocation(line: 166, column: 6, scope: !3697, inlinedAt: !3480)
!3703 = !DILocation(line: 166, column: 13, scope: !3697, inlinedAt: !3480)
!3704 = !DILocation(line: 166, column: 18, scope: !3697, inlinedAt: !3480)
!3705 = !DILocation(line: 166, column: 11, scope: !3697, inlinedAt: !3480)
!3706 = !DILocation(line: 166, column: 24, scope: !3697, inlinedAt: !3480)
!3707 = !DILocation(line: 167, column: 25, scope: !3697, inlinedAt: !3480)
!3708 = !DILocation(line: 167, column: 12, scope: !3697, inlinedAt: !3480)
!3709 = !DILocation(line: 167, column: 31, scope: !3697, inlinedAt: !3480)
!3710 = !DILocation(line: 168, column: 8, scope: !3697, inlinedAt: !3480)
!3711 = !DILocation(line: 168, column: 13, scope: !3697, inlinedAt: !3480)
!3712 = !DILocation(line: 168, column: 21, scope: !3697, inlinedAt: !3480)
!3713 = !DILocation(line: 170, column: 10, scope: !3714, inlinedAt: !3480)
!3714 = distinct !DILexicalBlock(scope: !3697, file: !41, line: 169, column: 4)
!3715 = !DILocation(line: 171, column: 5, scope: !3714, inlinedAt: !3480)
!3716 = !DILocation(line: 163, column: 23, scope: !3693, inlinedAt: !3480)
!3717 = !DILocation(line: 174, column: 7, scope: !3680, inlinedAt: !3480)
!3718 = !DILocation(line: 174, column: 16, scope: !3680, inlinedAt: !3480)
!3719 = !DILocation(line: 174, column: 23, scope: !3680, inlinedAt: !3480)
!3720 = !DILocation(line: 175, column: 3, scope: !3680, inlinedAt: !3480)
!3721 = !DILocation(line: 175, column: 13, scope: !3680, inlinedAt: !3480)
!3722 = !DILocation(line: 175, column: 9, scope: !3680, inlinedAt: !3480)
!3723 = !DILocation(line: 179, column: 2, scope: !3479, inlinedAt: !3480)
!3724 = !DILocation(line: 179, column: 9, scope: !3725, inlinedAt: !3480)
!3725 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 179, column: 2)
!3726 = !DILocation(line: 179, column: 30, scope: !3725, inlinedAt: !3480)
!3727 = !DILocation(line: 179, column: 53, scope: !3725, inlinedAt: !3480)
!3728 = !DILocation(line: 179, column: 51, scope: !3725, inlinedAt: !3480)
!3729 = !DILocalVariable(name: "carry", scope: !3730, file: !2, line: 181, type: !3, align: 4)
!3730 = distinct !DILexicalBlock(scope: !3725, file: !41, line: 180, column: 2)
!3731 = !DILocation(line: 181, column: 8, scope: !3730, inlinedAt: !3480)
!3732 = !DILocation(line: 181, column: 16, scope: !3730, inlinedAt: !3480)
!3733 = !DILocation(line: 182, column: 3, scope: !3730, inlinedAt: !3480)
!3734 = !DILocation(line: 183, column: 13, scope: !3735, inlinedAt: !3480)
!3735 = distinct !DILexicalBlock(scope: !3730, file: !41, line: 183, column: 3)
!3736 = !DILocalVariable(name: "tmp", scope: !3737, file: !2, line: 185, type: !67, align: 8)
!3737 = distinct !DILexicalBlock(scope: !3735, file: !41, line: 184, column: 3)
!3738 = !DILocation(line: 185, column: 10, scope: !3737, inlinedAt: !3480)
!3739 = !DILocation(line: 185, column: 25, scope: !3737, inlinedAt: !3480)
!3740 = !DILocation(line: 185, column: 17, scope: !3737, inlinedAt: !3480)
!3741 = !DILocation(line: 185, column: 36, scope: !3737, inlinedAt: !3480)
!3742 = !DILocation(line: 186, column: 8, scope: !3737, inlinedAt: !3480)
!3743 = !DILocation(line: 188, column: 20, scope: !3744, inlinedAt: !3480)
!3744 = distinct !DILexicalBlock(scope: !3737, file: !41, line: 187, column: 4)
!3745 = !DILocation(line: 188, column: 14, scope: !3744, inlinedAt: !3480)
!3746 = !DILocation(line: 189, column: 7, scope: !3744, inlinedAt: !3480)
!3747 = !DILocation(line: 189, column: 19, scope: !3744, inlinedAt: !3480)
!3748 = !DILocation(line: 189, column: 13, scope: !3744, inlinedAt: !3480)
!3749 = !DILocation(line: 193, column: 13, scope: !3750, inlinedAt: !3480)
!3750 = distinct !DILexicalBlock(scope: !3737, file: !41, line: 192, column: 4)
!3751 = !DILocation(line: 194, column: 7, scope: !3750, inlinedAt: !3480)
!3752 = !DILocation(line: 194, column: 13, scope: !3750, inlinedAt: !3480)
!3753 = !DILocation(line: 196, column: 8, scope: !3737, inlinedAt: !3480)
!3754 = !DILocation(line: 196, column: 14, scope: !3737, inlinedAt: !3480)
!3755 = !DILocation(line: 196, column: 31, scope: !3737, inlinedAt: !3480)
!3756 = !DILocation(line: 196, column: 36, scope: !3737, inlinedAt: !3480)
!3757 = !DILocation(line: 196, column: 44, scope: !3737, inlinedAt: !3480)
!3758 = !DILocation(line: 196, column: 52, scope: !3737, inlinedAt: !3480)
!3759 = !DILocation(line: 197, column: 8, scope: !3737, inlinedAt: !3480)
!3760 = !DILocation(line: 197, column: 13, scope: !3737, inlinedAt: !3480)
!3761 = !DILocation(line: 197, column: 16, scope: !3737, inlinedAt: !3480)
!3762 = !DILocation(line: 183, column: 35, scope: !3735, inlinedAt: !3480)
!3763 = !DILocation(line: 199, column: 7, scope: !3730, inlinedAt: !3480)
!3764 = !DILocation(line: 201, column: 4, scope: !3765, inlinedAt: !3480)
!3765 = distinct !DILexicalBlock(scope: !3730, file: !41, line: 200, column: 3)
!3766 = !DILocation(line: 202, column: 9, scope: !3765, inlinedAt: !3480)
!3767 = !DILocation(line: 203, column: 8, scope: !3765, inlinedAt: !3480)
!3768 = !DILocation(line: 203, column: 13, scope: !3765, inlinedAt: !3480)
!3769 = !DILocation(line: 205, column: 10, scope: !3770, inlinedAt: !3480)
!3770 = distinct !DILexicalBlock(scope: !3765, file: !41, line: 204, column: 4)
!3771 = !DILocation(line: 206, column: 8, scope: !3770, inlinedAt: !3480)
!3772 = !DILocation(line: 206, column: 28, scope: !3770, inlinedAt: !3480)
!3773 = !DILocation(line: 206, column: 5, scope: !3770, inlinedAt: !3480)
!3774 = !DILocation(line: 208, column: 6, scope: !3765, inlinedAt: !3480)
!3775 = !DILocation(line: 208, column: 11, scope: !3765, inlinedAt: !3480)
!3776 = !DILocation(line: 213, column: 2, scope: !3479, inlinedAt: !3480)
!3777 = !DILocalVariable(name: "carry", scope: !3778, file: !2, line: 215, type: !3, align: 4)
!3778 = distinct !DILexicalBlock(scope: !3779, file: !41, line: 214, column: 2)
!3779 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 213, column: 2)
!3780 = !DILocation(line: 215, column: 8, scope: !3778, inlinedAt: !3480)
!3781 = !DILocation(line: 215, column: 16, scope: !3778, inlinedAt: !3480)
!3782 = !DILocalVariable(name: "sh", scope: !3778, file: !2, line: 216, type: !18, align: 4)
!3783 = !DILocation(line: 216, column: 7, scope: !3778, inlinedAt: !3480)
!3784 = !DILocation(line: 216, column: 12, scope: !3778, inlinedAt: !3480)
!3785 = !DILocalVariable(name: "i", scope: !3778, file: !2, line: 217, type: !18, align: 4)
!3786 = !DILocation(line: 217, column: 7, scope: !3778, inlinedAt: !3480)
!3787 = !DILocation(line: 218, column: 12, scope: !3788, inlinedAt: !3480)
!3788 = distinct !DILexicalBlock(scope: !3778, file: !41, line: 218, column: 3)
!3789 = !DILocation(line: 218, column: 15, scope: !3788, inlinedAt: !3480)
!3790 = !DILocation(line: 220, column: 9, scope: !3791, inlinedAt: !3480)
!3791 = distinct !DILexicalBlock(scope: !3788, file: !41, line: 219, column: 3)
!3792 = !DILocation(line: 220, column: 13, scope: !3791, inlinedAt: !3480)
!3793 = !DILocation(line: 221, column: 8, scope: !3791, inlinedAt: !3480)
!3794 = !DILocation(line: 221, column: 13, scope: !3791, inlinedAt: !3480)
!3795 = !DILocation(line: 221, column: 20, scope: !3791, inlinedAt: !3480)
!3796 = !DILocation(line: 221, column: 28, scope: !3791, inlinedAt: !3480)
!3797 = !DILocation(line: 221, column: 18, scope: !3791, inlinedAt: !3480)
!3798 = !DILocation(line: 223, column: 9, scope: !3799, inlinedAt: !3480)
!3799 = distinct !DILexicalBlock(scope: !3791, file: !41, line: 222, column: 4)
!3800 = !DILocation(line: 224, column: 5, scope: !3799, inlinedAt: !3480)
!3801 = !DILocation(line: 226, column: 11, scope: !3791, inlinedAt: !3480)
!3802 = !DILocation(line: 226, column: 15, scope: !3791, inlinedAt: !3480)
!3803 = !DILocation(line: 226, column: 31, scope: !3791, inlinedAt: !3480)
!3804 = !DILocation(line: 226, column: 8, scope: !3791, inlinedAt: !3480)
!3805 = !DILocation(line: 226, column: 35, scope: !3791, inlinedAt: !3480)
!3806 = !DILocation(line: 218, column: 28, scope: !3788, inlinedAt: !3480)
!3807 = !DILocation(line: 228, column: 7, scope: !3778, inlinedAt: !3480)
!3808 = !DILocation(line: 228, column: 23, scope: !3778, inlinedAt: !3480)
!3809 = !DILocation(line: 228, column: 42, scope: !3778, inlinedAt: !3480)
!3810 = !DILocation(line: 229, column: 7, scope: !3778, inlinedAt: !3480)
!3811 = !DILocation(line: 229, column: 34, scope: !3778, inlinedAt: !3480)
!3812 = !DILocation(line: 230, column: 3, scope: !3778, inlinedAt: !3480)
!3813 = !DILocation(line: 230, column: 9, scope: !3778, inlinedAt: !3480)
!3814 = !DILocation(line: 231, column: 12, scope: !3815, inlinedAt: !3480)
!3815 = distinct !DILexicalBlock(scope: !3778, file: !41, line: 231, column: 3)
!3816 = !DILocation(line: 231, column: 15, scope: !3815, inlinedAt: !3480)
!3817 = !DILocation(line: 231, column: 20, scope: !3815, inlinedAt: !3480)
!3818 = !DILocalVariable(name: "tmp", scope: !3819, file: !2, line: 233, type: !3, align: 4)
!3819 = distinct !DILexicalBlock(scope: !3815, file: !41, line: 232, column: 3)
!3820 = !DILocation(line: 233, column: 9, scope: !3819, inlinedAt: !3480)
!3821 = !DILocation(line: 233, column: 17, scope: !3819, inlinedAt: !3480)
!3822 = !DILocation(line: 233, column: 28, scope: !3819, inlinedAt: !3480)
!3823 = !DILocation(line: 233, column: 23, scope: !3819, inlinedAt: !3480)
!3824 = !DILocation(line: 233, column: 15, scope: !3819, inlinedAt: !3480)
!3825 = !DILocation(line: 234, column: 6, scope: !3819, inlinedAt: !3480)
!3826 = !DILocation(line: 234, column: 13, scope: !3819, inlinedAt: !3480)
!3827 = !DILocation(line: 234, column: 19, scope: !3819, inlinedAt: !3480)
!3828 = !DILocation(line: 234, column: 11, scope: !3819, inlinedAt: !3480)
!3829 = !DILocation(line: 234, column: 24, scope: !3819, inlinedAt: !3480)
!3830 = !DILocation(line: 235, column: 27, scope: !3819, inlinedAt: !3480)
!3831 = !DILocation(line: 235, column: 13, scope: !3819, inlinedAt: !3480)
!3832 = !DILocation(line: 235, column: 33, scope: !3819, inlinedAt: !3480)
!3833 = !DILocation(line: 236, column: 8, scope: !3819, inlinedAt: !3480)
!3834 = !DILocation(line: 236, column: 13, scope: !3819, inlinedAt: !3480)
!3835 = !DILocation(line: 236, column: 21, scope: !3819, inlinedAt: !3480)
!3836 = !DILocation(line: 238, column: 10, scope: !3837, inlinedAt: !3480)
!3837 = distinct !DILexicalBlock(scope: !3819, file: !41, line: 237, column: 4)
!3838 = !DILocation(line: 239, column: 5, scope: !3837, inlinedAt: !3480)
!3839 = !DILocation(line: 240, column: 5, scope: !3837, inlinedAt: !3480)
!3840 = !DILocation(line: 231, column: 28, scope: !3815, inlinedAt: !3480)
!3841 = !DILocation(line: 243, column: 7, scope: !3778, inlinedAt: !3480)
!3842 = !DILocation(line: 245, column: 9, scope: !3843, inlinedAt: !3480)
!3843 = distinct !DILexicalBlock(scope: !3778, file: !41, line: 244, column: 3)
!3844 = !DILocation(line: 245, column: 26, scope: !3843, inlinedAt: !3480)
!3845 = !DILocation(line: 247, column: 7, scope: !3846, inlinedAt: !3480)
!3846 = distinct !DILexicalBlock(scope: !3843, file: !41, line: 246, column: 4)
!3847 = !DILocation(line: 247, column: 12, scope: !3846, inlinedAt: !3480)
!3848 = !DILocation(line: 248, column: 10, scope: !3846, inlinedAt: !3480)
!3849 = !DILocation(line: 252, column: 8, scope: !3850, inlinedAt: !3480)
!3850 = distinct !DILexicalBlock(scope: !3843, file: !41, line: 251, column: 4)
!3851 = !DILocation(line: 252, column: 5, scope: !3850, inlinedAt: !3480)
!3852 = !DILocalVariable(name: "y", scope: !3479, file: !2, line: 258, type: !2464, align: 8)
!3853 = !DILocation(line: 258, column: 9, scope: !3479, inlinedAt: !3480)
!3854 = !DILocalVariable(name: "i", scope: !3479, file: !2, line: 259, type: !18, align: 4)
!3855 = !DILocation(line: 259, column: 6, scope: !3479, inlinedAt: !3480)
!3856 = !DILocation(line: 260, column: 11, scope: !3857, inlinedAt: !3480)
!3857 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 260, column: 2)
!3858 = !DILocation(line: 260, column: 14, scope: !3857, inlinedAt: !3480)
!3859 = !DILocation(line: 262, column: 8, scope: !3860, inlinedAt: !3480)
!3860 = distinct !DILexicalBlock(scope: !3857, file: !41, line: 261, column: 2)
!3861 = !DILocation(line: 262, column: 12, scope: !3860, inlinedAt: !3480)
!3862 = !DILocation(line: 262, column: 25, scope: !3860, inlinedAt: !3480)
!3863 = !DILocation(line: 262, column: 36, scope: !3860, inlinedAt: !3480)
!3864 = !DILocation(line: 262, column: 31, scope: !3860, inlinedAt: !3480)
!3865 = !DILocation(line: 262, column: 58, scope: !3860, inlinedAt: !3480)
!3866 = !DILocation(line: 263, column: 22, scope: !3860, inlinedAt: !3480)
!3867 = !DILocation(line: 263, column: 7, scope: !3860, inlinedAt: !3480)
!3868 = !DILocation(line: 263, column: 29, scope: !3860, inlinedAt: !3480)
!3869 = !DILocation(line: 263, column: 33, scope: !3860, inlinedAt: !3480)
!3870 = !DILocation(line: 260, column: 27, scope: !3857, inlinedAt: !3480)
!3871 = !DILocation(line: 266, column: 2, scope: !3479, inlinedAt: !3480)
!3872 = !DILocation(line: 266, column: 7, scope: !3479, inlinedAt: !3480)
!3873 = !DILocalVariable(name: "denormal", scope: !3479, file: !2, line: 268, type: !145, align: 1)
!3874 = !DILocation(line: 268, column: 7, scope: !3479, inlinedAt: !3480)
!3875 = !DILocalVariable(name: "bits", scope: !3479, file: !2, line: 270, type: !3, align: 4)
!3876 = !DILocation(line: 270, column: 7, scope: !3479, inlinedAt: !3480)
!3877 = !DILocation(line: 270, column: 14, scope: !3479, inlinedAt: !3480)
!3878 = !DILocation(line: 271, column: 6, scope: !3479, inlinedAt: !3480)
!3879 = !DILocation(line: 271, column: 37, scope: !3479, inlinedAt: !3480)
!3880 = !DILocation(line: 271, column: 13, scope: !3479, inlinedAt: !3480)
!3881 = !DILocation(line: 273, column: 34, scope: !3882, inlinedAt: !3480)
!3882 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 272, column: 2)
!3883 = !DILocation(line: 273, column: 10, scope: !3882, inlinedAt: !3480)
!3884 = !DILocation(line: 274, column: 7, scope: !3882, inlinedAt: !3480)
!3885 = !DILocation(line: 274, column: 24, scope: !3882, inlinedAt: !3480)
!3886 = !DILocation(line: 275, column: 14, scope: !3882, inlinedAt: !3480)
!3887 = !DILocalVariable(name: "bias", scope: !3479, file: !2, line: 279, type: !2464, align: 8)
!3888 = !DILocation(line: 279, column: 9, scope: !3479, inlinedAt: !3480)
!3889 = !DILocalVariable(name: "frac", scope: !3479, file: !2, line: 280, type: !2464, align: 8)
!3890 = !DILocation(line: 280, column: 9, scope: !3479, inlinedAt: !3480)
!3891 = !DILocation(line: 281, column: 6, scope: !3479, inlinedAt: !3480)
!3892 = !DILocation(line: 283, column: 69, scope: !3893, inlinedAt: !3480)
!3893 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 282, column: 2)
!3894 = !DILocation(line: 283, column: 41, scope: !3893, inlinedAt: !3480)
!3895 = !DILocation(line: 1061, column: 52, scope: !3896, inlinedAt: !3897)
!3896 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3897 = !DILocation(line: 283, column: 25, scope: !3893, inlinedAt: !3480)
!3898 = !DILocation(line: 1061, column: 41, scope: !3896, inlinedAt: !3897)
!3899 = !DILocation(line: 42, column: 10, scope: !3900, inlinedAt: !3901)
!3900 = distinct !DISubprogram(name: "promote_int_same", linkageName: "promote_int_same", scope: !2689, file: !2689, line: 30, scopeLine: 30, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3901 = !DILocation(line: 310, column: 40, scope: !3902, inlinedAt: !3903)
!3902 = distinct !DISubprogram(name: "copysign", linkageName: "copysign", scope: !2683, file: !2683, line: 310, scopeLine: 310, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3903 = !DILocation(line: 283, column: 10, scope: !3893, inlinedAt: !3480)
!3904 = !DILocation(line: 310, column: 77, scope: !3902, inlinedAt: !3903)
!3905 = !DILocation(line: 284, column: 10, scope: !3893, inlinedAt: !3480)
!3906 = !DILocation(line: 284, column: 54, scope: !3893, inlinedAt: !3480)
!3907 = !DILocation(line: 284, column: 30, scope: !3893, inlinedAt: !3480)
!3908 = !DILocation(line: 1061, column: 52, scope: !3909, inlinedAt: !3910)
!3909 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3910 = !DILocation(line: 284, column: 14, scope: !3893, inlinedAt: !3480)
!3911 = !DILocation(line: 1061, column: 41, scope: !3909, inlinedAt: !3910)
!3912 = !DILocation(line: 285, column: 3, scope: !3893, inlinedAt: !3480)
!3913 = !DILocation(line: 285, column: 8, scope: !3893, inlinedAt: !3480)
!3914 = !DILocation(line: 286, column: 3, scope: !3893, inlinedAt: !3480)
!3915 = !DILocation(line: 286, column: 8, scope: !3893, inlinedAt: !3480)
!3916 = !DILocation(line: 290, column: 7, scope: !3479, inlinedAt: !3480)
!3917 = !DILocation(line: 290, column: 11, scope: !3479, inlinedAt: !3480)
!3918 = !DILocation(line: 290, column: 24, scope: !3479, inlinedAt: !3480)
!3919 = !DILocalVariable(name: "t", scope: !3920, file: !2, line: 292, type: !3, align: 4)
!3920 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 291, column: 2)
!3921 = !DILocation(line: 292, column: 8, scope: !3920, inlinedAt: !3480)
!3922 = !DILocation(line: 292, column: 15, scope: !3920, inlinedAt: !3480)
!3923 = !DILocation(line: 292, column: 19, scope: !3920, inlinedAt: !3480)
!3924 = !DILocation(line: 295, column: 9, scope: !3925, inlinedAt: !3480)
!3925 = distinct !DILexicalBlock(scope: !3920, file: !41, line: 293, column: 3)
!3926 = !DILocation(line: 295, column: 27, scope: !3925, inlinedAt: !3480)
!3927 = !DILocation(line: 295, column: 33, scope: !3925, inlinedAt: !3480)
!3928 = !DILocation(line: 295, column: 37, scope: !3925, inlinedAt: !3480)
!3929 = !DILocation(line: 295, column: 54, scope: !3925, inlinedAt: !3480)
!3930 = !DILocation(line: 296, column: 5, scope: !3931, inlinedAt: !3480)
!3931 = distinct !DILexicalBlock(scope: !3925, file: !41, line: 296, column: 5)
!3932 = !DILocation(line: 296, column: 20, scope: !3931, inlinedAt: !3480)
!3933 = !DILocation(line: 296, column: 13, scope: !3931, inlinedAt: !3480)
!3934 = !DILocation(line: 297, column: 9, scope: !3925, inlinedAt: !3480)
!3935 = !DILocation(line: 298, column: 5, scope: !3936, inlinedAt: !3480)
!3936 = distinct !DILexicalBlock(scope: !3925, file: !41, line: 298, column: 5)
!3937 = !DILocation(line: 298, column: 20, scope: !3936, inlinedAt: !3480)
!3938 = !DILocation(line: 298, column: 13, scope: !3936, inlinedAt: !3480)
!3939 = !DILocation(line: 299, column: 9, scope: !3925, inlinedAt: !3480)
!3940 = !DILocation(line: 300, column: 10, scope: !3941, inlinedAt: !3480)
!3941 = distinct !DILexicalBlock(scope: !3925, file: !41, line: 300, column: 5)
!3942 = !DILocation(line: 300, column: 14, scope: !3941, inlinedAt: !3480)
!3943 = !DILocation(line: 300, column: 31, scope: !3941, inlinedAt: !3480)
!3944 = !DILocation(line: 302, column: 6, scope: !3945, inlinedAt: !3480)
!3945 = distinct !DILexicalBlock(scope: !3941, file: !41, line: 301, column: 5)
!3946 = !DILocation(line: 302, column: 20, scope: !3945, inlinedAt: !3480)
!3947 = !DILocation(line: 302, column: 14, scope: !3945, inlinedAt: !3480)
!3948 = !DILocation(line: 306, column: 6, scope: !3949, inlinedAt: !3480)
!3949 = distinct !DILexicalBlock(scope: !3941, file: !41, line: 305, column: 5)
!3950 = !DILocation(line: 306, column: 21, scope: !3949, inlinedAt: !3480)
!3951 = !DILocation(line: 306, column: 14, scope: !3949, inlinedAt: !3480)
!3952 = !DILocation(line: 309, column: 31, scope: !3920, inlinedAt: !3480)
!3953 = !DILocation(line: 309, column: 7, scope: !3920, inlinedAt: !3480)
!3954 = !DILocation(line: 309, column: 46, scope: !3920, inlinedAt: !3480)
!3955 = !DILocation(line: 309, column: 57, scope: !3920, inlinedAt: !3480)
!3956 = !DILocation(line: 312, column: 2, scope: !3479, inlinedAt: !3480)
!3957 = !DILocation(line: 312, column: 7, scope: !3479, inlinedAt: !3480)
!3958 = !DILocation(line: 313, column: 2, scope: !3479, inlinedAt: !3480)
!3959 = !DILocation(line: 313, column: 7, scope: !3479, inlinedAt: !3480)
!3960 = !DILocation(line: 315, column: 8, scope: !3479, inlinedAt: !3480)
!3961 = !DILocation(line: 315, column: 49, scope: !3479, inlinedAt: !3480)
!3962 = !DILocation(line: 132, column: 23, scope: !3963, inlinedAt: !3964)
!3963 = distinct !DISubprogram(name: "abs", linkageName: "abs", scope: !2683, file: !2683, line: 132, scopeLine: 132, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3964 = !DILocation(line: 317, column: 7, scope: !3965, inlinedAt: !3480)
!3965 = distinct !DILexicalBlock(scope: !3479, file: !41, line: 316, column: 2)
!3966 = !DILocation(line: 319, column: 8, scope: !3967, inlinedAt: !3480)
!3967 = distinct !DILexicalBlock(scope: !3965, file: !41, line: 318, column: 3)
!3968 = !DILocation(line: 319, column: 20, scope: !3967, inlinedAt: !3480)
!3969 = !DILocation(line: 319, column: 52, scope: !3967, inlinedAt: !3480)
!3970 = !DILocation(line: 319, column: 28, scope: !3967, inlinedAt: !3480)
!3971 = !DILocation(line: 319, column: 75, scope: !3967, inlinedAt: !3480)
!3972 = !DILocation(line: 320, column: 4, scope: !3967, inlinedAt: !3480)
!3973 = !DILocation(line: 321, column: 4, scope: !3967, inlinedAt: !3480)
!3974 = !DILocation(line: 323, column: 7, scope: !3965, inlinedAt: !3480)
!3975 = !DILocation(line: 323, column: 36, scope: !3965, inlinedAt: !3480)
!3976 = !DILocation(line: 323, column: 45, scope: !3965, inlinedAt: !3480)
!3977 = !DILocation(line: 323, column: 57, scope: !3965, inlinedAt: !3480)
!3978 = !DILocation(line: 323, column: 71, scope: !3965, inlinedAt: !3480)
!3979 = !DILocation(line: 1061, column: 52, scope: !3980, inlinedAt: !3981)
!3980 = distinct !DISubprogram(name: "scalbn", linkageName: "scalbn", scope: !2683, file: !2683, line: 1061, scopeLine: 1061, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!3981 = !DILocation(line: 325, column: 9, scope: !3479, inlinedAt: !3480)
!3982 = !DILocation(line: 1061, column: 41, scope: !3980, inlinedAt: !3981)
!3983 = distinct !DISubprogram(name: "splitter", linkageName: "std.core.String.splitter", scope: !2, file: !2, line: 828, type: !3984, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!3984 = !DISubroutineType(types: !3985)
!3985 = !{!3986, !59, !59}
!3986 = !DICompositeType(tag: DW_TAG_structure_type, name: "Splitter", scope: !2, file: !2, line: 838, size: 384, align: 64, elements: !3987, identifier: "std.core.string.Splitter")
!3987 = !{!3988, !3989, !3990, !3991, !3992}
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3986, file: !2, line: 840, baseType: !59, size: 128, align: 64)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !3986, file: !2, line: 841, baseType: !59, size: 128, align: 64, offset: 128)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !3986, file: !2, line: 842, baseType: !66, size: 64, align: 64, offset: 256)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "tokenize", scope: !3986, file: !2, line: 843, baseType: !145, size: 8, align: 8, offset: 320)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "last_index", scope: !3986, file: !2, line: 844, baseType: !18, size: 32, align: 32, offset: 352)
!3993 = !DILocalVariable(name: "self", arg: 1, scope: !3983, file: !2, line: 828, type: !59)
!3994 = !DILocation(line: 828, column: 29, scope: !3983)
!3995 = !DILocalVariable(name: "split", arg: 2, scope: !3983, file: !2, line: 828, type: !59)
!3996 = !DILocation(line: 828, column: 42, scope: !3983)
!3997 = !DILocation(line: 830, column: 21, scope: !3983)
!3998 = !DILocation(line: 830, column: 36, scope: !3983)
!3999 = distinct !DISubprogram(name: "tokenize", linkageName: "std.core.String.tokenize", scope: !2, file: !2, line: 833, type: !3984, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4000 = !DILocalVariable(name: "self", arg: 1, scope: !3999, file: !2, line: 833, type: !59)
!4001 = !DILocation(line: 833, column: 29, scope: !3999)
!4002 = !DILocalVariable(name: "split", arg: 2, scope: !3999, file: !2, line: 833, type: !59)
!4003 = !DILocation(line: 833, column: 42, scope: !3999)
!4004 = !DILocation(line: 835, column: 21, scope: !3999)
!4005 = !DILocation(line: 835, column: 36, scope: !3999)
!4006 = !DILocation(line: 835, column: 55, scope: !3999)
!4007 = distinct !DISubprogram(name: "reset", linkageName: "std.core.string.Splitter.reset", scope: !2, file: !2, line: 847, type: !4008, scopeLine: 847, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4008 = !DISubroutineType(types: !4009)
!4009 = !{null, !4010}
!4010 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "Splitter*", baseType: !3986, size: 64, align: 64, dwarfAddressSpace: 0)
!4011 = !DILocation(line: 848, column: 1, scope: !4007)
!4012 = !DILocalVariable(name: "self", arg: 1, scope: !4007, file: !2, line: 847, type: !4010)
!4013 = !DILocation(line: 847, column: 24, scope: !4007)
!4014 = !DILocation(line: 849, column: 2, scope: !4007)
!4015 = !DILocation(line: 849, column: 17, scope: !4007)
!4016 = distinct !DISubprogram(name: "next", linkageName: "std.core.string.Splitter.next", scope: !2, file: !2, line: 852, type: !4017, scopeLine: 852, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4017 = !DISubroutineType(types: !4018)
!4018 = !{!344, !202, !4010}
!4019 = !DILocation(line: 853, column: 1, scope: !4016)
!4020 = !DILocalVariable(name: "self", arg: 1, scope: !4016, file: !2, line: 852, type: !4010)
!4021 = !DILocation(line: 852, column: 26, scope: !4016)
!4022 = !DILocation(line: 854, column: 2, scope: !4016)
!4023 = !DILocalVariable(name: "len", scope: !4024, file: !2, line: 856, type: !66, align: 8)
!4024 = distinct !DILexicalBlock(scope: !4025, file: !2, line: 855, column: 2)
!4025 = distinct !DILexicalBlock(scope: !4016, file: !2, line: 854, column: 2)
!4026 = !DILocation(line: 856, column: 7, scope: !4024)
!4027 = !DILocation(line: 856, column: 13, scope: !4024)
!4028 = !DILocalVariable(name: "current", scope: !4024, file: !2, line: 857, type: !66, align: 8)
!4029 = !DILocation(line: 857, column: 7, scope: !4024)
!4030 = !DILocation(line: 857, column: 17, scope: !4024)
!4031 = !DILocation(line: 858, column: 7, scope: !4024)
!4032 = !DILocation(line: 858, column: 18, scope: !4024)
!4033 = !DILocation(line: 858, column: 30, scope: !4024)
!4034 = !DILocalVariable(name: "remaining", scope: !4024, file: !2, line: 859, type: !59, align: 8)
!4035 = !DILocation(line: 859, column: 10, scope: !4024)
!4036 = !DILocation(line: 859, column: 22, scope: !4024)
!4037 = !DILocation(line: 859, column: 34, scope: !4024)
!4038 = !DILocalVariable(name: "next", scope: !4024, file: !2, line: 860, type: !67, align: 8)
!4039 = !DILocation(line: 860, column: 8, scope: !4024)
!4040 = !DILocation(line: 860, column: 34, scope: !4024)
!4041 = !DILocation(line: 860, column: 15, scope: !4024)
!4042 = !DILocation(line: 861, column: 7, scope: !4024)
!4043 = !DILocation(line: 863, column: 4, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4024, file: !2, line: 862, column: 3)
!4045 = !DILocation(line: 863, column: 19, scope: !4044)
!4046 = !DILocation(line: 863, column: 29, scope: !4044)
!4047 = !DILocation(line: 863, column: 36, scope: !4044)
!4048 = !DILocation(line: 864, column: 8, scope: !4044)
!4049 = !DILocation(line: 864, column: 17, scope: !4044)
!4050 = !DILocation(line: 864, column: 32, scope: !4044)
!4051 = !DILocation(line: 865, column: 11, scope: !4044)
!4052 = !DILocation(line: 865, column: 21, scope: !4044)
!4053 = !DILocation(line: 865, column: 22, scope: !4044)
!4054 = !DILocation(line: 867, column: 3, scope: !4024)
!4055 = !DILocation(line: 867, column: 18, scope: !4024)
!4056 = !DILocation(line: 868, column: 10, scope: !4024)
!4057 = distinct !DISubprogram(name: "tformat_zstr", linkageName: "std.core.string.tformat_zstr", scope: !2, file: !2, line: 42, type: !4058, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4058 = !DISubroutineType(types: !4059)
!4059 = !{!616, !59, !4060}
!4060 = !DICompositeType(tag: DW_TAG_structure_type, name: "any[]", size: 128, align: 64, elements: !4061, identifier: "any[]")
!4061 = !{!4062, !4068}
!4062 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4060, baseType: !4063, size: 64, align: 64)
!4063 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "any*", baseType: !4064, size: 64, align: 64, dwarfAddressSpace: 0)
!4064 = !DICompositeType(tag: DW_TAG_structure_type, name: "any", size: 128, align: 64, elements: !4065, identifier: "any")
!4065 = !{!4066, !4067}
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4064, baseType: !207, size: 64, align: 64)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4064, baseType: !209, size: 64, align: 64, offset: 64)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4060, baseType: !66, size: 64, align: 64, offset: 64)
!4069 = !DILocalVariable(name: "fmt", arg: 1, scope: !4057, file: !2, line: 42, type: !59)
!4070 = !DILocation(line: 42, column: 32, scope: !4057)
!4071 = !DILocalVariable(name: "args", arg: 2, scope: !4057, file: !2, line: 42, type: !4060)
!4072 = !DILocation(line: 42, column: 37, scope: !4057)
!4073 = !DILocalVariable(name: "str", scope: !4057, file: !2, line: 44, type: !4074, align: 8)
!4074 = !DIDerivedType(tag: DW_TAG_typedef, name: "DString", scope: !2, file: !2, line: 4, baseType: !4075, align: 8)
!4075 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "DStringOpaque*", baseType: !4076, size: 64, align: 64, dwarfAddressSpace: 0)
!4076 = !DIDerivedType(tag: DW_TAG_typedef, name: "DStringOpaque", scope: !2, file: !2, line: 5, baseType: null, align: 1)
!4077 = !DILocation(line: 44, column: 10, scope: !4057)
!4078 = !DILocation(line: 44, column: 44, scope: !4057)
!4079 = !DILocation(line: 44, column: 54, scope: !4057)
!4080 = !DILocation(line: 44, column: 16, scope: !4057)
!4081 = !DILocation(line: 45, column: 2, scope: !4057)
!4082 = !DILocation(line: 46, column: 9, scope: !4057)
!4083 = distinct !DISubprogram(name: "format", linkageName: "std.core.string.format", scope: !2, file: !2, line: 55, type: !4084, scopeLine: 55, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4084 = !DISubroutineType(types: !4085)
!4085 = !{!59, !59, !4060, !204}
!4086 = !DILocalVariable(name: "fmt", arg: 1, scope: !4083, file: !2, line: 55, type: !59)
!4087 = !DILocation(line: 55, column: 25, scope: !4083)
!4088 = !DILocalVariable(name: "args", arg: 2, scope: !4083, file: !2, line: 55, type: !4060)
!4089 = !DILocation(line: 55, column: 30, scope: !4083)
!4090 = !DILocalVariable(name: "allocator", arg: 3, scope: !4083, file: !2, line: 55, type: !204)
!4091 = !DILocation(line: 55, column: 49, scope: !4083)
!4092 = !DILocalVariable(name: "current", scope: !4093, file: !2, line: 592, type: !4094, align: 8)
!4093 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !685, file: !685, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4094 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocator*", baseType: !4095, size: 64, align: 64, dwarfAddressSpace: 0)
!4095 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocator", scope: !2, file: !2, line: 10, size: 320, align: 64, elements: !4096, identifier: "std.core.mem.allocator.TempAllocator")
!4096 = !{!4097, !4098, !4111, !4112, !4113}
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "backing_allocator", scope: !4095, file: !2, line: 12, baseType: !204, size: 128, align: 64)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "last_page", scope: !4095, file: !2, line: 13, baseType: !4099, size: 64, align: 64, offset: 128)
!4099 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "TempAllocatorPage*", baseType: !4100, size: 64, align: 64, dwarfAddressSpace: 0)
!4100 = !DICompositeType(tag: DW_TAG_structure_type, name: "TempAllocatorPage", scope: !2, file: !2, line: 22, size: 320, align: 64, elements: !4101, identifier: "std.core.mem.allocator.TempAllocatorPage")
!4101 = !{!4102, !4103, !4104, !4105, !4106, !4107}
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "prev_page", scope: !4100, file: !2, line: 24, baseType: !4099, size: 64, align: 64)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !4100, file: !2, line: 25, baseType: !207, size: 64, align: 64, offset: 64)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "mark", scope: !4100, file: !2, line: 26, baseType: !66, size: 64, align: 64, offset: 128)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4100, file: !2, line: 27, baseType: !66, size: 64, align: 64, offset: 192)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "ident", scope: !4100, file: !2, line: 28, baseType: !66, size: 64, align: 64, offset: 256)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4100, file: !2, line: 29, baseType: !4108, align: 8, offset: 320)
!4108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, align: 8, elements: !4109)
!4109 = !{!4110}
!4110 = !DISubrange(count: 0, lowerBound: 0)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !4095, file: !2, line: 14, baseType: !66, size: 64, align: 64, offset: 192)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !4095, file: !2, line: 15, baseType: !66, size: 64, align: 64, offset: 256)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4095, file: !2, line: 16, baseType: !4108, align: 8, offset: 320)
!4114 = !DILocation(line: 592, column: 17, scope: !4093, inlinedAt: !4115)
!4115 = !DILocation(line: 57, column: 2, scope: !4083)
!4116 = !DILocation(line: 396, column: 6, scope: !4117, inlinedAt: !4118)
!4117 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4118 = !DILocation(line: 592, column: 27, scope: !4093, inlinedAt: !4115)
!4119 = !DILocation(line: 398, column: 3, scope: !4120, inlinedAt: !4118)
!4120 = distinct !DILexicalBlock(scope: !4117, file: !232, line: 397, column: 2)
!4121 = !DILocation(line: 400, column: 9, scope: !4117, inlinedAt: !4118)
!4122 = !DILocalVariable(name: "original", scope: !4093, file: !2, line: 594, type: !4094, align: 8)
!4123 = !DILocation(line: 594, column: 18, scope: !4093, inlinedAt: !4115)
!4124 = !DILocation(line: 594, column: 29, scope: !4093, inlinedAt: !4115)
!4125 = !DILocation(line: 595, column: 7, scope: !4093, inlinedAt: !4115)
!4126 = !DILocation(line: 595, column: 18, scope: !4093, inlinedAt: !4115)
!4127 = !DILocation(line: 595, column: 45, scope: !4093, inlinedAt: !4115)
!4128 = !DILocalVariable(name: "mark", scope: !4093, file: !2, line: 597, type: !66, align: 8)
!4129 = !DILocation(line: 597, column: 6, scope: !4093, inlinedAt: !4115)
!4130 = !DILocation(line: 597, column: 13, scope: !4093, inlinedAt: !4115)
!4131 = !DILocalVariable(name: "str", scope: !4132, file: !2, line: 59, type: !4074, align: 8)
!4132 = distinct !DILexicalBlock(scope: !4083, file: !2, line: 58, column: 2)
!4133 = !DILocation(line: 59, column: 11, scope: !4132)
!4134 = !DILocation(line: 59, column: 45, scope: !4132)
!4135 = !DILocation(line: 59, column: 55, scope: !4132)
!4136 = !DILocation(line: 59, column: 17, scope: !4132)
!4137 = !DILocation(line: 60, column: 3, scope: !4132)
!4138 = !DILocation(line: 61, column: 23, scope: !4132)
!4139 = !DILocation(line: 61, column: 10, scope: !4132)
!4140 = !DILocation(line: 600, column: 17, scope: !4141, inlinedAt: !4115)
!4141 = distinct !DILexicalBlock(scope: !4093, file: !685, line: 599, column: 2)
!4142 = !DILocation(line: 600, column: 3, scope: !4141, inlinedAt: !4115)
!4143 = !DILocation(line: 602, column: 39, scope: !4141, inlinedAt: !4115)
!4144 = distinct !DISubprogram(name: "new_format", linkageName: "std.core.string.new_format", scope: !2, file: !2, line: 70, type: !4084, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4145 = !DILocalVariable(name: "fmt", arg: 1, scope: !4144, file: !2, line: 70, type: !59)
!4146 = !DILocation(line: 70, column: 29, scope: !4144)
!4147 = !DILocalVariable(name: "args", arg: 2, scope: !4144, file: !2, line: 70, type: !4060)
!4148 = !DILocation(line: 70, column: 34, scope: !4144)
!4149 = !DILocalVariable(name: "allocator", arg: 3, scope: !4144, file: !2, line: 70, type: !204)
!4150 = !DILocation(line: 70, column: 53, scope: !4144)
!4151 = !DILocation(line: 70, column: 106, scope: !4144)
!4152 = !DILocation(line: 392, column: 27, scope: !4153, inlinedAt: !4154)
!4153 = distinct !DISubprogram(name: "heap", linkageName: "heap", scope: !232, file: !232, line: 392, scopeLine: 392, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4154 = !DILocation(line: 70, column: 119, scope: !4144)
!4155 = !DILocation(line: 70, column: 74, scope: !4144)
!4156 = distinct !DISubprogram(name: "tformat", linkageName: "std.core.string.tformat", scope: !2, file: !2, line: 77, type: !4157, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4157 = !DISubroutineType(types: !4158)
!4158 = !{!59, !59, !4060}
!4159 = !DILocalVariable(name: "fmt", arg: 1, scope: !4156, file: !2, line: 77, type: !59)
!4160 = !DILocation(line: 77, column: 26, scope: !4156)
!4161 = !DILocalVariable(name: "args", arg: 2, scope: !4156, file: !2, line: 77, type: !4060)
!4162 = !DILocation(line: 77, column: 31, scope: !4156)
!4163 = !DILocalVariable(name: "str", scope: !4156, file: !2, line: 79, type: !4074, align: 8)
!4164 = !DILocation(line: 79, column: 10, scope: !4156)
!4165 = !DILocation(line: 79, column: 44, scope: !4156)
!4166 = !DILocation(line: 79, column: 54, scope: !4156)
!4167 = !DILocation(line: 79, column: 16, scope: !4156)
!4168 = !DILocation(line: 80, column: 2, scope: !4156)
!4169 = !DILocation(line: 81, column: 9, scope: !4156)
!4170 = distinct !DISubprogram(name: "new_format_zstr", linkageName: "std.core.string.new_format_zstr", scope: !2, file: !2, line: 90, type: !4171, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4171 = !DISubroutineType(types: !4172)
!4172 = !{!616, !59, !4060, !204}
!4173 = !DILocalVariable(name: "fmt", arg: 1, scope: !4170, file: !2, line: 90, type: !59)
!4174 = !DILocation(line: 90, column: 35, scope: !4170)
!4175 = !DILocalVariable(name: "args", arg: 2, scope: !4170, file: !2, line: 90, type: !4060)
!4176 = !DILocation(line: 90, column: 40, scope: !4170)
!4177 = !DILocalVariable(name: "allocator", arg: 3, scope: !4170, file: !2, line: 90, type: !204)
!4178 = !DILocation(line: 90, column: 59, scope: !4170)
!4179 = !DILocalVariable(name: "current", scope: !4180, file: !2, line: 592, type: !4094, align: 8)
!4180 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !685, file: !685, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4181 = !DILocation(line: 592, column: 17, scope: !4180, inlinedAt: !4182)
!4182 = !DILocation(line: 92, column: 2, scope: !4170)
!4183 = !DILocation(line: 396, column: 6, scope: !4184, inlinedAt: !4185)
!4184 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4185 = !DILocation(line: 592, column: 27, scope: !4180, inlinedAt: !4182)
!4186 = !DILocation(line: 398, column: 3, scope: !4187, inlinedAt: !4185)
!4187 = distinct !DILexicalBlock(scope: !4184, file: !232, line: 397, column: 2)
!4188 = !DILocation(line: 400, column: 9, scope: !4184, inlinedAt: !4185)
!4189 = !DILocalVariable(name: "original", scope: !4180, file: !2, line: 594, type: !4094, align: 8)
!4190 = !DILocation(line: 594, column: 18, scope: !4180, inlinedAt: !4182)
!4191 = !DILocation(line: 594, column: 29, scope: !4180, inlinedAt: !4182)
!4192 = !DILocation(line: 595, column: 7, scope: !4180, inlinedAt: !4182)
!4193 = !DILocation(line: 595, column: 18, scope: !4180, inlinedAt: !4182)
!4194 = !DILocation(line: 595, column: 45, scope: !4180, inlinedAt: !4182)
!4195 = !DILocalVariable(name: "mark", scope: !4180, file: !2, line: 597, type: !66, align: 8)
!4196 = !DILocation(line: 597, column: 6, scope: !4180, inlinedAt: !4182)
!4197 = !DILocation(line: 597, column: 13, scope: !4180, inlinedAt: !4182)
!4198 = !DILocalVariable(name: "str", scope: !4199, file: !2, line: 94, type: !4074, align: 8)
!4199 = distinct !DILexicalBlock(scope: !4170, file: !2, line: 93, column: 2)
!4200 = !DILocation(line: 94, column: 11, scope: !4199)
!4201 = !DILocation(line: 94, column: 45, scope: !4199)
!4202 = !DILocation(line: 94, column: 55, scope: !4199)
!4203 = !DILocation(line: 94, column: 17, scope: !4199)
!4204 = !DILocation(line: 95, column: 3, scope: !4199)
!4205 = !DILocation(line: 96, column: 24, scope: !4199)
!4206 = !DILocation(line: 96, column: 10, scope: !4199)
!4207 = !DILocation(line: 600, column: 17, scope: !4208, inlinedAt: !4182)
!4208 = distinct !DILexicalBlock(scope: !4180, file: !685, line: 599, column: 2)
!4209 = !DILocation(line: 600, column: 3, scope: !4208, inlinedAt: !4182)
!4210 = !DILocation(line: 602, column: 39, scope: !4208, inlinedAt: !4182)
!4211 = !DILocation(line: 603, column: 9, scope: !4208, inlinedAt: !4182)
!4212 = distinct !DISubprogram(name: "join_new", linkageName: "std.core.string.join_new", scope: !2, file: !2, line: 114, type: !4213, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4213 = !DISubroutineType(types: !4214)
!4214 = !{!59, !199, !59, !204}
!4215 = !DILocalVariable(name: "s", arg: 1, scope: !4212, file: !2, line: 114, type: !199)
!4216 = !DILocation(line: 114, column: 29, scope: !4212)
!4217 = !DILocalVariable(name: "joiner", arg: 2, scope: !4212, file: !2, line: 114, type: !59)
!4218 = !DILocation(line: 114, column: 39, scope: !4212)
!4219 = !DILocalVariable(name: "allocator", arg: 3, scope: !4212, file: !2, line: 114, type: !204)
!4220 = !DILocation(line: 114, column: 57, scope: !4212)
!4221 = !DILocation(line: 116, column: 7, scope: !4212)
!4222 = !DILocation(line: 252, column: 55, scope: !4223, inlinedAt: !4224)
!4223 = distinct !DISubprogram(name: "new_array_try", linkageName: "new_array_try", scope: !232, file: !232, line: 250, scopeLine: 250, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4224 = !DILocation(line: 244, column: 9, scope: !4225, inlinedAt: !4226)
!4225 = distinct !DISubprogram(name: "new_array", linkageName: "new_array", scope: !232, file: !232, line: 242, scopeLine: 242, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4226 = !DILocation(line: 118, column: 18, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4212, file: !2, line: 117, column: 2)
!4228 = !DILocation(line: 252, column: 40, scope: !4223, inlinedAt: !4224)
!4229 = !DILocation(line: 79, column: 6, scope: !4230, inlinedAt: !4231)
!4230 = distinct !DISubprogram(name: "calloc_try", linkageName: "calloc_try", scope: !232, file: !232, line: 77, scopeLine: 77, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4231 = !DILocation(line: 252, column: 18, scope: !4223, inlinedAt: !4224)
!4232 = !DILocation(line: 79, column: 20, scope: !4230, inlinedAt: !4231)
!4233 = !DILocation(line: 28, column: 71, scope: !4234, inlinedAt: !4235)
!4234 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4235 = !DILocation(line: 80, column: 9, scope: !4230, inlinedAt: !4231)
!4236 = !DILocation(line: 252, column: 67, scope: !4223, inlinedAt: !4224)
!4237 = !DILocation(line: 118, column: 11, scope: !4227)
!4238 = !DILocalVariable(name: "total_size", scope: !4212, file: !2, line: 121, type: !66, align: 8)
!4239 = !DILocation(line: 121, column: 6, scope: !4212)
!4240 = !DILocation(line: 121, column: 19, scope: !4212)
!4241 = !DILocation(line: 121, column: 32, scope: !4212)
!4242 = !DILocation(line: 122, column: 26, scope: !4243)
!4243 = distinct !DILexicalBlock(scope: !4212, file: !2, line: 122, column: 2)
!4244 = !DILocalVariable(name: ".temp", scope: !4243, file: !2, line: 122, type: !66, align: 8)
!4245 = !DILocalVariable(name: "str", scope: !4246, file: !2, line: 122, type: !202, align: 8)
!4246 = distinct !DILexicalBlock(scope: !4243, file: !2, line: 123, column: 2)
!4247 = !DILocation(line: 122, column: 20, scope: !4246)
!4248 = !DILocation(line: 122, column: 26, scope: !4246)
!4249 = !DILocation(line: 124, column: 3, scope: !4250)
!4250 = distinct !DILexicalBlock(scope: !4246, file: !2, line: 123, column: 2)
!4251 = !DILocation(line: 124, column: 17, scope: !4250)
!4252 = !DILocalVariable(name: "current", scope: !4253, file: !2, line: 592, type: !4094, align: 8)
!4253 = distinct !DISubprogram(name: "@pool", linkageName: "@pool", scope: !685, file: !685, line: 590, scopeLine: 590, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4254 = !DILocation(line: 592, column: 17, scope: !4253, inlinedAt: !4255)
!4255 = !DILocation(line: 126, column: 2, scope: !4212)
!4256 = !DILocation(line: 396, column: 6, scope: !4257, inlinedAt: !4258)
!4257 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4258 = !DILocation(line: 592, column: 27, scope: !4253, inlinedAt: !4255)
!4259 = !DILocation(line: 398, column: 3, scope: !4260, inlinedAt: !4258)
!4260 = distinct !DILexicalBlock(scope: !4257, file: !232, line: 397, column: 2)
!4261 = !DILocation(line: 400, column: 9, scope: !4257, inlinedAt: !4258)
!4262 = !DILocalVariable(name: "original", scope: !4253, file: !2, line: 594, type: !4094, align: 8)
!4263 = !DILocation(line: 594, column: 18, scope: !4253, inlinedAt: !4255)
!4264 = !DILocation(line: 594, column: 29, scope: !4253, inlinedAt: !4255)
!4265 = !DILocation(line: 595, column: 7, scope: !4253, inlinedAt: !4255)
!4266 = !DILocation(line: 595, column: 18, scope: !4253, inlinedAt: !4255)
!4267 = !DILocation(line: 595, column: 45, scope: !4253, inlinedAt: !4255)
!4268 = !DILocalVariable(name: "mark", scope: !4253, file: !2, line: 597, type: !66, align: 8)
!4269 = !DILocation(line: 597, column: 6, scope: !4253, inlinedAt: !4255)
!4270 = !DILocation(line: 597, column: 13, scope: !4253, inlinedAt: !4255)
!4271 = !DILocalVariable(name: "res", scope: !4272, file: !2, line: 128, type: !4074, align: 8)
!4272 = distinct !DILexicalBlock(scope: !4212, file: !2, line: 127, column: 2)
!4273 = !DILocation(line: 128, column: 11, scope: !4272)
!4274 = !DILocation(line: 128, column: 45, scope: !4272)
!4275 = !DILocation(line: 128, column: 17, scope: !4272)
!4276 = !DILocation(line: 129, column: 14, scope: !4272)
!4277 = !DILocation(line: 129, column: 16, scope: !4272)
!4278 = !DILocation(line: 397, column: 22, scope: !4279, inlinedAt: !4281)
!4279 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4280, file: !4280, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4280 = !DIFile(filename: "dstring.c3", directory: "/opt/homebrew/lib/c3/std/core")
!4281 = !DILocation(line: 129, column: 3, scope: !4272)
!4282 = !DILocation(line: 397, column: 4, scope: !4279, inlinedAt: !4281)
!4283 = !DILocation(line: 130, column: 27, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4272, file: !2, line: 130, column: 3)
!4285 = !DILocation(line: 130, column: 29, scope: !4284)
!4286 = !DILocalVariable(name: ".temp", scope: !4284, file: !2, line: 130, type: !66, align: 8)
!4287 = !DILocalVariable(name: "str", scope: !4288, file: !2, line: 130, type: !202, align: 8)
!4288 = distinct !DILexicalBlock(scope: !4284, file: !2, line: 131, column: 3)
!4289 = !DILocation(line: 130, column: 21, scope: !4288)
!4290 = !DILocation(line: 130, column: 27, scope: !4288)
!4291 = !DILocation(line: 397, column: 22, scope: !4292, inlinedAt: !4293)
!4292 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4280, file: !4280, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4293 = !DILocation(line: 132, column: 4, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4288, file: !2, line: 131, column: 3)
!4295 = !DILocation(line: 397, column: 4, scope: !4292, inlinedAt: !4293)
!4296 = !DILocation(line: 133, column: 16, scope: !4294)
!4297 = !DILocation(line: 397, column: 22, scope: !4298, inlinedAt: !4299)
!4298 = distinct !DISubprogram(name: "append", linkageName: "append", scope: !4280, file: !4280, line: 387, scopeLine: 387, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4299 = !DILocation(line: 133, column: 4, scope: !4294)
!4300 = !DILocation(line: 397, column: 4, scope: !4298, inlinedAt: !4299)
!4301 = !DILocation(line: 135, column: 23, scope: !4272)
!4302 = !DILocation(line: 135, column: 10, scope: !4272)
!4303 = !DILocation(line: 600, column: 17, scope: !4304, inlinedAt: !4255)
!4304 = distinct !DILexicalBlock(scope: !4253, file: !685, line: 599, column: 2)
!4305 = !DILocation(line: 600, column: 3, scope: !4304, inlinedAt: !4255)
!4306 = !DILocation(line: 602, column: 39, scope: !4304, inlinedAt: !4255)
!4307 = distinct !DISubprogram(name: "new_from_utf32", linkageName: "std.core.string.new_from_utf32", scope: !2, file: !2, line: 697, type: !4308, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4308 = !DISubroutineType(types: !4309)
!4309 = !{!344, !202, !4310, !204}
!4310 = !DICompositeType(tag: DW_TAG_structure_type, name: "uint[]", size: 128, align: 64, elements: !4311, identifier: "uint[]")
!4311 = !{!4312, !4313}
!4312 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4310, baseType: !2066, size: 64, align: 64)
!4313 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4310, baseType: !66, size: 64, align: 64, offset: 64)
!4314 = !DILocalVariable(name: "utf32", arg: 1, scope: !4307, file: !2, line: 697, type: !970)
!4315 = !DILocation(line: 697, column: 36, scope: !4307)
!4316 = !DILocalVariable(name: "allocator", arg: 2, scope: !4307, file: !2, line: 697, type: !204)
!4317 = !DILocation(line: 697, column: 53, scope: !4307)
!4318 = !DILocalVariable(name: "len", scope: !4307, file: !2, line: 699, type: !66, align: 8)
!4319 = !DILocation(line: 699, column: 6, scope: !4307)
!4320 = !DILocation(line: 699, column: 36, scope: !4307)
!4321 = !DILocation(line: 699, column: 12, scope: !4307)
!4322 = !DILocalVariable(name: "data", scope: !4307, file: !2, line: 700, type: !63, align: 8)
!4323 = !DILocation(line: 700, column: 8, scope: !4307)
!4324 = !DILocation(line: 700, column: 48, scope: !4307)
!4325 = !DILocation(line: 62, column: 6, scope: !4326, inlinedAt: !4327)
!4326 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4327 = !DILocation(line: 700, column: 15, scope: !4307)
!4328 = !DILocation(line: 62, column: 20, scope: !4326, inlinedAt: !4327)
!4329 = !DILocation(line: 28, column: 71, scope: !4330, inlinedAt: !4331)
!4330 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4331 = !DILocation(line: 68, column: 10, scope: !4326, inlinedAt: !4327)
!4332 = !DILocation(line: 702, column: 31, scope: !4307)
!4333 = !DILocation(line: 702, column: 2, scope: !4307)
!4334 = !DILocation(line: 703, column: 2, scope: !4307)
!4335 = !DILocation(line: 703, column: 7, scope: !4307)
!4336 = !DILocation(line: 703, column: 14, scope: !4307)
!4337 = !DILocation(line: 704, column: 17, scope: !4307)
!4338 = !DILocation(line: 704, column: 23, scope: !4307)
!4339 = distinct !DISubprogram(name: "new_from_utf16", linkageName: "std.core.string.new_from_utf16", scope: !2, file: !2, line: 707, type: !4340, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4340 = !DISubroutineType(types: !4341)
!4341 = !{!344, !202, !4342, !204}
!4342 = !DICompositeType(tag: DW_TAG_structure_type, name: "ushort[]", size: 128, align: 64, elements: !4343, identifier: "ushort[]")
!4343 = !{!4344, !4345}
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4342, baseType: !944, size: 64, align: 64)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4342, baseType: !66, size: 64, align: 64, offset: 64)
!4346 = !DILocalVariable(name: "utf16", arg: 1, scope: !4339, file: !2, line: 707, type: !890)
!4347 = !DILocation(line: 707, column: 36, scope: !4339)
!4348 = !DILocalVariable(name: "allocator", arg: 2, scope: !4339, file: !2, line: 707, type: !204)
!4349 = !DILocation(line: 707, column: 53, scope: !4339)
!4350 = !DILocalVariable(name: "len", scope: !4339, file: !2, line: 709, type: !66, align: 8)
!4351 = !DILocation(line: 709, column: 6, scope: !4339)
!4352 = !DILocation(line: 709, column: 36, scope: !4339)
!4353 = !DILocation(line: 709, column: 12, scope: !4339)
!4354 = !DILocalVariable(name: "data", scope: !4339, file: !2, line: 710, type: !63, align: 8)
!4355 = !DILocation(line: 710, column: 8, scope: !4339)
!4356 = !DILocation(line: 710, column: 48, scope: !4339)
!4357 = !DILocation(line: 62, column: 6, scope: !4358, inlinedAt: !4359)
!4358 = distinct !DISubprogram(name: "malloc_try", linkageName: "malloc_try", scope: !232, file: !232, line: 60, scopeLine: 60, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4359 = !DILocation(line: 710, column: 15, scope: !4339)
!4360 = !DILocation(line: 62, column: 20, scope: !4358, inlinedAt: !4359)
!4361 = !DILocation(line: 28, column: 71, scope: !4362, inlinedAt: !4363)
!4362 = distinct !DISubprogram(name: "[DEFAULT INIT]", linkageName: "[DEFAULT INIT]", scope: !232, file: !232, line: 28, scopeLine: 28, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4363 = !DILocation(line: 68, column: 10, scope: !4358, inlinedAt: !4359)
!4364 = !DILocation(line: 712, column: 31, scope: !4339)
!4365 = !DILocation(line: 712, column: 2, scope: !4339)
!4366 = !DILocation(line: 711, column: 41, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4339, file: !2, line: 711, column: 14)
!4368 = !DILocation(line: 101, column: 6, scope: !4369, inlinedAt: !4370)
!4369 = distinct !DISubprogram(name: "free", linkageName: "free", scope: !232, file: !232, line: 99, scopeLine: 99, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4370 = !DILocation(line: 711, column: 14, scope: !4367)
!4371 = !DILocation(line: 101, column: 18, scope: !4369, inlinedAt: !4370)
!4372 = !DILocation(line: 105, column: 25, scope: !4369, inlinedAt: !4370)
!4373 = !DILocation(line: 105, column: 2, scope: !4369, inlinedAt: !4370)
!4374 = !DILocation(line: 713, column: 2, scope: !4339)
!4375 = !DILocation(line: 713, column: 7, scope: !4339)
!4376 = !DILocation(line: 713, column: 14, scope: !4339)
!4377 = !DILocation(line: 714, column: 17, scope: !4339)
!4378 = !DILocation(line: 714, column: 23, scope: !4339)
!4379 = distinct !DISubprogram(name: "new_from_wstring", linkageName: "std.core.string.new_from_wstring", scope: !2, file: !2, line: 717, type: !4380, scopeLine: 717, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4380 = !DISubroutineType(types: !4381)
!4381 = !{!344, !202, !943, !204}
!4382 = !DILocalVariable(name: "wstring", arg: 1, scope: !4379, file: !2, line: 717, type: !943)
!4383 = !DILocation(line: 717, column: 37, scope: !4379)
!4384 = !DILocalVariable(name: "allocator", arg: 2, scope: !4379, file: !2, line: 717, type: !204)
!4385 = !DILocation(line: 717, column: 56, scope: !4379)
!4386 = !DILocalVariable(name: "utf16_len", scope: !4379, file: !2, line: 719, type: !66, align: 8)
!4387 = !DILocation(line: 719, column: 6, scope: !4379)
!4388 = !DILocation(line: 720, column: 2, scope: !4379)
!4389 = !DILocation(line: 720, column: 9, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4379, file: !2, line: 720, column: 2)
!4391 = !DILocation(line: 720, column: 17, scope: !4390)
!4392 = !DILocation(line: 720, column: 34, scope: !4390)
!4393 = !DILocalVariable(name: "utf16", scope: !4379, file: !2, line: 721, type: !890, align: 8)
!4394 = !DILocation(line: 721, column: 11, scope: !4379)
!4395 = !DILocation(line: 721, column: 19, scope: !4379)
!4396 = !DILocation(line: 721, column: 28, scope: !4379)
!4397 = !DILocation(line: 722, column: 9, scope: !4379)
!4398 = distinct !DISubprogram(name: "temp_from_wstring", linkageName: "std.core.string.temp_from_wstring", scope: !2, file: !2, line: 725, type: !4399, scopeLine: 725, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4399 = !DISubroutineType(types: !4400)
!4400 = !{!344, !202, !943}
!4401 = !DILocalVariable(name: "wstring", arg: 1, scope: !4398, file: !2, line: 725, type: !943)
!4402 = !DILocation(line: 725, column: 38, scope: !4398)
!4403 = !DILocation(line: 396, column: 6, scope: !4404, inlinedAt: !4405)
!4404 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4405 = !DILocation(line: 725, column: 76, scope: !4398)
!4406 = !DILocation(line: 398, column: 3, scope: !4407, inlinedAt: !4405)
!4407 = distinct !DILexicalBlock(scope: !4404, file: !232, line: 397, column: 2)
!4408 = !DILocation(line: 400, column: 9, scope: !4404, inlinedAt: !4405)
!4409 = !DILocation(line: 725, column: 50, scope: !4398)
!4410 = distinct !DISubprogram(name: "temp_from_utf16", linkageName: "std.core.string.temp_from_utf16", scope: !2, file: !2, line: 726, type: !4411, scopeLine: 726, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !68)
!4411 = !DISubroutineType(types: !4412)
!4412 = !{!344, !202, !4342}
!4413 = !DILocalVariable(name: "utf16", arg: 1, scope: !4410, file: !2, line: 726, type: !890)
!4414 = !DILocation(line: 726, column: 37, scope: !4410)
!4415 = !DILocation(line: 396, column: 6, scope: !4416, inlinedAt: !4417)
!4416 = distinct !DISubprogram(name: "temp", linkageName: "temp", scope: !232, file: !232, line: 394, scopeLine: 394, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54)
!4417 = !DILocation(line: 726, column: 69, scope: !4410)
!4418 = !DILocation(line: 398, column: 3, scope: !4419, inlinedAt: !4417)
!4419 = distinct !DILexicalBlock(scope: !4416, file: !232, line: 397, column: 2)
!4420 = !DILocation(line: 400, column: 9, scope: !4416, inlinedAt: !4417)
!4421 = !DILocation(line: 726, column: 47, scope: !4410)
